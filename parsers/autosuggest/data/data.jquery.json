[{"url":"http:\/\/api.jquery.com\/add\/","title":"add","description":"\n\n.add( selector ) Returns: jQuery\n\n\nDescription: Add elements to the set of matched elements.\n\n\n\nversion added: 1.0.add( selector )\nselectorA string representing a selector expression to find additional elements to add to the set of matched elements.\n\n\n\nversion added: 1.0.add( elements )\nelementsOne or more elements to add to the set of matched elements.\n\n\n\nversion added: 1.0.add( html )\nhtmlAn HTML fragment to add to the set of matched elements.\n\n\n\nversion added: 1.3.2.add( jQuery object )\njQuery objectAn existing jQuery object to add to the set of matched elements.\n\n\n\nversion added: 1.4.add( selector, context )\nselectorA string representing a selector expression to find additional elements to add to the set of matched elements.\ncontextThe point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .add() method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to .add() can be pretty much anything that  $() accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.\nThe updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:\n\n$(\"p\").add(\"div\").addClass(\"widget\");\nvar pdiv = $(\"p\").add(\"div\");\n\nThe following will not save the added elements, because the .add() method creates a new set and leaves the original set in pdiv unchanged:\n\nvar pdiv = $(\"p\");\npdiv.add(\"div\");  \/\/ WRONG, pdiv will not change\n\nConsider a page with a simple list and a paragraph following it:\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;p&gt;a paragraph&lt;\/p&gt;\nWe can select the list items and then the paragraph by using either a selector or a reference to the DOM element itself as the .add() method's argument:\n$('li').add('p').css('background-color', 'red');\nOr:\n$('li').add(document.getElementsByTagName('p')[0])\n  .css('background-color', 'red');\nThe result of this call is a red background behind all four elements.\nUsing an HTML snippet as the .add() method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:\n$('li').add('&lt;p id=\"new\"&gt;new paragraph&lt;\/p&gt;')\n  .css('background-color', 'red');\nAlthough the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.\nAs of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).\nNote: To reverse the .add() you can use .not( elements | selector ) to remove elements from the jQuery results, or .end() to return to the selection before you added.\n\nExamples:\n\n\nExample: Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n div { width:60px; height:60px; margin:10px; float:left; }\n p { clear:left; font-weight:bold; font-size:16px; \n     color:blue; margin:0 10px; padding:2px; }\n &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;p&gt;Added this... (notice no border)&lt;\/p&gt;\n&lt;script&gt;\n\n$(\"div\").css(\"border\", \"2px solid red\")\n        .add(\"p\")\n        .css(\"background\", \"yellow\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Adds more elements, matched by the given expression, to the set of matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;span&gt;Hello Again&lt;\/span&gt;\n&lt;script&gt;$(\"p\").add(\"span\").css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Adds more elements, created on the fly, to the set of matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n&lt;script&gt;$(\"p\").clone().add(\"&lt;span&gt;Again&lt;\/span&gt;\").appendTo(document.body);&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Adds one or more Elements to the set of matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;span id=\"a\"&gt;Hello Again&lt;\/span&gt;\n&lt;script&gt;$(\"p\").add(document.getElementById(\"a\")).css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Demonstrates how to add (or push) elements to an existing collection\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;span id=\"a\"&gt;Hello Again&lt;\/span&gt;\n&lt;script&gt;var collection = $(\"p\");\n\/\/ capture the new collection\ncollection = collection.add(document.getElementById(\"a\"));\ncollection.css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxComplete\/","title":"ajaxComplete","description":"\n\n.ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) ) Returns: jQuery\n\n\nDescription: Register a handler to be called when Ajax requests complete. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )\nhandler(event, XMLHttpRequest, ajaxOptions)The function to be invoked.\n\n\nWhenever an Ajax request completes, jQuery triggers the ajaxComplete event. Any and all handlers that have been registered with the .ajaxComplete() method are executed at this time.\nTo observe this method in action, we can set up a basic Ajax load request:\n&lt;div class=\"trigger\"&gt;Trigger&lt;\/div&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\n\nWe can attach our event handler to any element:\n$('.log').ajaxComplete(function() {\n  $(this).text('Triggered ajaxComplete handler.');\n});\n\nNow, we can make an Ajax request using any jQuery method:\n$('.trigger').click(function() {\n  $('.result').load('ajax\/test.html');\n});\nWhen the user clicks the button and the Ajax request completes, the log message is displayed.\nNote: Because .ajaxComplete() is implemented as a method of jQuery object instances, we can use the this keyword as we do here to refer to the selected elements within the callback function.\nAll ajaxComplete handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an ajaxComplete handler is executed, it is passed the event object, the XMLHttpRequest object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:\nNote: You can get the returned ajax contents by looking at xhr.responseXML or xhr.responseHTML for xml and html respectively.\n$('.log').ajaxComplete(function(e, xhr, settings) {\n  if (settings.url == 'ajax\/test.html') {\n    $(this).text('Triggered ajaxComplete handler. The result is ' +\n                     xhr.responseHTML);\n  }\n});\n\nExample:\n\nShow a message when an Ajax request completes.\n$(\"#msg\").ajaxComplete(function(event,request, settings){\n   $(this).append(\"&lt;li&gt;Request Complete.&lt;\/li&gt;\");\n });\n\n\n"},{"url":"http:\/\/api.jquery.com\/after\/","title":"after","description":"\n\n.after( content [, content]  ) Returns: jQuery\n\n\nDescription: Insert content, specified by the parameter, after each element in the set of matched elements.\n\n\n\nversion added: 1.0.after( content [, content] )\ncontentHTML string, DOM element, or jQuery object to insert after each element in the set of matched elements.\ncontentOne or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.\n\n\n\nversion added: 1.4.after( function(index) )\nfunction(index)A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n\n\n\nThe .after() and .insertAfter() methods perform the same task. The major difference is in the syntax\u2014specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.\nUsing the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nContent can be created and then inserted after several elements at once:\n$('.inner').after('&lt;p&gt;Test&lt;\/p&gt;');\nEach inner &lt;div&gt; element gets this new content:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n&lt;\/div&gt;\nAn element in the DOM can also be selected and inserted after another element:\n$('.container').after($('h2'));\nIf an element selected this way is inserted elsewhere, it will be moved rather than cloned:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\n&lt;h2&gt;Greetings&lt;\/h2&gt;\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.\nInserting Disconnected DOM nodes\nAs of jQuery 1.4, .before() and .after() will also work on disconnected DOM nodes. For example, given the following code:\n$('&lt;div\/&gt;').after('&lt;p&gt;&lt;\/p&gt;');\nThe result is a jQuery set containing a div and a paragraph, in that order. That set can be further manipulated, even before it is inserted in the document.\n$('&lt;div\/&gt;').after('&lt;p&gt;&lt;\/p&gt;').addClass('foo')\n  .filter('p').attr('id', 'bar').html('hello')\n.end()\n.appendTo('body');\nThis results in the following elements inserted just before the closing &lt;\/body&gt; tag:\n\n&lt;div class=\"foo\"&gt;&lt;\/div&gt;\n&lt;p class=\"foo\" id=\"bar\"&gt;hello&lt;\/p&gt;\n\nPassing a Function\nAs of jQuery 1.4, .after() supports passing a function that returns the elements to insert.\n$('p').after(function() {\n  return '&lt;div&gt;' + this.className + '&lt;\/div&gt;';\n});\nThis example inserts a &lt;div&gt; after each paragraph, with each new &lt;div&gt; containing the class name(s) of its preceding paragraph.\nAdditional Arguments\nSimilar to other content-adding methods such as .prepend() and .before(), .after() also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.\nFor example, the following will insert two new &lt;div&gt;s and an existing &lt;div&gt; after the first paragraph:\nvar $newdiv1 = $('&lt;div id=\"object1\"\/&gt;'),\n    newdiv2 = document.createElement('div'),\n    existingdiv1 = document.getElementById('foo');\n\n$('p').first().after($newdiv1, [newdiv2, existingdiv1]);\n\nSince .after() can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;div&gt;s as three separate arguments, like so: $('p').first().after($newdiv1, newdiv2, existingdiv1). The type and number of arguments will largely depend on the elements are collected in the code.\n\nExamples:\n\n\nExample: Inserts some HTML after all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;$(\"p\").after(\"&lt;b&gt;Hello&lt;\/b&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Inserts a DOM element after all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;$(\"p\").after( document.createTextNode(\"Hello\") );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;b&gt;Hello&lt;\/b&gt;&lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;$(\"p\").after( $(\"b\") );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/addClass\/","title":"addClass","description":"\n\n.addClass( className ) Returns: jQuery\n\n\nDescription: Adds the specified class(es) to each of the set of matched elements.\n\n\n\nversion added: 1.0.addClass( className )\nclassNameOne or more class names to be added to the class attribute of each matched element.\n\n\n\nversion added: 1.4.addClass( function(index, currentClass) )\nfunction(index, currentClass)A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, this refers to the current element in the set.\n\n\n\nIt's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.\nMore than one class may be added at a time, separated by a space, to the set of matched elements, like so:\n$(\"p\").addClass(\"myClass yourClass\");\nThis method is often used with .removeClass() to switch elements' classes from one to another, like so:\n$(\"p\").removeClass(\"myClass noClass\").addClass(\"yourClass\");\nHere, the myClass and noClass classes are removed from all paragraphs, while yourClass is added.\nAs of jQuery 1.4, the .addClass() method's argument can receive a function.\n$(\"ul li:last\").addClass(function() {\n  return \"item-\" + $(this).index();\n});\nGiven an unordered list with five &lt;li&gt; elements, this example adds the class \"item-4\" to the last &lt;li&gt;.\n\nExamples:\n\n\nExample: Adds the class \"selected\" to the matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 8px; font-size:16px; }\n  .selected { color:blue; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;and&lt;\/p&gt;\n  &lt;p&gt;Goodbye&lt;\/p&gt;\n  \n&lt;script&gt;\n  $(\"p:last\").addClass(\"selected\");\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Adds the classes \"selected\" and \"highlight\" to the matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 8px; font-size:16px; }\n  .selected { color:red; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;and&lt;\/p&gt;\n  &lt;p&gt;Goodbye&lt;\/p&gt;\n&lt;script&gt;\n  $(\"p:last\").addClass(\"selected highlight\");\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Pass in a function to .addClass() to add the \"green\" class to a div that already has a \"red\" class.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background: white; }\n  .red { background: red; }\n  .red.green { background: green; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n &lt;div&gt;This div should be white&lt;\/div&gt;\n &lt;div class=\"red\"&gt;This div will be green because it now has the \"green\" and \"red\" classes.\n   It would be red if the addClass function failed.&lt;\/div&gt;\n &lt;div&gt;This div should be white&lt;\/div&gt;\n &lt;p&gt;There are zero green divs&lt;\/p&gt;\n\n&lt;script&gt;\n  $(\"div\").addClass(function(index, currentClass) {\n    var addedClass;\n\n    if ( currentClass === \"red\" ) {\n      addedClass = \"green\";\n      $(\"p\").text(\"There is one green div\");\n    }\n  \n    return addedClass;\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.ajax\/","title":"jQuery.ajax","description":"\n\njQuery.ajax( url [, settings]  ) Returns: jqXHR\n\n\nDescription: Perform an asynchronous HTTP (Ajax) request.\n\n\n\nversion added: 1.5jQuery.ajax( url [, settings] )\nurlA string containing the URL to which the request is sent.\nsettingsA set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. \n\n\n\nversion added: 1.0jQuery.ajax( settings )\nsettingsA set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().\n\nacceptsMap\n\n\nDefault: depends on DataType\nThe content type sent in the request header that tells the server what kind of response it will accept in return. If the accepts setting needs modification, it is recommended to do so once in the $.ajaxSetup() method\nasyncBoolean\n\n\nDefault: true\nBy default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.\nbeforeSend(jqXHR, settings)Function\n\nA pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings maps are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.\ncacheBoolean\n\n\nDefault: true, false for dataType 'script' and 'jsonp'\nIf set to false, it will force requested pages not to be cached by the browser. Setting cache to false also appends a query string parameter, \"_=[TIMESTAMP]\", to the URL. \ncomplete(jqXHR, textStatus)Function, Array\n\nA function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\ncontents(added 1.5)Map\n\nA map of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type.\ncontentTypeString\n\n\nDefault: 'application\/x-www-form-urlencoded'\nWhen sending data to the server, use this content-type. Default is \"application\/x-www-form-urlencoded\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent). Data will always be transmitted to the server using UTF-8 charset; you must decode this appropriately on the server side.\ncontextObject\n\nThis object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so: $.ajax({\n  url: \"test.html\",\n  context: document.body,\n  success: function(){\n    $(this).addClass(\"done\");\n  }\n});\nconverters(added 1.5)Map\n\n\nDefault: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}\nA map of dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response\ncrossDomain(added 1.5)\n\n\nDefault: false for same-domain requests, true for cross-domain requests\nIf you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain\ndataObject, String\n\nData to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).\ndataFilter(data, type)Function\n\nA function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.\ndataTypeString\n\n\nDefault: Intelligent Guess (xml, json, script, or html)\nThe type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:\n          \n            \"xml\": Returns a XML document that can be processed via jQuery.\n            \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.\n            \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \n            \"json\": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)\n            \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true.\n            \"text\": A plain text string.\n            multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml.\" Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.\n            \n          \nerror(jqXHR, textStatus, errorThrown)Function\n\nA function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\"  As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn.  Note: This handler is not called for cross-domain script and JSONP requests. This is an Ajax Event. \nglobalBoolean\n\n\nDefault: true\nWhether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.\nheaders(added 1.5)Map\n\n\nDefault: {}\nA map of additional header key\/value pairs to send along with the request. This setting is set before the beforeSend function is called; therefore, any values in the headers setting can be overwritten from within the beforeSend function.\nifModifiedBoolean\n\n\nDefault: false\nAllow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.\nisLocal(added 1.5.1)Boolean\n\n\nDefault: depends on current location protocol\nAllow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.  \njsonpString\n\nOverride the callback function name in a jsonp request.  This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url.  So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }\njsonpCallbackString, Function\n\nSpecify the callback function name for a JSONP request.  This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. \nmimeType(added 1.5.1)String\n\nA mime type to override the XHR mime type.\npasswordString\n\nA password to be used in response to an HTTP access authentication request.\nprocessDataBoolean\n\n\nDefault: true\nBy default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.\nscriptCharsetString\n\nOnly for requests with \"jsonp\" or \"script\" dataType and \"GET\" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.\nstatusCode(added 1.5)Map\n\n\nDefault: {}\n\n            A map of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:\n$.ajax({\n  statusCode: {\n    404: function() {\n      alert('page not found');\n    }\n  }\n});\n            If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error, they take the same parameters as the error callback.\n          \nsuccess(data, textStatus, jqXHR)Function, Array\n\nA function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\ntimeoutNumber\n\nSet a timeout (in milliseconds) for the request. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.\ntraditionalBoolean\n\nSet this to true if you wish to use the traditional style of param serialization.\ntypeString\n\n\nDefault: 'GET'\nThe type of request to make (\"POST\" or \"GET\"), default is \"GET\". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.\nurlString\n\n\nDefault: The current page\n A string containing the URL to which the request is sent.\nusernameString\n\nA username to be used in response to an HTTP access authentication request.\nxhrFunction\n\n\nDefault: ActiveXObject when available (IE), the XMLHttpRequest otherwise\nCallback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.\nxhrFields(added 1.5.1)Map\n\nA map of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.\n$.ajax({\n   url: a_cross_domain_url,\n   xhrFields: {\n      withCredentials: true\n   }\n});\n\nIn jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.\n\n\n\n\n\n\nThe $.ajax() function underlies all Ajax requests sent by jQuery.  It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly.\nAt its simplest, the $.ajax() function can be called with no arguments:\n$.ajax();\nNote: Default settings can be set globally by using the $.ajaxSetup() function.\nThis example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, we can implement one of the callback functions.\nThe jqXHR Object\nThe jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. \nAs of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header:\n\n$.ajax({\n  url: 'http:\/\/fiddle.jshell.net\/favicon.png',\n  beforeSend: function( xhr ) {\n    xhr.overrideMimeType( 'text\/plain; charset=x-user-defined' );\n  },\n  success: function( data ) {\n    if (console &amp;&amp; console.log){\n      console.log( 'Sample of data:', data.slice(0,100) );\n    }\n  }\n});\n\nThe jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information).  For convenience and consistency with the callback names used by $.ajax(), jqXHR also provides .error(), .success(), and .complete() methods. These methods take a function argument that is called when the $.ajax() request terminates, and the function receives the same arguments as the correspondingly-named $.ajax() callback. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.)\n\n      Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks will be deprecated in jQuery 1.8. To prepare your code for their eventual removal, use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.\n    \n\/\/ Assign handlers immediately after making the request,\n\/\/ and remember the jqxhr object for this request\nvar jqxhr = $.ajax( \"example.php\" )\n    .done(function() { alert(\"success\"); })\n    .fail(function() { alert(\"error\"); })\n    .always(function() { alert(\"complete\"); });\n\n\/\/ perform other work here ...\n\n\/\/ Set another completion function for the request above\njqxhr.always(function() { alert(\"second complete\"); });\nFor backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods:\n\n        readyState\n        status\n        statusText\n        \nresponseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively\n        \nsetRequestHeader(name, value) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one\n        getAllResponseHeaders()\n        getResponseHeader()\n        abort()\n      \nNo onreadystatechange mechanism is provided, however, since success, error, complete and statusCode cover all conceivable requirements.\nCallback Function Queues\nThe beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times.\nAs of jQuery 1.5, the error (fail), success (done), and complete (always, as of jQuery 1.6) callback hooks are first-in, first-out managed queues. This means you can assign more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks.\nThe this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves.\nSome types of Ajax requests, such as JSONP and cross-domain GET requests, do not use XHR; in those cases the XMLHttpRequest and textStatus parameters passed to the callback are undefined.\nHere are the callback hooks provided by $.ajax():\n\n        \nbeforeSend callback is invoked; it receives the jqXHR object and the settings map as parameters.\n        \nerror callbacks are invoked, in the order they are registered, if the request fails. They receive the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\".\n        \ndataFilter callback is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success.\n        \nsuccess callbacks are then invoked, in the order they are registered, if the request succeeds. They receive the returned data, a string containing the success code, and the jqXHR object.\n        \ncomplete callbacks fire, in the order they are registered, when the request finishes, whether in failure or success. They receive the jqXHR object, as well as a string containing the success or error code.\n      \nFor example, to make use of the returned HTML, we can implement a success handler:\n$.ajax({\n  url: 'ajax\/test.html',\n  success: function(data) {\n    $('.result').html(data);\n    alert('Load was performed.');\n  }\n});\nData Types\nThe $.ajax() function relies on the server to provide information about the retrieved data. If the server reports the return data as XML, the result can be traversed using normal XML methods or jQuery's selectors. If another type is detected, such as HTML in the example above, the data is treated as text.\nDifferent data handling can be achieved by using the dataType option. Besides plain xml, the dataType can be html, json, jsonp, script, or text.\nThe text and xml types return the data with no processing. The data is simply passed on to the success handler, either through the responseText or responseXML property of the jqXHR object, respectively.\nNote: We must ensure that the MIME type reported by the web server matches our choice of dataType. In particular, XML must be declared by the server as text\/xml or application\/xml for consistent results.\nIf html is specified, any embedded JavaScript inside the retrieved data is executed before the HTML is returned as a string. Similarly, script will execute the JavaScript that is pulled back from the server, then return nothing.\nThe json type parses the fetched data file as a JavaScript object and returns the constructed object as the result data. To do so, it uses jQuery.parseJSON() when the browser supports it; otherwise it uses a Function constructor. Malformed JSON data will throw a parse error (see json.org for more information). JSON data is convenient for communicating structured data in a way that is concise and easy for JavaScript to parse. If the fetched data file exists on a remote server, specify the jsonp type instead.\nThe jsonp type appends a query string parameter of callback=? to the URL. The server should prepend the JSON data with the callback name to form a valid JSONP response. We can specify a parameter name other than callback with the jsonp option to $.ajax().\nNote: JSONP is an extension of the JSON format, requiring some server-side code to detect and handle the query string parameter. More information about it can be found in the original post detailing its use.\nWhen data is retrieved from remote servers (which is only possible using the script or jsonp data types), the error callbacks and global events will never be fired.\nSending Data to the Server\nBy default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.\nThe data option can contain either a query string of the form key1=value1&amp;key2=value2, or a map of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false.  The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type.\nAdvanced Options\nThe global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details.  See the descriptions of these methods below for more details.\nIf the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options.\nAjax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option.\nBy default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true.\nThe scriptCharset allows the character set to be explicitly specified for requests that use a &lt;script&gt; tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets.\nThe first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.\nThe $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes.\nAt present, due to a bug in Firefox where .getAllResponseHeaders() returns the empty string although .getResponseHeader('Content-Type') returns a non-empty string, automatically decoding JSON CORS responses in Firefox with jQuery is not supported.\nA workaround to this is possible by overriding jQuery.ajaxSettings.xhr as follows:\n\nvar _super = jQuery.ajaxSettings.xhr;\njQuery.ajaxSettings.xhr = function () {\n    var xhr = _super(),\n        getAllResponseHeaders = xhr.getAllResponseHeaders;\n\n    xhr.getAllResponseHeaders = function () {\n        if ( getAllResponseHeaders() ) {\n            return getAllResponseHeaders();\n        }\n        var allHeaders = \"\";\n        $( [\"Cache-Control\", \"Content-Language\", \"Content-Type\",\n                \"Expires\", \"Last-Modified\", \"Pragma\"] ).each(function (i, header_name) {\n\n            if ( xhr.getResponseHeader( header_name ) ) {\n                allHeaders += header_name + \": \" + xhr.getResponseHeader( header_name ) + \"\\n\";\n            }\n            return allHeaders;\n        });\n    };\n    return xhr;\n};\n\nExtending Ajax\nAs of jQuery 1.5, jQuery's Ajax implementation includes prefilters, converters, and transports that allow you to extend Ajax with a great deal of flexibility. For more information about these advanced features, see the Extending Ajax page.\n\nAdditional Notes:Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, or protocol.Script and JSONP requests are not subject to the same origin policy restrictions.Examples:\n\n\nExample: Save some data to the server and notify the user once it's complete.\n\n$.ajax({\n  type: \"POST\",\n  url: \"some.php\",\n  data: \"name=John&amp;location=Boston\"\n}).done(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n\n\nExample: Retrieve the latest version of an HTML page.\n\n$.ajax({\n  url: \"test.html\",\n  cache: false,\n  success: function(html){\n    $(\"#results\").append(html);\n  }\n});\n\n\nExample: Send an xml document as data to the server. By setting the processData\n    option to false, the automatic conversion of data to strings is prevented.\n\nvar xmlDocument = [create xml document];\nvar xmlRequest = $.ajax({\n  url: \"page.php\",\n  processData: false,\n  data: xmlDocument\n});\n\nxmlRequest.done(handleResponse);\n\n\nExample: Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.\n\nvar menuId = $(\"ul.nav\").first().attr(\"id\");\nvar request = $.ajax({\n  url: \"script.php\",\n  type: \"POST\",\n  data: {id : menuId},\n  dataType: \"html\"\n});\n\nrequest.done(function(msg) {\n  $(\"#log\").html( msg );\n});\n\nrequest.fail(function(jqXHR, textStatus) {\n  alert( \"Request failed: \" + textStatus );\n});\n\n\nExample: Load and execute a JavaScript file.\n\n$.ajax({\n  type: \"GET\",\n  url: \"test.js\",\n  dataType: \"script\"\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxSend\/","title":"ajaxSend","description":"\n\n.ajaxSend( handler(event, jqXHR, ajaxOptions) ) Returns: jQuery\n\n\nDescription: Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxSend( handler(event, jqXHR, ajaxOptions) )\nhandler(event, jqXHR, ajaxOptions)The function to be invoked.\n\n\nWhenever an Ajax request is about to be sent, jQuery triggers the ajaxSend event. Any and all handlers that have been registered with the .ajaxSend() method are executed at this time.\nTo observe this method in action, we can set up a basic Ajax load request:\n&lt;div class=\"trigger\"&gt;Trigger&lt;\/div&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\nWe can attach our event handler to any element:\n$('.log').ajaxSend(function() {\n  $(this).text('Triggered ajaxSend handler.');\n});\nNow, we can make an Ajax request using any jQuery method:\n$('.trigger').click(function() {\n  $('.result').load('ajax\/test.html');\n});\nWhen the user clicks the button and the Ajax request is about to begin, the log message is displayed.\nNote: Because .ajaxSend() is implemented as a method of jQuery instances, we can use the this keyword as we do here to refer to the selected elements within the callback function.\nAll ajaxSend handlers are invoked, regardless of what Ajax request is to be sent. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an ajaxSend handler is executed, it is passed the event object, the jqXHR object (in version 1.4, XMLHttpRequestobject), and the settings object that was used in the creation of the Ajax request. For example, we can restrict our callback to only handling events dealing with a particular URL:\n$('.log').ajaxSend(function(e, jqxhr, settings) {\n  if (settings.url == 'ajax\/test.html') {\n    $(this).text('Triggered ajaxSend handler.');\n  }\n});\n\nExample:\n\nShow a message before an Ajax request is sent.\n$(\"#msg\").ajaxSend(function(evt, request, settings){\n        $(this).append(\"&lt;li&gt;Starting request at \" + settings.url + \"&lt;\/li&gt;\");\n      });\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.ajaxSetup\/","title":"jQuery.ajaxSetup","description":"\n\njQuery.ajaxSetup( options ) \n\n\nDescription: Set default values for future Ajax requests.\n\n\nversion added: 1.1jQuery.ajaxSetup( options )\noptionsA set of key\/value pairs that configure the default Ajax request. All options are optional. \n\n\nFor details on the settings available for $.ajaxSetup(), see $.ajax(). \nAll subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of $.ajaxSetup().\nFor example, the following sets a default for the url parameter before pinging the server repeatedly:\n$.ajaxSetup({\n  url: 'ping.php'\n});\nNow each time an Ajax request is made, the \"ping.php\" URL will be used automatically:\n$.ajax({\n  \/\/ url not set here; uses ping.php\n  data: {'name': 'Dan'}\n});\nNote: Global callback functions should be set with their respective global Ajax event handler methods\u2014.ajaxStart(), .ajaxStop(), .ajaxComplete(), .ajaxError(), .ajaxSuccess(), .ajaxSend()\u2014rather than within the options object for $.ajaxSetup().\n\nExample:\n\nSets the defaults for Ajax requests to the url \"\/xmlhttp\/\", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.\n$.ajaxSetup({\n   url: \"\/xmlhttp\/\",\n   global: false,\n   type: \"POST\"\n\n });\n $.ajax({ data: myData });\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxStart\/","title":"ajaxStart","description":"\n\n.ajaxStart( handler() ) Returns: jQuery\n\n\nDescription: Register a handler to be called when the first Ajax request begins. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxStart( handler() )\nhandler()The function to be invoked.\n\n\nWhenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the ajaxStart event. Any and all handlers that have been registered with the .ajaxStart() method are executed at this time.\nTo observe this method in action, we can set up a basic Ajax load request:\n&lt;div class=\"trigger\"&gt;Trigger&lt;\/div&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\nWe can attach our event handler to any element:\n$('.log').ajaxStart(function() {\n  $(this).text('Triggered ajaxStart handler.');\n});\nNow, we can make an Ajax request using any jQuery method:\n$('.trigger').click(function() {\n  $('.result').load('ajax\/test.html');\n});\nWhen the user clicks the button and the Ajax request is sent, the log message is displayed.\nNote: Because .ajaxStart() is implemented as a method of jQuery object instances, we can use the this keyword as we do here to refer to the selected elements within the callback function.\n\nExample:\n\nShow a loading message whenever an Ajax request starts (and none is already active).\n$(\"#loading\").ajaxStart(function(){\n   $(this).show();\n });\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxStop\/","title":"ajaxStop","description":"\n\n.ajaxStop( handler() ) Returns: jQuery\n\n\nDescription: Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxStop( handler() )\nhandler()The function to be invoked.\n\n\nWhenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the ajaxStop event. Any and all handlers that have been registered with the .ajaxStop() method are executed at this time. The ajaxStop event is also triggered if the last outstanding Ajax request is cancelled by returning false within the beforeSend callback function. \nTo observe this method in action, we can set up a basic Ajax load request:\n&lt;div class=\"trigger\"&gt;Trigger&lt;\/div&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\nWe can attach our event handler to any element:\n$('.log').ajaxStop(function() {\n  $(this).text('Triggered ajaxStop handler.');\n});\nNow, we can make an Ajax request using any jQuery method:\n$('.trigger').click(function() {\n  $('.result').load('ajax\/test.html');\n});\nWhen the user clicks the button and the Ajax request completes, the log message is displayed.\nBecause .ajaxStop() is implemented as a method of jQuery object instances, we can use the this keyword as we do here to refer to the selected elements within the callback function.\n\nExample:\n\nHide a loading message after all the Ajax requests have stopped.\n$(\"#loading\").ajaxStop(function(){\n      $(this).hide();\n      });\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxSuccess\/","title":"ajaxSuccess","description":"\n\n.ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) ) Returns: jQuery\n\n\nDescription: Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )\nhandler(event, XMLHttpRequest, ajaxOptions)The function to be invoked.\n\n\nWhenever an Ajax request completes successfully, jQuery triggers the ajaxSuccess event. Any and all handlers that have been registered with the .ajaxSuccess() method are executed at this time.\nTo observe this method in action, we can set up a basic Ajax load request:\n&lt;div class=\"trigger\"&gt;Trigger&lt;\/div&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\nWe can attach our event handler to any element:\n$('.log').ajaxSuccess(function() {\n  $(this).text('Triggered ajaxSuccess handler.');\n});\nNow, we can make an Ajax request using any jQuery method:\n$('.trigger').click(function() {\n  $('.result').load('ajax\/test.html');\n});\nWhen the user clicks the button and the Ajax request completes successfully, the log message is displayed.\nNote: Because .ajaxSuccess() is implemented as a method of jQuery object instances, we can use the this keyword as we do here to refer to the selected elements within the callback function.\nAll ajaxSuccess handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an ajaxSuccess handler is executed, it is passed the event object, the XMLHttpRequest object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:\nNote: You can get the returned ajax contents by looking at xhr.responseXML or xhr.responseHTML for xml and html respectively.\n$('.log').ajaxSuccess(function(e, xhr, settings) {\n  if (settings.url == 'ajax\/test.html') {\n    $(this).text('Triggered ajaxSuccess handler. The ajax response was:' \n                     + xhr.responseHTML );\n  }\n});\n\nExample:\n\nShow a message when an Ajax request completes successfully.\n$(\"#msg\").ajaxSuccess(function(evt, request, settings){\n      $(this).append(\"&lt;li&gt;Successful Request!&lt;\/li&gt;\");\n      });\n\n\n"},{"url":"http:\/\/api.jquery.com\/andSelf\/","title":"andSelf","description":"\n\n.andSelf() Returns: jQuery\n\n\nDescription: Add the previous set of elements on the stack to the current set.\n\nversion added: 1.2.andSelf()\n\nAs described in the discussion for .end(), jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, .andSelf() can help.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nThe result of the following code is a red background behind items 3, 4 and 5:\n$('li.third-item').nextAll().andSelf()\n  .css('background-color', 'red');\n\nFirst, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to .nextAll() then pushes the set of items 4 and 5 onto the stack. Finally, the .andSelf() invocation merges these two sets together, creating a jQuery object that points to all three items in document order: {[&lt;li.third-item&gt;,&lt;li&gt;,&lt;li&gt; ]}.\n\nExample:\n\nFind all divs, and all the paragraphs inside of them, and give them both class names.  Notice the div doesn't have the yellow background color since it didn't use .andSelf().\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p, div { margin:5px; padding:5px; }\n  .border { border: 2px solid red; }\n  .background { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;p&gt;First Paragraph&lt;\/p&gt;\n    &lt;p&gt;Second Paragraph&lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n    $(\"div\").find(\"p\").andSelf().addClass(\"border\");\n    $(\"div\").find(\"p\").addClass(\"background\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/animate\/","title":"animate","description":"\n\n.animate( properties [, duration]  [, easing]  [, complete]  ) Returns: jQuery\n\n\nDescription: Perform a custom animation of a set of CSS properties.\n\n\n\nversion added: 1.0.animate( properties [, duration] [, easing] [, complete] )\npropertiesA map of CSS properties that the animation will move toward.\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncompleteA function to call once the animation is complete.\n\n\n\nversion added: 1.0.animate( properties, options )\npropertiesA map of CSS properties that the animation will move toward.\noptionsA map of additional options to pass to the method. Supported keys:\n        \n        \nduration: A string or number determining how long the animation will run.\n        \neasing: A string indicating which easing function to use for the transition.\n        \ncomplete: A function to call once the animation is complete.\n        \nstep: A function to be called after each step of the animation.\n        \nqueue: A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case the animation is added to the queue represented by that string.\n        \nspecialEasing: A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions (added 1.4).\n        \n        \n\n\n\nThe .animate() method allows us to create animation effects on any numeric CSS property. The only required parameter is a map of CSS properties. This map is similar to the one that can be sent to the .css() method, except that the range of properties is more restrictive.\nAnimation Properties and Values\nAll animated properties should be animated to a single numeric value, except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality (For example, width, height, or left can be animated but background-color cannot be, unless the jQuery.Color() plugin is used). Property values are treated as a number of pixels unless otherwise specified. The units em and  can be specified where applicable.\nIn addition to style properties, some non-style properties such as scrollTop and scrollLeft, as well as custom properties, can be animated.\nShorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered margin, use: $(elem).css('marginTop') and $(elem).css('marginRight'), and so on.\nIn addition to numeric values, each property can take the strings 'show', 'hide', and 'toggle'. These shortcuts allow for custom hiding and showing animations that take into account the display type of the element.\nAnimated properties can also be relative. If a value is supplied with a leading += or -= sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.\nNote: Unlike shorthand animation methods such as .slideDown() and .fadeIn(), the .animate() method does not make hidden elements visible as part of the effect. For example, given $('someElement').hide().animate({height:'20px'}, 500), the animation will run, but the element will remain hidden.\nDuration\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nComplete Function\nIf supplied, the complete callback function is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, the callback is executed once per matched element, not once for the animation as a whole.\nBasic Usage\nTo animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"\n  style=\"position: relative; left: 10px;\" \/&gt;\nTo animate the opacity, left offset, and height of the image simultaneously:\n$('#clickme').click(function() {\n  $('#book').animate({\n    opacity: 0.25,\n    left: '+=50',\n    height: 'toggle'\n  }, 5000, function() {\n    \/\/ Animation complete.\n  });\n});\n\n\n  \n\nNote that the target value of the height property is 'toggle'. Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition:\n\n\n\n\nThe opacity of the image is already at its target value, so this property is not animated by the second click. Since the target value for left is a relative value, the image moves even farther to the right during this second animation.\nDirectional properties (top, right, bottom, left) have no discernible effect on elements if their  position style property is static, which it is by default.\nNote: The jQuery UI project extends the .animate() method by allowing some non-numeric styles such as colors to be animated. The project also includes mechanisms for specifying animations through CSS classes rather than individual attributes.\nNote: if attempting to animate an element with a height or width of 0px, where contents of the element are visible due to overflow, jQuery may clip this overflow during animation. By fixing the dimensions of the original element being hidden however, it is possible to ensure that the animation runs smoothly. A clearfix can be used to automatically fix the dimensions of your main element without the need to set this manually.\nStep Function\nThe second version of .animate() provides a step option \u2014 a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (now and fx), and this is set to the DOM element being animated.\n\n\n  \nnow: the numeric value of the property being animated at each step\n  \nfx: a reference to the jQuery.fx prototype object, which contains a number of properties such as elem for the animated element, start and end for the first and last value of the animated property, respectively, and prop for the property being animated.\n\nNote that the step function is called for each animated property on each animated element. For example, given two list items, the step function fires four times at each step of the animation:  \n$('li').animate({\n  opacity: .5,\n  height: '50%'\n},\n{\n  step: function(now, fx) {\n    var data = fx.elem.id + ' ' + fx.prop + ': ' + now;\n    $('body').append('&lt;div&gt;' + data + '&lt;\/div&gt;');\n  }\n});\nEasing\nThe remaining parameter of .animate() is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nPer-property Easing\nAs of jQuery version 1.4, you can set per-property easing functions within a single .animate() call. In the first version of .animate(), each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function.  If a per-property easing function is not defined for a particular property, it uses the value of the .animate() method's optional easing argument. If the easing argument is not defined, the default swing function is used.\nFor example, to simultaneously animate the width and height with the swing easing function and the opacity with the linear easing function:\n$('#clickme').click(function() {\n  $('#book').animate({\n    width: ['toggle', 'swing'],\n    height: ['toggle', 'swing'],\n    opacity: 'toggle'\n  }, 5000, 'linear', function() {\n      $(this).after('&lt;div&gt;Animation complete.&lt;\/div&gt;');\n  });\n});\nIn the second version of .animate(), the options map can include the specialEasing property, which is itself a map of CSS properties and their corresponding easing functions.  For example, to simultaneously animate the width using the linear easing function and the height using the easeOutBounce easing function:\n$('#clickme').click(function() {\n  $('#book').animate({\n    width: 'toggle',\n    height: 'toggle'\n  }, {\n    duration: 5000,\n    specialEasing: {\n      width: 'linear',\n      height: 'easeOutBounce'\n    },\n    complete: function() {\n      $(this).after('&lt;div&gt;Animation complete.&lt;\/div&gt;');\n    }\n  });\n});\nAs previously noted, a plugin is required for the easeOutBounce function.\n\nAdditional Notes:All jQuery effects, including .animate(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Click the button to animate the div with a number of different properties.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\nbackground-color:#bca;\nwidth:100px;\nborder:1px solid green;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"go\"&gt;&amp;raquo; Run&lt;\/button&gt;\n\n&lt;div id=\"block\"&gt;Hello!&lt;\/div&gt;\n&lt;script&gt;\n\n\/* Using multiple unit types within one animation. *\/\n\n$(\"#go\").click(function(){\n  $(\"#block\").animate({\n    width: \"70%\",\n    opacity: 0.4,\n    marginLeft: \"0.6in\",\n    fontSize: \"3em\",\n    borderWidth: \"10px\"\n  }, 1500 );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\n  position:absolute;\n  background-color:#abc;\n  left:50px;\n  width:90px;\n  height:90px;\n  margin:5px;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"left\"&gt;&amp;laquo;&lt;\/button&gt; &lt;button id=\"right\"&gt;&amp;raquo;&lt;\/button&gt;\n&lt;div class=\"block\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"#right\").click(function(){\n  $(\".block\").animate({\"left\": \"+=50px\"}, \"slow\");\n});\n\n$(\"#left\").click(function(){\n  $(\".block\").animate({\"left\": \"-=50px\"}, \"slow\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.\n\nThe second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\n  background-color:#bca;\n  width:200px;\n  height:1.1em;\n  text-align:center;\n  border:2px solid green;\n  margin:3px;\n  font-size:14px;\n}\nbutton {\n  font-size:14px;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"go1\"&gt;&amp;raquo; Animate Block1&lt;\/button&gt;\n&lt;button id=\"go2\"&gt;&amp;raquo; Animate Block2&lt;\/button&gt;\n&lt;button id=\"go3\"&gt;&amp;raquo; Animate Both&lt;\/button&gt;\n\n&lt;button id=\"go4\"&gt;&amp;raquo; Reset&lt;\/button&gt;\n&lt;div id=\"block1\"&gt;Block1&lt;\/div&gt;\n&lt;div id=\"block2\"&gt;Block2&lt;\/div&gt;\n&lt;script&gt;\n\n$( \"#go1\" ).click(function(){\n  $( \"#block1\" ).animate( { width: \"90%\" }, { queue: false, duration: 3000 })\n     .animate({ fontSize: \"24px\" }, 1500 )\n     .animate({ borderRightWidth: \"15px\" }, 1500 );\n});\n\n$( \"#go2\" ).click(function(){\n  $( \"#block2\" ).animate({ width: \"90%\" }, 1000 )\n     .animate({ fontSize: \"24px\" }, 1000 )\n     .animate({ borderLeftWidth: \"15px\" }, 1000 );\n});\n\n$( \"#go3\" ).click(function(){\n  $( \"#go1\" ).add( \"#go2\" ).click();\n});\n\n$( \"#go4\" ).click(function(){\n  $( \"div\" ).css({ width: \"\", fontSize: \"\", borderWidth: \"\" });\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. \n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\n   position: relative;\n   background-color: #abc;\n   width: 40px;\n   height: 40px;\n   float: left;\n   margin: 5px;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;&lt;button id=\"go\"&gt;Run \u00bb&lt;\/button&gt;&lt;\/p&gt;\n&lt;div class=\"block\"&gt;&lt;\/div&gt; &lt;div class=\"block\"&gt;&lt;\/div&gt;\n&lt;div class=\"block\"&gt;&lt;\/div&gt; &lt;div class=\"block\"&gt;&lt;\/div&gt;\n&lt;div class=\"block\"&gt;&lt;\/div&gt; &lt;div class=\"block\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$( \"#go\" ).click(function(){\n  $( \".block:first\" ).animate({\n    left: 100\n  }, {\n    duration: 1000,\n    step: function( now, fx ){\n      $( \".block:gt(0)\" ).css( \"left\", now );\n    }\n  });\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.\n\n$( \"p\" ).animate({\n  \"height\": \"toggle\", \"opacity\": \"toggle\"\n}, \"slow\" );\n\n\nExample: Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.\n\n$( \"p\" ).animate({\n  \"left\": \"50\", \"opacity\": 1\n}, 500 );\n\n\n\nExample: An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.\n\n$( \"p\" ).animate({\n  \"opacity\": \"show\"\n}, \"slow\", \"easein\" );\n\n\nExample: Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.\n\n$( \"p\" ).animate({\n  \"height\": \"toggle\", \"opacity\": \"toggle\"\n}, { duration: \"slow\" });\n\n\nExample: Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.  It also will do it outside the queue, meaning it will automatically start without waiting for its turn.\n\n$( \"p\" ).animate({\n  left: \"50px\", opacity: 1\n}, { duration: 500, queue: false });\n\n\nExample: An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.\n\n$( \"p\" ).animate({\n  \"opacity\": \"show\"\n}, { \"duration\": \"slow\", \"easing\": \"easein\" });\n\n\nExample: An example of using a callback function.  The first argument is an array of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. \n\n$( \"p\" ).animate({\n  height:200, width:400, opacity: .5\n}, 1000, \"linear\", function(){ alert(\"all done\"); });\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/animated-selector\/","title":":animated Selector","description":"\n\nanimated  selector\n\n\nversion added: 1.2jQuery(':animated')\nDescription: Select all elements that are in the progress of an animation at the time the selector is run.\nAdditional Notes:Because :animated is a jQuery extension and not part of the CSS specification, queries using :animated cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :animated to select elements, first select the elements using a pure CSS selector, then use .filter(\":animated\").Example:\n\nChange the color of any div that is animated.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background:yellow; border:1px solid #AAA; width:80px; height:80px; margin:0 5px; float:left; }\n  div.colored { background:green; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"run\"&gt;Run&lt;\/button&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div id=\"mover\"&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"#run\").click(function(){\n      $(\"div:animated\").toggleClass(\"colored\");\n    });\n    function animateIt() {\n      $(\"#mover\").slideToggle(\"slow\", animateIt);\n    }\n    animateIt();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/all-selector\/","title":"All Selector (&#8220;*&#8221;)","description":"\n\nall  selector\n\n\nversion added: 1.0jQuery('*')\nDescription: Selects all elements.\nCaution: The all, or universal, selector is extremely slow, except when used by itself.\nExamples:\n\n\nExample: Finds every element (including head, body, etc) in the document.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  h3 { margin: 0; }\n  div,span,p {\n    width: 80px;\n    height: 40px;\n    float:left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;DIV&lt;\/div&gt;\n\n  &lt;span&gt;SPAN&lt;\/span&gt;\n  &lt;p&gt;P &lt;button&gt;Button&lt;\/button&gt;&lt;\/p&gt;\n&lt;script&gt;var elementCount = $(\"*\").css(\"border\",\"3px solid red\").length;\n$(\"body\").prepend(\"&lt;h3&gt;\" + elementCount + \" elements found&lt;\/h3&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: A common way to select all elements is to find within document.body so elements like head, script, etc are left out.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  h3 { margin: 0; }\n  div,span,p {\n    width: 80px;\n    height: 40px;\n    float:left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  #test {\n    width: auto; height: auto; background-color: transparent; \n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"test\"&gt;\n  &lt;div&gt;DIV&lt;\/div&gt;\n  &lt;span&gt;SPAN&lt;\/span&gt;\n  &lt;p&gt;P &lt;button&gt;Button&lt;\/button&gt;&lt;\/p&gt;\n&lt;\/div&gt;\n&lt;script&gt;\nvar elementCount = $(\"#test\").find(\"*\").css(\"border\",\"3px solid red\").length;\n$(\"body\").prepend(\"&lt;h3&gt;\" + elementCount + \" elements found&lt;\/h3&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.ajaxPrefilter\/","title":"jQuery.ajaxPrefilter","description":"\n\njQuery.ajaxPrefilter(  [dataTypes] , handler(options, originalOptions, jqXHR) ) Returns: undefined\n\n\nDescription: Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().\n\n\nversion added: 1.5jQuery.ajaxPrefilter(  [dataTypes], handler(options, originalOptions, jqXHR) )\ndataTypesAn optional string containing one or more space-separated dataTypes\nhandler(options, originalOptions, jqXHR)A handler to set default values for future Ajax requests.\n\n\nA typical prefilter registration using $.ajaxPrefilter() looks like this:\n\n$.ajaxPrefilter( function( options, originalOptions, jqXHR ) {\n  \/\/ Modify options, control originalOptions, store jqXHR, etc\n});\n\nwhere:\n\n\noptions are the request options\n\noriginalOptions are the options as provided to the ajax method, unmodified and, thus, without defaults from ajaxSettings\n\n\njqXHR is the jqXHR object of the request\n\nPrefilters are a perfect fit when custom options need to be handled.  Given the following code, for example, a call to $.ajax() would automatically abort a request to the same URL if the custom abortOnRetry option is set to true:\n\nvar currentRequests = {};\n\n$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {\n  if ( options.abortOnRetry ) {\n    if ( currentRequests[ options.url ] ) {\n      currentRequests[ options.url ].abort();\n    }\n    currentRequests[ options.url ] = jqXHR;\n  }\n});\n\nPrefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http:\/\/mydomain.net\/proxy\/:\n\n$.ajaxPrefilter( function( options ) {\n  if ( options.crossDomain ) {\n    options.url = \"http:\/\/mydomain.net\/proxy\/\" + encodeURIComponent( options.url );\n    options.crossDomain = false;\n  }\n});\n\nIf the optional dataTypes argument is supplied, the prefilter will be only be applied to requests with the indicated dataTypes. For example, the following only applies the given prefilter to JSON and script requests:\n\n$.ajaxPrefilter( \"json script\", function( options, originalOptions, jqXHR ) {\n  \/\/ Modify options, control originalOptions, store jqXHR, etc\n});\n\nThe $.ajaxPrefilter() method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as \"script\" if the URL has some specific properties defined in a custom isActuallyScript() function:\n\n$.ajaxPrefilter(function( options ) {\n  if ( isActuallyScript( options.url ) ) {\n    return \"script\";\n  }\n});\n\nThis would ensure not only that the request is considered \"script\" but also that all the prefilters specifically attached to the script dataType would be applied to it.\n\n\n"},{"url":"http:\/\/api.jquery.com\/ajaxError\/","title":"ajaxError","description":"\n\n.ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) ) Returns: jQuery\n\n\nDescription: Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.\n\n\nversion added: 1.0.ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )\nhandler(event, jqXHR, ajaxSettings, thrownError)The function to be invoked.\n\n\nWhenever an Ajax request completes with an error, jQuery triggers the ajaxError event. Any and all handlers that have been registered with the .ajaxError() method are executed at this time.\nTo observe this method in action, set up a basic Ajax load request.\n&lt;button class=\"trigger\"&gt;Trigger&lt;\/button&gt;\n&lt;div class=\"result\"&gt;&lt;\/div&gt;\n&lt;div class=\"log\"&gt;&lt;\/div&gt;\nAttach the event handler to any element:\n$(\"div.log\").ajaxError(function() {\n  $(this).text( \"Triggered ajaxError handler.\" );\n});\nNow, make an Ajax request using any jQuery method:\n$(\"button.trigger\").click(function() {\n  $(\"div.result\").load( \"ajax\/missing.html\" );\n});\nWhen the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.\nNote: Because .ajaxError() is implemented as a method of jQuery object instances, you can use the this keyword within the callback function to refer to the selected elements.\nAll ajaxError handlers are invoked, regardless of what Ajax request was completed. To differentiate between the requests, you can use the parameters passed to the handler. Each time an ajaxError handler is executed, it is passed the event object, the jqXHR object (prior to jQuery 1.5, the XHR object), and the settings object that was used in the creation of the request. If the request failed because JavaScript raised an exception, the exception object is passed to the handler as a fourth parameter. For example, to restrict the error callback to only handling events dealing with a particular URL:\n$( \"div.log\" ).ajaxError(function(e, jqxhr, settings, exception) {\n  if ( settings.url == \"ajax\/missing.html\" ) {\n    $(this).text( \"Triggered ajaxError handler.\" );\n  }\n});\n\nExample:\n\nShow a message when an Ajax request fails.\n$(\"#msg\").ajaxError(function(event, request, settings){\n  $(this).append(\"&lt;li&gt;Error requesting page \" + settings.url + \"&lt;\/li&gt;\");\n});\n\n\n"},{"url":"http:\/\/api.jquery.com\/append\/","title":"append","description":"\n\n.append( content [, content]  ) Returns: jQuery\n\n\nDescription: Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n\n\n\nversion added: 1.0.append( content [, content] )\ncontentDOM element, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.\ncontentOne or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.\n\n\n\nversion added: 1.4.append( function(index, html) )\nfunction(index, html)A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.\n\n\n\n\nThe .append() method inserts the  specified content as the last child of each element in the jQuery collection (To insert it as the first child, use .prepend()). \nThe .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.\nConsider the following HTML:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\n\nYou can create content and insert it into several elements at once:\n$('.inner').append('&lt;p&gt;Test&lt;\/p&gt;');\n\nEach inner &lt;div&gt; element gets this new content:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    Hello\n    &lt;p&gt;Test&lt;\/p&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    Goodbye\n    &lt;p&gt;Test&lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\nYou can also select an element on the page and insert it into another:\n$('.container').append($('h2'));\n\nIf an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;\/div&gt;\n\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.\nAdditional Arguments\nSimilar to other content-adding methods such as .prepend() and .before(), .append() also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.\nFor example, the following will insert two new &lt;div&gt;s and an existing &lt;div&gt; as the last three child nodes of the body:\nvar $newdiv1 = $('&lt;div id=\"object1\"\/&gt;'),\n    newdiv2 = document.createElement('div'),\n    existingdiv1 = document.getElementById('foo');\n\n$('body').append($newdiv1, [newdiv2, existingdiv1]);\n\nSince .append() can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;div&gt;s as three separate arguments, like so: $('body').append($newdiv1, newdiv2, existingdiv1). The type and number of arguments will largely depend on how you collect the elements in your code.\n\nExamples:\n\n\nExample: Appends some HTML to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;\n  $(\"p\").append(\"&lt;strong&gt;Hello&lt;\/strong&gt;\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Appends an Element to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;I would like to say: &lt;\/p&gt;\n\n&lt;script&gt;\n  $(\"p\").append(document.createTextNode(\"Hello\"));\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;strong&gt;Hello world!!!&lt;\/strong&gt;&lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;\n  $(\"p\").append( $(\"strong\") );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/appendTo\/","title":"appendTo","description":"\n\n.appendTo( target ) Returns: jQuery\n\n\nDescription: Insert every element in the set of matched elements to the end of the target.\n\n\nversion added: 1.0.appendTo( target )\ntargetA selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.\n\n\nThe .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.\nConsider the following HTML:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\n\nWe can create content and insert it into several elements at once:\n$('&lt;p&gt;Test&lt;\/p&gt;').appendTo('.inner');\n\nEach inner &lt;div&gt; element gets this new content:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    Hello\n    &lt;p&gt;Test&lt;\/p&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    Goodbye\n    &lt;p&gt;Test&lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\nWe can also select an element on the page and insert it into another:\n$('h2').appendTo($('.container'));\n\nIf an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;\/div&gt;\n\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.\n\nExample:\n\nAppends all spans to the element with the ID \"foo\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;#foo { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;I have nothing more to say... &lt;\/span&gt;\n\n  &lt;div id=\"foo\"&gt;FOO! &lt;\/div&gt;\n&lt;script&gt;$(\"span\").appendTo(\"#foo\"); \/\/ check append() examples&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attr\/","title":"attr","description":"\nContents:\n\n\nattr( attributeName \u00a0) .attr( attributeName )\n              \n\n\nattr( attributeName , value \u00a0) \n.attr( attributeName, value )\n              \n.attr( map )\n              \n.attr( attributeName, function(index, attr) )\n              \n\n\n\n\n\n.attr( attributeName ) Returns: String\n\n\nDescription: Get the value of an attribute for the first element in the set of matched elements.\n\n\nversion added: 1.0.attr( attributeName )\nattributeNameThe name of the attribute to get.\n\n\nThe .attr() method gets the attribute value for only the first element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.\nAs of jQuery 1.6, the .attr() method returns undefined for attributes that have not been set. In addition, .attr() should not be used on plain objects, arrays, the window, or the document. To retrieve and change DOM properties, use the .prop() method.\nUsing jQuery's .attr() method to get the value of an element's attribute has two main benefits:\n\n      \nConvenience: It can be called directly on a jQuery object and chained to other jQuery methods.\n      \nCross-browser consistency: The values of some attributes are reported inconsistently across browsers, and even across versions of a single browser. The .attr() method reduces such inconsistencies.\n    \nNote: Attribute values are strings with the exception of a few attributes such as value and tabindex.\n\nExample:\n\nFind the title attribute of the first &lt;em&gt; in the page.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  em { color:blue; font-weight;bold; }\n  div { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;\n  Once there was a &lt;em title=\"huge, gigantic\"&gt;large&lt;\/em&gt; dinosaur...\n&lt;\/p&gt;\n\n  The title of the emphasis is:&lt;div&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar title = $(\"em\").attr(\"title\");\n  $(\"div\").text(title);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.attr( attributeName, value ) Returns: jQuery\n\n\nDescription: Set one or more attributes for the set of matched elements.\n\n\n\nversion added: 1.0.attr( attributeName, value )\nattributeNameThe name of the attribute to set.\nvalueA value to set for the attribute.\n\n\n\nversion added: 1.0.attr( map )\nmapA map of attribute-value pairs to set.\n\n\n\nversion added: 1.1.attr( attributeName, function(index, attr) )\nattributeNameThe name of the attribute to set.\nfunction(index, attr)A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old attribute value as arguments.\n\n\n\nThe .attr() method is a convenient way to set the value of attributes\u2014especially when setting multiple attributes or using values returned by a function. Consider the following image:\n&lt;img id=\"greatphoto\" src=\"brush-seller.jpg\" alt=\"brush seller\" \/&gt;\nSetting a simple attribute\nTo change the alt attribute, simply pass the name of the attribute and its new value to the .attr() method:\n$('#greatphoto').attr('alt', 'Beijing Brush Seller');\nAdd an attribute the same way:\n$('#greatphoto')\n.attr('title', 'Photo by Kelly Clark');\nSetting several attributes at once\nTo change the alt attribute and add the title attribute at the same time, pass both sets of names and values into the method at once using a map (JavaScript object literal). Each key-value pair in the map adds or modifies an attribute:\n$('#greatphoto').attr({\n  alt: 'Beijing Brush Seller',\n  title: 'photo by Kelly Clark'\n});\nWhen setting multiple attributes, the quotes around attribute names are optional.\nWARNING: When setting the 'class' attribute, you must always use quotes!\nNote: jQuery prohibits changing the type attribute on an &lt;input&gt; or &lt;button&gt; element and will throw an error in all browsers. This is because the type attribute cannot be changed in Internet Explorer.\nComputed attribute values\nBy using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:\n$('#greatphoto').attr('title', function(i, val) {\n  return val + ' - photo by Kelly Clark'\n});\nThis use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.\nNote: If nothing is returned in the setter function (ie. function(index, attr){}), or if undefined is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.\n\nExamples:\n\n\nExample: Set some attributes for all &lt;img&gt;s in the page.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  img { padding:10px; }\n  div { color:red; font-size:24px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;img \/&gt;\n  &lt;img \/&gt;\n  &lt;img \/&gt;\n\n  &lt;div&gt;&lt;B&gt;Attribute of Ajax&lt;\/B&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"img\").attr({ \n  src: \"\/images\/hat.gif\",\n  title: \"jQuery\",\n  alt: \"jQuery Logo\"\n});\n$(\"div\").text($(\"img\").attr(\"alt\"));\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Set the id for divs based on the position in the page.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  span { color:red; }\n  b { font-weight:bolder; }\n        &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div&gt;Zero-th &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  &lt;div&gt;First &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  &lt;div&gt;Second &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"div\").attr(\"id\", function (arr) {\n  return \"div-id\" + arr;\n})\n.each(function () {\n  $(\"span\", this).html(\"(ID = '&lt;b&gt;\" + this.id + \"&lt;\/b&gt;')\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Set the src attribute from title attribute on the image.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;img title=\"hat.gif\"\/&gt;\n\n&lt;script&gt;\n$(\"img\").attr(\"src\", function() { \n    return \"\/images\/\" + this.title; \n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-contains-prefix-selector\/","title":"Attribute Contains Prefix Selector [name|=\"value\"]","description":"\n\nattributeContainsPrefix  selector\n\n\nversion added: 1.0jQuery('[attribute|=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).\nThis selector was introduced into the CSS specification to handle language attributes.\nExample:\n\nFinds all links with an hreflang attribute that is english.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\na { display: inline-block; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;a href=\"example.html\" hreflang=\"en\"&gt;Some text&lt;\/a&gt; \n\n  &lt;a href=\"example.html\" hreflang=\"en-UK\"&gt;Some other text&lt;\/a&gt;\n\n  &lt;a href=\"example.html\" hreflang=\"english\"&gt;will not be outlined&lt;\/a&gt;\n  \n&lt;script&gt;\n$('a[hreflang|=\"en\"]').css('border','3px dotted green');\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-contains-selector\/","title":"Attribute Contains Selector [name*=\"value\"]","description":"\n\nattributeContains  selector\n\n\nversion added: 1.0jQuery('[attribute*=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Selects elements that have the specified attribute with a value containing the a given substring.\nThis is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases.\nExample:\n\nFinds all inputs with a name attribute that contains 'man' and sets the value with some text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input name=\"man-news\" \/&gt;\n\n  &lt;input name=\"milkman\" \/&gt;\n  &lt;input name=\"letterman2\" \/&gt;\n  &lt;input name=\"newmilk\" \/&gt;\n&lt;script&gt;$('input[name*=\"man\"]').val('has man in it!');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-ends-with-selector\/","title":"Attribute Ends With Selector [name$=\"value\"]","description":"\n\nattributeEndsWith  selector\n\n\nversion added: 1.0jQuery('[attribute$=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.\nExample:\n\nFinds all inputs with an attribute name that ends with 'letter' and puts text in them.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input name=\"newsletter\" \/&gt;\n\n  &lt;input name=\"milkman\" \/&gt;\n  &lt;input name=\"jobletter\" \/&gt;\n&lt;script&gt;$('input[name$=\"letter\"]').val('a letter');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-contains-word-selector\/","title":"Attribute Contains Word Selector [name~=\"value\"]","description":"\n\nattributeContainsWord  selector\n\n\nversion added: 1.0jQuery('[attribute~=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.\nThis selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.\nExample:\n\nFinds all inputs with a name attribute that contains the word 'man' and sets the value with some text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input name=\"man-news\" \/&gt;\n\n  &lt;input name=\"milk man\" \/&gt;\n  &lt;input name=\"letterman2\" \/&gt;\n  &lt;input name=\"newmilk\" \/&gt;\n&lt;script&gt;$('input[name~=\"man\"]').val('mr. man is in it!');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-not-equal-selector\/","title":"Attribute Not Equal Selector [name!=\"value\"]","description":"\n\nattributeNotEqual  selector\n\n\nversion added: 1.0jQuery('[attribute!=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.\nThis selector is equivalent to :not([attr=\"value\"]).\nAdditional Notes:Because [name!=\"value\"] is a jQuery extension and not part of the CSS specification, queries using [name!=\"value\"] cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use $(\"your-pure-css-selector\").not('[name=\"value\"]') instead.Example:\n\nFinds all inputs that don't have the name 'newsletter' and appends text to the span next to it.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n\n    &lt;input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\" \/&gt;\n    &lt;span&gt;name is newsletter&lt;\/span&gt;\n\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" value=\"Cold Fusion\" \/&gt;\n    &lt;span&gt;no name&lt;\/span&gt;\n\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"accept\" value=\"Evil Plans\" \/&gt;\n\n    &lt;span&gt;name is accept&lt;\/span&gt;\n  &lt;\/div&gt;\n&lt;script&gt;$('input[name!=\"newsletter\"]').next().append('&lt;b&gt;; not newsletter&lt;\/b&gt;');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-equals-selector\/","title":"Attribute Equals Selector [name=\"value\"]","description":"\n\nattributeEquals  selector\n\n\nversion added: 1.0jQuery('[attribute=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\n\nDescription: Selects elements that have the specified attribute with a value exactly equal to a certain value.\nExample:\n\nFinds all inputs with a value of \"Hot Fuzz\" and changes the text of the next sibling span.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      &lt;input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\" \/&gt;\n      &lt;span&gt;name?&lt;\/span&gt;\n    &lt;\/label&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      &lt;input type=\"radio\" name=\"newsletter\" value=\"Cold Fusion\" \/&gt;\n      &lt;span&gt;value?&lt;\/span&gt;\n    &lt;\/label&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      &lt;input type=\"radio\" name=\"newsletter\" value=\"Evil Plans\" \/&gt;\n      &lt;span&gt;value?&lt;\/span&gt;\n    &lt;\/label&gt;\n  &lt;\/div&gt;\n&lt;script&gt;$('input[value=\"Hot Fuzz\"]').next().text(\" Hot Fuzz\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/attribute-starts-with-selector\/","title":"Attribute Starts With Selector [name^=\"value\"]","description":"\n\nattributeStartsWith  selector\n\n\nversion added: 1.0jQuery('[attribute^=\"value\"]')\n\nattribute\nAn attribute name.\nvalue\nAn attribute value. Quotes are mandatory.\n\nDescription: Selects elements that have the specified attribute with a value beginning exactly with a given string.\nThis selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.\nExample:\n\nFinds all inputs with an attribute name that starts with 'news' and puts text in them.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input name=\"newsletter\" \/&gt;\n\n  &lt;input name=\"milkman\" \/&gt;\n  &lt;input name=\"newsboy\" \/&gt;\n&lt;script&gt;$('input[name^=\"news\"]').val('news here!');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/before\/","title":"before","description":"\n\n.before( content [, content]  ) Returns: jQuery\n\n\nDescription: Insert content, specified by the parameter, before each element in the set of matched elements.\n\n\n\nversion added: 1.0.before( content [, content] )\ncontentHTML string, DOM element, or jQuery object to insert before each element in the set of matched elements.\ncontentOne or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.\n\n\n\nversion added: 1.4.before( function )\nfunctionA function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n\n\n\n\nThe .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nYou can create content and insert it before several elements at once:\n$('.inner').before('&lt;p&gt;Test&lt;\/p&gt;');\nEach inner &lt;div&gt; element gets this new content:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nYou can also select an element on the page and insert it before another:\n$('.container').before($('h2'));\nIf an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.\nIn jQuery 1.4, .before() and .after() will also work on disconnected DOM nodes:\n$(\"&lt;div\/&gt;\").before(\"&lt;p&gt;&lt;\/p&gt;\");\nThe result is a jQuery set that contains a paragraph and a div (in that order).\nAdditional Arguments\nSimilar to other content-adding methods such as .prepend() and .after(), .before() also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.\nFor example, the following will insert two new &lt;div&gt;s and an existing &lt;div&gt; before the first paragraph:\nvar $newdiv1 = $('&lt;div id=\"object1\"\/&gt;'),\n    newdiv2 = document.createElement('div'),\n    existingdiv1 = document.getElementById('foo');\n\n$('p').first().before($newdiv1, [newdiv2, existingdiv1]);\n\nSince .before() can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;div&gt;s as three separate arguments, like so: $('p').first().before($newdiv1, newdiv2, existingdiv1). The type and number of arguments will largely depend on how you collect the elements in your code.\n\nExamples:\n\n\nExample: Inserts some HTML before all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt; is what I said...&lt;\/p&gt;\n&lt;script&gt;$(\"p\").before(\"&lt;b&gt;Hello&lt;\/b&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Inserts a DOM element before all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt; is what I said...&lt;\/p&gt;\n&lt;script&gt;$(\"p\").before( document.createTextNode(\"Hello\") );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt; is what I said...&lt;\/p&gt;&lt;b&gt;Hello&lt;\/b&gt;\n&lt;script&gt;$(\"p\").before( $(\"b\") );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/bind\/","title":"bind","description":"\n\n.bind( eventType [, eventData] , handler(eventObject) ) Returns: jQuery\n\n\nDescription: Attach a handler to an event for the elements.\n\n\n\nversion added: 1.0.bind( eventType [, eventData], handler(eventObject) )\neventTypeA string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.bind( eventType [, eventData], preventBubble )\neventTypeA string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\neventDataA map of data that will be passed to the event handler.\npreventBubbleSetting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.\n\n\n\nversion added: 1.4.bind( events )\neventsA map of one or more DOM event types and functions to execute for them.\n\n\n\nAs of jQuery 1.7, the .on() method is the preferred method for attaching event handlers to a document. For earlier versions, the .bind() method is used for attaching an event handler directly to elements. Handlers are attached to the currently selected elements in the jQuery object, so those elements must exist at the point the call to .bind() occurs. For more flexible event binding, see the discussion of event delegation in .on() or .delegate().\nAny string is legal for eventType; if the string is not the name of a native DOM event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using .trigger() or .triggerHandler().\nIf the eventType string contains a period (.) character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call .bind('click.name', handler), the string click is the event type, and the string name is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of .unbind() for more information.\nThere are shorthand methods for some standard browser events such as .click() that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the events category.\nWhen an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.\nA basic usage of .bind() is:\n\n$('#foo').bind('click', function() {\n  alert('User clicked on \"foo.\"');\n});\n\nThis code will cause the element with an ID of foo to respond to the click event. When a user clicks inside this element thereafter, the alert will be shown.\nMultiple Events\nMultiple event types can be bound at once by including each one separated by a space:\n\n$('#foo').bind('mouseenter mouseleave', function() {\n  $(this).toggleClass('entered');\n});\n\nThe effect of this on &lt;div id=\"foo\"&gt; (when it does not initially have the \"entered\" class) is to add the \"entered\" class when the mouse enters the &lt;div&gt; and remove the class when the mouse leaves. \nAs of jQuery 1.4 we can bind multiple event handlers simultaneously by passing a map of event type\/handler pairs:\n\n$('#foo').bind({\n  click: function() {\n    \/\/ do something on click\n  },\n  mouseenter: function() {\n    \/\/ do something on mouseenter\n  }\n});\n\nEvent Handlers\nThe handler parameter takes a callback function, as shown above. Within the handler, the keyword this refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal $() function. For example:\n$('#foo').bind('click', function() {\n  alert($(this).text());\n});\n\nAfter this code is executed, when the user clicks inside the element with an ID of foo, its text contents will be shown as an alert.\n\nAs of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. This is useful when the event data feature is being used, or when other unique data resides in a closure around the event handler function.\nIn jQuery 1.4.3 you can now pass in false in place of an event handler. This will bind an event handler equivalent to: function(){ return false; }. This function can be removed at a later time by calling: .unbind( eventName, false ).\nThe Event object\nThe handler callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.\nThe event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. View the full Event Object.\nReturning false from a handler is equivalent to calling both .preventDefault() and .stopPropagation() on the event object.\nUsing the event object in a handler looks like this:\n$(document).ready(function() {\n  $('#foo').bind('click', function(event) {\n    alert('The mouse cursor is at ('\n      + event.pageX + ', ' + event.pageY + ')');\n  });\n});\n\nNote the parameter added to the anonymous function. This code will cause a click on the element with ID foo to report the page coordinates of the mouse cursor at the time of the click.\nPassing Event Data\nThe optional eventData parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:\nvar message = 'Spoon!';\n$('#foo').bind('click', function() {\n  alert(message);\n});\nmessage = 'Not in the face!';\n$('#bar').bind('click', function() {\n  alert(message);\n});\n\nBecause the handlers are closures that both have message in their environment, both will display the message Not in the face! when triggered. The variable's value has changed. To sidestep this, we can pass the message in using eventData:\n\nvar message = 'Spoon!';\n$('#foo').bind('click', {msg: message}, function(event) {\n  alert(event.data.msg);\n});\nmessage = 'Not in the face!';\n$('#bar').bind('click', {msg: message}, function(event) {\n  alert(event.data.msg);\n});\n\nThis time the variable is not referred to directly within the handlers; instead, the variable is passed in by value through eventData, which fixes the value at the time the event is bound. The first handler will now display Spoon! while the second will alert Not in the face!\n\n\n  Note that objects are passed to functions by reference, which further complicates this scenario.\n\nIf eventData is present, it is the second argument to the .bind() method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.\nSee the .trigger() method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.\nAs of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.\nNote: Although demonstrated in the next example, it is inadvisable to bind handlers to both the click and dblclick events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two click events before the dblclick and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.\n\nExamples:\n\n\nExample: Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { background:yellow; font-weight:bold; cursor:pointer; \npadding:5px; }\np.over { background: #ccc; }\nspan { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Click or double click here.&lt;\/p&gt;\n&lt;span&gt;&lt;\/span&gt;\n&lt;script&gt;\n$(\"p\").bind(\"click\", function(event){\nvar str = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n$(\"span\").text(\"Click happened! \" + str);\n});\n$(\"p\").bind(\"dblclick\", function(){\n$(\"span\").text(\"Double-click happened in \" + this.nodeName);\n});\n$(\"p\").bind(\"mouseenter mouseleave\", function(event){\n$(this).toggleClass(\"over\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To display each paragraph's text in an alert box whenever it is clicked:\n\n$(\"p\").bind(\"click\", function(){\nalert( $(this).text() );\n});\n\n\nExample: You can pass some extra data before the event handler:\n\nfunction handler(event) {\nalert(event.data.foo);\n}\n$(\"p\").bind(\"click\", {foo: \"bar\"}, handler)\n\n\nExample: Cancel a default action and prevent it from bubbling up by returning false:\n\n$(\"form\").bind(\"submit\", function() { return false; })\n\n\nExample: Cancel only the default action by using the .preventDefault() method.\n\n$(\"form\").bind(\"submit\", function(event) {\nevent.preventDefault();\n});\n\n\nExample: Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.\n\n$(\"form\").bind(\"submit\", function(event) {\n  event.stopPropagation();\n});\n\n\nExample: Bind custom events.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { color:red; }\nspan { color:blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Has an attached custom event.&lt;\/p&gt;\n&lt;button&gt;Trigger custom event&lt;\/button&gt;\n&lt;span style=\"display:none;\"&gt;&lt;\/span&gt;\n&lt;script&gt;\n\n$(\"p\").bind(\"myCustomEvent\", function(e, myName, myValue){\n$(this).text(myName + \", hi there!\");\n$(\"span\").stop().css(\"opacity\", 1)\n.text(\"myName = \" + myName)\n.fadeIn(30).fadeOut(1000);\n});\n$(\"button\").click(function () {\n$(\"p\").trigger(\"myCustomEvent\", [ \"John\" ]);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Bind multiple events simultaneously.\n\n$(\"div.test\").bind({\n  click: function(){\n    $(this).addClass(\"active\");\n  },\n  mouseenter: function(){\n    $(this).addClass(\"inside\");\n  },\n  mouseleave: function(){\n    $(this).removeClass(\"inside\");\n  }\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.boxModel\/","title":"jQuery.boxModel","description":"\n\njQuery.boxModel Returns: Boolean\n\n\nDescription: Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.\n\nversion added: 1.0jQuery.boxModel\nExamples:\n\n\nExample: Returns the box model for the iframe.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { color:blue; margin:20px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n  &lt;\/p&gt;\n&lt;script&gt;\n\n    $(\"p\").html(\"The box model for this iframe is: &lt;span&gt;\" +\n                jQuery.boxModel + \"&lt;\/span&gt;\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns false if the page is in Quirks Mode in Internet Explorer\n\n$.boxModel\nResult:\nfalse\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/blur\/","title":"blur","description":"\n\n.blur( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.blur( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.blur(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.blur()\n\n\nThis method is a shortcut for .bind('blur', handler) in the first two variations, and .trigger('blur') in the third.\nThe blur event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as &lt;input&gt;. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Field 1\" \/&gt;\n  &lt;input type=\"text\" value=\"Field 2\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the first input field:\n$('#target').blur(function() {\n  alert('Handler for .blur() called.');\n});\nNow if the first field has the focus, clicking elsewhere or tabbing away from it displays the alert:\nHandler for .blur() called.\nTo trigger the event programmatically, apply .blur() without an argument:\n$('#other').click(function() {\n  $('#target').blur();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nThe blur event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the blur event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping blur to the focusout event in its event delegation methods, .live() and .delegate().\n\nExample:\n\nTo trigger the blur event on all paragraphs:\n$(\"p\").blur();\n\n\n"},{"url":"http:\/\/api.jquery.com\/button-selector\/","title":":button Selector","description":"\n\nbutton  selector\n\n\nversion added: 1.0jQuery(':button')\nDescription: Selects all button elements and elements of type button.\nAdditional Notes:Because :button is a jQuery extension and not part of the CSS specification, queries using :button cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :button to select elements, first select the elements using a pure CSS selector, then use .filter(\":button\").Example:\n\nFinds all button inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\":button\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.browser\/","title":"jQuery.browser","description":"\nContents:\n\njQuery.browser \njQuery.browser.version \n\n\n\njQuery.browser Returns: Map\n\n\nDescription: Contains flags for the useragent, read from navigator.userAgent. We recommend against using this property; please try to use feature detection instead (see jQuery.support). jQuery.browser may be moved to a plugin in a future release of jQuery. \n\nversion added: 1.0jQuery.browser\n\nThe $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.\nAvailable flags are:\n\n  webkit (as of jQuery 1.4)\n  safari (deprecated)\n  opera\n  msie\n  mozilla\n\nThis property is available immediately. It is therefore safe to use it to determine whether or not to call $(document).ready().\nThe $.browser property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.\nBecause $.browser uses navigator.userAgent to determine the platform, it is vulnerable to spoofing by the user or misrepresentation by the browser itself. It is always best to avoid browser-specific code entirely where possible. The $.support property is available for detection of support for particular features rather than relying on $.browser. \n\nExamples:\n\n\nExample: Show the browser info.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:green; font-weight:bolder; margin:3px 0 0 10px; }\n  div { color:blue; margin-left:20px; font-size:14px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;Browser info:&lt;\/p&gt;\n\n&lt;script&gt;\n    jQuery.each(jQuery.browser, function(i, val) {\n      $(\"&lt;div&gt;\" + i + \" : &lt;span&gt;\" + val + \"&lt;\/span&gt;\")\n                .appendTo( document.body );\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns true if the current useragent is some version of Microsoft's Internet Explorer.\n\n\n  $.browser.msie;\n\n\n\nExample: Alerts \"this is WebKit!\" only for WebKit browsers\n\n\n  if ($.browser.webkit) {\n    alert( \"this is webkit!\" );\n  }\n\n\n\nExample: Alerts \"Do stuff for Firefox 3\" only for Firefox 3 browsers.\n\n\n  var ua = $.browser;\n  if ( ua.mozilla &amp;&amp; ua.version.slice(0,3) == \"1.9\" ) {\n    alert( \"Do stuff for firefox 3\" );\n  }\n\n\n\nExample: Set a CSS property that's specific to a particular browser.\n\n\n if ( $.browser.msie ) {\n    $(\"#div ul li\").css( \"display\",\"inline\" );\n } else {\n    $(\"#div ul li\").css( \"display\",\"inline-table\" );\n }\n\n\n\n\n\n\njQuery.browser.version Returns: String\n\n\nDescription: The version number of the rendering engine for the user's browser.\n\nversion added: 1.1.3jQuery.browser.version\n\nHere are some typical results:\n\n      Internet Explorer: 6.0, 7.0, 8.0\n      Mozilla\/Firefox\/Flock\/Camino: 1.7.12, 1.8.1.3, 1.9\n      Opera: 10.06, 11.01\n      Safari\/Webkit: 312.8, 418.9\n    \nNote that IE8 claims to be 7 in Compatibility View.\n\nExamples:\n\n\nExample: Returns the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes).\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; margin:20px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;&lt;\/p&gt;\n\n&lt;script&gt;\n$(\"p\").html( \"The version number of the rendering engine your browser uses is: &lt;span&gt;\" +\n                $.browser.version + \"&lt;\/span&gt;\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Alerts the version of IE's rendering engine that is being used:\n\n\nif ( $.browser.msie ) {\n  alert( $.browser.version );\n}\n\n\n\nExample: Often you only care about the \"major number,\" the whole number, which you can get by using JavaScript's built-in parseInt() function:\n\n\nif ( $.browser.msie ) {\n  alert( parseInt($.browser.version, 10) );\n}\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.Callbacks\/","title":"jQuery.Callbacks","description":"\n\njQuery.Callbacks( flags ) \n\n\nDescription: A multi-purpose callbacks list object that provides a powerful way to manage callback lists.\n\n\nversion added: 1.7jQuery.Callbacks( flags )\nflagsAn optional list of space-separated flags that change how the callback list behaves.\n\n\nThe $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.\n$.Callbacks() support a number of methods including callbacks.add(),callbacks.remove(), callbacks.fire() and callbacks.disable().\nGetting started\nThe following are two sample methods named fn1 and fn2:\n\nfunction fn1( value ){\n    console.log( value );\n}\n\nfunction fn2( value ){\n    fn1(\"fn2 says:\" + value);\n    return false;\n}\n\nThese can be added as callbacks to a $.Callbacks list and invoked follows:\n\nvar callbacks = $.Callbacks();\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo!\" ); \/\/ outputs: foo!\n\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar!\" ); \/\/ outputs: bar!, fn2 says: bar!\n\nThe result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.\nTwo specific methods were being used above: .add() and .fire() .add() supports adding new callbacks to the callback list, whilst fire() provides a way to pass arguments to be processed by the callbacks in the same list.\nAnother method supported by $.Callbacks is remove(), which has the ability to remove a particular callback from the callback list. Here\"s a practical example of .remove() being used:\n\nvar callbacks = $.Callbacks();\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo!\" ); \/\/ outputs: foo!\n\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar!\" ); \/\/ outputs: bar!, fn2 says: bar!\n\ncallbacks.remove(fn2);\ncallbacks.fire( \"foobar\" ); \n\n\/\/ only outputs foobar, as fn2 has been removed.\n\nSupported Flags\nThe flags argument is an optional argument to $.Callbacks(), structured as a list of space-separated strings that change how the callback list behaves (eg. $.Callbacks( 'unique stopOnFalse' )).\nPossible flags:\n\n    \nonce: Ensures the callback list can only be fired once (like a Deferred).\n    \nmemory: Keep track of previous values and will call any callback added after the list has been fired right away with the latest \"memorized\" values (like a Deferred).\n    \nunique: Ensures a callback can only be added once (so there are no duplicates in the list).\n    \nstopOnFalse: Interrupts callings when a callback returns false.\n\nBy default a callback list will act like an event callback list and can be \"fired\" multiple times.\nFor examples of how flags should ideally be used, see below:\n\n$.Callbacks( 'once' ):\n\nvar callbacks = $.Callbacks( \"once\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n\/*\noutput: \nfoo\n*\/\n\n\n$.Callbacks( 'memory' ):\nvar callbacks = $.Callbacks( \"memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n\/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nfoobar\n*\/\n\n\n$.Callbacks( 'unique' ):\nvar callbacks = $.Callbacks( \"unique\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); \/\/ repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n\/*\noutput:\nfoo\nbar\nfn2 says:bar\nfoobar\n*\/\n\n\n$.Callbacks( 'stopOnFalse' ):\n\nfunction fn1( value ){\n    console.log( value );\n    return false;\n}\n\nfunction fn2( value ){\n    fn1(\"fn2 says:\" + value);\n    return false;\n}\n\nvar callbacks = $.Callbacks( \"stopOnFalse\");\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n\/*\noutput:\nfoo\nbar\nfoobar\n*\/\n\nBecause $.Callbacks() supports a list of flags rather than just one, setting several flags has a cumulative effect similar to \"&amp;&amp;\". This means it's possible to combine flags to create callback lists that are say, both unique and ensure if list was already fired, adding more callbacks will have it called with the latest fired value (i.e. $.Callbacks(\"unique memory\")).\n\n$.Callbacks( 'unique memory' ):\n\nfunction fn1( value ){\n    console.log( value );\n    return false;\n}\n\nfunction fn2( value ){\n    fn1(\"fn2 says:\" + value);\n    return false;\n}\n    \nvar callbacks = $.Callbacks( \"unique memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); \/\/ repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"baz\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n\/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nbaz\nfn2 says:baz\nfoobar\n*\/\n\nFlag combinations are internally used with $.Callbacks() in jQuery for the .done() and .fail() buckets on a Deferred - both of which use $.Callbacks('memory once').\n$.Callbacks methods can also be detached, should there be a need to define short-hand versions for convenience:\n\nvar callbacks = $.Callbacks(),\n    add = callbacks.add,\n    remove = callbacks.remove,\n    fire = callbacks.fire;\n\nadd( fn1 );\nfire( \"hello world\");\nremove( fn1 );\n\n$.Callbacks, $.Deferred and Pub\/Sub\nThe general idea behind pub\/sub (the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur\nAs a demonstration of the component-creation capabilities of $.Callbacks(), it's possible to implement a Pub\/Sub system using only callback lists. Using $.Callbacks as a topics queue, a system for publishing and subscribing to topics can be implemented as follows:\nvar topics = {};\n\njQuery.Topic = function( id ) {\n    var callbacks,\n        method,\n        topic = id &amp;&amp; topics[ id ];\n    if ( !topic ) {\n        callbacks = jQuery.Callbacks();\n        topic = {\n            publish: callbacks.fire,\n            subscribe: callbacks.add,\n            unsubscribe: callbacks.remove\n        };\n        if ( id ) {\n            topics[ id ] = topic;\n        }\n    }\n    return topic;\n};\n\nThis can then be used by parts of your application to publish and subscribe to events of interest quite easily:\n\/\/ Subscribers\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n$.Topic( \"mailArrived\" ).subscribe( fn2 );\n$.Topic( \"mailSent\" ).subscribe( fn1 );\n\n\/\/ Publisher\n$.Topic( \"mailArrived\" ).publish( \"hello world!\" );\n$.Topic( \"mailSent\" ).publish( \"woo! mail!\" );\n\n\/\/ Here, \"hello world!\" gets pushed to fn1 and fn2\n\/\/ when the \"mailArrived\" notification is published\n\/\/ with \"woo! mail!\" also being pushed to fn1 when\n\/\/ the \"mailSent\" notification is published. \n\n\/*\noutput:\nhello world!\nfn2 says: hello world!\nwoo! mail!\n*\/\n\nWhilst this is useful, the implementation can be taken further. Using $.Deferreds,  it's possible to ensure publishers only publish notifications for subscribers once particular tasks have been completed (resolved). See the below code sample for some further comments on how this could be used in practice:\n\/\/ subscribe to the mailArrived notification\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n\n\/\/ create a new instance of Deferreds\nvar dfd = $.Deferred();\n\n\/\/ define a new topic (without directly publishing)\nvar topic = $.Topic( \"mailArrived\" );\n\n\/\/ when the deferred has been resolved, publish a \n\/\/ notification to subscribers\ndfd.done( topic.publish );\n\n\/\/ Here the Deferred is being resolved with a message\n\/\/ that will be passed back to subscribers. It's possible to\n\/\/ easily integrate this into a more complex routine\n\/\/ (eg. waiting on an ajax call to complete) so that\n\/\/ messages are only published once the task has actually\n\/\/ finished.\ndfd.resolve( \"its been published!\" );\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.add\/","title":"callbacks.add","description":"\n\ncallbacks.add( callbacks ) Returns: undefined\n\n\nDescription: Add a callback or a collection of callbacks to a callback list.\n\n\nversion added: 1.7callbacks.add( callbacks )\ncallbacksA function, or array of functions, that are to be added to the callback list.\n\n\nExample\nUsing callbacks.add() to add new callbacks to a callback list:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value );\n}\n\n\/\/ another function to also be added to the list\nvar bar = function( value ){\n    console.log( 'bar:' + value );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the function 'foo' to the list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list\ncallbacks.fire( 'hello' );  \n\/\/ outputs: 'foo: hello'\n\n\/\/ add the function 'bar' to the list\ncallbacks.add( bar );\n\n\/\/ fire the items on the list again\ncallbacks.fire( 'world' );  \n\n\/\/ outputs:\n\/\/ 'foo: world'\n\/\/ 'bar: world'\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.disable\/","title":"callbacks.disable","description":"\n\ncallbacks.disable() Returns: undefined\n\n\nDescription: Disable a callback list from doing anything more.\n\nversion added: 1.7callbacks.disable()\n\nExample\nUsing callbacks.disable() to disable further calls being made to a callback list:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( value );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the above function to the list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list\ncallbacks.fire( 'foo' ); \/\/ outputs: foo\n\n\/\/ disable further calls being possible\ncallbacks.disable();\n\n\/\/ attempt to fire with 'foobar' as an argument\ncallbacks.fire( 'foobar' ); \/\/ foobar isn't output\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.fire\/","title":"callbacks.fire","description":"\n\ncallbacks.fire( arguments ) Returns: undefined\n\n\nDescription: Call all of the callbacks with the given arguments\n\n\nversion added: 1.7callbacks.fire( arguments )\nargumentsThe argument or list of arguments to pass back to the callback list.\n\n\nExample\nUsing callbacks.fire() to invoke the callbacks in a list with any arguments that have been passed:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the function 'foo' to the list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list\ncallbacks.fire( 'hello' ); \/\/ outputs: 'foo: hello'\ncallbacks.fire( 'world '); \/\/ outputs: 'foo: world'\n\n\/\/ add another function to the list\nvar bar = function( value ){\n    console.log( 'bar:' + value );\n} \n\n\/\/ add this function to the list\ncallbacks.add( bar );\n\n\/\/ fire the items on the list again\ncallbacks.fire( 'hello again' );\n\/\/ outputs:\n\/\/ 'foo: hello again'\n\/\/ 'bar: hello again'\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.empty\/","title":"callbacks.empty","description":"\n\ncallbacks.empty() Returns: undefined\n\n\nDescription: Remove all of the callbacks from a list.\n\nversion added: 1.7callbacks.empty()\n\nExample\nUsing callbacks.empty() to empty a list of callbacks:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ){\n    console.log( 'foo:' + value1 + ',' + value2 );\n}\n\n\/\/ another function to also be added to the list\nvar bar = function( value1, value2 ){\n    console.log( 'bar:' + value1 + ',' + value2 );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the two functions\ncallbacks.add( foo );\ncallbacks.add( bar );\n\n\/\/ empty the callbacks list\ncallbacks.empty();\n\n\/\/ check to ensure all callbacks have been removed\nconsole.log( callbacks.has( foo ) ); \/\/ false\nconsole.log( callbacks.has( bar ) ); \/\/ false\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.fireWith\/","title":"callbacks.fireWith","description":"\n\ncallbacks.fireWith(  [context]  [, args]  ) Returns: undefined\n\n\nDescription: Call all callbacks in a list with the given context and arguments.\n\n\nversion added: 1.7callbacks.fireWith(  [context] [, args] )\ncontextA reference to the context in which the callbacks in the list should be fired.\nargsAn argument, or array of arguments, to pass to the callbacks in the list.\n\n\nExample\nUsing callbacks.fireWith() to fire a list of callbacks with a specific context and an array of arguments:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar log = function( value1, value2 ){\n    console.log( 'Received:' + value1 + ',' + value2 );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the log method to the callbacks list\ncallbacks.add( log );\n\n\/\/ fire the callbacks on the list using the context 'window'\n\/\/ and an arguments array\n\ncallbacks.fireWith( window, ['foo','bar']);\n\n\/\/ outputs: Received: foo, bar\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.fired\/","title":"callbacks.fired","description":"\n\ncallbacks.fired() Returns: Boolean\n\n\nDescription: Determine if the callbacks have already been called at least once.\n\nversion added: 1.7callbacks.fired()\n\nExample\nUsing callbacks.fired() to determine if the callbacks in a list have been called at least once:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the function 'foo' to the list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list\ncallbacks.fire( 'hello' ); \/\/ outputs: 'foo: hello'\ncallbacks.fire( 'world '); \/\/ outputs: 'foo: world'\n\n\/\/ test to establish if the callbacks have been called\nconsole.log( callbacks.fired() );\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.lock\/","title":"callbacks.lock","description":"\n\ncallbacks.lock() Returns: undefined\n\n\nDescription: Lock a callback list in its current state.\n\nversion added: 1.7callbacks.lock()\n\nExample\nUsing callbacks.lock() to lock a callback list to avoid further changes being made to the list state:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value);\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the logging function to the callback list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list, passing an argument\ncallbacks.fire( 'hello' );\n\/\/ outputs 'foo: hello'\n\n\/\/ lock the callbacks list\ncallbacks.lock();\n\n\/\/ try firing the items again\ncallbacks.fire( 'world' );\n\n\/\/ as the list was locked, no items\n\/\/ were called so 'world' isn't logged\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.has\/","title":"callbacks.has","description":"\n\ncallbacks.has( callback ) Returns: Boolean\n\n\nDescription: Determine whether a supplied callback is in a list\n\n\nversion added: 1.7callbacks.has( callback )\ncallbackThe callback to search for.\n\n\nExample\nUsing callbacks.has() to check if a callback list contains a specific callback:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ){\n    console.log( 'Received:' + value1 + ',' + value2 );\n}\n\n\/\/ a second function which will not be added to the list\nvar bar = function( value1, value2 ){\n    console.log( 'foobar');\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the log method to the callbacks list\ncallbacks.add( foo );\n\n\/\/ determine which callbacks are in the list\n\nconsole.log( callbacks.has( foo ) ); \/\/ true\nconsole.log( callbacks.has( bar ) ); \/\/ false\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.locked\/","title":"callbacks.locked","description":"\n\ncallbacks.locked() Returns: Boolean\n\n\nDescription: Determine if the callbacks list has been locked.\n\nversion added: 1.7callbacks.locked()\n\nExample\nUsing callbacks.locked() to determine the lock-state of a callback list:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value);\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the logging function to the callback list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list, passing an argument\ncallbacks.fire( 'hello' );\n\/\/ outputs 'foo: hello'\n\n\/\/ lock the callbacks list\ncallbacks.lock();\n\n\/\/ test the lock-state of the list\nconsole.log ( callbacks.locked() ); \/\/true\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/callbacks.remove\/","title":"callbacks.remove","description":"\n\ncallbacks.remove( callbacks ) Returns: undefined\n\n\nDescription: Remove a callback or a collection of callbacks from a callback list.\n\n\nversion added: 1.7callbacks.remove( callbacks )\ncallbacksA function, or array of functions, that are to be removed from the callback list.\n\n\nExample\nUsing callbacks.remove() to remove callbacks from a callback list:\n\n\/\/ a sample logging function to be added to a callbacks list\nvar foo = function( value ){\n    console.log( 'foo:' + value );\n}\n\nvar callbacks = $.Callbacks();\n\n\/\/ add the function 'foo' to the list\ncallbacks.add( foo );\n\n\/\/ fire the items on the list\ncallbacks.fire( 'hello' ); \/\/ outputs: 'foo: hello'\n\n\/\/ remove 'foo' from the callback list\ncallbacks.remove( foo );\n\n\/\/ fire the items on the list again\ncallbacks.fire( 'world' );  \n\n\/\/ nothing output as 'foo' is no longer in the list\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/change\/","title":"change","description":"\n\n.change( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.change( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.change(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.change()\n\n\nThis method is a shortcut for .bind('change', handler) in the first two variations, and .trigger('change') in the third.\nThe change event is sent to an element when its value changes. This event is limited to &lt;input&gt; elements, &lt;textarea&gt; boxes and &lt;select&gt; elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input class=\"target\" type=\"text\" value=\"Field 1\" \/&gt;\n  &lt;select class=\"target\"&gt;\n    &lt;option value=\"option1\" selected=\"selected\"&gt;Option 1&lt;\/option&gt;\n    &lt;option value=\"option2\"&gt;Option 2&lt;\/option&gt;\n  &lt;\/select&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the text input and the select box:\n$('.target').change(function() {\n  alert('Handler for .change() called.');\n});\nNow when the second option is selected from the dropdown, the alert is displayed. It is also displayed if you change the text in the field and then click away. If the field loses focus without the contents having changed, though, the event is not triggered. To trigger the event manually, apply .change() without arguments:\n$('#other').click(function() {\n  $('.target').change();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message. The message will display twice, because the handler has been bound to the change event on both of the form elements.\nAs of jQuery 1.4, the change event bubbles in Internet Explorer, behaving consistently with the event in other modern browsers.\n\nExamples:\n\n\nExample: Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;select name=\"sweets\" multiple=\"multiple\"&gt;\n    &lt;option&gt;Chocolate&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Candy&lt;\/option&gt;\n\n    &lt;option&gt;Taffy&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Caramel&lt;\/option&gt;\n    &lt;option&gt;Fudge&lt;\/option&gt;\n    &lt;option&gt;Cookie&lt;\/option&gt;\n\n  &lt;\/select&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"select\").change(function () {\n          var str = \"\";\n          $(\"select option:selected\").each(function () {\n                str += $(this).text() + \" \";\n              });\n          $(\"div\").text(str);\n        })\n        .change();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To add a validity test to all text input elements:\n\n$(\"input[type='text']\").change( function() {\n  \/\/ check input ($(this).val()) for validity here\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/checkbox-selector\/","title":":checkbox Selector","description":"\n\ncheckbox  selector\n\n\nversion added: 1.0jQuery(':checkbox')\nDescription: Selects all elements of type checkbox.\n$(':checkbox') is equivalent to $('[type=checkbox]'). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':checkbox') is equivalent to $('*:checkbox'), so $('input:checkbox') should be used instead. \nAdditional Notes:Because :checkbox is a jQuery extension and not part of the CSS specification, queries using :checkbox cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"checkbox\"] instead.Example:\n\nFinds all checkbox inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:25px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"checkbox\" \/&gt;\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n\n    &lt;input type=\"image\" \/&gt;\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n\n    &lt;input type=\"reset\" \/&gt;\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"form input:checkbox\").wrap('&lt;span&gt;&lt;\/span&gt;').parent().css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/class-selector\/","title":"Class Selector (&#8220;.class&#8221;)","description":"\n\nclass  selector\n\n\nversion added: 1.0jQuery('.class')\n\nclass\nA class to search for. An element can have multiple classes; only one of them must match.\n\nDescription: Selects all elements with the given class. \nFor class selectors, jQuery uses JavaScript's native getElementsByClassName() function if the browser supports it.\nExamples:\n\n\nExample: Finds the element with the class \"myClass\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div,span {\n    width: 100px;\n    height: 40px;\n    float:left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div class=\"notMe\"&gt;div class=\"notMe\"&lt;\/div&gt;\n\n  &lt;div class=\"myClass\"&gt;div class=\"myClass\"&lt;\/div&gt;\n  &lt;span class=\"myClass\"&gt;span class=\"myClass\"&lt;\/span&gt;\n&lt;script&gt;$(\".myClass\").css(\"border\",\"3px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Finds the element with both \"myclass\" and \"otherclass\" classes.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div,span {\n    width: 100px;\n    height: 40px;\n    float:left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div class=\"myclass\"&gt;div class=\"notMe\"&lt;\/div&gt;\n\n  &lt;div class=\"myclass otherclass\"&gt;div class=\"myClass\"&lt;\/div&gt;\n  &lt;span class=\"myclass otherclass\"&gt;span class=\"myClass\"&lt;\/span&gt;\n&lt;script&gt;$(\".myclass.otherclass\").css(\"border\",\"13px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/children\/","title":"children","description":"\n\n.children(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the children of each element in the set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.0.children(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .children() method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree. Note also that like most jQuery methods, .children() does not return text nodes; to get all children including text and comment nodes, use .contents().\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a basic nested list on it:\n\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at the level-2 list, we can find its children:\n$('ul.level-2').children().css('background-color', 'red');\nThe result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.\n\nExamples:\n\n\nExample: Find all children of the clicked element.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { font-size:16px; font-weight:bolder; }\n  div { width:130px; height:82px; margin:10px; float:left;\n        border:1px solid blue; padding:4px; }\n  #container { width:auto; height:105px; margin:0; float:none;\n        border:none; }\n  .hilite { border-color:red; }\n  #results { display:block; color:red; }\n  p { margin:10px; border:1px solid transparent; }\n  span { color:blue; border:1px solid transparent; }\n  input { width:100px; }\n  em { border:1px solid transparent; }\n  a { border:1px solid transparent; }\n  b { border:1px solid transparent; }\n  button { border:1px solid transparent; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"container\"&gt;\n\n    &lt;div&gt;\n      &lt;p&gt;This &lt;span&gt;is the &lt;em&gt;way&lt;\/em&gt; we&lt;\/span&gt; \n      write &lt;em&gt;the&lt;\/em&gt; demo,&lt;\/p&gt;\n\n    &lt;\/div&gt;\n    &lt;div&gt;\n      &lt;a href=\"#\"&gt;&lt;b&gt;w&lt;\/b&gt;rit&lt;b&gt;e&lt;\/b&gt;&lt;\/a&gt; the &lt;span&gt;demo,&lt;\/span&gt; &lt;button&gt;write \n      the&lt;\/button&gt; demo,\n    &lt;\/div&gt;\n\n    &lt;div&gt;\n      This &lt;span&gt;the way we &lt;em&gt;write&lt;\/em&gt; the &lt;em&gt;demo&lt;\/em&gt; so&lt;\/span&gt;\n\n      &lt;input type=\"text\" value=\"early\" \/&gt; in\n    &lt;\/div&gt;\n    &lt;p&gt;\n      &lt;span&gt;t&lt;\/span&gt;he &lt;span&gt;m&lt;\/span&gt;orning.\n      &lt;span id=\"results\"&gt;Found &lt;span&gt;0&lt;\/span&gt; children in &lt;span&gt;TAG&lt;\/span&gt;.&lt;\/span&gt;\n\n    &lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"#container\").click(function (e) {\n      $(\"*\").removeClass(\"hilite\");\n      var $kids = $(e.target).children();\n      var len = $kids.addClass(\"hilite\").length;\n\n      $(\"#results span:first\").text(len);\n      $(\"#results span:last\").text(e.target.tagName);\n\n      e.preventDefault();\n      return false;\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find all children of each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { font-size:16px; font-weight:bolder; }\n  span { color:blue; }\n  p { margin:5px 0; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello (this is a paragraph)&lt;\/p&gt;\n\n  &lt;div&gt;&lt;span&gt;Hello Again (this span is a child of the a div)&lt;\/span&gt;&lt;\/div&gt;\n  &lt;p&gt;And &lt;span&gt;Again&lt;\/span&gt; (in another paragraph)&lt;\/p&gt;\n\n  &lt;div&gt;And One Last &lt;span&gt;Time&lt;\/span&gt; (most text directly in a div)&lt;\/div&gt;\n&lt;script&gt;$(\"div\").children().css(\"border-bottom\", \"3px double red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find all children with a class \"selected\" of each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  body { font-size:16px; font-weight:bolder; }\n  p { margin:5px 0; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;span&gt;Hello&lt;\/span&gt;\n    &lt;p class=\"selected\"&gt;Hello Again&lt;\/p&gt;\n    &lt;div class=\"selected\"&gt;And Again&lt;\/div&gt;\n\n    &lt;p&gt;And One Last Time&lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;script&gt;$(\"div\").children(\".selected\").css(\"color\", \"blue\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/click\/","title":"click","description":"\n\n.click( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.click( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.click(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.click()\n\n\nThis method is a shortcut for .bind('click', handler) in the first two variations, and .trigger('click') in the third.\nThe click event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"target\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n\nThe event handler can be bound to any &lt;div&gt;:\n$('#target').click(function() {\n  alert('Handler for .click() called.');\n});\nNow if we click on this element, the alert is displayed:\nHandler for .click() called.\nWe can also trigger the event when a different element is clicked:\n$('#other').click(function() {\n  $('#target').click();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nThe click event is only triggered after this exact series of events:\n\n  The mouse button is depressed while the pointer is inside the element.\n  The mouse button is released while the pointer is inside the element.\n\nThis is usually the desired sequence before taking an action. If this is not required, the mousedown or mouseup event may be more suitable.\n\nExamples:\n\n\nExample: To hide paragraphs on a page when they are clicked:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:red; margin:5px; cursor:pointer; }\n  p.hilite { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;First Paragraph&lt;\/p&gt;\n\n  &lt;p&gt;Second Paragraph&lt;\/p&gt;\n  &lt;p&gt;Yet one more Paragraph&lt;\/p&gt;\n&lt;script&gt;\n    $(\"p\").click(function () { \n      $(this).slideUp(); \n    });\n    $(\"p\").hover(function () {\n      $(this).addClass(\"hilite\");\n    }, function () {\n      $(this).removeClass(\"hilite\");\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To trigger the click event on all of the paragraphs on the page:\n\n$(\"p\").click();\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/clone\/","title":"clone","description":"\n\n.clone(  [withDataAndEvents]  ) Returns: jQuery\n\n\nDescription: Create a deep copy of the set of matched elements.\n\n\n\nversion added: 1.0.clone(  [withDataAndEvents] )\nwithDataAndEventsA Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.\n\n\n\nversion added: 1.5.clone(  [withDataAndEvents] [, deepWithDataAndEvents] )\nwithDataAndEventsA Boolean indicating whether event handlers and data should be copied along with the elements. The default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back to false in 1.5.1 and up.\ndeepWithDataAndEventsA Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).\n\n\n\nThe .clone() method performs a deep copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes. When used in conjunction with one of the insertion methods, .clone() is a convenient way to duplicate elements on a page. Consider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nAs shown in the discussion for .append(),  normally when an element is inserted somewhere in the DOM, it is moved from its old location. So, given the code:\n$('.hello').appendTo('.goodbye');\nThe resulting DOM structure would be:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;\n    Goodbye\n    &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\nTo prevent this and instead create a copy of the element, you could write the following:\n$('.hello').clone().appendTo('.goodbye');\nThis would produce:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"goodbye\"&gt;\n    Goodbye\n    &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\nNote that when using the .clone() method, you can modify the cloned elements or their contents before (re-)inserting them into the document.\nNormally, any event handlers bound to the original element are not copied to the clone. The optional withDataAndEvents parameter allows us to change this behavior, and to instead make copies of all of the event handlers as well, bound to the new copy of the element. As of jQuery 1.4, all element data (attached by the .data() method) is also copied to the new copy. \nHowever, objects and arrays within element data are not copied and will continue to be shared between the cloned element and the original element. To deep copy all data, copy each one manually:\nvar $elem = $('#elem').data( \"arr\": [ 1 ] ), \/\/ Original element with attached data\n    $clone = $elem.clone( true )\n    .data( \"arr\", $.extend( [], $elem.data(\"arr\") ) ); \/\/ Deep copy to prevent data sharing\n\nAs of jQuery 1.5, withDataAndEvents can be optionally enhanced with deepWithDataAndEvents  to copy the events and data for all children of the cloned element.\n\nExamples:\n\n\nExample: Clones all b elements (and selects the clones) and prepends them to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;b&gt;Hello&lt;\/b&gt;&lt;p&gt;, how are you?&lt;\/p&gt;\n\n&lt;script&gt;\n  $(\"b\").clone().prependTo(\"p\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: When using .clone() to clone a collection of elements that are not attached to the DOM, their order when inserted into the DOM is not guaranteed. However, it may be possible to preserve sort order with a workaround, as demonstrated:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  #orig, #copy, #copy-correct {\n    float: left;\n    width: 20%;\n  }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"orig\"&gt;\n    &lt;div class=\"elem\"&gt;&lt;a&gt;1&lt;\/a&gt;&lt;\/div&gt;\n    &lt;div class=\"elem\"&gt;&lt;a&gt;2&lt;\/a&gt;&lt;\/div&gt;\n    &lt;div class=\"elem\"&gt;&lt;a&gt;3&lt;\/a&gt;&lt;\/div&gt;\n    &lt;div class=\"elem\"&gt;&lt;a&gt;4&lt;\/a&gt;&lt;\/div&gt;\n    &lt;div class=\"elem\"&gt;&lt;a&gt;5&lt;\/a&gt;&lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div id=\"copy\"&gt;&lt;\/div&gt;\n&lt;div id=\"copy-correct\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n\/\/ sort order is not guaranteed here and may vary with browser  \n$('#copy').append($('#orig .elem')\n          .clone()\n          .children('a')\n          .prepend('foo - ')\n          .parent()\n          .clone()); \n \n\/\/ correct way to approach where order is maintained\n$('#copy-correct')\n          .append($('#orig .elem')\n          .clone()\n          .children('a')\n          .prepend('bar - ')\n          .end()); \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/child-selector\/","title":"Child Selector (&#8220;parent  child&#8221;)","description":"\n\nchild  selector\n\n\nversion added: 1.0jQuery('parent &gt; child')\n\nparent\nAny valid selector.\nchild\nA selector to filter the child elements.\n\nDescription: Selects all direct child elements specified by \"child\" of elements specified by \"parent\".\n\nAs a CSS selector, the child combinator is supported by all modern web browsers including Safari, Firefox, Opera, Chrome, and Internet Explorer 7 and above, but notably not by Internet Explorer versions 6 and below. However, in jQuery, this selector (along with all others) works across all supported browsers, including IE6.\nThe child combinator (E &gt; F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.\nNote: The $(\"&gt; elem\", context) selector will be deprecated in a future release. Its usage is thus discouraged in lieu of using alternative selectors.\n\nExample:\n\nPlaces a border around all list items that are children of &lt;ul class=\"topnav\"&gt; .\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nbody { font-size:14px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n                    \n&lt;ul class=\"topnav\"&gt;\n    &lt;li&gt;Item 1&lt;\/li&gt;\n    &lt;li&gt;Item 2 \n        &lt;ul&gt;&lt;li&gt;Nested item 1&lt;\/li&gt;&lt;li&gt;Nested item 2&lt;\/li&gt;&lt;li&gt;Nested item 3&lt;\/li&gt;&lt;\/ul&gt;\n       &lt;\/li&gt;\n    &lt;li&gt;Item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;script&gt;$(\"ul.topnav &gt; li\").css(\"border\", \"3px double red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/checked-selector\/","title":":checked Selector","description":"\n\nchecked  selector\n\n\nversion added: 1.0jQuery(':checked')\nDescription: Matches all elements that are checked.\nThe :checked selector works for checkboxes and radio buttons. For select elements, use the :selected selector.\nExamples:\n\n\nExample: Finds all input elements that are checked.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;form&gt;\n  &lt;p&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" checked=\"checked\" value=\"Hourly\" \/&gt;\n\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Daily\" \/&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Weekly\" \/&gt;\n\n    &lt;input type=\"checkbox\" name=\"newsletter\" checked=\"checked\" value=\"Monthly\" \/&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Yearly\" \/&gt;\n  &lt;\/p&gt;\n&lt;\/form&gt;\n&lt;div&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nfunction countChecked() {\n  var n = $(\"input:checked\").length;\n  $(\"div\").text(n + (n &lt;= 1 ? \" is\" : \" are\") + \" checked!\");\n}\ncountChecked();\n$(\":checkbox\").click(countChecked);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: \n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ninput, label { line-height: 1.5em; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;form&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"orange\" id=\"orange\"&gt;\n    &lt;label for=\"orange\"&gt;orange&lt;\/label&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"apple\" id=\"apple\"&gt;\n    &lt;label for=\"apple\"&gt;apple&lt;\/label&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"banana\" id=\"banana\"&gt;\n    &lt;label for=\"banana\"&gt;banana&lt;\/label&gt;\n  &lt;\/div&gt;\n  &lt;div id=\"log\"&gt;&lt;\/div&gt;\n&lt;\/form&gt;\n\n&lt;script&gt;\n$(\"input\").click(function() {\n  $(\"#log\").html( $(\":checked\").val() + \" is checked!\" );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/closest\/","title":"closest","description":"\nContents:\n\n\nclosest( selector \u00a0) \n.closest( selector )\n              \n.closest( selector [, context]  )\n              \n.closest( jQuery object )\n              \n.closest( element )\n              \n\n\n\nclosest( selectors [\u00a0, context\u00a0] \u00a0) .closest( selectors [, context]  )\n              \n\n\n\n\n.closest( selector ) Returns: jQuery\n\n\nDescription: Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.\n\n\n\nversion added: 1.3.closest( selector )\nselectorA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.4.closest( selector [, context] )\nselectorA string containing a selector expression to match elements against.\ncontextA DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.\n\n\n\nversion added: 1.6.closest( jQuery object )\njQuery objectA jQuery object to match elements against.\n\n\n\nversion added: 1.6.closest( element )\nelementAn element to match elements against.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .closest() method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The .parents() and .closest() methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:\n\n    \n      \n        .closest()\n        .parents()\n      \n    \n    \n      \n        Begins with the current element\n        Begins with the parent element\n\n      \n        Travels up the DOM tree until it finds a match for the supplied selector\n        Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied \n      \n      \n        The returned jQuery object contains zero or one element\n        The returned jQuery object contains zero, one, or multiple elements\n      \n    \n  \n\n&lt;ul id=\"one\" class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li id=\"ii\" class=\"item-ii\"&gt;II\n  &lt;ul class=\"level-2\"&gt;\n    &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n    &lt;li class=\"item-b\"&gt;B\n      &lt;ul class=\"level-3\"&gt;\n        &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n        &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n        &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n      &lt;\/ul&gt;\n    &lt;\/li&gt;\n    &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n  &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nSuppose we perform a search for &lt;ul&gt; elements starting at item A:\n\n$('li.item-a').closest('ul')\n  .css('background-color', 'red');\n\nThis will change the color of the level-2 &lt;ul&gt;, since it is the first encountered when traveling up the DOM tree.\nSuppose we search for an &lt;li&gt; element instead:\n$('li.item-a').closest('li')\n  .css('background-color', 'red');\n\nThis will change the color of list item A. The .closest() method begins its search with the element itself before progressing up the DOM tree, and stops when item A matches the selector.\nWe can pass in a DOM element as the context within which to search for the closest element.\nvar listItemII = document.getElementById('ii');\n$('li.item-a').closest('ul', listItemII)\n  .css('background-color', 'red');\n$('li.item-a').closest('#one', listItemII)\n  .css('background-color', 'green');\nThis will change the color of the level-2 &lt;ul&gt;, because it is both the first &lt;ul&gt; ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 &lt;ul&gt;, however, because it is not a descendant of list item II.\n\nExamples:\n\n\nExample: Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  li { margin: 3px; padding: 3px; background: #EEEEEE; }\n  li.hilight { background: yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Click me!&lt;\/b&gt;&lt;\/li&gt;\n    &lt;li&gt;You can also &lt;b&gt;Click me!&lt;\/b&gt;&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;script&gt;\n  $( document ).bind(\"click\", function( e ) {\n    $( e.target ).closest(\"li\").toggleClass(\"hilight\");\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  li { margin: 3px; padding: 3px; background: #EEEEEE; }\n  li.hilight { background: yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Click me!&lt;\/b&gt;&lt;\/li&gt;\n    &lt;li&gt;You can also &lt;b&gt;Click me!&lt;\/b&gt;&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;script&gt;\n  var $listElements = $(\"li\").css(\"color\", \"blue\");\n  $( document ).bind(\"click\", function( e ) {\n    $( e.target ).closest( $listElements ).toggleClass(\"hilight\");\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n\n.closest( selectors [, context]  ) Returns: Array\n\n\nDescription: Gets an array of all the elements and selectors matched against the current element up through the DOM tree.\n\n\nversion added: 1.4.closest( selectors [, context] )\nselectorsAn array or string containing a selector expression to match elements against (can also be a jQuery object).\ncontextA DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.\n\nThis signature (only!) is deprecated as of jQuery 1.7. This method is primarily meant to be used internally or by plugin authors.\nExample:\n\nShow how event delegation can be done with closest.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;&lt;li&gt;&lt;\/li&gt;&lt;li&gt;&lt;\/li&gt;&lt;\/ul&gt;\n&lt;script&gt;\n  var close = $(\"li:first\").closest([\"ul\", \"body\"]);\n  $.each(close, function(i){\n  $(\"li\").eq(i).html( this.selector + \": \" + this.elem.nodeName );\n  });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.contains\/","title":"jQuery.contains","description":"\n\njQuery.contains( container, contained ) Returns: Boolean\n\n\nDescription: Check to see if a DOM element is within another DOM element.\n\n\nversion added: 1.4jQuery.contains( container, contained )\ncontainerThe DOM element that may contain the other element.\ncontainedThe DOM element that may be contained by the other element.\n\nExample:\n\nCheck if an element is inside another. Text and comment nodes are not supported.\njQuery.contains(document.documentElement, document.body); \/\/ true\njQuery.contains(document.body, document.documentElement); \/\/ false\n\n\n"},{"url":"http:\/\/api.jquery.com\/clearQueue\/","title":"clearQueue","description":"\n\n.clearQueue(  [queueName]  ) Returns: jQuery\n\n\nDescription: Remove from the queue all items that have not yet been run.\n\n\nversion added: 1.4.clearQueue(  [queueName] )\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\nWhen the .clearQueue() method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, .clearQueue() removes the remaining functions from fx, the standard effects queue. In this way it is similar to .stop(true). However,  while the .stop() method is meant to be used only with animations, .clearQueue() can also be used to remove any function that has been added to a generic jQuery queue with the .queue() method. \nExample:\n\nEmpty the queue.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { margin:3px; width:40px; height:40px;\n    position:absolute; left:0px; top:30px; \n    background:green; display:none; }\ndiv.newcolor { background:blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"start\"&gt;Start&lt;\/button&gt;\n&lt;button id=\"stop\"&gt;Stop&lt;\/button&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n$(\"#start\").click(function () {\n    \n  var myDiv = $(\"div\");\n  myDiv.show(\"slow\");\n  myDiv.animate({left:'+=200'},5000);\n  myDiv.queue(function () {\n    var _this = $(this);\n    _this.addClass(\"newcolor\");\n    _this.dequeue();\n  });\n\n  myDiv.animate({left:'-=200'},1500);\n  myDiv.queue(function () {\n    var _this = $(this);\n    _this.removeClass(\"newcolor\");\n    _this.dequeue();\n  });\n  myDiv.slideUp();\n  \n});\n\n$(\"#stop\").click(function () {\n  var myDiv = $(\"div\");\n  myDiv.clearQueue();\n  myDiv.stop();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/contains-selector\/","title":":contains() Selector","description":"\n\ncontains  selector\n\n\nversion added: 1.1.4jQuery(':contains(text)')\n\ntext\nA string of text to look for. It's case sensitive.\n\nDescription: Select all elements that contain the specified text.\nThe matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of :contains() can be written as bare words or surrounded by quotation marks. The text must have matching case to be selected.\nExample:\n\nFinds all divs containing \"John\" and underlines them.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div&gt;John Resig&lt;\/div&gt;\n\n&lt;div&gt;George Martin&lt;\/div&gt;\n&lt;div&gt;Malcom John Sinclair&lt;\/div&gt;\n&lt;div&gt;J. Ohn&lt;\/div&gt;\n      \n    \n&lt;script&gt;\n$(\"div:contains('John')\").css(\"text-decoration\", \"underline\");\n    &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/contents\/","title":"contents","description":"\n\n.contents() Returns: jQuery\n\n\nDescription: Get the children of each element in the set of matched elements, including text and comment nodes.\n\nversion added: 1.2.contents()\n\nGiven a jQuery object that represents a set of DOM elements, the .contents() method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .contents() and .children() methods are similar, except that the former includes text nodes as well as HTML elements in the resulting jQuery object.\nThe .contents() method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.\nConsider a simple &lt;div&gt; with a number of text nodes, each of which is separated by two line break elements (&lt;br \/&gt;):\n&lt;div class=\"container\"&gt;\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed \n  do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n  &lt;br \/&gt;&lt;br \/&gt;\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco \n  laboris nisi ut aliquip ex ea commodo consequat.\n  &lt;br \/&gt; &lt;br \/&gt;\n  Duis aute irure dolor in reprehenderit in voluptate velit \n  esse cillum dolore eu fugiat nulla pariatur.\n&lt;\/div&gt;\n\nWe can employ the .contents() method to help convert this blob of text into three well-formed paragraphs:\n\n$('.container').contents().filter(function() {\n  return this.nodeType == 3;\n})\n  .wrap('&lt;p&gt;&lt;\/p&gt;')\n.end()\n.filter('br')\n  .remove();\n\nThis code first retrieves the contents  of &lt;div class=\"container\"&gt; and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the .nodeType property of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for &lt;br \/&gt; elements, and these elements are removed.\n\nExamples:\n\n\nExample: Find all the text nodes inside a paragraph and wrap them with a bold tag.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello &lt;a href=\"http:\/\/ejohn.org\/\"&gt;John&lt;\/a&gt;, how are you doing?&lt;\/p&gt;\n&lt;script&gt;$(\"p\").contents().filter(function(){ return this.nodeType != 1; }).wrap(\"&lt;b\/&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Change the background colour of links inside of an iframe.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;iframe src=\"http:\/\/api.jquery.com\/\" width=\"80%\" height=\"600\" id='frameDemo'&gt;&lt;\/iframe&gt; \n&lt;script&gt;$(\"#frameDemo\").contents().find(\"a\").css(\"background-color\",\"#BADA55\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.cssHooks\/","title":"jQuery.cssHooks","description":"\n\njQuery.cssHooks Returns: Object\n\n\nDescription: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.\n\nversion added: 1.4.3jQuery.cssHooks\n\nThe $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients. \nFor example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css() accept a single, standard property name (border-radius, or with DOM property syntax, borderRadius).\nIn addition to providing fine-grained control over how specific style properties are handled, $.cssHooks also extends the set of properties available to the .animate() method.\nDefining a new css hook is straight-forward. The skeleton template below can serve as a guide to creating your own. \n(function($) {\n  \/\/ first, check to see if cssHooks are supported\n  if ( !$.cssHooks ) {\n    \/\/ if not, output an error message\n    throw(\"jQuery 1.4.3 or above is required for this plugin to work\");\n    return;\n  }\n\n  $.cssHooks[\"someCSSProp\"] = {\n    get: function( elem, computed, extra ) {\n      \/\/ handle getting the CSS property\n    },\n    set: function( elem, value ) {\n      \/\/ handle setting the CSS value\n    }\n  };\n})(jQuery);\n\nFeature Testing\nBefore normalizing a vendor-specific CSS property, first determine whether the browser supports the standard property or a vendor-prefixed variation. For example, to check for support of the border-radius property, see if any variation is a member of a temporary element's style object.\n(function($) {\n  function styleSupport( prop ) {\n    var vendorProp, supportedProp,\n\n        \/\/ capitalize first character of the prop to test vendor prefix\n        capProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n        prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n        div = document.createElement( \"div\" );\n\n    if ( prop in div.style ) {\n\n      \/\/ browser supports standard CSS property name\n      supportedProp = prop;\n    } else {\n\n      \/\/ otherwise test support for vendor-prefixed property names\n      for ( var i = 0; i &lt; prefixes.length; i++ ) {\n        vendorProp = prefixes[i] + capProp;\n        if ( vendorProp in div.style ) {\n          supportedProp = vendorProp;\n          break;\n        }\n      }\n    }\n\n    \/\/ avoid memory leak in IE\n    div = null;\n    \n    \/\/ add property to $.support so it can be accessed elsewhere\n    $.support[ prop ] = supportedProp;\n    \n    return supportedProp;\n  }\n\n  \/\/ call the function, e.g. testing for \"border-radius\" support:\n  styleSupport( \"borderRadius\" );\n})(jQuery);\n\nDefining a complete css hook\nTo define a complete css hook, combine the support test with a filled-out version of the skeleton template provided in the first example:\n(function($) {\n  if ( !$.cssHooks ) {\n    throw(\"jQuery 1.4.3+ is needed for this plugin to work\");\n    return;\n  }\n  \n  function styleSupport( prop ) {\n    var vendorProp, supportedProp,\n        capProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n        prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n        div = document.createElement( \"div\" );\n\n    if ( prop in div.style ) {\n      supportedProp = prop;\n    } else {\n      for ( var i = 0; i &lt; prefixes.length; i++ ) {\n        vendorProp = prefixes[i] + capProp;\n        if ( vendorProp in div.style ) {\n          supportedProp = vendorProp;\n          break;\n        }\n      }\n    }\n\n    div = null;\n    $.support[ prop ] = supportedProp\n    return supportedProp;\n  }\n\n  var borderRadius = styleSupport( \"borderRadius\" );\n\n  \/\/ Set cssHooks only for browsers that\n  \/\/ support a vendor-prefixed border radius\n  if ( borderRadius &amp;&amp; borderRadius !== \"borderRadius\" ) {\n    $.cssHooks.borderRadius = {\n      get: function( elem, computed, extra ) {\n        return $.css( elem, borderRadius );\n      },\n      set: function( elem, value) {\n        elem.style[ borderRadius ] = value;\n      }\n    };\n  }\n})(jQuery);\n\nYou can then set the border radius in a supported browser using either the DOM (camelCased) style or the CSS (hyphenated) style:\n\n$(\"#element\").css(\"borderRadius\", \"10px\");\n$(\"#another\").css(\"border-radius\", \"20px\");\n\nIf the browser lacks support for any form of the CSS property, vendor-prefixed or not, the style is not applied to the element. However, if the browser supports a proprietary alternative, it can be applied to the cssHooks instead. \n\n (function($) {\n  \/\/ feature test for support of a CSS property\n  \/\/ and a proprietary alternative\n  \/\/ ...\n\n\n if ( $.support.someCSSProp &amp;&amp; $.support.someCSSProp !== \"someCSSProp\" ) {\n\n    \/\/ Set cssHooks for browsers that\n    \/\/ support only a vendor-prefixed someCSSProp\n    $.cssHooks.someCSSProp = {\n      get: function( elem, computed, extra ) {\n        return $.css( elem, $.support.someCSSProp );\n      },\n      set: function( elem, value) {\n        elem.style[ $.support.someCSSProp ] = value;\n      }\n    };\n  } else if ( supportsProprietaryAlternative ) {\n    $.cssHooks.someCSSProp = {\n      get: function( elem, computed, extra ) {\n        \/\/ Handle crazy conversion from the proprietary alternative \n      },\n      set: function( elem, value ) {\n        \/\/ Handle crazy conversion to the proprietary alternative\n      }\n    }\n  }\n\n})(jQuery);\n\nSpecial units\nBy default, jQuery adds a \"px\" unit to the values passed to the .css() method. This behavior can be prevented by adding the property to the jQuery.cssNumber object\n$.cssNumber[\"someCSSProp\"] = true;\nAnimating with cssHooks\nA css hook can also hook into jQuery's animation mechanism by adding a property to the jQuery.fx.step object:\n$.fx.step[\"someCSSProp\"] = function(fx){\n  $.cssHooks[\"someCSSProp\"].set( fx.elem, fx.now + fx.unit );\n};\n\nNote that this works best for simple numeric-value animations. More custom code may be required depending on the CSS property, the type of value it returns, and the animation's complexity.\n\n\n"},{"url":"http:\/\/api.jquery.com\/context\/","title":".context","description":"\n\ncontext Returns: Element\n\n\nDescription: The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.\n\nversion added: 1.3context\n\nThe .live() method for binding event handlers uses this property to determine the root element to use for its event delegation needs.\n\nThe value of this property is typically equal to document, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an &lt;iframe&gt; or XML document.\nNote that the context property may only apply to the elements originally selected by jQuery(), as it is possible for the user to add elements to the collection via methods such as .add() and these may have a different context.\n\nExample:\n\nDetermine the exact context used.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { cursor:pointer; }\n  div { width:50px; height:30px; margin:5px; float:left;\n        background:green; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Context:&lt;ul&gt;&lt;\/ul&gt;\n&lt;script&gt;$(\"ul\")\n  .append(\"&lt;li&gt;\" + $(\"ul\").context + \"&lt;\/li&gt;\")\n  .append(\"&lt;li&gt;\" + $(\"ul\", document.body).context.nodeName + \"&lt;\/li&gt;\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/css\/","title":"css","description":"\nContents:\n\n\ncss( propertyName \u00a0) .css( propertyName )\n              \n\n\ncss( propertyName , value \u00a0) \n.css( propertyName, value )\n              \n.css( propertyName, function(index, value) )\n              \n.css( map )\n              \n\n\n\n\n\n.css( propertyName ) Returns: String\n\n\nDescription: Get the value of a style property for the first element in the set of matched elements.\n\n\nversion added: 1.0.css( propertyName )\npropertyNameA CSS property.\n\n\nThe .css() method is a convenient way to get a style property from the first matched element, especially in light of the different ways browsers access most of those properties (the getComputedStyle() method in standards-based browsers versus the currentStyle and runtimeStyle properties in Internet Explorer) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the float property as styleFloat, while W3C standards-compliant browsers refer to it as cssFloat. The .css() method accounts for such differences, producing the same result no matter which term we use. For example, an element that is floated left will return the string left for each of the following three lines:\n\n\t\t\t\t\t$('div.left').css('float');\n\t\t\t\t\t$('div.left').css('cssFloat');\n\t\t\t\t\t$('div.left').css('styleFloat');\n\t\t\t\t\nAlso, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both .css('background-color') and .css('backgroundColor'). Different browsers may return CSS color values that are logically but not textually equal, e.g., #FFF, #ffffff, and rgb(255,255,255).\nShorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered margin, use: $(elem).css('marginTop') and $(elem).css('marginRight'), and so on.\n\nExample:\n\nTo access the background color of a clicked div.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { width:60px; height:60px; margin:5px; float:left; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;span id=\"result\"&gt;&amp;nbsp;&lt;\/span&gt;\n&lt;div style=\"background-color:blue;\"&gt;&lt;\/div&gt;\n&lt;div style=\"background-color:rgb(15,99,30);\"&gt;&lt;\/div&gt;\n\n&lt;div style=\"background-color:#123456;\"&gt;&lt;\/div&gt;\n&lt;div style=\"background-color:#f11;\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n$(\"div\").click(function () {\n  var color = $(this).css(\"background-color\");\n  $(\"#result\").html(\"That div is &lt;span style='color:\" +\n                     color + \";'&gt;\" + color + \"&lt;\/span&gt;.\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.css( propertyName, value ) Returns: jQuery\n\n\nDescription: Set one or more CSS properties for the  set of matched elements.\n\n\n\nversion added: 1.0.css( propertyName, value )\npropertyNameA CSS property name.\nvalueA value to set for the property.\n\n\n\nversion added: 1.4.css( propertyName, function(index, value) )\npropertyNameA CSS property name.\nfunction(index, value)A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.\n\n\n\nversion added: 1.0.css( map )\nmapA map of property-value pairs to set.\n\n\n\nAs with the .prop() method, the .css() method makes setting properties of elements quick and easy. This method can take either a property name and value as separate parameters, or a single map of key-value pairs (JavaScript object notation).\nAlso, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both .css({'background-color': '#ffe', 'border-left': '5px solid #ccc'}) and .css({backgroundColor: '#ffe', borderLeft: '5px solid #ccc'}). Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they're required due to the hyphen in the name.\nWhen using .css() as a setter, jQuery modifies the element's style property. For example,  $('#mydiv').css('color', 'green') is equivalent to document.getElementById('mydiv').style.color = 'green'. Setting the value of a style property to an empty string \u2014 e.g. $('#mydiv').css('color', '') \u2014 removes that property from an element if it has already been directly applied, whether in the HTML style attribute, through jQuery's .css() method, or through direct DOM manipulation of the style property. It does not, however, remove a style that has been applied with a CSS rule in a stylesheet or &lt;style&gt; element.\nAs of jQuery 1.6, .css() accepts relative values similar to .animate(). Relative values are a string starting with += or -= to increment or decrement the current value. For example, if an element's padding-left was 10px, .css( \"padding-left\", \"+=15\" ) would result in a total padding-left of 25px.\nAs of jQuery 1.4, .css() allows us to pass a function as the property value:\n$('div.example').css('width', function(index) {\n  return index * 50;\n});\nThis example sets the widths of the matched elements to incrementally larger values.\nNote: If nothing is returned in the setter function (ie. function(index, style){}), or if undefined is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.\n\nExamples:\n\n\nExample: To change the color of any paragraph to red on mouseover event.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; width:200px; font-size:14px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Just roll the mouse over me.&lt;\/p&gt;\n\n  &lt;p&gt;Or me to see a color change.&lt;\/p&gt;\n  \n&lt;script&gt;\n  $(\"p\").mouseover(function () {\n    $(this).css(\"color\",\"red\");\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Increase the width of #box by 200 pixels\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  #box { background: black; color: snow; width:100px; padding:10px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div id=\"box\"&gt;Click me to grow&lt;\/div&gt;\n  \n&lt;script&gt;\n  $(\"#box\").one( \"click\", function () {\n    $( this ).css( \"width\",\"+=200\" );\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To highlight a clicked word in the paragraph.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; font-weight:bold; cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;\n  Once upon a time there was a man\n  who lived in a pizza parlor. This\n  man just loved pizza and ate it all \n  the time.  He went on to be the\n  happiest man in the world.  The end.\n&lt;\/p&gt;\n&lt;script&gt;\n  var words = $(\"p:first\").text().split(\" \");\n  var text = words.join(\"&lt;\/span&gt; &lt;span&gt;\");\n  $(\"p:first\").html(\"&lt;span&gt;\" + text + \"&lt;\/span&gt;\");\n  $(\"span\").click(function () {\n    $(this).css(\"background-color\",\"yellow\");\n  });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To set the color of all paragraphs to red and background to blue:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:green; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Move the mouse over a paragraph.&lt;\/p&gt;\n  &lt;p&gt;Like this one or the one above.&lt;\/p&gt;\n\n&lt;script&gt;\n  $(\"p\").hover(function () {\n    $(this).css({'background-color' : 'yellow', 'font-weight' : 'bolder'});\n  }, function () {\n    var cssObj = {\n      'background-color' : '#ddd',\n      'font-weight' : '',\n      'color' : 'rgb(0,40,244)'\n    }\n    $(this).css(cssObj);\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Increase the size of a div when you click it:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width: 20px; height: 15px; background-color: #f33; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div&gt;click&lt;\/div&gt;\n  &lt;div&gt;click&lt;\/div&gt;\n\n&lt;script&gt;\n  $(\"div\").click(function() {\n    $(this).css({\n      width: function(index, value) {\n        return parseFloat(value) * 1.2;\n      }, \n      height: function(index, value) {\n        return parseFloat(value) * 1.2;\n      }\n\n    });\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.data\/","title":"jQuery.data","description":"\nContents:\n\n\njQuery.data( element , key , value \u00a0) jQuery.data( element, key, value )\n              \n\n\njQuery.data( element , key \u00a0) \njQuery.data( element, key )\n              \njQuery.data( element )\n              \n\n\n\n\n\njQuery.data( element, key, value ) Returns: Object\n\n\nDescription: Store arbitrary data associated with the specified element. Returns the value that was set.\n\n\nversion added: 1.2.3jQuery.data( element, key, value )\nelementThe DOM element to associate with the data.\nkeyA string naming the piece of data to set.\nvalueThe new data value.\n\n\nNote: This is a low-level method; a more convenient .data() is also available.\nThe jQuery.data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:\n\njQuery.data(document.body, 'foo', 52);\njQuery.data(document.body, 'bar', 'test');\n\nNote: this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.\n\nExample:\n\nStore then retrieve a value from the div element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    The values stored were \n    &lt;span&gt;&lt;\/span&gt;\n    and\n    &lt;span&gt;&lt;\/span&gt;\n  &lt;\/div&gt;\n&lt;script&gt;var div = $(\"div\")[0];\n    jQuery.data(div, \"test\", { first: 16, last: \"pizza!\" });\n    $(\"span:first\").text(jQuery.data(div, \"test\").first);\n    $(\"span:last\").text(jQuery.data(div, \"test\").last);&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\njQuery.data( element, key ) Returns: Object\n\n\nDescription: Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.\n\n\n\nversion added: 1.2.3jQuery.data( element, key )\nelementThe DOM element to query for the data.\nkeyName of the data stored.\n\n\n\nversion added: 1.4jQuery.data( element )\nelementThe DOM element to query for the data.\n\n\n\nNote: This is a low-level method; a more convenient .data() is also available.\nRegarding HTML5 data-* attributes: This low-level method does NOT retrieve the data-* attributes unless the more convenient .data() method has already retrieved them.\nThe jQuery.data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:\nalert(jQuery.data( document.body, 'foo' ));\nalert(jQuery.data( document.body ));\nThe above lines alert the data values that were set on the body element. If nothing was set on that element, an empty string is returned.\nCalling jQuery.data(element) retrieves all of the element's associated values as a JavaScript object. Note that jQuery itself uses this method to store data for internal use, such as event handlers, so do not assume that it contains only data that your own code has stored.\nNote: this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.\n\nExample:\n\nGet the data named \"blah\" stored at for an element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { margin:5px; background:yellow; }\nbutton { margin:5px; font-size:14px; }\np { margin:5px; color:blue; }\nspan { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;A div&lt;\/div&gt;\n&lt;button&gt;Get \"blah\" from the div&lt;\/button&gt;\n&lt;button&gt;Set \"blah\" to \"hello\"&lt;\/button&gt;\n\n&lt;button&gt;Set \"blah\" to 86&lt;\/button&gt;\n&lt;button&gt;Remove \"blah\" from the div&lt;\/button&gt;\n&lt;p&gt;The \"blah\" value of this div is &lt;span&gt;?&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;\n$(\"button\").click(function(e) {\n  var value, div = $(\"div\")[0];\n\n  switch ($(\"button\").index(this)) {\n    case 0 :\n      value = jQuery.data(div, \"blah\");\n      break;\n    case 1 :\n      jQuery.data(div, \"blah\", \"hello\");\n      value = \"Stored!\";\n      break;\n    case 2 :\n      jQuery.data(div, \"blah\", 86);\n      value = \"Stored!\";\n      break;\n    case 3 :\n      jQuery.removeData(div, \"blah\");\n      value = \"Removed!\";\n      break;\n  }\n\n  $(\"span\").text(\"\" + value);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/data\/","title":"data","description":"\nContents:\n\n\ndata( key , value \u00a0) \n.data( key, value )\n              \n.data( obj )\n              \n\n\n\ndata( key \u00a0) \n.data( key )\n              \n.data()\n              \n\n\n\n\n\n.data( key, value ) Returns: jQuery\n\n\nDescription: Store arbitrary data associated with the matched elements.\n\n\n\nversion added: 1.2.3.data( key, value )\nkeyA string naming the piece of data to set.\nvalueThe new data value; it can be any Javascript type including Array or Object.\n\n\n\nversion added: 1.4.3.data( obj )\nobjAn object of key-value pairs of data to update.\n\n\n\nThe .data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.\n We can set several distinct values for a single element and retrieve them later:\n\n$('body').data('foo', 52);\n$('body').data('bar', { myType: 'test', count: 40 });\n\n$('body').data('foo'); \/\/ 52\n$('body').data(); \/\/ {foo: 52, bar: { myType: 'test', count: 40 }}\n\nIn jQuery 1.4.3 setting an element's data object with .data(obj) extends the data previously stored with that element. jQuery itself uses the .data() method to save information under the names 'events' and 'handle', and also reserves any data name starting with an underscore ('_') for internal use.\nPrior to jQuery 1.4.3 (starting in jQuery 1.4) the .data() method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.\nDue to the way browsers interact with plugins and external code, the .data() method cannot be used on &lt;object&gt; (unless it's a Flash plugin), &lt;applet&gt; or &lt;embed&gt; elements.\n\nAdditional Notes:Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.Example:\n\nStore then retrieve a value from the div element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    The values stored were \n    &lt;span&gt;&lt;\/span&gt;\n    and\n    &lt;span&gt;&lt;\/span&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n$(\"div\").data(\"test\", { first: 16, last: \"pizza!\" });\n$(\"span:first\").text($(\"div\").data(\"test\").first);\n$(\"span:last\").text($(\"div\").data(\"test\").last);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.data( key ) Returns: Object\n\n\nDescription: Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).\n\n\n\nversion added: 1.2.3.data( key )\nkeyName of the data stored.\n\n\nversion added: 1.4.data()\n\n\nThe .data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:\n\nalert($('body').data('foo'));\nalert($('body').data());\n\nThe above lines alert the data values that were set on the body element. If no data at all was set on that element, undefined is returned.\n\nalert( $(\"body\").data(\"foo\")); \/\/undefined\n$(\"body\").data(\"bar\", \"foobar\");\nalert( $(\"body\").data(\"bar\")); \/\/foobar\n\nHTML 5 data- Attributes\nAs of jQuery 1.4.3 HTML 5 data- attributes will be automatically pulled in to jQuery's data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the W3C HTML5 specification.\nFor example, given the following HTML:\n&lt;div data-role=\"page\" data-last-value=\"43\" data-hidden=\"true\" data-options='{\"name\":\"John\"}'&gt;&lt;\/div&gt;\nAll of the following jQuery code will work.\n$(\"div\").data(\"role\") === \"page\";\n$(\"div\").data(\"lastValue\") === 43;\n$(\"div\").data(\"hidden\") === true;\n$(\"div\").data(\"options\").name === \"John\";\nEvery attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null) otherwise it is left as a string. To retrieve the value's attribute as a string without any attempt to convert it, use the attr() method. When the data attribute is an object (starts with '{') or array (starts with '[') then jQuery.parseJSON is used to parse the string; it must follow valid JSON syntax including quoted property names. The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).\nCalling .data() with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with .data(obj). Using the object directly to get or set values is faster than making individual calls to .data() to get or set each value:\n\nvar mydata = $(\"#mydiv\").data();\nif ( mydata.count &lt; 9 ) {\n    mydata.count = 43;\n    mydata.status = \"embiggened\";\n}\n\n\nAdditional Notes:Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.Example:\n\nGet the data named \"blah\" stored at for an element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:5px; background:yellow; }\n  button { margin:5px; font-size:14px; }\n  p { margin:5px; color:blue; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;A div&lt;\/div&gt;\n  &lt;button&gt;Get \"blah\" from the div&lt;\/button&gt;\n  &lt;button&gt;Set \"blah\" to \"hello\"&lt;\/button&gt;\n\n  &lt;button&gt;Set \"blah\" to 86&lt;\/button&gt;\n  &lt;button&gt;Remove \"blah\" from the div&lt;\/button&gt;\n  &lt;p&gt;The \"blah\" value of this div is &lt;span&gt;?&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;\n$(\"button\").click(function(e) {\n  var value;\n\n  switch ($(\"button\").index(this)) {\n    case 0 :\n      value = $(\"div\").data(\"blah\");\n      break;\n    case 1 :\n      $(\"div\").data(\"blah\", \"hello\");\n      value = \"Stored!\";\n      break;\n    case 2 :\n      $(\"div\").data(\"blah\", 86);\n      value = \"Stored!\";\n      break;\n    case 3 :\n      $(\"div\").removeData(\"blah\");\n      value = \"Removed!\";\n      break;\n  }\n\n  $(\"span\").text(\"\" + value);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/dblclick\/","title":"dblclick","description":"\n\n.dblclick( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.dblclick( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.dblclick(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.dblclick()\n\n\nThis method is a shortcut for .bind('dblclick', handler) in the first two variations, and .trigger('dblclick') in the third.\nThe dblclick event is sent to an element when the element is double-clicked. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"target\"&gt;\n  Double-click here\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n\n\nThe event handler can be bound to any &lt;div&gt;:\n$('#target').dblclick(function() {\n  alert('Handler for .dblclick() called.');\n});\nNow double-clicking on this element displays the alert:\nHandler for .dblclick() called.\nTo trigger the event manually, apply .dblclick() without an argument:\n$('#other').click(function() {\n  $('#target').dblclick();\n});\nAfter this code executes, (single) clicks on Trigger the handler will also alert the message.\nThe dblclick event is only triggered after this exact series of events:\n\nThe mouse button is depressed while the pointer is inside the element.\nThe mouse button is released while the pointer is inside the element.\nThe mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.\nThe mouse button is released while the pointer is inside the element.\n\nIt is inadvisable to bind handlers to both the click and dblclick events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two click events before the dblclick and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.\n\n\nExamples:\n\n\nExample: To bind a \"Hello World!\" alert box the dblclick event on every paragraph on the page:\n\n$(\"p\").dblclick( function () { alert(\"Hello World!\"); });\n\n\nExample: Double click to toggle background color.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { background:blue;\n        color:white;\n        height:100px;\n        width:150px;\n }\n  div.dbl { background:yellow;color:black; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;&lt;span&gt;Double click the block&lt;\/span&gt;\n&lt;script&gt;\n    var divdbl = $(\"div:first\");\n    divdbl.dblclick(function () { \n      divdbl.toggleClass('dbl'); \n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.always\/","title":"deferred.always","description":"\n\ndeferred.always( alwaysCallbacks [, alwaysCallbacks]  ) Returns: Deferred\n\n\nDescription:  Add handlers to be called when the Deferred object is either resolved or rejected. \n\n\nversion added: 1.6deferred.always( alwaysCallbacks [, alwaysCallbacks] )\nalwaysCallbacks\n        A function, or array of functions, that is called when the Deferred is resolved or rejected.\n      \nalwaysCallbacks\n        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n      \n\nThe argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the alwaysCallbacks are called. Since deferred.always() returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional .always() methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the resolve, reject, resolveWith or rejectWith method calls. For more information, see the documentation for Deferred object.\nExample:\n\nSince the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.\n\n$.get(\"test.php\").always( function() { \n  alert(\"$.get completed with success or error callback arguments\"); \n} );\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.done\/","title":"deferred.done","description":"\n\ndeferred.done( doneCallbacks [, doneCallbacks]  ) Returns: Deferred\n\n\nDescription:  Add handlers to be called when the Deferred object is resolved. \n\n\nversion added: 1.5deferred.done( doneCallbacks [, doneCallbacks] )\ndoneCallbacks\n             A function, or array of functions, that are called when the Deferred is resolved.\n           \ndoneCallbacks\n             Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n           \n\nThe deferred.done() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since deferred.done() returns the deferred object, other methods of the deferred object can be chained to this one, including additional .done() methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the resolve or resolveWith method call in the order they were added. For more information, see the documentation for Deferred object.\nExamples:\n\n\nExample: Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.\n\n\n$.get(\"test.php\").done(function() { \n  alert(\"$.get succeeded\"); \n});\n\n\n\nExample: Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n &lt;button&gt;Go&lt;\/button&gt;\n &lt;p&gt;Ready...&lt;\/p&gt;\n\n&lt;script&gt;\n\/\/ 3 functions to call when the Deferred object is resolved\nfunction fn1() {\n  $(\"p\").append(\" 1 \");\n}\nfunction fn2() {\n  $(\"p\").append(\" 2 \");\n}\nfunction fn3(n) {\n  $(\"p\").append(n + \" 3 \" + n);\n}\n\n\/\/ create a deferred object\nvar dfd = $.Deferred();\n\n\/\/ add handlers to be called when dfd is resolved\ndfd\n\/\/ .done() can take any number of functions or arrays of functions\n.done( [fn1, fn2], fn3, [fn2, fn1] )\n\/\/ we can chain done methods, too\n.done(function(n) {\n  $(\"p\").append(n + \" we're done.\");\n});\n\n\/\/ resolve the Deferred object when the button is clicked\n$(\"button\").bind(\"click\", function() {\n  dfd.resolve(\"and\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.fail\/","title":"deferred.fail","description":"\n\ndeferred.fail( failCallbacks [, failCallbacks]  ) Returns: Deferred\n\n\nDescription:  Add handlers to be called when the Deferred object is rejected. \n\n\nversion added: 1.5deferred.fail( failCallbacks [, failCallbacks] )\nfailCallbacks\n             A function, or array of functions, that are called when the Deferred is rejected.\n           \nfailCallbacks\n             Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n           \n\nThe deferred.fail() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since deferred.fail() returns the deferred object, other methods of the deferred object can be chained to this one, including additional deferred.fail() methods. The failCallbacks are executed using the arguments provided to the deferred.reject() or deferred.rejectWith() method call in the order they were added. For more information, see the documentation for Deferred object.\nExample:\n\nSince the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.\n\n$.get(\"test.php\")\n  .done(function(){ alert(\"$.get succeeded\"); })\n  .fail(function(){ alert(\"$.get failed!\"); });\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.isRejected\/","title":"deferred.isRejected","description":"\n\ndeferred.isRejected() Returns: Boolean\n\n\nDescription:  Determine whether a Deferred object has been rejected. \n\nversion added: 1.5deferred.isRejected()\n\nAs of jQuery 1.7 this API has been deprecated; please use deferred.state() instead.\nReturns true if the Deferred object is in the rejected state, meaning that either deferred.reject() or deferred.rejectWith() has been called for the object and the failCallbacks have been called (or are in the process of being called).\nNote that a Deferred object can be in one of three states: pending, resolved, or rejected; use deferred.isResolved() to determine whether the Deferred object is in the resolved state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.isResolved\/","title":"deferred.isResolved","description":"\n\ndeferred.isResolved() Returns: Boolean\n\n\nDescription:  Determine whether a Deferred object has been resolved. \n\nversion added: 1.5deferred.isResolved()\n\nAs of jQuery 1.7 this API has been deprecated; please use deferred.state() instead.\nReturns true if the Deferred object is in the resolved state, meaning that either deferred.resolve() or deferred.resolveWith() has been called for the object and the doneCallbacks have been called (or are in the process of being called).\nNote that a Deferred object can be in one of three states: pending, resolved, or rejected; use deferred.isRejected() to determine whether the Deferred object is in the rejected state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.notify\/","title":"deferred.notify","description":"\n\ndeferred.notify( args ) Returns: Deferred\n\n\nDescription:  Call the progressCallbacks on a Deferred object with the given args. \n\n\nversion added: 1.7deferred.notify( args )\nargs\n             Optional arguments that are passed to the progressCallbacks.\n           \n\n\nNormally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().\nWhen deferred.notify is called, any progressCallbacks added by deferred.then or deferred.progress are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .notify(). Any calls to .notify() after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for Deferred object.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.notifyWith\/","title":"deferred.notifyWith","description":"\n\ndeferred.notifyWith( context [, args]  ) Returns: Deferred\n\n\nDescription:  Call the progressCallbacks on a Deferred object with the given context and args. \n\n\nversion added: 1.7deferred.notifyWith( context [, args] )\ncontext\n             Context passed to the progressCallbacks as the this object.\n           \nargs\n             Optional arguments that are passed to the progressCallbacks.\n           \n\n\nNormally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().\nWhen deferred.notifyWith is called, any progressCallbacks added by deferred.then or deferred.progress are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .notifyWith(). Any calls to .notifyWith() after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for Deferred object.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.pipe\/","title":"deferred.pipe","description":"\n\ndeferred.pipe(  [doneFilter]  [, failFilter]  ) Returns: Promise\n\n\nDescription:  Utility method to filter and\/or chain Deferreds.  \n\n\n\nversion added: 1.6deferred.pipe(  [doneFilter] [, failFilter] )\ndoneFilter\n        An optional function that is called when the Deferred is resolved.\n      \nfailFilter\n        An optional function that is called when the Deferred is rejected.\n      \n\n\n\nversion added: 1.7deferred.pipe(  [doneFilter] [, failFilter] [, progressFilter] )\ndoneFilter\n        An optional function that is called when the Deferred is resolved.\n      \nfailFilter\n        An optional function that is called when the Deferred is rejected.\n      \nprogressFilter\n        An optional function that is called when progress notifications are sent to the Deferred.\n      \n\n\nThe deferred.pipe() method returns a new promise that filters the status and values of a deferred through a function.  The doneFilter and failFilter functions filter the original deferred's resolved \/ rejected status and values. As of jQuery 1.7, the method also accepts a progressFilter function to filter any calls to the original deferred's notify or notifyWith methods. These filter functions can return a new value to be passed along to the piped promise's done() or fail() callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved \/ rejected status and values to the piped promise's callbacks. If the filter function used is null, or not specified, the piped promise will be resolved or rejected with the same values as the original.\nExamples:\n\n\nExample: Filter resolve value:\n\n\nvar defer = $.Deferred(),\n    filtered = defer.pipe(function( value ) {\n      return value * 2;\n    });\n\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( \"Value is ( 2*5 = ) 10: \" + value );\n});\n\n\n\nExample: Filter reject value:\n\n\nvar defer = $.Deferred(),\n    filtered = defer.pipe( null, function( value ) {\n      return value * 3;\n    });\n\ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( \"Value is ( 3*6 = ) 18: \" + value );\n});\n\n\n\nExample: Chain tasks:\n\n\nvar request = $.ajax( url, { dataType: \"json\" } ),\n    chained = request.pipe(function( data ) {\n      return $.ajax( url2, { data: { user: data.userId } } );\n    });\n\nchained.done(function( data ) {\n  \/\/ data retrieved from url2 as provided by the first request\n});\n\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.progress\/","title":"deferred.progress","description":"\n\ndeferred.progress( progressCallbacks ) Returns: Deferred\n\n\nDescription:  Add handlers to be called when the Deferred object generates progress notifications.\n\n\nversion added: 1.7deferred.progress( progressCallbacks )\nprogressCallbacks\n        A function, or array of functions, that is called when the Deferred generates progress notifications.\n      \n\nThe argument can be either a single function or an array of functions. When the Deferred generates progress notifications by calling notify or notifyWith, the progressCallbacks are called. Since deferred.progress() returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called. For more information, see the documentation for Deferred object.\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.promise\/","title":"deferred.promise","description":"\n\ndeferred.promise(  [target]  ) Returns: Promise\n\n\nDescription:  Return a Deferred's Promise object. \n\n\nversion added: 1.5deferred.promise(  [target] )\ntargetObject onto which the promise methods have to be attached\n\n\nThe deferred.promise() method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (then, done, fail, always,pipe, progress, and state), but not ones that change the state (resolve, reject, progress, resolveWith, rejectWith, and progressWith).\nIf target is provided, deferred.promise() will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.\nIf you are creating a Deferred, keep a reference to the Deferred so that it can be resolved or rejected at some point. Return only the Promise object via deferred.promise() so other code can register callbacks or inspect the current state.\nFor more information, see the documentation for Deferred object.\n\nExamples:\n\n\nExample: Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first \"wins\" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds \"working...\" to the document body.\n\n\nfunction asyncEvent(){\n    var dfd = new jQuery.Deferred();\n\n    \/\/ Resolve after a random interval\n    setTimeout(function(){\n        dfd.resolve(\"hurray\");\n    }, Math.floor(400+Math.random()*2000));\n\n    \/\/ Reject after a random interval\n    setTimeout(function(){\n        dfd.reject(\"sorry\");\n    }, Math.floor(400+Math.random()*2000));\n\n    \/\/ Show a \"working...\" message every half-second\n    setTimeout(function working(){\n        if ( dfd.state() === \"pending\" ) {\n            dfd.notify(\"working... \");\n            setTimeout(working, 500);\n        }\n    }, 1);\n\n    \/\/ Return the Promise so caller can't change the Deferred\n    return dfd.promise();\n}\n\n\/\/ Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n    function(status){\n        alert( status+', things are going well' );\n    },\n    function(status){\n        alert( status+', you fail this time' );\n    },\n    function(status){\n        $(\"body\").append(status);\n    }\n);\n\n\n\nExample: Use the target argument to promote an existing object to a Promise:\n\n\n\/\/ Existing object\nvar obj = {\n  hello: function( name ) {\n    alert( \"Hello \" + name );\n  }\n},\n\/\/ Create a Deferred\ndefer = $.Deferred();\n\n\/\/ Set object as a promise\ndefer.promise( obj );\n\n\/\/ Resolve the deferred\ndefer.resolve( \"John\" );\n\n\/\/ Use the object as a Promise\nobj.done(function( name ) {\n  obj.hello( name ); \/\/ will alert \"Hello John\"\n}).hello( \"Karl\" ); \/\/ will alert \"Hello Karl\"\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.reject\/","title":"deferred.reject","description":"\n\ndeferred.reject( args ) Returns: Deferred\n\n\nDescription:  Reject a Deferred object and call any failCallbacks with the given args. \n\n\nversion added: 1.5deferred.reject( args )\nargs\n             Optional arguments that are passed to the failCallbacks.\n           \n\n\nNormally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().\nWhen the Deferred is rejected, any failCallbacks added by deferred.then or deferred.fail are called. Callbacks are executed in the order they were added. Each callback is passed the args from the deferred.reject() call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the .reject() call. For more information, see the documentation for Deferred object.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.rejectWith\/","title":"deferred.rejectWith","description":"\n\ndeferred.rejectWith( context [, args]  ) Returns: Deferred\n\n\nDescription:  Reject a Deferred object and call any failCallbacks with the given context and args. \n\n\nversion added: 1.5deferred.rejectWith( context [, args] )\ncontext\n             Context passed to the failCallbacks as the this object.\n           \nargs\n             An optional array of arguments that are passed to the failCallbacks.\n           \n\n\nNormally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().\nWhen the Deferred is rejected, any failCallbacks added by deferred.then or deferred.fail are called. Callbacks are executed in the order they were added. Each callback is passed the args from the deferred.reject() call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the .reject() call. For more information, see the documentation for Deferred object.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.resolve\/","title":"deferred.resolve","description":"\n\ndeferred.resolve( args ) Returns: Deferred\n\n\nDescription:  Resolve a Deferred object and call any doneCallbacks with the given args. \n\n\nversion added: 1.5deferred.resolve( args )\nargs\n             Optional arguments that are passed to the doneCallbacks.\n           \n\nWhen the Deferred is resolved, any doneCallbacks added by deferred.then or deferred.done are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .resolve(). Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the .resolve() call. For more information, see the documentation for Deferred object.\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.state\/","title":"deferred.state","description":"\n\ndeferred.state() Returns: String\n\n\nDescription: Determine the current state of a Deferred object. \n\nversion added: 1.7deferred.state()\n\nThe deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:\n\n      \n\"pending\": The Deferred object is not yet in a completed state (neither \"rejected\" nor \"resolved\").\n      \n\"resolved\": The Deferred object is in the resolved state, meaning that either deferred.resolve() or deferred.resolveWith() has been called for the object and the doneCallbacks have been called (or are in the process of being called). \n      \n\"rejected\": The Deferred object is in the rejected state, meaning that either deferred.reject() or deferred.rejectWith() has been called for the object and the failCallbacks have been called (or are in the process of being called).\n    \nThis method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.then\/","title":"deferred.then","description":"\n\ndeferred.then( doneCallbacks, failCallbacks ) Returns: Deferred\n\n\nDescription:  Add handlers to be called when the Deferred object is resolved or rejected. \n\n\n\nversion added: 1.5deferred.then( doneCallbacks, failCallbacks )\ndoneCallbacks\n             A function, or array of functions, called when the Deferred is resolved.\n           \nfailCallbacks\n             A function, or array of functions, called when the Deferred is rejected.\n           \n\n\n\nversion added: 1.7deferred.then( doneCallbacks, failCallbacks [, progressCallbacks] )\ndoneCallbacks\n             A function, or array of functions, called when the Deferred is resolved.\n           \nfailCallbacks\n             A function, or array of functions, called when the Deferred is rejected.\n           \nprogressCallbacks\n             A function, or array of functions, called when the Deferred notifies progress.\n           \n\n\n\nAll three arguments (including progressCallbacks, as of jQuery 1.7) can be either a single function or an array of functions. The arguments can also be null if no callback of that type is desired. Alternatively, use .done(), .fail() or .progress() to set only one type of callback. \nWhen the Deferred is resolved, the doneCallbacks are called. If the Deferred is instead rejected, the failCallbacks are called. As of jQuery 1.7, the deferred.notify() or deferred.notifyWith() methods can be called to invoke the progressCallbacks as many times as desired before the Deferred is resolved or rejected.\nCallbacks are executed in the order they were added. Since deferred.then returns the deferred object, other methods of the deferred object can be chained to this one, including additional .then() methods. For more information, see the documentation for Deferred object.\n\nExample:\n\nSince the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.\n\n$.get(\"test.php\").then(\n    function(){ alert(\"$.get succeeded\"); },\n    function(){ alert(\"$.get failed!\"); }\n);\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/deferred.resolveWith\/","title":"deferred.resolveWith","description":"\n\ndeferred.resolveWith( context [, args]  ) Returns: Deferred\n\n\nDescription:  Resolve a Deferred object and call any doneCallbacks with the given context and args. \n\n\nversion added: 1.5deferred.resolveWith( context [, args] )\ncontext\n             Context passed to the doneCallbacks as the this object.\n           \nargs\n             An optional array of arguments that are passed to the doneCallbacks.\n           \n\n\nNormally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().\nWhen the Deferred is resolved, any doneCallbacks added by deferred.then or deferred.done are called. Callbacks are executed in the order they were added. Each callback is passed the args from the .resolve(). Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the .resolve() call. For more information, see the documentation for Deferred object.\n\n\n"},{"url":"http:\/\/api.jquery.com\/delay\/","title":"delay","description":"\n\n.delay( duration [, queueName]  ) Returns: jQuery\n\n\nDescription: Set a timer to delay execution of subsequent items in the queue.\n\n\nversion added: 1.4.delay( duration [, queueName] )\ndurationAn integer indicating the number of milliseconds to delay execution of the next item in the queue.\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\n\nAdded to jQuery in version 1.4, the .delay() method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will not delay the no-arguments forms of .show() or .hide()  which do not use the effects queue.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nUsing the standard effects queue, we can, for example, set an 800-millisecond delay between the .slideUp() and .fadeIn() of &lt;div id=\"foo\"&gt;:\n$('#foo').slideUp(300).delay(800).fadeIn(400);\nWhen this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.\nThe .delay() method is best for delaying between queued jQuery effects. Because it is limited\u2014it doesn't, for example, offer a way to cancel the delay\u2014.delay() is not a replacement for JavaScript's native setTimeout function, which may be more appropriate for certain use cases.\n\nExample:\n\nAnimate the hiding and showing of two divs, delaying the first before showing it.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { position: absolute; width: 60px; height: 60px; float: left; }\n.first { background-color: #3f3; left: 0;}\n.second { background-color: #33f; left: 80px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;&lt;button&gt;Run&lt;\/button&gt;&lt;\/p&gt;\n&lt;div class=\"first\"&gt;&lt;\/div&gt;\n&lt;div class=\"second\"&gt;&lt;\/div&gt;\n\t\n&lt;script&gt;\n    $(\"button\").click(function() {\n      $(\"div.first\").slideUp(300).delay(800).fadeIn(400);\n      $(\"div.second\").slideUp(300).fadeIn(400);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/dequeue\/","title":"dequeue","description":"\n\n.dequeue(  [queueName]  ) Returns: jQuery\n\n\nDescription: Execute the next function on the queue for the matched elements.\n\n\nversion added: 1.2.dequeue(  [queueName] )\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\nWhen .dequeue() is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause .dequeue() to be called, so that the sequence can continue.\nExample:\n\nUse dequeue to end a custom queue function which allows the queue to keep going.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:3px; width:50px; position:absolute;\n  height:50px; left:10px; top:30px; \n  background-color:yellow; }\n  div.red { background-color:red; }  \n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Start&lt;\/button&gt;  \n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n$(\"button\").click(function () {\n  $(\"div\").animate({left:'+=200px'}, 2000);\n  $(\"div\").animate({top:'0px'}, 600);\n  $(\"div\").queue(function () {\n    $(this).toggleClass(\"red\");\n    $(this).dequeue();\n  });\n  $(\"div\").animate({left:'10px', top:'30px'}, 700);\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.dequeue\/","title":"jQuery.dequeue","description":"\n\njQuery.dequeue( element [, queueName]  ) Returns: jQuery\n\n\nDescription: Execute the next function on the queue for the matched element.\n\n\nversion added: 1.3jQuery.dequeue( element [, queueName] )\nelementA DOM element from which to remove and execute a queued function.\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\n\nNote: This is a low-level method, you should probably use .dequeue() instead.\nWhen jQuery.dequeue() is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause jQuery.dequeue() to be called, so that the sequence can continue.\n\nExample:\n\nUse dequeue to end a custom queue function which allows the queue to keep going.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { margin:3px; width:50px; position:absolute;\n        height:50px; left:10px; top:30px; \n        background-color:yellow; }\n  div.red { background-color:red; }  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Start&lt;\/button&gt;  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"button\").click(function () {\n      $(\"div\").animate({left:'+=200px'}, 2000);\n      $(\"div\").animate({top:'0px'}, 600);\n      $(\"div\").queue(function () {\n        $(this).toggleClass(\"red\");\n         $.dequeue( this );\n              });\n      $(\"div\").animate({left:'10px', top:'30px'}, 700);\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/delegate\/","title":"delegate","description":"\n\n.delegate( selector, eventType, handler ) Returns: jQuery\n\n\nDescription: Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.\n\n\n\nversion added: 1.4.2.delegate( selector, eventType, handler )\nselectorA selector to filter the elements that trigger the event.\neventTypeA string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.4.2.delegate( selector, eventType, eventData, handler )\nselectorA selector to filter the elements that trigger the event.\neventTypeA string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.\neventDataA map of data that will be passed to the event handler.\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.4.3.delegate( selector, events )\nselectorA selector to filter the elements that trigger the event.\neventsA map of one or more event types and functions to execute for them.\n\n\n\nAs of jQuery 1.7, .delegate() has been superseded by the .on() method. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the .on() method. In general, these are the equivalent templates for the two methods:\n\n$(elements).delegate(selector, events, data, handler);  \/\/ jQuery 1.4.3+\n$(elements).on(events, selector, data, handler);        \/\/ jQuery 1.7+\n \nFor example, the following .delegate() code:\n$(\"table\").delegate(\"td\", \"click\", function() {\n  $(this).toggleClass(\"chosen\");\n});\nis equivalent to the following code written using .on():\n$(\"table\").on(\"click\", \"td\", function() {\n  $(this).toggleClass(\"chosen\");\n});\nTo remove events attached with delegate(), see  the .undelegate() method.\nPassing and handling event data works the same way as it does for .on().\n\nAdditional Notes:Since the .live() method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by .delegate() will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling event.stopPropagation() or returning false.Examples:\n\n\nExample: Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; font-weight:bold; cursor:pointer; \n      padding:5px; }\n  p.over { background: #ccc; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Click me!&lt;\/p&gt;\n\n  &lt;span&gt;&lt;\/span&gt;\n&lt;script&gt;\n    $(\"body\").delegate(\"p\", \"click\", function(){\n      $(this).after(\"&lt;p&gt;Another paragraph!&lt;\/p&gt;\");\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To display each paragraph's text in an alert box whenever it is clicked:\n\n$(\"body\").delegate(\"p\", \"click\", function(){\n  alert( $(this).text() );\n});\n\n\nExample: To cancel a default action and prevent it from bubbling up, return false:\n\n$(\"body\").delegate(\"a\", \"click\", function() { return false; })\n\n\nExample: To cancel only the default action by using the preventDefault method.\n\n$(\"body\").delegate(\"a\", \"click\", function(event){\n  event.preventDefault();\n});\n\n\nExample: Can bind custom events too.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:red; }\n  span { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Has an attached custom event.&lt;\/p&gt;\n  &lt;button&gt;Trigger custom event&lt;\/button&gt;\n  &lt;span style=\"display:none;\"&gt;&lt;\/span&gt;\n&lt;script&gt;\n\n    $(\"body\").delegate(\"p\", \"myCustomEvent\", function(e, myName, myValue){\n      $(this).text(\"Hi there!\");\n      $(\"span\").stop().css(\"opacity\", 1)\n               .text(\"myName = \" + myName)\n               .fadeIn(30).fadeOut(1000);\n    });\n    $(\"button\").click(function () {\n      $(\"p\").trigger(\"myCustomEvent\");\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/detach\/","title":"detach","description":"\n\n.detach(  [selector]  ) Returns: jQuery\n\n\nDescription: Remove the set of matched elements from the DOM.\n\n\nversion added: 1.4.detach(  [selector] )\nselectorA selector expression that filters the set of matched elements to be removed.\n\nThe .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.\nExample:\n\nDetach all paragraphs from the DOM\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; margin:6px 0; } p.off { background: black; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt; \n  how are \n  &lt;p&gt;you?&lt;\/p&gt;\n  &lt;button&gt;Attach\/detach paragraphs&lt;\/button&gt;\n&lt;script&gt;\n    $(\"p\").click(function(){\n      $(this).toggleClass(\"off\");\n    });\n    var p;\n    $(\"button\").click(function(){\n      if ( p ) {\n        p.appendTo(\"body\");\n        p = null;\n      } else {\n        p = $(\"p\").detach();\n      }\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/disabled-selector\/","title":":disabled Selector","description":"\n\ndisabled  selector\n\n\nversion added: 1.0jQuery(':disabled')\nDescription: Selects all elements that are disabled.\nAs with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled') is equivalent to $('*:disabled'), so $('input:disabled') should be used instead. \nExample:\n\nFinds all input elements that are disabled.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n\n    &lt;input name=\"email\" disabled=\"disabled\" \/&gt;\n    &lt;input name=\"id\" \/&gt;\n  &lt;\/form&gt;\n&lt;script&gt;$(\"input:disabled\").val(\"this is it\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/descendant-selector\/","title":"Descendant Selector (&#8220;ancestor descendant&#8221;)","description":"\n\ndescendant  selector\n\n\nversion added: 1.0jQuery('ancestor descendant')\n\nancestor\nAny valid selector.\ndescendant\nA selector to filter the descendant elements.\n\nDescription: Selects all elements that are descendants of a given ancestor.\nA descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.\nExample:\n\nFinds all input descendants of forms.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  body { font-size:14px; }\n  form { border:2px green solid; padding:2px; margin:0; \n         background:#efe; }\n  div { color:red; }\n  fieldset { margin:1px; padding:3px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;div&gt;Form is surrounded by the green outline&lt;\/div&gt;\n    &lt;label&gt;Child:&lt;\/label&gt;\n    &lt;input name=\"name\" \/&gt;\n\n    &lt;fieldset&gt;\n      &lt;label&gt;Grandchild:&lt;\/label&gt;\n      &lt;input name=\"newsletter\" \/&gt;\n    &lt;\/fieldset&gt;\n\n  &lt;\/form&gt;\n  Sibling to form: &lt;input name=\"none\" \/&gt;\n&lt;script&gt;$(\"form input\").css(\"border\", \"2px dotted blue\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/die\/","title":"die","description":"\nContents:\n\n\ndie() .die()\n              \n\n\ndie( eventType [\u00a0, handler\u00a0] \u00a0) \n.die( eventType [, handler]  )\n              \n.die( eventTypes )\n              \n\n\n\n\n\n.die() Returns: jQuery\n\n\nDescription: Remove all event handlers previously attached using .live() from the elements.\n\nversion added: 1.4.1.die()\n\nAny handler that has been attached with .live() can be removed with .die(). This method is analogous to calling .unbind() with no arguments, which is used to remove all handlers attached with .bind().\nSee the discussions of .live() and .unbind() for further details.\nAs of jQuery 1.7, use of .die() (and its complementary method, .live()) is not recommended. Instead, use .off() to remove event handlers bound with .on()\nNote: In order for .die() to function correctly, the selector used with it must match exactly the selector initially used with .live().\n\n\n\n\n.die( eventType [, handler]  ) Returns: jQuery\n\n\nDescription: Remove an event handler previously attached using .live() from the elements.\n\n\n\nversion added: 1.3.die( eventType [, handler] )\neventTypeA string containing a JavaScript event type, such as click or keydown.\nhandlerThe function that is no longer to be executed.\n\n\n\nversion added: 1.4.3.die( eventTypes )\neventTypesA map of one or more event types, such as click or keydown and their corresponding functions that are no longer to be executed.\n\n\n\nAny handler that has been attached with .live() can be removed with .die(). This method is analogous to .unbind(), which is used to remove handlers attached with .bind().\nSee the discussions of .live() and .unbind() for further details.\nNote: In order for .die() to function correctly, the selector used with it must match exactly the selector initially used with .live().\n\nExamples:\n\n\nExample: Can bind and unbind events to the colored button.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nbutton { margin:5px; }\nbutton#theone { color:red; background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"theone\"&gt;Does nothing...&lt;\/button&gt;\n&lt;button id=\"bind\"&gt;Bind Click&lt;\/button&gt;\n&lt;button id=\"unbind\"&gt;Unbind Click&lt;\/button&gt;\n\n&lt;div style=\"display:none;\"&gt;Click!&lt;\/div&gt;\n&lt;script&gt;\n\nfunction aClick() {\n  $(\"div\").show().fadeOut(\"slow\");\n}\n$(\"#bind\").click(function () {\n  $(\"#theone\").live(\"click\", aClick)\n              .text(\"Can Click!\");\n});\n$(\"#unbind\").click(function () {\n  $(\"#theone\").die(\"click\", aClick)\n              .text(\"Does nothing...\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To unbind all live events from all paragraphs, write:\n\n$(\"p\").die()\n\n\nExample: To unbind all live click events from all paragraphs, write:\n\n$(\"p\").die( \"click\" )\n\n\nExample: To unbind just one previously bound handler, pass the function in as the second argument:\n\nvar foo = function () {\n\/\/ code to handle some kind of event\n};\n\n$(\"p\").live(\"click\", foo); \/\/ ... now foo will be called when paragraphs are clicked ...\n\n$(\"p\").die(\"click\", foo); \/\/ ... foo will no longer be called.\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/each\/","title":"each","description":"\n\n.each( function(index, Element) ) Returns: jQuery\n\n\nDescription: Iterate over a jQuery object, executing a function for each matched element. \n\n\nversion added: 1.0.each( function(index, Element) )\nfunction(index, Element)A function to execute for each matched element.\n\n\nThe .each() method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword this refers to the element.\nSuppose we had a simple unordered list on the page:\n&lt;ul&gt;\n    &lt;li&gt;foo&lt;\/li&gt;\n    &lt;li&gt;bar&lt;\/li&gt;\n&lt;\/ul&gt;\n  \nWe can select the list items and iterate across them:\n$('li').each(function(index) {\n    alert(index + ': ' + $(this).text());\n});\n  \nA message is thus alerted for each item in the list:\n0: foo\n  1: bar\nWe can stop the loop from within the callback function by returning false.\n\nExamples:\n\n\nExample: Iterates over three divs and sets their color property.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:red; text-align:center; cursor:pointer; \n        font-weight:bolder; width:300px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;Click here&lt;\/div&gt;\n  &lt;div&gt;to iterate through&lt;\/div&gt;\n  &lt;div&gt;these divs.&lt;\/div&gt;\n&lt;script&gt;\n    $(document.body).click(function () {\n      $(\"div\").each(function (i) {\n        if (this.style.color != \"blue\") {\n          this.style.color = \"blue\";\n        } else {\n          this.style.color = \"\";\n        }\n      });\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: If you want to have the jQuery object instead of the regular DOM element, use the $(this) function, for example:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  ul { font-size:18px; margin:0; }\n  span { color:blue; text-decoration:underline; cursor:pointer; }\n  .example { font-style:italic; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  To do list: &lt;span&gt;(click here to change)&lt;\/span&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Eat&lt;\/li&gt;\n    &lt;li&gt;Sleep&lt;\/li&gt;\n\n    &lt;li&gt;Be merry&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;script&gt;\n    $(\"span\").click(function () {\n      $(\"li\").each(function(){\n        $(this).toggleClass(\"example\");\n      });\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: You can use 'return' to break out of each() loops early.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:40px; height:40px; margin:5px; float:left;\n        border:2px blue solid; text-align:center; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Change colors&lt;\/button&gt; \n  &lt;span&gt;&lt;\/span&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div id=\"stop\"&gt;Stop here&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      $(\"div\").each(function (index, domEle) {\n        \/\/ domEle == this\n        $(domEle).css(\"backgroundColor\", \"yellow\"); \n        if ($(this).is(\"#stop\")) {\n          $(\"span\").text(\"Stopped at div index #\" + index);\n          return false;\n        }\n      });\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/element-selector\/","title":"Element Selector (&#8220;element&#8221;)","description":"\n\nelement  selector\n\n\nversion added: 1.0jQuery('element')\n\nelement\nAn element to search for. Refers to the tagName of DOM nodes.\n\nDescription: Selects all elements with the given tag name.\nJavaScript's getElementsByTagName() function is called to return the appropriate elements when this expression is used.\nExample:\n\nFinds every DIV element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div,span {\n    width: 60px;\n    height: 60px;\n    float:left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;DIV1&lt;\/div&gt;\n\n  &lt;div&gt;DIV2&lt;\/div&gt;\n  &lt;span&gt;SPAN&lt;\/span&gt;\n&lt;script&gt;$(\"div\").css(\"border\",\"9px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/empty\/","title":"empty","description":"\n\n.empty() Returns: jQuery\n\n\nDescription: Remove all child nodes of the set of matched elements from the DOM.\n\nversion added: 1.0.empty()\n\nThis method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can target any element for removal:\n$('.hello').empty();\nThis will result in a DOM structure with the Hello text deleted:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;&lt;\/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nIf we had any number of nested elements inside &lt;div class=\"hello\"&gt;, they would be removed, too. \nTo avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.\n\nExample:\n\nRemoves all child nodes (including text nodes) from all paragraphs\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n  Hello, &lt;span&gt;Person&lt;\/span&gt; &lt;a href=\"javascript:;\"&gt;and person&lt;\/a&gt;\n&lt;\/p&gt;\n\n&lt;button&gt;Call empty() on above paragraph&lt;\/button&gt;\n&lt;script&gt;\n  $(\"button\").click(function () {\n    $(\"p\").empty();\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/empty-selector\/","title":":empty Selector","description":"\n\nempty  selector\n\n\nversion added: 1.0jQuery(':empty')\nDescription: Select all elements that have no children (including text nodes).\n\nThis is the inverse of :parent. \nOne important thing to note with :empty (and :parent) is that child elements include text nodes.\nThe W3C recommends that the &lt;p&gt; element have at least one child node, even if that child is merely text (see http:\/\/www.w3.org\/TR\/html401\/struct\/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &lt;input&gt;, &lt;img&gt;, &lt;br&gt;, and &lt;hr&gt;, for example.\n\nExample:\n\nFinds all elements that are empty - they don't have child elements or text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  td { text-align:center; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n    &lt;tr&gt;&lt;td&gt;TD #0&lt;\/td&gt;&lt;td&gt;&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;TD #2&lt;\/td&gt;&lt;td&gt;&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;&lt;\/td&gt;&lt;td&gt;TD#5&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;\n&lt;script&gt;$(\"td:empty\").text(\"Was empty!\").css('background', 'rgb(255,220,200)');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/end\/","title":"end","description":"\n\n.end() Returns: jQuery\n\n\nDescription: End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.\n\nversion added: 1.0.end()\n\nMost of jQuery's DOM traversal methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use end() to pop the sets back off of the stack.\nSuppose we have a couple short lists on a page:\n\n&lt;ul class=\"first\"&gt;\n   &lt;li class=\"foo\"&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"bar\"&gt;list item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;ul class=\"second\"&gt;\n   &lt;li class=\"foo\"&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"bar\"&gt;list item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n\nThe end() method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With end(), though, we can string all the method calls together:\n\n$('ul.first').find('.foo').css('background-color', 'red')\n  .end().find('.bar').css('background-color', 'green');\n\nThis chain searches for items with the class foo within the first list only and turns their backgrounds red. Then end() returns the object to its state before the call to find(), so the second find() looks for '.bar' inside &lt;ul class=\"first\"&gt;, not just inside that list's &lt;li class=\"foo\"&gt;, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.\nA long jQuery chain can be visualized as a structured code block, with filtering methods providing the openings of nested blocks and end() methods closing them:\n\n$('ul.first').find('.foo')\n  .css('background-color', 'red')\n.end().find('.bar')\n  .css('background-color', 'green')\n.end();\n\nThe last end() is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the end() provides visual symmetry and a sense of completion \u2014making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.\n\nExamples:\n\n\nExample: Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p, div { margin:1px; padding:1px; font-weight:bold; \n           font-size:16px; }\n  div { color:blue; }\n  b { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n    Hi there &lt;span&gt;how&lt;\/span&gt; are you &lt;span&gt;doing&lt;\/span&gt;?\n  &lt;\/p&gt;\n\n  &lt;p&gt;\n    This &lt;span&gt;span&lt;\/span&gt; is one of \n    several &lt;span&gt;spans&lt;\/span&gt; in this\n    &lt;span&gt;sentence&lt;\/span&gt;.\n  &lt;\/p&gt;\n\n  &lt;div&gt;\n    Tags in jQuery object initially: &lt;b&gt;&lt;\/b&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    Tags in jQuery object after find: &lt;b&gt;&lt;\/b&gt;\n\n  &lt;\/div&gt;\n  &lt;div&gt;\n    Tags in jQuery object after end: &lt;b&gt;&lt;\/b&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    jQuery.fn.showTags = function (n) {\n      var tags = this.map(function () { \n                              return this.tagName; \n                            })\n                        .get().join(\", \");\n      $(\"b:eq(\" + n + \")\").text(tags);\n      return this;\n    };\n\n    $(\"p\").showTags(0)\n          .find(\"span\")\n          .showTags(1)\n          .css(\"background\", \"yellow\")\n          .end()\n          .showTags(2)\n          .css(\"font-style\", \"italic\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { margin:10px; padding:10px; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;span&gt;Hello&lt;\/span&gt;, how are you?&lt;\/p&gt;\n&lt;script&gt;$(\"p\").find(\"span\").end().css(\"border\", \"2px red solid\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/eq\/","title":"eq","description":"\n\n.eq( index ) Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to the one at the specified index.\n\n\n\nversion added: 1.1.2.eq( index )\nindexAn integer indicating the 0-based position of the element. \n\n\n\nversion added: 1.4.eq( -index )\n-indexAn integer indicating the position of the element, counting backwards  from the last element in the set. \n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .eq() method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set. \nConsider a page with a simple list on it:\n\n  &lt;ul&gt;\n    &lt;li&gt;list item 1&lt;\/li&gt;\n    &lt;li&gt;list item 2&lt;\/li&gt;\n    &lt;li&gt;list item 3&lt;\/li&gt;\n    &lt;li&gt;list item 4&lt;\/li&gt;\n    &lt;li&gt;list item 5&lt;\/li&gt;\n  &lt;\/ul&gt;\n\nWe can apply this method to the set of list items:\n\n  $('li').eq(2).css('background-color', 'red');\n\nThe result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.\nProviding a negative number indicates a position starting from the end of the set, rather than the beginning. For example:\n\n  $('li').eq(-2).css('background-color', 'red');\n\nThis time list item 4 is turned red, since it is two from the end of the set.\nIf an element cannot be found at the specified zero-based index, the method constructs a new jQuery object with an empty set and a length property of 0. \n\n  $('li').eq(5).css('background-color', 'red');\n\nHere, none of the list items is turned red, since .eq(5) indicates the sixth of five list items.\n\nExample:\n\nTurn the div with index 2 blue by adding an appropriate class.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:60px; height:60px; margin:10px; float:left;\n        border:2px solid blue; }\n  .blue { background:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"body\").find(\"div\").eq(2).addClass(\"blue\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/eq-selector\/","title":":eq() Selector","description":"\n\neq  selector\n\n\nversion added: 1.0jQuery(':eq(index)')\n\nindex\nZero-based index of the element to match.\n\nDescription: Select the element at index n within the matched set.\n\nThe index-related selectors (:eq(), :lt(), :gt(), :even, :odd) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.\nNote that since JavaScript arrays use 0-based indexing, these selectors reflect that fact. This is why $('.myclass:eq(1)') selects the second element in the document with the class myclass, rather than the first. In contrast, :nth-child(n) uses 1-based indexing to conform to the CSS specification.\nUnlike the .eq(index) method, the :eq(index) selector does not accept a negative value for index. For example, while $('li').eq(-1) selects the last li element, $('li:eq(-1)') selects nothing.\n\nAdditional Notes:Because :eq() is a jQuery extension and not part of the CSS specification, queries using :eq() cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use $(\"your-pure-css-selector\").eq(index) instead.Examples:\n\n\nExample: Finds the third td.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;\/td&gt;&lt;td&gt;TD #1&lt;\/td&gt;&lt;td&gt;TD #2&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #3&lt;\/td&gt;&lt;td&gt;TD #4&lt;\/td&gt;&lt;td&gt;TD #5&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #6&lt;\/td&gt;&lt;td&gt;TD #7&lt;\/td&gt;&lt;td&gt;TD #8&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/table&gt;\n&lt;script&gt;$(\"td:eq(2)\").css(\"color\", \"red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Apply three different styles to list items to demonstrate that :eq() is designed to select a single element while :nth-child() or :eq() within a looping construct such as .each() can select multiple elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul class=\"nav\"&gt;\n   &lt;li&gt;List 1, item 1&lt;\/li&gt;\n   &lt;li&gt;List 1, item 2&lt;\/li&gt;\n   &lt;li&gt;List 1, item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;List 2, item 1&lt;\/li&gt;\n  &lt;li&gt;List 2, item 2&lt;\/li&gt;\n  &lt;li&gt;List 2, item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n\n&lt;script&gt;\n\/\/ applies yellow background color to a single &lt;li&gt;\n$(\"ul.nav li:eq(1)\").css( \"backgroundColor\", \"#ff0\" );\n\n\/\/ applies italics to text of the second &lt;li&gt; within each &lt;ul class=\"nav\"&gt;\n$(\"ul.nav\").each(function(index) {\n  $(this).find(\"li:eq(1)\").css( \"fontStyle\", \"italic\" );\n});\n\n\/\/ applies red text color to descendants of &lt;ul class=\"nav\"&gt;\n\/\/ for each &lt;li&gt; that is the second child of its parent\n$(\"ul.nav li:nth-child(2)\").css( \"color\", \"red\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.each\/","title":"jQuery.each","description":"\n\njQuery.each( collection, callback(indexInArray, valueOfElement) ) Returns: Object\n\n\nDescription: A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.\n\n\nversion added: 1.0jQuery.each( collection, callback(indexInArray, valueOfElement) )\ncollectionThe object or array to iterate over.\ncallback(indexInArray, valueOfElement)The function that will be executed on every object.\n\n\nThe $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is a map (JavaScript object) or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.\n$.each([52, 97], function(index, value) { \n  alert(index + ': ' + value); \n});\n\nThis produces two messages:\n\n  0: 52\n  1: 97\n\nIf a map is used as the collection, the callback is passed a key-value pair each time:\nvar map = { \n  'flammable': 'inflammable', \n  'duh': 'no duh' \n}; \n$.each(map, function(key, value) { \n  alert(key + ': ' + value); \n});\nOnce again, this produces two messages:\n\n      flammable: inflammable\n      duh: no duh\n    \nWe can break the $.each() loop at a particular iteration by making the callback function return false. Returning non-false is the same as a continue statement in a for loop; it will skip immediately to the next iteration.\n\nExamples:\n\n\nExample: Iterates through the array displaying each number as both a word and numeral\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  div#five { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div id=\"one\"&gt;&lt;\/div&gt;\n  &lt;div id=\"two\"&gt;&lt;\/div&gt;\n  &lt;div id=\"three\"&gt;&lt;\/div&gt;\n  &lt;div id=\"four\"&gt;&lt;\/div&gt;\n  &lt;div id=\"five\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n    var arr = [ \"one\", \"two\", \"three\", \"four\", \"five\" ];\n    var obj = { one:1, two:2, three:3, four:4, five:5 };\n\n    jQuery.each(arr, function() {\n      $(\"#\" + this).text(\"Mine is \" + this + \".\");\n       return (this != \"three\"); \/\/ will stop running after \"three\"\n   });\n\n    jQuery.each(obj, function(i, val) {\n      $(\"#\" + i).append(document.createTextNode(\" - \" + val));\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Iterates over items in an array, accessing both the current item and its index.\n\n$.each( ['a','b','c'], function(i, l){\n   alert( \"Index #\" + i + \": \" + l );\n });\n\n\nExample: Iterates over the properties in an object, accessing both the current item and its key.\n\n$.each( { name: \"John\", lang: \"JS\" }, function(k, v){\n   alert( \"Key: \" + k + \", Value: \" + v );\n });\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/error\/","title":"error","description":"\n\n.error( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"error\" JavaScript event.\n\n\n\nversion added: 1.0.error( handler(eventObject) )\nhandler(eventObject)A function to execute when the event is triggered.\n\n\n\nversion added: 1.4.3.error(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nThis method is a shortcut for .bind('error', handler).\nThe error event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.\nFor example, consider a page with a simple image element:\n&lt;img alt=\"Book\" id=\"book\" \/&gt;\nThe event handler can be bound to the image:\n$('#book')\n  .error(function() {\n    alert('Handler for .error() called.')\n  })\n  .attr(\"src\", \"missing.png\");\n\nIf the image cannot be loaded (for example, because it is not present at the supplied URL), the alert  is displayed:\nHandler for .error() called.\n\nThe event handler must be attached before the browser fires the error event, which is why the example sets the src attribute after attaching the handler. Also, the error event may not be correctly fired when the page is served locally; error relies on HTTP status codes and will generally not be triggered if the URL uses the file: protocol.\n\nNote: A jQuery error event handler should not be attached to the window object. The browser fires the window's error event when a script error occurs. However, the window error event receives different arguments and has different return value requirements than conventional event handlers. Use window.onerror instead.\n\n\nExample:\n\nTo hide the \"broken image\" icons for IE users, you can try:\n$(\"img\")\n  .error(function(){\n    $(this).hide();\n  })\n  .attr(\"src\", \"missing.png\");\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.error\/","title":"jQuery.error","description":"\n\njQuery.error( message ) \n\n\nDescription: Takes a string and throws an exception containing it.\n\n\nversion added: 1.4.1jQuery.error( message )\nmessageThe message to send out.\n\nThis method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.\nExample:\n\nOverride jQuery.error for display in Firebug.\njQuery.error = console.error;\n\n\n"},{"url":"http:\/\/api.jquery.com\/even-selector\/","title":":even Selector","description":"\n\neven  selector\n\n\nversion added: 1.0jQuery(':even')\nDescription: Selects even elements, zero-indexed.  See also odd.\nIn particular, note that the 0-based indexing means that, counter-intuitively, :even selects the first element, third element, and so on within the matched set.\nAdditional Notes:Because :even is a jQuery extension and not part of the CSS specification, queries using :even cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :even to select elements, first select the elements using a pure CSS selector, then use .filter(\":even\").Example:\n\nFinds even table rows, matching the first, third and so on (index 0, 2, 4 etc.).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  table {\n    background:#eeeeee;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #0&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #1&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Row with Index #2&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #3&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;\n&lt;script&gt;$(\"tr:even\").css(\"background-color\", \"#bbbbff\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.data\/","title":"event.data","description":"\n\nevent.data Returns: Anything\n\n\nDescription:  The optional data passed to jQuery.fn.bind when the current executing handler was bound.  \n\nversion added: 1.1event.data\nExample:\n\nThe description of the example.\n$(\"a\").each(function(i) {\n  $(this).bind('click', {index:i}, function(e){\n     alert('my index is ' + e.data.index);\n  });\n});   \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.currentTarget\/","title":"event.currentTarget","description":"\n\nevent.currentTarget Returns: Element\n\n\nDescription:  The current DOM element within the event bubbling phase.  \n\nversion added: 1.3event.currentTarget\n\nThis property will typically be equal to the this of the function.\nIf you are using jQuery.proxy or another form of scope manipulation, this will be equal to whatever context you have provided, not event.currentTarget\n\nExample:\n\nAlert that currentTarget matches the `this` keyword.\n$(\"p\").click(function(event) {\n  alert( event.currentTarget === this ); \/\/ true\n});  \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.delegateTarget\/","title":"event.delegateTarget","description":"\n\nevent.delegateTarget Returns: Element\n\n\nDescription: The element where the currently-called jQuery event handler was attached.\n\nversion added: 1.7event.delegateTarget\n\nThis property is most often useful in delegated events attached by .delegate() or .on(), where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.\nFor non-delegated event handlers attached directly to an element, event.delegateTarget will always be equal to event.currentTarget.\n\nExample:\n\nWhen a button in any box class is clicked, change the box's background color to red.\n$(\".box\").on(\"click\", \"button\", function(event) {\n  $(event.delegateTarget).css(\"background-color\", \"red\");\n});  \n\n\n"},{"url":"http:\/\/api.jquery.com\/enabled-selector\/","title":":enabled Selector","description":"\n\nenabled  selector\n\n\nversion added: 1.0jQuery(':enabled')\nDescription: Selects all elements that are enabled.\nAs with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':enabled') is equivalent to $('*:enabled'), so $('input:enabled') should be used instead. \nExample:\n\nFinds all input elements that are enabled.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n\n    &lt;input name=\"email\" disabled=\"disabled\" \/&gt;\n    &lt;input name=\"id\" \/&gt;\n  &lt;\/form&gt;\n&lt;script&gt;$(\"input:enabled\").val(\"this is it\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.isDefaultPrevented\/","title":"event.isDefaultPrevented","description":"\n\nevent.isDefaultPrevented() Returns: Boolean\n\n\nDescription: Returns whether event.preventDefault() was ever called on this event object. \n\nversion added: 1.3event.isDefaultPrevented()\nExample:\n\nChecks whether event.preventDefault() was called.\n$(\"a\").click(function(event){\n  alert( event.isDefaultPrevented() ); \/\/ false\n  event.preventDefault();\n  alert( event.isDefaultPrevented() ); \/\/ true\n});  \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.isImmediatePropagationStopped\/","title":"event.isImmediatePropagationStopped","description":"\n\nevent.isImmediatePropagationStopped() Returns: Boolean\n\n\nDescription:   Returns whether event.stopImmediatePropagation() was ever called on this event object. \n\nversion added: 1.3event.isImmediatePropagationStopped()\nThis property was introduced in DOM level 3.\nExample:\n\nChecks whether event.stopImmediatePropagation() was called.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;button&gt;click me&lt;\/button&gt;\n  &lt;div id=\"stop-log\"&gt;&lt;\/div&gt;\n  \n&lt;script&gt;\n\nfunction immediatePropStopped(e) {\n  var msg = \"\";\n  if ( e.isImmediatePropagationStopped() ) {\n    msg =  \"called\"\n  } else {\n    msg = \"not called\";\n  }\n  $(\"#stop-log\").append( \"&lt;div&gt;\" + msg + \"&lt;\/div&gt;\" );\n}\n\n$(\"button\").click(function(event) {\n  immediatePropStopped(event);\n  event.stopImmediatePropagation();\n  immediatePropStopped(event);\n});  \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.isPropagationStopped\/","title":"event.isPropagationStopped","description":"\n\nevent.isPropagationStopped() Returns: Boolean\n\n\nDescription:   Returns whether event.stopPropagation() was ever called on this event object. \n\nversion added: 1.3event.isPropagationStopped()\nThis event method is described in the W3C DOM Level 3 specification.\nExample:\n\nChecks whether event.stopPropagation() was called\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;button&gt;click me&lt;\/button&gt;\n  &lt;div id=\"stop-log\"&gt;&lt;\/div&gt;\n  \n&lt;script&gt;\n\nfunction propStopped(e) {\n  var msg = \"\";\n  if ( e.isPropagationStopped() ) {\n    msg =  \"called\"\n  } else {\n    msg = \"not called\";\n  }\n  $(\"#stop-log\").append( \"&lt;div&gt;\" + msg + \"&lt;\/div&gt;\" );\n}\n\n$(\"button\").click(function(event) {\n  propStopped(event);\n  event.stopPropagation();\n  propStopped(event);\n});  \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.namespace\/","title":"event.namespace","description":"\n\nevent.namespace Returns: String\n\n\nDescription: The namespace specified when the event was triggered.\n\nversion added: 1.4.3event.namespace\nThis will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.\nExample:\n\nDetermine the event namespace used.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;display event.namespace&lt;\/button&gt;\n&lt;p&gt;&lt;\/p&gt;\n\n&lt;script&gt;\n$(\"p\").bind(\"test.something\", function(event) {\n  alert( event.namespace );\n});\n$(\"button\").click(function(event) {\n  $(\"p\").trigger(\"test.something\");\n});  \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.pageX\/","title":"event.pageX","description":"\n\nevent.pageX Returns: Number\n\n\nDescription: The mouse position relative to the left edge of the document. \n\nversion added: 1.0.4event.pageX\nExample:\n\nShow the mouse position relative to the left and top edges of the document (within the iframe).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;body {background-color: #eef; }\ndiv { padding: 20px; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"log\"&gt;&lt;\/div&gt;\n&lt;script&gt;$(document).bind('mousemove',function(e){ \n            $(\"#log\").text(\"e.pageX: \" + e.pageX + \", e.pageY: \" + e.pageY); \n}); &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.pageY\/","title":"event.pageY","description":"\n\nevent.pageY Returns: Number\n\n\nDescription: The mouse position relative to the top edge of the document. \n\nversion added: 1.0.4event.pageY\nExample:\n\nShow the mouse position relative to the left and top edges of the document (within this iframe).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;body {background-color: #eef; }\ndiv { padding: 20px; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"log\"&gt;&lt;\/div&gt;\n&lt;script&gt;$(document).bind('mousemove',function(e){ \n            $(\"#log\").text(\"e.pageX: \" + e.pageX + \", e.pageY: \" + e.pageY); \n}); &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.relatedTarget\/","title":"event.relatedTarget","description":"\n\nevent.relatedTarget Returns: Element\n\n\nDescription:   The other DOM element involved in the event, if any. \n\nversion added: 1.1.4event.relatedTarget\nFor mouseout, indicates the element being entered; for mouseover, indicates the element being exited. \nExample:\n\nOn mouseout of anchors, alert the element type being entered.\n$(\"a\").mouseout(function(event) {\n  alert(event.relatedTarget.nodeName); \/\/ \"DIV\"\n});  \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.preventDefault\/","title":"event.preventDefault","description":"\n\nevent.preventDefault() Returns: undefined\n\n\nDescription:  If this method is called, the default action of the event will not be triggered. \n\nversion added: 1.0event.preventDefault()\nFor example, clicked anchors will not take the browser to a new URL. We can use event.isDefaultPrevented() to determine if this method has been called by an event handler that was triggered by this event.\nExample:\n\nCancel the default action (navigation) of the click.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;a href=\"http:\/\/jquery.com\"&gt;default click action is prevented&lt;\/a&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"a\").click(function(event) {\n  event.preventDefault();\n  $('&lt;div\/&gt;')\n    .append('default ' + event.type + ' prevented')\n    .appendTo('#log');\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.stopImmediatePropagation\/","title":"event.stopImmediatePropagation","description":"\n\nevent.stopImmediatePropagation() \n\n\nDescription:  Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.\n  \n\nversion added: 1.3event.stopImmediatePropagation()\n\nIn addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling event.stopPropagation(). To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use event.stopPropagation() instead.\nUse event.isImmediatePropagationStopped() to know whether this method was ever called (on that event object).\n\nAdditional Notes:Since the .live() method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by .delegate() will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling event.stopPropagation() or returning false.Example:\n\nPrevents other event handlers from being called.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { height: 30px; width: 150px; background-color: #ccf; }\ndiv {height: 30px; width: 150px; background-color: #cfc; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;paragraph&lt;\/p&gt;\n&lt;div&gt;division&lt;\/div&gt;\n&lt;script&gt;\n$(\"p\").click(function(event){\n  event.stopImmediatePropagation();\n});\n$(\"p\").click(function(event){\n  \/\/ This function won't be executed\n  $(this).css(\"background-color\", \"#f00\");\n});  \n$(\"div\").click(function(event) {\n  \/\/ This function will be executed\n    $(this).css(\"background-color\", \"#f00\");\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.result\/","title":"event.result","description":"\n\nevent.result Returns: Object\n\n\nDescription:  The last value returned by an event handler that was triggered by this event, unless the value was undefined.  \n\nversion added: 1.3event.result\nThis property can be useful for getting previous return values of custom events. \nExample:\n\nDisplay previous handler's return value\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;display event.result&lt;\/button&gt;\n&lt;p&gt;&lt;\/p&gt;\n\n&lt;script&gt;\n$(\"button\").click(function(event) {\n  return \"hey\";\n});\n$(\"button\").click(function(event) {\n  $(\"p\").html( event.result );\n});  \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.stopPropagation\/","title":"event.stopPropagation","description":"\n\nevent.stopPropagation() \n\n\nDescription: Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.   \n\nversion added: 1.0event.stopPropagation()\n\nWe can use event.isPropagationStopped() to determine if this method was ever called (on that event object). \nThis method works for custom events triggered with trigger(), as well.\nNote that this will not prevent other handlers on the same element from running. \n\nAdditional Notes:Since the .live() method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by .delegate() will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling event.stopPropagation() or returning false.Example:\n\nKill the bubbling on the click event.\n$(\"p\").click(function(event){\n  event.stopPropagation();\n  \/\/ do something\n});  \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.target\/","title":"event.target","description":"\n\nevent.target Returns: Element\n\n\nDescription:  The DOM element that initiated the event.  \n\nversion added: 1.0event.target\nThe target property can be the element that registered for the event or a descendant of it.  It is often useful to compare event.target to this in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.\nExamples:\n\n\nExample: Display the tag's name on click\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nspan, strong, p { \n  padding: 8px; display: block; border: 1px solid #999;  }\n    &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n&lt;div&gt;\n  &lt;p&gt;\n    &lt;strong&gt;&lt;span&gt;click&lt;\/span&gt;&lt;\/strong&gt;\n  &lt;\/p&gt;\n&lt;\/div&gt;\n&lt;script&gt;$(\"body\").click(function(event) {\n  $(\"#log\").html(\"clicked: \" + event.target.nodeName);\n});  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul&gt;\n  &lt;li&gt;item 1\n    &lt;ul&gt;\n      &lt;li&gt;sub item 1-a&lt;\/li&gt;\n      &lt;li&gt;sub item 1-b&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li&gt;item 2\n    &lt;ul&gt;\n      &lt;li&gt;sub item 2-a&lt;\/li&gt;\n      &lt;li&gt;sub item 2-b&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;  \n&lt;\/ul&gt;\n&lt;script&gt;function handler(event) {\n  var $target = $(event.target);\n  if( $target.is(\"li\") ) {\n    $target.children().toggle();\n  }\n}\n$(\"ul\").click(handler).find(\"ul\").hide();&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.timeStamp\/","title":"event.timeStamp","description":"\n\nevent.timeStamp Returns: Number\n\n\nDescription: The difference in milliseconds between the time the browser created the event and January 1, 1970.\n\nversion added: 1.2.6event.timeStamp\n\nThis property can be useful for profiling event performance by getting the event.timeStamp value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use (new Date).getTime() instead.\nNote: Due to a bug open since 2004, this value is not populated correctly in Firefox and it is not possible to know the time the event was created in that browser.\n\nExample:\n\nDisplay the time since the click handler last executed.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { height: 100px; width: 300px; margin: 10px; \n      background-color: #ffd; overflow: auto; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div&gt;Click.&lt;\/div&gt;\n&lt;script&gt;\nvar last, diff;\n$('div').click(function(event) {\n  if ( last ) {\n    diff = event.timeStamp - last\n    $('div').append('time since last event: ' + diff + '&lt;br\/&gt;');\n  } else {\n    $('div').append('Click again.&lt;br\/&gt;');\n  }\n  last = event.timeStamp;\n});  \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/event.type\/","title":"event.type","description":"\n\nevent.type Returns: String\n\n\nDescription:  Describes the nature of the event.  \n\nversion added: 1.0event.type\nExample:\n\nOn all anchor clicks, alert the event type.\n$(\"a\").click(function(event) {\n  alert(event.type); \/\/ \"click\"\n}); \n\n\n"},{"url":"http:\/\/api.jquery.com\/event.which\/","title":"event.which","description":"\n\nevent.which Returns: Number\n\n\nDescription:  For key or button events, this attribute indicates the specific button or key that was pressed.  \n\nversion added: 1.1.3event.which\nevent.which normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input. For more detail, read about event.charCode on the MDC. \nExample:\n\nLog what key was depressed.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;input id=\"whichkey\" value=\"type something\"&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n&lt;script&gt;$('#whichkey').bind('keydown',function(e){ \n  $('#log').html(e.type + ': ' +  e.which );\n});  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\nResult:\n\"keydown\" 74  \n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.extend\/","title":"jQuery.extend","description":"\n\njQuery.extend( target [, object1]  [, objectN]  ) Returns: Object\n\n\nDescription: Merge the contents of two or more objects together into the first object.\n\n\n\nversion added: 1.0jQuery.extend( target [, object1] [, objectN] )\ntarget An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.\nobject1An object containing additional properties to merge in.\nobjectNAdditional objects containing properties to merge in.\n\n\n\nversion added: 1.1.4jQuery.extend(  [deep], target, object1 [, objectN] )\ndeepIf true, the merge becomes recursive (aka. deep copy).\ntargetThe object to extend. It will receive the new properties.\nobject1An object containing additional properties to merge in.\nobjectNAdditional objects containing properties to merge in.\n\n\n\nWhen we supply two or more objects to $.extend(), properties from all of the objects are added to the target object.\nIf only one argument is supplied to $.extend(), this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, we can add new functions to the jQuery namespace.  This can be useful for plugin authors wishing to add new methods to JQuery.\nKeep in mind that the target object (first argument) will be modified, and will also be returned from $.extend(). If, however, we want to preserve both of the original objects, we can do so by passing an empty object as the target:\nvar object = $.extend({}, object1, object2);\nThe merge performed by $.extend() is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing true for the first function argument, objects will be recursively merged. (Passing false for the first argument is not supported.)\nUndefined properties are not copied. However, properties inherited from the object's prototype will be copied over. For performance reasons, properties that have values of built-in JavaScript types such as Date or RegExp are not re-constructed, and will appear as plain Objects in the resulting object or array.\n\nNote: When performing a deep extend, Object and Array are extended, however primitive types such string, boolean and number are not. For specific needs that fall outside of this behaviour, it is recommended to write a custom extend method as this will be significantly faster from a performance perspective. \n\n\nExamples:\n\n\nExample: Merge two objects, modifying the first.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar object1 = {\n  apple: 0,\n  banana: {weight: 52, price: 100},\n  cherry: 97\n};\nvar object2 = {\n  banana: {price: 200},\n  durian: 100\n};\n\n\/* merge object2 into object1 *\/\n$.extend(object1, object2);\n\nvar printObj = function(obj) {\n  var arr = [];\n  $.each(obj, function(key, val) {\n    var next = key + \": \";\n    next += $.isPlainObject(val) ? printObj(val) : val;\n    arr.push( next );\n  });\n  return \"{ \" +  arr.join(\", \") + \" }\";\n};\n\n$(\"#log\").append( printObj(object1) );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Merge two objects recursively, modifying the first.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar object1 = {\n  apple: 0,\n  banana: {weight: 52, price: 100},\n  cherry: 97\n};\nvar object2 = {\n  banana: {price: 200},\n  durian: 100\n};\n\n\/* merge object2 into object1, recursively *\/\n$.extend(true, object1, object2);\n\nvar printObj = function(obj) {\n  var arr = [];\n  $.each(obj, function(key, val) {\n    var next = key + \": \";\n    next += $.isPlainObject(val) ? printObj(val) : val;\n    arr.push( next );\n  });\n  return \"{ \" +  arr.join(\", \") + \" }\";\n};\n\n$(\"#log\").append( printObj(object1) );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar defaults = { validate: false, limit: 5, name: \"foo\" };\nvar options = { validate: true, name: \"bar\" };\n\n\/* merge defaults and options, without modifying defaults *\/\nvar settings = $.extend({}, defaults, options);\n\nvar printObj = function(obj) {\n  var arr = [];\n  $.each(obj, function(key, val) {\n    var next = key + \": \";\n    next += $.isPlainObject(val) ? printObj(val) : val;\n    arr.push( next );\n  });\n  return \"{ \" +  arr.join(\", \") + \" }\";\n};\n\n\n$(\"#log\").append( \"&lt;div&gt;&lt;b&gt;settings -- &lt;\/b&gt;\" + printObj(settings) + \"&lt;\/div&gt;\" );\n$(\"#log\").append( \"&lt;div&gt;&lt;b&gt;options -- &lt;\/b&gt;\" + printObj(options) + \"&lt;\/div&gt;\" );\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/fadeOut\/","title":"fadeOut","description":"\n\n.fadeOut(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Hide the matched elements by fading them to transparent.\n\n\n\nversion added: 1.0.fadeOut(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.fadeOut(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .fadeOut() method animates the opacity of the matched elements. Once the opacity reaches 0, the display style property is set to none, so the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively. If any other string is supplied, or if the duration parameter is omitted, the default duration of  400 milliseconds is used.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWith the element initially shown, we can hide it slowly:\n$('#clickme').click(function() {\n  $('#book').fadeOut('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n\n      \n      \n      \n      \n    \n\nNote: To avoid unnecessary DOM manipulation, .fadeOut() will not hide an element that is already considered hidden. For information on which elements jQuery considers hidden, see  :hidden Selector.\n\nEasing\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .fadeOut(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates all paragraphs to fade out, completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { font-size:150%; cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n  If you click on this paragraph\n  you'll see it just fade away.\n  &lt;\/p&gt;\n&lt;script&gt;\n  $(\"p\").click(function () {\n  $(\"p\").fadeOut(\"slow\");\n  });\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Fades out spans in one section that you click on.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { cursor:pointer; }\n  span.hilite { background:yellow; }\n  div { display:inline; color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;h3&gt;Find the modifiers - &lt;div&gt;&lt;\/div&gt;&lt;\/h3&gt;\n  &lt;p&gt;\n  If you &lt;span&gt;really&lt;\/span&gt; want to go outside\n  &lt;span&gt;in the cold&lt;\/span&gt; then make sure to wear\n  your &lt;span&gt;warm&lt;\/span&gt; jacket given to you by\n  your &lt;span&gt;favorite&lt;\/span&gt; teacher.\n  &lt;\/p&gt;\n&lt;script&gt;\n\n  $(\"span\").click(function () {\n  $(this).fadeOut(1000, function () {\n  $(\"div\").text(\"'\" + $(this).text() + \"' has faded!\");\n  $(this).remove();\n  });\n  });\n  $(\"span\").hover(function () {\n  $(this).addClass(\"hilite\");\n  }, function () {\n  $(this).removeClass(\"hilite\");\n  });\n\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Fades out two divs, one with a \"linear\" easing and one with the default, \"swing,\" easing.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.box,\nbutton { float:left; margin:5px 10px 5px 0; }\n.box { height:80px; width:80px; background:#090; }\n#log { clear:left; }\n\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button id=\"btn1\"&gt;fade out&lt;\/button&gt;\n&lt;button id=\"btn2\"&gt;show&lt;\/button&gt;\n\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;div id=\"box1\" class=\"box\"&gt;linear&lt;\/div&gt;\n&lt;div id=\"box2\" class=\"box\"&gt;swing&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"#btn1\").click(function() {\n  function complete() {\n    $(\"&lt;div\/&gt;\").text(this.id).appendTo(\"#log\");\n  }\n  \n  $(\"#box1\").fadeOut(1600, \"linear\", complete);\n  $(\"#box2\").fadeOut(1600, complete);\n});\n\n$(\"#btn2\").click(function() {\n  $(\"div\").show();\n  $(\"#log\").empty();\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/fadeIn\/","title":"fadeIn","description":"\n\n.fadeIn(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Display the matched elements by fading them to opaque.\n\n\n\nversion added: 1.0.fadeIn(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.fadeIn(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .fadeIn() method animates the opacity of the matched elements.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively. If any other string is supplied, or if the duration parameter is omitted, the default duration of  400 milliseconds is used.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n      Click here\n    &lt;\/div&gt;\n    &lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\n    With the element initially hidden, we can show it slowly:\n    $('#clickme').click(function() {\n      $('#book').fadeIn('slow', function() {\n        \/\/ Animation complete\n      });\n    });\n\n      \n      \n      \n      \n    \nEasing\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole. \nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .fadeIn(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    span { color:red; cursor:pointer; }\n    div { margin:3px; width:80px; display:none;\n      height:80px; float:left; }\n      div#one { background:#f00; }\n      div#two { background:#0f0; }\n      div#three { background:#00f; }\n    &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;Click here...&lt;\/span&gt;\n\n    &lt;div id=\"one\"&gt;&lt;\/div&gt;\n    &lt;div id=\"two\"&gt;&lt;\/div&gt;\n    &lt;div id=\"three\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n      $(document.body).click(function () {\n        $(\"div:hidden:first\").fadeIn(\"slow\");\n      });\n    &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n      p { position:relative; width:400px; height:90px; }\n      div { position:absolute; width:400px; height:65px; \n        font-size:36px; text-align:center; \n        color:yellow; background:red;\n        padding-top:25px; \n        top:0; left:0; display:none; }\n        span { display:none; }\n      &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n        Let it be known that the party of the first part\n        and the party of the second part are henceforth\n        and hereto directed to assess the allegations\n        for factual correctness... (&lt;a href=\"#\"&gt;click!&lt;\/a&gt;)\n        &lt;div&gt;&lt;span&gt;CENSORED!&lt;\/span&gt;&lt;\/div&gt;\n\n      &lt;\/p&gt;\n&lt;script&gt;\n        $(\"a\").click(function () {\n          $(\"div\").fadeIn(3000, function () {\n            $(\"span\").fadeIn(100);\n          });\n          return false;\n        }); \n\n      &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/fadeTo\/","title":"fadeTo","description":"\n\n.fadeTo( duration, opacity [, callback]  ) Returns: jQuery\n\n\nDescription: Adjust the opacity of the matched elements.\n\n\n\nversion added: 1.0.fadeTo( duration, opacity [, callback] )\ndurationA string or number determining how long the animation will run.\nopacityA number between 0 and 1 denoting the target opacity.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.fadeTo( duration, opacity [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\nopacityA number between 0 and 1 denoting the target opacity.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .fadeTo() method animates the opacity of the matched elements.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively. If any other string is supplied, the default duration of  400 milliseconds is used. Unlike the other effect methods, .fadeTo() requires that duration be explicitly specified.\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n    Click here\n  &lt;\/div&gt;\n  &lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\n  With the element initially shown, we can dim it slowly:\n  $('#clickme').click(function() {\n    $('#book').fadeTo('slow', 0.5, function() {\n      \/\/ Animation complete.\n    });\n  });\n  \n \n    \n    \n    \n    \n  \nWith duration set to 0, this method just changes the opacity CSS property, so .fadeTo(0, opacity) is the same as .css('opacity', opacity).\n\nAdditional Notes:All jQuery effects, including .fadeTo(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\nClick this paragraph to see it fade.\n&lt;\/p&gt;\n\n&lt;p&gt;\nCompare to this one that won't fade.\n&lt;\/p&gt;\n&lt;script&gt;\n$(\"p:first\").click(function () {\n$(this).fadeTo(\"slow\", 0.33);\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Fade div to a random opacity on each click, completing the animation within 200 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { width:80px; margin:0; padding:5px; }\ndiv { width:40px; height:40px; position:absolute; }\ndiv#one { top:0; left:0; background:#f00; }\ndiv#two { top:20px; left:20px; background:#0f0; }\ndiv#three { top:40px; left:40px; background:#00f; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;And this is the library that John built...&lt;\/p&gt;\n\n&lt;div id=\"one\"&gt;&lt;\/div&gt;\n&lt;div id=\"two\"&gt;&lt;\/div&gt;\n&lt;div id=\"three\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n$(\"div\").click(function () {\n$(this).fadeTo(\"fast\", Math.random());\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find the right answer!  The fade will take 250 milliseconds and change various styles when it completes.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv, p { width:80px; height:40px; top:0; margin:0; \nposition:absolute; padding-top:8px; }\np { background:#fcc; text-align:center; }\ndiv { background:blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Wrong&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;p&gt;Wrong&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n\n&lt;p&gt;Right!&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\nvar getPos = function (n) {\nreturn (Math.floor(n) * 90) + \"px\";\n};\n$(\"p\").each(function (n) {\nvar r = Math.floor(Math.random() * 3);\nvar tmp = $(this).text();\n$(this).text($(\"p:eq(\" + r + \")\").text());\n$(\"p:eq(\" + r + \")\").text(tmp);\n$(this).css(\"left\", getPos(n));\n});\n$(\"div\").each(function (n) {\n      $(this).css(\"left\", getPos(n));\n    })\n.css(\"cursor\", \"pointer\")\n.click(function () {\n      $(this).fadeTo(250, 0.25, function () {\n            $(this).css(\"cursor\", \"\")\n                   .prev().css({\"font-weight\": \"bolder\",\n                                \"font-style\": \"italic\"});\n          });\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/fadeToggle\/","title":"fadeToggle","description":"\n\n.fadeToggle(  [duration]  [, easing]  [, callback]  ) Returns: jQuery\n\n\nDescription: Display or hide the matched elements by animating their opacity.\n\n\nversion added: 1.4.4.fadeToggle(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\nThe .fadeToggle() method animates the opacity of the matched elements. When called on a visible element, the element's display style property is set to none once the opacity reaches 0, so the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nEasing\nThe string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .fadeToggle(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExample:\n\nFades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a \"finished\" message upon completion. \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;fadeToggle p1&lt;\/button&gt;\n&lt;button&gt;fadeToggle p2&lt;\/button&gt;\n&lt;p&gt;This paragraph has a slow, linear fade.&lt;\/p&gt;\n\n&lt;p&gt;This paragraph has a fast animation.&lt;\/p&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"button:first\").click(function() {\n  $(\"p:first\").fadeToggle(\"slow\", \"linear\");\n});\n$(\"button:last\").click(function () {\n  $(\"p:last\").fadeToggle(\"fast\", function () {\n    $(\"#log\").append(\"&lt;div&gt;finished&lt;\/div&gt;\");\n  });\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/file-selector\/","title":":file Selector","description":"\n\nfile  selector\n\n\nversion added: 1.0jQuery(':file')\nDescription: Selects all elements of type file.\n:file is equivalent to [type=\"file\"]. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':file') is equivalent to $('*:file'), so $('input:file') should be used instead. \nAdditional Notes:Because :file is a jQuery extension and not part of the CSS specification, queries using :file cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"file\"] instead.Example:\n\nFinds all file inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"input:file\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/filter\/","title":"filter","description":"\n\n.filter( selector ) Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to those that match the selector or pass the function's test. \n\n\n\nversion added: 1.0.filter( selector )\nselectorA string containing a selector expression to match the current set of elements against.\n\n\n\nversion added: 1.0.filter( function(index) )\nfunction(index)A function used as a test for each element in the set. this is the current DOM element.\n\n\n\nversion added: 1.4.filter( element )\nelementAn element to match the current set of elements against.\n\n\n\nversion added: 1.4.filter( jQuery object )\njQuery objectAn existing jQuery object to match the current set of elements against.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .filter() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.\nConsider a page with a simple list on it:\nWe can apply this method to the set of list items:\n\n  $('li').filter(':even').css('background-color', 'red');\n\nThe result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that :even and :odd use 0-based indexing).\nUsing a Filter Function\nThe second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns true (or a \"truthy\" value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;\/strong&gt; item 1 -\n    one strong tag&lt;\/li&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;\/strong&gt; item &lt;strong&gt;2&lt;\/strong&gt; -\n    two &lt;span&gt;strong tags&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n  &lt;li&gt;list item 6&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can select the list items, then filter them based on their contents:\n\n$('li').filter(function(index) {\n  return $('strong', this).length == 1;\n}).css('background-color', 'red');\n\nThis code will alter the first list item only, as it contains exactly one &lt;strong&gt; tag. Within the filter function, this refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.\nWe can also take advantage of the index passed through the function, which indicates the 0-based position of the element within the unfiltered set of matched elements:\n\n$('li').filter(function(index) {\n  return index % 3 == 2;\n}).css('background-color', 'red');\n\nThis alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator () to select every item with an index value that, when divided by 3, has a remainder of 2.\n\nExamples:\n\n\nExample: Change the color of all divs; then add a border to those with a \"middle\" class.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:60px; height:60px; margin:5px; float:left;\n        border:2px white solid;}\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div class=\"middle\"&gt;&lt;\/div&gt;\n  &lt;div class=\"middle\"&gt;&lt;\/div&gt;\n  &lt;div class=\"middle\"&gt;&lt;\/div&gt;\n  &lt;div class=\"middle\"&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"div\").css(\"background\", \"#c8ebcc\")\n            .filter(\".middle\")\n            .css(\"border-color\", \"red\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of \"fourth.\"\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:60px; height:60px; margin:5px; float:left;\n        border:3px white solid; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div id=\"first\"&gt;&lt;\/div&gt;\n  &lt;div id=\"second\"&gt;&lt;\/div&gt;\n  &lt;div id=\"third\"&gt;&lt;\/div&gt;\n\n  &lt;div id=\"fourth\"&gt;&lt;\/div&gt;\n  &lt;div id=\"fifth\"&gt;&lt;\/div&gt;\n  &lt;div id=\"sixth\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"div\").css(\"background\", \"#b4b0da\")\n            .filter(function (index) {\n                  return index == 1 || $(this).attr(\"id\") == \"fourth\";\n                })\n            .css(\"border\", \"3px double red\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Select all divs and filter the selection with a DOM element, keeping only the one with an id of \"unique\".\n\n$(\"div\").filter( document.getElementById(\"unique\") )\n\n\nExample: Select all divs and filter the selection with a jQuery object, keeping only the one with an id of \"unique\".\n\n\n$(\"div\").filter( $(\"#unique\") )\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/first-selector\/","title":":first Selector","description":"\n\nfirst  selector\n\n\nversion added: 1.0jQuery(':first')\nDescription: Selects the first matched element.\nThe :first pseudo-class is equivalent to :eq(0). It could also be written as :lt(1). While this matches only a single element, :first-child can match more than one: One for each parent.\nAdditional Notes:Because :first is a jQuery extension and not part of the CSS specification, queries using :first cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :first to select elements, first select the elements using a pure CSS selector, then use .filter(\":first\").Example:\n\nFinds the first table row.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  td { color:blue; font-weight:bold; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Row 1&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Row 2&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Row 3&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;\n&lt;script&gt;$(\"tr:first\").css(\"font-style\", \"italic\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/first\/","title":"first","description":"\n\n.first() Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to the first in the set.\n\nversion added: 1.4.first()\n\nGiven a jQuery object that represents a set of DOM elements, the .first() method constructs a new jQuery object from the first matching element.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can apply this method to the set of list items:\n$('li').first().css('background-color', 'red');\nThe result of this call is a red background for the first item.\n\nExample:\n\nHighlight the first span in a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;.highlight{background-color: yellow}&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;span&gt;Look:&lt;\/span&gt; &lt;span&gt;This is some text in a paragraph.&lt;\/span&gt; &lt;span&gt;This is a note about it.&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;$(\"p span\").first().addClass('highlight');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/first-child-selector\/","title":":first-child Selector","description":"\n\nfirst-child  selector\n\n\nversion added: 1.1.4jQuery(':first-child')\nDescription: Selects all elements that are the first child of their parent.\nWhile :first matches only a single element, the :first-child selector can match more than one: one for each parent. This is equivalent to :nth-child(1).\nExample:\n\nFinds the first span in each matched div to underline and add a hover state.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { color:#008; }\n  span.sogreen { color:green; font-weight: bolder; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;span&gt;John,&lt;\/span&gt;\n    &lt;span&gt;Karl,&lt;\/span&gt;\n    &lt;span&gt;Brandon&lt;\/span&gt;\n\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;span&gt;Glen,&lt;\/span&gt;\n    &lt;span&gt;Tane,&lt;\/span&gt;\n    &lt;span&gt;Ralph&lt;\/span&gt;\n\n  &lt;\/div&gt;\n&lt;script&gt;\n    $(\"div span:first-child\")\n        .css(\"text-decoration\", \"underline\")\n        .hover(function () {\n              $(this).addClass(\"sogreen\");\n            }, function () {\n              $(this).removeClass(\"sogreen\");\n            });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/focus\/","title":"focus","description":"\n\n.focus( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.focus( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.focus(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.focus()\n\n\n\nThis method is a shortcut for .bind('focus', handler) in the first and second variations, and .trigger('focus') in the third.\nThe focus event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as  form elements (&lt;input&gt;, &lt;select&gt;, etc.) and links (&lt;a href&gt;). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's tabindex property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.\nElements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.\n\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Field 1\" \/&gt;\n  &lt;input type=\"text\" value=\"Field 2\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n\nThe event handler can be bound to the first input field:\n$('#target').focus(function() {\n  alert('Handler for .focus() called.');\n});\nNow clicking on the first field, or tabbing to it from another field, displays the alert:\nHandler for .focus() called.\nWe can trigger the event when another element is clicked:\n$('#other').click(function() {\n  $('#target').focus();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nThe focus event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the focus event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping focus to the focusin event in its event delegation methods, .live() and .delegate().\nTriggering the focus on hidden elements causes an error in Internet Explorer. Take care to only call .focus() without parameters on elements that are visible.\n\nExamples:\n\n\nExample: Fire focus.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;span {display:none;}&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;input type=\"text\" \/&gt; &lt;span&gt;focus fire&lt;\/span&gt;&lt;\/p&gt;\n\n&lt;p&gt;&lt;input type=\"password\" \/&gt; &lt;span&gt;focus fire&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;\n    $(\"input\").focus(function () {\n         $(this).next(\"span\").css('display','inline').fadeOut(1000);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To stop people from writing in text input boxes, try:\n\n$(\"input[type=text]\").focus(function(){\n  $(this).blur();\n});\n\n\nExample: To focus on a login input box with id 'login' on page startup, try:\n\n$(document).ready(function(){\n  $(\"#login\").focus();\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/find\/","title":"find","description":"\n\n.find( selector ) Returns: jQuery\n\n\nDescription: Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n\n\n\nversion added: 1.0.find( selector )\nselectorA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.6.find( jQuery object )\njQuery objectA jQuery object to match elements against.\n\n\n\nversion added: 1.6.find( element )\nelementAn element to match elements against.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .find() method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree.\nThe first signature for the .find()method accepts a selector expression of the same type that we can pass to the $() function. The elements will be filtered by testing whether they match this selector.\nConsider a page with a basic nested list on it:\n\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at item II, we can find list items within it:\n$('li.item-ii').find('li').css('background-color', 'red');\nThe result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.\nUnlike in the rest of the tree traversal methods, the selector expression is required in a call to .find(). If we need to retrieve all of the descendant elements, we can pass in the universal selector '*' to accomplish this.\nSelector context is implemented with the .find() method; therefore, $('li.item-ii').find('li') is equivalent to $('li', 'li.item-ii').\nAs of jQuery 1.6, we can also filter the selection with a given jQuery collection or element. With the same nested list as above, if we start with:\nvar $allListElements = $('li');\nAnd then pass this jQuery object to find:\n$('li.item-ii').find( $allListElements );\nThis will return a jQuery collection which contains only the list elements that are descendants of item II.\nSimilarly, an element may also be passed to find:\n\nvar item1 = $('li.item-1')[0];\n$('li.item-ii').find( item1 ).css('background-color', 'red');\n\nThe result of this call would be a red background on item 1.\n\nExamples:\n\n\nExample: Starts with all paragraphs and searches for descendant span elements, same as $(\"p span\")\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;span&gt;Hello&lt;\/span&gt;, how are you?&lt;\/p&gt;\n&lt;p&gt;Me? I'm &lt;span&gt;good&lt;\/span&gt;.&lt;\/p&gt;\n&lt;script&gt;\n  $(\"p\").find(\"span\").css('color','red');\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    span { color: blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;span&gt;Hello&lt;\/span&gt;, how are you?&lt;\/p&gt;\n  &lt;p&gt;Me? I'm &lt;span&gt;good&lt;\/span&gt;.&lt;\/p&gt;\n  &lt;div&gt;Did you &lt;span&gt;eat&lt;\/span&gt; yet?&lt;\/div&gt;\n&lt;script&gt;\n  var $spans = $('span');\n  $(\"p\").find( $spans ).css('color','red');\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Add spans around each word then add a hover and italicize words with the letter t.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { font-size:20px; width:200px; cursor:default; \n      color:blue; font-weight:bold; margin:0 10px; }\n  .hilite { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n  When the day is short\n  find that which matters to you\n  or stop believing\n  &lt;\/p&gt;\n&lt;script&gt;\n  var newText = $(\"p\").text().split(\" \").join(\"&lt;\/span&gt; &lt;span&gt;\");\n  newText = \"&lt;span&gt;\" + newText + \"&lt;\/span&gt;\";\n\n  $(\"p\").html( newText )\n    .find('span')\n    .hover(function() { \n      $(this).addClass(\"hilite\"); \n    },\n      function() { $(this).removeClass(\"hilite\"); \n    })\n  .end()\n    .find(\":contains('t')\")\n    .css({\"font-style\":\"italic\", \"font-weight\":\"bolder\"});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/focusin\/","title":"focusin","description":"\n\n.focusin( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"focusin\" event.\n\n\n\nversion added: 1.4.focusin( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.focusin(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nThis method is a shortcut for .bind('focusin', handler).\nThe focusin event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the focus event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).\nThis event will likely be used together with the focusout event.\n\nExample:\n\nWatch for a focus to occur within the paragraphs on the page.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;span {display:none;}&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;input type=\"text\" \/&gt; &lt;span&gt;focusin fire&lt;\/span&gt;&lt;\/p&gt;\n&lt;p&gt;&lt;input type=\"password\" \/&gt; &lt;span&gt;focusin fire&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;\n    $(\"p\").focusin(function() {\n         $(this).find(\"span\").css('display','inline').fadeOut(1000);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.fx.interval\/","title":"jQuery.fx.interval","description":"\n\njQuery.fx.interval Returns: Number\n\n\nDescription: The rate (in milliseconds) at which animations fire.\n\nversion added: 1.4.3jQuery.fx.interval\n\nThis property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.\nSince jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.\nNote:jQuery.fx.interval currently has no effect in browsers that support the requestAnimationFrame property, such as Google Chrome 11. This behavior is subject to change in a future release.\n\nExample:\n\nCause all animations to run with less frames.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    div { width:50px; height:30px; margin:5px; float:left;\n          background:green; }\n    &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;input type=\"button\" value=\"Run\"\/&gt;&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\njQuery.fx.interval = 100;\n\n$(\"input\").click(function(){\n  $(\"div\").toggle( 3000 );\n});\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.fx.off\/","title":"jQuery.fx.off","description":"\n\njQuery.fx.off Returns: Boolean\n\n\nDescription: Globally disable all animations.\n\nversion added: 1.3jQuery.fx.off\n\nWhen this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:\n\n    jQuery is being used on a low-resource device.\n    Users are encountering accessibility problems with the animations (see the article Turn Off Animation for more information).\n    \nAnimations can be turned back on by setting the property to false.\n\nExample:\n\nToggle animation on and off\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    div { width:50px; height:30px; margin:5px; float:left;\n          background:green; }\n    &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;input type=\"button\" value=\"Run\"\/&gt; &lt;button&gt;Toggle fx&lt;\/button&gt;&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\nvar toggleFx = function() {\n  $.fx.off = !$.fx.off;\n};\ntoggleFx();\n\n$(\"button\").click(toggleFx)\n\n$(\"input\").click(function(){\n  $(\"div\").toggle(\"slow\");\n});\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/focus-selector\/","title":":focus selector","description":"\n\nfocus  selector\n\n\nversion added: 1.6jQuery(':focus')\nDescription: Selects element if it is currently focused.\nAs with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':focus') is equivalent to $('*:focus').  If you are looking for the currently focused element, $( document.activeElement ) will retrieve it without having to search the whole DOM tree.\nExample:\n\nAdds the focused class to whatever element has focus\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.focused {\n    background: #abcdef;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div id=\"content\"&gt;\n    &lt;input tabIndex=\"1\"&gt;\n    &lt;input tabIndex=\"2\"&gt;\n    &lt;select tabIndex=\"3\"&gt;\n        &lt;option&gt;select menu&lt;\/option&gt;\n    &lt;\/select&gt;\n    &lt;div tabIndex=\"4\"&gt;\n        a div\n    &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;script&gt;\n$( \"#content\" ).delegate( \"*\", \"focus blur\", function( event ) {\n    var elem = $( this );\n    setTimeout(function() {\n       elem.toggleClass( \"focused\", elem.is( \":focus\" ) );\n    }, 0);\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/get\/","title":"get","description":"\n\n.get(  [index]  ) Returns: Element, Array\n\n\nDescription: Retrieve the DOM elements matched by the jQuery object.\n\n\nversion added: 1.0.get(  [index] )\nindexA zero-based integer indicating which element to retrieve.\n\n\nThe .get() method grants us access to the DOM nodes underlying each jQuery object. Suppose we had a simple unordered list on the page:\n\n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWithout a parameter, .get() returns all of the elements:\nalert($('li').get());\nAll of the matched DOM nodes are returned by this call, contained in a standard array:\n[&lt;li id=\"foo\"&gt;, &lt;li id=\"bar\"&gt;]\nWith an index specified, .get() will retrieve a single element:\n($('li').get(0));\nSince the index is zero-based, the first list item is returned:\n&lt;li id=\"foo\"&gt;\nEach jQuery object also masquerades as an array, so we can use the array dereferencing operator to get at the list item instead:\nalert($('li')[0]);\nHowever, this syntax lacks some of the additional capabilities of .get(), such as specifying a negative index:\nalert($('li').get(-1));\nA negative index is counted from the end of the matched set, so this example will return the last item in the list:\n&lt;li id=\"bar\"&gt;\n\nExamples:\n\n\nExample: Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Reversed - &lt;span&gt;&lt;\/span&gt;\n\n  &lt;div&gt;One&lt;\/div&gt;\n  &lt;div&gt;Two&lt;\/div&gt;\n  &lt;div&gt;Three&lt;\/div&gt;\n&lt;script&gt;\n\n    function disp(divs) {\n      var a = [];\n      for (var i = 0; i &lt; divs.length; i++) {\n        a.push(divs[i].innerHTML);\n      }\n      $(\"span\").text(a.join(\" \"));\n    }\n    \n    disp( $(\"div\").get().reverse() );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Gives the tag name of the element clicked on.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { color:red; }\n  div { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;&amp;nbsp;&lt;\/span&gt;\n  &lt;p&gt;In this paragraph is an &lt;span&gt;important&lt;\/span&gt; section&lt;\/p&gt;\n\n  &lt;div&gt;&lt;input type=\"text\" \/&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"*\", document.body).click(function (e) {\n      e.stopPropagation();\n      var domEl = $(this).get(0);\n      $(\"span:first\").text(\"Clicked on - \" + domEl.tagName);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.get\/","title":"jQuery.get","description":"\n\njQuery.get( url [, data]  [, success(data, textStatus, jqXHR)]  [, dataType]  ) Returns: jqXHR\n\n\nDescription: Load data from the server using a HTTP GET request.\n\n\nversion added: 1.0jQuery.get( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )\nurlA string containing the URL to which the request is sent.\ndataA map or string that is sent to the server with the request.\nsuccess(data, textStatus, jqXHR)A callback function that is executed if the request succeeds.\ndataTypeThe type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).\n\n\nThis is a shorthand Ajax function, which is equivalent to:\n$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n\nThe success callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response. \nAs of jQuery 1.5, the success callback function is also passed a \"jqXHR\" object (in jQuery 1.4, it was passed the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR,  in those cases the (j)XHR and textStatus parameters passed to the success callback are undefined.\nMost implementations will specify a success handler:\n$.get('ajax\/test.html', function(data) {\n  $('.result').html(data);\n  alert('Load was performed.');\n});\n\nThis example fetches the requested HTML snippet and inserts it on the page.\nThe jqXHR Object\nAs of jQuery 1.5, all of jQuery's Ajax methods return  a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.get() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). For convenience and consistency with the callback names used by $.ajax(), it provides .error(), .success(), and .complete() methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named $.ajax() callback.\nThe Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.get(), to chain multiple .success(), .complete(), and .error() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.\n\/\/ Assign handlers immediately after making the request,\n  \/\/ and remember the jqxhr object for this request\n  var jqxhr = $.get(\"example.php\", function() {\n    alert(\"success\");\n  })\n  .success(function() { alert(\"second success\"); })\n  .error(function() { alert(\"error\"); })\n  .complete(function() { alert(\"complete\"); });\n\n  \/\/ perform other work here ...\n\n  \/\/ Set another completion function for the request above\n  jqxhr.complete(function(){ alert(\"second complete\"); });\n\nAdditional Notes:Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, or protocol.If a request with jQuery.get() returns an error code, it will fail silently unless the script has also called the global .ajaxError()  method. Alternatively, as of jQuery 1.5, the .error() method of the jqXHR object returned by jQuery.get() is also available for error handling.Script and JSONP requests are not subject to the same origin policy restrictions.Examples:\n\n\nExample: Request the test.php page, but ignore the return results.\n\n$.get(\"test.php\");\n\n\nExample: Request the test.php page and send some additional data along (while still ignoring the return results).\n\n$.get(\"test.php\", { name: \"John\", time: \"2pm\" } );\n\n\nExample: pass arrays of data to the server (while still ignoring the return results).\n\n$.get(\"test.php\", { 'choices[]': [\"Jon\", \"Susan\"]} );\n\n\nExample: Alert out the results from requesting test.php (HTML or XML, depending on what was returned).\n\n$.get(\"test.php\", function(data){\nalert(\"Data Loaded: \" + data);\n});\n\n\nExample: Alert out the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).\n\n$.get(\"test.cgi\", { name: \"John\", time: \"2pm\" },\n   function(data){\n     alert(\"Data Loaded: \" + data);\n   });\n\n\nExample:  Gets the test.php page contents, which has been returned in json format (&lt;?php echo json_encode(array(\"name\"=&gt;\"John\",\"time\"=&gt;\"2pm\")); ?&gt;), and adds it to the page.\n\n$.get(\"test.php\",\n   function(data){\n     $('body').append( \"Name: \" + data.name ) \/\/ John\n              .append( \"Time: \" + data.time ); \/\/  2pm\n   }, \"json\");\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.getScript\/","title":"jQuery.getScript","description":"\n\njQuery.getScript( url [, success(data, textStatus)]  ) Returns: jqXHR\n\n\nDescription: Load a JavaScript file from the server using a GET HTTP request, then execute it.\n\n\nversion added: 1.0jQuery.getScript( url [, success(data, textStatus)] )\nurlA string containing the URL to which the request is sent.\nsuccess(data, textStatus)A callback function that is executed if the request succeeds.\n\n\nThis is a shorthand Ajax function, which is equivalent to:\n$.ajax({\n  url: url,\n  dataType: \"script\",\n  success: success\n});\n\nThe callback is passed the returned JavaScript file. This is generally not useful as the script will already have run at this point.\nThe script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page:\n$(\".result\").html(\"&lt;p&gt;Lorem ipsum dolor sit amet.&lt;\/p&gt;\");\nScripts are included and run by referencing the file name:\n$.getScript('ajax\/test.js', function(data, textStatus){\n   console.log(data); \/\/data returned\n   console.log(textStatus); \/\/success\n   console.log('Load was performed.');\n});\nNote: Should you require an additional callback for errors when using the getScript() method, the global ajaxError() callback event may be used to achieve this as follows:\n\n$( \"div.log\" ).ajaxError(function(e, jqxhr, settings, exception) {\n  if (settings.dataType=='script') {\n    $(this).text( \"Triggered ajaxError handler.\" );\n  }\n});\n\n\nExample:\n\nLoad the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.block {\n   background-color: blue;\n   width: 150px;\n   height: 70px;\n   margin: 10px;\n}&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button id=\"go\"&gt;&amp;raquo; Run&lt;\/button&gt;\n\n&lt;div class=\"block\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$.getScript(\"\/scripts\/jquery.color.js\", function() {\n  $(\"#go\").click(function(){\n    $(\".block\").animate( { backgroundColor: \"pink\" }, 1000)\n      .delay(500)\n      .animate( { backgroundColor: \"blue\" }, 1000);\n  });\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.globalEval\/","title":"jQuery.globalEval","description":"\n\njQuery.globalEval( code ) \n\n\nDescription: Execute some JavaScript code globally.\n\n\nversion added: 1.0.4jQuery.globalEval( code )\ncodeThe JavaScript code to execute.\n\nThis method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).\nExample:\n\nExecute a script in the global context.\nfunction test(){\n    jQuery.globalEval(\"var newVar = true;\")\n}\ntest();\n\/\/ newVar === true\n\n\n"},{"url":"http:\/\/api.jquery.com\/focusout\/","title":"focusout","description":"\n\n.focusout( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"focusout\" JavaScript event.\n\n\n\nversion added: 1.4.focusout( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.focusout(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nThis method is a shortcut for .bind('focusout', handler).\nThe focusout event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the blur event in that it supports detecting the loss of focus from parent elements (in other words, it supports event bubbling).\nThis event will likely be used together with the focusin event.\n\nExample:\n\nWatch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.inputs { float: left; margin-right: 1em; }\n.inputs p { margin-top: 0; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"inputs\"&gt;\n  &lt;p&gt;\n    &lt;input type=\"text\" \/&gt;&lt;br \/&gt;\n    &lt;input type=\"text\" \/&gt; \n  &lt;\/p&gt;\n  &lt;p&gt;\n    &lt;input type=\"password\" \/&gt;\n  &lt;\/p&gt;\n&lt;\/div&gt;\n&lt;div id=\"fo\"&gt;focusout fire&lt;\/div&gt;\n&lt;div id=\"b\"&gt;blur fire&lt;\/div&gt;\n\n&lt;script&gt;\nvar fo = 0, b = 0;\n$(\"p\").focusout(function() {\n  fo++;\n  $(\"#fo\")\n    .text(\"focusout fired: \" + fo + \"x\");\n}).blur(function() {\n  b++;\n  $(\"#b\")\n    .text(\"blur fired: \" + b + \"x\");\n  \n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.grep\/","title":"jQuery.grep","description":"\n\njQuery.grep( array, function(elementOfArray, indexInArray) [, invert]  ) Returns: Array\n\n\nDescription: Finds the elements of an array which satisfy a filter function. The original array is not affected.\n\n\nversion added: 1.0jQuery.grep( array, function(elementOfArray, indexInArray) [, invert] )\narrayThe array to search through.\nfunction(elementOfArray, indexInArray)The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  this will be the global window object.\ninvertIf \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true.  If \"invert\" is true, then the function returns an array consisting of all elements for which \"callback\" returns false.\n\n\nThe $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.\n The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.\n\nExamples:\n\n\nExample: Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  p { color:green; margin:0; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;p&gt;&lt;\/p&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  \n&lt;script&gt;\nvar arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];\n$(\"div\").text(arr.join(\", \"));\n\narr = jQuery.grep(arr, function(n, i){\n  return (n != 5 &amp;&amp; i &gt; 4);\n});\n$(\"p\").text(arr.join(\", \"));\n\narr = jQuery.grep(arr, function (a) { return a != 9; });\n$(\"span\").text(arr.join(\", \"));\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Filter an array of numbers to include only numbers bigger then zero.\n\n$.grep( [0,1,2], function(n,i){\n   return n &gt; 0;\n });\nResult:\n[1, 2] \n\n\nExample: Filter an array of numbers to include numbers that are not bigger than zero.\n\n$.grep( [0,1,2], function(n,i){\n    return n &gt; 0;\n},true);\nResult:\n[0] \n\n\n\n"},{"url":"http:\/\/api.jquery.com\/gt-selector\/","title":":gt() Selector","description":"\n\ngt  selector\n\n\nversion added: 1.0jQuery(':gt(index)')\n\nindex\nZero-based index.\n\nDescription: Select all elements at an index greater than index within the matched set.\n\nindex-related selectors\nThe index-related selector expressions (including this \"greater than\" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.\nNote that since JavaScript arrays use 0-based indexing, these selectors reflect that fact. This is why $('.myclass:gt(1)') selects elements after the second element in the document with the class myclass, rather than after the first. In contrast, :nth-child(n) uses 1-based indexing to conform to the CSS specification.\n\nAdditional Notes:Because :gt() is a jQuery extension and not part of the CSS specification, queries using :gt() cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use $(\"your-pure-css-selector\").slice(index) instead.Example:\n\nFinds TD #5 and higher. Reminder: the indexing starts at 0.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n\n    &lt;tr&gt;&lt;td&gt;TD #0&lt;\/td&gt;&lt;td&gt;TD #1&lt;\/td&gt;&lt;td&gt;TD #2&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;TD #3&lt;\/td&gt;&lt;td&gt;TD #4&lt;\/td&gt;&lt;td&gt;TD #5&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;TD #6&lt;\/td&gt;&lt;td&gt;TD #7&lt;\/td&gt;&lt;td&gt;TD #8&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;\n&lt;script&gt;$(\"td:gt(4)\").css(\"text-decoration\", \"line-through\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/has\/","title":"has","description":"\n\n.has( selector ) Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.\n\n\n\nversion added: 1.4.has( selector )\nselectorA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.4.has( contained )\ncontainedA DOM element to match elements against.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .has() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.\nConsider a page with a nested list as follows:\n\n &lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2\n    &lt;ul&gt;\n      &lt;li&gt;list item 2-a&lt;\/li&gt;\n      &lt;li&gt;list item 2-b&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can apply this method to the set of list items as follows:\n$('li').has('ul').css('background-color', 'red');\nThe result of this call is a red background for item 2, as it is the only &lt;li&gt; that has a &lt;ul&gt; among its descendants.\n\nExample:\n\nCheck if an element is inside another.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  .full { border: 1px solid red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul&gt;&lt;li&gt;Does the UL contain an LI?&lt;\/li&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\n  $(\"ul\").append(\"&lt;li&gt;\" + ($(\"ul\").has(\"li\").length ? \"Yes\" : \"No\") + \"&lt;\/li&gt;\");\n  $(\"ul\").has(\"li\").addClass(\"full\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/has-attribute-selector\/","title":"Has Attribute Selector [name]","description":"\n\nattributeHas  selector\n\n\nversion added: 1.0jQuery('[attribute]')\n\nattribute\nAn attribute name.\n\nDescription: Selects elements that have the specified attribute, with any value. \nExample:\n\nBind a single click that adds the div id to its text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;no id&lt;\/div&gt;\n  &lt;div id=\"hey\"&gt;with id&lt;\/div&gt;\n\n  &lt;div id=\"there\"&gt;has an id&lt;\/div&gt;\n  &lt;div&gt;nope&lt;\/div&gt;\n&lt;script&gt;\n\n    $('div[id]').one('click', function(){\n      var idString = $(this).text() + ' = ' + $(this).attr('id');\n      $(this).text(idString);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.getJSON\/","title":"jQuery.getJSON","description":"\n\njQuery.getJSON( url [, data]  [, success(data, textStatus, jqXHR)]  ) Returns: jqXHR\n\n\nDescription: Load JSON-encoded data from the server using a GET HTTP request.\n\n\nversion added: 1.0jQuery.getJSON( url [, data] [, success(data, textStatus, jqXHR)] )\nurlA string containing the URL to which the request is sent.\ndataA map or string that is sent to the server with the request.\nsuccess(data, textStatus, jqXHR)A callback function that is executed if the request succeeds.\n\n\nThis is a shorthand Ajax function, which is equivalent to:\n$.ajax({\n  url: url,\n  dataType: 'json',\n  data: data,\n  success: callback\n});\n\nData that is sent to the server is appended to the URL as a query string. If the value of the data parameter is an object (map), it is converted to a string and url-encoded before it is appended to the URL.\nMost implementations will specify a success handler:\n$.getJSON('ajax\/test.json', function(data) {\n  var items = [];\n\n  $.each(data, function(key, val) {\n    items.push('&lt;li id=\"' + key + '\"&gt;' + val + '&lt;\/li&gt;');\n  });\n\n  $('&lt;ul\/&gt;', {\n    'class': 'my-new-list',\n    html: items.join('')\n  }).appendTo('body');\n});\n\nThis example, of course, relies on the structure of the JSON file:\n{\n  \"one\": \"Singular sensation\",\n  \"two\": \"Beady little eyes\",\n  \"three\": \"Little birds pitch by my doorstep\"\n}\n\nUsing this structure, the example loops through the requested data, builds an unordered list, and appends it to the body.\nThe success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response.\nAs of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined.\n\n    Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/.\n  \nJSONP\nIf the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details.\nThe jqXHR Object\nAs of jQuery 1.5, all of jQuery's Ajax methods return  a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). For convenience and consistency with the callback names used by $.ajax(), it provides .error(), .success(), and .complete() methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named $.ajax() callback.\nThe Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .success(), .complete(), and .error() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.\n\/\/ Assign handlers immediately after making the request,\n\/\/ and remember the jqxhr object for this request\nvar jqxhr = $.getJSON(\"example.json\", function() {\n  alert(\"success\");\n})\n.success(function() { alert(\"second success\"); })\n.error(function() { alert(\"error\"); })\n.complete(function() { alert(\"complete\"); });\n\n\/\/ perform other work here ...\n\n\/\/ Set another completion function for the request above\njqxhr.complete(function(){ alert(\"second complete\"); });\n\nAdditional Notes:Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, or protocol.Script and JSONP requests are not subject to the same origin policy restrictions.Examples:\n\n\nExample: Loads the four most recent cat pictures from the Flickr JSONP API.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;img{ height: 100px; float: left; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"images\"&gt;\n\n&lt;\/div&gt;\n&lt;script&gt;\n$.getJSON(\"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\",\n  {\n    tags: \"cat\",\n    tagmode: \"any\",\n    format: \"json\"\n  },\n  function(data) {\n    $.each(data.items, function(i,item){\n      $(\"&lt;img\/&gt;\").attr(\"src\", item.media.m).appendTo(\"#images\");\n      if ( i == 3 ) return false;\n    });\n  });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Load the JSON data from test.js and access a name from the returned JSON data.\n\n$.getJSON(\"test.js\", function(json) {\n   alert(\"JSON Data: \" + json.users[3].name);\n });\n\n\nExample: Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.\n\n$.getJSON(\"test.js\", { name: \"John\", time: \"2pm\" }, function(json) {\n    alert(\"JSON Data: \" + json.users[3].name);\n    });\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/has-selector\/","title":":has() Selector","description":"\n\nhas  selector\n\n\nversion added: 1.1.4jQuery(':has(selector)')\n\nselector\nAny selector.\n\nDescription: Selects elements which contain at least one element that matches the specified selector.\nThe expression $('div:has(p)') matches a &lt;div&gt; if a &lt;p&gt; exists anywhere among its descendants, not just as a direct child.\nAdditional Notes:Because :has() is a jQuery extension and not part of the CSS specification, queries using :has() cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use $(\"your-pure-css-selector\").has(selector\/DOMElement) instead.Example:\n\nAdds the class \"test\" to all divs that have a paragraph inside of them.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  .test{ border: 3px inset red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;p&gt;Hello in a paragraph&lt;\/p&gt;&lt;\/div&gt;\n\n  &lt;div&gt;Hello again! (with no paragraph)&lt;\/div&gt;\n&lt;script&gt;$(\"div:has(p)\").addClass(\"test\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/hasClass\/","title":"hasClass","description":"\n\n.hasClass( className ) Returns: Boolean\n\n\nDescription: Determine whether any of the matched elements are assigned the given class.\n\n\nversion added: 1.2.hasClass( className )\nclassNameThe class name to search for.\n\n\nElements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:\n&lt;div id=\"mydiv\" class=\"foo bar\"&gt;&lt;\/div&gt;\nThe .hasClass() method will return true if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return true:\n$('#mydiv').hasClass('foo')\nAs would:\n$('#mydiv').hasClass('bar')\nWhile this would return false:\n$('#mydiv').hasClass('quux')\n\nExample:\n\nLooks for the paragraph that contains 'selected' as a class.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 8px; font-size:16px; }\n  .selected { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;This paragraph is black and is the first paragraph.&lt;\/p&gt;\n  &lt;p class=\"selected\"&gt;This paragraph is red and is the second paragraph.&lt;\/p&gt;\n\n  &lt;div id=\"result1\"&gt;First paragraph has selected class: &lt;\/div&gt;\n  &lt;div id=\"result2\"&gt;Second paragraph has selected class: &lt;\/div&gt;\n  &lt;div id=\"result3\"&gt;At least one paragraph has selected class: &lt;\/div&gt;\n&lt;script&gt;\n$(\"div#result1\").append($(\"p:first\").hasClass(\"selected\").toString());\n$(\"div#result2\").append($(\"p:last\").hasClass(\"selected\").toString());\n$(\"div#result3\").append($(\"p\").hasClass(\"selected\").toString());\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.hasData\/","title":"jQuery.hasData","description":"\n\njQuery.hasData( element ) Returns: Boolean\n\n\nDescription: Determine whether an element has any jQuery data associated with it.\n\n\nversion added: 1.5jQuery.hasData( element )\nelementA DOM element to be checked for data.\n\n\nThe jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If no data is associated with an element (there is no data object at all or the data object is empty), the method returns false; otherwise it returns true.\nThe primary advantage of jQuery.hasData(element) is that it does not create and associate a data object with the element if none currently exists. In contrast, jQuery.data(element) always returns a data object to the caller, creating one if no data object previously existed.\n\nNote that jQuery's event system uses the jQuery data API to store event handlers. Therefore, binding an event to an element using .on(), .bind(), .live(), .delegate(), or one of the shorthand event methods also associates a data object with that element.\n\n\nExample:\n\nSet data on an element and see the results of hasData.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Results: &lt;\/p&gt;\n&lt;script&gt;\nvar $p = jQuery(\"p\"), p = $p[0];\n$p.append(jQuery.hasData(p)+\" \"); \/* false *\/\n\n$.data(p, \"testing\", 123);\n$p.append(jQuery.hasData(p)+\" \"); \/* true*\/\n\n$.removeData(p, \"testing\");\n$p.append(jQuery.hasData(p)+\" \"); \/* false *\/\n\n$p.on('click', function() {});\n$p.append(jQuery.hasData(p)+\" \"); \/* true *\/\n\n$p.off('click');\n$p.append(jQuery.hasData(p)+\" \"); \/* false *\/\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/header-selector\/","title":":header Selector","description":"\n\nheader  selector\n\n\nversion added: 1.2jQuery(':header')\nDescription: Selects all elements that are headers, like h1, h2, h3 and so on.\nAdditional Notes:Because :header is a jQuery extension and not part of the CSS specification, queries using :header cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :header to select elements, first select the elements using a pure CSS selector, then use .filter(\":header\").Example:\n\nAdds a background and text color to all the headers on the page.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { font-size: 10px; font-family: Arial; } \n  h1, h2 { margin: 3px 0; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Header 1&lt;\/h1&gt;\n\n  &lt;p&gt;Contents 1&lt;\/p&gt;\n  &lt;h2&gt;Header 2&lt;\/h2&gt;\n  &lt;p&gt;Contents 2&lt;\/p&gt;\n&lt;script&gt;$(\":header\").css({ background:'#CCC', color:'blue' });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/height\/","title":"height","description":"\nContents:\n\n\nheight() .height()\n              \n\n\nheight( value \u00a0) \n.height( value )\n              \n.height( function(index, height) )\n              \n\n\n\n\n\n.height() Returns: Integer\n\n\nDescription: Get the current computed height for the first element in the set of matched elements.\n\nversion added: 1.0.height()\n\nThe difference between .css('height') and .height() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .height() method is recommended when an element's height needs to be used in a mathematical calculation.\n\nThis method is also able to find the height of the window and document.\n$(window).height();   \/\/ returns height of browser viewport\n$(document).height(); \/\/ returns height of HTML document\nNote that .height() will always return the content height, regardless of the value of the CSS box-sizing property.\nNote: Although style and script tags will report a value for .width() or height() when absolutely positioned and given display:block, it is strongly discouraged to call those methods on these tags. In addition to being a bad practice, the results may also prove unreliable.\n\nExample:\n\nShow various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { background:yellow; }\n  button { font-size:12px; margin:2px; }\n  p { width:150px; border:1px red solid; }\n  div { color:red; font-weight:bold; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"getp\"&gt;Get Paragraph Height&lt;\/button&gt;\n  &lt;button id=\"getd\"&gt;Get Document Height&lt;\/button&gt;\n  &lt;button id=\"getw\"&gt;Get Window Height&lt;\/button&gt;\n\n  &lt;div&gt;&amp;nbsp;&lt;\/div&gt;\n  &lt;p&gt;\n    Sample paragraph to test height\n  &lt;\/p&gt;\n&lt;script&gt;\n    function showHeight(ele, h) {\n      $(\"div\").text(\"The height for the \" + ele + \n                    \" is \" + h + \"px.\");\n    }\n    $(\"#getp\").click(function () { \n      showHeight(\"paragraph\", $(\"p\").height()); \n    });\n    $(\"#getd\").click(function () { \n      showHeight(\"document\", $(document).height()); \n    });\n    $(\"#getw\").click(function () { \n      showHeight(\"window\", $(window).height()); \n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.height( value ) Returns: jQuery\n\n\nDescription: Set the CSS height of every matched element.\n\n\n\nversion added: 1.0.height( value )\nvalueAn integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).\n\n\n\nversion added: 1.4.1.height( function(index, height) )\nfunction(index, height)A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, this refers to the current element in the set.\n\n\n\nWhen calling .height(value), the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, a valid CSS measurement must be provided for the height (such as 100px, 50%, or auto). Note that in modern browsers, the CSS height property does not include padding, border, or margin.\nIf no explicit unit was specified (like 'em' or '%') then \"px\" is concatenated to the value.\nNote that .height(value) sets the height of the box in accordance with the CSS box-sizing property. Changing this property to border-box will cause this function to change the outerHeight of the box instead of the content height.\n\nExample:\n\nTo set the height of each div on click to 30px plus a color change.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { width:50px; height:70px; float:left; margin:5px;\n        background:rgb(255,140,0); cursor:pointer; }  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"div\").one('click', function () {\n      $(this).height(30)\n             .css({cursor:\"auto\", backgroundColor:\"green\"});\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/hidden-selector\/","title":":hidden Selector","description":"\n\nhidden  selector\n\n\nversion added: 1.0jQuery(':hidden')\nDescription: Selects all elements that are hidden.\n\nElements can be considered hidden for several reasons:\n\nThey have a CSS display value of none.\nThey are form elements with type=\"hidden\".\nTheir width and height are explicitly set to 0.\nAn ancestor element is hidden, so the element is not shown on the page.\n\nElements with visibility: hidden or opacity: 0 are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start of the animation.\nHow :hidden is determined was changed in jQuery 1.3.2. An element is assumed to be hidden if it or any of its parents consumes no space in the document. CSS visibility isn't taken into account (therefore $(elem).css('visibility','hidden').is(':hidden') == false). The release notes outline the changes in more detail.\n\nAdditional Notes:Because :hidden is a jQuery extension and not part of the CSS specification, queries using :hidden cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :hidden to select elements, first select the elements using a pure CSS selector, then use .filter(\":hidden\").Example:\n\nShows all hidden divs and counts hidden inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:70px; height:40px; background:#ee77ff; margin:5px; float:left; }\n  span { display:block; clear:left; color:red; }\n  .starthidden { display:none; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div style=\"display:none;\"&gt;Hider!&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div class=\"starthidden\"&gt;Hider!&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;form&gt;\n    &lt;input type=\"hidden\" \/&gt;\n\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n  &lt;\/form&gt;\n  &lt;span&gt;\n\n  &lt;\/span&gt;\n&lt;script&gt;\n\/\/ in some browsers :hidden includes head, title, script, etc...\nvar hiddenEls = $(\"body\").find(\":hidden\").not(\"script\");\n\n$(\"span:first\").text(\"Found \" + hiddenEls.length + \" hidden elements total.\");\n$(\"div:hidden\").show(3000);\n$(\"span:last\").text(\"Found \" + $(\"input:hidden\").length + \" hidden inputs.\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.holdReady\/","title":"jQuery.holdReady","description":"\n\njQuery.holdReady( hold ) Returns: undefined\n\n\nDescription: Holds or releases the execution of jQuery's ready event.\n\n\nversion added: 1.6jQuery.holdReady( hold )\nholdIndicates whether the ready hold is being requested or released\n\n\nThe $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the &lt;head&gt; immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect. \nTo delay the ready event, first call $.holdReady(true). When the ready event should be released to execute, call $.holdReady(false). Note that multiple holds can be put on the ready event, one for each $.holdReady(true) call. The ready event will not actually fire until all holds have been released with a corresponding number of $.holdReady(false) calls and the normal document ready conditions are met. (See ready for more information.)\n\nExample:\n\nDelay the ready event until a custom plugin has loaded.\n\n$.holdReady(true);\n$.getScript(\"myplugin.js\", function() {\n     $.holdReady(false);\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/hide\/","title":"hide","description":"\n\n.hide(  ) Returns: jQuery\n\n\nDescription: Hide the matched elements.\n\n\nversion added: 1.0.hide()\n\n\nversion added: 1.0.hide( duration [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.hide(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nWith no parameters, the .hide() method is the simplest way to hide an element:\n$('.target').hide();\n\nThe matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling .css('display', 'none'), except that the value of the display property is saved in jQuery's data cache so that display can later be restored to its initial value. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline.\nWhen a duration is provided, .hide() becomes an animation method. The .hide() method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0, the display style property is set to none to ensure that the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWith the element initially shown, we can hide it slowly:\n$('#clickme').click(function() {\n  $('#book').hide('slow', function() {\n    alert('Animation complete.');\n  });\n});\n \n   \n  \n  \n  \n\n\nAdditional Notes:All jQuery effects, including .hide(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Examples:\n\n\nExample: Hides all paragraphs then the link on click.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;a href=\"#\"&gt;Click to hide me too&lt;\/a&gt;\n  &lt;p&gt;Here is another paragraph&lt;\/p&gt;\n&lt;script&gt;\n\n    $(\"p\").hide();\n    $(\"a\").click(function ( event ) {\n      event.preventDefault();\n      $(this).hide();\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:#dad; font-weight:bold; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Hide 'em&lt;\/button&gt;\n\n  &lt;p&gt;Hiya&lt;\/p&gt;\n  &lt;p&gt;Such interesting text, eh?&lt;\/p&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      $(\"p\").hide(\"slow\");\n    });    \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { background:#def3ca; padding:3px; float:left; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"hidr\"&gt;Hide&lt;\/button&gt;\n  &lt;button id=\"showr\"&gt;Show&lt;\/button&gt;\n  &lt;div&gt;\n\n    &lt;span&gt;Once&lt;\/span&gt; &lt;span&gt;upon&lt;\/span&gt; &lt;span&gt;a&lt;\/span&gt; \n    &lt;span&gt;time&lt;\/span&gt; &lt;span&gt;there&lt;\/span&gt; &lt;span&gt;were&lt;\/span&gt; \n    &lt;span&gt;three&lt;\/span&gt; &lt;span&gt;programmers...&lt;\/span&gt;\n\n  &lt;\/div&gt;\n&lt;script&gt;\n    $(\"#hidr\").click(function () {\n      $(\"span:last-child\").hide(\"fast\", function () {\n        \/\/ use callee so don't have to name the function\n        $(this).prev().hide(\"fast\", arguments.callee); \n      });\n    });\n    $(\"#showr\").click(function () {\n      $(\"span\").show(2000);\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background:#ece023; width:30px; \n        height:40px; margin:2px; float:left; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    for (var i = 0; i &lt; 5; i++) {\n      $(\"&lt;div&gt;\").appendTo(document.body);\n    }\n    $(\"div\").click(function () {\n      $(this).hide(2000, function () {\n        $(this).remove();\n      });\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/hover\/","title":"hover","description":"\nContents:\n\n\nhover( handlerIn(eventObject) , handlerOut(eventObject) \u00a0) .hover( handlerIn(eventObject), handlerOut(eventObject) )\n              \n\n\nhover( handlerInOut(eventObject) \u00a0) .hover( handlerInOut(eventObject) )\n              \n\n\n\n\n.hover( handlerIn(eventObject), handlerOut(eventObject) ) Returns: jQuery\n\n\nDescription: Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.\n\n\nversion added: 1.0.hover( handlerIn(eventObject), handlerOut(eventObject) )\nhandlerIn(eventObject)A function to execute when the mouse pointer enters the element.\nhandlerOut(eventObject)A function to execute when the mouse pointer leaves the element.\n\n\nThe .hover() method binds handlers for both mouseenter and mouseleave events. You can use it to simply apply behavior to an element during the time the mouse is within the element.\nCalling $(selector).hover(handlerIn, handlerOut) is shorthand for:\n$(selector).mouseenter(handlerIn).mouseleave(handlerOut);\nSee the discussions for .mouseenter() and .mouseleave() for more details.\n\nExamples:\n\n\nExample: To add a special style to list items that are being hovered over, try:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  ul { margin-left:20px; color:blue; }\n  li { cursor:default; }\n  span { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Milk&lt;\/li&gt;\n    &lt;li&gt;Bread&lt;\/li&gt;\n    &lt;li class='fade'&gt;Chips&lt;\/li&gt;\n\n    &lt;li class='fade'&gt;Socks&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;script&gt;\n$(\"li\").hover(\n  function () {\n    $(this).append($(\"&lt;span&gt; ***&lt;\/span&gt;\"));\n  }, \n  function () {\n    $(this).find(\"span:last\").remove();\n  }\n);\n\n\n\n\/\/li with fade class\n$(\"li.fade\").hover(function(){$(this).fadeOut(100);$(this).fadeIn(500);});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To add a special style to table cells that are being hovered over, try:\n\n$(\"td\").hover(\n  function () {\n    $(this).addClass(\"hover\");\n  },\n  function () {\n    $(this).removeClass(\"hover\");\n  }\n);\n\n\nExample: To unbind the above example use:\n\n$(\"td\").unbind('mouseenter mouseleave');\n\n\n\n\n\n.hover( handlerInOut(eventObject) ) Returns: jQuery\n\n\nDescription: Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.\n\n\nversion added: 1.4.hover( handlerInOut(eventObject) )\nhandlerInOut(eventObject)A function to execute when the mouse pointer enters or leaves the element.\n\n\nThe .hover() method, when passed a single function, will execute that handler for both mouseenter and mouseleave events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the event.type.\nCalling $(selector).hover(handlerInOut) is shorthand for:\n$(selector).bind(\"mouseenter mouseleave\", handlerInOut);\nSee the discussions for .mouseenter() and .mouseleave() for more details.\n\nExample:\n\nSlide the next sibling LI up or down on hover, and toggle a class.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  ul { margin-left:20px; color:blue; }\n  li { cursor:default; }\n  li.active { background:black;color:white; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Milk&lt;\/li&gt;\n    &lt;li&gt;White&lt;\/li&gt;\n    &lt;li&gt;Carrots&lt;\/li&gt;\n    &lt;li&gt;Orange&lt;\/li&gt;\n    &lt;li&gt;Broccoli&lt;\/li&gt;\n    &lt;li&gt;Green&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;script&gt;\n$(\"li\")\n.filter(\":odd\")\n.hide()\n .end()\n.filter(\":even\")\n.hover(\n  function () {\n    $(this).toggleClass(\"active\")\n      .next().stop(true, true).slideToggle();\n  }\n);\n\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/id-selector\/","title":"ID Selector (&#8220;#id&#8221;)","description":"\n\nid  selector\n\n\nversion added: 1.0jQuery('#id')\n\nid\nAn ID to search for, specified via the id attribute of an element.\n\nDescription: Selects a single element with the given id attribute. \n\nFor id selectors, jQuery uses the JavaScript function document.getElementById(), which is extremely efficient. When another selector is attached to the id selector, such as h2#pageTitle, jQuery performs an additional check before identifying the element as a match.\nAs always, remember that as a developer, your time is typically the most valuable resource. Do not focus on optimization of selector speed unless it is clear that performance needs to be improved.\nEach id value must be used only once within a document. If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM. This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.\nIf the id contains characters like periods or colons you have to escape those characters with backslashes.\n\nExamples:\n\n\nExample: Finds the element with the id \"myDiv\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div {\n    width: 90px;\n    height: 90px;\n    float:left;\n    padding: 5px;\n    margin: 5px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"notMe\"&gt;&lt;p&gt;id=\"notMe\"&lt;\/p&gt;&lt;\/div&gt;\n\n  &lt;div id=\"myDiv\"&gt;id=\"myDiv\"&lt;\/div&gt;\n&lt;script&gt;$(\"#myDiv\").css(\"border\",\"3px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Finds the element with the id \"myID.entry[1]\".  See how certain characters must be escaped with backslashes.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div {\n    width: 300px;\n    float:left;\n    padding: 2px;\n    margin: 3px;\n    background-color: #EEEEEE;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"myID.entry[0]\"&gt;id=\"myID.entry[0]\"&lt;\/div&gt;\n\n  &lt;div id=\"myID.entry[1]\"&gt;id=\"myID.entry[1]\"&lt;\/div&gt;\n  &lt;div id=\"myID.entry[2]\"&gt;id=\"myID.entry[2]\"&lt;\/div&gt;\n&lt;script&gt;$(\"#myID\\\\.entry\\\\[1\\\\]\").css(\"border\",\"3px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/image-selector\/","title":":image Selector","description":"\n\nimage  selector\n\n\nversion added: 1.0jQuery(':image')\nDescription: Selects all elements of type image.\n:image is equivalent to [type=\"image\"]\nAdditional Notes:Because :image is a jQuery extension and not part of the CSS specification, queries using :image cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"image\"] instead.Example:\n\nFinds all image inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n    var input = $(\"input:image\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/html\/","title":"html","description":"\nContents:\n\n\nhtml() .html()\n              \n\n\nhtml( htmlString \u00a0) \n.html( htmlString )\n              \n.html( function(index, oldhtml) )\n              \n\n\n\n\n\n.html() Returns: String\n\n\nDescription: Get the HTML contents of the first element in the set of matched elements.\n\nversion added: 1.0.html()\n\nThis method is not available on XML documents.\nIn an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code:\n$('div.demo-container').html();\nIn order for the following &lt;div&gt;'s content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document:\n&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;\/div&gt;\n&lt;\/div&gt;\nThe result would look like this:\n&lt;div class=\"demo-box\"&gt;Demonstration Box&lt;\/div&gt;\nThis method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.\n\nExample:\n\nClick a paragraph to convert it from html to text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin:8px; font-size:20px; color:blue; \n      cursor:pointer; }\n  b { text-decoration:underline; }\n  button { cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n\n    &lt;b&gt;Click&lt;\/b&gt; to change the &lt;span id=\"tag\"&gt;html&lt;\/span&gt;\n  &lt;\/p&gt;\n  &lt;p&gt;\n\n    to a &lt;span id=\"text\"&gt;text&lt;\/span&gt; node.\n  &lt;\/p&gt;\n  &lt;p&gt;\n    This &lt;button name=\"nada\"&gt;button&lt;\/button&gt; does nothing.\n  &lt;\/p&gt;\n&lt;script&gt;\n    $(\"p\").click(function () {\n      var htmlStr = $(this).html();\n      $(this).text(htmlStr);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.html( htmlString ) Returns: jQuery\n\n\nDescription: Set the HTML contents of each element in the set of matched elements.\n\n\n\nversion added: 1.0.html( htmlString )\nhtmlStringA string of HTML to set as the content of each matched element.\n\n\n\nversion added: 1.4.html( function(index, oldhtml) )\nfunction(index, oldhtml)A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.\n\n\n\nThe .html() method is not available in XML documents. \nWhen .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Consider the following HTML:\n&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;\/div&gt;\n&lt;\/div&gt;\nThe content of &lt;div class=\"demo-container\"&gt; can be set like this:\n$('div.demo-container')\n  .html('&lt;p&gt;All new content. &lt;em&gt;You bet!&lt;\/em&gt;&lt;\/p&gt;');\nThat line of code will replace everything inside &lt;div class=\"demo-container\"&gt;:\n&lt;div class=\"demo-container\"&gt;\n  &lt;p&gt;All new content. &lt;em&gt;You bet!&lt;\/em&gt;&lt;\/p&gt;\n&lt;\/div&gt;\nAs of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function.\n$('div.demo-container').html(function() {\n  var emph = '&lt;em&gt;' + $('p').length + ' paragraphs!&lt;\/em&gt;';\n  return '&lt;p&gt;All new content for ' + emph + '&lt;\/p&gt;';\n});\nGiven a document with six paragraphs, this example will set the HTML of &lt;div class=\"demo-container\"&gt; to &lt;p&gt;All new content for &lt;em&gt;6 paragraphs!&lt;\/em&gt;&lt;\/p&gt;.\nThis method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer.\n\nExamples:\n\n\nExample: Add some html to each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  .red { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;Hello&lt;\/span&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"div\").html(\"&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;\/b&gt;&lt;\/span&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Add some html to each div then immediately do further manipulations to the inserted html.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; font-size:18px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"div\").html(\"&lt;b&gt;Wow!&lt;\/b&gt; Such excitement...\");\n    $(\"div b\").append(document.createTextNode(\"!!!\"))\n              .css(\"color\", \"red\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.inArray\/","title":"jQuery.inArray","description":"\n\njQuery.inArray( value, array [, fromIndex]  ) Returns: Number\n\n\nDescription: Search for a specified value within an array and return its index (or -1 if not found).\n\n\nversion added: 1.2jQuery.inArray( value, array [, fromIndex] )\nvalueThe value to search for.\narrayAn array through which to search.\nfromIndexThe index of the array at which to begin the search. The default is 0, which will search the whole array.\n\n\nThe $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.\nBecause JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false), if we're checking for the presence of value within array, we need to check if it's not equal to (or greater than) -1.\n\nExample:\n\nReport the index of some elements in the array.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  span { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div&gt;\"John\" found at &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;div&gt;4 found at &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;div&gt;\"Karl\" not found, so &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;div&gt;\"Pete\" is in the array, but not at or after index 2, so &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;script&gt;var arr = [ 4, \"Pete\", 8, \"John\" ];\nvar $spans = $(\"span\");\n$spans.eq(0).text(jQuery.inArray(\"John\", arr));\n$spans.eq(1).text(jQuery.inArray(4, arr));\n$spans.eq(2).text(jQuery.inArray(\"Karl\", arr));\n$spans.eq(3).text(jQuery.inArray(\"Pete\", arr, 2));\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/index\/","title":"index","description":"\n\n.index(  ) Returns: Number\n\n\nDescription: Search for a given element from among the matched elements.\n\n\nversion added: 1.4.index()\n\n\nversion added: 1.4.index( selector )\nselectorA selector representing a jQuery collection in which to look for an element.\n\n\n\nversion added: 1.0.index( element )\nelementThe DOM element or first element within the jQuery object to look for.\n\n\n\nReturn Values\nIf no argument is passed to the .index() method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.\nIf .index() is called on a collection of elements and a DOM element or jQuery object is passed in, .index() returns an integer indicating the position of the passed element relative to the original collection.\nIf a selector string is passed as an argument, .index() returns an integer indicating the position of the original element relative to the elements matched by the selector. If the element is not found, .index() will return -1.\nDetail\nThe complementary operation to .get(), which accepts an index and returns a DOM node, .index() can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:\n\n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we retrieve one of the three list items (for example, through a DOM function or as the context to an event handler), .index() can search for this list item within the set of matched elements:\n\nvar listItem = document.getElementById('bar');\nalert('Index: ' + $('li').index(listItem));\nWe get back the zero-based position of the list item:\n\nIndex: 1\nSimilarly, if we retrieve a jQuery object consisting of one of the three list items, .index() will search for that list item:\n\nvar listItem = $('#bar');\nalert('Index: ' + $('li').index(listItem));\n\nWe get back the zero-based position of the list item:\nIndex: 1\nNote that if the jQuery collection used as the .index() method's argument contains more than one element, the first element within the matched set of elements will be used.\n\nvar listItems = $('li:gt(0)');\nalert('Index: ' + $('li').index(listItems));\n\nWe get back the zero-based position of the first list item within the matched set:\nIndex: 1\nIf we use a string as the .index() method's argument, it is interpreted as a jQuery selector string. The first element among the object's matched elements which also matches this selector is located.\n\nvar listItem = $('#bar');\nalert('Index: ' + listItem.index('li'));\n\nWe get back the zero-based position of the list item:\nIndex: 1\nIf we omit the argument, .index() will return the position of the first element within the set of matched elements in relation to its siblings:\nalert('Index: ' + $('#bar').index();\nAgain, we get back the zero-based position of the list item:\nIndex: 1\n\nExamples:\n\n\nExample: On click, returns the index (based zero) of that div in the page.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { background:yellow; margin:5px; }\nspan { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;Click a div!&lt;\/span&gt;\n&lt;div&gt;First div&lt;\/div&gt;\n&lt;div&gt;Second div&lt;\/div&gt;\n&lt;div&gt;Third div&lt;\/div&gt;\n&lt;script&gt;\n$(\"div\").click(function () {\n  \/\/ this is the dom element clicked\n  var index = $(\"div\").index(this);\n  $(\"span\").text(\"That was div index #\" + index);\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns the index for the element with ID bar.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { font-weight: bold; color: #090; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;var listItem = $('#bar');\n    $('div').html( 'Index: ' + $('li').index(listItem) );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns the index for the first item in the jQuery collection.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { font-weight: bold; color: #090; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;var listItems = $('li:gt(0)');\n$('div').html( 'Index: ' + $('li').index(listItems) );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { font-weight: bold; color: #090; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$('div').html('Index: ' +  $('#bar').index('li') );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns the index for the element with ID bar in relation to its siblings.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { font-weight: bold; color: #090; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;var barIndex = $('#bar').index();\n$('div').html( 'Index: ' +  barIndex );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns -1, as there is no element with ID foobar.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { font-weight: bold; color: #090; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;\/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;\/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;var foobar = $(\"li\").index( $('#foobar') );\n$('div').html('Index: ' + foobar);&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/input-selector\/","title":":input Selector","description":"\n\ninput  selector\n\n\nversion added: 1.0jQuery(':input')\nDescription: Selects all input, textarea, select and button elements.\nThe :input selector basically selects all form controls.\nAdditional Notes:Because :input is a jQuery extension and not part of the CSS specification, queries using :input cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :input to select elements, first select the elements using a pure CSS selector, then use .filter(\":input\").Example:\n\nFinds all input elements.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:25px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;\/option&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div id=\"messages\"&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var allInputs = $(\":input\");\n    var formChildren = $(\"form &gt; *\");\n    $(\"#messages\").text(\"Found \" + allInputs.length + \" inputs and the form has \" +\n                             formChildren.length + \" children.\");\n            \n    \/\/ so it won't submit\n    $(\"form\").submit(function () { return false; }); \n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/innerHeight\/","title":"innerHeight","description":"\n\n.innerHeight() Returns: Integer\n\n\nDescription: Get the current computed height for the first element in the set of matched elements, including padding but not border.\n\nversion added: 1.2.6.innerHeight()\n\nThis method returns the height of the element, including top and bottom padding, in pixels.\nThis method is not applicable to window and document objects; for these, use .height() instead.\n\n\nExample:\n\nGet the innerHeight of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { margin:10px;padding:5px;border:2px solid #666; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n$(\"p:last\").text( \"innerHeight:\" + p.innerHeight() );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/insertAfter\/","title":"insertAfter","description":"\n\n.insertAfter( target ) Returns: jQuery\n\n\nDescription: Insert every element in the set of matched elements after the target.\n\n\nversion added: 1.0.insertAfter( target )\ntargetA selector, element, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.\n\n\nThe .after() and .insertAfter() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can create content and insert it after several elements at once:\n$('&lt;p&gt;Test&lt;\/p&gt;').insertAfter('.inner');\nEach inner &lt;div&gt; element gets this new content:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n&lt;\/div&gt;\nWe can also select an element on the page and insert it after another:\n$('h2').insertAfter($('.container'));\nIf an element selected this way is inserted elsewhere, it will be moved after the target (not cloned):\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\n&lt;h2&gt;Greetings&lt;\/h2&gt;\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.\n\nExample:\n\nInserts all paragraphs after an element with id of \"foo\". Same as $(\"#foo\").after(\"p\")\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;#foo { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt; is what I said... &lt;\/p&gt;&lt;div id=\"foo\"&gt;FOO!&lt;\/div&gt;\n&lt;script&gt;$(\"p\").insertAfter(\"#foo\"); \/\/ check after() examples&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/insertBefore\/","title":"insertBefore","description":"\n\n.insertBefore( target ) Returns: jQuery\n\n\nDescription: Insert every element in the set of matched elements before the target.\n\n\nversion added: 1.0.insertBefore( target )\ntargetA selector, element, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.\n\n\nThe .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can create content and insert it before several elements at once:\n$('&lt;p&gt;Test&lt;\/p&gt;').insertBefore('.inner');\nEach inner &lt;div&gt; element gets this new content:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;p&gt;Test&lt;\/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can also select an element on the page and insert it before another:\n$('h2').insertBefore($('.container'));\nIf an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.\n\nExample:\n\nInserts all paragraphs before an element with id of \"foo\". Same as $(\"#foo\").before(\"p\")\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;#foo { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"foo\"&gt;FOO!&lt;\/div&gt;&lt;p&gt;I would like to say: &lt;\/p&gt;\n&lt;script&gt;$(\"p\").insertBefore(\"#foo\"); \/\/ check before() examples&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isArray\/","title":"jQuery.isArray","description":"\n\njQuery.isArray( obj ) Returns: boolean\n\n\nDescription: Determine whether the argument is an array.\n\n\nversion added: 1.3jQuery.isArray( obj )\nobjObject to test whether or not it is an array.\n\n$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).\nExample:\n\nFinds out if the parameter is an array.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Is [] an Array? &lt;b&gt;&lt;\/b&gt;\n&lt;script&gt;$(\"b\").append( \"\" + $.isArray([]) );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/is\/","title":"is","description":"\n\n.is( selector ) Returns: Boolean\n\n\nDescription: Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n\n\n\nversion added: 1.0.is( selector )\nselectorA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.6.is( function(index) )\nfunction(index)A function used as a test for the set of elements. It accepts one argument, index, which is the element's index in the jQuery collection.Within the function, this refers to the current DOM element. \n\n\n\nversion added: 1.6.is( jQuery object )\njQuery objectAn existing jQuery object to match the current set of elements against.\n\n\n\nversion added: 1.6.is( element )\nelementAn element to match the current set of elements against.\n\n\n\nUnlike other filtering methods, .is() does not create a new jQuery object. Instead, it allows you to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.\nSuppose you have a list, with two of its items containing a child element:\n\n&lt;ul&gt;\n  &lt;li&gt;list &lt;strong&gt;item 1&lt;\/strong&gt;&lt;\/li&gt;\n  &lt;li&gt;&lt;span&gt;list item 2&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n&lt;\/ul&gt;\n\nYou can attach a click handler to the &lt;ul&gt; element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:\n$(\"ul\").click(function(event) {\n  var $target = $(event.target);\n  if ( $target.is(\"li\") ) {\n    $target.css(\"background-color\", \"red\");\n  }\n});\nNow, when the user clicks on the word \"list\" in the first item or anywhere in the third item, the clicked list item will be given a red background. However, when the user clicks on item 1 in the first item or anywhere in the second item, nothing will occur, because in those cases the target of the event would be &lt;strong&gt; or &lt;span&gt;, respectively.\n\nPrior to jQuery 1.7, in selector strings with positional selectors such as :first, :gt(), or :even, the positional filtering is done against the jQuery object passed to .is(), not against the containing document. So for the HTML shown above, an expression such as $(\"li:first\").is(\"li:last\") returns true, but $(\"li:first-child\").is(\"li:last-child\") returns false. In addition, a bug in Sizzle prevented many positional selectors from working properly. These two factors made positional selectors almost unusable in filters.\nStarting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as $(\"li:first\").is(\"li:last\") returns false. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.\nUsing a Function\nThe second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns true, .is() returns true as well. For example, given a somewhat more involved HTML snippet:\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;\/strong&gt; item 1 - one strong tag&lt;\/li&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;\/strong&gt; item &lt;strong&gt;2&lt;\/strong&gt; -\n    two &lt;span&gt;strong tags&lt;\/span&gt;&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nYou can attach a click handler to every &lt;li&gt; that evaluates the number of &lt;strong&gt; elements within the clicked &lt;li&gt; at that time like so:\n\n$(\"li\").click(function() {\n  var $li = $(this),\n    isWithTwo = $li.is(function() {\n      return $('strong', this).length === 2;\n    });\n  if ( isWithTwo ) {\n    $li.css(\"background-color\", \"green\");\n  } else {\n    $li.css(\"background-color\", \"red\");\n  }\n});\n\n\nExamples:\n\n\nExample: Shows a few ways is() can be used inside an event handler.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:60px; height:60px; margin:5px; float:left;\n      border:4px outset; background:green; text-align:center; \n      font-weight:bolder; cursor:pointer; }\n  .blue { background:blue; }\n  .red { background:red; }\n  span { color:white; font-size:16px; }\n  p { color:red; font-weight:bolder; background:yellow; \n      margin:3px; clear:left; display:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;div class=\"blue\"&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div class=\"red\"&gt;&lt;\/div&gt;\n\n&lt;div&gt;&lt;br\/&gt;&lt;span&gt;Peter&lt;\/span&gt;&lt;\/div&gt;\n&lt;div class=\"blue\"&gt;&lt;\/div&gt;\n&lt;p&gt;&amp;nbsp;&lt;\/p&gt;\n&lt;script&gt;\n  $(\"div\").one('click', function () {\n    if ($(this).is(\":first-child\")) {\n      $(\"p\").text(\"It's the first div.\");\n    } else if ($(this).is(\".blue,.red\")) {\n      $(\"p\").text(\"It's a blue or red div.\");\n    } else if ($(this).is(\":contains('Peter')\")) {\n      $(\"p\").text(\"It's Peter!\");\n    } else {\n      $(\"p\").html(\"It's nothing &lt;em&gt;special&lt;\/em&gt;.\");\n    }\n    $(\"p\").hide().slideDown(\"slow\");\n    $(this).css({\"border-style\": \"inset\", cursor:\"default\"});\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns true, because the parent of the input is a form element.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { color:red; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;&lt;input type=\"checkbox\" \/&gt;&lt;\/form&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n  var isFormParent = $(\"input[type='checkbox']\").parent().is(\"form\");\n  $(\"div\").text(\"isFormParent = \" + isFormParent);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns false, because the parent of the input is a p element.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { color:red; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;&lt;p&gt;&lt;input type=\"checkbox\" \/&gt;&lt;\/p&gt;&lt;\/form&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n  var isFormParent = $(\"input[type='checkbox']\").parent().is(\"form\");\n  $(\"div\").text(\"isFormParent = \" + isFormParent);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;li { cursor:pointer; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul id=\"browsers\"&gt;\n  &lt;li&gt;Chrome&lt;\/li&gt;\n  &lt;li&gt;Safari&lt;\/li&gt;\n  &lt;li&gt;Firefox&lt;\/li&gt;\n  &lt;li&gt;Opera&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;script&gt;\n  var $alt = $(\"#browsers li:nth-child(2n)\").css(\"background\", \"#00FFFF\");\n  $('li').click(function() {\n    var $li = $(this);\n    if ( $li.is( $alt ) ) {\n      $li.slideUp();\n    } else {\n      $li.css(\"background\", \"red\");\n    }\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;li { cursor:pointer; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul id=\"browsers\"&gt;\n  &lt;li&gt;Chrome&lt;\/li&gt;\n  &lt;li&gt;Safari&lt;\/li&gt;\n  &lt;li&gt;Firefox&lt;\/li&gt;\n  &lt;li&gt;Opera&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;script&gt;\n  var $alt = $(\"#browsers li:nth-child(2n)\").css(\"background\", \"#00FFFF\");\n  $('li').click(function() {\n    if ( $alt.is( this ) ) {\n      $(this).slideUp();\n    } else {\n      $(this).css(\"background\", \"red\");\n    }\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isNumeric\/","title":"jQuery.isNumeric","description":"\n\njQuery.isNumeric( value ) Returns: Boolean\n\n\nDescription: Determines whether its argument is a number.\n\n\nversion added: 1.7jQuery.isNumeric( value )\nvalueThe value to be tested.\n\nThe $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.\nExample:\n\nSample return values of $.isNumeric with various inputs.\n\n$.isNumeric(\"-10\");  \/\/ true\n$.isNumeric(16);     \/\/ true\n$.isNumeric(0xFF);   \/\/ true\n$.isNumeric(\"0xFF\"); \/\/ true\n$.isNumeric(\"8e5\");  \/\/ true (exponential notation string)\n$.isNumeric(3.1415); \/\/ true\n$.isNumeric(+10);    \/\/ true\n$.isNumeric(0144);   \/\/ true (octal integer literal)\n$.isNumeric(\"\");     \/\/ false\n$.isNumeric({});     \/\/ false (empty object)\n$.isNumeric(NaN);    \/\/ false\n$.isNumeric(null);   \/\/ false\n$.isNumeric(true);   \/\/ false\n$.isNumeric(Infinity); \/\/ false\n$.isNumeric(undefined); \/\/ false\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isFunction\/","title":"jQuery.isFunction","description":"\n\njQuery.isFunction( obj ) Returns: boolean\n\n\nDescription: Determine if the argument passed is a Javascript function object. \n\n\nversion added: 1.2jQuery.isFunction( obj )\nobjObject to test whether or not it is a function.\n\nNote: As of jQuery 1.3, functions provided by the browser like alert() and DOM element methods like getAttribute() are not guaranteed to be detected as functions in browsers such as Internet Explorer.\nExamples:\n\n\nExample: Test a few parameter examples.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; margin:2px; font-size:14px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;div&gt;jQuery.isFunction(objs[0]) = &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;div&gt;jQuery.isFunction(objs[1]) = &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  &lt;div&gt;jQuery.isFunction(objs[2]) = &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  &lt;div&gt;jQuery.isFunction(objs[3]) = &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;div&gt;jQuery.isFunction(objs[4]) = &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  \n&lt;script&gt;\n    function stub() {\n    }\n    var objs = [\n          function () {},\n          { x:15, y:20 },\n          null,\n          stub,\n          \"function\"\n        ];\n\n    jQuery.each(objs, function (i) {\n      var isFunc = jQuery.isFunction(objs[i]);\n      $(\"span\").eq(i).text(isFunc);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Finds out if the parameter is a function.\n\n$.isFunction(function(){});\nResult:\ntrue\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/innerWidth\/","title":"innerWidth","description":"\n\n.innerWidth() Returns: Integer\n\n\nDescription: Get the current computed width for the first element in the set of matched elements, including padding but not border.\n\nversion added: 1.2.6.innerWidth()\n\nThis method returns the width of the element, including left and right padding, in pixels.\nThis method is not applicable to window and document objects; for these, use .width() instead.\n\n\nExample:\n\nGet the innerWidth of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { margin:10px;padding:5px;border:2px solid #666; } &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n$(\"p:last\").text( \"innerWidth:\" + p.innerWidth() );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isWindow\/","title":"jQuery.isWindow","description":"\n\njQuery.isWindow( obj ) Returns: boolean\n\n\nDescription: Determine whether the argument is a window.\n\n\nversion added: 1.4.3jQuery.isWindow( obj )\nobjObject to test whether or not it is a window.\n\nThis is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).\nExample:\n\nFinds out if the parameter is a window.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Is 'window' a window? &lt;b&gt;&lt;\/b&gt;\n&lt;script&gt;$(\"b\").append( \"\" + $.isWindow(window) );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isEmptyObject\/","title":"jQuery.isEmptyObject","description":"\n\njQuery.isEmptyObject( object ) Returns: Boolean\n\n\nDescription: Check to see if an object is empty (contains no properties).\n\n\nversion added: 1.4jQuery.isEmptyObject( object )\nobjectThe object that will be checked to see if it's empty.\n\nAs of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings\/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()\nExample:\n\nCheck an object to see if it's empty.\njQuery.isEmptyObject({}) \/\/ true\njQuery.isEmptyObject({ foo: \"bar\" }) \/\/ false\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery\/","title":"jQuery","description":"\nContents:\n\n\njQuery( selector [\u00a0, context\u00a0] \u00a0) \njQuery( selector [, context]  )\n              \njQuery( element )\n              \njQuery( object )\n              \njQuery( elementArray )\n              \njQuery( jQuery object )\n              \njQuery()\n              \n\n\n\njQuery( html [\u00a0, ownerDocument\u00a0] \u00a0) \njQuery( html [, ownerDocument]  )\n              \njQuery( html, props )\n              \n\n\n\njQuery( callback \u00a0) jQuery( callback )\n              \n\n\n\n\njQuery( selector [, context]  ) Returns: jQuery\n\n\nDescription: Accepts a string containing a CSS selector which is then used to match a set of elements.\n\n\n\nversion added: 1.0jQuery( selector [, context] )\nselectorA string containing a selector expression\ncontextA DOM Element, Document, or jQuery to use as context\n\n\n\nversion added: 1.0jQuery( element )\nelementA DOM element to wrap in a jQuery object.\n\n\n\nversion added: 1.0jQuery( object )\nobjectA plain object to wrap in a jQuery object.\n\n\n\nversion added: 1.0jQuery( elementArray )\nelementArrayAn array containing a set of DOM elements to wrap in a jQuery object.\n\n\n\nversion added: 1.0jQuery( jQuery object )\njQuery objectAn existing jQuery object to clone.\n\n\nversion added: 1.4jQuery()\n\n\nIn the first formulation listed above,  jQuery() \u2014 which can also be written as $() \u2014 searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:\n$('div.foo');\nSelector Context\nBy default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the  $() function. For example, to do a search within an event handler, the search can be restricted like so:\n\n$('div.foo').click(function() {\n  $('span', this).addClass('bar');\n});\n\nWhen the search for the span selector is restricted to the context of this, only spans within the clicked element will get the additional class.\nInternally, selector context is implemented with the .find() method, so  $('span', this) is equivalent to  $(this).find('span').\nUsing DOM elements\nThe second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A common use of this facility is to call jQuery methods on an element that has been passed to a callback function through the keyword this:\n\n$('div.foo').click(function() {\n  $(this).slideUp();\n});\n\nThis example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the this keyword as a bare DOM element, the element must be passed to the $() function before applying jQuery methods to it.\nXML data returned from an Ajax call can be passed to the $() function so individual elements of the XML structure can be retrieved using .find() and other DOM traversal methods.\n\n$.post('url.xml', function(data) {\n  var $child = $(data).find('child');\n})\n\nCloning jQuery Objects\nWhen a jQuery object is passed to the $() function, a clone of the object is created. This new jQuery object references the same DOM elements as the initial one.\nReturning an Empty Set\nAs of jQuery 1.4, calling the jQuery() method with no arguments returns an empty jQuery set (with a .length property of 0). In previous versions of jQuery, this would return a set containing the document node.\nWorking With Plain Objects\nAt present, the only operations supported on plain JavaScript objects wrapped in jQuery are: .data(),.prop(),.bind(), .unbind(),.trigger() and .triggerHandler(). The use of .data() (or any method requiring .data()) on a plain object will result in a new property on the object called jQuery{randomNumber} (eg. jQuery123456789).\n\n\/\/ define a plain object\nvar foo = {foo:'bar', hello:'world'};\n\n\/\/ wrap this with jQuery\nvar $foo = $(foo);\n\n\/\/ test accessing property values\nvar test1 = $foo.prop('foo'); \/\/ bar\n\n\/\/ test setting property values\n$foo.prop('foo', 'foobar');\nvar test2 = $foo.prop('foo'); \/\/ foobar\n\n\/\/ test using .data() as summarized above\n$foo.data('keyName', 'someValue');\nconsole.log($foo); \/\/ will now contain a jQuery{randomNumber} property\n\n\/\/ test binding an event name and triggering\n$foo.bind('eventName', function (){\n        console.log('eventName was called');\n});\n\n$foo.trigger('eventName'); \/\/ logs 'eventName was called'\n\nShould .trigger('eventName') be used, it will search for an 'eventName' property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, .triggerHandler('eventName') should be used instead.\n\n$foo.triggerHandler('eventName'); \/\/ also logs 'eventName was called'\n\n\nExamples:\n\n\nExample: Find all p elements that are children of a div element and apply a border to them.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;one&lt;\/p&gt; &lt;div&gt;&lt;p&gt;two&lt;\/p&gt;&lt;\/div&gt; &lt;p&gt;three&lt;\/p&gt;\n&lt;script&gt;\n  $(\"div &gt; p\").css(\"border\", \"1px solid gray\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find all inputs of type radio within the first form in the document.\n\n$(\"input:radio\", document.forms[0]);\n\n\nExample: Find all div elements within an XML document from an Ajax response.\n\n$(\"div\", xml.responseXML);\n\n\nExample: Set the background color of the page to black.\n\n$(document.body).css( \"background\", \"black\" );\n\n\nExample: Hide all the input elements within a form.\n\n$(myForm.elements).hide()\n\n\n\n\n\njQuery( html [, ownerDocument]  ) Returns: jQuery\n\n\nDescription: Creates DOM elements on the fly from the provided string of raw HTML.\n\n\n\nversion added: 1.0jQuery( html [, ownerDocument] )\nhtmlA string of HTML to create on the fly. Note that this parses HTML, not XML.\nownerDocumentA document in which the new elements will be created\n\n\n\nversion added: 1.4jQuery( html, props )\nhtmlA string defining a single, standalone, HTML element (e.g. &lt;div\/&gt; or &lt;div&gt;&lt;\/div&gt;).\npropsAn map of attributes, events, and methods to call on the newly-created element.\n\n\n\nCreating New Elements\nIf a string is passed as the parameter to $(), jQuery examines the string to see if it looks like HTML (i.e., it has &lt;tag ... &gt; somewhere within the string). If not, the string is interpreted as a selector expression, as explained above. But if the string appears to be an HTML snippet, jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery object is created and returned that refers to these elements. You can perform any of the usual jQuery methods on this object:\n$('&lt;p id=\"test\"&gt;My &lt;em&gt;new&lt;\/em&gt; text&lt;\/p&gt;').appendTo('body');\nIf the HTML is more complex than a single tag without attributes, as it is in the above example, the actual creation of the elements is handled by the browser's innerHTML mechanism. In most cases, jQuery creates a new &lt;div&gt; element and sets the innerHTML property of the element to the HTML snippet that was passed in. When the parameter has a single tag, such as  $('&lt;img\u00a0\/&gt;') or  $('&lt;a&gt;&lt;\/a&gt;'), jQuery creates the element using the native JavaScript createElement() function.\nWhen passing in complex HTML, some browsers may not generate a DOM that exactly replicates the HTML source provided. As mentioned, we use the browser's .innerHTML property to parse the passed HTML and insert it into the current document. During this process, some  browsers filter out certain elements such as  &lt;html&gt;,  &lt;title&gt;, or  &lt;head&gt; elements. As a result, the  elements inserted may not be representative of the original string  passed.\n Filtering isn't however just limited to these tags. For example, Internet Explorer prior to version 8 will also convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer.\nTo ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:\n$('&lt;a href=\"http:\/\/jquery.com\"&gt;&lt;\/a&gt;');\nAlternatively, jQuery allows XML-like tag syntax (with or without a space before the slash):\n$('&lt;a\/&gt;');\nTags that cannot contain elements may be quick-closed or not:\n$('&lt;img \/&gt;');\n$('&lt;input&gt;');\n\nWhen passing HTML to jQuery(), please also note that text nodes are not treated as DOM elements. With the exception of a few methods (such as .content()), they are generally otherwise ignored or removed. E.g:\n\nvar el = $('1&lt;br\/&gt;2&lt;br\/&gt;3'); \/\/ returns [&lt;br&gt;, \"2\", &lt;br&gt;] \nel  = $('1&lt;br\/&gt;2&lt;br\/&gt;3 &gt;'); \/\/ returns [&lt;br&gt;, \"2\", &lt;br&gt;, \"3 &amp;gt;\"]\n\nThis behaviour is expected. \nAs of jQuery 1.4, the second argument to jQuery() can accept a map consisting of a superset of the properties that can be passed to the .attr() method. Furthermore, any event type can be passed in, and the following jQuery methods can be called: val, css, html, text, data, width, height, or offset. The name \"class\" must be quoted in the map since it is a JavaScript reserved word, and \"className\" cannot be used since it is not the correct attribute name. \nNote: Internet Explorer will not allow you to create an input or button element and change its type; you must specify the type using '&lt;input type=\"checkbox\" \/&gt;' for example. A demonstration of this can be seen below:\nUnsupported in IE:\n\n$('&lt;input \/&gt;', {\n    type: 'text',\n    name: 'test'\n}).appendTo(\"body\");\n\nSupported workaround:\n\n$('&lt;input type=\"text\" \/&gt;').attr({\n    name: 'test'\n}).appendTo(\"body\");\n\n\nExamples:\n\n\nExample: Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.\n\n$(\"&lt;div&gt;&lt;p&gt;Hello&lt;\/p&gt;&lt;\/div&gt;\").appendTo(\"body\")\n\n\nExample: Create some DOM elements.\n\n$(\"&lt;div\/&gt;\", {\n  \"class\": \"test\",\n  text: \"Click me!\",\n  click: function(){\n    $(this).toggleClass(\"test\");\n  }\n}).appendTo(\"body\");\n\n\n\n\n\njQuery( callback ) Returns: jQuery\n\n\nDescription: Binds a function to be executed when the DOM has finished loading.\n\n\nversion added: 1.0jQuery( callback )\ncallbackThe function to execute when the DOM is ready.\n\nThis function behaves just like $(document).ready(), in that it should be used to wrap other $() operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.\nExamples:\n\n\nExample: Execute the function when the DOM is ready to be used.\n\n$(function(){\n   \/\/ Document is ready\n });\n\n\n\nExample: Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.\n\njQuery(function($) {\n    \/\/ Your code using failsafe $ alias here...\n  });\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isPlainObject\/","title":"jQuery.isPlainObject","description":"\n\njQuery.isPlainObject( object ) Returns: Boolean\n\n\nDescription: Check to see if an object is a plain object (created using \"{}\" or \"new Object\").\n\n\nversion added: 1.4jQuery.isPlainObject( object )\nobjectThe object that will be checked to see if it's a plain object.\n\n\nNote: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this,  $.isPlainObject() may evaluate inconsistently across browsers in certain instances.\nAn example of this is a test against document.location using $.isPlainObject() as follows:\n\nconsole.log($.isPlainObject(document.location));\n\nwhich throws an invalid pointer exception in IE8. With this in mind, it's important to be aware of any of the gotchas involved in using $.isPlainObject() against older browsers. Some basic example of use-cases that do function correctly cross-browser can be found below.\n\nExample:\n\nCheck an object to see if it's a plain object.\njQuery.isPlainObject({}) \/\/ true\njQuery.isPlainObject(\"test\") \/\/ false\n\n\n"},{"url":"http:\/\/api.jquery.com\/jquery-2\/","title":".jquery","description":"\n\njquery Returns: String\n\n\nDescription: A string containing the jQuery version number.\n\nversion added: 1.0jquery\nThe .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".\nExamples:\n\n\nExample: Determine if an object is a jQuery object\n\n\nvar a = { what: \"A regular JS object\" },\n    b = $('body');\n     \nif ( a.jquery ) { \/\/ falsy, since it's undefined\n    alert(' a is a jQuery object! ');    \n}\n\nif ( b.jquery ) { \/\/ truthy, since it's a string\n    alert(' b is a jQuery object! ');\n}\n\n\n\nExample: Get the current version of jQuery running on the page\n\n\nalert( 'You are running jQuery version: ' + $.fn.jquery );\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/keypress\/","title":"keypress","description":"\n\n.keypress( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.keypress( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.keypress(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.keypress()\n\n\nNote: as the keypress event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.\nThis method is a shortcut for .bind(\"keypress\", handler) in the first two variations, and .trigger(\"keypress\") in the third.\nThe keypress event is sent to an element when the browser registers keyboard input. This is similar to the keydown event, except in the case of key repeats. If the user presses and holds a key, a keydown event is triggered once, but separate keypress events are triggered for each inserted character. In addition, modifier keys (such as Shift) trigger keydown events but not keypress events.\nA keypress event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;input id=\"target\" type=\"text\" value=\"Hello there\" \/&gt;\n  &lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the input field:\n$(\"#target\").keypress(function() {\n  alert(\"Handler for .keypress() called.\");\n});\nNow when the insertion point is inside the field, pressing a key displays the alert:\nHandler for .keypress() called.\nThe message repeats if the key is held down. To trigger the event manually, apply .keypress() without an argument::\n$('#other').click(function() {\n  $(\"#target\").keypress();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nIf key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the document object. Because of event bubbling, all key presses will make their way up the DOM to the document object unless explicitly stopped.\nTo determine which character was entered, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the .which property so you can reliably use it to retrieve the character code.\nNote that keydown and keyup provide a code indicating which key is pressed, while keypress indicates which character was entered. For example, a lowercase \"a\" will be reported as 65 by keydown and keyup, but as 97 by keypress. An uppercase \"A\" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys, .keydown() or .keyup() is a better choice.\n\nExample:\n\nShow the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http:\/\/api.jquery.com\/scripts\/events.js) for the event object's output.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nfieldset { margin-bottom: 1em; }\ninput { display: block; margin-bottom: .25em; }\n#print-output {\n  width: 100%;\n}\n.print-output-line {\n  white-space: pre;\n  padding: 5px;\n  font-family: monaco, monospace;\n  font-size: .7em;\n}\n\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;\/label&gt;\n    &lt;input id=\"target\" type=\"text\" \/&gt;\n  &lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;\/button&gt;\n&lt;script src=\"http:\/\/api.jquery.com\/scripts\/events.js\"&gt;&lt;\/script&gt;\n&lt;script&gt;\nvar xTriggered = 0;\n$(\"#target\").keypress(function(event) {\n  if ( event.which == 13 ) {\n     event.preventDefault();\n   }\n   xTriggered++;\n   var msg = \"Handler for .keypress() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n});\n\n$(\"#other\").click(function() {\n  $(\"#target\").keypress();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.isXMLDoc\/","title":"jQuery.isXMLDoc","description":"\n\njQuery.isXMLDoc( node ) Returns: Boolean\n\n\nDescription: Check to see if a DOM node is within an XML document (or is an XML document).\n\n\nversion added: 1.1.4jQuery.isXMLDoc( node )\nnodeThe DOM node that will be checked to see if it's in an XML document.\n\nExample:\n\nCheck an object to see if it's in an XML document.\njQuery.isXMLDoc(document) \/\/ false\njQuery.isXMLDoc(document.body) \/\/ false\n\n\n"},{"url":"http:\/\/api.jquery.com\/keyup\/","title":"keyup","description":"\n\n.keyup( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.keyup( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.keyup(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.keyup()\n\n\nThis method is a shortcut for .bind('keyup', handler) in the first two variations, and .trigger('keyup') in the third.\nThe keyup event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the input field:\n$('#target').keyup(function() {\n  alert('Handler for .keyup() called.');\n});\n\nNow when the insertion point is inside the field and a key is pressed and released, the alert is displayed:\nHandler for .keyup() called.\nTo trigger the event manually, apply .keyup() without arguments:\n$('#other').click(function() {\n  $('#target').keyup();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nIf key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the document object. Because of event bubbling, all key presses will make their way up the DOM to the document object unless explicitly stopped.\nTo determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the .which property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, .keypress() may be a better choice.\n\nExample:\n\nShow the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nfieldset { margin-bottom: 1em; }\ninput { display: block; margin-bottom: .25em; }\n#print-output {\n  width: 100%;\n}\n.print-output-line {\n  white-space: pre;\n  padding: 5px;\n  font-family: monaco, monospace;\n  font-size: .7em;\n}\n\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;\/label&gt;\n    &lt;input id=\"target\" type=\"text\" \/&gt;\n  &lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;\/button&gt;\n&lt;script type=\"text\/javascript\" src=\"\/scripts\/events.js\"&gt;&lt;\/script&gt;\n&lt;script&gt;\nvar xTriggered = 0;\n$('#target').keyup(function(event) {\n   xTriggered++;\n   var msg = 'Handler for .keyup() called ' + xTriggered + ' time(s).';\n  $.print(msg, 'html');\n  $.print(event);\n}).keydown(function(event) {\n  if (event.which == 13) {\n    event.preventDefault();\n  }  \n});\n\n$('#other').click(function() {\n  $('#target').keyup();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/last\/","title":"last","description":"\n\n.last() Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to the final one in the set.\n\nversion added: 1.4.last()\n\nGiven a jQuery object that represents a set of DOM elements, the .last() method constructs a new jQuery object from the last matching element.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can apply this method to the set of list items:\n$('li').last().css('background-color', 'red');\nThe result of this call is a red background for the final item.\n\nExample:\n\nHighlight the last span in a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;.highlight{background-color: yellow}&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;span&gt;Look:&lt;\/span&gt; &lt;span&gt;This is some text in a paragraph.&lt;\/span&gt; &lt;span&gt;This is a note about it.&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;$(\"p span\").last().addClass('highlight');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/last-child-selector\/","title":":last-child Selector","description":"\n\nlast-child  selector\n\n\nversion added: 1.1.4jQuery(':last-child')\nDescription: Selects all elements that are the last child of their parent.\nWhile :last matches only a single element, :last-child can match more than one: one for each parent.\nExample:\n\nFinds the last span in each matched div and adds some css plus a hover state.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span.solast { text-decoration:line-through; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;span&gt;John,&lt;\/span&gt;\n    &lt;span&gt;Karl,&lt;\/span&gt;\n    &lt;span&gt;Brandon,&lt;\/span&gt;\n\n    &lt;span&gt;Sam&lt;\/span&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;span&gt;Glen,&lt;\/span&gt;\n    &lt;span&gt;Tane,&lt;\/span&gt;\n\n    &lt;span&gt;Ralph,&lt;\/span&gt;\n    &lt;span&gt;David&lt;\/span&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n    $(\"div span:last-child\")\n        .css({color:\"red\", fontSize:\"80%\"})\n        .hover(function () {\n              $(this).addClass(\"solast\");\n            }, function () {\n              $(this).removeClass(\"solast\");\n            });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/keydown\/","title":"keydown","description":"\n\n.keydown( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"keydown\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.keydown( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.keydown(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.keydown()\n\n\nThis method is a shortcut for .bind('keydown', handler) in the first and second variations, and .trigger('keydown') in the third.\nThe keydown event is sent to an element when the user first presses a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the input field:\n$('#target').keydown(function() {\n  alert('Handler for .keydown() called.');\n});\nNow when the insertion point is inside the field, pressing a key displays the alert:\nHandler for .keydown() called.\nTo trigger the event manually, apply .keydown() without an argument:\n$('#other').click(function() {\n  $('#target').keydown();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nIf key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the document object. Because of event bubbling, all key presses will make their way up the DOM to the document object unless explicitly stopped.\nTo determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the .which property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, .keypress() may be a better choice.\n\nExample:\n\nShow the event object for the keydown handler when a key is pressed in the input.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nfieldset { margin-bottom: 1em; }\ninput { display: block; margin-bottom: .25em; }\n#print-output {\n  width: 100%;\n}\n.print-output-line {\n  white-space: pre;\n  padding: 5px;\n  font-family: monaco, monospace;\n  font-size: .7em;\n}\n\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;\/label&gt;\n    &lt;input id=\"target\" type=\"text\" \/&gt;\n  &lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;\/button&gt;\n&lt;script type=\"text\/javascript\" src=\"\/scripts\/events.js\"&gt;&lt;\/script&gt;\n&lt;script&gt;\nvar xTriggered = 0;\n$('#target').keydown(function(event) {\n  if (event.keyCode == '13') {\n     event.preventDefault();\n   }\n   xTriggered++;\n   var msg = 'Handler for .keydown() called ' + xTriggered + ' time(s).';\n  $.print(msg, 'html');\n  $.print(event);\n});\n\n$('#other').click(function() {\n  $('#target').keydown();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/last-selector\/","title":":last Selector","description":"\n\nlast  selector\n\n\nversion added: 1.0jQuery(':last')\nDescription: Selects the last matched element.\nNote that :last selects a single element by filtering  the current jQuery collection and matching the last element within it.\nAdditional Notes:Because :last is a jQuery extension and not part of the CSS specification, queries using :last cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :last to select elements, first select the elements using a pure CSS selector, then use .filter(\":last\").Example:\n\nFinds the last table row.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table&gt;\n\n    &lt;tr&gt;&lt;td&gt;First Row&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Middle Row&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Last Row&lt;\/td&gt;&lt;\/tr&gt;\n\n  &lt;\/table&gt;\n&lt;script&gt;$(\"tr:last\").css({backgroundColor: 'yellow', fontWeight: 'bolder'});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/length\/","title":".length","description":"\n\nlength Returns: Number\n\n\nDescription: The number of elements in the jQuery object.\n\nversion added: 1.0length\nThe number of elements currently matched. The .size() method will return the same value.\nExample:\n\nCount the divs.  Click to add more.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  body { cursor:pointer; }\n  div { width:50px; height:30px; margin:5px; float:left;\n        background:green; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(document.body).click(function () {\n      $(document.body).append($(\"&lt;div&gt;\"));\n      var n = $(\"div\").length;\n      $(\"span\").text(\"There are \" + n + \" divs.\" +\n                     \"Click to add more.\");\n    }).trigger('click'); \/\/ trigger the click to start&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/load-event\/","title":"load","description":"\n\n.load( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"load\" JavaScript event.\n\n\n\nversion added: 1.0.load( handler(eventObject) )\nhandler(eventObject)A function to execute when the event is triggered.\n\n\n\nversion added: 1.4.3.load(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nThis method is a shortcut for .bind('load', handler).\nThe load event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the window object.\nFor example, consider a page with a simple image:\n&lt;img src=\"book.png\" alt=\"Book\" id=\"book\" \/&gt;\nThe event handler can be bound to the image:\n$('#book').load(function() {\n  \/\/ Handler for .load() called.\n});\nAs soon as the image has been loaded, the handler is called.\nIn general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually best to place it in a handler sent to the .ready() method.\n\nThe Ajax module also has a method named .load(). Which one is fired depends on the set of arguments passed.\n\nCaveats of the load event when used with images\nA common challenge developers attempt to solve using the .load() shortcut is to execute a function when an image (or collection of images) have completely loaded. There are several known caveats with this that should be noted. These are:\n\nIt doesn't work consistently nor reliably cross-browser\nIt doesn't fire correctly in WebKit if the image src is set to the same src as before\nIt doesn't correctly bubble up the DOM tree\nCan cease to fire for images that already live in the browser's cache\n\nNote: The .live() and .delegate() methods cannot be used to detect the load event of an iframe. The load event does not correctly bubble up the parent document and the event.target isn't set by Firefox, IE9 or Chrome, which is required to do event delegation.\n\nExamples:\n\n\nExample: Run a function when the page is fully loaded including graphics.\n\n$(window).load(function () {\n  \/\/ run code\n});\n\n\nExample: Add the class bigImg to all images with height greater then 100 upon each image load.\n\n$('img.userIcon').load(function(){\n  if($(this).height() &gt; 100) {\n    $(this).addClass('bigImg');\n  }\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/lt-selector\/","title":":lt() Selector","description":"\n\nlt  selector\n\n\nversion added: 1.0jQuery(':lt(index)')\n\nindex\nZero-based index.\n\nDescription: Select all elements at an index less than index within the matched set.\n\nindex-related selectors\nThe index-related selectors (including this \"less than\" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.\nNote that since JavaScript arrays use 0-based indexing, these selectors reflect that fact. This is why $('.myclass:lt(1)') selects the first element in the document with the class myclass, rather than selecting no elements. In contrast, :nth-child(n) uses 1-based indexing to conform to the CSS specification.\n\nAdditional Notes:Because :lt() is a jQuery extension and not part of the CSS specification, queries using :lt() cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use $(\"your-pure-css-selector\").slice(0, index) instead.Example:\n\nFinds TDs less than the one with the 4th index (TD#4).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;\/td&gt;&lt;td&gt;TD #1&lt;\/td&gt;&lt;td&gt;TD #2&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #3&lt;\/td&gt;&lt;td&gt;TD #4&lt;\/td&gt;&lt;td&gt;TD #5&lt;\/td&gt;&lt;\/tr&gt;\n\n  &lt;tr&gt;&lt;td&gt;TD #6&lt;\/td&gt;&lt;td&gt;TD #7&lt;\/td&gt;&lt;td&gt;TD #8&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/table&gt;\n&lt;script&gt;$(\"td:lt(4)\").css(\"color\", \"red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/live\/","title":"live","description":"\n\n.live( events, handler ) Returns: jQuery\n\n\nDescription: Attach an event handler for all elements which match the current selector, now and in the future.\n\n\n\nversion added: 1.3.live( events, handler )\neventsA string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.4.live( events, data, handler )\neventsA string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.\ndataA map of data that will be passed to the event handler.\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.4.3.live( events-map )\nevents-mapA map of one or more JavaScript event types and functions to execute for them.\n\n\n\nAs of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().\nThis method provides a means to attach delegated event handlers to the document element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the .on() method for more information. \nRewriting the .live() method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:\n\n$(selector).live(events, data, handler);                \/\/ jQuery 1.3+\n$(document).delegate(selector, events, data, handler);  \/\/ jQuery 1.4.3+\n$(document).on(events, selector, data, handler);        \/\/ jQuery 1.7+\n\nThe events argument can either be a space-separated list of event type names and optional namespaces, or an event-map of event names strings and handlers. The data argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):\n\n$(\"a.offsite\").live(\"click\", function(){ alert(\"Goodbye!\"); });                \/\/ jQuery 1.3+\n$(document).delegate(\"a.offsite\", \"click\", function(){ alert(\"Goodbye!\"); });  \/\/ jQuery 1.4.3+\n$(document).on(\"click\", \"a.offsite\", function(){ alert(\"Goodbye!\"); });        \/\/ jQuery 1.7+\n\nUse of the .live() method is no longer recommended since later versions of jQuery offer better methods that do not have its drawbacks. In particular, the following issues arise with the use of .live():\n\n        jQuery attempts to retrieve the elements specified by the selector before calling the .live() method, which may be time-consuming on large documents.\n        Chaining methods is not supported. For example, $(\"a\").find(\".offsite, .external\").live( ... );  is not valid and does not work as expected.\n        Since all .live() events are attached at the document element, events take the longest and slowest possible path before they are handled.\n        On mobile iOS (iPhone, iPad and iPod Touch) the click event does not bubble to the document body and cannot be used with .live() without applying the cursor: pointer style to the element. Be aware that this workaround has negative side effects such as disabling copy\/paste.\n        Calling event.stopPropagation() in the event handler is ineffective in stopping event handlers attached lower in the document; the event has already propagated to document.\n        The .live() method interacts with other event methods in ways that can be surprising, e.g., $(document).unbind(\"click\") removes all click handlers attached by any call to .live()!\n\nFor pages still using .live(), this list of version-specific differences may be helpful:\n\n        Before jQuery 1.7, to stop further handlers from executing after one bound using .live(), the handler must return false. Calling .stopPropagation() will not accomplish this.\n        As of jQuery 1.4 the .live() method supports custom events as well as all JavaScript events that bubble.\n        In jQuery 1.3.x only the following JavaScript events could be bound: click, dblclick, keydown, keypress, keyup, mousedown, mousemove, mouseout, mouseover, and mouseup.\n \n\nExamples:\n\n\nExample: Click a paragraph to add another. Note that .live() binds the click event to all paragraphs - even new ones.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; font-weight:bold; cursor:pointer;\n      padding:5px; }\n  p.over { background: #ccc; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Click me!&lt;\/p&gt;\n\n  &lt;span&gt;&lt;\/span&gt;\n&lt;script&gt;\n$(\"p\").live(\"click\", function(){\n  $(this).after(\"&lt;p&gt;Another paragraph!&lt;\/p&gt;\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Cancel a default action and prevent it from bubbling up by returning false.\n\n$(\"a\").live(\"click\", function() { return false; })\n\n\nExample: Cancel only the default action by using the preventDefault method.\n\n$(\"a\").live(\"click\", function(event){\n  event.preventDefault();\n});\n\n\nExample: Bind custom events with .live().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:red; }\n  span { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Has an attached custom event.&lt;\/p&gt;\n  &lt;button&gt;Trigger custom event&lt;\/button&gt;\n  &lt;span style=\"display:none;\"&gt;&lt;\/span&gt;\n  \n&lt;script&gt;\n$(\"p\").live(\"myCustomEvent\", function(e, myName, myValue) {\n  $(this).text(\"Hi there!\");\n  $(\"span\").stop().css(\"opacity\", 1)\n           .text(\"myName = \" + myName)\n           .fadeIn(30).fadeOut(1000);\n});\n$(\"button\").click(function () {\n  $(\"p\").trigger(\"myCustomEvent\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Use a map to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; font-weight:bold; cursor:pointer; padding:5px; }\n  p.over { background: #ccc; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Click me!&lt;\/p&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  \n&lt;script&gt;\n$(\"p\").live({\n  click: function() {\n    $(this).after(\"&lt;p&gt;Another paragraph!&lt;\/p&gt;\");\n  },\n  mouseover: function() {\n    $(this).addClass(\"over\");\n  },\n  mouseout: function() {\n    $(this).removeClass(\"over\");\n  }\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.makeArray\/","title":"jQuery.makeArray","description":"\n\njQuery.makeArray( obj ) Returns: Array\n\n\nDescription: Convert an array-like object into a true JavaScript array.\n\n\nversion added: 1.2jQuery.makeArray( obj )\nobjAny object to turn into a native Array.\n\n\nMany methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).\nNote that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.\n\nExamples:\n\n\nExample: Turn a collection of HTMLElements into an Array of them.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;First&lt;\/div&gt;\n  &lt;div&gt;Second&lt;\/div&gt;  \n  &lt;div&gt;Third&lt;\/div&gt;\n\n  &lt;div&gt;Fourth&lt;\/div&gt;\n&lt;script&gt;\n    var elems = document.getElementsByTagName(\"div\"); \/\/ returns a nodeList\n    var arr = jQuery.makeArray(elems);\n    arr.reverse(); \/\/ use an Array method on list of dom elements\n    $(arr).appendTo(document.body);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Turn a jQuery object into an array\n\n\n    var obj = $('li');\n    var arr = $.makeArray(obj);\n\nResult:\n(typeof obj === 'object' &amp;&amp; obj.jquery) === true;\njQuery.isArray(arr) === true;\n    \n\n\n\n"},{"url":"http:\/\/api.jquery.com\/map\/","title":"map","description":"\n\n.map( callback(index, domElement) ) Returns: jQuery\n\n\nDescription: Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.\n\n\nversion added: 1.2.map( callback(index, domElement) )\ncallback(index, domElement)A function object that will be invoked for each element in the current set.\n\n\nAs the return value is a jQuery-wrapped array, it's very common to get() the returned object to work with a basic array.\nThe .map() method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:\n\n&lt;form method=\"post\" action=\"\"&gt;\n  &lt;fieldset&gt;\n    &lt;div&gt;\n      &lt;label for=\"two\"&gt;2&lt;\/label&gt;\n      &lt;input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\"&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"four\"&gt;4&lt;\/label&gt;\n      &lt;input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\"&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"six\"&gt;6&lt;\/label&gt;\n      &lt;input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\"&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"eight\"&gt;8&lt;\/label&gt;\n      &lt;input type=\"checkbox\" value=\"8\" id=\"eight\" name=\"number[]\"&gt;\n    &lt;\/div&gt;\n  &lt;\/fieldset&gt;\n&lt;\/form&gt;\n\nWe can get a comma-separated list of checkbox IDs:\n$(':checkbox').map(function() {\n  return this.id;\n}).get().join(',');\nThe result of this call is the string, \"two,four,six,eight\".\nWithin the callback function, this refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns null or undefined, no element will be inserted.\n\nExamples:\n\n\nExample: Build a list of all the values within a form.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;b&gt;Values: &lt;\/b&gt;&lt;\/p&gt;\n  &lt;form&gt;\n    &lt;input type=\"text\" name=\"name\" value=\"John\"\/&gt;\n\n    &lt;input type=\"text\" name=\"password\" value=\"password\"\/&gt;\n    &lt;input type=\"text\" name=\"url\" value=\"http:\/\/ejohn.org\/\"\/&gt;\n\n  &lt;\/form&gt;\n&lt;script&gt;\n    $(\"p\").append( $(\"input\").map(function(){\n      return $(this).val();\n    }).get().join(\", \") );\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: A contrived example to show some functionality.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { font-size:16px; }\n  ul { float:left; margin:0 30px; color:blue; }\n  #results { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;First&lt;\/li&gt;\n    &lt;li&gt;Second&lt;\/li&gt;\n    &lt;li&gt;Third&lt;\/li&gt;\n\n    &lt;li&gt;Fourth&lt;\/li&gt;\n    &lt;li&gt;Fifth&lt;\/li&gt;\n  &lt;\/ul&gt;\n  &lt;ul id=\"results\"&gt;\n\n  &lt;\/ul&gt;\n&lt;script&gt;\nvar mappedItems = $(\"li\").map(function (index) {\n  var replacement = $(\"&lt;li&gt;\").text($(this).text()).get(0);\n  if (index == 0) {\n    \/* make the first item all caps *\/\n    $(replacement).text($(replacement).text().toUpperCase());\n  } else if (index == 1 || index == 3) {\n    \/* delete the second and fourth items *\/\n    replacement = null;\n  } else if (index == 2) {\n    \/* make two of the third item and add some text *\/\n    replacement = [replacement,$(\"&lt;li&gt;\").get(0)];\n    $(replacement[0]).append(\"&lt;b&gt; - A&lt;\/b&gt;\");\n    $(replacement[1]).append(\"Extra &lt;b&gt; - B&lt;\/b&gt;\");\n  }\n\n  \/* replacement will be a dom element, null, \n     or an array of dom elements *\/\n  return replacement;\n});\n$(\"#results\").append(mappedItems);\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Equalize the heights of the divs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { width: 40px; float:left; }\ninput { clear:left}\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n\n&lt;input type=\"button\" value=\"equalize div heights\"&gt;\n\n&lt;div style=\"background:red; height: 40px; \"&gt;&lt;\/div&gt;\n&lt;div style=\"background:green; height: 70px;\"&gt;&lt;\/div&gt;\n&lt;div style=\"background:blue; height: 50px; \"&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\n$.fn.equalizeHeights = function() {\n  var maxHeight = this.map(function(i,e) {\n    return $(e).height();\n  }).get();\n  \n  return this.height( Math.max.apply(this, maxHeight) );\n};\n\n$('input').click(function(){\n  $('div').equalizeHeights();\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.map\/","title":"jQuery.map","description":"\n\njQuery.map( array, callback(elementOfArray, indexInArray) ) Returns: Array\n\n\nDescription: Translate all items in an array or object to new array of items.\n\n\n\nversion added: 1.0jQuery.map( array, callback(elementOfArray, indexInArray) )\narrayThe Array to translate.\ncallback(elementOfArray, indexInArray)The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, this refers to the global (window) object.\n\n\n\nversion added: 1.6jQuery.map( arrayOrObject, callback( value, indexOrKey ) )\narrayOrObjectThe Array or Object to translate.\ncallback( value, indexOrKey )The function to process each item against.  The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, this refers to the global (window) object. \n\n\n\nThe $.map() method applies a function to each item in an array or object and maps the results into a new array. Prior to jQuery 1.6, $.map() supports traversing arrays only. As of jQuery 1.6 it also traverses objects.\nArray-like objects \u2014 those with a .length property and a value on the .length - 1 index \u2014 must be converted to actual arrays before being passed to $.map(). The jQuery library provides $.makeArray() for such conversions.\n\n\/\/ The following object masquerades as an array.\nvar fakeArray = {\"length\": 1, 0: \"Addy\", 1: \"Subtracty\"};\n\n\/\/ Therefore, convert it to a real array\nvar realArray = $.makeArray( fakeArray )\n\n\/\/ Now it can be used reliably with $.map()\n$.map( realArray, function(val, i) {\n  \/\/ do something \n});\n\nThe translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.\nThe function can return:\n\n      the translated value, which will be mapped to the resulting array\n      \nnull, to remove the item\n      an array of values, which will be flattened into the full array\n    \n\nExamples:\n\n\nExample: A couple examples of using .map()\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  p { color:green; margin:0; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;p&gt;&lt;\/p&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  \n&lt;script&gt;\n    var arr = [ \"a\", \"b\", \"c\", \"d\", \"e\" ];\n    $(\"div\").text(arr.join(\", \"));\n\n    arr = jQuery.map(arr, function(n, i){\n      return (n.toUpperCase() + i);\n    });\n    $(\"p\").text(arr.join(\", \"));\n\n    arr = jQuery.map(arr, function (a) { \n      return a + a; \n    });\n    $(\"span\").text(arr.join(\", \"));\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Map the original array to a new one and add 4 to each value.\n\n$.map( [0,1,2], function(n){\n   return n + 4;\n });\nResult:\n[4, 5, 6] \n\n\nExample: Maps the original array to a new one and adds 1 to each value if it is bigger then zero, otherwise it's removed.\n\n$.map( [0,1,2], function(n){\n   return n &gt; 0 ? n + 1 : null;\n });\nResult:\n[2, 3] \n\n\nExample: Map the original array to a new one; each element is added with its original value and the value plus one.\n\n$.map( [0,1,2], function(n){\n   return [ n, n + 1 ];\n });\nResult:\n[0, 1, 1, 2, 2, 3] \n\n\nExample: Map the original object to a new array and double each value.\n\n\nvar dimensions = { width: 10, height: 15, length: 20 };\ndimensions = $.map( dimensions, function( value, index ) {\n  return value * 2;\n}); \nResult:\n[20, 30, 40] \n\n\nExample: Map an object's keys to an array.\n\n\nvar dimensions = { width: 10, height: 15, length: 20 },\n    keys = $.map( dimensions, function( value, index ) {\n      return index;\n    }); \nResult:\n[\"width\", \"height\", \"length\"] \n\n\nExample: Maps the original array to a new one; each element is squared.\n\n\n$.map( [0,1,2,3], function (a) { \n  return a * a; \n});\nResult:\n[0, 1, 4, 9] \n\n\nExample: Remove items by returning null from the function. This removes any numbers less than 50, and the rest are decreased by 45.\n\n\n$.map( [0, 1, 52, 97], function (a) {\n  return (a &gt; 50 ? a - 45 : null); \n});\nResult:\n[7, 52] \n\n\nExample: Augmenting the resulting array by returning an array inside the function.\n\nvar array = [0, 1, 52, 97];\narray = $.map(array, function(a, index) {\n  return [a - 45, index];\n}); \nResult:\n[-45, 0, -44, 1, 7, 2, 52, 3] \n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.merge\/","title":"jQuery.merge","description":"\n\njQuery.merge( first, second ) Returns: Array\n\n\nDescription: Merge the contents of two arrays together into the first array. \n\n\nversion added: 1.0jQuery.merge( first, second )\nfirstThe first array to merge, the elements of second added.\nsecondThe second array to merge into the first, unaltered.\n\n\nThe $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the first parameter to add the items from the second.  \nIf you need the original first array, make a copy of it before calling $.merge(). Fortunately, $.merge() itself can be used for this duplication:\nvar newArray = $.merge([], oldArray);\nThis shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.\nPrior to jQuery 1.4, the arguments should be true Javascript Array objects; use $.makeArray if they are not.\n\nExamples:\n\n\nExample: Merges two arrays, altering the first argument.\n\n$.merge( [0,1,2], [2,3,4] )\nResult:\n[0,1,2,2,3,4] \n\n\nExample: Merges two arrays, altering the first argument.\n\n$.merge( [3,2,1], [4,3,2] )  \nResult:\n[3,2,1,4,3,2] \n\n\nExample: Merges two arrays, but uses a copy, so the original isn't altered.\n\nvar first = ['a','b','c'];\nvar second = ['d','e','f'];\n$.merge( $.merge([],first), second);\n      \nResult:\n[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"] \n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mouseenter\/","title":"mouseenter","description":"\n\n.mouseenter( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.\n\n\n\nversion added: 1.0.mouseenter( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mouseenter(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mouseenter()\n\n\nThis method is a shortcut for .bind('mouseenter', handler) in the first two variations, and .trigger('mouseenter') in the third.\nThe mouseenter JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n\nThe event handler can be bound to any element:\n$('#outer').mouseenter(function() {\n  $('#log').append('&lt;div&gt;Handler for .mouseenter() called.&lt;\/div&gt;');\n});\nNow when the mouse pointer moves over the Outer &lt;div&gt;, the message is appended to &lt;div id=\"log\"&gt;. You can also trigger the event when another element is clicked:\n$('#other').click(function() {\n  $('#outer').mouseenter();\n});\nAfter this code executes, clicks on Trigger the handler will also append the message.\nThe mouseenter event differs from mouseover in the way it handles event bubbling. If mouseover were used in this example, then when the mouse pointer moved over the Inner element, the handler would be triggered. This is usually undesirable behavior. The mouseenter event, on the other hand, only triggers its handler when the mouse enters the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse enters the Outer element, but not the Inner element.\n\nExample:\n\nShow texts when mouseenter and mouseout event triggering.\nmouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv.out {\nwidth:40%;\nheight:120px;\nmargin:0 15px;\nbackground-color:#D6EDFC;\nfloat:left;\n}\ndiv.in {\nwidth:60%;\nheight:60%;\nbackground-color:#FFCC00;\nmargin:10px auto;\n}\np {\nline-height:1em;\nmargin:0;\npadding:0;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"out overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n&lt;div class=\"out enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\n    var i = 0;\n    $(\"div.overout\").mouseover(function(){\n      $(\"p:first\",this).text(\"mouse over\");\n      $(\"p:last\",this).text(++i);\n    }).mouseout(function(){\n      $(\"p:first\",this).text(\"mouse out\");\n    });\n\n    var n = 0;\n    $(\"div.enterleave\").mouseenter(function(){\n      $(\"p:first\",this).text(\"mouse enter\");\n      $(\"p:last\",this).text(++n);\n    }).mouseleave(function(){\n      $(\"p:first\",this).text(\"mouse leave\");\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mouseleave\/","title":"mouseleave","description":"\n\n.mouseleave( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.\n\n\n\nversion added: 1.0.mouseleave( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mouseleave(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mouseleave()\n\n\nThis method is a shortcut for .bind('mouseleave', handler) in the first two variations, and .trigger('mouseleave') in the third.\nThe mouseleave JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n\nThe event handler can be bound to any element:\n$('#outer').mouseleave(function() {\n  $('#log').append('&lt;div&gt;Handler for .mouseleave() called.&lt;\/div&gt;');\n});\nNow when the mouse pointer moves out of the Outer &lt;div&gt;, the message is appended to &lt;div id=\"log\"&gt;. You can also trigger the event when another element is clicked:\n$('#other').click(function() {\n  $('#outer').mouseleave();\n});\nAfter this code executes, clicks on Trigger the handler will also append the message.\nThe mouseleave event differs from mouseout in the way it handles event bubbling. If mouseout were used in this example, then when the mouse pointer moved out of the Inner element, the handler would be triggered. This is usually undesirable behavior. The mouseleave event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the Outer element, but not the Inner element.\n\nExample:\n\nShow number of times mouseout and mouseleave events are triggered.\nmouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv.out {\nwidth:40%;\nheight:120px;\nmargin:0 15px;\nbackground-color:#D6EDFC;\nfloat:left;\n}\ndiv.in {\nwidth:60%;\nheight:60%;\nbackground-color:#FFCC00;\nmargin:10px auto;\n}\np {\nline-height:1em;\nmargin:0;\npadding:0;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"out overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n&lt;div class=\"out enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\n    var i = 0;\n    $(\"div.overout\").mouseover(function(){\n      $(\"p:first\",this).text(\"mouse over\");\n    }).mouseout(function(){\n      $(\"p:first\",this).text(\"mouse out\");\n      $(\"p:last\",this).text(++i);\n    });\n\n    var n = 0;\n    $(\"div.enterleave\").mouseenter(function(){\n      $(\"p:first\",this).text(\"mouse enter\");\n    }).mouseleave(function(){\n      $(\"p:first\",this).text(\"mouse leave\");\n      $(\"p:last\",this).text(++n);\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mousemove\/","title":"mousemove","description":"\n\n.mousemove( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.mousemove( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mousemove(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mousemove()\n\n\nThis method is a shortcut for .bind('mousemove', handler) in the first two variations, and .trigger('mousemove') in the third.\nThe mousemove event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"target\"&gt;\n  Move here\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\nThe event handler can be bound to the target:\n$(\"#target\").mousemove(function(event) {\n  var msg = \"Handler for .mousemove() called at \";\n  msg += event.pageX + \", \" + event.pageY;\n  $(\"#log\").append(\"&lt;div&gt;\" + msg + \"&lt;\/div&gt;\");\n});\nNow when the mouse pointer moves within the target button, the messages are appended to &lt;div id=\"log\"&gt;:\n\nHandler for .mousemove() called at (399, 48)\nHandler for .mousemove() called at (398, 46)\nHandler for .mousemove() called at (397, 44)\nHandler for .mousemove() called at (396, 42)\n\nTo trigger the event manually, apply .mousemove() without an argument:\n$(\"#other\").click(function() {\n  $(\"#target\").mousemove();\n});\nAfter this code executes, clicks on the Trigger button will also append the message:\nHandler for .mousemove() called at (undefined, undefined)\nWhen tracking mouse movement, you usually need to know the actual position of the mouse pointer. The event object that is passed to the handler contains some information about the mouse coordinates. Properties such as .clientX, .offsetX, and .pageX are available, but support for them differs between browsers. Fortunately, jQuery normalizes the .pageX and .pageY properties so that they can be used in all browsers. These properties provide the X and Y coordinates of the mouse pointer relative to the top-left corner of the document, as illustrated in the example output above.\nKeep in mind that the mousemove event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize mousemove handlers as much as possible, and to unbind them as soon as they are no longer needed.\nA common pattern is to bind the mousemove handler from within a mousedown hander, and to unbind it from a corresponding mouseup handler. If implementing this sequence of events, remember that the mouseup event might be sent to a different HTML element than the mousemove event was. To account for this, the mouseup handler should typically be bound to an element high up in the DOM tree, such as &lt;body&gt;.\n\nExample:\n\nShow the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:220px; height:170px; margin;10px; margin-right:50px;\n        background:yellow; border:2px groove; float:right; }\n  p { margin:0; margin-left:10px; color:red; width:220px;\n      height:120px; padding-top:70px;\n      float:left; font-size:14px; }\n  span { display:block; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;   \n    Try scrolling too.\n    &lt;span&gt;Move the mouse over the div.&lt;\/span&gt;\n    &lt;span&gt;&amp;nbsp;&lt;\/span&gt;\n  &lt;\/p&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"div\").mousemove(function(e){\n      var pageCoords = \"( \" + e.pageX + \", \" + e.pageY + \" )\";\n      var clientCoords = \"( \" + e.clientX + \", \" + e.clientY + \" )\";\n      $(\"span:first\").text(\"( e.pageX, e.pageY ) - \" + pageCoords);\n      $(\"span:last\").text(\"( e.clientX, e.clientY ) - \" + clientCoords);\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mouseout\/","title":"mouseout","description":"\n\n.mouseout( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.mouseout( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mouseout(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mouseout()\n\n\nThis method is a shortcut for .bind('mouseout', handler) in the first two variation, and .trigger('mouseout') in the third.\nThe mouseout event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n\nThe event handler can be bound to any element:\n$('#outer').mouseout(function() {\n  $('#log').append('Handler for .mouseout() called.');\n});\nNow when the mouse pointer moves out of the Outer &lt;div&gt;, the message is appended to &lt;div id=\"log\"&gt;. To trigger the event manually, apply .mouseout() without an argument::\n$('#other').click(function() {\n  $('#outer').mouseout();\n});\nAfter this code executes, clicks on Trigger the handler will also append the message.\nThis event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the Inner element in this example, a mouseout event will be sent to that, then trickle up to Outer. This can trigger the bound mouseout handler at inopportune times. See the discussion for .mouseleave() for a useful alternative.\n\nExample:\n\nShow the number of times mouseout and mouseleave events are triggered.\nmouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv.out {\nwidth:40%;\nheight:120px;\nmargin:0 15px;\nbackground-color:#D6EDFC;\nfloat:left;\n}\ndiv.in {\nwidth:60%;\nheight:60%;\nbackground-color:#FFCC00;\nmargin:10px auto;\n}\np {\nline-height:1em;\nmargin:0;\npadding:0;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"out overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n&lt;div class=\"out enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;\/p&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;&lt;p&gt;0&lt;\/p&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\n    var i = 0;\n    $(\"div.overout\").mouseout(function(){\n      $(\"p:first\",this).text(\"mouse out\");\n      $(\"p:last\",this).text(++i);\n    }).mouseover(function(){\n      $(\"p:first\",this).text(\"mouse over\");\n    });\n\n    var n = 0;\n    $(\"div.enterleave\").bind(\"mouseenter\",function(){\n      $(\"p:first\",this).text(\"mouse enter\");\n    }).bind(\"mouseleave\",function(){\n      $(\"p:first\",this).text(\"mouse leave\");\n      $(\"p:last\",this).text(++n);\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mouseover\/","title":"mouseover","description":"\n\n.mouseover( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.mouseover( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mouseover(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mouseover()\n\n\nThis method is a shortcut for .bind('mouseover', handler) in the first two variations, and .trigger('mouseover') in the third.\nThe mouseover event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;\/div&gt;\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n\nThe event handler can be bound to any element:\n$('#outer').mouseover(function() {\n  $('#log').append('&lt;div&gt;Handler for .mouseover() called.&lt;\/div&gt;');\n});\nNow when the mouse pointer moves over the Outer &lt;div&gt;, the message is appended to &lt;div id=\"log\"&gt;. We can also trigger the event when another element is clicked:\n$('#other').click(function() {\n  $('#outer').mouseover();\n});\nAfter this code executes, clicks on Trigger the handler will also append the message.\nThis event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the Inner element in this example, a mouseover event will be sent to that, then trickle up to Outer. This can trigger our bound mouseover handler at inopportune times. See the discussion for .mouseenter() for a useful alternative.\n\nExample:\n\nShow the number of times mouseover and mouseenter events are triggered.\nmouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv.out { width:40%; height:120px; margin:0 15px;\n          background-color:#D6EDFC; float:left; }\ndiv.in {  width:60%; height:60%; \n          background-color:#FFCC00; margin:10px auto; }\np { line-height:1em; margin:0; padding:0; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"out overout\"&gt;\n  &lt;span&gt;move your mouse&lt;\/span&gt;\n  &lt;div class=\"in\"&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;div class=\"out enterleave\"&gt;\n  &lt;span&gt;move your mouse&lt;\/span&gt;\n  &lt;div class=\"in\"&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;script&gt;\n  var i = 0;\n  $(\"div.overout\").mouseover(function() {\n    i += 1;\n    $(this).find(\"span\").text( \"mouse over x \" + i );\n  }).mouseout(function(){\n    $(this).find(\"span\").text(\"mouse out \");\n  });\n\n  var n = 0;\n  $(\"div.enterleave\").mouseenter(function() {\n    n += 1;\n    $(this).find(\"span\").text( \"mouse enter x \" + n );\n  }).mouseleave(function() {\n    $(this).find(\"span\").text(\"mouse leave\");\n  });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mouseup\/","title":"mouseup","description":"\n\n.mouseup( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.mouseup( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mouseup(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mouseup()\n\n\nThis method is a shortcut for .bind('mouseup', handler) in the first variation, and .trigger('mouseup') in the second.\nThe mouseup event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"target\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n\n\nThe event handler can be bound to any &lt;div&gt;:\n$('#target').mouseup(function() {\n  alert('Handler for .mouseup() called.');\n});\n\nNow if we click on this element, the alert is displayed:\nHandler for .mouseup() called.\nWe can also trigger the event when a different element is clicked:\n$('#other').click(function() {\n  $('#target').mouseup();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nIf the user clicks outside an element, drags onto it, and releases the button, this is still counted as a mouseup event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the click event unless we know that the mouseup event is preferable for a particular situation.\n\nExample:\n\nShow texts when mouseup and mousedown event triggering.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Press mouse and release here.&lt;\/p&gt;\n\n&lt;script&gt;\n    $(\"p\").mouseup(function(){\n      $(this).append('&lt;span style=\"color:#F00;\"&gt;Mouse up.&lt;\/span&gt;');\n    }).mousedown(function(){\n      $(this).append('&lt;span style=\"color:#00F;\"&gt;Mouse down.&lt;\/span&gt;');\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/multiple-selector\/","title":"Multiple Selector (&#8220;selector1, selector2, selectorN&#8221;)","description":"\n\nmultiple  selector\n\n\nversion added: 1.0jQuery('selector1, selector2, selectorN')\n\nselector1\nAny valid selector.\nselector2\nAnother valid selector.\nselectorN\nAs many more valid selectors as you like.\n\nDescription: Selects the combined results of all the specified selectors.\nYou can specify any number of selectors to combine into a single result.  This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .add() method.\nExamples:\n\n\nExample: Finds the elements that match any of these three selectors.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div,span,p {\n    width: 126px;\n    height: 60px;\n    float:left;\n    padding: 3px;\n    margin: 2px;\n    background-color: #EEEEEE;\n    font-size:14px;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;div&lt;\/div&gt;\n\n  &lt;p class=\"myClass\"&gt;p class=\"myClass\"&lt;\/p&gt;\n  &lt;p class=\"notMyClass\"&gt;p class=\"notMyClass\"&lt;\/p&gt;\n  &lt;span&gt;span&lt;\/span&gt;\n&lt;script&gt;$(\"div,span,p.myClass\").css(\"border\",\"3px solid red\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Show the order in the jQuery object.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  b { color:red; font-size:16px; display:block; clear:left; }\n  div,span,p { width: 40px; height: 40px; float:left;\n               margin: 10px; background-color: blue; \n               padding:3px; color:white; \n             }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;span&lt;\/span&gt;\n\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;div&gt;div&lt;\/div&gt;\n  &lt;span&gt;span&lt;\/span&gt;\n\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;div&gt;div&lt;\/div&gt;\n  &lt;b&gt;&lt;\/b&gt;\n&lt;script&gt;\n    var list = $(\"div,p,span\").map(function () {\n      return this.tagName;\n    }).get().join(\", \");\n    $(\"b\").append(document.createTextNode(list));\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/mousedown\/","title":"mousedown","description":"\n\n.mousedown( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.mousedown( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.mousedown(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.mousedown()\n\n\nThis method is a shortcut for .bind('mousedown', handler) in the first variation, and .trigger('mousedown') in the second.\nThe mousedown event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.\nFor example, consider the HTML:\n&lt;div id=\"target\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n\nThe event handler can be bound to any &lt;div&gt;:\n$('#target').mousedown(function() {\n  alert('Handler for .mousedown() called.');\n});\nNow if we click on this element, the alert is displayed:\nHandler for .mousedown() called.\nWe can also trigger the event when a different element is clicked:\n$('#other').click(function() {\n  $('#target').mousedown();\n});\nAfter this code executes, clicks on Trigger the handler will also alert the message.\nThe mousedown event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's which property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of which will be 1 for the left button, 2 for the middle button, or 3 for the right button.\nThis event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.\nIf the user clicks on an element, drags away from it, and releases the button, this is still counted as a mousedown event. This sequence of actions is treated as a \"canceling\" of the button press in most user interfaces, so it is usually better to use the click event unless we know that the mousedown event is preferable for a particular situation.\n\nExample:\n\nShow texts when mouseup and mousedown event triggering.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Press mouse and release here.&lt;\/p&gt;\n\n&lt;script&gt;\n    $(\"p\").mouseup(function(){\n      $(this).append('&lt;span style=\"color:#F00;\"&gt;Mouse up.&lt;\/span&gt;');\n    }).mousedown(function(){\n      $(this).append('&lt;span style=\"color:#00F;\"&gt;Mouse down.&lt;\/span&gt;');\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/next-adjacent-Selector\/","title":"Next Adjacent Selector (&#8220;prev + next&#8221;)","description":"\n\nnext adjacent  selector\n\n\nversion added: 1.0jQuery('prev + next')\n\nprev\nAny valid selector.\nnext\nA selector to match the element that is next to the first selector.\n\nDescription: Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".\nOne important point to consider with both the next adjacent sibling selector (prev + next) and the general sibling selector (prev ~ siblings) is that the elements on either side of the combinator must share the same parent.\nExample:\n\nFinds all inputs that are next to a label.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n\n    &lt;label&gt;Name:&lt;\/label&gt;\n    &lt;input name=\"name\" \/&gt;\n    &lt;fieldset&gt;\n      &lt;label&gt;Newsletter:&lt;\/label&gt;\n\n      &lt;input name=\"newsletter\" \/&gt;\n    &lt;\/fieldset&gt;\n  &lt;\/form&gt;\n  &lt;input name=\"none\" \/&gt;\n&lt;script&gt;$(\"label + input\").css(\"color\", \"blue\").val(\"Labeled!\")&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/next\/","title":"next","description":"\n\n.next(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.\n\n\nversion added: 1.0.next(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .next() method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at the third item, we can find the element which comes just after it:\n$('li.third-item').next().css('background-color', 'red');\nThe result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.\n\nExamples:\n\n\nExample: Find the very next sibling of each disabled button and change its text \"this button is disabled\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  span { color:blue; font-weight:bold; }\n  button { width:100px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;button disabled=\"disabled\"&gt;First&lt;\/button&gt; - &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;button&gt;Second&lt;\/button&gt; - &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;button disabled=\"disabled\"&gt;Third&lt;\/button&gt; - &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"button[disabled]\").next().text(\"this button is disabled\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find the very next sibling of each paragraph. Keep only the ones with a class \"selected\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n\n  &lt;p class=\"selected\"&gt;Hello Again&lt;\/p&gt;\n  &lt;div&gt;&lt;span&gt;And Again&lt;\/span&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"p\").next(\".selected\").css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/multiple-attribute-selector\/","title":"Multiple Attribute Selector [name=\"value\"][name2=\"value2\"]","description":"\n\nattributeMultiple  selector\n\n\nversion added: 1.0jQuery('[attributeFilter1][attributeFilter2][attributeFilterN]')\n\nattributeFilter1\nAn attribute filter.\nattributeFilter2\nAnother attribute filter, reducing the selection even more\nattributeFilterN\nAs many more attribute filters as necessary\n\nDescription: Matches elements that match all of the specified attribute filters.\nExample:\n\nFinds all inputs that have an id attribute and whose name attribute ends with man and sets the value.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input id=\"man-news\" name=\"man-news\" \/&gt;\n\n  &lt;input name=\"milkman\" \/&gt;\n  &lt;input id=\"letterman\" name=\"new-letterman\" \/&gt;\n  &lt;input name=\"newmilk\" \/&gt;\n&lt;script&gt;$('input[id][name$=\"man\"]').val('only this one');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/next-siblings-selector\/","title":"Next Siblings Selector (&#8220;prev ~ siblings&#8221;)","description":"\n\nnext siblings  selector\n\n\nversion added: 1.0jQuery('prev ~ siblings')\n\nprev\nAny valid selector.\nsiblings\nA selector to filter elements that are the following siblings of the first selector.\n\nDescription: Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.\nThe notable difference between (prev + next) and (prev ~ siblings) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.\nExample:\n\nFinds all divs that are siblings after the element with #prev as its id.  Notice the span isn't selected since it is not a div and the \"niece\" isn't selected since it is a child of a sibling, not an actual sibling.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div,span {\n    display:block;\n    width:80px;\n    height:80px;\n    margin:5px;\n    background:#bbffaa;\n    float:left;\n    font-size:14px;\n  }\n  div#small {\n    width:60px;\n    height:25px;\n    font-size:12px;\n    background:#fab;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;div (doesn't match since before #prev)&lt;\/div&gt;\n  &lt;span id=\"prev\"&gt;span#prev&lt;\/span&gt;\n  &lt;div&gt;div sibling&lt;\/div&gt;\n\n  &lt;div&gt;div sibling &lt;div id=\"small\"&gt;div niece&lt;\/div&gt;&lt;\/div&gt;\n  &lt;span&gt;span sibling (not div)&lt;\/span&gt;\n  &lt;div&gt;div sibling&lt;\/div&gt;\n&lt;script&gt;$(\"#prev ~ div\").css(\"border\", \"3px groove blue\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/nextAll\/","title":"nextAll","description":"\n\n.nextAll(  [selector]  ) Returns: jQuery\n\n\nDescription: Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.2.nextAll(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .nextAll() method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at the third item, we can find the elements which come after it:\n$('li.third-item').nextAll().css('background-color', 'red');\nThe result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.\n\nExamples:\n\n\nExample: Locate all the divs after the first and give them a class.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { width: 80px; height: 80px; background: #abc; \n        border: 2px solid black; margin: 10px; float: left; }\n  div.after { border-color: red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;first&lt;\/div&gt;\n  &lt;div&gt;sibling&lt;div&gt;child&lt;\/div&gt;&lt;\/div&gt;\n  &lt;div&gt;sibling&lt;\/div&gt;\n\n  &lt;div&gt;sibling&lt;\/div&gt;\n&lt;script&gt;$(\"div:first\").nextAll().addClass(\"after\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Locate all the paragraphs after the second child in the body and give them a class.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div, p { width: 60px; height: 60px; background: #abc;\n           border: 2px solid black; margin: 10px; float: left; }\n  .after { border-color: red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;p&lt;\/p&gt;\n\n  &lt;div&gt;div&lt;\/div&gt;\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;div&gt;div&lt;\/div&gt;\n\n  &lt;p&gt;p&lt;\/p&gt;\n  &lt;div&gt;div&lt;\/div&gt;\n&lt;script&gt;\n    $(\":nth-child(1)\").nextAll(\"p\").addClass(\"after\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/nextUntil\/","title":"nextUntil","description":"\n\n.nextUntil(  [selector]  [, filter]  ) Returns: jQuery\n\n\nDescription: Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.\n\n\n\nversion added: 1.4.nextUntil(  [selector] [, filter] )\nselectorA string containing a selector expression to indicate where to stop matching following sibling elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.6.nextUntil(  [element] [, filter] )\nelementA DOM node or jQuery object indicating where to stop matching following sibling elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nGiven a selector expression that represents a set of DOM elements, the .nextUntil() method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the .nextUntil() argument.\nIf the selector is not matched or is not supplied, all following siblings will be selected; in these cases it selects the same elements as the .nextAll() method does when no filter selector is provided.\nAs of jQuery 1.6, A DOM node or jQuery object, instead of a selector, may be passed to the .nextUntil() method.\nThe method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.\n\nExample:\n\nFind the siblings that follow &lt;dt id=\"term-2\"&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id=\"term-1\"&gt; up to &lt;dt id=\"term-3\"&gt; and give them a green text color. \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;dl&gt;\n  &lt;dt id=\"term-1\"&gt;term 1&lt;\/dt&gt;\n  &lt;dd&gt;definition 1-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-b&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-c&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-d&lt;\/dd&gt;\n\n  &lt;dt id=\"term-2\"&gt;term 2&lt;\/dt&gt;\n  &lt;dd&gt;definition 2-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 2-b&lt;\/dd&gt;\n  &lt;dd&gt;definition 2-c&lt;\/dd&gt;\n\n  &lt;dt id=\"term-3\"&gt;term 3&lt;\/dt&gt;\n  &lt;dd&gt;definition 3-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 3-b&lt;\/dd&gt;\n&lt;\/dl&gt;\n&lt;script&gt;  \n$(\"#term-2\").nextUntil(\"dt\")\n  .css(\"background-color\", \"red\");\n\nvar term3 = document.getElementById(\"term-3\");\n$(\"#term-1\").nextUntil(term3, \"dd\")\n  .css(\"color\", \"green\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.noConflict\/","title":"jQuery.noConflict","description":"\n\njQuery.noConflict(  [removeAll]  ) Returns: Object\n\n\nDescription: Relinquish jQuery's control of the $ variable.\n\n\nversion added: 1.0jQuery.noConflict(  [removeAll] )\nremoveAllA Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).\n\n\nMany JavaScript libraries use  $ as a function or variable name, just as jQuery does. In jQuery's case,  $ is just an alias for jQuery, so all functionality is available without using  $. If we need to use another JavaScript library alongside jQuery, we can return control of  $ back to the other library with a call to $.noConflict():\n\n&lt;script type=\"text\/javascript\" src=\"other_lib.js\"&gt;&lt;\/script&gt;\n&lt;script type=\"text\/javascript\" src=\"jquery.js\"&gt;&lt;\/script&gt;\n&lt;script type=\"text\/javascript\"&gt;\n  $.noConflict();\n  \/\/ Code that uses other library's $ can follow here.\n&lt;\/script&gt;\n\nThis technique is especially effective in conjunction with the .ready() method's ability to alias the jQuery object, as within callback passed to .ready() we can use $ if we wish without fear of conflicts later:\n\n&lt;script type=\"text\/javascript\" src=\"other_lib.js\"&gt;&lt;\/script&gt;\n&lt;script type=\"text\/javascript\" src=\"jquery.js\"&gt;&lt;\/script&gt;\n&lt;script type=\"text\/javascript\"&gt;\n  $.noConflict();\n  jQuery(document).ready(function($) {\n    \/\/ Code that uses jQuery's $ can follow here.\n  });\n  \/\/ Code that uses other library's $ can follow here.\n&lt;\/script&gt;\n\nIf necessary, we can free up the  jQuery name as well by passing true as an argument to the method. This is rarely necessary, and if we must do this (for example, if we need to use multiple versions of the jQuery library on the same page), we need to consider that most plug-ins rely on the presence of the jQuery variable and may not operate correctly in this situation.\n\nExamples:\n\n\nExample: Maps the original object that was referenced by $ back to $.\n\njQuery.noConflict();\n\/\/ Do something with jQuery\njQuery(\"div p\").hide();\n\/\/ Do something with another library's $()\n$(\"content\").style.display = 'none';\n\n\nExample: Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.  \n\n\n\njQuery.noConflict();\n(function($) { \n  $(function() {\n    \/\/ more code using $ as alias to jQuery\n  });\n})(jQuery);\n\/\/ other code using $ as an alias to the other library\n\n\nExample: You can chain the jQuery.noConflict() with the shorthand ready for a compact code.\n\n\njQuery.noConflict()(function(){\n    \/\/ code using jQuery\n}); \n\/\/ other code using $ as an alias to the other library\n\n\nExample: Creates a different alias instead of jQuery to use in the rest of the script.\n\nvar j = jQuery.noConflict();\n\/\/ Do something with jQuery\nj(\"div p\").hide();\n\/\/ Do something with another library's $()\n$(\"content\").style.display = 'none';\n\n\nExample: Completely move jQuery to a new namespace in another object.\n\nvar dom = {};\ndom.query = jQuery.noConflict(true);\nResult:\n\/\/ Do something with the new jQuery\ndom.query(\"div p\").hide();\n\/\/ Do something with another library's $()\n$(\"content\").style.display = 'none';\n\/\/ Do something with another version of jQuery\njQuery(\"div &gt; p\").hide();\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.noop\/","title":"jQuery.noop","description":"\n\njQuery.noop() Returns: Function\n\n\nDescription: An empty function.\n\nversion added: 1.4jQuery.noop()\n\nYou can use this empty function when you wish to pass around a function that will do nothing.\nThis is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like jQuery.noop could execute.\n\n\n"},{"url":"http:\/\/api.jquery.com\/not\/","title":"not","description":"\n\n.not( selector ) Returns: jQuery\n\n\nDescription: Remove elements from the set of matched elements.\n\n\n\nversion added: 1.0.not( selector )\nselectorA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.0.not( elements )\nelementsOne or more DOM elements to remove from the matched set.\n\n\n\nversion added: 1.4.not( function(index) )\nfunction(index)A function used as a test for each element in the set. this is the current DOM element.\n\n\n\nGiven a jQuery object that represents a set of DOM elements, the .not() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can apply this method to the set of list items:\n$('li').not(':even').css('background-color', 'red');\nThe result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).\nRemoving Specific Elements\nThe second version of the .not() method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:\n\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li id=\"notli\"&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can fetch the third list item using the native JavaScript getElementById() function, then remove it from a jQuery object:\n\n$('li').not(document.getElementById('notli'))\n  .css('background-color', 'red');\n\nThis statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.\nAs of jQuery 1.4, the .not() method can take a function as its argument in the same way that .filter() does. Elements for which the function returns true are excluded from the filtered set; all other elements are included.\n\nExamples:\n\n\nExample: Adds a border to divs that are not green or blue.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:50px; height:50px; margin:10px; float:left;\n        background:yellow; border:2px solid white; }\n  .green { background:#8f8; }\n  .gray { background:#ccc; }\n  #blueone { background:#99f; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div id=\"blueone\"&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div class=\"green\"&gt;&lt;\/div&gt;\n\n  &lt;div class=\"green\"&gt;&lt;\/div&gt;\n  &lt;div class=\"gray\"&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"div\").not(\".green, #blueone\")\n            .css(\"border-color\", \"red\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Removes the element with the ID \"selected\" from the set of all paragraphs.\n\n$(\"p\").not( $(\"#selected\")[0] )\n\n\nExample: Removes the element with the ID \"selected\" from the set of all paragraphs.\n\n$(\"p\").not(\"#selected\")\n\n\nExample: Removes all elements that match \"div p.selected\" from the total set of all paragraphs.\n\n$(\"p\").not($(\"div p.selected\"))\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/not-selector\/","title":":not() Selector","description":"\n\nnot  selector\n\n\nversion added: 1.0jQuery(':not(selector)')\n\nselector\nA selector with which to filter by.\n\nDescription: Selects all elements that do not match the given selector.\n\nAll selectors are accepted inside :not(),  for example: :not(div a) and :not(div,a).\nAdditional Notes\nThe .not() method will end up providing you with more readable selections than pushing complex selectors or variables into a :not() selector filter. In most cases, it is a better choice.\n\nExample:\n\nFinds all inputs that are not checked and highlights the next sibling span.  Notice there is no change when clicking the checkboxes since no click events have been linked.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"a\" \/&gt;\n  &lt;span&gt;Mary&lt;\/span&gt;\n&lt;\/div&gt;\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"b\" \/&gt;\n  &lt;span&gt;lcm&lt;\/span&gt;\n\n&lt;\/div&gt;\n&lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"c\" checked=\"checked\" \/&gt;\n\n  &lt;span&gt;Peter&lt;\/span&gt;\n&lt;\/div&gt;\n&lt;script&gt;\n  $(\"input:not(:checked) + span\").css(\"background-color\", \"yellow\");\n  $(\"input\").attr(\"disabled\", \"disabled\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.now\/","title":"jQuery.now","description":"\n\njQuery.now() Returns: Number\n\n\nDescription: Return a number representing the current time.\n\nversion added: 1.4.3jQuery.now()\nThe $.now() method is a shorthand for the number returned by the expression (new Date).getTime().\n\n"},{"url":"http:\/\/api.jquery.com\/nth-child-selector\/","title":":nth-child() Selector","description":"\n\nnth-child  selector\n\n\nversion added: 1.1.4jQuery(':nth-child(index\/even\/odd\/equation)')\n\nindex\nThe index of each child to match, starting with 1, the string even or odd, or an equation ( eg. :nth-child(even), :nth-child(4n) )\n\nDescription: Selects all elements that are the nth-child of their parent.\n\nBecause jQuery's implementation of :nth-child(n) is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For all other selector expressions, however, jQuery follows JavaScript's \"0-indexed\" counting. Therefore, given a single &lt;ul&gt; containing two &lt;li&gt;s, $('li:nth-child(1)') selects the first &lt;li&gt; while  $('li:eq(1)') selects the second.\nThe :nth-child(n) pseudo-class is easily confused with :eq(n), even though the two can result in dramatically different matched elements. With :nth-child(n), all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With :eq(n) only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.\nFurther discussion of this unusual usage can be found in the W3C CSS specification.\n\nExamples:\n\n\nExample: Finds the second li in each matched ul and notes it.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { float:left; }\n  span { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;ul&gt;\n    &lt;li&gt;John&lt;\/li&gt;\n    &lt;li&gt;Karl&lt;\/li&gt;\n    &lt;li&gt;Brandon&lt;\/li&gt;\n\n  &lt;\/ul&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;ul&gt;\n    &lt;li&gt;Sam&lt;\/li&gt;\n  &lt;\/ul&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;ul&gt;\n    &lt;li&gt;Glen&lt;\/li&gt;\n    &lt;li&gt;Tane&lt;\/li&gt;\n    &lt;li&gt;Ralph&lt;\/li&gt;\n\n    &lt;li&gt;David&lt;\/li&gt;\n  &lt;\/ul&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"ul li:nth-child(2)\").append(\"&lt;span&gt; - 2nd!&lt;\/span&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: This is a playground to see how the selector works with different strings.  Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one.  The :nth-child, however, counts the index of the child to its particular parent.  In any case, it's easier to see than explain so...\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  button { display:block; font-size:12px; width:100px; }\n  div { float:left; margin:10px; font-size:10px; \n        border:1px solid black; }\n  span { color:blue; font-size:18px; }\n  #inner { color:red; }\n  td { width:50px; text-align:center; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;button&gt;:nth-child(even)&lt;\/button&gt;\n    &lt;button&gt;:nth-child(odd)&lt;\/button&gt;\n    &lt;button&gt;:nth-child(3n)&lt;\/button&gt;\n\n    &lt;button&gt;:nth-child(2)&lt;\/button&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;button&gt;:nth-child(3n+1)&lt;\/button&gt;\n    &lt;button&gt;:nth-child(3n+2)&lt;\/button&gt;\n\n    &lt;button&gt;:even&lt;\/button&gt;\n    &lt;button&gt;:odd&lt;\/button&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;&lt;table&gt;\n\n    &lt;tr&gt;&lt;td&gt;John&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Karl&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Brandon&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Benjamin&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Sam&lt;\/td&gt;&lt;\/tr&gt;\n\n  &lt;\/table&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Glen&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Tane&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Ralph&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;David&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Mike&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Dan&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;&lt;\/div&gt;\n  &lt;span&gt;\n    tr&lt;span id=\"inner\"&gt;&lt;\/span&gt;\n\n  &lt;\/span&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      var str = $(this).text();\n      $(\"tr\").css(\"background\", \"white\");\n      $(\"tr\" + str).css(\"background\", \"#ff0000\");\n      $(\"#inner\").text(str);\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/odd-selector\/","title":":odd Selector","description":"\n\nodd  selector\n\n\nversion added: 1.0jQuery(':odd')\nDescription: Selects odd elements, zero-indexed.  See also even.\nIn particular, note that the 0-based indexing means that, counter-intuitively, :odd selects the second element, fourth element, and so on within the matched set.\nAdditional Notes:Because :odd is a jQuery extension and not part of the CSS specification, queries using :odd cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :odd to select elements, first select the elements using a pure CSS selector, then use .filter(\":odd\").Example:\n\nFinds odd table rows, matching the second, fourth and so on (index 1, 3, 5 etc.).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  table {\n    background:#f3f7f5;\n  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #0&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #1&lt;\/td&gt;&lt;\/tr&gt;\n\n    &lt;tr&gt;&lt;td&gt;Row with Index #2&lt;\/td&gt;&lt;\/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Row with Index #3&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;\/table&gt;\n&lt;script&gt;$(\"tr:odd\").css(\"background-color\", \"#bbbbff\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/offset\/","title":"offset","description":"\nContents:\n\n\noffset() .offset()\n              \n\n\noffset( coordinates \u00a0) \n.offset( coordinates )\n              \n.offset( function(index, coords) )\n              \n\n\n\n\n\n.offset() Returns: Object\n\n\nDescription: Get the current coordinates of the first element in the set of matched elements, relative to the document.\n\nversion added: 1.2.offset()\n\nThe .offset() method allows us to retrieve the current position of an element relative to the document. Contrast this with .position(), which retrieves the current position relative to the offset parent. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), .offset() is the more useful.\n.offset() returns an object containing the properties top and left.\nNote: jQuery does not support getting the offset coordinates of hidden elements or accounting for borders, margins, or padding set on the body element.\n\nExamples:\n\n\nExample: Access the offset of the second paragraph:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { margin-left:10px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;2nd Paragraph&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:last\");\nvar offset = p.offset();\np.html( \"left: \" + offset.left + \", top: \" + offset.top );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Click to see the offset.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { margin-left:10px; color:blue; width:200px; \n    cursor:pointer; }\nspan { color:red; cursor:pointer; }\ndiv.abs { width:50px; height:50px; position:absolute;\n          left:220px; top:35px; background-color:green; \n          cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"result\"&gt;Click an element.&lt;\/div&gt;\n&lt;p&gt;\n  This is the best way to &lt;span&gt;find&lt;\/span&gt; an offset.\n&lt;\/p&gt;\n\n&lt;div class=\"abs\"&gt;\n&lt;\/div&gt;\n  \n&lt;script&gt;\n$(\"*\", document.body).click(function (e) {\n  var offset = $(this).offset();\n  e.stopPropagation();\n  $(\"#result\").text(this.tagName + \" coords ( \" + offset.left + \", \" +\n                                  offset.top + \" )\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n\n.offset( coordinates ) Returns: jQuery\n\n\nDescription: Set the current coordinates of every element in the set of matched elements, relative to the document.\n\n\n\nversion added: 1.4.offset( coordinates )\ncoordinatesAn object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.\n\n\n\nversion added: 1.4.offset( function(index, coords) )\nfunction(index, coords)A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new top and left properties.\n\n\nThe .offset() setter method allows us to reposition an element. The element's position is specified relative to the document. If the element's position style property is currently static, it will be set to relative to allow for this repositioning.\nExample:\n\nSet the offset of the second paragraph:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { margin-left:10px; } &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;2nd Paragraph&lt;\/p&gt;\n&lt;script&gt;$(\"p:last\").offset({ top: 10, left: 30 });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/off\/","title":"off","description":"\n\n.off( events [, selector]  [, handler]  ) Returns: jQuery\n\n\nDescription: Remove an event handler.\n\n\n\nversion added: 1.7.off( events [, selector] [, handler] )\neventsOne or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".\nselectorA selector which should match the one originally passed to .on() when attaching event handlers.\nhandlerA handler function previously attached for the event(s), or the special value false.\n\n\n\nversion added: 1.7.off( events-map [, selector] )\nevents-mapA map where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).\nselectorA selector which should match the one originally passed to .on() when attaching event handlers.\n\n\n\nThe off() method removes event handlers that were attached with .on(). See the discussion of delegated and directly bound events on that page for more information. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.\nIf a simple event name such as \"click\" is provided, all events of that type (both direct and delegated) are removed from the elements in the jQuery set. When writing code that will be used as a plugin, or simply when working with a large code base, best practice is to attach and remove events using namespaces so that the code will not inadvertently remove event handlers attached by other code. All events of all types in a specific namespace can be removed from an element by providing just a namespace, such as \".myPlugin\". At minimum, either a namespace or event name must be provided.\nTo remove specific delegated event handlers, provide a selector argument. The selector string must exactly match the one passed to .on() when the event handler was attached. To remove all delegated events from an element without removing non-delegated events, use the special value \"**\".\nA handler can also be removed by specifying the function name in the handler argument. When jQuery attaches an event handler, it assigns a unique id to the handler function. Handlers proxied by jQuery.proxy() or a similar mechanism will all have the same unique id (the proxy function), so passing proxied handlers to .off may remove more handlers than intended. In those situations it is better to attach and remove event handlers using namespaces.\nAs with .on(), you can pass an events-map argument instead of specifying the events and handler as separate arguments. The keys are events and\/or namespaces; the values are handler functions or the special value false.\n\nExamples:\n\n\nExample: Add and remove event handlers on the colored button.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nbutton { margin:5px; }\nbutton#theone { color:red; background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"theone\"&gt;Does nothing...&lt;\/button&gt;\n&lt;button id=\"bind\"&gt;Add Click&lt;\/button&gt;\n&lt;button id=\"unbind\"&gt;Remove Click&lt;\/button&gt;\n&lt;div style=\"display:none;\"&gt;Click!&lt;\/div&gt;\n&lt;script&gt;\nfunction aClick() {\n  $(\"div\").show().fadeOut(\"slow\");\n}\n$(\"#bind\").click(function () {\n  $(\"body\").on(\"click\", \"#theone\", aClick)\n    .find(\"#theone\").text(\"Can Click!\");\n});\n$(\"#unbind\").click(function () {\n  $(\"body\").off(\"click\", \"#theone\", aClick)\n    .find(\"#theone\").text(\"Does nothing...\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Remove all event handlers from all paragraphs:\n\n$(\"p\").off()\n\n\nExample: Remove all delegated click handlers from all paragraphs:\n\n$(\"p\").off( \"click\", \"**\" )\n\n\nExample: Remove just one previously bound handler by passing it as the third argument:\n\nvar foo = function () {\n  \/\/ code to handle some kind of event\n};\n\n\/\/ ... now foo will be called when paragraphs are clicked ...\n$(\"body\").on(\"click\", \"p\", foo);\n\n\n\/\/ ... foo will no longer be called.\n$(\"body\").off(\"click\", \"p\", foo); \n\n\nExample: Unbind all delegated event handlers by their namespace:\n\nvar validate = function () {\n  \/\/ code to validate form entries\n};\n\n\/\/ delegate events under the \".validator\" namespace\n$(\"form\").on(\"click.validator\", \"button\", validate);\n\n$(\"form\").on(\"keypress.validator\", \"input[type='text']\", validate); \n\n\/\/ remove event handlers in the \".validator\" namespace\n\n$(\"form\").off(\".validator\");\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/one\/","title":"one","description":"\n\n.one( events [, data] , handler ) Returns: jQuery\n\n\nDescription: Attach a handler to an event for the elements. The handler is executed at most once per element.\n\n\n\nversion added: 1.1.one( events [, data], handler )\neventsA string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.\ndataA map of data that will be passed to the event handler.\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.7.one( events [, selector] [, data], handler )\neventsOne or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\nselectorA selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\ndataData to be passed to the handler in event.data when an event is triggered.\nhandlerA function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n\n\n\nversion added: 1.7.one( events-map [, selector] [, data] )\nevents-mapA map in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\nselectorA selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.\ndataData to be passed to the handler in event.data when an event occurs.\n\n\n\nThe first form of this method is identical to .bind(), except that the handler is unbound after its first invocation. The second two forms, introduced in jQuery 1.7, are identical to .on() except that the handler is removed after its first invocation. For example:\n$(\"#foo\").one(\"click\", function() {\n  alert(\"This will be displayed only once.\");\n});\n\nAfter the code is executed, a click on the element with ID foo will display the alert. Subsequent clicks will do nothing. This code is equivalent to:\n$(\"#foo\").bind(\"click\", function( event ) {\n  alert(\"This will be displayed only once.\");\n  $(this).unbind( event );\n});\n\nIn other words, explicitly calling .unbind() from within a regularly-bound handler has exactly the same effect.\nIf the first argument contains more than one space-separated event types, the event handler is called once for each event type.\n\nExamples:\n\n\nExample: Tie a one-time click to each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { width:60px; height:60px; margin:5px; float:left;\nbackground:green; border:10px outset; \ncursor:pointer; }\np { color:red; margin:0; clear:left; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n\n&lt;p&gt;Click a green square...&lt;\/p&gt;\n\n&lt;script&gt;\nvar n = 0;\n$(\"div\").one(\"click\", function() {\n  var index = $(\"div\").index(this);\n  $(this).css({ \n    borderStyle:\"inset\",\n    cursor:\"auto\"\n  });\n  $(\"p\").text(\"Div at index #\" + index + \" clicked.\" +\n      \"  That's \" + ++n + \" total clicks.\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To display the text of all paragraphs in an alert box the first time each of them is clicked:\n\n$(\"p\").one(\"click\", function(){\nalert( $(this).text() );\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/on\/","title":"on","description":"\n\n.on( events [, selector]  [, data] , handler ) Returns: jQuery\n\n\nDescription: Attach an event handler function for one or more events to the selected elements.\n\n\n\nversion added: 1.7.on( events [, selector] [, data], handler )\neventsOne or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\nselectorA selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\ndataData to be passed to the handler in event.data when an event is triggered.\nhandlerA function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n\n\n\nversion added: 1.7.on( events-map [, selector] [, data] )\nevents-mapA map in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\nselectorA selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.\ndataData to be passed to the handler in event.data when an event occurs.\n\n\n\nThe .on() method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the .on() method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see .bind(),  .delegate(), and .live(). To remove events bound with .on(), see .off(). To attach an event that runs only once and then removes itself, see .one()\nEvent names and namespaces\nAny event names can be used for the events argument. jQuery will pass through the browser's standard JavaScript event types, calling the handler function when the browser generates events due to user actions such as click. In addition, the .trigger() method can trigger both standard browser event names and custom event names to call attached handlers.\nAn event name can be qualified by event namespaces that simplify removing or triggering the event. For example, \"click.myPlugin.simple\" defines both the myPlugin and simple namespaces for this particular click event. A click event handler attached via that string could be removed with .off(\"click.myPlugin\") or .off(\"click.simple\") without disturbing other click handlers attached to the elements. Namespaces are similar to CSS classes in that they are not hierarchical; only one name needs to match. Namespaces beginning with an underscore are reserved for jQuery's use.\nIn the second form of .on(), the events-map argument is a JavaScript Object, or \"map\". The keys are strings in the same form as the events argument with space-separated event type names and optional namespaces. The value for each key is a function (or false value) that is used as the handler instead of the final argument to the method. In other respects, the two forms are identical in their behavior as described below.\nDirect and delegated events\nThe majority of browser events bubble, or propagate, from the deepest, innermost element (the event target) in the document where they occur all the way up to the body and the document element. In Internet Explorer 8 and lower, a few events such as change and submit do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.\nIf selector is omitted or is null, the event handler is referred to as direct or directly-bound. The handler is called every time an event occurs on the selected elements, whether it occurs directly on the element or bubbles from a descendant (inner) element.\nWhen a selector is provided, the event handler is referred to as delegated. The handler is not called when the event occurs directly on the bound element, but only for descendants (inner elements) that match the selector. jQuery bubbles the event from the event target up to the element where the handler is attached (i.e., innermost to outermost element) and runs the handler for any elements along that path matching the selector.\nEvent handlers are bound only to the currently selected elements; they must exist on the page at the time your code makes the call to .on(). To ensure the elements are present and can be selected, perform event binding inside a document ready handler for elements that are in the HTML markup on the page. If new HTML is being injected into the page, select the elements and attach event handlers after the new HTML is placed into the page. Or, use delegated events to attach an event handler, as described next.\nDelegated events have the advantage that they can process events from descendant elements that are added to the document at a later time. By picking an element that is guaranteed to be present at the time the delegated event handler is attached, you can use delegated events to avoid the need to frequently attach and remove event handlers. This element could be the container element of a view in a Model-View-Controller design, for example, or document if the event handler wants to monitor all bubbling events in the document. The document element is available in the head of the document before loading any other HTML, so it is safe to attach events there without waiting for the document to be ready.\nIn addition to their ability to handle events on descendant elements not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its tbody, this example attaches a handler to 1,000 elements:\n\n$(\"#dataTable tbody tr\").on(\"click\", function(event){\n\talert($(this).text());\n});\n\nA delegated-events approach attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked tr to tbody):\n\n$(\"#dataTable tbody\").on(\"click\", \"tr\", function(event){\n\talert($(this).text());\n});\n\nThe event handler and its environment\nThe handler argument is a function (or the value false, see below), and is required unless the events-map form is used. You can provide an anonymous handler function at the point of the .on() call, as the examples have done above, or declare a named function and pass its name:\n\nfunction notify() { alert(\"clicked\"); }\n$(\"button\").on(\"click\", notify);\n\nWhen the browser triggers an event or other JavaScript calls jQuery's .trigger() method, jQuery passes the handler an event object it can use to analyze and change the status of the event. This object is a normalized subset of data provided by the browser; the browser's unmodified native event object is available in event.originalEvent. For example, event.type contains the event name (e.g., \"resize\") and event.target indicates the deepest (innermost) element where the event occurred.\nBy default, most events bubble up from the original event target to the document element. At each element along the way, jQuery calls any matching event handlers that have been attached. A handler can prevent the event from bubbling further up the document tree (and thus prevent handlers on those elements from running) by calling event.stopPropagation(). Any other handlers attached on the current element will run however. To prevent that, call event.stopImmediatePropagation(). (Event handlers bound to an element are called in the same order that they were bound.)\nSimilarly, a handler can call event.preventDefault() to cancel any default action that the browser may have for this event; for example, the default action on a click event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the W3C Events Specification for details.\nReturning false from an event handler will automatically call event.stopPropagation() and event.preventDefault(). A false value can also be passed for the handler as a shorthand for function(){ return false; }. So, $(\"a.disabled\").on(\"click\", false); attaches an event handler to all links with class \"disabled\" that prevents them from being followed when they are clicked and also stops the event from bubbling. \nWhen jQuery calls a handler, the this keyword is a reference to the element where the event is being delivered; for directly bound events this is the element where the event was attached and for delegated events this is an element matching selector. (Note that this may not be equal to event.target if the event has bubbled from a descendant element.) To create a jQuery object from the element so that it can be used with jQuery methods, use $(this).\nPassing data to the handler\nIf a data argument is provided to .on() and is not null or undefined, it is passed to the handler in the event.data property each time an event is triggered. The data argument can be any type, but if a string is used the selector must either be provided or explicitly passed as null so that the data is not mistaken for a selector. Best practice is to use an object (map) so that multiple values can be passed as properties.\nAs of jQuery 1.4, the same event handler can be bound to an element multiple times. This is especially useful when the event.data feature is being used, or when other unique data resides in a closure around the event handler function. For example:\n\nfunction greet(event) { alert(\"Hello \"+event.data.name); }\n$(\"button\").on(\"click\", { name: \"Karl\" }, greet);\n$(\"button\").on(\"click\", { name: \"Addy\" }, greet);\n\nThe above code will generate two different alerts when the button is clicked.\nAs an alternative or in addition to the data argument provided to the .on() method, you can also pass data to an event handler using a second argument to .trigger() or .triggerHandler().\nEvent performance\nIn most cases, an event such as click occurs infrequently and performance is not a significant concern. However, high frequency events such as mousemove or scroll can fire dozens of times per second, and in those cases it becomes more important to use events judiciously. Performance can be increased by reducing the amount of work done in the handler itself, caching information needed by the handler rather than recalculating it, or by rate-limiting the number of actual page updates using setTimeout.\nAttaching many delegated event handlers near the top of the document tree can degrade performance. Each time the event occurs, jQuery must compare all selectors of all attached events of that type to every element in the path from the event target up to the top of the document. For best performance, attach delegated events at a document location as close as possible to the target elements. Avoid excessive use of document or document.body for delegated events on large documents.\njQuery can process simple selectors of the form tag#id.class very quickly when they are used to filter delegated events. So, \"#myForm\", \"a.external\", and \"button\" are all fast selectors. Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications. Hierarchical selectors can often be avoided simply by attaching the handler to a more appropriate point in the document. For example, instead of $(\"body\").on(\"click\", \"#commentForm .addNew\", addComment) use $(\"#commentForm\").on(\"click\", \".addNew\", addComment).\nAdditional notes\nThere are shorthand methods for some events such as .click() that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the events category.\nAlthough strongly discouraged for new code, you may see the pseudo-event-name \"hover\" used as a shorthand for the string \"mouseenter mouseleave\". It attaches a single event handler for those two events, and the handler must examine event.type to determine whether the event is mouseenter or mouseleave. Do not confuse the \"hover\" pseudo-event-name with the .hover() method, which accepts one or two functions.\njQuery's event system requires that a DOM element allow attaching data via a property on the element, so that events can be tracked and delivered. The object, embed, and applet elements cannot attach data, and therefore cannot have jQuery events bound to them.\nThe focus and blur events are specified by the W3C to not bubble, but jQuery defines cross-browser focusin and focusout events that do bubble. When focus and blur are used to attach delegated event handlers, jQuery maps the names and delivers them as focusin and focusout respectively. For consistency and clarity, use the bubbling event type names.\nIn all browsers, the load event does not bubble. In Internet Explorer 8 and lower, the paste and reset events do not bubble. Such events are not supported for use with delegation, but they can be used when the event handler is directly attached to the element generating the event.\nThe error event on the window object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the window.onerror property.\n\nExamples:\n\n\nExample: Display a paragraph's text in an alert when it is clicked:\n\n$(\"p\").on(\"click\", function(){\nalert( $(this).text() );\n});\n\n\nExample: Pass data to the event handler, which is specified here by name:\n\nfunction myHandler(event) {\nalert(event.data.foo);\n}\n$(\"p\").on(\"click\", {foo: \"bar\"}, myHandler)\n\n\nExample: Cancel a form submit action and prevent the event from bubbling up by returning false:\n\n$(\"form\").on(\"submit\", false)\n\n\nExample: Cancel only the default action by using .preventDefault().\n\n$(\"form\").on(\"submit\", function(event) {\n  event.preventDefault();\n});\n\n\nExample: Stop submit events from bubbling without preventing form submit, using .stopPropagation().\n\n$(\"form\").on(\"submit\", function(event) {\n  event.stopPropagation();\n});\n\n\nExample: Attach and trigger custom (non-browser) events.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { color:red; }\nspan { color:blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Has an attached custom event.&lt;\/p&gt;\n&lt;button&gt;Trigger custom event&lt;\/button&gt;\n&lt;span style=\"display:none;\"&gt;&lt;\/span&gt;\n&lt;script&gt;\n\n$(\"p\").on(\"myCustomEvent\", function(e, myName, myValue){\n  $(this).text(myName + \", hi there!\");\n  $(\"span\").stop().css(\"opacity\", 1)\n    .text(\"myName = \" + myName)\n    .fadeIn(30).fadeOut(1000);\n});\n$(\"button\").click(function () {\n  $(\"p\").trigger(\"myCustomEvent\", [ \"John\" ]);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Attach multiple event handlers simultaneously using a map.\n\n$(\"div.test\").on({\n  click: function(){\n    $(this).addClass(\"active\");\n  },\n  mouseenter: function(){\n    $(this).addClass(\"inside\");\n  },\n  mouseleave: function(){\n    $(this).removeClass(\"inside\");\n  }\n});\n\n\nExample: Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { background:yellow; font-weight:bold; cursor:pointer;\n      padding:5px; }\n  p.over { background: #ccc; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Click me!&lt;\/p&gt;\n\n  &lt;span&gt;&lt;\/span&gt;\n&lt;script&gt;\n    var count = 0;\n    $(\"body\").on(\"click\", \"p\", function(){\n      $(this).after(\"&lt;p&gt;Another paragraph! \"+(++count)+\"&lt;\/p&gt;\");\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Display each paragraph's text in an alert box whenever it is clicked:\n\n$(\"body\").on(\"click\", \"p\", function(){\n  alert( $(this).text() );\n});\n\n\nExample: Cancel a link's default action using the preventDefault method.\n\n$(\"body\").on(\"click\", \"a\", function(event){\n  event.preventDefault();\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/offsetParent\/","title":"offsetParent","description":"\n\n.offsetParent() Returns: jQuery\n\n\nDescription: Get the closest ancestor element that is positioned.\n\nversion added: 1.2.6.offsetParent()\n\nGiven a jQuery object that represents a set of DOM elements, the .offsetParent() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of relative, absolute, or fixed. This information is useful for calculating offsets for performing animations and placing objects on the page.\nConsider a page with a basic nested list on it, with a positioned element:\n\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\" style=\"position: relative;\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at item A, we can find its positioned ancestor:\n$('li.item-a').offsetParent().css('background-color', 'red');\nThis will change the color of list item II, which is positioned.\n\nExample:\n\nFind the offsetParent of item \"A.\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n    &lt;ul class=\"level-1\"&gt;\n      &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n      &lt;li class=\"item-ii\" style=\"position: relative;\"&gt;II\n        &lt;ul class=\"level-2\"&gt;\n          &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n          &lt;li class=\"item-b\"&gt;B\n            &lt;ul class=\"level-3\"&gt;\n              &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n              &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n              &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n            &lt;\/ul&gt;\n          &lt;\/li&gt;\n          &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n    &lt;\/ul&gt;\n  \n&lt;script&gt;$('li.item-a').offsetParent().css('background-color', 'red');&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/only-child-selector\/","title":":only-child Selector","description":"\n\nonly-child  selector\n\n\nversion added: 1.1.4jQuery(':only-child')\nDescription: Selects all elements that are the only child of their parent.\nIf the parent has other child elements, nothing is matched.\nExample:\n\nChange the text and add a border for each button that is the only child of its parent.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:100px; height:80px; margin:5px; float:left; background:#b9e }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n&lt;\/div&gt;\n\n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n&lt;\/div&gt;\n&lt;div&gt;\n  None\n&lt;\/div&gt;\n\n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n\n&lt;\/div&gt;\n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;\/button&gt;\n&lt;\/div&gt;\n&lt;script&gt;\n  $(\"div button:only-child\").text(\"Alone\").css(\"border\", \"2px blue solid\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/outerHeight\/","title":"outerHeight","description":"\n\n.outerHeight(  [includeMargin]  ) Returns: Integer\n\n\nDescription: Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without \"px\") representation of the value or null if called on an empty set of elements.\n\n\nversion added: 1.2.6.outerHeight(  [includeMargin] )\nincludeMarginA Boolean indicating whether to include the element's margin in the calculation.\n\n\nThe top and bottom padding and border are always included in the .outerHeight() calculation; if the includeMargin argument is set to true, the margin (top and bottom) is also included.\nThis method is not applicable to window and document objects; for these, use .height() instead.\n\n\nExample:\n\nGet the outerHeight of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { margin:10px;padding:5px;border:2px solid #666; } &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n$(\"p:last\").text( \"outerHeight:\" + p.outerHeight() + \" , outerHeight(true):\" + p.outerHeight(true) );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/outerWidth\/","title":"outerWidth","description":"\n\n.outerWidth(  [includeMargin]  ) Returns: Integer\n\n\nDescription: Get the current computed width for the first element in the set of matched elements, including padding and border.\n\n\nversion added: 1.2.6.outerWidth(  [includeMargin] )\nincludeMarginA Boolean indicating whether to include the element's margin in the calculation.\n\n\nReturns the width of the element, along with left and right padding, border, and optionally margin, in pixels.\nIf includeMargin is omitted or false, the padding and border are included in the calculation; if true, the margin is also included.\nThis method is not applicable to window and document objects; for these, use .width() instead.\n\n\nExample:\n\nGet the outerWidth of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin:10px;padding:5px;border:2px solid #666; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n$(\"p:last\").text( \"outerWidth:\" + p.outerWidth()+ \" , outerWidth(true):\" + p.outerWidth(true) );\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/parent\/","title":"parent","description":"\n\n.parent(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the parent of each element in the current set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.0.parent(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .parent() method allows us to search through the parents of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .parents() and .parent() methods are similar, except that the latter only travels a single level up the DOM tree.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a basic nested list on it:\n\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at item A, we can find its parents:\n$('li.item-a').parent().css('background-color', 'red');\nThe result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.\n\nExamples:\n\n\nExample: Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div,p { margin:10px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;div, \n    &lt;span&gt;span, &lt;\/span&gt;\n    &lt;b&gt;b &lt;\/b&gt;\n\n  &lt;\/div&gt;\n  &lt;p&gt;p, \n    &lt;span&gt;span, \n      &lt;em&gt;em &lt;\/em&gt;\n    &lt;\/span&gt;\n  &lt;\/p&gt;\n\n  &lt;div&gt;div, \n    &lt;strong&gt;strong, \n      &lt;span&gt;span, &lt;\/span&gt;\n      &lt;em&gt;em, \n        &lt;b&gt;b, &lt;\/b&gt;\n      &lt;\/em&gt;\n\n    &lt;\/strong&gt;\n    &lt;b&gt;b &lt;\/b&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"*\", document.body).each(function () {\n      var parentTag = $(this).parent().get(0).tagName;\n      $(this).prepend(document.createTextNode(parentTag + \" &gt; \"));\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find the parent element of each paragraph with a class \"selected\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;p&gt;Hello&lt;\/p&gt;&lt;\/div&gt;\n\n  &lt;div class=\"selected\"&gt;&lt;p&gt;Hello Again&lt;\/p&gt;&lt;\/div&gt;\n\n&lt;script&gt;$(\"p\").parent(\".selected\").css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.param\/","title":"jQuery.param","description":"\n\njQuery.param( obj ) Returns: String\n\n\nDescription: Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. \n\n\n\nversion added: 1.2jQuery.param( obj )\nobjAn array or object to serialize.\n\n\n\nversion added: 1.4jQuery.param( obj, traditional )\nobjAn array or object to serialize.\ntraditionalA Boolean indicating whether to perform a traditional \"shallow\" serialization.\n\n\n\nThis function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).\nAs of jQuery 1.3, the return value of a function is used instead of the function as a String.\nAs of jQuery 1.4, the $.param() method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting jQuery.ajaxSettings.traditional = true;.\nIf the object passed is in an Array, it must be an array of objects in the format returned by .serializeArray()\n[{name:\"first\",value:\"Rick\"},\n{name:\"last\",value:\"Astley\"},\n{name:\"job\",value:\"Rock Star\"}]\n\n    Note: Because some frameworks have limited ability to parse serialized arrays, developers should exercise caution when passing an obj argument that contains objects or arrays nested within another array.\n\n\nNote: Because there is no universally agreed-upon specification for param strings, it is not possible to encode complex data structures using this method in a manner that works ideally across all languages supporting such input. Until such time that there is, the $.param method will remain in its current form.\n\nIn jQuery 1.4, HTML5 input elements are also serialized.\nWe can display a query string representation of an object and a URI-decoded version of the same as follows:\nvar myObject = {\n  a: {\n    one: 1, \n    two: 2, \n    three: 3\n  }, \n  b: [1,2,3]\n};\nvar recursiveEncoded = $.param(myObject);\nvar recursiveDecoded = decodeURIComponent($.param(myObject));\n\nalert(recursiveEncoded);\nalert(recursiveDecoded);\n\nThe values of recursiveEncoded and recursiveDecoded are alerted as follows:\na%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3\na[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3\nTo emulate the behavior of $.param() prior to jQuery 1.4, we can set the traditional argument to true:\nvar myObject = {\n  a: {\n    one: 1, \n    two: 2, \n    three: 3\n  }, \n  b: [1,2,3]\n};\nvar shallowEncoded = $.param(myObject, true);\nvar shallowDecoded = decodeURIComponent(shallowEncoded);\n\nalert(shallowEncoded);\nalert(shallowDecoded);\n\nThe values of shallowEncoded and shallowDecoded are alerted as follows:\na=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3\na=[object+Object]&amp;b=1&amp;b=2&amp;b=3\n\nExamples:\n\n\nExample: Serialize a key\/value object.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { color:red; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"results\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    var params = { width:1680, height:1050 };\n    var str = jQuery.param(params);\n    $(\"#results\").text(str);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Serialize a few complex objects\n\n\n\/\/ &lt;=1.3.2: \n$.param({ a: [2,3,4] }) \/\/ \"a=2&amp;a=3&amp;a=4\"\n\/\/ &gt;=1.4:\n$.param({ a: [2,3,4] }) \/\/ \"a[]=2&amp;a[]=3&amp;a[]=4\"\n\n\/\/ &lt;=1.3.2: \n$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) \/\/ \"a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]\"\n\/\/ &gt;=1.4: \n$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) \/\/ \"a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5\"\n\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/parents\/","title":"parents","description":"\n\n.parents(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.0.parents(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .parents() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. The .parents() and .parent() methods are similar, except that the latter only travels a single level up the DOM tree.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a basic nested list on it:\n\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at item A, we can find its ancestors:\n$('li.item-a').parents().css('background-color', 'red');\nThe result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the &lt;html&gt; element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.\n\nExamples:\n\n\nExample: Find all parent elements of each b.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  b, span, p, html body {\n    padding: .5em;\n    border: 1px solid;\n  }\n  b { color:blue; }\n  strong { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;p&gt;\n      &lt;span&gt;\n        &lt;b&gt;My parents are: &lt;\/b&gt;\n      &lt;\/span&gt;\n\n    &lt;\/p&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\nvar parentEls = $(\"b\").parents()\n            .map(function () { \n                  return this.tagName; \n                })\n            .get().join(\", \");\n$(\"b\").append(\"&lt;strong&gt;\" + parentEls + \"&lt;\/strong&gt;\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Click to find all unique div parent elements of each span.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p, div, span {margin:2px; padding:1px; }\n  div { border:2px white solid; }\n  span { cursor:pointer; font-size:12px; }\n  .selected { color:blue; }\n  b { color:red; display:block; font-size:14px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n    &lt;div&gt;\n      &lt;div&gt;&lt;span&gt;Hello&lt;\/span&gt;&lt;\/div&gt;\n      &lt;span&gt;Hello Again&lt;\/span&gt;\n\n    &lt;\/div&gt;\n    &lt;div&gt;\n      &lt;span&gt;And Hello Again&lt;\/span&gt;\n    &lt;\/div&gt;\n  &lt;\/p&gt;\n\n  &lt;b&gt;Click Hellos to toggle their parents.&lt;\/b&gt;\n&lt;script&gt;\nfunction showParents() {\n  $(\"div\").css(\"border-color\", \"white\");\n  var len = $(\"span.selected\")\n                   .parents(\"div\")\n                   .css(\"border\", \"2px red solid\")\n                   .length;\n  $(\"b\").text(\"Unique div parents: \" + len);\n}\n$(\"span\").click(function () {\n  $(this).toggleClass(\"selected\");\n  showParents();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/parentsUntil\/","title":"parentsUntil","description":"\n\n.parentsUntil(  [selector]  [, filter]  ) Returns: jQuery\n\n\nDescription: Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n\n\n\nversion added: 1.4.parentsUntil(  [selector] [, filter] )\nselectorA string containing a selector expression to indicate where to stop matching ancestor elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.6.parentsUntil(  [element] [, filter] )\nelementA DOM node or jQuery object indicating where to stop matching ancestor elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nGiven a selector expression that represents a set of DOM elements, the .parentsUntil() method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the .parentsUntil() selector.\nIf the selector is not matched or is not supplied, all ancestors will be selected; in these cases it selects the same elements as the .parents() method does when no selector is provided.\nAs of jQuery 1.6, A DOM node or jQuery object, instead of a selector, may be used for the first .parentsUntil() argument.\nThe method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.\n\nExample:\n\nFind the ancestors of &lt;li class=\"item-a\"&gt; up to &lt;ul class=\"level-1\"&gt; and give them a red background color. Also, find ancestors of &lt;li class=\"item-2\"&gt; that have a class of \"yes\" up to &lt;ul class=\"level-1\"&gt; and give them a green border.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul class=\"level-1 yes\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;\/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2 yes\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;\/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;\/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;\/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;\/li&gt;\n        &lt;\/ul&gt;\n      &lt;\/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;\/li&gt;\n    &lt;\/ul&gt;\n  &lt;\/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;\/li&gt;\n&lt;\/ul&gt;\n&lt;script&gt;\n$(\"li.item-a\").parentsUntil(\".level-1\")\n  .css(\"background-color\", \"red\");\n\n$(\"li.item-2\").parentsUntil( $(\"ul.level-1\"), \".yes\" )\n  .css(\"border\", \"3px solid green\");\n    \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.parseXML\/","title":"jQuery.parseXML","description":"\n\njQuery.parseXML( data ) Returns: XMLDocument\n\n\nDescription: Parses a string into an XML document.\n\n\nversion added: 1.5jQuery.parseXML( data )\ndataa well-formed XML string to be parsed\n\njQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.\nExample:\n\nCreate a jQuery object using an XML string and obtain the value of the title node.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p id=\"someElement\"&gt;&lt;\/p&gt;\n&lt;p id=\"anotherElement\"&gt;&lt;\/p&gt;\n\n  \n\n&lt;script&gt;\nvar xml = \"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;\/title&gt;&lt;\/channel&gt;&lt;\/rss&gt;\",\n    xmlDoc = $.parseXML( xml ),\n    $xml = $( xmlDoc ),\n    $title = $xml.find( \"title\" );\n\n\/* append \"RSS Title\" to #someElement *\/\n$( \"#someElement\" ).append( $title.text() );\n\n\/* change the title to \"XML Title\" *\/\n$title.text( \"XML Title\" );\n\n\/* append \"XML Title\" to #anotherElement *\/\n$( \"#anotherElement\" ).append( $title.text() );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.parseJSON\/","title":"jQuery.parseJSON","description":"\n\njQuery.parseJSON( json ) Returns: Object\n\n\nDescription: Takes a well-formed JSON string and returns the resulting JavaScript object.\n\n\nversion added: 1.4.1jQuery.parseJSON( json )\njsonThe JSON string to parse.\n\n\nPassing in a malformed JSON string may result in an exception being thrown. For example, the following are all malformed JSON strings:\n\n\n{test: 1} (test does not have double quotes around it).\n\n{'test': 1} ('test' is using single quotes instead of double quotes).\n\nAdditionally if you pass in nothing, an empty string, null, or undefined, 'null' will be returned from parseJSON. Where the browser provides a native implementation of JSON.parse, jQuery uses it to parse the string. For details on the JSON format, see http:\/\/json.org\/.\n\n\nExample:\n\nParse a JSON string.\nvar obj = jQuery.parseJSON('{\"name\":\"John\"}');\nalert( obj.name === \"John\" );\n\n\n"},{"url":"http:\/\/api.jquery.com\/password-selector\/","title":":password Selector","description":"\n\npassword  selector\n\n\nversion added: 1.0jQuery(':password')\nDescription: Selects all elements of type password.\n$(':password') is equivalent to $('[type=password]'). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':password') is equivalent to $('*:password'), so $('input:password') should be used instead. \nAdditional Notes:Because :password is a jQuery extension and not part of the CSS specification, queries using :password cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"password\"] instead.Example:\n\nFinds all password inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"input:password\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/position\/","title":"position","description":"\n\n.position() Returns: Object\n\n\nDescription: Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.\n\nversion added: 1.2.position()\n\nThe .position() method allows us to retrieve the current position of an element relative to the offset parent. Contrast this with .offset(), which retrieves the current position relative to the document. When positioning a new element near another one and within the same containing DOM element, .position() is the more useful.\nReturns an object containing the properties top and left.\n\nExample:\n\nAccess the position of the second paragraph:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { padding: 15px;}\n  p { margin-left:10px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n&lt;\/div&gt;\n&lt;p&gt;&lt;\/p&gt;\n\n&lt;script&gt;\nvar p = $(\"p:first\");\nvar position = p.position();\n$(\"p:last\").text( \"left: \" + position.left + \", top: \" + position.top );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.post\/","title":"jQuery.post","description":"\n\njQuery.post( url [, data]  [, success(data, textStatus, jqXHR)]  [, dataType]  ) Returns: jqXHR\n\n\nDescription: Load data from the server using a HTTP POST request.\n\n\nversion added: 1.0jQuery.post( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )\nurlA string containing the URL to which the request is sent.\ndataA map or string that is sent to the server with the request.\nsuccess(data, textStatus, jqXHR)A callback function that is executed if the request succeeds.\ndataTypeThe type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n\n\nThis is a shorthand Ajax function, which is equivalent to:\n$.ajax({\n  type: 'POST',\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n\nThe success callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.\nAs of jQuery 1.5, the success callback function is also passed a \"jqXHR\" object (in jQuery 1.4, it was passed the XMLHttpRequest object).\nMost implementations will specify a success handler:\n$.post('ajax\/test.html', function(data) {\n  $('.result').html(data);\n});\n\nThis example fetches the requested HTML snippet and inserts it on the page.\nPages fetched with POST are never cached, so the cache and ifModified options in jQuery.ajaxSetup() have no effect on these requests.\nThe jqXHR Object\nAs of jQuery 1.5, all of jQuery's Ajax methods return  a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.post() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). For convenience and consistency with the callback names used by $.ajax(), it provides .error(), .success(), and .complete() methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named $.ajax() callback.\nThe Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.post(), to chain multiple .success(), .complete(), and .error() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.\n\/\/ Assign handlers immediately after making the request,\n    \/\/ and remember the jqxhr object for this request\n    var jqxhr = $.post(\"example.php\", function() {\n      alert(\"success\");\n    })\n    .success(function() { alert(\"second success\"); })\n    .error(function() { alert(\"error\"); })\n    .complete(function() { alert(\"complete\"); });\n\n    \/\/ perform other work here ...\n\n    \/\/ Set another completion function for the request above\n    jqxhr.complete(function(){ alert(\"second complete\"); });\n\nAdditional Notes:Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, or protocol.If a request with jQuery.post() returns an error code, it will fail silently unless the script has also called the global .ajaxError()  method. Alternatively, as of jQuery 1.5, the .error() method of the jqXHR object returned by jQuery.post() is also available for error handling.Examples:\n\n\nExample: Request the test.php page, but ignore the return results.\n\n$.post(\"test.php\");\n\n\nExample: Request the test.php page and send some additional data along (while still ignoring the return results).\n\n$.post(\"test.php\", { name: \"John\", time: \"2pm\" } );\n\n\nExample: pass arrays of data to the server (while still ignoring the return results).\n\n$.post(\"test.php\", { 'choices[]': [\"Jon\", \"Susan\"] });\n\n\nExample: send form data using ajax requests\n\n$.post(\"test.php\", $(\"#testform\").serialize());\n\n\nExample: Alert out the results from requesting test.php (HTML or XML, depending on what was returned).\n\n$.post(\"test.php\", function(data) {\n   alert(\"Data Loaded: \" + data);\n });\n\n\nExample: Alert out the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).\n\n$.post(\"test.php\", { name: \"John\", time: \"2pm\" },\n   function(data) {\n     alert(\"Data Loaded: \" + data);\n   });\n\n\nExample: Gets the test.php page content, store it in a XMLHttpResponse object and applies the process() JavaScript function.\n\n$.post(\"test.php\", { name: \"John\", time: \"2pm\" },\n function(data) {\n   process(data);\n }, \n \"xml\"\n);\n\n\nExample: Posts to the test.php page and gets contents which has been returned in json format (&lt;?php echo json_encode(array(\"name\"=&gt;\"John\",\"time\"=&gt;\"2pm\")); ?&gt;).\n\n$.post(\"test.php\", { \"func\": \"getNameAndTime\" },\n function(data){\n   console.log(data.name); \/\/ John\n   console.log(data.time); \/\/  2pm\n }, \"json\");\n\n\nExample: Post a form using ajax and put results in a div\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form action=\"\/\" id=\"searchForm\"&gt;\n   &lt;input type=\"text\" name=\"s\" placeholder=\"Search...\" \/&gt;\n   &lt;input type=\"submit\" value=\"Search\" \/&gt;\n  &lt;\/form&gt;\n  &lt;!-- the result of the search will be rendered inside this div --&gt;\n  &lt;div id=\"result\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n  \/* attach a submit handler to the form *\/\n  $(\"#searchForm\").submit(function(event) {\n\n    \/* stop form from submitting normally *\/\n    event.preventDefault(); \n        \n    \/* get some values from elements on the page: *\/\n    var $form = $( this ),\n        term = $form.find( 'input[name=\"s\"]' ).val(),\n        url = $form.attr( 'action' );\n\n    \/* Send the data using post and put the results in a div *\/\n    $.post( url, { s: term },\n      function( data ) {\n          var content = $( data ).find( '#content' );\n          $( \"#result\" ).empty().append( content );\n      }\n    );\n  });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prependTo\/","title":"prependTo","description":"\n\n.prependTo( target ) Returns: jQuery\n\n\nDescription: Insert every element in the set of matched elements to the beginning of the target.\n\n\nversion added: 1.0.prependTo( target )\ntargetA selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.\n\n\nThe .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.\nConsider the following HTML:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can create content and insert it into several elements at once:\n$('&lt;p&gt;Test&lt;\/p&gt;').prependTo('.inner');\nEach inner &lt;div&gt; element gets this new content:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;\/p&gt;\n    Hello\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;\/p&gt;\n    Goodbye\n  &lt;\/div&gt;\n&lt;\/div&gt;\nWe can also select an element on the page and insert it into another:\n$('h2').prependTo($('.container'));\nIf an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;\/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nIf there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.\n\nExample:\n\nPrepends all spans to the element with the ID \"foo\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div id=\"foo\"&gt;FOO!&lt;\/div&gt;\n\n  &lt;span&gt;I have something to say... &lt;\/span&gt;\n&lt;script&gt;$(\"span\").prependTo(\"#foo\"); \/\/ check prepend() examples&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prepend\/","title":"prepend","description":"\n\n.prepend( content [, content]  ) Returns: jQuery\n\n\nDescription: Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n\n\n\nversion added: 1.0.prepend( content [, content] )\ncontentDOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.\ncontentOne or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.\n\n\n\nversion added: 1.4.prepend( function(index, html) )\nfunction(index, html)A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.\n\n\n\nThe .prepend() method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the last child, use .append()). \nThe .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax\u2014specifically, in the placement of the content and target. With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.\nConsider the following HTML:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nYou can create content and insert it into several elements at once:\n$('.inner').prepend('&lt;p&gt;Test&lt;\/p&gt;');\nEach &lt;div class=\"inner\"&gt; element gets this new content:\n&lt;h2&gt;Greetings&lt;\/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;\/p&gt;\n    Hello\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;\/p&gt;\n    Goodbye\n  &lt;\/div&gt;\n&lt;\/div&gt;\nYou can also select an element on the page and insert it into another:\n$('.container').prepend($('h2'));\nIf a single element selected this way is inserted elsewhere, it will be moved into the target (not cloned):\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;Greetings&lt;\/h2&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nImportant: If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.\nAdditional Arguments\nSimilar to other content-adding methods such as .append() and .before(), .prepend() also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.\nFor example, the following will insert two new &lt;div&gt;s and an existing &lt;div&gt; as the first three child nodes of the body:\nvar $newdiv1 = $('&lt;div id=\"object1\"\/&gt;'),\n    newdiv2 = document.createElement('div'),\n    existingdiv1 = document.getElementById('foo');\n\n$('body').prepend($newdiv1, [newdiv2, existingdiv1]);\n\nSince .prepend() can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;div&gt;s as three separate arguments, like so: $('body').prepend($newdiv1, newdiv2, existingdiv1). The type and number of arguments will largely depend on how you collect the elements in your code.\n\nExamples:\n\n\nExample: Prepends some HTML to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;there, friend!&lt;\/p&gt;\n\n&lt;p&gt;amigo!&lt;\/p&gt;\n&lt;script&gt;$(\"p\").prepend(\"&lt;b&gt;Hello &lt;\/b&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Prepends a DOM Element to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;is what I'd say&lt;\/p&gt;\n&lt;p&gt;is what I said&lt;\/p&gt;\n&lt;script&gt;$(\"p\").prepend(document.createTextNode(\"Hello \"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt; is what was said.&lt;\/p&gt;&lt;b&gt;Hello&lt;\/b&gt;\n&lt;script&gt;$(\"p\").prepend( $(\"b\") );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/parent-selector\/","title":":parent Selector","description":"\n\nparent  selector\n\n\nversion added: 1.0jQuery(':parent')\nDescription: Select all elements that are the parent of another element, including text nodes.\n\nThis is the inverse of :empty. \nOne important thing to note regarding the use of :parent (and :empty) is that child elements include text nodes.\nThe W3C recommends that the &lt;p&gt; element have at least one child node, even if that child is merely text (see http:\/\/www.w3.org\/TR\/html401\/struct\/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &lt;input&gt;, &lt;img&gt;, &lt;br&gt;, and &lt;hr&gt;, for example.\n\nAdditional Notes:Because :parent is a jQuery extension and not part of the CSS specification, queries using :parent cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :parent to select elements, first select the elements using a pure CSS selector, then use .filter(\":parent\").Example:\n\nFinds all tds with children, including text.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  td { width:40px; background:green; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;table border=\"1\"&gt;\n\n  &lt;tr&gt;&lt;td&gt;Value 1&lt;\/td&gt;&lt;td&gt;&lt;\/td&gt;&lt;\/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Value 2&lt;\/td&gt;&lt;td&gt;&lt;\/td&gt;&lt;\/tr&gt;\n\n&lt;\/table&gt;\n&lt;script&gt;$(\"td:parent\").fadeTo(1500, 0.3);&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prev\/","title":"prev","description":"\n\n.prev(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.0.prev(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .prev() method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.\nThe method optionally accepts a selector expression of the same type that can be passed to the $() function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nTo select the element that comes immediately before item three:\n$('li.third-item').prev().css('background-color', 'red');\nThe result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.\nIf no previous sibling exists, or if the previous sibling element does not match a supplied selector, an empty jQuery object is returned.\nTo select all preceding sibling elements, rather than just the preceding adjacent sibling, use the .prevAll() method.\n\nExamples:\n\n\nExample: Find the very previous sibling of each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:40px; height:40px; margin:10px;\n        float:left; border:2px blue solid; \n        padding:2px; }\n  span { font-size:14px; }\n  p { clear:left; margin:10px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;span&gt;has child&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div id=\"start\"&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;p&gt;&lt;button&gt;Go to Prev&lt;\/button&gt;&lt;\/p&gt;\n&lt;script&gt;\n    var $curr = $(\"#start\");\n    $curr.css(\"background\", \"#f99\");\n    $(\"button\").click(function () {\n      $curr = $curr.prev();\n      $(\"div\").css(\"background\", \"\");\n      $curr.css(\"background\", \"#f99\");\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: For each paragraph, find the very previous sibling that has a class \"selected\".\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;span&gt;Hello&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;p class=\"selected\"&gt;Hello Again&lt;\/p&gt;\n  &lt;p&gt;And Again&lt;\/p&gt;\n&lt;script&gt;$(\"p\").prev(\".selected\").css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prevUntil\/","title":"prevUntil","description":"\n\n.prevUntil(  [selector]  [, filter]  ) Returns: jQuery\n\n\nDescription: Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.\n\n\n\nversion added: 1.4.prevUntil(  [selector] [, filter] )\nselectorA string containing a selector expression to indicate where to stop matching preceding sibling elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nversion added: 1.6.prevUntil(  [element] [, filter] )\nelementA DOM node or jQuery object indicating where to stop matching preceding sibling elements.\nfilterA string containing a selector expression to match elements against.\n\n\n\nGiven a selector expression that represents a set of DOM elements, the .prevUntil() method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the .prevUntil() selector; the elements are returned in order from the closest sibling to the farthest.\nIf the selector is not matched or is not supplied, all previous siblings will be selected; in these cases it selects the same elements as the .prevAll() method does when no filter selector is provided.\nAs of jQuery 1.6, A DOM node or jQuery object, instead of a selector, may be used for the first .prevUntil() argument.\nThe method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.\n\nExample:\n\nFind the siblings that precede &lt;dt id=\"term-2\"&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id=\"term-3\"&gt; up to &lt;dt id=\"term-1\"&gt; and give them a green text color.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;dl&gt;\n  &lt;dt id=\"term-1\"&gt;term 1&lt;\/dt&gt;\n  &lt;dd&gt;definition 1-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-b&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-c&lt;\/dd&gt;\n  &lt;dd&gt;definition 1-d&lt;\/dd&gt;\n\n  &lt;dt id=\"term-2\"&gt;term 2&lt;\/dt&gt;\n  &lt;dd&gt;definition 2-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 2-b&lt;\/dd&gt;\n  &lt;dd&gt;definition 2-c&lt;\/dd&gt;\n\n  &lt;dt id=\"term-3\"&gt;term 3&lt;\/dt&gt;\n  &lt;dd&gt;definition 3-a&lt;\/dd&gt;\n  &lt;dd&gt;definition 3-b&lt;\/dd&gt;\n&lt;\/dl&gt;\n&lt;script&gt;  \n$(\"#term-2\").prevUntil(\"dt\")\n  .css(\"background-color\", \"red\");\n  \nvar term1 = document.getElementById('term-1');\n$(\"#term-3\").prevUntil(term1, \"dd\")\n  .css(\"color\", \"green\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/promise\/","title":"promise","description":"\n\n.promise(  [type]  [, target]  ) Returns: Promise\n\n\nDescription:  Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. \n\n\nversion added: 1.6.promise(  [type] [, target] )\ntype The type of queue that needs to be observed. \ntargetObject onto which the promise methods have to be attached\n\n\nThe .promise() method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.\n By default, type is \"fx\", which means the returned Promise is resolved when all animations of the selected elements have completed.\n Resolve context and sole argument is the collection onto which .promise() has been called. \n If target is provided, .promise() will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.\nNote: The returned Promise is linked to a Deferred object stored on the .data() for an element. Since the .remove() method removes the element's data as well as the element itself, it will prevent any of the element's unresolved Promises from resolving. If it is necessary to remove an element from the DOM before its Promise is resolved, use .detach() instead and follow with .removeData() after resolution.\n\nExamples:\n\n\nExample: Using .promise() on a collection with no active animation returns a resolved Promise:\n\n\nvar div = $( \"&lt;div \/&gt;\" );\n\ndiv.promise().done(function( arg1 ) {\n  \/\/ will fire right away and alert \"true\"\n  alert( this === div &amp;&amp; arg1 === div );\n});\n\n\n\nExample: Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\n  height: 50px; width: 50px;\n  float: left; margin-right: 10px;\n  display: none; background-color: #090;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;Go&lt;\/button&gt;\n&lt;p&gt;Ready...&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\n$(\"button\").bind( \"click\", function() {\n  $(\"p\").append( \"Started...\");\n  \n  $(\"div\").each(function( i ) {\n    $( this ).fadeIn().fadeOut( 1000 * (i+1) );\n  });\n\n  $( \"div\" ).promise().done(function() {\n    $( \"p\" ).append( \" Finished! \" );\n  });\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv {\n  height: 50px; width: 50px;\n  float: left; margin-right: 10px;\n  display: none; background-color: #090;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;Go&lt;\/button&gt;\n&lt;p&gt;Ready...&lt;\/p&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n\n\n&lt;script&gt;\nvar effect = function() {\n  return $(\"div\").fadeIn(800).delay(1200).fadeOut();\n};\n\n$(\"button\").bind( \"click\", function() {\n  $(\"p\").append( \" Started... \");\n\n  $.when( effect() ).done(function() {\n    $(\"p\").append(\" Finished! \");\n  });\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prop\/","title":"prop","description":"\nContents:\n\n\nprop( propertyName \u00a0) .prop( propertyName )\n              \n\n\nprop( propertyName , value \u00a0) \n.prop( propertyName, value )\n              \n.prop( map )\n              \n.prop( propertyName, function(index, oldPropertyValue) )\n              \n\n\n\n\n\n.prop( propertyName ) Returns: String\n\n\nDescription: Get the value of a property for the first element in the set of matched elements.\n\n\nversion added: 1.6.prop( propertyName )\npropertyNameThe name of the property to get.\n\n\nThe .prop() method gets the property value for only the first element in the matched set. It returns undefined for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.\nThe difference between attributes and properties can be important in specific situations. Before jQuery 1.6, the .attr() method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. As of jQuery 1.6, the .prop() method provides a way to explicitly retrieve property values, while .attr() retrieves attributes.\nFor example, selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, and defaultSelected should be retrieved and set with the .prop() method. Prior to jQuery 1.6, these properties were retrievable with the .attr() method, but this was not within the scope of attr. These do not have corresponding attributes and are only properties.\nConcerning boolean attributes, consider a DOM element defined by the HTML markup &lt;input type=\"checkbox\" checked=\"checked\" \/&gt;, and assume it is in a JavaScript variable named elem:\n\n \n  elem.checked\n  \ntrue (Boolean) Will change with checkbox state\n \n \n  $(elem).prop(\"checked\")\n  \ntrue (Boolean) Will change with checkbox state\n \n \n  elem.getAttribute(\"checked\")\n  \n\"checked\" (String) Initial state of the checkbox; does not change\n \n \n  \n$(elem).attr(\"checked\")(1.6)\n\n  \n\"checked\" (String) Initial state of the checkbox; does not change\n \n \n  \n$(elem).attr(\"checked\")(1.6.1+)\n\n  \n\"checked\" (String) Will change with checkbox state\n \n \n  \n$(elem).attr(\"checked\")(pre-1.6)\n\n  \ntrue (Boolean) Changed with checkbox state\n \n\n\nAccording to the W3C forms specification, the checked attribute is a boolean attribute, which means the corresponding property is true if the attribute is present at all\u2014even if, for example, the attribute has no value or an empty string value. The preferred cross-browser-compatible way to determine if a checkbox is checked is to check for a \"truthy\" value on the element's property using one of the following:\n\n    if ( elem.checked )\n    if ( $(elem).prop(\"checked\") )\n    if ( $(elem).is(\":checked\") )\n  \nIf using jQuery 1.6, the code if ( $(elem).attr(\"checked\") ) will retrieve the actual content attribute, which does not change as the checkbox is checked and unchecked. It is meant only to store the default or initial value of the checked property. To maintain backwards compatability, the .attr() method in jQuery 1.6.1+ will retrieve and update the property for you so no code for boolean attributes is required to be changed to .prop().  Nevertheless, the preferred way to retrieve a checked value is with one of the options listed above. To see how this works in the latest jQuery, check\/uncheck the checkbox in the example below.\n\nAdditional Notes:In Internet Explorer prior to version 9, using .prop() to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using .removeProp()) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use .data().Example:\n\nDisplay the checked property and attribute of a checkbox as it changes.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 20px 0 0 }\n  b { color: blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;input id=\"check1\" type=\"checkbox\" checked=\"checked\"&gt;\n&lt;label for=\"check1\"&gt;Check me&lt;\/label&gt;\n&lt;p&gt;&lt;\/p&gt;\n\n&lt;script&gt;\n$(\"input\").change(function() {\n  var $input = $(this);\n  $(\"p\").html(\".attr('checked'): &lt;b&gt;\" + $input.attr('checked') + \"&lt;\/b&gt;&lt;br&gt;\"\n              + \".prop('checked'): &lt;b&gt;\" + $input.prop('checked') + \"&lt;\/b&gt;&lt;br&gt;\"\n              + \".is(':checked'): &lt;b&gt;\" + $input.is(':checked') ) + \"&lt;\/b&gt;\";\n}).change();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.prop( propertyName, value ) Returns: jQuery\n\n\nDescription: Set one or more properties for the set of matched elements.\n\n\n\nversion added: 1.6.prop( propertyName, value )\npropertyNameThe name of the property to set.\nvalueA value to set for the property.\n\n\n\nversion added: 1.6.prop( map )\nmapA map of property-value pairs to set.\n\n\n\nversion added: 1.6.prop( propertyName, function(index, oldPropertyValue) )\npropertyNameThe name of the property to set.\nfunction(index, oldPropertyValue)A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword this refers to the current element.\n\n\n\nThe .prop() method is a convenient way to set the value of properties\u2014especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, or defaultSelected. Since jQuery 1.6, these properties can no longer be set with the .attr() method. They do not have corresponding attributes and are only properties.\nProperties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the value property of input elements, the disabled property of inputs and buttons, or the checked property of a checkbox. The .prop() method should be used to set disabled and checked instead of the .attr() method. The .val() method should be used for getting and setting value.\n\n$(\"input\").prop(\"disabled\", false);\n$(\"input\").prop(\"checked\", true);\n$(\"input\").val(\"someValue\");\n\nImportant: the .removeProp() method should not be used to set these properties to false. Once a native property is removed, it cannot be added again. See .removeProp() for more information.\nComputed property values\nBy using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:\n$(\"input[type='checkbox']\").prop(\"checked\", function( i, val ) {\n  return !val;\n});\nNote: If nothing is returned in the setter function (ie. function(index, prop){}), or if undefined is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.\n\nAdditional Notes:In Internet Explorer prior to version 9, using .prop() to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using .removeProp()) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use .data().Example:\n\nDisable all checkboxes on the page.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  img { padding:10px; }\n  div { color:red; font-size:24px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;input type=\"checkbox\" checked=\"checked\" \/&gt;\n  &lt;input type=\"checkbox\" \/&gt;\n  &lt;input type=\"checkbox\" \/&gt;\n  &lt;input type=\"checkbox\"  checked=\"checked\" \/&gt;\n\n&lt;script&gt;\n$(\"input[type='checkbox']\").prop({\n  disabled: true\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/prevAll\/","title":"prevAll","description":"\n\n.prevAll(  [selector]  ) Returns: jQuery\n\n\nDescription: Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.2.prevAll(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .prevAll() method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at the third item, we can find the elements which come before it:\n$('li.third-item').prevAll().css('background-color', 'red');\nThe result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.\n\nExample:\n\nLocate all the divs preceding the last div and give them a class.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { width:70px; height:70px; background:#abc; \n        border:2px solid black; margin:10px; float:left; }\n  div.before { border-color: red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"div:last\").prevAll().addClass(\"before\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.proxy\/","title":"jQuery.proxy","description":"\n\njQuery.proxy( function, context ) Returns: Function\n\n\nDescription: Takes a function and returns a new one that will always have a particular context.\n\n\n\nversion added: 1.4jQuery.proxy( function, context )\nfunctionThe function whose context will be changed.\ncontextThe object to which the context (this) of the function should be set.\n\n\n\nversion added: 1.4jQuery.proxy( context, name )\ncontextThe object to which the context of the function should be set.\nnameThe name of the function whose context will be changed (should be a property of the context object).\n\n\n\nThis method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.\nBe aware, however, that jQuery's event binding subsystem assigns a unique id to each event handling function in order to track it when it is used to specify the function to be unbound. The function represented by jQuery.proxy() is seen as a single function by the event subsystem, even when it is used to bind different contexts. To avoid unbinding the wrong handler, use a unique event namespace for binding and unbinding (e.g., \"click.myproxy1\") rather than specifying the proxied function during unbinding.\n\n\nExamples:\n\n\nExample: Change the context of functions bound to a click handler using the \"function, context\" signature. Unbind the first handler after first click.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;&lt;button type=\"button\" id=\"test\"&gt;Test&lt;\/button&gt;&lt;\/p&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar me = {\n  type: \"zombie\",\n  test: function(event) {\n    \/\/ Without proxy, `this` would refer to the event target\n    \/\/ use event.target to reference that element.\n    var element = event.target;\n    $(element).css(\"background-color\", \"red\");\n\n    \/\/ With proxy, `this` refers to the me object encapsulating\n    \/\/ this function.\n    $(\"#log\").append( \"Hello \" + this.type + \"&lt;br&gt;\" );\n    $(\"#test\").unbind(\"click\", this.test);\n  }\n};\n\nvar you = {\n  type: \"person\",\n  test: function(event) {\n    $(\"#log\").append( this.type + \" \" );\n  }\n};\n\n\/\/ execute you.test() in the context of the `you` object\n\/\/ no matter where it is called\n\/\/ i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n\n\n\/\/ attach click handlers to #test\n$(\"#test\")\n  \/\/ this === \"zombie\"; handler unbound after first click\n  .click( $.proxy( me.test, me ) )\n  \/\/ this === \"person\"\n  .click( youClick )\n  \/\/ this === \"zombie\"\n  .click( $.proxy( you.test, me ) )\n  \/\/ this === \"&lt;button&gt; element\"\n  .click( you.test );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Enforce the context of the function using the \"context, function name\" signature. Unbind the handler after first click.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;&lt;button id=\"test\"&gt;Test&lt;\/button&gt;&lt;\/p&gt;\n  &lt;p id=\"log\"&gt;&lt;\/p&gt;\n\n&lt;script&gt;\n  var obj = {\n    name: \"John\",\n    test: function() {\n      $(\"#log\").append( this.name );\n      $(\"#test\").unbind(\"click\", obj.test);\n    }\n  };\n\n  $(\"#test\").click( jQuery.proxy( obj, \"test\" ) );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.queue\/","title":"jQuery.queue","description":"\nContents:\n\n\njQuery.queue( element [\u00a0, queueName\u00a0] \u00a0) jQuery.queue( element [, queueName]  )\n              \n\n\njQuery.queue( element , queueName , newQueue \u00a0) \njQuery.queue( element, queueName, newQueue )\n              \njQuery.queue( element, queueName, callback() )\n              \n\n\n\n\n\njQuery.queue( element [, queueName]  ) Returns: Array\n\n\nDescription: Show the queue of functions to be executed on the matched element.\n\n\nversion added: 1.3jQuery.queue( element [, queueName] )\nelementA DOM element to inspect for an attached queue.\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\nNote: This is a low-level method, you should probably use .queue() instead.\nExample:\n\nShow the length of the queue.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:30px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  span { color:red; }  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"show\"&gt;Show Length of Queue&lt;\/button&gt;\n  &lt;span&gt;&lt;\/span&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"#show\").click(function () {\n      var n = jQuery.queue( $(\"div\")[0], \"fx\" );\n      $(\"span\").text(\"Queue length is: \" + n.length);\n    });\n    function runIt() {\n      $(\"div\").show(\"slow\");\n      $(\"div\").animate({left:'+=200'},2000);\n      $(\"div\").slideToggle(1000);\n      $(\"div\").slideToggle(\"fast\");\n      $(\"div\").animate({left:'-=200'},1500);\n      $(\"div\").hide(\"slow\");\n      $(\"div\").show(1200);\n      $(\"div\").slideUp(\"normal\", runIt);\n    }\n    runIt();&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\njQuery.queue( element, queueName, newQueue ) Returns: jQuery\n\n\nDescription: Manipulate the queue of functions to be executed on the matched element.\n\n\n\nversion added: 1.3jQuery.queue( element, queueName, newQueue )\nelementA DOM element where the array of queued functions is attached.\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\nnewQueueAn array of functions to replace the current queue contents.\n\n\n\nversion added: 1.3jQuery.queue( element, queueName, callback() )\nelementA DOM element on which to add a queued function.\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\ncallback()The new function to add to the queue.\n\n\n\nNote: This is a low-level method, you should probably use .queue() instead.\nEvery element can have one or more queues of functions attached to it by jQuery. In most applications, only one queue (called fx) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution.\nThe jQuery.queue() method allows us to directly manipulate this queue of functions. Calling jQuery.queue() with a callback is particularly useful; it allows us to place a new function at the end of the queue.\nNote that when adding a function with jQuery.queue(), we should ensure that jQuery.dequeue() is eventually called so that the next function in line executes.\n\nExamples:\n\n\nExample: Queue a custom function.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:30px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Click here...\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n   $(document.body).click(function () {\n      $(\"div\").show(\"slow\");\n      $(\"div\").animate({left:'+=200'},2000);\n      jQuery.queue( $(\"div\")[0], \"fx\", function () {\n        $(this).addClass(\"newcolor\");\n        jQuery.dequeue( this );\n      });\n      $(\"div\").animate({left:'-=200'},500);\n      jQuery.queue( $(\"div\")[0], \"fx\", function () {\n        $(this).removeClass(\"newcolor\");\n        jQuery.dequeue( this );\n      });\n      $(\"div\").slideUp();\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Set a queue array to delete the queue.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:30px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;button id=\"start\"&gt;Start&lt;\/button&gt;\n  &lt;button id=\"stop\"&gt;Stop&lt;\/button&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n   $(\"#start\").click(function () {\n      $(\"div\").show(\"slow\");\n      $(\"div\").animate({left:'+=200'},5000);\n      jQuery.queue( $(\"div\")[0], \"fx\", function () {\n        $(this).addClass(\"newcolor\");\n        jQuery.dequeue( this );\n      });\n      $(\"div\").animate({left:'-=200'},1500);\n      jQuery.queue( $(\"div\")[0], \"fx\", function () {\n        $(this).removeClass(\"newcolor\");\n        jQuery.dequeue( this );\n      });\n      $(\"div\").slideUp();\n    });\n    $(\"#stop\").click(function () {\n      jQuery.queue( $(\"div\")[0], \"fx\", [] );\n      $(\"div\").stop();\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/radio-selector\/","title":":radio Selector","description":"\n\nradio  selector\n\n\nversion added: 1.0jQuery(':radio')\nDescription: Selects all  elements of type radio.\n\n$(':radio') is equivalent to $('[type=radio]'). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':radio') is equivalent to $('*:radio'), so $('input:radio') should be used instead. \nTo select a set of associated radio buttons, you might use: $('input[name=gender]:radio')\n\nAdditional Notes:Because :radio is a jQuery extension and not part of the CSS specification, queries using :radio cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"radio\"] instead.Example:\n\nFinds all radio inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:25px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" name=\"asdf\" \/&gt;\n    &lt;input type=\"radio\" name=\"asdf\" \/&gt;\n\n    &lt;input type=\"reset\" \/&gt;\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"form input:radio\").wrap('&lt;span&gt;&lt;\/span&gt;').parent().css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/pushStack\/","title":"pushStack","description":"\n\n.pushStack( elements ) Returns: jQuery\n\n\nDescription: Add a collection of DOM elements onto the jQuery stack.\n\n\n\nversion added: 1.0.pushStack( elements )\nelementsAn array of elements to push onto the stack and make into a new jQuery object.\n\n\n\nversion added: 1.3.pushStack( elements, name, arguments )\nelementsAn array of elements to push onto the stack and make into a new jQuery object.\nnameThe name of a jQuery method that generated the array of elements.\nargumentsThe arguments that were passed in to the jQuery method (for serialization).\n\n\nExample:\n\nAdd some elements onto the jQuery stack, then pop back off again.\njQuery([])\n    .pushStack( document.getElementsByTagName(\"div\") )\n        .remove()\n    .end();\n\n\n"},{"url":"http:\/\/api.jquery.com\/queue\/","title":"queue","description":"\nContents:\n\n\nqueue( [\u00a0queueName\u00a0] \u00a0) .queue(  [queueName]  )\n              \n\n\nqueue( [\u00a0queueName\u00a0] , newQueue \u00a0) \n.queue(  [queueName] , newQueue )\n              \n.queue(  [queueName] , callback( next ) )\n              \n\n\n\n\n\n.queue(  [queueName]  ) Returns: Array\n\n\nDescription: Show the queue of functions to be executed on the matched elements.\n\n\nversion added: 1.2.queue(  [queueName] )\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\n\nExample:\n\nShow the length of the queue.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:60px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  p { color:red; }  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;The queue length is: &lt;span&gt;&lt;\/span&gt;&lt;\/p&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\nvar div = $(\"div\");\n\nfunction runIt() {\n  div.show(\"slow\");\n  div.animate({left:'+=200'},2000);\n  div.slideToggle(1000);\n  div.slideToggle(\"fast\");\n  div.animate({left:'-=200'},1500);\n  div.hide(\"slow\");\n  div.show(1200);\n  div.slideUp(\"normal\", runIt);\n}\n\nfunction showIt() {\n  var n = div.queue(\"fx\");\n  $(\"span\").text( n.length );      \n  setTimeout(showIt, 100);\n}\n\nrunIt();\nshowIt();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.queue(  [queueName] , newQueue ) Returns: jQuery\n\n\nDescription: Manipulate the queue of functions to be executed on the matched elements.\n\n\n\nversion added: 1.2.queue(  [queueName], newQueue )\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\nnewQueueAn array of functions to replace the current queue contents.\n\n\n\nversion added: 1.2.queue(  [queueName], callback( next ) )\nqueueNameA string containing the name of the queue. Defaults to fx, the standard effects queue.\ncallback( next )The new function to add to the queue, with a function to call that will dequeue the next item.\n\n\n\nEvery element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called fx) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:\n$('#foo').slideUp().fadeIn();\nWhen this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the fx queue to be called only once the sliding transition is complete.\nThe .queue() method allows us to directly manipulate this queue of functions. Calling .queue() with a callback is particularly useful; it allows us to place a new function at the end of the queue.\nThis feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.\n$('#foo').slideUp();\n$('#foo').queue(function() {\n  alert('Animation complete.');\n  $(this).dequeue();\n});\nThis is equivalent to:\n$('#foo').slideUp(function() {\n  alert('Animation complete.');\n});\nNote that when adding a function with .queue(), we should ensure that .dequeue() is eventually called so that the next function in line executes.\nIn jQuery 1.4 the function that's called is passed in another function, as the first argument, that when called automatically dequeues the next item and keeps the queue moving. You would use it like so:\n$(\"#test\").queue(function(next) {\n    \/\/ Do some stuff...\n    next();\n});\n\nExamples:\n\n\nExample: Queue a custom function.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:30px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Click here...\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(document.body).click(function () {\n      $(\"div\").show(\"slow\");\n      $(\"div\").animate({left:'+=200'},2000);\n      $(\"div\").queue(function () {\n        $(this).addClass(\"newcolor\");\n        $(this).dequeue();\n      });\n      $(\"div\").animate({left:'-=200'},500);\n      $(\"div\").queue(function () {\n        $(this).removeClass(\"newcolor\");\n        $(this).dequeue();\n      });\n      $(\"div\").slideUp();\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Set a queue array to delete the queue.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { margin:3px; width:40px; height:40px;\n        position:absolute; left:0px; top:30px; \n        background:green; display:none; }\n  div.newcolor { background:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"start\"&gt;Start&lt;\/button&gt;\n  &lt;button id=\"stop\"&gt;Stop&lt;\/button&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"#start\").click(function () {\n      $(\"div\").show(\"slow\");\n      $(\"div\").animate({left:'+=200'},5000);\n      $(\"div\").queue(function () {\n        $(this).addClass(\"newcolor\");\n        $(this).dequeue();\n      });\n      $(\"div\").animate({left:'-=200'},1500);\n      $(\"div\").queue(function () {\n        $(this).removeClass(\"newcolor\");\n        $(this).dequeue();\n      });\n      $(\"div\").slideUp();\n    });\n    $(\"#stop\").click(function () {\n      $(\"div\").queue(\"fx\", []);\n      $(\"div\").stop();\n    });&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/removeAttr\/","title":"removeAttr","description":"\n\n.removeAttr( attributeName ) Returns: jQuery\n\n\nDescription: Remove an attribute from each element in the set of matched elements.\n\n\nversion added: 1.0.removeAttr( attributeName )\nattributeNameAn attribute to remove; as of version 1.7, it can be a space-separated list of attributes.\n\n\nThe .removeAttr() method uses the JavaScript removeAttribute() function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.\nNote: Removing an inline onclick event handler using .removeAttr() doesn't achieve the desired effect in Internet Explorer 6, 7, or 8. To avoid potential problems, use .prop() instead:\n\n$element.prop(\"onclick\", null);\nconsole.log(\"onclick property: \", $element[0].onclick);\n\n\nExample:\n\nClicking the button enables the input next to it.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Enable&lt;\/button&gt;\n&lt;input type=\"text\" title=\"hello there\" \/&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n(function() {\n  var inputTitle = $(\"input\").attr(\"title\");\n  $(\"button\").click(function () {\n    var input = $(this).next();\n\n    if ( input.attr(\"title\") == inputTitle ) {\n      input.removeAttr(\"title\")\n    } else {\n      input.attr(\"title\", inputTitle);\n    }\n\n    $(\"#log\").html( \"input title is now \" + input.attr(\"title\") );\n  });\n})();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/ready\/","title":"ready","description":"\n\n.ready( handler ) Returns: jQuery\n\n\nDescription: Specify a function to execute when the DOM is fully loaded.\n\n\nversion added: 1.0.ready( handler )\nhandlerA function to execute after the DOM is ready.\n\n\nWhile JavaScript provides the load event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to .ready() is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code.  When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.\nIn cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the load event instead.\nThe .ready() method is generally incompatible with the &lt;body onload=\"\"&gt; attribute. If load must be used, either do not use .ready() or use jQuery's .load() method to attach load event handlers to the window or to more specific items, like images.\n\nAll three of the following syntaxes are equivalent:\n\n   $(document).ready(handler)\n   \n$().ready(handler) (this is not recommended)\n   $(handler)\n \nThere is also $(document).bind(\"ready\", handler). This behaves similarly to the ready method but with one exception: If the ready event has already fired and you try to .bind(\"ready\") the bound handler will not be executed. Ready handlers bound this way are executed after any bound by the other three methods above.\nThe .ready() method can only be called on a jQuery object matching the current document, so the selector can be omitted.\nThe .ready() method is typically used with an anonymous function:\n$(document).ready(function() {\n  \/\/ Handler for .ready() called.\n});\nWhich is equivalent to calling:\n$(function() {\n \/\/ Handler for .ready() called.\n});\nIf .ready() is called after the DOM has been initialized, the new handler passed in will be executed immediately.\nAliasing the jQuery Namespace\nWhen using another JavaScript library, we may wish to call $.noConflict() to avoid namespace difficulties. When this function is called, the $ shortcut is no longer available, forcing us to write jQuery each time we would normally write $. However, the handler passed to the .ready() method can take an argument, which is passed the global jQuery object. This means we can rename the object within the context of our .ready() handler without affecting other code:\njQuery(document).ready(function($) {\n  \/\/ Code using $ as usual goes here.\n});\n\nExample:\n\nDisplay a message when the DOM is loaded.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { color:red; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n  &lt;script&gt;\n  $(document).ready(function () {\n  $(\"p\").text(\"The DOM is now loaded and can be manipulated.\");\n});\n  &lt;\/script&gt;\n\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Not loaded yet.&lt;\/p&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/remove\/","title":"remove","description":"\n\n.remove(  [selector]  ) Returns: jQuery\n\n\nDescription: Remove the set of matched elements from the DOM.\n\n\nversion added: 1.0.remove(  [selector] )\nselectorA selector expression that filters the set of matched elements to be removed.\n\n\nSimilar to .empty(), the .remove() method takes elements out of the DOM. Use .remove() when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data  associated with the elements are removed. To remove the elements without removing data and events, use .detach() instead.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can target any element for removal:\n$('.hello').remove();\nThis will result in a DOM structure with the &lt;div&gt; element deleted:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nIf we had any number of nested elements inside &lt;div class=\"hello\"&gt;, they would be removed, too. Other jQuery constructs such as data or event handlers are erased as well.\nWe can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:\n$('div').remove('.hello');\nThis would result in the same DOM structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\n\nExamples:\n\n\nExample: Removes all paragraphs from the DOM\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; margin:6px 0; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt; \n  how are \n  &lt;p&gt;you?&lt;\/p&gt;\n  &lt;button&gt;Call remove() on paragraphs&lt;\/button&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      $(\"p\").remove();\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Removes all paragraphs that contain \"Hello\" from the DOM.  Analogous to doing $(\"p\").filter(\":contains('Hello')\").remove().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:yellow; margin:6px 0; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"hello\"&gt;Hello&lt;\/p&gt;\n  how are \n  &lt;p&gt;you?&lt;\/p&gt;\n\n  &lt;button&gt;Call remove(\":contains('Hello')\") on paragraphs&lt;\/button&gt;\n&lt;script&gt;\n\n    $(\"button\").click(function () {\n      $(\"p\").remove(\":contains('Hello')\");\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/removeData\/","title":"removeData","description":""},{"url":"http:\/\/api.jquery.com\/removeClass\/","title":"removeClass","description":"\n\n.removeClass(  [className]  ) Returns: jQuery\n\n\nDescription: Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\n\n\n\nversion added: 1.0.removeClass(  [className] )\nclassNameOne or more space-separated classes to be removed from the class attribute of each matched element.\n\n\n\nversion added: 1.4.removeClass( function(index, class) )\nfunction(index, class)A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.\n\n\n\nIf a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.\nMore than one class may be removed at a time, separated by a space, from the set of matched elements, like so:\n$('p').removeClass('myClass yourClass')\n\nThis method is often used with .addClass() to switch elements' classes from one to another, like so:\n$('p').removeClass('myClass noClass').addClass('yourClass');\n\nHere, the myClass and noClass classes are removed from all paragraphs, while yourClass is added.\nTo replace all existing classes with another class, we can use .attr('class', 'newClass') instead.\nAs of jQuery 1.4, the .removeClass() method allows us to indicate the class to be removed by passing in a function.\n$('li:last').removeClass(function() {\n          return $(this).prev().attr('class');\n        });\nThis example removes the class name of the penultimate &lt;li&gt; from the last &lt;li&gt;.\n\nExamples:\n\n\nExample: Remove the class 'blue' from the matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { margin: 4px; font-size:16px; font-weight:bolder; }\n  .blue { color:blue; }\n  .under { text-decoration:underline; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"blue under\"&gt;Hello&lt;\/p&gt;\n  &lt;p class=\"blue under highlight\"&gt;and&lt;\/p&gt;\n  &lt;p class=\"blue under\"&gt;then&lt;\/p&gt;\n\n  &lt;p class=\"blue under\"&gt;Goodbye&lt;\/p&gt;\n&lt;script&gt;$(\"p:even\").removeClass(\"blue\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Remove the class 'blue' and 'under' from the matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 4px; font-size:16px; font-weight:bolder; }\n  .blue { color:blue; }\n  .under { text-decoration:underline; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"blue under\"&gt;Hello&lt;\/p&gt;\n\n  &lt;p class=\"blue under highlight\"&gt;and&lt;\/p&gt;\n  &lt;p class=\"blue under\"&gt;then&lt;\/p&gt;\n  &lt;p class=\"blue under\"&gt;Goodbye&lt;\/p&gt;\n&lt;script&gt;$(\"p:odd\").removeClass(\"blue under\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Remove all the classes from the matched elements.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { margin: 4px; font-size:16px; font-weight:bolder; }\n  .blue { color:blue; }\n  .under { text-decoration:underline; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"blue under\"&gt;Hello&lt;\/p&gt;\n  &lt;p class=\"blue under highlight\"&gt;and&lt;\/p&gt;\n  &lt;p class=\"blue under\"&gt;then&lt;\/p&gt;\n\n  &lt;p class=\"blue under\"&gt;Goodbye&lt;\/p&gt;\n&lt;script&gt;$(\"p:eq(1)\").removeClass();&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.removeData\/","title":"jQuery.removeData","description":"\n\njQuery.removeData( element [, name]  ) Returns: jQuery\n\n\nDescription: Remove a previously-stored piece of data.\n\n\nversion added: 1.2.3jQuery.removeData( element [, name] )\nelementA DOM element from which to remove data.\nnameA string naming the piece of data to remove.\n\n\nNote: This is a low-level method, you should probably use .removeData() instead.\nThe jQuery.removeData() method allows us to remove values that were previously set using jQuery.data(). When called with the name of a key, jQuery.removeData() deletes that particular value; when called with no arguments, all values are removed.\n\nExample:\n\nSet a data store for 2 names then remove one of them.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\t\tdiv { margin:2px; color:blue; }\n\t\tspan { color:red; }\n\t\t&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;value1 before creation: &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\t\t&lt;div&gt;value1 after creation: &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\t\t&lt;div&gt;value1 after removal: &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n\t\t&lt;div&gt;value2 after removal: &lt;span&gt;&lt;\/span&gt;&lt;\/div&gt;\n&lt;script&gt;\nvar div = $(\"div\")[0];\n$(\"span:eq(0)\").text(\"\" + $(\"div\").data(\"test1\"));\njQuery.data(div, \"test1\", \"VALUE-1\");\njQuery.data(div, \"test2\", \"VALUE-2\");\n$(\"span:eq(1)\").text(\"\" + jQuery.data(div, \"test1\"));\njQuery.removeData(div, \"test1\");\n$(\"span:eq(2)\").text(\"\" + jQuery.data(div, \"test1\"));\n$(\"span:eq(3)\").text(\"\" + jQuery.data(div, \"test2\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/replaceAll\/","title":"replaceAll","description":"\n\n.replaceAll( target ) Returns: jQuery\n\n\nDescription: Replace each target element with the set of matched elements.\n\n\nversion added: 1.2.replaceAll( target )\ntargetA selector expression indicating which element(s) to replace.\n\n\nThe .replaceAll() method is corollary to .replaceWith(), but with the source and target reversed. Consider this DOM structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;\/div&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nWe can create an element, then replace other elements with it:\n$('&lt;h2&gt;New heading&lt;\/h2&gt;').replaceAll('.inner');\nThis causes all of them to be replaced:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n&lt;\/div&gt;\nOr, we could select an element to use as the replacement:\n$('.first').replaceAll('.third');\nThis results in the DOM structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;\/div&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;\/div&gt;\n&lt;\/div&gt;\nFrom this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.\n\nExample:\n\nReplace all the paragraphs with bold words.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"&lt;b&gt;Paragraph. &lt;\/b&gt;\").replaceAll(\"p\"); \/\/ check replaceWith() examples&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/removeProp\/","title":"removeProp","description":"\n\n.removeProp( propertyName ) Returns: jQuery\n\n\nDescription: Remove a property for the set of matched elements.\n\n\nversion added: 1.6.removeProp( propertyName )\npropertyNameThe name of the property to set.\n\n\nThe .removeProp() method removes properties set by the .prop() method.\nWith some built-in properties of a DOM element or window object, browsers may generate an error if an attempt is made to remove the property. jQuery first assigns the value undefined to the property and ignores any error the browser generates. In general, it is only necessary to remove custom properties that have been set on an object, and not built-in (native) properties.\nNote: Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use .prop() to set these properties to false instead.\n\nAdditional Notes:In Internet Explorer prior to version 9, using .prop() to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using .removeProp()) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use .data().Example:\n\nSet a numeric property on a paragraph and then remove it. \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  img { padding:10px; }\n  div { color:red; font-size:24px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;&lt;\/p&gt;\n\n\n&lt;script&gt;\nvar $para = $(\"p\");\n$para.prop(\"luggageCode\", 1234);\n$para.append(\"The secret luggage code is: \", String($para.prop(\"luggageCode\")), \". \");\n$para.removeProp(\"luggageCode\");\n$para.append(\"Now the secret luggage code is: \", String($para.prop(\"luggageCode\")), \". \");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/reset-selector\/","title":":reset Selector","description":"\n\nreset  selector\n\n\nversion added: 1.0jQuery(':reset')\nDescription: Selects all elements of type reset.\n:reset is equivalent to [type=\"reset\"]\nAdditional Notes:Because :reset is a jQuery extension and not part of the CSS specification, queries using :reset cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"reset\"] instead.Example:\n\nFinds all reset inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;option\/&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"input:reset\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/replaceWith\/","title":"replaceWith","description":"\n\n.replaceWith( newContent ) Returns: jQuery\n\n\nDescription: Replace each element in the set of matched elements with the provided new content.\n\n\n\nversion added: 1.2.replaceWith( newContent )\nnewContentThe content to insert. May be an HTML string, DOM element, or jQuery object.\n\n\n\nversion added: 1.4.replaceWith( function )\nfunctionA function that returns content with which to replace the set of matched elements.\n\n\n\nThe .replaceWith() method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;\/div&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nThe second inner &lt;div&gt; could be replaced with the specified HTML:\n$('div.second').replaceWith('&lt;h2&gt;New heading&lt;\/h2&gt;');\nThis results in the structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;\/div&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nAll inner &lt;div&gt; elements could be targeted at once:\n$('div.inner').replaceWith('&lt;h2&gt;New heading&lt;\/h2&gt;');\nThis causes all of them to be replaced:\n&lt;div class=\"container\"&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n  &lt;h2&gt;New heading&lt;\/h2&gt;\n&lt;\/div&gt;\nAn element could also be selected as the replacement:\n$('div.third').replaceWith($('.first'));\nThis results in the DOM structure:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;\/div&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;\/div&gt;\n&lt;\/div&gt;\nThis example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.\nThe .replaceWith() method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the original jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.\nAs of jQuery 1.4, .replaceWith() can also work on disconnected DOM nodes. For example, with the following code, .replaceWith() returns a jQuery set containing only a paragraph.:\n$(\"&lt;div\/&gt;\").replaceWith(\"&lt;p&gt;&lt;\/p&gt;\");\nThe .replaceWith() method can also take a function as its argument:\n$('div.container').replaceWith(function() {\n  return $(this).contents();\n});\nThis results in &lt;div class=\"container\"&gt; being replaced by its three child &lt;div&gt;s. The return value of the function may be an HTML string, DOM element, or jQuery object.\n\nExamples:\n\n\nExample: On click, replace the button with a div containing the same word.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  button { display:block; margin:3px; color:red; width:200px; }\n  div { color:red; border:2px solid blue; width:200px;\n      margin:3px; text-align:center; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button&gt;First&lt;\/button&gt;\n&lt;button&gt;Second&lt;\/button&gt;\n&lt;button&gt;Third&lt;\/button&gt;\n\n&lt;script&gt;\n$(\"button\").click(function () {\n  $(this).replaceWith( \"&lt;div&gt;\" + $(this).text() + \"&lt;\/div&gt;\" );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Replace all paragraphs with bold words.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;Hello&lt;\/p&gt;\n&lt;p&gt;cruel&lt;\/p&gt;\n&lt;p&gt;World&lt;\/p&gt;\n\n&lt;script&gt;\n$(\"p\").replaceWith( \"&lt;b&gt;Paragraph. &lt;\/b&gt;\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn't clone the object but rather moves it to replace the paragraph.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { border:2px solid blue; color:red; margin:3px; }\n  p { border:2px solid red; color:blue; margin:3px; cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n\n  &lt;div&gt;Replaced!&lt;\/div&gt;\n\n&lt;script&gt;\n$(\"p\").click(function () {\n  $(this).replaceWith( $(\"div\") );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt; \n  .container { background-color: #991; }\n  .inner { color: #911; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;p&gt;\n  &lt;button&gt;Replace!&lt;\/button&gt;\n&lt;\/p&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Scooby&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Dooby&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Doo&lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;script&gt;\n$('button').bind(\"click\", function() {\n  var $container = $(\"div.container\").replaceWith(function() {\n    return $(this).contents();\n  });\n\n  $(\"p\").append( $container.attr(\"class\") );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/resize\/","title":"resize","description":"\n\n.resize( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.resize( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.resize(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.resize()\n\n\nThis method is a shortcut for .bind('resize', handler) in the first and second variations, and .trigger('resize') in the third.\nThe resize event is sent to the window element when the size of the browser window changes:\n$(window).resize(function() {\n  $('#log').append('&lt;div&gt;Handler for .resize() called.&lt;\/div&gt;');\n});\n\nNow whenever the browser window's size is changed, the message is appended to &lt;div id=\"log\"&gt; one or more times, depending on the browser.\nCode in a resize handler should never rely on the number of times the handler is called. Depending on implementation, resize events can be sent continuously as the resizing is in progress (the typical behavior in Internet Explorer and WebKit-based browsers such as Safari and Chrome), or only once at the end of the resize operation (the typical behavior in some other browsers such as Opera).\n\nExample:\n\nTo see the window width while (or after) it is resized, try:\n\n$(window).resize(function() {\n  $('body').prepend('&lt;div&gt;' + $(window).width() + '&lt;\/div&gt;');\n});\n  \n\n\n"},{"url":"http:\/\/api.jquery.com\/scrollLeft\/","title":"scrollLeft","description":"\nContents:\n\n\nscrollLeft() .scrollLeft()\n              \n\n\nscrollLeft( value \u00a0) .scrollLeft( value )\n              \n\n\n\n\n.scrollLeft() Returns: Integer\n\n\nDescription: Get the current horizontal position of the scroll bar for the first element in the set of matched elements.\n\nversion added: 1.2.6.scrollLeft()\n\nThe horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be 0.\nNote: .scrollLeft(), when called directly or animated as a property using .animate() will not work if the element(s) it is being applied to are hidden.\n\nExample:\n\nGet the scrollLeft of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    p { margin:10px;padding:5px;border:2px solid #666; }\n    &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n\t\t\t$(\"p:last\").text( \"scrollLeft:\" + p.scrollLeft() );\n\n\t\t\t&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.scrollLeft( value ) Returns: jQuery\n\n\nDescription: Set the current horizontal position of the scroll bar for each of the set of matched elements.\n\n\nversion added: 1.2.6.scrollLeft( value )\nvalueAn integer indicating the new position to set the scroll bar to.\n\nThe horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the scrollLeft positions the horizontal scroll of each matched element.\nExample:\n\nSet the scrollLeft of a div.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div.demo {\n  background:#CCCCCC none repeat scroll 0 0;\n  border:3px solid #666666;\n  margin:5px;\n  padding:5px;\n  position:relative;\n  width:200px;\n  height:100px;\n  overflow:auto;\n  }\n  p { margin:10px;padding:5px;border:2px solid #666;width:1000px;height:1000px; }\n\t&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div class=\"demo\"&gt;&lt;h1&gt;lalala&lt;\/h1&gt;&lt;p&gt;Hello&lt;\/p&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"div.demo\").scrollLeft(300);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/scroll\/","title":"scroll","description":"\n\n.scroll( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.scroll( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.scroll(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.scroll()\n\n\nThis method is a shortcut for .bind('scroll', handler) in the first and second variations, and .trigger('scroll') in the third.\nThe scroll event is sent to an element when the user scrolls to a different place in the element. It applies to window objects, but also to scrollable frames and elements with the overflow CSS property set to scroll (or auto when the element's explicit height or width is less than the height or width of its contents).\nFor example, consider the HTML:\n&lt;div id=\"target\" style=\"overflow: scroll; width: 200px; height: 100px;\"&gt;\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n  ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  Duis aute irure dolor in reprehenderit in voluptate velit\n  esse cillum dolore eu fugiat nulla pariatur. Excepteur\n  sint occaecat cupidatat non proident, sunt in culpa qui\n  officia deserunt mollit anim id est laborum.\n&lt;\/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\n&lt;div id=\"log\"&gt;&lt;\/div&gt;\nThe style definition is present to make the target element small enough to be scrollable:\n\n\nThe scroll event handler can be bound to this element:\n$('#target').scroll(function() {\n  $('#log').append('&lt;div&gt;Handler for .scroll() called.&lt;\/div&gt;');\n});\nNow when the user scrolls the text up or down, one or more messages are appended to &lt;div id=\"log\"&gt;&lt;\/div&gt;:\nHandler for .scroll() called.\nTo trigger the event manually, apply .scroll() without an argument:\n$('#other').click(function() {\n  $('#target').scroll();\n});\nAfter this code executes, clicks on Trigger the handler will also append the message.\nA scroll event is sent whenever the element's scroll position changes, regardless of the cause. A mouse click or drag on the scroll bar, dragging inside the element, pressing the arrow keys, or using the mouse's scroll wheel could cause this event.\n\nExample:\n\nTo do something when your page is scrolled:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  p { color:green; }\n  span { color:red; display:none; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;Try scrolling the iframe.&lt;\/div&gt;\n  &lt;p&gt;Paragraph - &lt;span&gt;Scroll happened!&lt;\/span&gt;&lt;\/p&gt;\n&lt;script&gt;\n    $(\"p\").clone().appendTo(document.body);\n    $(\"p\").clone().appendTo(document.body);\n    $(\"p\").clone().appendTo(document.body);\n    $(window).scroll(function () { \n      $(\"span\").css(\"display\", \"inline\").fadeOut(\"slow\"); \n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/scrollTop\/","title":"scrollTop","description":"\nContents:\n\n\nscrollTop() .scrollTop()\n              \n\n\nscrollTop( value \u00a0) .scrollTop( value )\n              \n\n\n\n\n.scrollTop() Returns: Integer\n\n\nDescription: Get the current vertical position of the scroll bar for the first element in the set of matched elements.\n\nversion added: 1.2.6.scrollTop()\nThe vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be 0.\nExample:\n\nGet the scrollTop of a paragraph.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin:10px;padding:5px;border:2px solid #666; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;&lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;var p = $(\"p:first\");\n$(\"p:last\").text( \"scrollTop:\" + p.scrollTop() );\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.scrollTop( value ) Returns: jQuery\n\n\nDescription: Set the current vertical position of the scroll bar for each of the set of matched elements.\n\n\nversion added: 1.2.6.scrollTop( value )\nvalueAn integer indicating the new position to set the scroll bar to.\n\nThe vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the scrollTop positions the vertical scroll of each matched element.\nExample:\n\nSet the scrollTop of a div.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv.demo {\nbackground:#CCCCCC none repeat scroll 0 0;\nborder:3px solid #666666;\nmargin:5px;\npadding:5px;\nposition:relative;\nwidth:200px;\nheight:100px;\noverflow:auto;\n}\n  p { margin:10px;padding:5px;border:2px solid #666;width:1000px;height:1000px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div class=\"demo\"&gt;&lt;h1&gt;lalala&lt;\/h1&gt;&lt;p&gt;Hello&lt;\/p&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"div.demo\").scrollTop(300);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/select\/","title":"select","description":"\n\n.select( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.select( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.select(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.select()\n\n\nThis method is a shortcut for .bind('select', handler) in the first two variations, and .trigger('select') in the third.\nThe select event is sent to an element when the user makes a text selection inside it. This event is limited to &lt;input type=\"text\"&gt; fields and &lt;textarea&gt; boxes.\nFor example, consider the HTML:\n&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the text input:\n$('#target').select(function() {\n  alert('Handler for .select() called.');\n});\nNow when any portion of the text is selected, the alert is displayed. Merely setting the location of the insertion point will not trigger the event. To trigger the event manually, apply .select() without an argument:\n$('#other').click(function() {\n  $('#target').select();\n});\nAfter this code executes, clicks on the Trigger button will also alert the message:\nHandler for .select() called.\nIn addition, the default select action on the field will be fired, so the entire text field will be selected.\nThe method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.\n\nExamples:\n\n\nExample: To do something when text in input boxes is selected:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; }\n  div { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n\n    Click and drag the mouse to select text in the inputs.\n  &lt;\/p&gt;\n  &lt;input type=\"text\" value=\"Some text\" \/&gt;\n  &lt;input type=\"text\" value=\"to test on\" \/&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\":input\").select( function () { \n      $(\"div\").text(\"Something was selected\").show().fadeOut(1000); \n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To trigger the select event on all input elements, try:\n\n$(\"input\").select();\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/selected-selector\/","title":":selected Selector","description":"\n\nselected  selector\n\n\nversion added: 1.0jQuery(':selected')\nDescription: Selects all elements that are selected.\nThe :selected selector works for &lt;option&gt; elements. It does not work for checkboxes or radio inputs; use :checked for them.\nAdditional Notes:Because :selected is a jQuery extension and not part of the CSS specification, queries using :selected cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :selected to select elements, first select the elements using a pure CSS selector, then use .filter(\":selected\").Example:\n\nAttaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;select name=\"garden\" multiple=\"multiple\"&gt;\n\n    &lt;option&gt;Flowers&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Shrubs&lt;\/option&gt;\n    &lt;option&gt;Trees&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Bushes&lt;\/option&gt;\n\n    &lt;option&gt;Grass&lt;\/option&gt;\n    &lt;option&gt;Dirt&lt;\/option&gt;\n  &lt;\/select&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"select\").change(function () {\n          var str = \"\";\n          $(\"select option:selected\").each(function () {\n                str += $(this).text() + \" \";\n              });\n          $(\"div\").text(str);\n        })\n        .trigger('change');\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/serializeArray\/","title":"serializeArray","description":"\n\n.serializeArray() Returns: Array\n\n\nDescription: Encode a set of form elements as an array of names and values.\n\nversion added: 1.2.serializeArray()\n\nThe .serializeArray() method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:\n&lt;form&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"a\" value=\"1\" id=\"a\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"b\" value=\"2\" id=\"b\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;input type=\"hidden\" name=\"c\" value=\"3\" id=\"c\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;\n    &lt;textarea name=\"d\" rows=\"8\" cols=\"40\"&gt;4&lt;\/textarea&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;&lt;select name=\"e\"&gt;\n    &lt;option value=\"5\" selected=\"selected\"&gt;5&lt;\/option&gt;\n    &lt;option value=\"6\"&gt;6&lt;\/option&gt;\n    &lt;option value=\"7\"&gt;7&lt;\/option&gt;\n  &lt;\/select&gt;&lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" name=\"f\" value=\"8\" id=\"f\" \/&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"submit\" name=\"g\" value=\"Submit\" id=\"g\" \/&gt;\n  &lt;\/div&gt;\n&lt;\/form&gt;\nThe .serializeArray() method uses the standard W3C rules for successful controls to determine which elements it should include; in particular the element cannot be disabled and must contain a name attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized.\nThis method can act on a jQuery object that has selected individual form elements, such as &lt;input&gt;, &lt;textarea&gt;, and &lt;select&gt;. However, it is typically easier to select the &lt;form&gt; tag itself for serialization:\n$('form').submit(function() {\n  console.log($(this).serializeArray());\n  return false;\n});\nThis produces the following data structure (provided that the browser supports console.log):\n[\n  {\n    name: \"a\",\n    value: \"1\"\n  },\n  {\n    name: \"b\",\n    value: \"2\"\n  },\n  {\n    name: \"c\",\n    value: \"3\"\n  },\n  {\n    name: \"d\",\n    value: \"4\"\n  },\n  {\n    name: \"e\",\n    value: \"5\"\n  }\n]\n\nExample:\n\nGet the values from a form, iterate through them, and append them to a results display.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body, select { font-size:14px; }\n  form { margin:5px; }\n  p { color:red; margin:5px; }\n  b { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;b&gt;Results:&lt;\/b&gt; &lt;span id=\"results\"&gt;&lt;\/span&gt;&lt;\/p&gt;\n\n  &lt;form&gt;\n    &lt;select name=\"single\"&gt;\n      &lt;option&gt;Single&lt;\/option&gt;\n      &lt;option&gt;Single2&lt;\/option&gt;\n\n    &lt;\/select&gt;\n    &lt;select name=\"multiple\" multiple=\"multiple\"&gt;\n      &lt;option selected=\"selected\"&gt;Multiple&lt;\/option&gt;\n      &lt;option&gt;Multiple2&lt;\/option&gt;\n\n      &lt;option selected=\"selected\"&gt;Multiple3&lt;\/option&gt;\n    &lt;\/select&gt;&lt;br\/&gt;\n    &lt;input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\"\/&gt;\n\n    &lt;label for=\"ch1\"&gt;check1&lt;\/label&gt;\n    &lt;input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\"\/&gt;\n\n    &lt;label for=\"ch2\"&gt;check2&lt;\/label&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\"\/&gt;\n\n    &lt;label for=\"r1\"&gt;radio1&lt;\/label&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\"\/&gt;\n\n    &lt;label for=\"r2\"&gt;radio2&lt;\/label&gt;\n  &lt;\/form&gt;\n&lt;script&gt;\n\n    function showValues() {\n      var fields = $(\":input\").serializeArray();\n      $(\"#results\").empty();\n      jQuery.each(fields, function(i, field){\n        $(\"#results\").append(field.value + \" \");\n      });\n    }\n\n    $(\":checkbox, :radio\").click(showValues);\n    $(\"select\").change(showValues);\n    showValues();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/serialize\/","title":"serialize","description":"\n\n.serialize() Returns: String\n\n\nDescription: Encode a set of form elements as a string for submission.\n\nversion added: 1.0.serialize()\n\nThe .serialize() method creates a text string in standard URL-encoded notation. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:\n&lt;form&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"a\" value=\"1\" id=\"a\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"b\" value=\"2\" id=\"b\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;input type=\"hidden\" name=\"c\" value=\"3\" id=\"c\" \/&gt;&lt;\/div&gt;\n  &lt;div&gt;\n    &lt;textarea name=\"d\" rows=\"8\" cols=\"40\"&gt;4&lt;\/textarea&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;&lt;select name=\"e\"&gt;\n    &lt;option value=\"5\" selected=\"selected\"&gt;5&lt;\/option&gt;\n    &lt;option value=\"6\"&gt;6&lt;\/option&gt;\n    &lt;option value=\"7\"&gt;7&lt;\/option&gt;\n  &lt;\/select&gt;&lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" name=\"f\" value=\"8\" id=\"f\" \/&gt;\n  &lt;\/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"submit\" name=\"g\" value=\"Submit\" id=\"g\" \/&gt;\n  &lt;\/div&gt;\n&lt;\/form&gt;\nThe .serialize() method can act on a jQuery object that has selected individual form elements, such as &lt;input&gt;, &lt;textarea&gt;, and &lt;select&gt;. However, it is typically easier to select the &lt;form&gt; tag itself for serialization:\n$('form').submit(function() {\n  alert($(this).serialize());\n  return false;\n});\nThis produces a standard-looking query string:\na=1&amp;b=2&amp;c=3&amp;d=4&amp;e=5\nWarning: selecting both the form and its children will cause duplicates in the serialized string.\nNote: Only \"successful controls\" are serialized to the string. No submit button value is serialized since the form was not submitted using a button. For a form element's value to be included in the serialized string, the element must have a name attribute. Values from checkboxes and radio buttons (inputs of type \"radio\" or \"checkbox\") are included only if they are checked. Data from file select elements is not serialized.\n\nExample:\n\nSerialize a form to a query string, that could be sent to a server in an Ajax request.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body, select { font-size:12px; }\n  form { margin:5px; }\n  p { color:red; margin:5px; font-size:14px; }\n  b { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n\n&lt;form&gt;\n    &lt;select name=\"single\"&gt;\n      &lt;option&gt;Single&lt;\/option&gt;\n      &lt;option&gt;Single2&lt;\/option&gt;\n    &lt;\/select&gt;\n\n&lt;br \/&gt;\n    &lt;select name=\"multiple\" multiple=\"multiple\"&gt;\n      &lt;option selected=\"selected\"&gt;Multiple&lt;\/option&gt;\n      &lt;option&gt;Multiple2&lt;\/option&gt;\n\n      &lt;option selected=\"selected\"&gt;Multiple3&lt;\/option&gt;\n    &lt;\/select&gt;\n&lt;br\/&gt;\n    &lt;input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\"\/&gt;\n\n    &lt;label for=\"ch1\"&gt;check1&lt;\/label&gt;\n\n    &lt;input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\"\/&gt;\n\n    &lt;label for=\"ch2\"&gt;check2&lt;\/label&gt;\n&lt;br \/&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\"\/&gt;\n\n    &lt;label for=\"r1\"&gt;radio1&lt;\/label&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\"\/&gt;\n\n    &lt;label for=\"r2\"&gt;radio2&lt;\/label&gt;\n  &lt;\/form&gt;\n  &lt;p&gt;&lt;tt id=\"results\"&gt;&lt;\/tt&gt;&lt;\/p&gt;\n&lt;script&gt;\n    function showValues() {\n      var str = $(\"form\").serialize();\n      $(\"#results\").text(str);\n    }\n    $(\":checkbox, :radio\").click(showValues);\n    $(\"select\").change(showValues);\n    showValues();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/show\/","title":"show","description":"\n\n.show(  ) Returns: jQuery\n\n\nDescription: Display the matched elements.\n\n\nversion added: 1.0.show()\n\n\nversion added: 1.0.show( duration [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.show(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nWith no parameters, the .show() method is the simplest way to display an element:\n\n$('.target').show();\n\nThe matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling .css('display', 'block'), except that the display property is restored to whatever it was initially. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline.\nNote:  If using !important in your styles, such as\ndisplay: none !important,\nit is necessary to override the style using .css('display', 'block !important') should you wish for .show() to function correctly.\nWhen a duration is provided, .show() becomes an animation method. The .show() method animates the width, height, and opacity of the matched elements simultaneously.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWith the element initially hidden, we can show it slowly:\n$('#clickme').click(function() {\n  $('#book').show('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n\n  \n  \n  \n  \n\n\nAdditional Notes:All jQuery effects, including .show(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Examples:\n\n\nExample: Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n      p { background:yellow; }\n      &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Show it&lt;\/button&gt;\n\n      &lt;p style=\"display: none\"&gt;Hello  2&lt;\/p&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n    $(\"p\").show(\"slow\");\n    });\n    &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all hidden divs to show fastly in order, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background:#def3ca; margin:3px; width:80px; \n  display:none; float:left; text-align:center; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;button id=\"showr\"&gt;Show&lt;\/button&gt;\n  &lt;button id=\"hidr\"&gt;Hide&lt;\/button&gt;\n  &lt;div&gt;Hello 3,&lt;\/div&gt;\n\n  &lt;div&gt;how&lt;\/div&gt;\n  &lt;div&gt;are&lt;\/div&gt;\n  &lt;div&gt;you?&lt;\/div&gt;\n&lt;script&gt;\n$(\"#showr\").click(function () {\n  $(\"div:eq(0)\").show(\"fast\", function () {\n    \/* use callee so don't have to name the function *\/\n    $(this).next(\"div\").show(\"fast\", arguments.callee);\n  });\n});\n$(\"#hidr\").click(function () {\n  $(\"div\").hide(2000);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Shows all span and input elements with an animation. Once the animation is done, it changes the text.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { display:none; }\n  div { display:none; }\n  p { font-weight:bold; background-color:#fcd; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Do it!&lt;\/button&gt;\n  &lt;span&gt;Are you sure? (type 'yes' if you are) &lt;\/span&gt;\n  &lt;div&gt;\n    &lt;form&gt;\n      &lt;input type=\"text\"  value=\"as;ldkfjalsdf\"\/&gt;\n    &lt;\/form&gt;\n  &lt;\/div&gt;\n  &lt;p style=\"display:none;\"&gt;I'm hidden...&lt;\/p&gt;\n  \n&lt;script&gt;\nfunction doIt() {\n  $(\"span,div\").show(\"slow\");\n}\n\/* can pass in function name *\/\n$(\"button\").click(doIt);\n\n$(\"form\").submit(function () {\n  if ($(\"input\").val() == \"yes\") {\n    $(\"p\").show(4000, function () {\n      $(this).text(\"Ok, DONE! (now showing)\");\n    });\n  }\n  $(\"span,div\").hide(\"fast\");\n  \/* to stop the submit *\/\n  return false; \n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/siblings\/","title":"siblings","description":"\n\n.siblings(  [selector]  ) Returns: jQuery\n\n\nDescription: Get the siblings of each element in the set of matched elements, optionally filtered by a selector.\n\n\nversion added: 1.0.siblings(  [selector] )\nselectorA string containing a selector expression to match elements against.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .siblings() method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.\nThe method optionally accepts a selector expression of the same type that we can pass to the $() function. If the selector is supplied, the elements will be filtered by testing whether they match it.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;\/li&gt;\n   &lt;li&gt;list item 2&lt;\/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;\/li&gt;\n   &lt;li&gt;list item 4&lt;\/li&gt;\n   &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nIf we begin at the third item, we can find its siblings:\n$('li.third-item').siblings().css('background-color', 'red');\nThe result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.\nThe original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree.\n\nExamples:\n\n\nExample: Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  ul { float:left; margin:5px; font-size:16px; font-weight:bold; }\n  p { color:blue; margin:10px 20px; font-size:16px; padding:5px; \n      font-weight:bolder; }\n  .hilite { background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;ul&gt;\n    &lt;li&gt;One&lt;\/li&gt;\n\n    &lt;li&gt;Two&lt;\/li&gt;\n    &lt;li class=\"hilite\"&gt;Three&lt;\/li&gt;\n    &lt;li&gt;Four&lt;\/li&gt;\n  &lt;\/ul&gt;\n\n  &lt;ul&gt;\n    &lt;li&gt;Five&lt;\/li&gt;\n    &lt;li&gt;Six&lt;\/li&gt;\n    &lt;li&gt;Seven&lt;\/li&gt;\n\n  &lt;\/ul&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Eight&lt;\/li&gt;\n    &lt;li class=\"hilite\"&gt;Nine&lt;\/li&gt;\n\n    &lt;li&gt;Ten&lt;\/li&gt;\n    &lt;li class=\"hilite\"&gt;Eleven&lt;\/li&gt;\n  &lt;\/ul&gt;\n  &lt;p&gt;Unique siblings: &lt;b&gt;&lt;\/b&gt;&lt;\/p&gt;\n&lt;script&gt;\n\n    var len = $(\".hilite\").siblings()\n                          .css(\"color\", \"red\")\n                          .length;\n    $(\"b\").text(len);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find all siblings with a class \"selected\" of each div.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;span&gt;Hello&lt;\/span&gt;&lt;\/div&gt;\n\n  &lt;p class=\"selected\"&gt;Hello Again&lt;\/p&gt;\n  &lt;p&gt;And Again&lt;\/p&gt;\n&lt;script&gt;$(\"p\").siblings(\".selected\").css(\"background\", \"yellow\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/size\/","title":"size","description":"\n\n.size() Returns: Number\n\n\nDescription: Return the number of elements in the jQuery object.\n\nversion added: 1.0.size()\n\nThe .size() method is functionally equivalent to the .length property; however, the .length property is preferred because it does not have the overhead of a function call.\nGiven a simple unordered list on the page:\n\n&lt;ul&gt;\n  &lt;li&gt;foo&lt;\/li&gt;\n  &lt;li&gt;bar&lt;\/li&gt;\n&lt;\/ul&gt;\n\nBoth .size() and .length identify the number of items:\nalert( \"Size: \" + $(\"li\").size() );\nalert( \"Size: \" + $(\"li\").length );\nThis results in two alerts:\nSize: 2\nSize: 2\n\nExample:\n\nCount the divs. Click to add more.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { cursor:pointer; min-height: 100px; }\n  div { width:50px; height:30px; margin:5px; \n        float:left; background:blue; }\n  span { color:red; }\n &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;span&gt;&lt;\/span&gt;\n &lt;div&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$(document.body)\n.click(function() { \n  $(this).append( $(\"&lt;div&gt;\") );\n  var n = $(\"div\").size();\n  $(\"span\").text(\"There are \" + n + \" divs. Click to add more.\");\n})\n\/\/ trigger the click to start\n.click(); \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/slice\/","title":"slice","description":"\n\n.slice( start [, end]  ) Returns: jQuery\n\n\nDescription: Reduce the set of matched elements to a subset specified by a range of indices.\n\n\nversion added: 1.1.4.slice( start [, end] )\nstartAn integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.\nendAn integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.\n\n\nGiven a jQuery object that represents a set of DOM elements, the .slice() method constructs a new jQuery object from a subset of the matching elements. The supplied start index identifies the position of one of the elements in the set; if end is omitted, all elements after this one will be included in the result.\nConsider a page with a simple list on it:\n\n&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list item 2&lt;\/li&gt;\n  &lt;li&gt;list item 3&lt;\/li&gt;\n  &lt;li&gt;list item 4&lt;\/li&gt;\n  &lt;li&gt;list item 5&lt;\/li&gt;\n&lt;\/ul&gt;\n\nWe can apply this method to the set of list items:\n$('li').slice(2).css('background-color', 'red');\nThe result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.\nThe end parameter allows us to limit the selected range even further. For example:\n$('li').slice(2, 4).css('background-color', 'red');\nNow only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.\nNegative Indices\nThe jQuery .slice() method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the start or end parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:\n$('li').slice(-2, -1).css('background-color', 'red');\nThis time only list item 4 is turned red, since it is the only item in the range between two from the end (-2) and one from the end (-1).\n\nExamples:\n\n\nExample: Turns divs yellow based on a random slice.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:40px; height:40px; margin:10px; float:left;\n        border:2px solid blue; }\n  span { color:red; font-weight:bold; }\n  button { margin:5px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;button&gt;Turn slice yellow&lt;\/button&gt;\n  &lt;span&gt;Click the button!&lt;\/span&gt;&lt;\/p&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    function colorEm() {\n      var $div = $(\"div\");\n      var start = Math.floor(Math.random() *\n                             $div.length);\n      var end = Math.floor(Math.random() *\n                           ($div.length - start)) +\n                           start + 1;\n      if (end == $div.length) end = undefined;\n      $div.css(\"background\", \"\");\n      if (end) \n        $div.slice(start, end).css(\"background\", \"yellow\");   \n       else\n        $div.slice(start).css(\"background\", \"yellow\");\n      \n      $(\"span\").text('$(\"div\").slice(' + start +\n                     (end ? ', ' + end : '') +\n                     ').css(\"background\", \"yellow\");');\n    }\n\n    $(\"button\").click(colorEm);\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Selects all paragraphs, then slices the selection to include only the first element.\n\n$(\"p\").slice(0, 1).wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");\n\n\nExample: Selects all paragraphs, then slices the selection to include only the first and second element.\n\n$(\"p\").slice(0, 2).wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");\n\n\nExample: Selects all paragraphs, then slices the selection to include only the second element.\n\n$(\"p\").slice(1, 2).wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");\n\n\nExample: Selects all paragraphs, then slices the selection to include only the second and third element.\n\n$(\"p\").slice(1).wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");\n\n\nExample: Selects all paragraphs, then slices the selection to include only the third element.\n\n$(\"p\").slice(-1).wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/slideDown\/","title":"slideDown","description":"\n\n.slideDown(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Display the matched elements with a sliding motion.\n\n\n\nversion added: 1.0.slideDown(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.slideDown(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .slideDown() method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively. If any other string is supplied, or if the duration parameter is omitted, the default duration of  400 milliseconds is used.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWith the element initially hidden, we can show it slowly:\n$('#clickme').click(function() {\n  $('#book').slideDown('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n \n\n\n\n\n\nEasing\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .slideDown(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates all divs to slide down and show themselves over 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { background:#de9a44; margin:3px; width:80px; \nheight:40px; display:none; float:left; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Click me!\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n$(document.body).click(function () {\nif ($(\"div:first\").is(\":hidden\")) {\n$(\"div\").slideDown(\"slow\");\n} else {\n$(\"div\").hide();\n}\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ndiv { background:#cfd; margin:3px; width:50px; \ntext-align:center; float:left; cursor:pointer;\nborder:2px outset black; font-weight:bolder; }\ninput { display:none; width:120px; float:left; \nmargin:10px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;Push!&lt;\/div&gt;\n&lt;input type=\"text\" \/&gt;\n&lt;input type=\"text\" class=\"middle\" \/&gt;\n\n&lt;input type=\"text\" \/&gt;\n&lt;script&gt;\n$(\"div\").click(function () {\n$(this).css({ borderStyle:\"inset\", cursor:\"wait\" });\n$(\"input\").slideDown(1000,function(){\n$(this).css(\"border\", \"2px red inset\")\n.filter(\".middle\")\n .css(\"background\", \"yellow\")\n .focus();\n$(\"div\").css(\"visibility\", \"hidden\");\n});\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/slideUp\/","title":"slideUp","description":"\n\n.slideUp(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Hide the matched elements with a sliding motion.\n\n\n\nversion added: 1.0.slideUp(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.slideUp(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .slideUp() method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the display style property is set to none to ensure that the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively. If any other string is supplied, or if the duration parameter is omitted, the default duration of  400 milliseconds is used.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWith the element initially shown, we can hide it slowly:\n$('#clickme').click(function() {\n  $('#book').slideUp('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n  \n \n  \n  \n   \n  \n  \nEasing\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .slideUp(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates all divs to slide up, completing the animation within 400 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background:#3d9a44; margin:3px; width:80px; \n    height:40px; float:left; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Click me!\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n  $(document.body).click(function () {\n    if ($(\"div:first\").is(\":hidden\")) {\n      $(\"div\").show(\"slow\");\n    } else {\n      $(\"div\").slideUp();\n    }\n  });\n\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n div { margin:2px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n  &lt;button&gt;Hide One&lt;\/button&gt;\n  &lt;input type=\"text\" value=\"One\" \/&gt;\n\n&lt;\/div&gt;\n&lt;div&gt;\n  &lt;button&gt;Hide Two&lt;\/button&gt;\n  &lt;input type=\"text\" value=\"Two\" \/&gt;\n\n&lt;\/div&gt;\n&lt;div&gt;\n  &lt;button&gt;Hide Three&lt;\/button&gt;\n  &lt;input type=\"text\" value=\"Three\" \/&gt;\n\n&lt;\/div&gt;\n&lt;div id=\"msg\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n  $(\"button\").click(function () {\n    $(this).parent().slideUp(\"slow\", function () {\n      $(\"#msg\").text($(\"button\", this).text() + \" has completed.\");\n    });\n  });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/slideToggle\/","title":"slideToggle","description":"\n\n.slideToggle(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Display or hide the matched elements with a sliding motion.\n\n\n\nversion added: 1.0.slideToggle(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.slideToggle(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nThe .slideToggle() method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The display property is saved and restored as needed. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline. When the height reaches 0 after a hiding animation, the display style property is set to none to ensure that the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\nWe will cause .slideToggle() to be called when another element is clicked:\n$('#clickme').click(function() {\n  $('#book').slideToggle('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n\nWith the element initially shown, we can hide it slowly with the first click:\n \n    \n    \n    \n    \n  \nA second click will show the element once again:\n \n    \n    \n    \n    \n  \nEasing\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nCallback Function\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nAs of jQuery 1.6, the .promise() method can be used in conjunction with the deferred.done() method to execute a single callback for the animation as a whole when all matching elements have completed their animations ( See the example for .promise() ).  \n\nAdditional Notes:All jQuery effects, including .slideToggle(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Because of the nature of requestAnimationFrame(), you should never queue animations using a setInterval or setTimeout loop. In order to preserve CPU resources, browsers that support requestAnimationFrame will not update animations when the window\/tab is not displayed. If you continue to queue animations via setInterval or setTimeout while animation is paused, all of the queued animations will begin playing when the window\/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements .queue() to set the timeout to start the next animation.\r\nExamples:\n\n\nExample: Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { width:400px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Toggle&lt;\/button&gt;\n\n  &lt;p&gt;\n    This is the paragraph to end all paragraphs.  You\n    should feel &lt;em&gt;lucky&lt;\/em&gt; to have seen such a paragraph in\n    your life.  Congratulations!\n  &lt;\/p&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      $(\"p\").slideToggle(\"slow\");\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates divs between dividers with a toggle that makes some appear and some disappear.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { background:#b977d1; margin:3px; width:60px; \n        height:60px; float:left; }\n  div.still { background:#345; width:5px; }\n  div.hider { display:none; }\n  span { color:red; }\n  p { clear: left; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;div class=\"still\"&gt;&lt;\/div&gt;\n&lt;div style=\"display:none;\"&gt;\n&lt;\/div&gt;&lt;div class=\"still\"&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;div class=\"still\"&gt;&lt;\/div&gt;\n&lt;div class=\"hider\"&gt;&lt;\/div&gt;\n&lt;div class=\"still\"&gt;&lt;\/div&gt;\n&lt;div class=\"hider\"&gt;&lt;\/div&gt;\n&lt;div class=\"still\"&gt;&lt;\/div&gt;\n&lt;div&gt;&lt;\/div&gt;\n&lt;p&gt;&lt;button id=\"aa\"&gt;Toggle&lt;\/button&gt; There have been &lt;span&gt;0&lt;\/span&gt; toggled divs.&lt;\/p&gt;\n&lt;script&gt;\n  $(\"#aa\").click(function () {\n    $(\"div:not(.still)\").slideToggle(\"slow\", function () {\n      var n = parseInt($(\"span\").text(), 10);\n      $(\"span\").text(n + 1);\n    });\n  });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/stop\/","title":"stop","description":"\n\n.stop(  [clearQueue]  [, jumpToEnd]  ) Returns: jQuery\n\n\nDescription: Stop the currently-running animation on the matched elements.\n\n\n\nversion added: 1.2.stop(  [clearQueue] [, jumpToEnd] )\nclearQueueA Boolean indicating whether to remove queued animation as well. Defaults to false.\njumpToEndA Boolean indicating whether to complete the current animation immediately. Defaults to false.\n\n\n\nversion added: 1.7.stop(  [queue] [, clearQueue] [, jumpToEnd] )\nqueueThe name of the queue in which to stop animations.\nclearQueueA Boolean indicating whether to remove queued animation as well. Defaults to false.\njumpToEndA Boolean indicating whether to complete the current animation immediately. Defaults to false.\n\n\n\nWhen .stop() is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with .slideUp() when .stop() is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.\nIf more than one animation method is called on the same element, the later animations are placed in the effects queue for the element. These animations will not begin until the first one completes. When .stop() is called, the next animation in the queue begins immediately. If the clearQueue parameter is provided with a value of true, then the rest of the animations in the queue are removed and never run.\nIf the jumpToEnd argument is provided with a value of true, the current animation stops, but the element is immediately given its target values for each CSS property. In our above .slideUp() example, the element would be immediately hidden. The callback function is then immediately called, if provided.\nAs of jQuery 1.7, if the first argument is provided as a string, only the animations in the queue represented by that string will be stopped.\nThe usefulness of the .stop() method is evident when we need to animate an element on mouseenter and mouseleave:\n&lt;div id=\"hoverme\"&gt;\n  Hover me\n  &lt;img id=\"hoverme\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\n&lt;\/div&gt;\nWe can create a nice fade effect without the common problem of multiple queued animations by adding .stop(true, true) to the chain:\n$('#hoverme-stop-2').hover(function() {\n  $(this).find('img').stop(true, true).fadeOut();\n}, function() {\n  $(this).find('img').stop(true, true).fadeIn();\n});\nToggling Animations\nAs of jQuery 1.7, stopping a toggled animation prematurely with .stop() will trigger jQuery's internal effects tracking. In previous versions, calling the .stop() method before a toggled animation was completed would cause the animation to lose track of its state (if jumpToEnd was false). Any subsequent animations would start at a new \"half-way\" state, sometimes resulting in the element disappearing. To observe the new behavior, see the final example below.\nAnimations may be stopped globally by setting the property $.fx.off to true. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.\n\nExamples:\n\n\nExample: Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;div { \nposition: absolute; \nbackground-color: #abc;\nleft: 0px;\ntop:30px;\nwidth: 60px; \nheight: 60px;\nmargin: 5px; \n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"go\"&gt;Go&lt;\/button&gt; \n&lt;button id=\"stop\"&gt;STOP!&lt;\/button&gt;\n&lt;button id=\"back\"&gt;Back&lt;\/button&gt;\n&lt;div class=\"block\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n\/* Start animation *\/\n$(\"#go\").click(function(){\n$(\".block\").animate({left: '+=100px'}, 2000);\n});\n\n\/* Stop animation when button is clicked *\/\n$(\"#stop\").click(function(){\n$(\".block\").stop();\n});\n\n\/* Start animation in the opposite direction *\/\n$(\"#back\").click(function(){\n$(\".block\").animate({left: '-=100px'}, 2000);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;.block { \nbackground-color: #abc;\nborder: 2px solid black;\nwidth: 200px; \nheight: 80px;\nmargin: 10px;\n}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"toggle\"&gt;slideToggle&lt;\/button&gt; \n&lt;div class=\"block\"&gt;&lt;\/div&gt;\n&lt;script&gt;\nvar $block = $('.block');\n\/* Toggle a sliding animation animation *\/\n$('#toggle').on('click', function() {\n    $block.stop().slideToggle(1000);\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.sub\/","title":"jQuery.sub","description":"\n\njQuery.sub() Returns: jQuery\n\n\nDescription: Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.\n\nversion added: 1.5jQuery.sub()\n\nThis method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.\nThere are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.\nNote that jQuery.sub() doesn't attempt to do any sort of isolation - that's not its intention. All the methods on the sub'd version of jQuery will still point to the original jQuery (events bound and triggered will still be through the main jQuery, data will be bound to elements through the main jQuery, Ajax queries and events will run through the main jQuery, etc.).\nNote that if you're looking to use this for plugin development you should first strongly consider using something like the jQuery UI widget factory which manages both state and plugin sub-methods. Some examples of using the jQuery UI widget factory to build a plugin.\nThe particular use cases of this method can be best described through some examples.\n\nExamples:\n\n\nExample: Adding a method to a jQuery sub so that it isn't exposed externally:\n\n  (function(){\n    var sub$ = jQuery.sub();\n\n    sub$.fn.myCustomMethod = function(){\n      return 'just for me';\n    };\n\n    sub$(document).ready(function() {\n      sub$('body').myCustomMethod() \/\/ 'just for me'\n    });\n  })();\n  \n  typeof jQuery('body').myCustomMethod \/\/ undefined\n\n\nExample: Override some jQuery methods to provide new functionality.\n\n\n(function() {\n  var myjQuery = jQuery.sub();\n\n  myjQuery.fn.remove = function() {\n    \/\/ New functionality: Trigger a remove event\n    this.trigger(\"remove\");\n\n    \/\/ Be sure to call the original jQuery remove method\n    return jQuery.fn.remove.apply( this, arguments );\n  };\n\n  myjQuery(function($) {\n    $(\".menu\").click(function() {\n      $(this).find(\".submenu\").remove();\n    });\n\n    \/\/ A new remove event is now triggered from this copy of jQuery\n    $(document).bind(\"remove\", function(e) {\n      $(e.target).parent().hide();\n    });\n  });\n})();\n\n\/\/ Regular jQuery doesn't trigger a remove event when removing an element\n\/\/ This functionality is only contained within the modified 'myjQuery'.\n\n\nExample: Create a plugin that returns plugin-specific methods.\n\n\n(function() {\n  \/\/ Create a new copy of jQuery using sub()\n  var plugin = jQuery.sub();\n\n  \/\/ Extend that copy with the new plugin methods\n  plugin.fn.extend({\n    open: function() {\n      return this.show();\n    },\n    close: function() {\n      return this.hide();\n    }\n  });\n\n  \/\/ Add our plugin to the original jQuery\n  jQuery.fn.myplugin = function() {\n    this.addClass(\"plugin\");\n\n    \/\/ Make sure our plugin returns our special plugin version of jQuery\n    return plugin( this );\n  };\n})();\n\n$(document).ready(function() {\n  \/\/ Call the plugin, open method now exists\n  $('#main').myplugin().open();\n\n  \/\/ Note: Calling just $(\"#main\").open() won't work as open doesn't exist!\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/submit-selector\/","title":":submit Selector","description":"\n\nsubmit  selector\n\n\nversion added: 1.0jQuery(':submit')\nDescription: Selects all elements of type submit.\nThe :submit selector typically applies to button or input elements. Note that some browsers treat &lt;button&gt; element as type=\"default\" implicitly while others (such as Internet Explorer) do not.  \nAdditional Notes:Because :submit is a jQuery extension and not part of the CSS specification, queries using :submit cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"submit\"] instead.Example:\n\nFinds all submit elements that are descendants of a td element.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:45px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;table&gt;\n&lt;form&gt;\n&lt;table id=\"exampleTable\" border=\"1\" cellpadding=\"10\" align=\"center\"&gt;\n\n    &lt;tr&gt;\n        &lt;th&gt;\n            Element Type\n        &lt;\/th&gt;\n        &lt;th&gt;\n            Element\n        &lt;\/th&gt;\n\n    &lt;\/tr\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"checkbox\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"file\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"hidden\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"image\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"password\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"radio\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"reset\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"submit\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;input type=\"text\" \/&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;select&gt;&lt;option&gt;Option&lt;\/option&gt;&lt;\/select&gt;\n        &lt;\/td&gt;\n\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;textarea&gt;&lt;\/textarea&gt;\n        &lt;\/td&gt;\n    &lt;\/tr&gt;\n\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;button&gt;Button&lt;\/button&gt;\n        &lt;\/td&gt;\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;button type=\"submit\"&gt;Button type=\"submit\"&lt;\/button&gt;\n        &lt;\/td&gt;\n    &lt;\/tr&gt;\n\n&lt;\/table&gt;\n&lt;\/form&gt;\n&lt;div id=\"result\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n    var submitEl = $(\"td :submit\")\n      .parent('td')\n      .css({background:\"yellow\", border:\"3px red solid\"})\n    .end();\n    \n    $('#result').text('jQuery matched ' + submitEl.length + ' elements.');\n\n    \/\/ so it won't submit\n    $(\"form\").submit(function () { return false; });\n    \n    \/\/ Extra JS to make the HTML easier to edit (None of this is relevant to the ':submit' selector\n    $('#exampleTable').find('td').each(function(i, el) {\n        var inputEl = $(el).children(),\n            inputType = inputEl.attr('type') ? ' type=\"' + inputEl.attr('type') + '\"' : '';\n        $(el).before('&lt;td&gt;' + inputEl[0].nodeName + inputType + '&lt;\/td&gt;');\n    })\n    \n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/submit\/","title":"submit","description":"\n\n.submit( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element.\n\n\n\nversion added: 1.0.submit( handler(eventObject) )\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nversion added: 1.4.3.submit(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\nversion added: 1.0.submit()\n\n\nThis method is a shortcut for .bind('submit', handler) in the first variation, and .trigger('submit') in the third.\nThe submit event is sent to an element when the user is attempting to submit a form. It can only be attached to &lt;form&gt; elements. Forms can be submitted either by clicking an explicit &lt;input type=\"submit\"&gt;, &lt;input type=\"image\"&gt;, or &lt;button type=\"submit\"&gt;, or by pressing Enter when certain form elements have focus.\nDepending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key.\nFor example, consider the HTML:\n&lt;form id=\"target\" action=\"destination.html\"&gt;\n  &lt;input type=\"text\" value=\"Hello there\" \/&gt;\n  &lt;input type=\"submit\" value=\"Go\" \/&gt;\n&lt;\/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;\/div&gt;\nThe event handler can be bound to the form:\n$('#target').submit(function() {\n  alert('Handler for .submit() called.');\n  return false;\n});\nNow when the form is submitted, the message is alerted. This happens prior to the actual submission, so we can cancel the submit action by calling .preventDefault() on the event object or by returning false from our handler. We can trigger the event manually when another element is clicked:\n$('#other').click(function() {\n  $('#target').submit();\n});\nAfter this code executes, clicks on Trigger the handler will also display the message. In addition, the default submit action on the form will be fired, so the form will be submitted.\nThe JavaScript submit event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the submit event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior. \n\nAdditional Notes:Forms and their child elements should not use input names or ids that conflict with properties of a form, such as submit, length, or method. Name conflicts can cause confusing failures. For a complete list of rules and to check your markup for these problems, see DOMLint. \r\nExamples:\n\n\nExample: If you'd like to prevent forms from being submitted unless a flag variable is set, try:\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { margin:0; color:blue; }\n  div,p { margin-left:10px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Type 'correct' to validate.&lt;\/p&gt;\n  &lt;form action=\"javascript:alert('success!');\"&gt;\n    &lt;div&gt;\n      &lt;input type=\"text\" \/&gt;\n\n      &lt;input type=\"submit\" \/&gt;\n    &lt;\/div&gt;\n  &lt;\/form&gt;\n  &lt;span&gt;&lt;\/span&gt;\n&lt;script&gt;\n\n    $(\"form\").submit(function() {\n      if ($(\"input:first\").val() == \"correct\") {\n        $(\"span\").text(\"Validated...\").show();\n        return true;\n      }\n      $(\"span\").text(\"Not valid!\").show().fadeOut(1000);\n      return false;\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: If you'd like to prevent forms from being submitted unless a flag variable is set, try:\n\n$(\"form\").submit( function () {\n  return this.some_flag_variable;\n} );\n\n\nExample: To trigger the submit event on the first form on the page, try:\n\n$(\"form:first\").submit();\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/text-selector\/","title":":text Selector","description":"\n\ntext  selector\n\n\nversion added: 1.0jQuery(':text')\nDescription: Selects all elements of type text.\n\n$(':text') is equivalent to $('[type=text]') and thus selects all &lt;input type=\"text\"&gt; elements. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':text') is equivalent to $('*:text'), so $('input:text') should be used instead. \nNote: As of jQuery 1.5.2, :text selects input elements that have no specified type attribute (in which case type=\"text\" is implied).  \n\nAdditional Notes:Because :text is a jQuery extension and not part of the CSS specification, queries using :text cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. For better performance in modern browsers, use [type=\"text\"] instead.Example:\n\nFinds all text inputs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  textarea { height:25px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;form&gt;\n    &lt;input type=\"button\" value=\"Input Button\"\/&gt;\n    &lt;input type=\"checkbox\" \/&gt;\n\n    &lt;input type=\"file\" \/&gt;\n    &lt;input type=\"hidden\" \/&gt;\n    &lt;input type=\"image\" \/&gt;\n\n    &lt;input type=\"password\" \/&gt;\n    &lt;input type=\"radio\" \/&gt;\n    &lt;input type=\"reset\" \/&gt;\n\n    &lt;input type=\"submit\" \/&gt;\n    &lt;input type=\"text\" \/&gt;\n    &lt;select&gt;&lt;option&gt;Option&lt;\/option&gt;&lt;\/select&gt;\n\n    &lt;textarea&gt;&lt;\/textarea&gt;\n    &lt;button&gt;Button&lt;\/button&gt;\n  &lt;\/form&gt;\n  &lt;div&gt;\n  &lt;\/div&gt;\n&lt;script&gt;\n\n    var input = $(\"form input:text\").css({background:\"yellow\", border:\"3px red solid\"});\n    $(\"div\").text(\"For this type jQuery found \" + input.length + \".\")\n            .css(\"color\", \"red\");\n    $(\"form\").submit(function () { return false; }); \/\/ so it won't submit\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.support\/","title":"jQuery.support","description":"\n\njQuery.support Returns: Object\n\n\nDescription: A collection of properties that represent the presence of different browser features or bugs.\n\nversion added: 1.3jQuery.support\n\nRather than using $.browser to detect the current user agent and alter the page presentation based on which browser is running, it is a good practice to perform feature detection. This means that prior to executing code which relies on a browser feature, we test to ensure that the feature works properly. To make this process simpler, jQuery performs many such tests and makes the results available to us as properties of the jQuery.support object.\nThe values of all the support properties are determined using feature detection (and do not use any form of browser sniffing). \n\n    Following are a few resources that explain how feature detection works:\n    \n      http:\/\/peter.michaux.ca\/articles\/feature-detection-state-of-the-art-browser-scripting\n      http:\/\/www.jibbering.com\/faq\/faq_notes\/not_browser_detect.html\n      http:\/\/yura.thinkweb2.com\/cft\/\n    \n\nWhile jQuery includes a number of properties, developers should feel free to add their own as their needs dictate. Many of the jQuery.support properties are rather low-level, so they are most useful for plugin and jQuery core development, rather than general day-to-day development. Since jQuery requires these tests internally, they must be performed on every page load; for that reason this list is kept short and limited to features needed by jQuery itself.\nThe tests included in jQuery.support are as follows:\n\n  \najax is equal to true if a browser is able to create an XMLHttpRequest object.\n\nboxModel is equal to true if the page is rendering according to the W3C CSS Box Model (is currently false in IE 6 and 7 when they are in Quirks Mode). This property is null until document ready occurs.\n\nchangeBubbles is equal to true if the change event bubbles up the DOM tree, as required by the W3C DOM event model. (It is currently false in IE, and jQuery simulates bubbling).\n\ncheckClone is equal to true if a browser correctly clones the checked state of radio buttons or checkboxes in document fragments.\n\ncheckOn is equal to true if the value of a checkbox defaults to \"on\" when no value is specified.\n\ncors is equal to true if a browser can create an XMLHttpRequest object and if that XMLHttpRequest object has a withCredentials property. To enable cross-domain requests in environments that do not support cors yet but do allow cross-domain XHR requests (windows gadget, etc), set $.support.cors = true;.\nCORS WD\n\n\ncssFloat is equal to true if the name of the property containing the CSS float value is .cssFloat, as defined in the CSS Spec. (It is currently false in IE, it uses styleFloat instead).\n\nhrefNormalized is equal to true if the .getAttribute() method retrieves the href attribute of elements unchanged, rather than normalizing it to a fully-qualified URL. (It is currently false in IE, the URLs are normalized).\n  DOM l3 spec\n\n\nhtmlSerialize is equal to true  if the browser is able to serialize\/insert &lt;link&gt; elements using the .innerHTML property of elements. (is currently false in IE). HTML5 WD\n\n\nleadingWhitespace is equal to true if the browser inserts content with .innerHTML exactly as provided\u2014specifically, if leading whitespace characters are preserved. (It is currently false in IE 6-8). HTML5 WD\n\n\nnoCloneChecked is equal to true if cloned DOM elements copy over the state of the .checked expando. (It is currently false in IE). (Added in jQuery 1.5.1)\n\nnoCloneEvent is equal to true  if cloned DOM elements are created without event handlers (that is, if the event handlers on the source element are not cloned). (It is currently false in IE). DOM l2 spec\n\n\nopacity is equal to true if a browser can properly interpret the opacity style property. (It is currently false in IE, it uses alpha filters instead). CSS3 spec\n\n\noptDisabled is equal to true if option elements within disabled select elements are not automatically marked as disabled. HTML5 WD\n\n\noptSelected is equal to true if an &lt;option&gt; element that is selected by default has a working selected property. HTML5 WD\n\n\nscriptEval() is equal to true if inline scripts are automatically evaluated and executed when inserted into the document using standard DOM manipulation methods such as .appendChild() and .createTextNode(). (It is currently false in IE, it uses .text to insert executable scripts). \n\nNote: No longer supported; removed in jQuery 1.6. Prior to jQuery 1.5.1, the scriptEval() method was the static scriptEval property. The change to a method allowed the test to be deferred until first use to prevent content security policy inline-script violations. \nHTML5 WD\n\n\nstyle is equal to true if inline styles for an element can be accessed through the DOM attribute called style, as required by the DOM Level 2 specification. In this case, .getAttribute('style') can retrieve this value; in Internet Explorer, .cssText is used for this purpose. DOM l2 Style spec\n\n\nsubmitBubbles is equal to true if the submit event bubbles up the DOM tree, as required by the W3C DOM event model. (It is currently false in IE, and jQuery simulates bubbling).\n\ntbody is equal to true if an empty &lt;table&gt; element can exist without a &lt;tbody&gt; element. According to the HTML specification, this sub-element is optional, so the property should be true in a fully-compliant browser. If false, we must account for the possibility of the browser injecting &lt;tbody&gt; tags implicitly. (It is currently false in IE, which automatically inserts tbody if it is not present in a string assigned to innerHTML). HTML5 spec\n\n\n\nExamples:\n\n\nExample: Returns the box model for the iframe.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; margin:20px; }\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;\n  &lt;\/p&gt;\n&lt;script&gt;\n\n    $(\"p\").html(\"This frame uses the W3C box model: &lt;span&gt;\" +\n                jQuery.support.boxModel + \"&lt;\/span&gt;\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Returns false if the page is in QuirksMode in Internet Explorer\n\njQuery.support.boxModel\nResult:\nfalse\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/text\/","title":"text","description":"\nContents:\n\n\ntext() .text()\n              \n\n\ntext( textString \u00a0) \n.text( textString )\n              \n.text( function(index, text) )\n              \n\n\n\n\n\n.text() Returns: String\n\n\nDescription: Get the combined text contents of each element in the set of matched elements, including their descendants.\n\nversion added: 1.0.text()\n\nUnlike the .html() method, .text() can be used in both XML and HTML documents. The result of the .text() method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:\n&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;\/div&gt;\n  &lt;ul&gt;\n  &lt;li&gt;list item 1&lt;\/li&gt;\n  &lt;li&gt;list &lt;strong&gt;item&lt;\/strong&gt; 2&lt;\/li&gt;\n  &lt;\/ul&gt;\n  &lt;\/div&gt;\n\nThe code $('div.demo-container').text() would produce the following result:\n\n        Demonstration Box list item 1 list item 2\n      \nThe .text() method cannot be used on form inputs or scripts.  To set or get the text value of input or textarea elements, use the .val() method. To get the value of a script element, use the .html() method.\nAs of jQuery 1.4, the .text() method returns the value of text and CDATA nodes as well as element nodes.\n\nExample:\n\nFind the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:blue; margin:8px; }\n  b { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;b&gt;Test&lt;\/b&gt; Paragraph.&lt;\/p&gt;\n\n  &lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;\n    var str = $(\"p:first\").text();\n    $(\"p:last\").html(str);\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.text( textString ) Returns: jQuery\n\n\nDescription: Set the content of each element in the set of matched elements to the specified text.\n\n\n\nversion added: 1.0.text( textString )\ntextStringA string of text to set as the content of each matched element.\n\n\n\nversion added: 1.4.text( function(index, text) )\nfunction(index, text)A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.\n\n\n\nUnlike the .html() method, .text() can be used in both XML and HTML documents. \nWe need to be aware that this method escapes the string provided as necessary so that it will render correctly in HTML. To do so, it calls the DOM method .createTextNode(), which replaces special characters with their HTML entity equivalents (such as &amp;lt; for &lt;).  Consider the following HTML:\n&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;\/div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list item 1&lt;\/li&gt;\n    &lt;li&gt;list &lt;strong&gt;item&lt;\/strong&gt; 2&lt;\/li&gt;\n  &lt;\/ul&gt;\n&lt;\/div&gt;\n\nThe code $('div.demo-container').text('&lt;p&gt;This is a test.&lt;\/p&gt;'); will produce the following DOM output:\n&lt;div class=\"demo-container\"&gt;\n&amp;lt;p&amp;gt;This is a test.&amp;lt;\/p&amp;gt;\n&lt;\/div&gt;\nIt will appear on a rendered page as though the tags were exposed, like this:\n&lt;p&gt;This is a test&lt;\/p&gt;\nThe .text() method cannot be used on input elements.  For input field text, use the .val() method.\nAs of jQuery 1.4, the .text() method allows us to set the text content by passing in a function.\n$('ul li').text(function(index) {\n  return 'item number ' + (index + 1);\n});\nGiven an unordered list with three &lt;li&gt; elements, this example will produce the following DOM output:\n&lt;ul&gt;\n  &lt;li&gt;item number 1&lt;\/li&gt;\n  &lt;li&gt;item number 2&lt;\/li&gt;\n  &lt;li&gt;item number 3&lt;\/li&gt;\n&lt;\/ul&gt;\n\n\nExample:\n\nAdd text to the paragraph (notice the bold tag is escaped).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { color:blue; margin:8px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Test Paragraph.&lt;\/p&gt;\n&lt;script&gt;$(\"p\").text(\"&lt;b&gt;Some&lt;\/b&gt; new text.\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/toggleClass\/","title":"toggleClass","description":"\n\n.toggleClass( className ) Returns: jQuery\n\n\nDescription: Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.\n\n\n\nversion added: 1.0.toggleClass( className )\nclassNameOne or more class names (separated by spaces) to be toggled for each element in the matched set.\n\n\n\nversion added: 1.3.toggleClass( className, switch )\nclassNameOne or more class names (separated by spaces) to be toggled for each element in the matched set.\nswitchA Boolean (not just truthy\/falsy) value to determine whether the class should be added or removed.\n\n\n\nversion added: 1.4.toggleClass(  [switch] )\nswitchA boolean value to determine whether the class should be added or removed.\n\n\n\nversion added: 1.4.toggleClass( function(index, class, switch) [, switch] )\nfunction(index, class, switch)A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.\nswitchA boolean value to determine whether the class should be added or removed.\n\n\n\nThis method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply .toggleClass() to a simple &lt;div&gt;: \n&lt;div class=\"tumble\"&gt;Some text.&lt;\/div&gt;\n      \nThe first time we apply $('div.tumble').toggleClass('bounce'), we get the following:\n&lt;div class=\"tumble bounce\"&gt;Some text.&lt;\/div&gt;\n      \nThe second time we apply $('div.tumble').toggleClass('bounce'), the &lt;div&gt; class is returned to the single tumble value:\n&lt;div class=\"tumble\"&gt;Some text.&lt;\/div&gt;\nApplying .toggleClass('bounce spin') to the same &lt;div&gt; alternates between &lt;div class=\"tumble bounce spin\"&gt; and &lt;div class=\"tumble\"&gt;.\nThe second version of .toggleClass() uses the second parameter for determining whether the class should be added or removed. If this parameter's value is true, then the class is added; if false, the class is removed. In essence, the statement:\n$('#foo').toggleClass(className, addOrRemove);\nis equivalent to:\nif (addOrRemove) {\n    $('#foo').addClass(className);\n  }\n  else {\n    $('#foo').removeClass(className);\n  }\n  \nAs of jQuery 1.4, if no arguments are passed to .toggleClass(), all class names on the element the first time .toggleClass() is called will be toggled. Also as of jQuery 1.4, the class name to be toggled can be determined by passing in a function.\n$('div.foo').toggleClass(function() {\n  if ($(this).parent().is('.bar')) {\n    return 'happy';\n  } else {\n    return 'sad';\n  }\n});\nThis example will toggle the happy class for &lt;div class=\"foo\"&gt; elements if their parent element has a class of bar; otherwise, it will toggle the sad class.\n\nExamples:\n\n\nExample: Toggle the class 'highlight' when a paragraph is clicked.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { margin: 4px; font-size:16px; font-weight:bolder;\n      cursor:pointer; }\n  .blue { color:blue; }\n  .highlight { background:yellow; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"blue\"&gt;Click to toggle&lt;\/p&gt;\n  &lt;p class=\"blue highlight\"&gt;highlight&lt;\/p&gt;\n  &lt;p class=\"blue\"&gt;on these&lt;\/p&gt;\n  &lt;p class=\"blue\"&gt;paragraphs&lt;\/p&gt;\n&lt;script&gt;\n    $(\"p\").click(function () {\n      $(this).toggleClass(\"highlight\");\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Add the \"highlight\" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { margin: 4px; font-size:16px; font-weight:bolder;\n      cursor:pointer; }\n  .blue { color:blue; }\n  .highlight { background:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p class=\"blue\"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;\/span&gt;)&lt;\/p&gt;\n  &lt;p class=\"blue highlight\"&gt;highlight (&lt;span&gt;clicks: 0&lt;\/span&gt;)&lt;\/p&gt;\n  &lt;p class=\"blue\"&gt;on these (&lt;span&gt;clicks: 0&lt;\/span&gt;)&lt;\/p&gt;\n\n  &lt;p class=\"blue\"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;\/span&gt;)&lt;\/p&gt;\n&lt;script&gt;\nvar count = 0;\n$(\"p\").each(function() {\n  var $thisParagraph = $(this);\n  var count = 0;\n  $thisParagraph.click(function() {\n    count++;\n    $thisParagraph.find(\"span\").text('clicks: ' + count);\n    $thisParagraph.toggleClass(\"highlight\", count % 3 == 0);\n  });\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Toggle the class name(s) indicated on the buttons for each div.\n  \n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.wrap &gt; div { float: left; width: 100px; margin: 1em 1em 0 0;\n              padding=left: 3px; border: 1px solid #abc; }\ndiv.a { background-color: aqua; }\ndiv.b { background-color: burlywood; }\ndiv.c { background-color: cornsilk; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;div class=\"buttons\"&gt;\n  &lt;button&gt;toggle&lt;\/button&gt;\n  &lt;button class=\"a\"&gt;toggle a&lt;\/button&gt;\n  &lt;button class=\"a b\"&gt;toggle a b&lt;\/button&gt;\n  &lt;button class=\"a b c\"&gt;toggle a b c&lt;\/button&gt;\n  &lt;a href=\"#\"&gt;reset&lt;\/a&gt;\n&lt;\/div&gt;\n&lt;div class=\"wrap\"&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div class=\"b\"&gt;&lt;\/div&gt;\n  &lt;div class=\"a b\"&gt;&lt;\/div&gt;\n  &lt;div class=\"a c\"&gt;&lt;\/div&gt;\n&lt;\/div&gt;\n\n&lt;script&gt;\nvar cls = ['', 'a', 'a b', 'a b c'];\nvar divs = $('div.wrap').children();\nvar appendClass = function() {\n  divs.append(function() {\n    return '&lt;div&gt;' + (this.className || 'none') + '&lt;\/div&gt;';\n  });\n};\n\nappendClass();\n\n$('button').bind('click', function() {\n  var tc = this.className || undefined;\n  divs.toggleClass(tc);\n  appendClass();\n});\n\n$('a').bind('click', function(event) {\n  event.preventDefault();\n  divs.empty().each(function(i) {\n    this.className = cls[i];\n  });\n  appendClass();\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/toArray\/","title":"toArray","description":"\n\n.toArray() Returns: Array\n\n\nDescription: Retrieve all the DOM elements contained in the jQuery set, as an array.\n\nversion added: 1.4.toArray()\n\n.toArray() returns all of the elements in the jQuery set:\nalert($('li').toArray());\nAll of the matched DOM nodes are returned by this call, contained in a standard array:\n[&lt;li id=\"foo\"&gt;, &lt;li id=\"bar\"&gt;]\n\nExample:\n\nSelects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  span { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Reversed - &lt;span&gt;&lt;\/span&gt;\n\n  &lt;div&gt;One&lt;\/div&gt;\n  &lt;div&gt;Two&lt;\/div&gt;\n  &lt;div&gt;Three&lt;\/div&gt;\n&lt;script&gt;\n\n    function disp(divs) {\n      var a = [];\n      for (var i = 0; i &lt; divs.length; i++) {\n        a.push(divs[i].innerHTML);\n      }\n      $(\"span\").text(a.join(\" \"));\n    }\n    \n    disp( $(\"div\").toArray().reverse() );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/toggle\/","title":"toggle","description":"\n\n.toggle(  [duration]  [, callback]  ) Returns: jQuery\n\n\nDescription: Display or hide the matched elements.\n\n\n\nversion added: 1.0.toggle(  [duration] [, callback] )\ndurationA string or number determining how long the animation will run.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.4.3.toggle(  [duration] [, easing] [, callback] )\ndurationA string or number determining how long the animation will run.\neasingA string indicating which easing function to use for the transition.\ncallbackA function to call once the animation is complete.\n\n\n\nversion added: 1.3.toggle( showOrHide )\nshowOrHideA Boolean indicating whether to show or hide the elements.\n\n\n\nWith no parameters, the .toggle() method simply toggles the visibility of elements:\n$('.target').toggle();\n\nThe matched elements will be revealed or hidden immediately, with no animation, by changing the CSS display property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The display property is saved and restored as needed. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline.\nWhen a duration is provided, .toggle() becomes an animation method. The .toggle() method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0 after a hiding animation, the display style property is set to none to ensure that the element no longer affects the layout of the page.\nDurations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings 'fast' and 'slow' can be supplied to indicate durations of 200 and 600 milliseconds, respectively.\nNote: The event handling suite also has a method named .toggle(). Which one is fired depends on the set of arguments passed.\nAs of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called swing, and one that progresses at a constant pace, called linear. More easing functions are available with the use of plug-ins, most notably the jQuery UI suite.\nIf supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but this is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.\nWe can animate any element, such as a simple image:\n&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;\/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\" \/&gt;\n\nWe will cause .toggle() to be called when another element is clicked:\n$('#clickme').click(function() {\n  $('#book').toggle('slow', function() {\n    \/\/ Animation complete.\n  });\n});\n\nWith the element initially shown, we can hide it slowly with the first click:\n\n \n\n\n\n\n\nA second click will show the element once again:\n\n\n\n\n\nThe second version of the method accepts a Boolean parameter. If this parameter is true, then the matched elements are shown; if false, the elements are hidden. In essence, the statement:\n\n$('#foo').toggle(showOrHide);\nis equivalent to:\nif ( showOrHide == true ) {\n  $('#foo').show();\n} else if ( showOrHide == false ) {\n  $('#foo').hide();\n}\n\n\nAdditional Notes:All jQuery effects, including .toggle(), can be turned off globally by setting  jQuery.fx.off = true, which effectively sets the duration to 0. For more information, see jQuery.fx.off.Examples:\n\n\nExample: Toggles all paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Toggle&lt;\/button&gt;\n&lt;p&gt;Hello&lt;\/p&gt;\n&lt;p style=\"display: none\"&gt;Good Bye&lt;\/p&gt;\n&lt;script&gt;\n\n$(\"button\").click(function () {\n$(\"p\").toggle();\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\np { background:#dad;\nfont-weight:bold;\nfont-size:16px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Toggle 'em&lt;\/button&gt;\n\n&lt;p&gt;Hiya&lt;\/p&gt;\n&lt;p&gt;Such interesting text, eh?&lt;\/p&gt;\n&lt;script&gt;\n$(\"button\").click(function () {\n$(\"p\").toggle(\"slow\");\n});    \n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Shows all paragraphs, then hides them all, back and forth.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Toggle&lt;\/button&gt;\n&lt;p&gt;Hello&lt;\/p&gt;\n&lt;p style=\"display: none\"&gt;Good Bye&lt;\/p&gt;\n&lt;script&gt;\n\nvar flip = 0;\n$(\"button\").click(function () {\n$(\"p\").toggle( flip++ % 2 == 0 );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/triggerHandler\/","title":"triggerHandler","description":"\n\n.triggerHandler( eventType, extraParameters ) Returns: Object\n\n\nDescription: Execute all handlers attached to an element for an event.\n\n\nversion added: 1.2.triggerHandler( eventType, extraParameters )\neventTypeA string containing a JavaScript event type, such as click or submit.\nextraParametersAn array of additional parameters to pass along to the event handler.\n\n\nThe .triggerHandler() method behaves similarly to .trigger(), with the following exceptions:\n\n    The .triggerHandler() method does not cause the default behavior of an event to occur (such as a form submission).\n    While .trigger() will operate on all elements matched by the jQuery object, .triggerHandler() only affects the first matched element.\n    Events created with .triggerHandler() do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.\n    Instead of returning the jQuery object (to allow chaining), .triggerHandler() returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns undefined\n\n    \nFor more information on this method, see the discussion for .trigger().\n\nExample:\n\nIf you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"old\"&gt;.trigger(\"focus\")&lt;\/button&gt;\n&lt;button id=\"new\"&gt;.triggerHandler(\"focus\")&lt;\/button&gt;&lt;br\/&gt;&lt;br\/&gt;\n\n&lt;input type=\"text\" value=\"To Be Focused\"\/&gt;\n&lt;script&gt;\n\n$(\"#old\").click(function(){\n$(\"input\").trigger(\"focus\");\n});\n$(\"#new\").click(function(){\n$(\"input\").triggerHandler(\"focus\");\n});\n$(\"input\").focus(function(){\n$(\"&lt;span&gt;Focused!&lt;\/span&gt;\").appendTo(\"body\").fadeOut(1000);\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.trim\/","title":"jQuery.trim","description":"\n\njQuery.trim( str ) Returns: String\n\n\nDescription: Remove the whitespace from the beginning and end of a string.\n\n\nversion added: 1.0jQuery.trim( str )\nstrThe string to trim.\n\nThe $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.\nExamples:\n\n\nExample: Remove the two white spaces at the start and at the end of the string.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n        &lt;pre id=\"original\"&gt;&lt;\/pre&gt;\n        &lt;pre id=\"trimmed\"&gt;&lt;\/pre&gt;\n      \n&lt;script&gt;\n  var str = \"         lots of spaces before and after         \";\n  $(\"#original\").html(\"Original String: '\" + str + \"'\");\n  $(\"#trimmed\").html(\"$.trim()'ed: '\" + $.trim(str) + \"'\");\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Remove the two white spaces at the start and at the end of the string.\n\n$.trim(\"    hello, how are you?    \");\nResult:\n\"hello, how are you?\"\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.type\/","title":"jQuery.type","description":"\n\njQuery.type( obj ) Returns: String\n\n\nDescription: Determine the internal JavaScript [[Class]] of an object.\n\n\nversion added: 1.4.3jQuery.type( obj )\nobjObject to get the internal JavaScript [[Class]] of.\n\n\nA number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:\n\nIf the object is undefined or null, then \"undefined\" or \"null\" is returned accordingly.\nIf the object has an internal [[Class]] equivalent to one of the browser's built-in objects, the associated name is returned. (More details about this technique.)\njQuery.type(true) === \"boolean\"\njQuery.type(3) === \"number\"\njQuery.type(\"test\") === \"string\"\njQuery.type(function(){}) === \"function\"\njQuery.type([]) === \"array\"\njQuery.type(new Date()) === \"date\"\njQuery.type(\/test\/) === \"regexp\"\n\n\nEverything else returns \"object\" as its type.\n\n\nExample:\n\nFind out if the parameter is a RegExp.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Is it a RegExp? &lt;b&gt;&lt;\/b&gt;\n&lt;script&gt;$(\"b\").append( \"\" + jQuery.type(\/test\/) );&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/unbind\/","title":"unbind","description":"\n\n.unbind(  [eventType]  [, handler(eventObject)]  ) Returns: jQuery\n\n\nDescription: Remove a previously-attached event handler from the elements.\n\n\n\nversion added: 1.0.unbind(  [eventType] [, handler(eventObject)] )\neventTypeA string containing a JavaScript event type, such as click or submit.\nhandler(eventObject)The function that is to be no longer executed.\n\n\n\nversion added: 1.4.3.unbind( eventType, false )\neventTypeA string containing a JavaScript event type, such as click or submit.\nfalseUnbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).\n\n\n\nversion added: 1.0.unbind( event )\neventA JavaScript event object as passed to an event handler.\n\n\n\nEvent handlers attached with .bind() can be removed with .unbind(). (As of jQuery 1.7, the .on() and .off() methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, .unbind() removes all handlers attached to the elements:\n$('#foo').unbind();\nThis version removes the handlers regardless of type. To be more precise, we can pass an event type:\n$('#foo').unbind('click');\nBy specifying the click event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:\nvar handler = function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n};\n$('#foo').bind('click', handler);\n$('#foo').unbind('click', handler);\n\nBy naming the handler, we can be assured that no other functions are accidentally removed. Note that the following will not work:\n$('#foo').bind('click', function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n});\n\n\/\/ will NOT work\n$('#foo').unbind('click', function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n});\nEven though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.\nNote: Using a proxied function to unbind an event on an element will unbind all proxied functions on that element, as the same proxy function is used for all proxied events. To allow unbinding a specific event, use unique class names on the event (e.g. click.proxy1, click.proxy2) when attaching them.\nUsing Namespaces\nInstead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the .bind() method, namespaces are defined by using a period (.) character when binding a handler:\n$('#foo').bind('click.myEvents', handler);\nWhen a handler is bound in this fashion, we can still unbind it the normal way:\n$('#foo').unbind('click');\nHowever, if we want to avoid affecting other handlers, we can be more specific:\n$('#foo').unbind('click.myEvents');\nWe can also unbind all of the handlers in a namespace, regardless of event type:\n$('#foo').unbind('.myEvents');\nIt is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.\nUsing the Event Object\nThe third form of the .unbind() method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:\nvar timesClicked = 0;\n$('#foo').bind('click', function(event) {\n  alert('The quick brown fox jumps over the lazy dog.');\n  timesClicked++;\n  if (timesClicked &gt;= 3) {\n    $(this).unbind(event);\n  }\n});\n\nThe handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for .unbind() to know which handler to remove.\nThis example is also an illustration of a closure. Since the handler refers to the timesClicked variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.\n\nExamples:\n\n\nExample: Can bind and unbind events to the colored button.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nbutton { margin:5px; }\nbutton#theone { color:red; background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"theone\"&gt;Does nothing...&lt;\/button&gt;\n&lt;button id=\"bind\"&gt;Bind Click&lt;\/button&gt;\n&lt;button id=\"unbind\"&gt;Unbind Click&lt;\/button&gt;\n\n&lt;div style=\"display:none;\"&gt;Click!&lt;\/div&gt;\n&lt;script&gt;\n\nfunction aClick() {\n$(\"div\").show().fadeOut(\"slow\");\n}\n$(\"#bind\").click(function () {\n\/\/ could use .bind('click', aClick) instead but for variety...\n$(\"#theone\").click(aClick)\n  .text(\"Can Click!\");\n});\n$(\"#unbind\").click(function () {\n$(\"#theone\").unbind('click', aClick)\n  .text(\"Does nothing...\");\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To unbind all events from all paragraphs, write:\n\n$(\"p\").unbind()\n\n\nExample: To unbind all click events from all paragraphs, write:\n\n$(\"p\").unbind( \"click\" )\n\n\nExample: To unbind just one previously bound handler, pass the function in as the second argument:\n\nvar foo = function () {\n\/\/ code to handle some kind of event\n};\n\n$(\"p\").bind(\"click\", foo); \/\/ ... now foo will be called when paragraphs are clicked ...\n\n$(\"p\").unbind(\"click\", foo); \/\/ ... foo will no longer be called.\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/trigger\/","title":"trigger","description":"\n\n.trigger( eventType, extraParameters ) Returns: jQuery\n\n\nDescription: Execute all handlers and behaviors attached to the matched elements for the given event type.\n\n\n\nversion added: 1.0.trigger( eventType, extraParameters )\neventTypeA string containing a JavaScript event type, such as click or submit.\nextraParametersAdditional parameters to pass along to the event handler.\n\n\n\nversion added: 1.3.trigger( event )\neventA jQuery.Event object.\n\n\n\nAny event handlers attached with .bind() or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the .trigger() method. A call to .trigger() executes the handlers in the same order they would be if the event were triggered naturally by the user:\n$('#foo').bind('click', function() {\n      alert($(this).text());\n    });\n    $('#foo').trigger('click');\nAs of jQuery 1.3, .trigger()ed events bubble up the DOM tree; an event handler can stop the bubbling by returning false from the handler or calling the .stopPropagation() method on the event object passed into the event. Although .trigger() simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.\nTo trigger handlers bound via jQuery without also triggering the native event, use .triggerHandler() instead. \nWhen we define a custom event type using the .bind() method, the second argument to .trigger() can become useful. For example, suppose we have bound a handler for the custom event to our element instead of the built-in click event as we did above:\n$('#foo').bind('custom', function(event, param1, param2) {\n  alert(param1 + \"\\n\" + param2);\n});\n$('#foo').trigger('custom', ['Custom', 'Event']);\n\nThe event object is always passed as the first parameter to an event handler, but if additional parameters are specified during a .trigger() call, these parameters will be passed along to the handler as well. To pass more than one parameter, use an array as shown here. As of jQuery 1.6.2, a single parameter can be passed without using an array.\nNote the difference between the extra parameters we're passing here and the eventData parameter to the .bind() method. Both are mechanisms for passing information to an event handler, but the extraParameters argument to .trigger() allows information to be determined at the time the event is triggered, while the eventData argument to .bind() requires the information to be already computed at the time the handler is bound.\nThe .trigger() method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub\/sub mechanism; any event handlers bound to the object will be called when the event is triggered. \n\nNote: For both plain objects and DOM objects, if a triggered event name matches the name of a property on the object, jQuery will attempt to invoke the property as a method if no event handler calls event.preventDefault(). If this behavior is not desired, use .triggerHandler() instead.\n\nExamples:\n\n\nExample: Clicks to button #2 also trigger a click for button #1.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\nbutton { margin:10px; }\ndiv { color:blue; font-weight:bold; }\nspan { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Button #1&lt;\/button&gt;\n&lt;button&gt;Button #2&lt;\/button&gt;\n&lt;div&gt;&lt;span&gt;0&lt;\/span&gt; button #1 clicks.&lt;\/div&gt;\n\n&lt;div&gt;&lt;span&gt;0&lt;\/span&gt; button #2 clicks.&lt;\/div&gt;\n&lt;script&gt;\n$(\"button:first\").click(function () {\nupdate($(\"span:first\"));\n});\n$(\"button:last\").click(function () {\n$(\"button:first\").trigger('click');\n\nupdate($(\"span:last\"));\n});\n\nfunction update(j) {\nvar n = parseInt(j.text(), 10);\nj.text(n + 1);\n}\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To submit the first form without using the submit() function, try:\n\n$(\"form:first\").trigger(\"submit\")\n\n\nExample: To submit the first form without using the submit() function, try:\n\nvar event = jQuery.Event(\"submit\");\n$(\"form:first\").trigger(event);\nif ( event.isDefaultPrevented() ) {\n\/\/ Perform an action...\n}\n\n\nExample: To pass arbitrary data to an event:\n\n$(\"p\").click( function (event, a, b) {\n\/\/ when a normal click fires, a and b are undefined\n\/\/ for a trigger like below a refers to \"foo\" and b refers to \"bar\"\n\n} ).trigger(\"click\", [\"foo\", \"bar\"]);\n\n\nExample: To pass arbitrary data through an event object:\n\nvar event = jQuery.Event(\"logged\");\nevent.user = \"foo\";\nevent.pass = \"bar\";\n$(\"body\").trigger(event);\n\n\nExample: Alternative way to pass data through an event object:\n\n$(\"body\").trigger({\ntype:\"logged\",\nuser:\"foo\",\npass:\"bar\"\n\n});\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/undelegate\/","title":"undelegate","description":"\n\n.undelegate(  ) Returns: jQuery\n\n\nDescription: Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n\n\nversion added: 1.4.2.undelegate()\n\n\nversion added: 1.4.2.undelegate( selector, eventType )\nselectorA selector which will be used to filter the event results.\neventTypeA string containing a JavaScript event type, such as \"click\" or \"keydown\"\n\n\n\nversion added: 1.4.2.undelegate( selector, eventType, handler )\nselectorA selector which will be used to filter the event results.\neventTypeA string containing a JavaScript event type, such as \"click\" or \"keydown\"\nhandlerA function to execute at the time the event is triggered.\n\n\n\nversion added: 1.4.3.undelegate( selector, events )\nselectorA selector which will be used to filter the event results.\neventsA map of one or more event types and previously bound functions to unbind from them.\n\n\n\nversion added: 1.6.undelegate( namespace )\nnamespaceA string containing a namespace to unbind all events from.\n\n\nThe .undelegate() method is a way of removing event handlers that have been bound using .delegate(). As of jQuery 1.7, the .on() and .off() methods are preferred for attaching and removing event handlers.\nExamples:\n\n\nExample: Can bind and unbind events to the colored button.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\nbutton { margin:5px; }\nbutton#theone { color:red; background:yellow; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"theone\"&gt;Does nothing...&lt;\/button&gt;\n&lt;button id=\"bind\"&gt;Bind Click&lt;\/button&gt;\n&lt;button id=\"unbind\"&gt;Unbind Click&lt;\/button&gt;\n&lt;div style=\"display:none;\"&gt;Click!&lt;\/div&gt;\n&lt;script&gt;\nfunction aClick() {\n  $(\"div\").show().fadeOut(\"slow\");\n}\n$(\"#bind\").click(function () {\n  $(\"body\").delegate(\"#theone\", \"click\", aClick)\n    .find(\"#theone\").text(\"Can Click!\");\n});\n$(\"#unbind\").click(function () {\n  $(\"body\").undelegate(\"#theone\", \"click\", aClick)\n    .find(\"#theone\").text(\"Does nothing...\");\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: To unbind all delegated events from all paragraphs, write:\n\n$(\"p\").undelegate()\n\n\nExample: To unbind all delegated click events from all paragraphs, write:\n\n$(\"p\").undelegate( \"click\" )\n\n\nExample: To undelegate just one previously bound handler, pass the function in as the third argument:\n\nvar foo = function () {\n  \/\/ code to handle some kind of event\n};\n\n\/\/ ... now foo will be called when paragraphs are clicked ...\n$(\"body\").delegate(\"p\", \"click\", foo);\n\n\n\/\/ ... foo will no longer be called.\n$(\"body\").undelegate(\"p\", \"click\", foo); \n\n\nExample: To unbind all delegated events by their namespace:\n\nvar foo = function () {\n  \/\/ code to handle some kind of event\n};\n\n\/\/ delegate events under the \".whatever\" namespace\n$(\"form\").delegate(\":button\", \"click.whatever\", foo);\n\n$(\"form\").delegate(\"input[type='text']\", \"keypress.whatever\", foo); \n\n\/\/ unbind all events delegated under the \".whatever\" namespace\n\n$(\"form\").undelegate(\".whatever\");\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.unique\/","title":"jQuery.unique","description":"\n\njQuery.unique( array ) Returns: Array\n\n\nDescription: Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.\n\n\nversion added: 1.1.3jQuery.unique( array )\narrayThe Array of DOM elements.\n\n\nThe $.unique() function searches through an array of objects, sorting the array, and removing any duplicate nodes. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery.\nAs of jQuery 1.4 the results will always be returned in document order.\n\nExample:\n\nRemoves any duplicate elements from the array of divs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;There are 6 divs in this document.&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div class=\"dup\"&gt;&lt;\/div&gt;\n  &lt;div class=\"dup\"&gt;&lt;\/div&gt;\n\n  &lt;div class=\"dup\"&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n&lt;script&gt;\n\n    var divs = $(\"div\").get(); \/\/ unique() must take a native array\n\n    \/\/ add 3 elements of class dup too (they are divs)\n    divs = divs.concat($(\".dup\").get());\n    $(\"div:eq(1)\").text(\"Pre-unique there are \" + divs.length + \" elements.\");\n\n    divs = jQuery.unique(divs);\n    $(\"div:eq(2)\").text(\"Post-unique there are \" + divs.length + \" elements.\")\n                  .css(\"color\", \"red\");\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/unload\/","title":"unload","description":"\n\n.unload( handler(eventObject) ) Returns: jQuery\n\n\nDescription: Bind an event handler to the \"unload\" JavaScript event.\n\n\n\nversion added: 1.0.unload( handler(eventObject) )\nhandler(eventObject)A function to execute when the event is triggered.\n\n\n\nversion added: 1.4.3.unload(  [eventData], handler(eventObject) )\neventDataA map of data that will be passed to the event handler.\nhandler(eventObject)A function to execute each time the event is triggered.\n\n\n\nThis method is a shortcut for .bind('unload', handler).\nThe unload event is sent to the window element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an unload event.\nThe exact handling of the unload event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers, and contrasted with the proprietary beforeunload event.\nAny unload event handler should be bound to the window object:\n$(window).unload(function() {\n  alert('Handler for .unload() called.');\n});\n\nAfter this code executes, the alert will be displayed whenever the browser leaves the current page.\nIt is not possible to cancel the unload event with .preventDefault(). This event is available so that scripts can perform cleanup when the user leaves the page.\n\n\nExample:\n\nTo display an alert when a page is unloaded:\n$(window).unload( function () { alert(\"Bye now!\"); } );\n\n\n"},{"url":"http:\/\/api.jquery.com\/unwrap\/","title":"unwrap","description":"\n\n.unwrap() Returns: jQuery\n\n\nDescription: Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.\n\nversion added: 1.4.unwrap()\nThe .unwrap() method removes the element's parent. This is effectively the inverse of the .wrap() method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.\nExample:\n\nWrap\/unwrap a div around each of the paragraphs.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { border: 2px solid blue; }\n  p { background:yellow; margin:4px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;wrap\/unwrap&lt;\/button&gt;\n&lt;p&gt;Hello&lt;\/p&gt;\n&lt;p&gt;cruel&lt;\/p&gt;\n&lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;\n$(\"button\").toggle(function(){\n  $(\"p\").wrap(\"&lt;div&gt;&lt;\/div&gt;\");\n}, function(){\n  $(\"p\").unwrap();\n});&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/visible-selector\/","title":":visible Selector","description":"\n\nvisible  selector\n\n\nversion added: 1.0jQuery(':visible')\nDescription: Selects all elements that are visible.\n\nElements can be considered hidden for several reasons:\n\nThey have a CSS display value of none.\nThey are form elements with type=\"hidden\".\nTheir width and height are explicitly set to 0.\nAn ancestor element is hidden, so the element is not shown on the page.\n\nElements with visibility: hidden or opacity: 0 are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start at the animation.\nHow :visible is calculated was changed in jQuery 1.3.2. The release notes outline the changes in more detail.\n\nAdditional Notes:Because :visible is a jQuery extension and not part of the CSS specification, queries using :visible cannot take advantage of the performance boost provided by the native DOM querySelectorAll() method. To achieve the best performance when using :visible to select elements, first select the elements using a pure CSS selector, then use .filter(\":visible\").Example:\n\nMake all visible divs turn yellow on click.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:50px; height:40px; margin:5px; border:3px outset green; float:left; }\n  .starthidden { display:none; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button&gt;Show hidden to see they don't change&lt;\/button&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div class=\"starthidden\"&gt;&lt;\/div&gt;\n  &lt;div&gt;&lt;\/div&gt;\n\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div style=\"display:none;\"&gt;&lt;\/div&gt;\n&lt;script&gt;\n    $(\"div:visible\").click(function () {\n      $(this).css(\"background\", \"yellow\");\n    });\n    $(\"button\").click(function () {\n      $(\"div:hidden\").show(\"fast\");\n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.when\/","title":"jQuery.when","description":"\n\njQuery.when( deferreds ) Returns: Promise\n\n\nDescription: Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.\n\n\nversion added: 1.5jQuery.when( deferreds )\ndeferredsOne or more Deferred objects, or plain JavaScript objects.\n\n\nIf a single Deferred is passed to jQuery.when, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as deferred.then. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by jQuery.ajax is a Deferred and can be used this way:\n$.when( $.ajax(\"test.aspx\") ).then(function(ajaxArgs){ \n     alert(ajaxArgs[1]); \/* ajaxArgs is [ \"success\", statusText, jqXHR ] *\/\n});\nIf a single argument is passed to jQuery.when and it is not a Deferred, it will be treated as a resolved Deferred and any doneCallbacks attached will be executed immediately. The doneCallbacks are passed the original argument. In this case any failCallbacks you might set are never called since the Deferred is never rejected. For example:\n$.when( { testing: 123 } ).done(\n   function(x){ alert(x.testing); } \/* alerts \"123\" *\/\n);\nIn the case where multiple Deferred objects are passed to jQuery.when, the method returns the Promise from a new \"master\" Deferred object that tracks the aggregate state of all the Deferreds it has been passed. The method will resolve its master Deferred as soon as all the Deferreds resolve, or reject the master Deferred as soon as one of the Deferreds is rejected. If the master Deferred is resolved, it is passed the resolved values of all the Deferreds that were passed to jQuery.when. For example, when the Deferreds are jQuery.ajax() requests, the arguments will be the jqXHR objects for the requests, in the order they were given in the argument list.\nIn the multiple-Deferreds case where one of the Deferreds is rejected, jQuery.when immediately fires the failCallbacks for its master Deferred. Note that some of the Deferreds may still be unresolved at that point. If you need to perform additional processing for this case, such as canceling any unfinished ajax requests, you can keep references to the underlying jqXHR objects in a closure and inspect\/cancel them in the failCallback.\n\nExamples:\n\n\nExample: Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n\n$.when($.ajax(\"\/page1.php\"), $.ajax(\"\/page2.php\")).done(function(a1,  a2){\n    \/* a1 and a2 are arguments resolved for the \n        page1 and page2 ajax requests, respectively *\/\n   var jqXHR = a1[2]; \/* arguments are [ \"success\", statusText, jqXHR ] *\/\n   if ( \/Whip It\/.test(jqXHR.responseText) ) {\n      alert(\"First page has 'Whip It' somewhere.\");\n   }\n});\n\n\n\nExample: Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.\n\n$.when($.ajax(\"\/page1.php\"), $.ajax(\"\/page2.php\"))\n  .then(myFunc, myFailure);\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/val\/","title":"val","description":"\nContents:\n\n\nval() .val()\n              \n\n\nval( value \u00a0) \n.val( value )\n              \n.val( function(index, value) )\n              \n\n\n\n\n\n.val() Returns: String, Number, Array\n\n\nDescription: Get the current value of the first element in the set of matched elements.\n\nversion added: 1.0.val()\n\nThe .val() method is primarily used to get the values of form elements such as input, select and textarea. In the case of &lt;select multiple=\"multiple\"&gt; elements, the .val() method returns an array containing each selected option; if no option is selected, it returns null. \nFor selects and checkboxes, you can also use the :selected and :checked selectors to get at values, for example:\n$('select.foo option:selected').val();    \/\/ get the value from a dropdown select\n$('select.foo').val();                    \/\/ get the value from a dropdown select even easier\n$('input:checkbox:checked').val();        \/\/ get the value from a checked checkbox\n$('input:radio[name=bar]:checked').val(); \/\/ get the value from a set of radio buttons\nNote:  At present, using .val() on textarea elements strips carriage return characters from the browser-reported value. When this value is sent to the server via XHR however, carriage returns are preserved (or added by browsers which do not include them in the raw value). A workaround for this issue can be achieved using a valHook as follows:\n\n$.valHooks.textarea = {\n\u00a0 \u00a0\u00a0get: function( elem ) {\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0return elem.value.replace( \/\\r?\\n\/g, \"\\r\\n\" );\n\u00a0 \u00a0\u00a0}\n};\n\n\nExamples:\n\n\nExample: Get the single value from a single select and an array of values from a multiple select and display their values.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  p { color:red; margin:4px; }\n  b { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;\/p&gt;\n\n  &lt;select id=\"single\"&gt;\n    &lt;option&gt;Single&lt;\/option&gt;\n    &lt;option&gt;Single2&lt;\/option&gt;\n  &lt;\/select&gt;\n\n  &lt;select id=\"multiple\" multiple=\"multiple\"&gt;\n    &lt;option selected=\"selected\"&gt;Multiple&lt;\/option&gt;\n    &lt;option&gt;Multiple2&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Multiple3&lt;\/option&gt;\n  &lt;\/select&gt;\n\n&lt;script&gt;\n    function displayVals() {\n      var singleValues = $(\"#single\").val();\n      var multipleValues = $(\"#multiple\").val() || [];\n      $(\"p\").html(\"&lt;b&gt;Single:&lt;\/b&gt; \" + \n                  singleValues +\n                  \" &lt;b&gt;Multiple:&lt;\/b&gt; \" + \n                  multipleValues.join(\", \"));\n    }\n\n    $(\"select\").change(displayVals);\n    displayVals();\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Find the value of an input box.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { color:blue; margin:8px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;input type=\"text\" value=\"some text\"\/&gt;\n  &lt;p&gt;&lt;\/p&gt;\n&lt;script&gt;\n    $(\"input\").keyup(function () {\n      var value = $(this).val();\n      $(\"p\").text(value);\n    }).keyup();\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n\n.val( value ) Returns: jQuery\n\n\nDescription: Set the value of each element in the set of matched elements.\n\n\n\nversion added: 1.0.val( value )\nvalueA string of text or an array of strings corresponding to the value of each matched element to set as selected\/checked.\n\n\n\nversion added: 1.4.val( function(index, value) )\nfunction(index, value)A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.\n\n\n\nThis method is typically used to set the values of form fields. \nPassing an array of element values allows matching  &lt;input type=\"checkbox\"&gt;, &lt;input type=\"radio\"&gt; and &lt;option&gt;s inside of n &lt;select multiple=\"multiple\"&gt; to be selected. In the case of &lt;input type=\"radio\"&gt;s that are part of a radio group and &lt;select multiple=\"multiple\"&gt; the other elements will be deselected.\nThe .val() method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value: \n$('input:text.items').val(function( index, value ) {\n  return value + ' ' + this.className;\n});\n\nThis example appends the string \" items\" to the text inputs' values.\n\nExamples:\n\n\nExample: Set the value of an input box.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  button { margin:4px; cursor:pointer; }\n  input { margin:4px; color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;\n    &lt;button&gt;Feed&lt;\/button&gt;\n    &lt;button&gt;the&lt;\/button&gt;\n    &lt;button&gt;Input&lt;\/button&gt;\n  &lt;\/div&gt;\n  &lt;input type=\"text\" value=\"click a button\" \/&gt;\n&lt;script&gt;\n    $(\"button\").click(function () {\n      var text = $(this).text();\n      $(\"input\").val(text);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Use the function argument to modify the value of an input box.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n  &lt;p&gt;Type something and then click or tab out of the input.&lt;\/p&gt;\n  &lt;input type=\"text\" value=\"type something\" \/&gt;\n\n&lt;script&gt;\n  $('input').bind('blur', function() {\n    $(this).val(function( i, val ) {\n      return val.toUpperCase();\n    });\n  });\n  &lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Set a single select, a multiple select, checkboxes and a radio button .\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { color:blue; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;select id=\"single\"&gt;\n    &lt;option&gt;Single&lt;\/option&gt;\n    &lt;option&gt;Single2&lt;\/option&gt;\n  &lt;\/select&gt;\n\n  &lt;select id=\"multiple\" multiple=\"multiple\"&gt;\n    &lt;option selected=\"selected\"&gt;Multiple&lt;\/option&gt;\n    &lt;option&gt;Multiple2&lt;\/option&gt;\n    &lt;option selected=\"selected\"&gt;Multiple3&lt;\/option&gt;\n  &lt;\/select&gt;&lt;br\/&gt;\n  &lt;input type=\"checkbox\" name=\"checkboxname\" value=\"check1\"\/&gt; check1\n  &lt;input type=\"checkbox\" name=\"checkboxname\" value=\"check2\"\/&gt; check2\n  &lt;input type=\"radio\"  name=\"r\" value=\"radio1\"\/&gt; radio1\n  &lt;input type=\"radio\"  name=\"r\" value=\"radio2\"\/&gt; radio2\n&lt;script&gt;\n    \n    $(\"#single\").val(\"Single2\");\n    $(\"#multiple\").val([\"Multiple2\", \"Multiple3\"]); \n    $(\"input\").val([\"check1\",\"check2\", \"radio1\" ]);\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/width\/","title":"width","description":"\nContents:\n\n\nwidth() .width()\n              \n\n\nwidth( value \u00a0) \n.width( value )\n              \n.width( function(index, width) )\n              \n\n\n\n\n\n.width() Returns: Integer\n\n\nDescription: Get the current computed width for the first element in the set of matched elements.\n\nversion added: 1.0.width()\n\nThe difference between .css(width) and .width() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .width() method is recommended when an element's width needs to be used in a mathematical calculation.\n\nThis method is also able to find the width of the window and document.\n$(window).width();   \/\/ returns width of browser viewport\n$(document).width(); \/\/ returns width of HTML document\nNote that .width() will always return the content width, regardless of the value of the CSS box-sizing property.\n\nExample:\n\nShow various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  body { background:yellow; }\n  button { font-size:12px; margin:2px; }\n  p { width:150px; border:1px red solid; }\n  div { color:red; font-weight:bold;  }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;button id=\"getp\"&gt;Get Paragraph Width&lt;\/button&gt;\n  &lt;button id=\"getd\"&gt;Get Document Width&lt;\/button&gt;\n  &lt;button id=\"getw\"&gt;Get Window Width&lt;\/button&gt;\n\n  &lt;div&gt;&amp;nbsp;&lt;\/div&gt;\n  &lt;p&gt;\n    Sample paragraph to test width\n  &lt;\/p&gt;\n&lt;script&gt;\n    function showWidth(ele, w) {\n      $(\"div\").text(\"The width for the \" + ele + \n                    \" is \" + w + \"px.\");\n    }\n    $(\"#getp\").click(function () { \n      showWidth(\"paragraph\", $(\"p\").width()); \n    });\n    $(\"#getd\").click(function () { \n      showWidth(\"document\", $(document).width()); \n    });\n    $(\"#getw\").click(function () { \n      showWidth(\"window\", $(window).width()); \n    });\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n.width( value ) Returns: jQuery\n\n\nDescription: Set the CSS width of each element in the set of matched elements.\n\n\n\nversion added: 1.0.width( value )\nvalueAn integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n\n\n\nversion added: 1.4.1.width( function(index, width) )\nfunction(index, width)A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, this refers to the current element in the set.\n\n\n\nWhen calling .width('value'), the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as 100px, 50%, or auto). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the box-sizing CSS property is used.\nIf no explicit unit was specified (like 'em' or '%') then \"px\" is concatenated to the value.\nNote that .width('value') sets the width of the box in accordance with the CSS box-sizing property. Changing this property to border-box will cause this function to change the outerWidth of the box instead of the content width.\n\nExample:\n\nTo set the width of each div on click to 30px plus a color change.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  div { width:70px; height:50px; float:left; margin:5px;\n        background:red; cursor:pointer; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;div&gt;&lt;\/div&gt;\n  &lt;div&gt;d&lt;\/div&gt;\n\n  &lt;div&gt;d&lt;\/div&gt;\n  &lt;div&gt;d&lt;\/div&gt;\n  &lt;div&gt;d&lt;\/div&gt;\n&lt;script&gt;\n\n    $(\"div\").one('click', function () {\n      $(this).width(30)\n             .css({cursor:\"auto\", \"background-color\":\"blue\"});\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/wrap\/","title":"wrap","description":"\n\n.wrap( wrappingElement ) Returns: jQuery\n\n\nDescription: Wrap an HTML structure around each element in the set of matched elements.\n\n\n\nversion added: 1.0.wrap( wrappingElement )\nwrappingElementAn HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.\n\n\n\nversion added: 1.4.wrap( function(index) )\nfunction(index)A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n\n\n\nThe .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nUsing .wrap(), we can insert an HTML structure around the inner &lt;div&gt; elements like so:\n$('.inner').wrap('&lt;div class=\"new\" \/&gt;');\nThe new &lt;div&gt; element is created on the fly and added to the DOM. The result is a new &lt;div&gt; wrapped around each matched element:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\nThe second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:\n$('.inner').wrap(function() {\n  return '&lt;div class=\"' + $(this).text() + '\" \/&gt;';\n});\nThis will cause each &lt;div&gt; to have a class corresponding to the text it wraps:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"Hello\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"Goodbye\"&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\nExamples:\n\n\nExample: Wrap a new div around all of the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; }\n  p { background:yellow; margin:4px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrap(\"&lt;div&gt;&lt;\/div&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border:2px blue solid; margin:2px; padding:2px; }\n  p { background:yellow; margin:2px; padding:2px; }\n  strong { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;Span Text&lt;\/span&gt;\n  &lt;strong&gt;What about me?&lt;\/strong&gt;\n  &lt;span&gt;Another One&lt;\/span&gt;\n&lt;script&gt;$(\"span\").wrap(\"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;\/b&gt;&lt;\/em&gt;&lt;\/p&gt;&lt;\/div&gt;&lt;\/div&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wrap a new div around all of the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; }\n  p { background:yellow; margin:4px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrap(document.createElement(\"div\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; margin:2px; padding:2px; }\n  .doublediv { border-color:red; }\n  p { background:yellow; margin:4px; font-size:14px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n  &lt;div class=\"doublediv\"&gt;&lt;div&gt;&lt;\/div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"p\").wrap($(\".doublediv\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/wrapAll\/","title":"wrapAll","description":"\n\n.wrapAll( wrappingElement ) Returns: jQuery\n\n\nDescription: Wrap an HTML structure around all elements in the set of matched elements.\n\n\nversion added: 1.2.wrapAll( wrappingElement )\nwrappingElementAn HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.\n\n\nThe .wrapAll() function can take any string or object that could be passed to the $() function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nUsing .wrapAll(), we can insert an HTML structure around the inner &lt;div&gt; elements like so:\n$('.inner').wrapAll('&lt;div class=\"new\" \/&gt;');\nThe new &lt;div&gt; element is created on the fly and added to the DOM. The result is a new &lt;div&gt; wrapped around all matched elements:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\n\nExamples:\n\n\nExample: Wrap a new div around all of the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; }\n  p { background:yellow; margin:4px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrapAll(\"&lt;div&gt;&lt;\/div&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border:2px blue solid; margin:2px; padding:2px; }\n  p { background:yellow; margin:2px; padding:2px; }\n  strong { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;span&gt;Span Text&lt;\/span&gt;\n  &lt;strong&gt;What about me?&lt;\/strong&gt;\n  &lt;span&gt;Another One&lt;\/span&gt;\n&lt;script&gt;$(\"span\").wrapAll(\"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;\/b&gt;&lt;\/em&gt;&lt;\/p&gt;&lt;\/div&gt;&lt;\/div&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wrap a new div around all of the paragraphs.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; }\n  p { background:yellow; margin:4px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrapAll(document.createElement(\"div\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border: 2px solid blue; margin:2px; padding:2px; }\n  .doublediv { border-color:red; }\n  p { background:yellow; margin:4px; font-size:14px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n  &lt;div class=\"doublediv\"&gt;&lt;div&gt;&lt;\/div&gt;&lt;\/div&gt;\n&lt;script&gt;$(\"p\").wrapAll($(\".doublediv\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/wrapInner\/","title":"wrapInner","description":"\n\n.wrapInner( wrappingElement ) Returns: jQuery\n\n\nDescription: Wrap an HTML structure around the content of each element in the set of matched elements.\n\n\n\nversion added: 1.2.wrapInner( wrappingElement )\nwrappingElementAn HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.\n\n\n\nversion added: 1.4.wrapInner( function(index) )\nfunction(index)A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n\n\n\nThe .wrapInner() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.\nConsider the following HTML:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;\/div&gt;\n&lt;\/div&gt;\nUsing .wrapInner(), we can insert an HTML structure around the content of each inner &lt;div&gt; elements like so:\n$('.inner').wrapInner('&lt;div class=\"new\" \/&gt;');\nThe new &lt;div&gt; element is created on the fly and added to the DOM. The result is a new &lt;div&gt; wrapped around the content of each matched element:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"new\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"new\"&gt;Goodbye&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\nThe second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:\n$('.inner').wrapInner(function() {\n  return '&lt;div class=\"' + this.nodeValue + '\" \/&gt;';\n});\nThis will cause each &lt;div&gt; to have a class corresponding to the text it wraps:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"Hello\"&gt;Hello&lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"Goodbye\"&gt;Goodbye&lt;\/div&gt;\n  &lt;\/div&gt;\n&lt;\/div&gt;\nNote: When passing a selector string to the .wrapInner() function, the expected input is well formed HTML with correctly closed tags. Examples of valid input include:\n\n$(elem).wrapInner(\"&lt;div class='test' \/&gt;\");\n$(elem).wrapInner(\"&lt;div class='test'&gt;&lt;\/div&gt;\");\n$(elem).wrapInner(\"&lt;div class=\\\"test\\\"&gt;&lt;\/div&gt;\");\n\n\nExamples:\n\n\nExample: Selects all paragraphs and wraps a bold tag around each of its contents.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:#bbf; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrapInner(\"&lt;b&gt;&lt;\/b&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Wraps a newly created tree of objects around the inside of the body.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  div { border:2px green solid; margin:2px; padding:2px; }\n  p { background:yellow; margin:2px; padding:2px; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  Plain old text, or is it?\n&lt;script&gt;$(\"body\").wrapInner(\"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;\/b&gt;&lt;\/em&gt;&lt;\/p&gt;&lt;\/div&gt;&lt;\/div&gt;\");&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Selects all paragraphs and wraps a bold tag around each of its contents.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;p { background:#9f9; }&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrapInner(document.createElement(\"b\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Selects all paragraphs and wraps a jQuery object around each of its contents.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n\n  p { background:#9f9; }\n  .red { color:red; }\n  &lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Hello&lt;\/p&gt;\n  &lt;p&gt;cruel&lt;\/p&gt;\n  &lt;p&gt;World&lt;\/p&gt;\n&lt;script&gt;$(\"p\").wrapInner($(\"&lt;span class='red'&gt;&lt;\/span&gt;\"));&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jquery.tmpl\/","title":"jQuery.tmpl","description":"\n\njQuery.tmpl( template [, data]  [, options]  ) Returns: jQuery\n\n\nDescription: Render the specified HTML content as a template, using the specified data.\n\n\nversion added: 1.4.3jQuery.tmpl( template [, data] [, options] )\ntemplateThe HTML markup or text to use as a template.\ndataThe data to render. This can be any JavaScript type, including Array or Object.\noptionsAn optional map of user-defined key-value pairs. Extends the tmplItem data structure, available to the template during rendering.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nThe jQuery.tmpl() method is designed for chaining with .appendTo, .prependTo, .insertAfter or .insertBefore as in the following example.\nExample:\n$.tmpl( \"&lt;li&gt;${Name}&lt;\/li&gt;\", { \"Name\" : \"John Doe\" }).appendTo( \"#target\" );\nThe template parameter can be any of the following: \n\nA string containing markup.\nAn HTML element (or jQuery object that wraps an element) whose content is to be used as the template.\nA string corresponding to the name of a named template (see jQuery.template() and .template()).\nA compiled-template function (see jQuery.template() and .template()).\n\n\nIf data is an array, the template is rendered once for each data item in the array. If data is an object, or if the data parameter is missing or null, a single template item is rendered.\n\n\nThe return value is a jQuery collection of elements made up of the rendered template items (one for each data item in the array). If the template contains only one top-level element, then there will be one element for each data item in the array.\n\n\nTo insert the rendered template items into the HTML DOM, the returned jQuery collection should not be inserted directly into the DOM, but should be chained with .appendTo, .prependTo, .insertAfter or .insertBefore, as in following example:\n\n$.tmpl( myTemplate, myData ).appendTo( \"#target\" );\nSee also .tmpl().\nExample\n\nThe following example shows how to use jQuery.tmpl() to render local data, using a template provided as a string:\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script type=\"text\/javascript\"&gt;\n  var movies = [\n      { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n      { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n      { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n  ];\n\n  var markup = \"&lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\";\n\n  \/\/ Compile the markup as a named template\n  $.template( \"movieTemplate\", markup );\n\n  \/\/ Render the template with the movies data and insert\n  \/\/ the rendered HTML under the \"movieList\" element\n  $.tmpl( \"movieTemplate\", movies )\n      .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\nUsing Remote Data\n\nTypically the data is not local and is instead obtained using an Ajax request to a remote service or page, as in the following example: \n\nvar markup = \"&lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\";\n\n\/\/ Compile the markup as a named template\n$.template( \"movieTemplate\", markup );\n\n$.ajax({\n  dataType: \"jsonp\",\n  url: moviesServiceUrl,\n  jsonp: \"$callback\",\n  success: showMovies\n});\n\n\/\/ Within the callback, use .tmpl() to render the data.\nfunction showMovies( data ) {\n  \/\/ Render the template with the \"movies\" data and insert\n  \/\/ the rendered HTML under the 'movieList' element\n  $.tmpl( \"movieTemplate\", data )\n    .appendTo( \"#movieList\" );\n}\n\nThe Markup for the Template \n\nYou can get the markup for the template from inline markup in the page, or from a string (possibly computed, or obtained remotely). For an example of how to use inline markup, see .tmpl(). \n\nCaching the Template\n\nWhen a template is rendered, the markup is first converted into a compiled-template function. Every time $.tmpl( markup , myData ).appendTo( \"#target\" ) is called, the template is recompiled. If the same template is to be used more than once for rendering data, you should ensure that the compiled template is cached. To cache the template when using markup that is obtained from a string (rather than from inline markup in the page), use \n$.template( name, markup ) to create a named template for reuse. See jQuery.template(). \n\nTemplate Tags, Expressions, and Template Variables\nTemplate tags such as the ${} tag can used within jQuery templates in addition to text and HTML markup to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. Template tags can render content based on the values of data item fields or template variables such as $item (corresponding to the template item), as well as expressions and function calls. See the documentation topics for each template tag: ${}, {{each}}, {{if}}, {{else}}, {{html}}, {{tmpl}} and {{wrap}}. \nThe options Parameter, and Template Items\nEach template item (the result of rendering a data item with the template) is associated with a tmplItem data structure, which can be accessed using jQuery.tmplItem() and .tmplItem(), or the $item template variable. Any fields or anonomyous methods passed in with the options parameter of jQuery.tmpl() will extend the tmplItem data structure, and so be available to the template as in the following example:\n\n\nvar markup = \"&lt;li&gt;Some content: ${$item.myMethod()}.&lt;br\/&gt;\" \n           + \" More content: ${$item.myValue}.&lt;\/li&gt;\";\n\n\/\/ Compile the markup as a named template\n$.template( \"movieTemplate\", markup );\n\n\/\/ Render the template with the movies data\n$.tmpl( \"movieTemplate\", movies,\n  { \n      myValue: \"somevalue\", \n      myMethod: function() { \n          return \"something\";\n      } \n  } \n).appendTo( \"#movieList\" );\n\n\nAdditional Notes:Netflix recently changed the API that we use in the remote service example below. We are aware that this change breaks the demo and will work on an update as soon as we can.Examples:\n\n\nExample: Render local data using jQuery.tmpl().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\n  var movies = [\n  { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n  { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n  ];\n\nvar markup = \"&lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\";\n\n\/* Compile the markup as a named template *\/\n$.template( \"movieTemplate\", markup );\n\n\/* Render the template with the movies data and insert\n   the rendered HTML under the \"movieList\" element *\/\n$.tmpl( \"movieTemplate\", movies )\n  .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Render data from a remote service, using jQuery.tmpl().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button id=\"cartoonsBtn\"&gt;Cartoons&lt;\/button&gt;\n&lt;button id=\"dramaBtn\"&gt;Drama&lt;\/button&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar markup = \"&lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\";\n\n\/* Compile the markup as a named template *\/\n$.template( \"movieTemplate\", markup );\n\nfunction getMovies( genre, skip, top ) {\n  $.ajax({\n    dataType: \"jsonp\",\n    url: \"http:\/\/odata.netflix.com\/Catalog\/Genres('\" + genre\n    + \"')\/Titles?$format=json&amp;$skip=\"\n    + skip + \"&amp;$top=\" + top,\n    jsonp: \"$callback\",\n    success: function( data ) {\n      \/* Get the movies array from the data *\/\n      var movies = data.d;\n\n      \/* Remove current set of movie template items *\/\n      $( \"#movieList\" ).empty();\n\n      \/* Render the template items for each movie\n      and insert the template items into the \"movieList\" *\/\n      $.tmpl( \"movieTemplate\", movies )\n      .appendTo( \"#movieList\" );\n    }\n  });\n}\n\n$( \"#cartoonsBtn\" ).click( function() {\n  getMovies( \"Cartoons\", 0, 6 );\n});\n\n$( \"#dramaBtn\" ).click( function() {\n  getMovies( \"Drama\", 0, 6 );\n});\n\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jquery.tmplitem\/","title":"jQuery.tmplItem","description":"\n\njQuery.tmplItem( element ) Returns: tmplItem\n\n\nDescription: Return the tmplItem data structure for the rendered template that the specified element is part of.\n\n\nversion added: 1.4.3jQuery.tmplItem( element )\nelementAn HTML element (or jQuery object that wraps an element)\n\nThis documentation topic concerns the jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\n$.tmplItem( element ) provides access to the rendered template item which the element is part of.\n\nSee also tmplItem().\n\nTypically the element parameter passed to tmplItem()is the this element within an event handler. \nThe return value of tmplItem() is a tmplItem data structure whose fields provide access to:\n\nThe HTML elements that the template item is made up of (nodes field).\nThe associated data item (data field).\nThe parent template item, if the template is nested (parent field).\nThe template that was used to render the template item (tmpl field).\nUser defined parameters or methods, such as any values that were set on the options map, passed to tmpl() when the template was rendered.\n\n\nThe following example shows how to use $.tmplItem() to get information about the rendered template:\n\nfunction myClickHandler() {\n    var tmplItem = $.tmplItem( this );\n    alert( \"Description: \" + tmplItem.data.description );\n}\n\nBuilding Interactive Ajax Applications\n\n.tmplItem() and jQuery.tmplItem() make it easy to use templates in scenarios beyond simple string concatenation and read-only rendering. They let you create fully-fledged interactive client-side Ajax applications in which the code needs to perform actions like the following:\n\nAccessing the associated data item.\nModifying the data item.\nAccessing HTML elements that make up the rendered template item.\nUpdating (re-rendering) the template item, with modified data, modified user-defined parameters, or using a different template\n\nExample: Dynamically switching templates for a template item.:\n\n\/\/ Get the compiled detail template\nvar detailTemplate = $( \"#detailTemplate\" ).template();\n\n\/\/ Add an onclick handler for template items currently \n\/\/ using the summary template\n$(\".movieSummary\").live( \"click\", function () {\n    \/\/ Get the data structure for the template item \n    \/\/ which this clicked element belongs to\n    var tmplItem = $.tmplItem(this);\n\n    \/\/ Set the template on this item to the detail template\n    tmplItem.tmpl = detailTemplate;\n\n    \/\/ re-render\n    tmplItem.update();\n})\n\n\nExamples:\n\n\nExample: Access the data, and set selection on the item.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n#movieList { cursor:pointer; color:blue; margin:8px; background-color:#f8f8f8; }\n#movieList li:hover { color:red; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;&lt;b class=\"movieName\"&gt;${Name}&lt;\/b&gt;&lt;\/li&gt;\n&lt;\/tmpl&gt;\n\nClick for details:\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n];\nvar selectedItem =  null;\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n\n\/* Add an onclick handler for the movie template items *\/\n$( \".movieName\" ).live( \"click\", function() {\n\n    if ( selectedItem ) {\n        $( selectedItem.nodes ).css( \"backgroundColor\", \"#f8f8f8\" );\n    }\n\n    \/* Get the data structure for the template item \n       which this clicked element belongs to *\/\n    selectedItem = $.tmplItem( this );\n\n    $( selectedItem.nodes ).css( \"backgroundColor\", \"yellow\" );\n\n    alert( \"'\" + selectedItem.data.Name + \"' was released in \" \n        + selectedItem.data.ReleaseYear + \".\" ); \n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Master detail view.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { cursor:pointer; border-collapse:collapse; float: left; clear: both; } table tr { border:1px solid blue; color:blue; height:25px; } table tr:hover { color:red; }\ntable, #personDetail &gt; div { border:2px solid blue; width:220px; margin:8px 0 4px 0; background-color:#f8f8f8; } table td, #personDetail div div { padding:3px; margin:3px; }\n.selected { background-color:yellow; } #personDetail input { float:right; width:125px; } #personDetail { float:left; margin-left:10px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"listItemTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;&lt;td&gt;\n        ${firstName} ${lastName} \n    &lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"detailTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;div&gt;\n        &lt;div&gt;First Name: &lt;em&gt;${firstName}&lt;\/em&gt;&lt;\/div&gt;\n        &lt;div&gt;Last Name: &lt;em&gt;${lastName}&lt;\/em&gt;&lt;\/div&gt;\n    &lt;\/div&gt;\n&lt;\/tmpl&gt;\n\n&lt;div style=\"float:left;\"&gt;Click for details:&lt;div&gt;\n&lt;table&gt;&lt;tbody id=\"peopleList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;div id=\"personDetail\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar people = [\n    { firstName: \"Peter\", lastName: \"Jones\" },\n    { firstName: \"Eva\", lastName: \"Smolinski\" }\n];\n\nvar selectedItem = null;\n\nfunction renderTemplate( container, template, data ) {\n    $( container ).empty();\n    $( template ).tmpl( data ).appendTo( container );\n}\n\n\/* Render the list *\/\nrenderTemplate( \"#peopleList\", \"#listItemTemplate\", people );\n\n$(\"#peopleList\")\n    .delegate( \"tr\", \"click\", function () {\n\n        if ( selectedItem ) {\n            $( selectedItem.nodes ).removeClass( \"selected\");\n        }\n\n        \/* Set selection on the clicked item *\/\n        selectedItem = $.tmplItem(this);\n        $( selectedItem.nodes ).addClass( \"selected\");\n\n        \/* Render the detail view for this data item *\/\n        renderTemplate( \"#personDetail\", \"#detailTemplate\", selectedItem.data );\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Dynamic switching of templates.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { cursor:pointer; border-collapse:collapse; border:2px solid blue; width:300px; margin:8px; }\ntable tr { border:1px solid blue; color:blue; background-color:#f8f8f8; } table td { padding:3px; } table tr:hover { color:red; }\n.movieDetail { background-color:yellow; } .movieDetail.row1 { border-bottom:none; } .movieDetail.row2 { border-top:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"summaryTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;tr class='movieSummary'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"detailTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;tr class='movieDetail row1'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;&lt;tr class='movieDetail row2'&gt;&lt;td&gt;${ReleaseYear}&lt;\/td&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\nClick for details:\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"The Red Violin\", ReleaseYear: \"1998\", Director: \"Fran\u00e7ois Girard\" },\n    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },\n    { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }\n];\nvar selectedItem = null;\n\n\/* Render the summaryTemplate with the \"movies\" data *\/\n$( \"#summaryTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n\n\/* Add onclick handlers for movie template items\n   using the summary or details template *\/\n$(\"#movieList\")\n.delegate( \".movieSummary\", \"click\", function () {\n    if (selectedItem) {\n        \/\/ Set the template on the previously selected item\n        \/\/ back to the summary template\n        selectedItem.tmpl = $( \"#summaryTemplate\" ).template();\n        selectedItem.update();\n    }\n    \/* Get the data structure for the template item \n       which this clicked element belongs to, and make\n       it the selected item *\/\n    selectedItem = $.tmplItem(this);\n\n    \/* Set the template on this item to the detail template *\/\n    selectedItem.tmpl = $( \"#detailTemplate\" ).template();\n    selectedItem.update();\n})\n.delegate( \".movieDetail\", \"click\", function () {\n    \/* Set the template on this item to the summary template *\/\n    selectedItem.tmpl = $( \"#summaryTemplate\" ).template();\n    selectedItem.update();\n    selectedItem = null;\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/link\/","title":"link","description":"\n\n.link( target [, settings]  ) Returns: jQuery\n\n\nDescription: Link changes to the matched elements to an object.\n\n\nversion added: 1.4.3.link( target [, settings] )\ntargetAn object to link changes to.\nsettingsA map describing the fields to link.\n\nThis documentation topic concerns the  jQuery Datalink plugin (jquery-datalink), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-datalink.\n\nThe .link() method links form fields to an object. Any changes to the form field values are automatically represented in the object. For example, when an input element whose name attribute is \"firstName\" is changed, the firstName property of the target is set to the new value:\n\nvar person = {};\n$(\"form\").link(person);\n$(\"[name=firstName]\").val(\"NewValue\"); \/\/ Set firstName to a value.\nperson.firstName; \/\/ NewValue\n\n\/\/ User types a value into the form field.\nperson.firstName; \/\/ firstName now contains the user-ented value.\n\nBy default, links are two-way, meaning changes to the object are also automatically changed in the corresponding form field. For example, if the firstName of the target is changed using the .setField() method, the value of input element named \"firstName\" is set to the new value.\n\n\/\/ Set the object property.\n$(person).setField(\"firstName\", \"NewValue\");\n\/\/ The change is automatically pushed to the input element.\n$(\"[name=firstName]\").val(); \/\/ The value is now \"NewValue\"\n\nCustomizing the Mapping Between Elements and Objects\n\nBy default, all change events that occur for (or bubble up to) the selected element or elements are processed, and the changes are made to the property whose name corresponds to the name of the element that changed. By providing a mapping object, you can explicitly choose which elements participate in linking behavior, and what target properties they set.\n\n\nvar person = {};\n$(\"form\").link(person, {\n    firstName: \"first-name\",\n    lastName: \"last-name\"\n});\n\n\nThe preceeding example shows how to link only the input element named \"first-name\" to person.firstName, and the input element named \"last-name\" to person.lastName. Changes in other input elements and changes to other fields of the person object are ignored (by this link).\n\nSpecifying One-Way Linking\n\nYou can disable two-way linking for individual fields with the twoWay field in the custom mapping. The following example shows how to create a link from the form field named \"firstName\" to the firstName property of a person object, but not the other way around.\n\n\nvar person = {};\n$(\"form\").link(person, {\n    firstName: {\n      twoWay: false\n    }\n});\n$(person).setField(\"firstName\", \"NewValue\");\n$(\"[name=firstName]\").val(); \/\/ unchanged\n\nConverting Values\n\nBy default, any changed value is assigned as-is to the target object. Often times, it is necessary to modify the value, as converting null to \"None\", formating or parsing a date, or parsing a string into a number. To perform these conversions, you can specify a convert field in the mapping that includes a conversion function, as shown in the following example:\n\n\nvar person = {};\n$(\"[name=age]\")\n  .link(person, {\n      age: {\n          convert: function(value) {\n              return Math.round( parseFloat( value ) );\n          }\n      }\n  })\n  .val(\"7.5\");\nperson.age; \/\/ 8\n\n\nYou can also define a converter using the $.convertFn object and refer to it by name instead:\n\n\nvar person = {};\n$.convertFn.round = function(value) {\n    return Math.round( parseFloat( value ) );\n}\n$(\"[name=age]\")\n  .link(person, {\n      age: {\n          convert: \"round\"\n      }\n  })\n  .val(\"7.5\");\nperson.age; \/\/ 8\n\n\nYou can customize the name in a custom mapping at the same time as a converter by specifying the name. The following example creates a link from the input element named \"first-name\" to the firstName property of the person object using a converter named \"titleCase\".\n\n\n$(\"form\").link(person, {\n    firstName: {\n        name: \"first-name\",\n        convert: \"titleCase\"\n    }\n});\n\n\nFor two-way links, you can specify a converter for both directions using convertBack setting:\n\n\n$(\"form\").link(obj, {\n    field: {\n        \/\/ converter1 and converter2 functions are defined elsewhere.\n        convert: converter1,\n        convertBack: converter2\n    }\n});\n\n\nConverters receive the value and you can optionally also get the source object and the target object as parameters. The source is where the  value comes from, and target is the object to set the value for. If the converter returns a value, it is assigned to the target automatically.\nUsing Converters to Create Custom Linking Behavior\nIf the converter does not return a value or if it returns \"undefined\", no automatic update occurs. You can use this feature to customize the behavior of a link by updating the source and target objects in your code directly and not returning a value.\nThe following example uses a converter that does not return a value, so no automatic update takes place. Instead, the converter code explicitly updates properties of the target object:\n\n\nvar person = {};\n$(\"[name=age]\").link(person, {\n    age: {\n        convert: function(value, source, target) {\n            var age = Math.round( parseFloat( value ) );\n            target.age = age;\n            target.canVote = age &gt;= 18;\n        }\n    }\n});\n$(\"[name=age]\").val(\"7.5\");\nperson.age; \/\/ 8\nperson.canVote; \/\/ false\n$(\"[name=age]\").val(\"18\");\nperson.canVote; \/\/ true\n\n\nYou can also use this technique to establish links between any available DOM elements. This following example links the age property of the person object to the height of the target DOM element.\n\n\n\nvar person = {};\n$(\"#ageDiv\").link(person, {\n  age: {\n    convertBack: function(value, source, target) {\n      $(target).height(parseFloat(value * 2));\n    }\n  }\n});\n$(person).setField(\"age\", 21);\n$(\"#ageDiv\").height(); \/\/ 42\n\n\nExample:\n\nLink all input elements of a form to an object.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/github.com\/jquery\/jquery-datalink\/raw\/master\/jquery.datalink.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;form&gt;\n    &lt;div&gt;\n        First Name:\n        &lt;input type=\"text\" name=\"firstName\" \/&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n        Last Name:\n        &lt;input type=\"text\" name=\"lastName\" \/&gt;\n    &lt;\/div&gt;\n&lt;\/form&gt;\nObject.firstName: &lt;span id=\"objFirst\"&gt;&lt;\/span&gt;&lt;br\/&gt;\nObject.lastName: &lt;span id=\"objLast\"&gt;&lt;\/span&gt;\n\n&lt;script&gt;\n    var person = { };\n    $(\"form\").link(person);\n\n    \/\/ Chain link the person object to these elements to show the results\n    $(\"#objFirst\").link(person, {\n        firstName: {\n            name: \"objFirst\",\n            convertBack: function(value, source, target) {\n                $(target).text(value);\n            }\n        }\n    });\n    $(\"#objLast\").link(person, {\n        lastName: {\n            name: \"objLast\",\n            convertBack: function(value, source, target) {\n                $(target).text(value);\n            }\n        }\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template\/","title":"template","description":"\n\n.template(  [name]  ) Returns: function\n\n\nDescription: Compile the contents of the matched element as a reusable compiled template.\n\n\nversion added: 1.4.3.template(  [name] )\nnameA string naming the compiled template.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nThis method returns a compiled template, created from the content of the first matched element. If the name parameter is provided the compiled template is stored as a named template, and can be referenced using the specified string.\n\nSee also jQuery.template().\n\nExample: Create a compiled template associated with the name \"summaryTemplate\" and then reference it by name for rendering:\n\n\n&lt;script id=\"titleTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;li&gt;${Name}&lt;\/li&gt;\n&lt;\/script&gt;\n___________\n\n\/\/ Compile the inline template as a named template\n$( \"#titleTemplate\" ).template( \"summaryTemplate\" );\n\nfunction renderList() {\n  \/\/ Render the movies data using the named template: \"summaryTemplate\"\n  $.tmpl( \"summaryTemplate\", movies ).appendTo( \"#moviesList\" );\n}\n\n\nExample: Use the return value rather than the name string to reference the compiled template:\n\n\n&lt;script id=\"titleTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;li&gt;${Name}&lt;\/li&gt;\n&lt;\/script&gt;\n___________\n\n\/\/ Compile the inline template as a named template\nvar myTemplate = $( \"#titleTemplate\" ).template();\n\nfunction renderList() {\n  \/\/ Render movies data using the compiled template: myTemplate\n  $.tmpl( myTemplate, movies ).appendTo( \"#moviesList\" );\n}\n\n\nExample: Create a named template and reference it by name as a nested template: \n\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  {{tmpl \"summaryTemplate\"}}\n  &lt;tr&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/script&gt;\n\n&lt;script id=\"titleTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;tr&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/script&gt;\n___________\n\n\/\/ Compile the titleTemplate template as a named template\n\/\/ referenced by the {{tmpl}} tag\n$( \"#titleTemplate\" ).template( \"summaryTemplate\" );\n\n\/\/ Render the movies data using the named template as a nested template\n$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n\n\nExample: Switch the template item to a different template, using .template() to obtain compiled template:\n\n\n&lt;script id=\"summaryTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;tr&gt;...&lt;\/tr&gt;\n&lt;\/script&gt;\n\n&lt;script id=\"detailTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;tr&gt;...&lt;\/tr&gt;\n&lt;\/script&gt;\n___________\n\n\/\/ Render the summaryTemplate with the \"movies\" data \n$( \"#summaryTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n\n$( \"tr\" ).click( function () {\n  \/\/ Switch the template for this template item to\n  \/\/ a different named template, then update the rendered item\n  var tmplItem = $.tmplItem(this);\n  tmplItem.tmpl = $( \"#detailTemplate\" ).template();\n  tmplItem.update();\n});\n\n\nExample:\n\nDynamic switching of templates, using .template() to obtain compiled template.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  table { cursor:pointer; border-collapse:collapse; border:2px solid blue; width:300px; margin:8px; }\n  table tr { border:1px solid blue; color:blue; background-color:#f8f8f8; } \n  table td { padding:3px; } table tr:hover { color:red; }\n  .movieDetail { background-color:yellow; } \n  .movieDetail.row1 { border-bottom:none; } .movieDetail.row2 { border-top:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"summaryTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;tr class='movieSummary'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"detailTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n  &lt;tr class='movieDetail row1'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;&lt;tr class='movieDetail row2'&gt;&lt;td&gt;${ReleaseYear}&lt;\/td&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\nClick for details:\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n  { Name: \"The Red Violin\", ReleaseYear: \"1998\", Director: \"Fran\u00e7ois Girard\" },\n  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },\n  { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }\n];\nvar selectedItem = null;\n\n\/* Render the summaryTemplate with the \"movies\" data *\/ \n$( \"#summaryTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n\n$(\"#movieList\")\n.delegate( \".movieSummary\", \"click\", function () {\n  if (selectedItem) {\n    \/* Switch previously selected item back to the summaryTemplate *\/ \n    selectedItem.tmpl = $( \"#summaryTemplate\" ).template();\n\n    \/* Update rendering of previous selected item *\/ \n    selectedItem.update();\n  }\n\n  \/* Make this the selected item  *\/\n  selectedItem = $.tmplItem(this);\n\n  \/* Switch this template item to the detailTemplate *\/ \n  selectedItem.tmpl = $( \"#detailTemplate\" ).template();\n\n  \/* Refresh rendering *\/ \n  selectedItem.update();\n})\n.delegate( \".movieDetail\", \"click\", function () {\n  \/* Unselect - switch to the summaryTemplate *\/ \n  selectedItem.tmpl = $( \"#summaryTemplate\" ).template();\n\n  \/* Refresh rendering *\/ \n  selectedItem.update();\n\n  selectedItem = null;\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/jQuery.template\/","title":"jQuery.template","description":"\nContents:\n\n\njQuery.template( name , template \u00a0) jQuery.template( name, template )\n              \n\n\njQuery.template( template \u00a0) jQuery.template( template )\n              \n\n\n\n\njQuery.template( name, template ) Returns: function\n\n\nDescription: Create a reusable named template (compiled from markup).\n\n\nversion added: 1.4.3jQuery.template( name, template )\nnameA string naming the compiled template.\ntemplateThe HTML markup and\/or text to be used as template. Can be a string, or an HTML element (or jQuery object wrapping an element) whose content is to be used as template\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\nThis method compiles the markup in the template parameter as a named template, which can be referenced using the string specified in the name parameter.\n\n\nThe return value is the compiled-template function. \n\nSee also template().\n\n  Note: The named template is added to the $.template map.\n  \n    To determine if a string \"someName\" is the name of a named template, test whether $.template[\"someName\"] is defined.\n    To remove a previously created named template, use delete $.template[\"someName\"];\n\n  \n\n\nExample: Create a compiled template associated with the name \"summaryTemplate\" and then reference it by name for rendering: \n\n\n\/\/ Convert the markup string into a named template\n$.template( \"summaryTemplate\", \"&lt;li&gt;${Name}&lt;\/li&gt;\" );\n\nfunction renderList() {\n    \/\/ Render the movies data using the named template: \"summaryTemplate\"\n    $.tmpl( \"summaryTemplate\", movies ).appendTo( \"#moviesList\" );\n}\n\n\nExample: Use the return value rather than the name string to reference the compiled template:\n\n\n\/\/ Convert the markup string into a compiled template\nvar myTemplate = $.template( null, \"&lt;li&gt;${Name}&lt;\/li&gt;\" ); \n\nfunction renderList() {\n    \/\/ Render movies data using the compiled template: myTemplate\n    $.tmpl( myTemplate, movies ).appendTo( \"#moviesList\" );\n}\n\n\nExample: Create a named template and reference it by name as a nested template: \n\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    {{tmpl \"summaryTemplate\"}}\n    &lt;tr&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/script&gt;\n___________\n\n\/\/ Convert the markup string into a named template,\n\/\/ referenced by the {{tmpl}} tag\n$.template( \"summaryTemplate\", \"&lt;tr&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\" );\n\n\/\/ Render the movies data, using the named template as a nested template\n$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n\nOptimizing Template Rendering\n\nWhen a template is rendered, using .tmpl() or jQuery.tmpl(), the markup is first converted into a compiled-template function. In the case of markup obtained from a string, the use of .template() as in the above examples ensures that the conversion from markup to a compiled-template function only happens once. \n\n\nOn the other hand, passing a markup string template directly to .tmpl() or to {{tmpl}} for rendering will not be optimal from a performance point of view, since the markup will be re-compiled every time:\n\n\nvar markup = \"&lt;li&gt;${Name}&lt;\/li&gt;\";\n\nfunction renderList() {\n  \/\/ Sub-optimal: the markup string will be\n  \/\/ recompiled each time renderList is called\n  $.tmpl( markup, movies ).appendTo( \"#moviesList\" );\n}\n\n\nNote: In the case of inline templates declared within a script block, caching occurs automatically, so the following example does correspond to best practice:\n\n\nExample: Rendering an inline template directly without compiling as a named template.\n\n\n&lt;script id=\"summaryTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li&gt;${Name}&lt;\/li&gt;\n&lt;\/script&gt;\n___________\n\nfunction renderList() {\n  \/\/ The template will be compiled only once,\n  \/\/ so this is approach can be optimal.\n  $( \"#summaryTemplate\" ).tmpl( movies ).appendTo( \"#moviesList\" );\n}\n\n\nExamples:\n\n\nExample: Render template obtained from a markup string.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; margin:8px; background-color:#f8f8f8; }\ntable td { border:1px solid blue; padding:3px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button id=\"showBtn\"&gt;Show movies&lt;\/button&gt;&lt;br\/&gt;\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\n  var movies = [\n  { Name: \"The Red Violin\", ReleaseYear: \"1998\", Director: \"Fran\u00e7ois Girard\" },\n  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },\n  { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }\n  ];\n\nvar markup = \"&lt;tr&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;td&gt;Released: ${ReleaseYear}&lt;\/td&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\"\n\n\/* Compile markup string as a named template *\/\n$.template( \"movieTemplate\", markup );\n\n\/* Render the named template *\/\n$( \"#showBtn\" ).click( function() {\n  $( \"#movieList\" ).empty();\n  $.tmpl( \"movieTemplate\", movies ).appendTo( \"#movieList\" );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Switch between templates obtained from markup strings.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; margin:8px; background-color:#f8f8f8; }\ntable td { border:1px solid blue; padding:3px; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;button id=\"switchBtn\"&gt;Show full details&lt;\/button&gt;&lt;br\/&gt;\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n  { Name: \"The Red Violin\", ReleaseYear: \"1998\", Director: \"Fran\u00e7ois Girard\" },\n  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },\n  { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }\n];\n\nfunction renderTemplate( container, template, data ) {\n  $( container ).empty();\n  $.tmpl( template, data ).appendTo( container );\n}\n\n\/* Compile markup as named templates *\/\n$.template(\n  \"titleTemplate\",\n  \"&lt;tr&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\"\n);\n$.template(\n  \"detailTemplate\",\n  \"&lt;tr&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;td&gt;Released: ${ReleaseYear}&lt;\/td&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\"\n);\n\nvar details = false;\n\n$( \"#switchBtn\" ).click( function() {\n  details = !details;\n  $(this).text( details ? \"Show titles\" : \"Show full details\" );\n  \/* Render using the other named template *\/\n  renderTemplate( \"#movieList\", (details ? \"detailTemplate\" : \"titleTemplate\"), movies );\n});\n\nrenderTemplate( \"#movieList\", \"titleTemplate\", movies );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Use a markup string as a nested template.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; border:2px solid blue; margin:8px; background-color:#f8f8f8; }\ntable tr { border:1px solid blue; } table td { padding:2px; }\n.title { border-bottom:none; } .detail { border-top:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n  {{tmpl \"titleTemplate\"}}\n  &lt;tr class=\"detail\"&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n  { Name: \"The Red Violin\", Director: \"Fran\u00e7ois Girard\" },\n  { Name: \"Eyes Wide Shut\", Director: \"Stanley Kubrick\" },\n  { Name: \"The Inheritance\", Director: \"Mauro Bolognini\" }\n];\n\n\/* Convert the markup string into a named template,\n   referenced by the {{tmpl}} tag *\/\n$.template( \"titleTemplate\", \"&lt;tr class='title'&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\" );\n\n\/* Render the movies data, using the named template as a nested template *\/\n$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n\n\njQuery.template( template ) Returns: function\n\n\nDescription: Returns a compiled-template function.\n\n\nversion added: 1.4.3jQuery.template( template )\ntemplateThe template markup to be compiled, or a string corresponding to a named template.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nIf the template parameter is the name string for a named template created using $.template( name, template ), this method returns the compiled template for the named template (equivalent to $.template[name]).\n\n\nOtherwise, if the template parameter is a string containing HTML markup, then this method will return a compiled template for the markup provided.\n\n\nIf the template parameter is a string containing pure text (no HTML tags), then the string is treated as a selector for an inline template, whose content will be used as markup. Similarly if template is an HTML element (or jQuery object wrapping an element), then the content will be used as markup for the returned compiled template.\n\n\nExample: Switch the template item to a different template, using $.template( name ), : \n\n\/\/ Create the compiled templates\n$.template( \"summaryTemplate\", \"&lt;tr&gt;...&lt;\/tr&gt;\" );\n$.template( \"detailTemplate\", \"&lt;tr&gt;...&lt;\/tr&gt;\" );\n\n\/\/ Render the summaryTemplate with the \"movies\" data \n$.tmpl( \"summaryTemplate\", movies ).appendTo( \"#movieList\" );\n\n$( \"tr\" ).click( function () {\n    \/\/ Switch the template for this template item to\n    \/\/ a different named template, then update the rendered item\n    var tmplItem = $.tmplItem(this);\n    tmplItem.tmpl = $.template( \"detailTemplate\" );\n    tmplItem.update();\n});\n\n\n\nExample:\n\nDynamic switching of templates, using $.template() to obtain compiled template.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  table { cursor:pointer; border-collapse:collapse; \n        border:2px solid blue; width:300px; margin:8px; }\n  table tr { border:1px solid blue; color:blue; background-color:#f8f8f8; } \n  table td { padding:3px; } table tr:hover { color:red; }\n  .movieDetail { background-color:yellow; } \n  .movieDetail.row1 { border-bottom:none; } \n  .movieDetail.row2 { border-top:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \nClick for details:\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n  { Name: \"The Red Violin\", ReleaseYear: \"1998\", Director: \"Fran\u00e7ois Girard\" },\n  { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\", Director: \"Stanley Kubrick\" },\n  { Name: \"The Inheritance\", ReleaseYear: \"1976\", Director: \"Mauro Bolognini\" }\n];\n\nvar selectedItem = null;\n\n\/* Create the compiled templates *\/\n$.template(\n  \"summaryTemplate\",\n  \"&lt;tr class='movieSummary'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\"\n);\n$.template(\n  \"detailTemplate\",\n  \"&lt;tr class='movieDetail row1'&gt;&lt;td colspan='2'&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;&lt;tr class='movieDetail row2'&gt;&lt;td&gt;${ReleaseYear}&lt;\/td&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\"\n);\n\n\/* Render the summaryTemplate with the \"movies\" data *\/ \n$.tmpl( \"summaryTemplate\", movies ).appendTo( \"#movieList\" );\n\n$( \"#movieList\" )\n.delegate( \".movieSummary\", \"click\", function () {\n  if (selectedItem) {\n    \/* Switch the template for this template item to\n    the named template, then update the rendered item *\/\n    selectedItem.tmpl = $.template( \"summaryTemplate\" );\n    selectedItem.update();\n  }\n  selectedItem = $.tmplItem(this);\n  \/* Switch the template for this template item *\/\n  selectedItem.tmpl = $.template( \"detailTemplate\" );\n  selectedItem.update();\n})\n.delegate( \".movieDetail\", \"click\", function () {\n  \/* Switch the template for this template item *\/\n  selectedItem.tmpl = $.template( \"summaryTemplate\" );\n  selectedItem.update();\n  selectedItem = null;\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-else\/","title":"{{else}} Template Tag","description":"\n\n{{else fieldNameOrExpression}} content {{\/if}} \n\n\nDescription: Used in association with the {{if}}...{{\/if}} tag to provide alternative content based on the values of one or more expressions. The {{else}} tag can be used without a parameter, as in: {{if a}}...{{else}}...{{\/if}}, or with a parameter, as in: {{if a}}...{{else b}}...{{\/if}}.\n\n\nversion added: 1.4.3{{else fieldNameOrExpression}} content {{\/if}}\nfieldNameOrExpressionThe name of a field on the current data item, or a JavaScript function or expression to be evaluated.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{else}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{each}}, {{html}}, {{if}}, {{tmpl}} and {{wrap}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the {{else}} Template Tag without a parameter\n\nThe following example shows how to use {{if expression}}...{{else}}...{{\/if}} to insert conditional content. In the example different content is rendered depending on whether or not the Languages field of the data item is defined.\n\nTemplate:\n\n&lt;li&gt;\n    Title: ${Name}.\n    {{if Languages}}\n        (Alternative languages: ${Languages}).\n    {{else}}\n        (Available only in the original version).\n    {{\/if}}\n&lt;\/li&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: \"French\" },\n    { Name: \"The Mighty\" },\n    { Name: \"City Hunter\", Languages: \"Mandarin and Cantonese\" }\n];\n\nUsing the {{else}} Template Tag with a parameter\n\nThe following example shows how passing a parameter to {{else expression}} provides the equivalent of additional 'else if' conditional blocks. In the example different content is rendered depending on whether the Languages field of the data item is defined, and if not, depending on whether the Subtitles field of the data item is defined.\n\nTemplate:\n\n&lt;li&gt;\n    Title: ${Name}.\n    {{if Languages}}\n        (Alternative languages: ${Languages}).\n    {{else Subtitles}} \n        (Original language only. Subtitles in ${Subtitles}).\n    {{else}} \n        (Original version only, without subtitles).\n    {{\/if}}\n&lt;\/li&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: \"French\", Subtitles: \"English\" },\n    { Name: \"The Mighty\", Subtitles: \"French and Spanish\" },\n    { Name: \"The Mighty\" },\n    { Name: \"City Hunter\", Languages: \"Mandarin and Cantonese\" }\n];\n\n\nExamples:\n\n\nExample: Using {{if expression}}...{{else}}...{{\/if}} to render content conditionally, based on the value of an expression.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n        Title: ${Name}.\n        {{if Languages}}\n            (Alternative languages: ${Languages}).\n        {{else}}\n            (Available only in the original version).\n        {{\/if}}\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: \"French\" },\n    { Name: \"The Mighty\" },\n    { Name: \"City Hunter\", Languages: \"Mandarin and Cantonese\" }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using {{if expression1}}...{{else expression2}}...{{else}}...{{\/if}} to render content conditionally, based on the values of different expressions.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n    Title: ${Name}.\n        {{if Languages}}\n            (Alternative languages: ${Languages}).\n        {{else Subtitles}} \n            (Original language only. Subtitles in ${Subtitles}).\n        {{else}} \n            (Original version only, without subtitles).\n        {{\/if}}\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: \"French\", Subtitles: \"English\" },\n    { Name: \"The Mighty\", Subtitles: \"French and Spanish\" },\n    { Name: \"The Mighty\" },\n    { Name: \"City Hunter\", Languages: \"Mandarin and Cantonese\" }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-each\/","title":"{{each}} Template Tag","description":"\n\n{{each( index, value ) collection}} content {{\/each}} \n\n\nDescription: Used to iterate over a data array, and render the content between the opening and closing template tags once for each data item.\n\n\nversion added: 1.4.3{{each( index, value ) collection}} content {{\/each}}\ncollectionThe JavaScript array (or object) to iterate over.\nindexString specifying a variable name for the iteration index (or key, in the case of an object). Defaults to \"$index\".\nvalueString specifying a variable name for the current data item in the array (or property value, in the case of an object) during the iteration. Defaults to \"$value\".\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{each}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{if}}, {{else}}, {{html}}, {{tmpl}} and {{wrap}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the {{each}} Template Tag\n\nThe following example shows how to use {{each}}...{{\/each}} to render a section of markup iteratively over hierarchical data.\n\nTemplate:\n\n&lt;li&gt;\n    Title: ${Name}.\n    {{each Languages}}\n        ${$index + 1}: &lt;em&gt;${$value}. &lt;\/em&gt;\n    {{\/each}}\n&lt;\/li&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"French\"] },\n    { Name: \"The Mighty\", Languages: [] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\nEvaluating Expressions and Functions, Using Template Variables\n\n{{each expression}} can be used in a similar way to ${expression}, to render content iteratively over an array returned by an expression or a function call, as in the following example:\n\n...\n{{each $item.getSortedLanguages(\"a-z\")}}\n    ...\n{{\/each}}\n...\n\n\nSee ${} for more detailed documentation and examples of using template tags in association with expression evaluation, function calls, template variables, etc. \n\nThe index and value parameters of {{each}}\n\nThe block of template markup between the opening and closing tags {{each}} and {{\/each}} is rendered once for each data item in the data array. Within this block the {{each}} template tag exposes the current index and value as additional template variables $index and $value. These default variable names can be changed by passing in index and value parameters to the {{each}} template tag, as in the following example: \n\n\n{{each(i, language) Languages}}\n    ${i + 1}: &lt;em&gt;${language}. &lt;\/em&gt;\n{{\/each}}\n\n\nExamples:\n\n\nExample: Using {{each}}...{{\/each}} to render a section of markup iteratively over hierarchical data.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n        Title: ${Name}.\n        {{each Languages}}\n            ${$index + 1}: &lt;em&gt;${$value}. &lt;\/em&gt;\n        {{\/each}}\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"French\"] },\n    { Name: \"The Mighty\", Languages: [] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Specifying the index and value parameters of the {{each}} tag.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n        Title: ${Name}.\n        {{each(i, language) Languages}}\n            ${i + 1}: &lt;em&gt;${language}. &lt;\/em&gt;\n        {{\/each}}\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"French\"] },\n    { Name: \"The Mighty\", Languages: [] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-if\/","title":"{{if}} Template Tag","description":"\n\n{{if fieldNameOrExpression}} content {{\/if}} \n\n\nDescription: Used for conditional insertion of content. Renders the content between the opening and closing template tags only if the specified data item field, JavaScript function or expression does not evaluate to false (or to zero, null, type \"undefined\", or the empty string ).\n\n\nversion added: 1.4.3{{if fieldNameOrExpression}} content {{\/if}}\nfieldNameOrExpressionThe name of a field on the current data item, or a JavaScript function or expression to be evaluated.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{if}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{each}}, {{html}}, {{else}}, {{tmpl}} and {{wrap}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the {{if}} Template Tag\n\nThe following example shows how to use {{if}} to insert conditional content, depending on whether the Languages field of the data item is defined (and is not null).\n\nTemplate:\n\n&lt;li&gt;\n    Title: ${Name}.\n    {{if Languages}}\n        (Alternative languages: ${Languages}).\n    {{\/if}}\n&lt;\/li&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: \"French\" },\n    { Name: \"The Mighty\" },\n    { Name: \"City Hunter\", Languages: \"Mandarin and Cantonese\" }\n];\n\nEvaluating Expressions and Functions, Using Template Variables\n\n{{if expression}} can be used in a similar way to ${expression}, to render conditionally based on the value returned by an expression or a function call, as in the following example:\nTemplate:\n\n&lt;li&gt;\n    Title: ${Name}.\n    {{if Languages.length}}\n        (Alternative languages: ${$item.getLanguages(\" - \")}).\n    {{\/if}}\n&lt;\/li&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"French\"] },\n    { Name: \"The Mighty\", Languages: [] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\n\nSee ${} for more detailed documentation and examples of using template tags in association with expression evaluation, function calls, template variables, etc. \n\n\nExample:\n\nUsing {{if}} to render content conditionally, based on the value of an expression.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n        Title: ${Name}.\n        {{if Languages.length}}\n            (Alternative languages: ${$item.getLanguages(\" - \")}).\n        {{\/if}}\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"French\"] },\n    { Name: \"The Mighty\", Languages: [] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies, { \n    getLanguages: function( separator ) {\n        return this.data.Languages.join( separator );\n    }\n}).appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-tmpl\/","title":"{{tmpl}} Template Tag","description":"\n\n{{tmpl( [data], [options] ) template}} \n\n\nDescription: Used for composition of templates. Renders one or more nested template items within the rendered output of the parent template.\n\n\nversion added: 1.4.3{{tmpl( [data], [options] ) template}}\ntemplateThe HTML markup or text to use as a template.\ndataThe data to render. This can be any JavaScript type, including Array or Object.\noptionsAn optional map of user-defined key-value pairs. Extends the tmplItem data structure, available to the template during rendering.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{tmpl}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{each}}, {{if}}, {{else}}, {{html}} and {{wrap}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the {{tmpl}} Template Tag\n\nThe following example shows how to use {{tmpl}} to render a nested template.\n\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    {{tmpl \"#titleTemplate\"}}\n    &lt;tr class=\"detail\"&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/script&gt;\n\n&lt;script id=\"titleTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr class=\"title\"&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/script&gt;\n\nThe template parameter can be any of the following: \n\nA string containing markup.\nAn HTML element (or jQuery object that wraps an element) whose content is to be used as the template.\nA string corresponding to the name of a named template (see jQuery.template() and .template()).\nA compiled-template function (see jQuery.template() and .template()).\n\n\nIf data is an array, the template is rendered once for each data item in the array. If data is an object, or if the data parameter is missing or null, a single template item is rendered.\n\n\nThe following example shows how to iterate over hierarchical data, by passing a data parameter to the a nested {{tmpl}} tag.\n\nTemplates:\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;\n        &lt;td&gt;${Name}&lt;\/td&gt;\n        &lt;td&gt;{{tmpl(Languages) \"#languageTemplate\"}}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/script&gt;\n\n&lt;script id=\"languageTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;em&gt;${Name}&lt;\/em&gt;\n&lt;\/script&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"English\", \"French\"] },\n    { Name: \"The Mighty\", Languages: [\"English\"] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\nRecursive Nested {{tmpl}} Tags\n\nA template may contain a {{tmpl}} or {{wrap}} tag referencing the same template. The following example uses a recursive template to create a tree view:\n\nTemplates:\n\n&lt;script id=\"folderTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li class=\"toggle\"&gt;\n        &lt;span class=\"expand\"&gt;${expanderSymbol($item)}&lt;\/span&gt;\n        &lt;span&gt;${name}&lt;\/span&gt;\n    &lt;\/li&gt;\n    {{if expanded}}\n        &lt;li&gt;\n            &lt;ul&gt;{{tmpl(getFolderItems($item)) \"#itemTmpl\"}}&lt;\/ul&gt;\n            &lt;ul&gt;{{tmpl(getSubFolders($item)) \"#folderTmpl\"}}&lt;\/ul&gt;\n        &lt;\/li&gt;\n    {{\/if}}\n&lt;\/script&gt;\n\n&lt;script id=\"itemTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li class=\"folderItem\"&gt;${name}&lt;\/li&gt;\n&lt;\/script&gt;\n\nData:\n\n\/\/ Hierarchy of named folders \nvar folders = {\n    name: \"Samples\",\n    folders: [\n        { name: \"API\", folders: [\n            { name: \".tmpl()\"}\n        ]},\n        { name: \"Template markup\", folders: [\n            { name: \"Tags\", folders: [\n                { name: \"{{wrap}}\"}\n            ]},\n        ]},\n    ]\n};\n\n\/\/ Array for the folder items. Each item can show up in one or more folders\nvar samples = [\n    { name: \"Template in script block\", \n        folders: [ \".tmpl()\" ], \n        description: \"Rendering a template declared in script block\" },\n    { name: \"Tab View\", \n        folders: [ \"{{wrap}}\", \".tmpl()\" ], \n        description: \"A tab view, using {{wrap}}\" }\n];\n\n\nExamples:\n\n\nExample: Using {{tmpl}} to render a nested template.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; border:2px solid blue; margin:5px; background-color:#f8f8f8; }\ntable tr { border:1px solid blue; } table td { padding:2px; }\n.title { border-bottom:none; } .detail { border-top:none; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    {{tmpl \"#titleTemplate\"}}\n    &lt;tr class=\"detail\"&gt;&lt;td&gt;Director: ${Director}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"titleTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr class=\"title\"&gt;&lt;td&gt;${Name}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;table&gt;&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"The Red Violin\", Director: \"Fran\u00e7ois Girard\" },\n    { Name: \"Eyes Wide Shut\", Director: \"Stanley Kubrick\" },\n    { Name: \"The Inheritance\", Director: \"Mauro Bolognini\" }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies ).appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using {{tmpl}} to render hierarchical data.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable {float:left;clear:right;border-collapse:collapse;width:370px;background-color:#f8f8f8;margin:4px;} table td {border:1px solid blue;padding:3px;}\ntable th {font-weight:bold;border:2px solid blue;padding:1px;} table tbody {border:2px solid blue;} button {float:left;margin:4px;width:70px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;\n        &lt;td&gt;${Name}&lt;\/td&gt;\n        &lt;td&gt;{{tmpl(Languages.results) \"#languageTemplate\"}}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"languageTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;em&gt;${Name} &lt;\/em&gt;\n&lt;\/tmpl&gt;\n\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Title&lt;\/th&gt;&lt;th&gt;Languages&lt;\/th&gt;&lt;\/tr&gt;&lt;\/tbody&gt;\n&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n&lt;button id=\"foreignBtn\"&gt;Foreign&lt;\/button&gt;\n&lt;button id=\"dramaBtn\"&gt;Drama&lt;\/button&gt;\n\n&lt;script&gt;\nfunction getMovies( genre, skip, top ) {\n    $.ajax({\n        dataType: \"jsonp\",\n        url: \"http:\/\/odata.netflix.com\/Catalog\/Genres('\" + genre\n            + \"')\/Titles?$format=json&amp;$expand=Languages&amp;$skip=\"\n            + skip + \"&amp;$top=\" + top,\n        jsonp: \"$callback\",\n        success: function( data ) {\n            \/* Get the movies array from the data *\/\n            var movies = data.d.results;\n\n            \/* Remove current set of movie template items *\/\n            $( \"#movieList\" ).empty();\n            \n            \/* Render the template with the movies data and insert\n               the rendered HTML under the \"movieList\" element *\/\n            $( \"#movieTemplate\" ).tmpl( movies )\n                .appendTo( \"#movieList\" );\n        }\n    });\n}\n\n$( \"#foreignBtn\" ).click( function() {\n    getMovies( \"Foreign\", 0, 4 );\n});\n\n$( \"#dramaBtn\" ).click( function() {\n    getMovies( \"Drama\", 0, 4 );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using the options parameter of the {{tmpl}} tag to provide a showLanguage method.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable {float:left;clear:right;border-collapse:collapse;width:370px;background-color:#f8f8f8;margin:4px;} table td {border:1px solid blue;padding:3px;}\ntable th {font-weight:bold;border:2px solid blue;padding:1px;} table tbody {border:2px solid blue;} button {float:left;margin:4px;width:70px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;\n        &lt;td&gt;${Name}&lt;\/td&gt;\n        &lt;td&gt;{{tmpl(Languages.results, $item.languageOptions) \"#languageTemplate\"}}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"languageTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;em&gt;${$item.showLanguage(Name)} &lt;\/em&gt;\n&lt;\/tmpl&gt;\n\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Title&lt;\/th&gt;&lt;th&gt;Languages&lt;\/th&gt;&lt;\/tr&gt;&lt;\/tbody&gt;\n&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n&lt;button id=\"foreignBtn\"&gt;Foreign&lt;\/button&gt;\n&lt;button id=\"dramaBtn\"&gt;Drama&lt;\/button&gt;\n\n&lt;script&gt;\nfunction getMovies( genre, skip, top ) {\n    $.ajax({\n        dataType: \"jsonp\",\n        url: \"http:\/\/odata.netflix.com\/Catalog\/Genres('\" + genre\n            + \"')\/Titles?$format=json&amp;$expand=Languages&amp;$skip=\"\n            + skip + \"&amp;$top=\" + top,\n        jsonp: \"$callback\",\n        success: function( data ) {\n            \/* Get the movies array from the data *\/\n            var movies = data.d.results;\n\n            \/* Remove current set of movie template items *\/\n            $( \"#movieList\" ).empty();\n\n            \/* Render the template items for each movie.\n               Pass in the languageOptions map which will be used as\n               options parameter on the nested \"languageTemplate\" template.\n               The 'showLanguage' method will be called by the nested template. *\/\n            $( \"#movieTemplate\" ).tmpl( movies, {\n                languageOptions: {\n                    showLanguage: function showLanguage( name ) {\n                        return name.toUpperCase();\n                    }\n                }\n            }).appendTo( \"#movieList\" );\n        }\n    });\n}\n\n$( \"#foreignBtn\" ).click( function() {\n    getMovies( \"Foreign\", 0, 4 );\n});\n\n$( \"#dramaBtn\" ).click( function() {\n    getMovies( \"Drama\", 0, 4 );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: A tree view, using recursive nested {{tmpl}} tags.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.treeView li li {margin-left:18px;} .expand {vertical-align:middle;margin-right:7px;display:inline-block;border:1px solid #555;text-align:center;height:12px;width:12px;line-height:11px;background-color:#f8f8f8;color:Blue;} \n.treeView, .treeView ul {padding:0;margin:0;} .treeView li {margin-left:8px;list-style-type:none;padding:2px;cursor:pointer;} .treeView li.folderItem {color:Blue;text-decoration:underline;font-style:italic;margin-bottom:4px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"folderTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li class=\"toggle\"&gt;\n        &lt;span class=\"expand\"&gt;${expanderSymbol($item)}&lt;\/span&gt;\n        &lt;span&gt;${name}&lt;\/span&gt;\n    &lt;\/li&gt;\n    {{if expanded}}\n        &lt;li&gt;\n            &lt;ul&gt;{{tmpl(getFolderItems($item)) \"#itemTmpl\"}}&lt;\/ul&gt;\n            &lt;ul&gt;{{tmpl(getSubFolders($item)) \"#folderTmpl\"}}&lt;\/ul&gt;\n        &lt;\/li&gt;\n    {{\/if}}\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"itemTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li class=\"folderItem\"&gt;${name}&lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"samplesList\" class=\"treeView\"&gt;&lt;li&gt;&lt;\/li&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\n \/* Hierarchy of named folders *\/ \nvar folders = {\n    name: \"Samples\",\n    folders: [\n        { name: \"API\", folders: [\n            { name: \".tmpl()\"}\n        ]},\n        { name: \"Template markup\", folders: [\n            { name: \"Tags\", folders: [\n                { name: \"{{wrap}}\"}\n            ]},\n        ]},\n    ]\n};\n\n\/* Array for the folder items. Each item can show up in one or more folders *\/\nvar samples = [\n    { name: \"Template in script block\", \n        folders: [ \".tmpl()\" ], \n        description: \"Rendering a template declared in script block\" },\n    { name: \"Template as string\", \n        folders: [ \".tmpl()\" ], \n        description:\"Rendering a template passed as a string\" },\n    { name: \"Render remote data\", \n        folders: [ \"API\" ], \n        description: \"Rendering remote data using templates\" },\n    { name: \"Tab View\", \n        folders: [ \"{{wrap}}\", \".tmpl()\" ], \n        description: \"A tab view, using {{wrap}}\" }\n];\n\n\/* Declare the functions for getting the items and subfolders, etc. \n   These could be simple global functions. \n   (Here we are adding them to the window object, which is equivalent). *\/\n$.extend( window, { \n    getFolderItems: function( tmplItem ) {\n        return $.map( samples, function( sample ) {\n            return $.inArray( tmplItem.data.name, sample.folders ) &gt; -1 ? sample : null;\n        });\n    }, \n    getSubFolders: function( tmplItem ) {\n        return tmplItem.data.folders || [];\n    }, \n    expanderSymbol: function( tmplItem ) {\n        return tmplItem.data.expanded ? \"-\" : \"+\";\n    }\n});\n\n$( \"#folderTmpl\" ).tmpl( folders ).appendTo( \"#samplesList\" );\n\n$( \"#samplesList\" )\n    .delegate( \".toggle\", \"click\", function() {\n        \/* Toggle expanded property on data, then update rendering *\/\n        var tmplItem = $.tmplItem( this );\n        tmplItem.data.expanded = !tmplItem.data.expanded;\n        tmplItem.update();\n    })\n    .delegate( \".folderItem\", \"click\", function() {\n        alert( $.tmplItem( this ).data.description );\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-equal\/","title":"${} Template Tag","description":"\n\n${fieldNameOrExpression} \n\n\nDescription: Used for insertion of data values in the rendered template. Evaluates the specified field (property) on the current data item, or the specified JavaScript function or expression.\n\n\nversion added: 1.4.3${fieldNameOrExpression}\nfieldNameOrExpressionThe name of a field on the current data item, or a JavaScript function or expression to be evaluated.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the ${} tag can be used within jQuery templates in addition to text and HTML markup to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: {{each}}, {{if}}, {{else}}, {{html}}, {{tmpl}} and {{wrap}}. Note: User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the ${} Template Tag\n\nThe following example shows how to use ${} to insert the values of the data item fields: Name and ReleaseYear.\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; was released in ${ReleaseYear}.&lt;\/li&gt;\n&lt;\/script&gt;\n\n&lt;script type=\"text\/javascript\"&gt;\n    var movies = [\n        { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n        { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n    ];\n\n    \/\/ Render the template with the movies data and insert\n    \/\/ the rendered HTML under the \"movieList\" element\n    $( \"#movieTemplate\" ).tmpl( movies )\n        .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\nThe ${field} syntax is a shortened form of the alternative syntax: {{= field}}. The following is equivalent to the template used in the example above:\n\n&lt;li&gt;&lt;b&gt;{{= Name}}&lt;\/b&gt; was released in {{= ReleaseYear}}.&lt;\/li&gt;\nEvaluating Expressions and Functions\n\nIn the following example ${expression} is used to evaluate a simple expression:\n\nTemplate:\n\n&lt;tr&gt;&lt;td&gt;${Languages.length}&lt;\/td&gt;&lt;\/tr&gt;\n\nData:\n\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"English\", \"French\"] },\n    { Name: \"The Mighty\", Languages: [\"English\"] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n\n\nFor more complex expressions it is preferable to place the expression within a function, then use ${myFunction(a,b)} to call the function, as in:\n\nTemplate:\n\n&lt;tr&gt;&lt;td&gt;${getLanguages(Languages, \" - \")}&lt;\/td&gt;&lt;\/tr&gt;\n\nCode:\n\nfunction getLanguages( data, separator ) {\n    return data.join( separator );\n}\n\n\nThe above example requires the function getLanguages to be available in global scope. An alternative approach which does not require a global variable is to add the function to the template item, by passing it in with the options parameter of .tmpl():\n\nTemplate:\n\n&lt;tr&gt;&lt;td&gt;${$item.getLanguages(\" - \")}&lt;\/td&gt;&lt;\/tr&gt;\n\nCode:\n\n\/\/ Render the template with the movies data\n$( \"#movieTemplate\" ).tmpl( movies, { \n    getLanguages: function( separator ) {\n        return this.data.Languages.join( separator );\n    }\n}).appendTo( \"#movieList\" );\n\n\nNote the use of the $item template variable, above (see the next section), which corresponds to the template item. In the call to $item.getLanguages(), the this pointer within the function is therefore the template item, and provides access to this.data etc.\n\nThe $item and $data Template Variables\n\nThe following variables are exposed to expression evaluation within templates:\n\n\n    \n$: The jQuery object.\n    \n$item: The current template item - which allows access to $item.data, $item.parent, etc. as well as any user-defined values or methods passed in with the options map.\n    \n$data: The current data item (equivalent to $item.data).\n    Note: A template tag with content such as {{each}}...{{\/each}} may expose additional variables to template evaluation within the content. In the case of {{each}}, for example, the additional template variables $value and $index are provided within the content of the {{each}} tag.\n\nHTML encoding\n\nThe values rendered by ${} are evaluated as strings, and are HTML encoded. Any embedded markup will therefore be encoded. To insert the unencoded markup in the rendered template, use instead the {{html}} template tag.\n\n\nExamples:\n\n\nExample: Using ${} to render values of data item fields.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; was released in ${ReleaseYear}.&lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using ${} to evaluate an expression or call a function.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; width:400px; background-color:#f8f8f8; margin:10px; } table td { border:1px solid blue; padding:3px; } \ntable th { font-weight:bold; border:2px solid blue; padding:1px; } table tbody { border:2px solid blue; }\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;\n        &lt;td&gt;${Name}&lt;\/td&gt;\n        &lt;td&gt;${Languages.length}&lt;\/td&gt;\n        &lt;td&gt;${$item.getLanguages(\" - \")}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;Title&lt;\/th&gt;&lt;th&gt;Versions&lt;\/th&gt;&lt;th&gt;Languages&lt;\/th&gt;&lt;\/tr&gt;&lt;\/tbody&gt;\n&lt;tbody id=\"movieList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"Meet Joe Black\", Languages: [\"English\", \"French\"] },\n    { Name: \"The Mighty\", Languages: [\"English\"] },\n    { Name: \"City Hunter\", Languages: [\"Mandarin\", \"Cantonese\"] }\n];\n\n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies, { \n    getLanguages: function( separator ) {\n        return this.data.Languages.join( separator );\n    }\n}).appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-wrap\/","title":"{{wrap}} Template Tag","description":"\n\n{{wrap( [data], [options] ) template}} content {{\/wrap}} \n\n\nDescription: Used for composition of templates which incorporate wrapped HTML content. Rendered template items can combine wrapped HTML content with template markup.\n\n\nversion added: 1.4.3{{wrap( [data], [options] ) template}} content {{\/wrap}}\ntemplateThe HTML markup or text to use as a template.\ndataThe data to render. This can be any JavaScript type, including Array or Object.\noptionsAn optional map of user-defined key-value pairs. Extends the tmplItem data structure, available to the template during rendering.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{wrap}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{each}}, {{if}}, {{else}}, {{html}} and {{tmpl}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nThe {{wrap}} and {{tmpl}} Template Tags\nThe {{wrap}} template tag is similar to the {{tmpl}} template tag, except that it provides additional support for incorporating wrapped HTML content into the rendered output. The use of the template, data and options parameters is the same for both tags. (See {{tmpl}} for additional information and examples).\n\nWhen using {{wrap}} the template parameter will usually correspond to template markup which uses the $item.html() feature to incorporate the wrapped markup. The template parameter can be any of the following: \n\nA string containing markup.\nAn HTML element (or jQuery object that wraps an element) whose content is to be used as the template.\nA string corresponding to the name of a named template (see jQuery.template() and .template()).\nA compiled-template function (see jQuery.template() and .template()).\n\nWith {{wrap}}, the data parameter will often be unspecified, since the rendered output can be driven by the wrapped HTML rather than by data. If data is specified and is an array, the template is rendered once for each data item in the array. If data is an object, or if the data parameter is missing or null, a single template item is rendered.\n\nUsing the {{wrap}} Template Tag\n\nThe following example shows how to use {{wrap}} to render a nested template that incorporates the wrapped HTML. In this case the content of the {{wrap}} template tag is a set of div elements. The chosen template, tableWrapper, extracts each div and wraps it in a table cell.\n\n\n&lt;script id=\"myTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    The following wraps some HTML content:\n    {{wrap \"#tableWrapper\"}}\n        &lt;div&gt;\n            First &lt;b&gt;content&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;div&gt;\n            And &lt;em&gt;more&lt;\/em&gt; &lt;b&gt;content&lt;\/b&gt;...\n        &lt;\/div&gt;\n    {{\/wrap}}\n&lt;\/script&gt;\n\n&lt;script id=\"tableWrapper\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;table&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"div\")}}\n                &lt;td&gt;\n                    {{html $value}}\n                &lt;\/td&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n    &lt;\/tbody&gt;&lt;\/table&gt;\n&lt;\/script&gt;\n\nThe $item.html() Method\n\nAny HTML content between the opening and closing tags of {{wrap}} is made available to the template as a $item.html( filter, textOnly ) method on the template item.\n\n\nThe return value of $item.html() is a filtered array of markup strings taken from the wrapped content:\n\n\n  Use $item.html() without parameters to return all the top-level elements of the wrapped HTML content.\n  Pass a selector string as filter parameter to return a filtered subset of the top-level elements. (The default value of filter is \"*\").\n  If textOnly is set to true $item.html( filter, textOnly ) returns the inner text of the filtered subset of top-level elements.\n\n\nThe following example shows how to incorporate both HTML and text content into the rendered output.\n\n\n&lt;script id=\"myTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    The following wraps and reorders some HTML content:\n    {{wrap \"#tableWrapper\"}}\n        &lt;h3&gt;One&lt;\/h3&gt;\n        &lt;div&gt;\n            First &lt;b&gt;content&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;Two&lt;\/h3&gt;\n        &lt;div&gt;\n            And &lt;em&gt;more&lt;\/em&gt; &lt;b&gt;content&lt;\/b&gt;...\n        &lt;\/div&gt;\n    {{\/wrap}}\n&lt;\/script&gt;\n\n&lt;script id=\"tableWrapper\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;table&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"h3\", true)}}\n                &lt;td&gt;\n                    ${$value}\n                &lt;\/td&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"div\")}}\n                &lt;td&gt;\n                    {{html $value}}\n                &lt;\/td&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n    &lt;\/tbody&gt;&lt;\/table&gt;\n&lt;\/script&gt;\n\nIncluding Template Tags in Wrapped Content\n\nThe HTML markup between the opening and closing tags of {{wrap}} can include other template tags. The following example uses nested {{wrap}}tags to created nested tab views:\n\n\n&lt;script id=\"myTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    {{wrap \"#tabsWrap\"}}\n        &lt;h3&gt;One&lt;\/h3&gt;\n        &lt;div&gt;\n            First &lt;b&gt;tab&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;Two&lt;\/h3&gt;\n        &lt;div&gt;\n            &lt;b&gt;Second&lt;\/b&gt; tab\n            {{wrap \"#tabsWrap\"}}\n                &lt;h3&gt;InnerOne&lt;\/h3&gt;\n                &lt;div&gt;\n                    Inner first &lt;b&gt;tab&lt;\/b&gt;\n                &lt;\/div&gt;\n                &lt;h3&gt;InnerTwo&lt;\/h3&gt;\n                &lt;div&gt;\n                    Inner &lt;b&gt;second&lt;\/b&gt; tab\n                &lt;\/div&gt;\n            {{\/wrap}}\n        &lt;\/div&gt;\n    {{\/wrap}}\n&lt;\/script&gt;\n\n\nExamples:\n\n\nExample: Using {{wrap}} to wrap elements in table cells.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\ntable { border-collapse:collapse; width:380px; background-color:#f8f8f8; border:2px solid blue; margin:5px; } table td { border:1px solid blue; padding:3px; } \n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"myTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    The following wraps and reorders some HTML content:\n    {{wrap \"#tableWrapper\"}}\n        &lt;h3&gt;One&lt;\/h3&gt;\n        &lt;div&gt;\n            First &lt;b&gt;content&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;Two&lt;\/h3&gt;\n        &lt;div&gt;\n            And &lt;em&gt;more&lt;\/em&gt; &lt;b&gt;content&lt;\/b&gt;...\n        &lt;\/div&gt;\n    {{\/wrap}}\n\n    And this wraps different HTML content:\n    {{wrap \"#tableWrapper\"}}\n        &lt;div&gt;\n            First &lt;b&gt;div&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;div&gt;\n            Second &lt;b&gt;div&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;div&gt;\n            Third &lt;b&gt;div&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;first h3&lt;\/h3&gt;\n        &lt;h3&gt;second h3&lt;\/h3&gt;\n        &lt;h3&gt;third h3&lt;\/h3&gt;\n    {{\/wrap}}\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"tableWrapper\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;table&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"h3\", true)}}\n                &lt;td&gt;\n                    ${$value}\n                &lt;\/td&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"div\")}}\n                &lt;td&gt;\n                    {{html $value}}\n                &lt;\/td&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n    &lt;\/tbody&gt;&lt;\/table&gt;\n&lt;\/tmpl&gt;\n\n&lt;div id=\"myWrappedView\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n$( \"#myTmpl\" ).tmpl()\n    .appendTo( \"#myWrappedView\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using {{wrap}} to create a tabbed view.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.body {height:80px;background-color:#fff;} .body div {height:32px;vertical-align:middle;text-align:center;} .body h3 {text-align:center;} .tabsView td {border:solid 1px #0000A6;border-top:none;border-right:solid 2px #1E1ED2;}\n.tabsView th {cursor:pointer;padding:2px;font-weight:normal;font-style:italic;color:#888;border:solid 1px #bbb;border-right:none;background-color:#f8f8f8;border-bottom:solid 1px #1E1ED2;} #tabsView &gt; .tabsView {width:265px;} \n.tabsView {width:250px;border-collapse:collapse;border:none;margin:5px;} .tabsView tr {border-right:solid 1px #bbb;} th.header_true {font-weight:bold;border:solid 1px #0000A6;border-right:solid 2px #1E1ED2;border-bottom:solid 1px #eee;color:#0000A6;background-color:#fff;} \n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"tabsTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    {{wrap(null, {state: $item.state}) \"#tabsWrap\"}}\n        &lt;h3&gt;One&lt;\/h3&gt;\n        &lt;div&gt;\n            First &lt;b&gt;tab&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;Two&lt;\/h3&gt;\n        &lt;div&gt;\n            &lt;b&gt;Second&lt;\/b&gt; tab\n        &lt;\/div&gt;\n        &lt;h3&gt;Three&lt;\/h3&gt;\n        &lt;div&gt;\n            Third &lt;em&gt;tab&lt;\/em&gt; &lt;br\/&gt; and more content...\n        &lt;\/div&gt;\n    {{\/wrap}}\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"tabsWrap\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;table class=\"tabsView\"&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"h3\", true)}}\n                &lt;th class=\"header_${$index === $item.state.activeIndex}\"&gt;\n                    ${$value}\n                &lt;\/th&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n        &lt;tr&gt;&lt;td colspan='${$item.html(\"h3\").length}'&gt;\n            &lt;div class=\"body\"&gt;\n                {{html $item.html(\"div\")[$item.state.activeIndex]}}\n            &lt;\/div&gt;\n        &lt;\/td&gt;&lt;\/tr&gt;\n    &lt;\/tbody&gt;&lt;\/table&gt;\n&lt;\/tmpl&gt;\n\n&lt;div id=\"tabsView\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n\/* Track the selected tab index *\/\nvar state = { activeIndex: 1 };\n\n\/* Render tabs view *\/\n$( \"#tabsTmpl\" ).tmpl( null, { state: state})\n    .appendTo( \"#tabsView\" );\n\n$( \"#tabsView\" )\n    .delegate( \".tabsView th\", \"click\", function() {\n        var tmplItem = $.tmplItem( this );\n\n        \/* Set the selected tab index to this tab *\/\n        tmplItem.state.activeIndex = $(this).index();\n\n        \/* update the rendering *\/\n        tmplItem.update();\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Using {{wrap}} to create nested tabbed views.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.body {height:85px;background-color:#fff;} .body div {height:30px;vertical-align:middle;text-align:center;} .body h3 {text-align:center;} .tabsView td {border:solid 1px #0000A6;border-top:none;border-right:solid 2px #1E1ED2;}\n.tabsView th {cursor:pointer;padding:2px;font-weight:normal;font-style:italic;color:#888;border:solid 1px #bbb;border-right:none;background-color:#f8f8f8;border-bottom:solid 1px #1E1ED2;} #tabsView &gt; .tabsView {width:265px;} \n.tabsView {width:250px;border-collapse:collapse;border:none;margin:5px;} .tabsView tr {border-right:solid 1px #bbb;} th.header_true {font-weight:bold;border:solid 1px #0000A6;border-right:solid 2px #1E1ED2;border-bottom:solid 1px #eee;color:#0000A6;background-color:#fff;} \n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"tabsTmpl\" type=\"text\/x-jquery-tmpl\"&gt;\n    {{wrap(null, {state: $item.state}) \"#tabsWrap\"}}\n        &lt;h3&gt;One&lt;\/h3&gt;\n        &lt;div&gt;\n            First &lt;b&gt;tab&lt;\/b&gt;\n        &lt;\/div&gt;\n        &lt;h3&gt;Two&lt;\/h3&gt;\n        &lt;div&gt;\n            &lt;b&gt;Second&lt;\/b&gt; tab\n            {{wrap(null, {state: $item.state.innerState}) \"#tabsWrap\"}}\n                &lt;h3&gt;InnerOne&lt;\/h3&gt;\n                &lt;div&gt;\n                    Inner first &lt;b&gt;tab&lt;\/b&gt;\n                &lt;\/div&gt;\n                &lt;h3&gt;InnerTwo&lt;\/h3&gt;\n                &lt;div&gt;\n                    Inner &lt;b&gt;second&lt;\/b&gt; tab\n                &lt;\/div&gt;\n            {{\/wrap}}\n        &lt;\/div&gt;\n        &lt;h3&gt;Three&lt;\/h3&gt;\n        &lt;div&gt;\n        Third &lt;em&gt;tab&lt;\/em&gt; &lt;br\/&gt; and more content...\n        &lt;\/div&gt;\n    {{\/wrap}}\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"tabsWrap\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;table class=\"tabsView\"&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n            {{each $item.html(\"h3\", true)}}\n                &lt;th class=\"header_${$index === $item.state.activeIndex}\"&gt;\n                    ${$value}\n                &lt;\/th&gt;\n            {{\/each}}\n        &lt;\/tr&gt;\n        &lt;tr&gt;&lt;td colspan='${$item.html(\"h3\").length}'&gt;\n            &lt;div class=\"body\"&gt;\n                {{html $item.html(\"div\")[$item.state.activeIndex]}}\n            &lt;\/div&gt;\n        &lt;\/td&gt;&lt;\/tr&gt;\n    &lt;\/tbody&gt;&lt;\/table&gt;\n&lt;\/tmpl&gt;\n\n&lt;div id=\"tabsView\"&gt;..loading&lt;\/div&gt;\n\n&lt;script&gt;\n\/* Track the selected tab index for inner and outer tab views *\/\nvar state = { activeIndex: 1, innerState: { activeIndex: 0 } };\n\nfunction refresh() {\n    $( \"#tabsView\" ).empty();\n    $( \"#tabsTmpl\" ).tmpl( null, { state: state})\n        .appendTo( \"#tabsView\" );\n}\n\n\/* Render tabs view *\/\nrefresh();\n\n$( \"#tabsView\" )\n    .delegate( \".tabsView th\", \"click\", function() {\n        \/* Set the selected tab index to this tab *\/\n        $.tmplItem( this ).state.activeIndex = $(this).index();\n\n        \/* update the rendering *\/\n        refresh();\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/tmplitem\/","title":"tmplItem","description":"\n\n.tmplItem() Returns: tmplItem\n\n\nDescription: Return the tmplItem data structure for the rendered template that the matched element is part of.\n\nversion added: 1.4.3.tmplItem()\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\n$(selector).tmplItem() provides access to the rendered template item which the target element of the selector is part of.\n\nSee also jQuery.tmplItem().\n\nThe return value of tmplItem() is a tmplItem data structure whose fields provide access to:\n\nThe HTML elements that the template item is made up of (nodes field).\nThe associated data item (data field).\nThe parent template item, if the template is nested (parent field).\nThe template that was used to render the template item (tmpl field).\nUser defined parameters or methods, such as any values that were set on the options map, passed to tmpl() when the template was rendered.\n\n\nThe following example shows how to use .tmplItem() to get information about the rendered template:\n\nvar tmplItem = $( selector ).tmplItem();\nalert( \"Description: \" + tmplItem.data.description );\n\nBuilding Interactive Ajax Applications\n\n.tmplItem() and jQuery.tmplItem() make it easy to use templates in scenarios beyond simple string concatenation and read-only rendering. They let you create fully-fledged interactive client-side Ajax applications in which the code needs to perform actions like the following:\n\nAccessing the associated data item.\nModifying the data item.\nAccessing HTML elements that make up the rendered template item.\nUpdating (re-rendering) the template item, with modified data, modified user-defined parameters, or using a different template\n\nExample: Access data and HTML elements for a template item.:\n\n\/\/ Get the template item for an element\nvar tmplItem = $( selector ).tmplItem();\n\n\/\/ Get the corresponding data item and HTML nodes\nvar movieData = tmplItem.data;\nvar htmlNodes = tmplItem.nodes;\n\n\/\/ Modify style\n$( htmlNodes ).css( \"backgroundColor\", color );\n\n\/\/ Access data\nalert( \"'\" + movieData.Name + \"' was released in \"\n        + movieData.ReleaseYear + \".\" );\n\nThe following example is from the Master Detail sample, below. It uses .tmplItem() to set selection on the new item that is added to the list:\n\n$(\"#addBtn\").click( function () {\n    \/\/ Add a new item to the data array\n    people.push( { firstName: \"first\", lastName: \"last\" } );\n\n    \/\/ Render the template with the new data\n    renderTemplate( \"#peopleList\", \"#listItemTemplate\", people );\n\n    \/\/ Find the added template item\n    var addedTmplItem = $(\"#peopleList tr:last\").tmplItem();\n    \n    \/\/ Set selection on the added item\n    select ( addedTmplItem );\n});\n\n\nExamples:\n\n\nExample: Access the template item of matched element, to show data and to modify CSS styles on the rendered template.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li&gt;\n        &lt;b&gt;${Name}&lt;\/b&gt;\n    &lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;button id=\"lastItemBtn\"&gt;Details of last movie&lt;\/button&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [ \n    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n];\nvar color = \"aqua\"; \n\/* Render the template with the movies data *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n\n$( \"#lastItemBtn\" ).click( function() {\n    \/* Flip the color *\/\n    color = (color === \"aqua\" ? \"yellow\" : \"aqua\");\n\n    \/* Get the data structure for the last\n       template item in the list *\/\n    var lastTmplItem = $( \"li:last\" ).tmplItem();\n\n    \/* Get the corresponding data item and HTML nodes *\/\n    var movie = lastTmplItem.data;\n    var htmlNodes = lastTmplItem.nodes;\n\n    \/* Switch the background color *\/\n    $( htmlNodes ).css( \"backgroundColor\", color );\n\n    \/* Acces the data *\/\n    alert( \"'\" + movie.Name + \"' was released in \" + movie.ReleaseYear + \".\" );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Editable master detail view.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n  table {cursor:pointer;border-collapse:collapse;float:left;clear:both;} \n  table tr {border:1px solid blue;color:blue;height:25px;} \n  table tr:hover {color:red;}\n  table, #personDetail &gt; div {border:2px solid blue;width:230px;\n                     margin:4px 0 4px 4px;\n                     background-color:#f8f8f8;} \n  table td, #personDetail div div {padding:3px;margin:3px;}\n  .selected {background-color:yellow;} \n  #personDetail input {float:right;width:125px;} \n  #personDetail {float:left;margin-left:10px;} \n  button {float:left;margin:4px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"listItemTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;tr&gt;&lt;td&gt;\n        ${firstName} ${lastName} \n    &lt;\/td&gt;&lt;\/tr&gt;\n&lt;\/tmpl&gt;\n\n&lt;tmpl id=\"detailTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;div&gt;\n        &lt;div&gt;First Name: &lt;input name=\"firstName\" value=\"${firstName}\"\/&gt;&lt;\/div&gt;\n        &lt;div&gt;Last Name: &lt;input name=\"lastName\" value=\"${lastName}\"\/&gt;&lt;\/div&gt;\n    &lt;\/div&gt;\n&lt;\/tmpl&gt;\n\n&lt;button id=\"addBtn\"&gt;Add a person&lt;\/button&gt;\n\n&lt;table&gt;&lt;tbody id=\"peopleList\"&gt;&lt;\/tbody&gt;&lt;\/table&gt;\n\n&lt;div id=\"personDetail\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\nvar people = [\n    { firstName: \"Peter\", lastName: \"Jones\" },\n    { firstName: \"Eva\", lastName: \"Smolinski\" }\n];\n\nvar selectedItem = null;\n\nfunction renderTemplate( container, template, data ) {\n    $( container ).empty();\n    $( template ).tmpl( data ).appendTo( container );\n}\n\n\/* Render the list *\/\nrenderTemplate( \"#peopleList\", \"#listItemTemplate\", people );\n\nfunction select( tmplItem ) {\n    if ( selectedItem ) {\n        $( selectedItem.nodes ).removeClass( \"selected\");\n    }\n    $( tmplItem.nodes ).addClass( \"selected\");\n    selectedItem = tmplItem;\n\n    \/* Render the detail view for this data item *\/\n    renderTemplate( \"#personDetail\", \"#detailTemplate\", tmplItem.data );\n}\n\n$(\"#addBtn\").click( function () {\n    \/* Add a new item to the data array *\/\n    people.push( { firstName: \"first\", lastName: \"last\" } );\n\n    \/* Render the template with the new data *\/\n    renderTemplate( \"#peopleList\", \"#listItemTemplate\", people );\n\n    \/* Find the added template item *\/\n    var addedTmplItem = $(\"#peopleList tr:last\").tmplItem();\n    \n    \/* Set selection on the added item *\/\n    select ( addedTmplItem );\n});\n\n$(\"#peopleList\")\n    .delegate( \"tr\", \"click\", function () {\n        \/* Set selection on the clicked item *\/\n        select ( $.tmplItem(this) );\n    });\n\n$(\"#personDetail\")\n    .delegate( \"input\", \"change\", function () {\n        \/* Set the data to the modified value *\/\n        $.tmplItem(this).data[ this.name ] = this.value;\n        \n        \/* Render the list, to show the updated data *\/ \n        renderTemplate( \"#peopleList\", \"#listItemTemplate\", people );\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/tmpl\/","title":"tmpl","description":"\n\n.tmpl(  [data]  [, options]  ) Returns: jQuery\n\n\nDescription: Take the first element in the matched set and render its content as a template, using the specified data.\n\n.tmpl(  [data] [, options] )\ndataThe data to render. This can be any JavaScript type, including Array or Object.\noptionsAn optional map of user-defined key-value pairs. Extends the tmplItem data structure, available to the template during rendering.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nThe .tmpl() method is designed for chaining with .appendTo, .prependTo, .insertAfter or .insertBefore as in the following example.\nExample:\n$( \"#myTemplate\" ).tmpl( myData ).appendTo( \"#target\" );\n\nIf data is an array, the template is rendered once for each data item in the array. If data is an object, or if the data parameter is missing or null, a single template item is rendered.\n\n\nThe return value is a jQuery collection of elements made up of the rendered template items (one for each data item in the array). If the template contains only one top-level element, then there will be one element for each data item in the array.\n\n\nTo insert the rendered template items into the HTML DOM, the returned jQuery collection should not be inserted directly into the DOM, but should be chained with .appendTo, .prependTo, .insertAfter or .insertBefore, as in the example above:\n\nSee also jQuery.tmpl().\nThe following example shows how to use .tmpl() to render local data using an inline template.\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\n&lt;\/script&gt;\n\n&lt;script type=\"text\/javascript\"&gt;\n    var movies = [\n        { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n        { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n        { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n    ];\n\n    \/\/ Render the template with the movies data and insert\n    \/\/ the rendered HTML under the \"movieList\" element\n    $( \"#movieTemplate\" ).tmpl( movies )\n        .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\nUsing Remote Data\n\nTypically the data is not local and is instead obtained using an Ajax request to a remote service or page, as in the following example: \n\n\n$.ajax({\n    dataType: \"jsonp\",\n    url: moviesServiceUrl,\n    jsonp: \"$callback\",\n    success: showMovies\n});\n\n\/\/ Within the callback, use .tmpl() to render the data.\nfunction showMovies( data ) {\n    \/\/ Render the template with the \"movies\" data and insert\n    \/\/ the rendered HTML under the 'movieList' element\n    $( \"#movieTemplate\" ).tmpl( data )\n        .appendTo( \"#movieList\" );\n}\n\nThe Container Element for the Template\n\nYou can get the markup for the template from inline markup in the page, or from a string (possibly computed, or obtained remotely). For an example of how to get the markup from a string, see jQuery.tmpl(). \n\n\nIf a template is defined inline in the page, you can use  $( selector ).tmpl( data ), where selector is a selector referencing the container element that wraps the markup. The container can be any element, such as a &lt;div&gt; element whose style attribute includes display:none. However, this can result in invalid HTML or lead to side effects as a result of the browser parsing the markup and loading it into the DOM. Therefore, a preferred approach is to use a script tag such as &lt;script id=\"myContainer\" type=\"text\/x-jquery-tmpl\"&gt; to wrap the markup. For the browser, the content will then be treated simply as text.  \n\nCaching the Template\n\nWhen a template is rendered, the markup is first converted into a compiled-template function. In the case of inline markup, calling $( \"#myContainer\" ).tmpl( myData ) automatically causes the compiled template to be cached. (The cached template is associated with the DOM element that wraps the markup, using the jQuery .data() feature). \n\n\nFor convenience, you can also use $( \"#myContainer\" ).template( name ) so that you can reference the cached template by name. (See .template() for examples).\n\nTemplate Tags, Expressions, and Template Variables\nTemplate tags such as the ${} tag can used within jQuery templates in addition to text and HTML markup to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. Template tags can render content based on the values of data item fields or template variables such as $item (corresponding to the template item), as well as expressions and function calls. See the documentation topics for each template tag: ${}, {{each}}, {{if}}, {{else}}, {{html}}, {{tmpl}} and {{wrap}}. \nThe options Parameter, and Template Items\nEach template item (the result of rendering a data item with the template) is associated with a tmplItem data structure, which can be accessed using jQuery.tmplItem() and .tmplItem(), or the $item template variable. Any fields or anonomyous methods passed in with the options parameter of .tmpl() will extend the tmplItem data structure, and so be available to the template as in the following example:\nCode:\n\n\/\/ Render the template with the movies data\n$( \"#movieTemplate\" ).tmpl( movies,\n    { \n        myValue: \"somevalue\",\n        myMethod: function() { \n            return \"something\";\n        } \n    } \n).appendTo( \"#movieList\" );\n\nTemplate:\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;\n        Some content: ${$item.myMethod()}.&lt;br\/&gt;\n        More content: ${$item.myValue}.\n    &lt;\/li&gt;\n&lt;\/script&gt; \n\n\nAdditional Notes:Netflix recently changed the API that we use in the remote service example below. We are aware that this change breaks the demo and will work on an update as soon as we can.A new template plugin fully supported by the jQuery Team is now being developed as part of jQuery UI. More details on the history of this decision can be found on the jQuery blog. Track progress and participate in the design on the jQuery UI Planning Wiki.\r\nExamples:\n\n\nExample: Render local data using .tmpl().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nvar movies = [\n    { Name: \"The Red Violin\", ReleaseYear: \"1998\" },\n    { Name: \"Eyes Wide Shut\", ReleaseYear: \"1999\" },\n    { Name: \"The Inheritance\", ReleaseYear: \"1976\" }\n];\n\n\/* Render the template with the movies data and insert\n   the rendered HTML under the \"movieList\" element *\/\n$( \"#movieTemplate\" ).tmpl( movies )\n    .appendTo( \"#movieList\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\nExample: Render data from a remote service using .tmpl().\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;li&gt;&lt;b&gt;${Name}&lt;\/b&gt; (${ReleaseYear})&lt;\/li&gt;\n&lt;\/tmpl&gt;\n\n&lt;button id=\"cartoonsBtn\"&gt;Cartoons&lt;\/button&gt;\n&lt;button id=\"dramaBtn\"&gt;Drama&lt;\/button&gt;\n\n&lt;ul id=\"movieList\"&gt;&lt;\/ul&gt;\n\n&lt;script&gt;\nfunction getMovies( genre, skip, top ) {\n    $.ajax({\n        dataType: \"jsonp\",\n        url: \"http:\/\/odata.netflix.com\/Catalog\/Genres('\" + genre\n            + \"')\/Titles?$format=json&amp;$skip=\"\n            + skip + \"&amp;$top=\" + top,\n        jsonp: \"$callback\",\n        success: function( data ) {\n            \/* Get the movies array from the data *\/\n            var movies = data.d;\n                    \n            \/* Remove current set of movie template items *\/\n            $( \"#movieList\" ).empty();\n            \n            \/* Render the template with the movies data and insert\n               the rendered HTML under the \"movieList\" element *\/\n            $( \"#movieTemplate\" ).tmpl( movies )\n                .appendTo( \"#movieList\" );\n        }\n    });\n}\n\n$( \"#cartoonsBtn\" ).click( function() {\n    getMovies( \"Cartoons\", 0, 6 );\n});\n\n$( \"#dramaBtn\" ).click( function() {\n    getMovies( \"Drama\", 0, 6 );\n});\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/template-tag-html\/","title":"{{html}} Template Tag","description":"\n\n{{html fieldNameOrExpression}} \n\n\nDescription: Used for insertion of HTML markup strings in the rendered template. Evaluates the specified field on the current data item, or the specified JavaScript function or expression.\n\n\nversion added: 1.4.3{{html fieldNameOrExpression}}\nfieldNameOrExpressionThe name of a field on the current data item, or a JavaScript function or expression, returning HTML markup.\n\nThis documentation topic concerns the  jQuery Templates plugin (jquery-tmpl), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-tmpl.\n\nNote: For information about how to render templates, see .tmpl() and jQuery.tmpl().\n\nTemplate Tags\nTemplate tags such as the {{html}} tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. \n\n\nOther available tags include: ${}, {{each}}, {{if}}, {{else}}, {{tmpl}} and {{wrap}}. User-defined template tags can also be specified, by extending the jQuery.tmpl.tag map.\nUsing the {{html}} Template Tag\n\nThe following example shows how to use {{html}} to insert markup from the Synopsis field of the data item into the rendered template.\n\n&lt;script id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt;\n    &lt;h4&gt;${Name}&lt;\/h4&gt;\n    &lt;p&gt;{{html Synopsis}}&lt;\/p&gt;\n&lt;\/script&gt;\n\nHTML encoding\n\nUsing {{html fieldNameOrExpression}} is equivalent to using ${fieldNameOrExpression}, except that it renders unencoded text into the HTML DOM, whereas ${} encodes values by default. \n\nEvaluating Expressions and Functions, Using Template Variables\n\n{{html expression}} can be used in a similar way to ${expression}, to render markup returned by an expression or a function call, as in the following example:\nTemplate:\n\n&lt;p&gt;{{html $item.getSynopsis(true)}&lt;\/p&gt;\n\nCode:\n\n\/\/ Render the template with the movie data\n$( \"#movieTemplate\" ).tmpl( movie, { \n    getSynopsis: function( short ) {\n        \/\/return short or long synopsis\n        \/\/...\n    }\n}).appendTo( \"#movieContainer\" );\n\n\nSee ${} for more detailed documentation and examples of using template tags in association with expression evaluation, function calls, template variables, etc. \n\n\nExample:\n\nUsing {{html}} to insert markup from data.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n.role {font-weight:bold;font-style: italic;} #movieContainer {padding-left: 8px;}\n&lt;\/style&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/ajax.microsoft.com\/ajax\/jquery.templates\/beta1\/jquery.tmpl.min.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;tmpl id=\"movieTemplate\" type=\"text\/x-jquery-tmpl\"&gt; \n    &lt;h4&gt;${Name}&lt;\/h4&gt;\n    &lt;p&gt;{{html Synopsis}}&lt;\/p&gt;\n&lt;\/tmpl&gt;\n\n&lt;div id=\"movieContainer\"&gt;&lt;\/div&gt;\n\n&lt;script&gt;\n\/* The Synopsis data field contains HTML markup. *\/\nvar movie = { \n    Name: \"Meet Joe Black\", \n    Synopsis: \"The &lt;span class='role'&gt;grim reaper&lt;\/span&gt; (&lt;a href='http:\/\/www.netflix.com\/RoleDisplay\/Brad_Pitt\/73919'&gt;Brad Pitt&lt;\/a&gt;) visits &lt;span class='role'&gt;Bill Parrish&lt;\/span&gt; (&lt;a href='http:\/\/www.netflix.com\/RoleDisplay\/Anthony_Hopkins\/43014'&gt;Anthony Hopkins&lt;\/a&gt;)...\"\n};\n\n\/* Render the template with the movie data.\n   The template uses the {{html}} template tag\n   to  insert the Synopsis HTML markup data. *\/\n$( \"#movieTemplate\" ).tmpl( movie )\n    .appendTo( \"#movieContainer\" );\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"},{"url":"http:\/\/api.jquery.com\/unlink\/","title":"unlink","description":"\n\n.unlink( target ) Returns: jQuery\n\n\nDescription: Remove a previously created link.\n\n\nversion added: 1.4.3.unlink( target )\ntargetAn object to unlink.\n\nThis documentation topic concerns the  jQuery Datalink plugin (jquery-datalink), which can be downloaded from: http:\/\/github.com\/jquery\/jquery-datalink. \n\nLinks created with .link() can be removed with .unlink().\n\nvar person = {};\n$(\"form\").link(person);\n$(\"[name=firstName]\").val(\"aValue\");\nperson.firstName; \/\/ aValue\n$(\"form\").unlink(person);\n$(\"[name=firstName]\").val(\"aNewValue\");\nperson.firstName; \/\/ still \"aValue\"\n\nIf the original link matched multiple elements, .unlink() may also be used to remove the link on a subset of the elements. The following example shows how to link all input elements to an object, and then how to unlink input elements that have a specified CSS class:\n\nvar person = {};\n$(\"input\").link(person);\n$(\".nolink\").unlink(person);\n\n\n.unlink() can unlink elements that were part of the original link, but note that .link() also responds to bubbled-up change events from the selected elements' descendants. .unlink() will only unlink elements that were explicitly matched by the original link, not descendants of those elements.\n\n\nExample:\n\nLink all input elements of a form to an object, then remove the link.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http:\/\/code.jquery.com\/jquery-latest.min.js\"&gt;&lt;\/script&gt;\n  &lt;script src=\"http:\/\/github.com\/jquery\/jquery-datalink\/raw\/master\/jquery.datalink.js\"&gt;&lt;\/script&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n  \n&lt;form&gt;\n    &lt;div&gt;\n        First Name:\n        &lt;input type=\"text\" name=\"firstName\" \/&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n        Last Name:\n        &lt;input type=\"text\" name=\"lastName\" \/&gt;\n    &lt;\/div&gt;\n    &lt;div&gt;\n        &lt;input id=\"unlink\" type=\"button\" value=\"unlink\" \/&gt;\n    &lt;\/div&gt;\n&lt;\/form&gt;\nObject.firstName: &lt;span id=\"objFirst\"&gt;&lt;\/span&gt;&lt;br\/&gt;\nObject.lastName &lt;span id=\"objLast\"&gt;&lt;\/span&gt;\n\n&lt;script&gt;\n    var person = { };\n    $(\"form\").link(person);\n\n    \/\/ Chain link the person object to these elements to show the results\n    $(\"#objFirst\").link(person, {\n        firstName: {\n            name: \"objFirst\",\n            convertBack: function(value, source, target) {\n                $(target).text(value);\n            }\n        }\n    });\n    $(\"#objLast\").link(person, {\n        lastName: {\n            name: \"objLast\",\n            convertBack: function(value, source, target) {\n                $(target).text(value);\n            }\n        }\n    });\n\n    \/\/ remove link\n    $(\"#unlink\").click(function() {\n        $(\"form\").unlink(person);\n    });\n&lt;\/script&gt;\n\n&lt;\/body&gt;\n&lt;\/html&gt;\nDemo:\n\n\n\n"}]