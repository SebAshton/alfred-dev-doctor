[{"url":"http:\/\/nodejs.org\/api\/all.html#all_global","title":"global","description":"<p>In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope <code>var something<\/code> will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; <code>var something<\/code> inside a Node module will be local to that module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"<p>The process object. See the [process object][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"<p>Used to print to stdout and stderr. See the [stdio][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_buffer","title":"Class: Buffer","description":"<p>Used to handle binary data. See the [buffer section][]\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_t","title":"clearInterval(t)","description":"<p>Stop a timer that was previously created with <code>setInterval()<\/code>. The callback\nwill not execute.\n\n<\/p>\n<p>The timer functions are global variables. See the [timers][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"<p>For printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_log_data","title":"console.log([data], [...])","description":"<p>Prints to stdout with newline. This function can take multiple arguments in a\n<code>printf()<\/code>-like way. Example:\n\n<\/p>\n<pre><code>console.log(&#39;count: %d&#39;, count);<\/code><\/pre>\n<p>If formatting elements are not found in the first string then <code>util.inspect<\/code>\nis used on each argument.  See [util.format()][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_info_data","title":"console.info([data], [...])","description":"<p>Same as <code>console.log<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_error_data","title":"console.error([data], [...])","description":"<p>Same as <code>console.log<\/code> but prints to stderr.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_warn_data","title":"console.warn([data], [...])","description":"<p>Same as <code>console.error<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_dir_obj","title":"console.dir(obj)","description":"<p>Uses <code>util.inspect<\/code> on <code>obj<\/code> and prints resulting string to stdout.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_time_label","title":"console.time(label)","description":"<p>Mark a time.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_timeend_label","title":"console.timeEnd(label)","description":"<p>Finish timer, record output. Example:\n\n<\/p>\n<pre><code>console.time(&#39;100-elements&#39;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&#39;100-elements&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_trace_label","title":"console.trace(label)","description":"<p>Print a stack trace to stderr of the current position.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_assert_expression_message","title":"console.assert(expression, [message])","description":"<p>Same as [assert.ok()][] where if the <code>expression<\/code> evaluates as <code>false<\/code> throw an\nAssertionError with <code>message<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"<p>The <code>process<\/code> object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_abort","title":"process.abort()","description":"<p>This causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_chdir_directory","title":"process.chdir(directory)","description":"<p>Changes the current working directory of the process or throws an exception if that fails.\n\n<\/p>\n<pre><code>console.log(&#39;Starting directory: &#39; + process.cwd());\ntry {\n  process.chdir(&#39;\/tmp&#39;);\n  console.log(&#39;New directory: &#39; + process.cwd());\n}\ncatch (err) {\n  console.log(&#39;chdir: &#39; + err);\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cwd","title":"process.cwd()","description":"<p>Returns the current working directory of the process.\n\n<\/p>\n<pre><code>console.log(&#39;Current directory: &#39; + process.cwd());<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_exit_code","title":"process.exit([code])","description":"<p>Ends the process with the specified <code>code<\/code>.  If omitted, exit uses the\n&#39;success&#39; code <code>0<\/code>.\n\n<\/p>\n<p>To exit with a &#39;failure&#39; code:\n\n<\/p>\n<pre><code>process.exit(1);<\/code><\/pre>\n<p>The shell that executed node should see the exit code as 1.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgid","title":"process.getgid()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Gets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n\n<\/p>\n<pre><code>if (process.getgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgid_id","title":"process.setgid(id)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n\n<\/p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&#39;New gid: &#39; + process.getgid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set gid: &#39; + err);\n  }\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getuid","title":"process.getuid()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Gets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n\n<\/p>\n<pre><code>if (process.getuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuid_id","title":"process.setuid(id)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n\n<\/p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&#39;New uid: &#39; + process.getuid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set uid: &#39; + err);\n  }\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgroups","title":"process.getgroups()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Returns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgroups_groups","title":"process.setgroups(groups)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n\n<\/p>\n<p>The list can contain group IDs, group names or both.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_initgroups_user_extra_group","title":"process.initgroups(user, extra_group)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Reads \/etc\/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n\n<\/p>\n<p><code>user<\/code> is a user name or user ID. <code>extra_group<\/code> is a group name or group ID.\n\n<\/p>\n<p>Some care needs to be taken when dropping privileges. Example:\n\n<\/p>\n<pre><code>console.log(process.getgroups());         \/\/ [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   \/\/ switch user\nconsole.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     \/\/ drop root gid\nconsole.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000 ]<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_kill_pid_signal","title":"process.kill(pid, [signal])","description":"<p>Send a signal to a process. <code>pid<\/code> is the process id and <code>signal<\/code> is the\nstring describing the signal to send.  Signal names are strings like\n&#39;SIGINT&#39; or &#39;SIGUSR1&#39;.  If omitted, the signal will be &#39;SIGTERM&#39;.\nSee kill(2) for more information.\n\n<\/p>\n<p>Note that just because the name of this function is <code>process.kill<\/code>, it is\nreally just a signal sender, like the <code>kill<\/code> system call.  The signal sent\nmay do something other than kill the target process.\n\n<\/p>\n<p>Example of sending a signal to yourself:\n\n<\/p>\n<pre><code>process.on(&#39;SIGHUP&#39;, function() {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(function() {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_memoryusage","title":"process.memoryUsage()","description":"<p>Returns an object describing the memory usage of the Node process\nmeasured in bytes.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(process.memoryUsage()));<\/code><\/pre>\n<p>This will generate:\n\n<\/p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }<\/code><\/pre>\n<p><code>heapTotal<\/code> and <code>heapUsed<\/code> refer to V8&#39;s memory usage.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_nexttick_callback","title":"process.nextTick(callback)","description":"<p>On the next loop around the event loop call this callback.\nThis is <em>not<\/em> a simple alias to <code>setTimeout(fn, 0)<\/code>, it&#39;s much more\nefficient.  It typically runs before any other I\/O events fire, but there\nare some exceptions.  See <code>process.maxTickDepth<\/code> below.\n\n<\/p>\n<pre><code>process.nextTick(function() {\n  console.log(&#39;nextTick callback&#39;);\n});<\/code><\/pre>\n<p>This is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I\/O has occurred.\n\n<\/p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n\/\/ thing.startDoingStuff() gets called now, not before.<\/code><\/pre>\n<p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n\n<\/p>\n<pre><code>\/\/ WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}<\/code><\/pre>\n<p>This API is hazardous.  If you do this:\n\n<\/p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();<\/code><\/pre>\n<p>then it&#39;s not clear whether <code>foo()<\/code> or <code>bar()<\/code> will be called first.\n\n<\/p>\n<p>This approach is much better:\n\n<\/p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_umask_mask","title":"process.umask([mask])","description":"<p>Sets or reads the process&#39;s file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if <code>mask<\/code> argument is\ngiven, otherwise returns the current mask.\n\n<\/p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&#39;Changed umask from: &#39; + oldmask.toString(8) +\n            &#39; to &#39; + newmask.toString(8));<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_uptime","title":"process.uptime()","description":"<p>Number of seconds Node has been running.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hrtime","title":"process.hrtime()","description":"<p>Returns the current high-resolution real time in a <code>[seconds, nanoseconds]<\/code>\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\n<\/p>\n<p>You may pass in the result of a previous call to <code>process.hrtime()<\/code> to get\na diff reading, useful for benchmarks and measuring intervals:\n\n<\/p>\n<pre><code>var time = process.hrtime();\n\/\/ [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  \/\/ [ 1, 552 ]\n\n  console.log(&#39;benchmark took %d nanoseconds&#39;, diff[0] * 1e9 + diff[1]);\n  \/\/ benchmark took 1000000527 nanoseconds\n}, 1000);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_cb_ms","title":"setTimeout(cb, ms)","description":"<p>Run callback <code>cb<\/code> after <em>at least<\/em> <code>ms<\/code> milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n\n<\/p>\n<p>The timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it&#39;s changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n\n<\/p>\n<p>Returns an opaque value that represents the timer.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_t","title":"clearTimeout(t)","description":"<p>Stop a timer that was previously created with <code>setTimeout()<\/code>. The callback will\nnot execute.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_cb_ms","title":"setInterval(cb, ms)","description":"<p>Run callback <code>cb<\/code> repeatedly every <code>ms<\/code> milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It&#39;s never less than <code>ms<\/code> but it may be longer.\n\n<\/p>\n<p>The interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it&#39;s changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n\n<\/p>\n<p>Returns an opaque value that represents the timer.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_about_this_documentation","title":"About this Documentation","description":"<p>The goal of this documentation is to comprehensively explain the Node.js\nAPI, both from a reference as well as a conceptual point of view.  Each\nsection describes a built-in module or high-level concept.\n\n<\/p>\n<p>Where appropriate, property types, method arguments, and the arguments\nprovided to event handlers are detailed in a list underneath the topic\nheading.\n\n<\/p>\n<p>Every <code>.html<\/code> document has a corresponding <code>.json<\/code> document presenting\nthe same information in a structured manner.  This feature is\nexperimental, and added for the benefit of IDEs and other utilities that\nwish to do programmatic things with the documentation.\n\n<\/p>\n<p>Every <code>.html<\/code> and <code>.json<\/code> file is generated based on the corresponding\n<code>.markdown<\/code> file in the <code>doc\/api\/<\/code> folder in node&#39;s source tree.  The\ndocumentation is generated using the <code>tools\/doc\/generate.js<\/code> program.\nThe HTML template is located at <code>doc\/template.html<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stability_index","title":"Stability Index","description":"<p>Throughout the documentation, you will see indications of a section&#39;s\nstability.  The Node.js API is still somewhat changing, and as it\nmatures, certain parts are more reliable than others.  Some are so\nproven, and so relied upon, that they are unlikely to ever change at\nall.  Others are brand new and experimental, or known to be hazardous\nand in the process of being redesigned.\n\n<\/p>\n<p>The stability indices are as follows:\n\n<\/p>\n<pre><code>Stability: 0 - Deprecated\nThis feature is known to be problematic, and changes are\nplanned.  Do not rely on it.  Use of the feature may cause warnings.  Backwards\ncompatibility should not be expected.<\/code><\/pre>\n<pre><code>Stability: 1 - Experimental\nThis feature was introduced recently, and may change\nor be removed in future versions.  Please try it out and provide feedback.\nIf it addresses a use-case that is important to you, tell the node core team.<\/code><\/pre>\n<pre><code>Stability: 2 - Unstable\nThe API is in the process of settling, but has not yet had\nsufficient real-world testing to be considered stable. Backwards-compatibility\nwill be maintained if reasonable.<\/code><\/pre>\n<pre><code>Stability: 3 - Stable\nThe API has proven satisfactory, but cleanup in the underlying\ncode may cause minor changes.  Backwards-compatibility is guaranteed.<\/code><\/pre>\n<pre><code>Stability: 4 - API Frozen\nThis API has been tested extensively in production and is\nunlikely to ever have to change.<\/code><\/pre>\n<pre><code>Stability: 5 - Locked\nUnless serious bugs are found, this code will not ever\nchange.  Please do not suggest changes in this area; they will be refused.<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_json_output","title":"JSON Output","description":"<p>Every HTML file in the markdown has a corresponding JSON file with the\nsame data.\n\n<\/p>\n<p>This feature is new as of node v0.6.12.  It is experimental.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_synopsis","title":"Synopsis","description":"<p>An example of a <a href=\"http.html\">web server<\/a> written with Node which responds with &#39;Hello\nWorld&#39;:\n\n<\/p>\n<pre><code>var http = require(&#39;http&#39;);\n\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {&#39;Content-Type&#39;: &#39;text\/plain&#39;});\n  response.end(&#39;Hello World\\n&#39;);\n}).listen(8124);\n\nconsole.log(&#39;Server running at http:\/\/127.0.0.1:8124\/&#39;);<\/code><\/pre>\n<p>To run the server, put the code into a file called <code>example.js<\/code> and execute\nit with the node program\n\n<\/p>\n<pre><code>&gt; node example.js\nServer running at http:\/\/127.0.0.1:8124\/<\/code><\/pre>\n<p>All of the examples in the documentation can be run similarly.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global_objects","title":"Global Objects","description":"<p>These objects are available in all modules. Some of these objects aren&#39;t\nactually in the global scope but in the module scope - this will be noted.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global","title":"global","description":"<p>In browsers, the top-level scope is the global scope. That means that in\nbrowsers if you&#39;re in the global scope <code>var something<\/code> will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; <code>var something<\/code> inside a Node module will be local to that module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"<p>The process object. See the [process object][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"<p>Used to print to stdout and stderr. See the [stdio][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_buffer","title":"Class: Buffer","description":"<p>Used to handle binary data. See the [buffer section][]\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_t","title":"clearInterval(t)","description":"<p>Stop a timer that was previously created with <code>setInterval()<\/code>. The callback\nwill not execute.\n\n<\/p>\n<p>The timer functions are global variables. See the [timers][] section.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"<p>For printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_log_data","title":"console.log([data], [...])","description":"<p>Prints to stdout with newline. This function can take multiple arguments in a\n<code>printf()<\/code>-like way. Example:\n\n<\/p>\n<pre><code>console.log(&#39;count: %d&#39;, count);<\/code><\/pre>\n<p>If formatting elements are not found in the first string then <code>util.inspect<\/code>\nis used on each argument.  See [util.format()][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_info_data","title":"console.info([data], [...])","description":"<p>Same as <code>console.log<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_error_data","title":"console.error([data], [...])","description":"<p>Same as <code>console.log<\/code> but prints to stderr.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_warn_data","title":"console.warn([data], [...])","description":"<p>Same as <code>console.error<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_dir_obj","title":"console.dir(obj)","description":"<p>Uses <code>util.inspect<\/code> on <code>obj<\/code> and prints resulting string to stdout.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_time_label","title":"console.time(label)","description":"<p>Mark a time.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_timeend_label","title":"console.timeEnd(label)","description":"<p>Finish timer, record output. Example:\n\n<\/p>\n<pre><code>console.time(&#39;100-elements&#39;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&#39;100-elements&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_trace_label","title":"console.trace(label)","description":"<p>Print a stack trace to stderr of the current position.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_assert_expression_message","title":"console.assert(expression, [message])","description":"<p>Same as [assert.ok()][] where if the <code>expression<\/code> evaluates as <code>false<\/code> throw an\nAssertionError with <code>message<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"<p>The <code>process<\/code> object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_abort","title":"process.abort()","description":"<p>This causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_chdir_directory","title":"process.chdir(directory)","description":"<p>Changes the current working directory of the process or throws an exception if that fails.\n\n<\/p>\n<pre><code>console.log(&#39;Starting directory: &#39; + process.cwd());\ntry {\n  process.chdir(&#39;\/tmp&#39;);\n  console.log(&#39;New directory: &#39; + process.cwd());\n}\ncatch (err) {\n  console.log(&#39;chdir: &#39; + err);\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cwd","title":"process.cwd()","description":"<p>Returns the current working directory of the process.\n\n<\/p>\n<pre><code>console.log(&#39;Current directory: &#39; + process.cwd());<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_exit_code","title":"process.exit([code])","description":"<p>Ends the process with the specified <code>code<\/code>.  If omitted, exit uses the\n&#39;success&#39; code <code>0<\/code>.\n\n<\/p>\n<p>To exit with a &#39;failure&#39; code:\n\n<\/p>\n<pre><code>process.exit(1);<\/code><\/pre>\n<p>The shell that executed node should see the exit code as 1.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgid","title":"process.getgid()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Gets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n\n<\/p>\n<pre><code>if (process.getgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgid_id","title":"process.setgid(id)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n\n<\/p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&#39;Current gid: &#39; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&#39;New gid: &#39; + process.getgid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set gid: &#39; + err);\n  }\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getuid","title":"process.getuid()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Gets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n\n<\/p>\n<pre><code>if (process.getuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuid_id","title":"process.setuid(id)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n\n<\/p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&#39;Current uid: &#39; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&#39;New uid: &#39; + process.getuid());\n  }\n  catch (err) {\n    console.log(&#39;Failed to set uid: &#39; + err);\n  }\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgroups","title":"process.getgroups()","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Returns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgroups_groups","title":"process.setgroups(groups)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Sets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n\n<\/p>\n<p>The list can contain group IDs, group names or both.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_initgroups_user_extra_group","title":"process.initgroups(user, extra_group)","description":"<p>Note: this function is only available on POSIX platforms (i.e. not Windows)\n\n<\/p>\n<p>Reads \/etc\/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n\n<\/p>\n<p><code>user<\/code> is a user name or user ID. <code>extra_group<\/code> is a group name or group ID.\n\n<\/p>\n<p>Some care needs to be taken when dropping privileges. Example:\n\n<\/p>\n<pre><code>console.log(process.getgroups());         \/\/ [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   \/\/ switch user\nconsole.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     \/\/ drop root gid\nconsole.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000 ]<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_kill_pid_signal","title":"process.kill(pid, [signal])","description":"<p>Send a signal to a process. <code>pid<\/code> is the process id and <code>signal<\/code> is the\nstring describing the signal to send.  Signal names are strings like\n&#39;SIGINT&#39; or &#39;SIGUSR1&#39;.  If omitted, the signal will be &#39;SIGTERM&#39;.\nSee kill(2) for more information.\n\n<\/p>\n<p>Note that just because the name of this function is <code>process.kill<\/code>, it is\nreally just a signal sender, like the <code>kill<\/code> system call.  The signal sent\nmay do something other than kill the target process.\n\n<\/p>\n<p>Example of sending a signal to yourself:\n\n<\/p>\n<pre><code>process.on(&#39;SIGHUP&#39;, function() {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(function() {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_memoryusage","title":"process.memoryUsage()","description":"<p>Returns an object describing the memory usage of the Node process\nmeasured in bytes.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(process.memoryUsage()));<\/code><\/pre>\n<p>This will generate:\n\n<\/p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }<\/code><\/pre>\n<p><code>heapTotal<\/code> and <code>heapUsed<\/code> refer to V8&#39;s memory usage.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_nexttick_callback","title":"process.nextTick(callback)","description":"<p>On the next loop around the event loop call this callback.\nThis is <em>not<\/em> a simple alias to <code>setTimeout(fn, 0)<\/code>, it&#39;s much more\nefficient.  It typically runs before any other I\/O events fire, but there\nare some exceptions.  See <code>process.maxTickDepth<\/code> below.\n\n<\/p>\n<pre><code>process.nextTick(function() {\n  console.log(&#39;nextTick callback&#39;);\n});<\/code><\/pre>\n<p>This is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I\/O has occurred.\n\n<\/p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n\/\/ thing.startDoingStuff() gets called now, not before.<\/code><\/pre>\n<p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n\n<\/p>\n<pre><code>\/\/ WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}<\/code><\/pre>\n<p>This API is hazardous.  If you do this:\n\n<\/p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();<\/code><\/pre>\n<p>then it&#39;s not clear whether <code>foo()<\/code> or <code>bar()<\/code> will be called first.\n\n<\/p>\n<p>This approach is much better:\n\n<\/p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_umask_mask","title":"process.umask([mask])","description":"<p>Sets or reads the process&#39;s file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if <code>mask<\/code> argument is\ngiven, otherwise returns the current mask.\n\n<\/p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&#39;Changed umask from: &#39; + oldmask.toString(8) +\n            &#39; to &#39; + newmask.toString(8));<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_uptime","title":"process.uptime()","description":"<p>Number of seconds Node has been running.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hrtime","title":"process.hrtime()","description":"<p>Returns the current high-resolution real time in a <code>[seconds, nanoseconds]<\/code>\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\n<\/p>\n<p>You may pass in the result of a previous call to <code>process.hrtime()<\/code> to get\na diff reading, useful for benchmarks and measuring intervals:\n\n<\/p>\n<pre><code>var time = process.hrtime();\n\/\/ [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  \/\/ [ 1, 552 ]\n\n  console.log(&#39;benchmark took %d nanoseconds&#39;, diff[0] * 1e9 + diff[1]);\n  \/\/ benchmark took 1000000527 nanoseconds\n}, 1000);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_cb_ms","title":"setTimeout(cb, ms)","description":"<p>Run callback <code>cb<\/code> after <em>at least<\/em> <code>ms<\/code> milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n\n<\/p>\n<p>The timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it&#39;s changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n\n<\/p>\n<p>Returns an opaque value that represents the timer.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_t","title":"clearTimeout(t)","description":"<p>Stop a timer that was previously created with <code>setTimeout()<\/code>. The callback will\nnot execute.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_cb_ms","title":"setInterval(cb, ms)","description":"<p>Run callback <code>cb<\/code> repeatedly every <code>ms<\/code> milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It&#39;s never less than <code>ms<\/code> but it may be longer.\n\n<\/p>\n<p>The interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it&#39;s changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n\n<\/p>\n<p>Returns an opaque value that represents the timer.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require","title":"require()","description":"<p>To require modules. See the [Modules][] section.  <code>require<\/code> isn&#39;t actually a\nglobal but rather local to each module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require_resolve","title":"require.resolve()","description":"<p>Use the internal <code>require()<\/code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all__filename","title":"__filename","description":"<p>The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n\n<\/p>\n<p>Example: running <code>node example.js<\/code> from <code>\/Users\/mjr<\/code>\n\n<\/p>\n<pre><code>console.log(__filename);\n\/\/ \/Users\/mjr\/example.js<\/code><\/pre>\n<p><code>__filename<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all__dirname","title":"__dirname","description":"<p>The name of the directory that the currently executing script resides in.\n\n<\/p>\n<p>Example: running <code>node example.js<\/code> from <code>\/Users\/mjr<\/code>\n\n<\/p>\n<pre><code>console.log(__dirname);\n\/\/ \/Users\/mjr<\/code><\/pre>\n<p><code>__dirname<\/code> isn&#39;t actually a global but rather local to each module.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module","title":"module","description":"<p>A reference to the current module. In particular\n<code>module.exports<\/code> is the same as the <code>exports<\/code> object.\n<code>module<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n<p>See the [module system documentation][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exports","title":"exports","description":"<p>An object which is shared between all instances of the current module and\nmade accessible through <code>require()<\/code>.\n<code>exports<\/code> is the same as the <code>module.exports<\/code> object.\n<code>exports<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n<p>See the [module system documentation][] for more information.\n\n<\/p>\n<p>See the [module section][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_debugger","title":"Debugger","description":"<p>V8 comes with an extensive debugger which is accessible out-of-process via a\nsimple <a href=\"http:\/\/code.google.com\/p\/v8\/wiki\/DebuggerProtocol\">TCP protocol<\/a>.\nNode has a built-in client for this debugger. To use this, start Node with the\n<code>debug<\/code> argument; a prompt will appear:\n\n<\/p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in \/home\/indutny\/Code\/git\/indutny\/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt;<\/code><\/pre>\n<p>Node&#39;s debugger client doesn&#39;t support the full range of commands, but\nsimple step and inspection is possible. By putting the statement <code>debugger;<\/code>\ninto the source code of your script, you will enable a breakpoint.\n\n<\/p>\n<p>For example, suppose <code>myscript.js<\/code> looked like this:\n\n<\/p>\n<pre><code>\/\/ myscript.js\nx = 5;\nsetTimeout(function () {\n  debugger;\n  console.log(&quot;world&quot;);\n}, 1000);\nconsole.log(&quot;hello&quot;);<\/code><\/pre>\n<p>Then once the debugger is run, it will break on line 4.\n\n<\/p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in \/home\/indutny\/Code\/git\/indutny\/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in \/home\/indutny\/Code\/git\/indutny\/myscript.js:3\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\ndebug&gt; next\nbreak in \/home\/indutny\/Code\/git\/indutny\/myscript.js:4\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in \/home\/indutny\/Code\/git\/indutny\/myscript.js:5\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\n  7\ndebug&gt; quit\n%<\/code><\/pre>\n<p>The <code>repl<\/code> command allows you to evaluate code remotely. The <code>next<\/code> command\nsteps over to the next line. There are a few other commands available and more\nto come. Type <code>help<\/code> to see others.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_watchers","title":"Watchers","description":"<p>You can watch expression and variable values while debugging your code.\nOn every breakpoint each expression from the watchers list will be evaluated\nin the current context and displayed just before the breakpoint&#39;s source code\nlisting.\n\n<\/p>\n<p>To start watching an expression, type <code>watch(&quot;my_expression&quot;)<\/code>. <code>watchers<\/code>\nprints the active watchers. To remove a watcher, type\n<code>unwatch(&quot;my_expression&quot;)<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_commands_reference","title":"Commands reference","description":null},{"url":"http:\/\/nodejs.org\/api\/all.html#all_execution_control","title":"Execution control","description":null},{"url":"http:\/\/nodejs.org\/api\/all.html#all_various","title":"Various","description":null},{"url":"http:\/\/nodejs.org\/api\/all.html#all_advanced_usage","title":"Advanced Usage","description":"<p>The V8 debugger can be enabled and accessed either by starting Node with\nthe <code>--debug<\/code> command-line flag or by signaling an existing Node process\nwith <code>SIGUSR1<\/code>.\n\n<\/p>\n<p>Once a process has been set in debug mode with this it can be connected to\nwith the node debugger. Either connect to the <code>pid<\/code> or the URI to the debugger.\nThe syntax is:\n\n<\/p>\n<ul>\n<li><code>node debug -p &lt;pid&gt;<\/code> - Connects to the process via the <code>pid<\/code><\/li>\n<li>`node debug <URI> - Connects to the process via the URI such as localhost:5858<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require","title":"require()","description":"<p>To require modules. See the [Modules][] section.  <code>require<\/code> isn&#39;t actually a\nglobal but rather local to each module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require_resolve","title":"require.resolve()","description":"<p>Use the internal <code>require()<\/code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all__filename","title":"__filename","description":"<p>The filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n\n<\/p>\n<p>Example: running <code>node example.js<\/code> from <code>\/Users\/mjr<\/code>\n\n<\/p>\n<pre><code>console.log(__filename);\n\/\/ \/Users\/mjr\/example.js<\/code><\/pre>\n<p><code>__filename<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all__dirname","title":"__dirname","description":"<p>The name of the directory that the currently executing script resides in.\n\n<\/p>\n<p>Example: running <code>node example.js<\/code> from <code>\/Users\/mjr<\/code>\n\n<\/p>\n<pre><code>console.log(__dirname);\n\/\/ \/Users\/mjr<\/code><\/pre>\n<p><code>__dirname<\/code> isn&#39;t actually a global but rather local to each module.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module","title":"module","description":"<p>A reference to the current module. In particular\n<code>module.exports<\/code> is the same as the <code>exports<\/code> object.\n<code>module<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n<p>See the [module system documentation][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exports","title":"exports","description":"<p>An object which is shared between all instances of the current module and\nmade accessible through <code>require()<\/code>.\n<code>exports<\/code> is the same as the <code>module.exports<\/code> object.\n<code>exports<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n<p>See the [module system documentation][] for more information.\n\n<\/p>\n<p>See the [module section][] for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_timers","title":"Timers","description":"<p>All of the timer functions are globals.  You do not need to <code>require()<\/code>\nthis module in order to use them.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_callback_delay_arg","title":"setTimeout(callback, delay, [arg], [...])","description":"<p>To schedule execution of a one-time <code>callback<\/code> after <code>delay<\/code> milliseconds. Returns a\n<code>timeoutId<\/code> for possible use with <code>clearTimeout()<\/code>. Optionally you can\nalso pass arguments to the callback.\n\n<\/p>\n<p>It is important to note that your callback will probably not be called in exactly\n<code>delay<\/code> milliseconds - Node.js makes no guarantees about the exact timing of when\nthe callback will fire, nor of the ordering things will fire in. The callback will\nbe called as close as possible to the time specified.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_timeoutid","title":"clearTimeout(timeoutId)","description":"<p>Prevents a timeout from triggering.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_callback_delay_arg","title":"setInterval(callback, delay, [arg], [...])","description":"<p>To schedule the repeated execution of <code>callback<\/code> every <code>delay<\/code> milliseconds.\nReturns a <code>intervalId<\/code> for possible use with <code>clearInterval()<\/code>. Optionally\nyou can also pass arguments to the callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_intervalid","title":"clearInterval(intervalId)","description":"<p>Stops a interval from triggering.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_unref","title":"unref()","description":"<p>The opaque value returned by <code>setTimeout<\/code> and <code>setInterval<\/code> also has the method\n<code>timer.unref()<\/code> which will allow you to create a timer that is active but if\nit is the only item left in the event loop won&#39;t keep the program running.\nIf the timer is already <code>unref<\/code>d calling <code>unref<\/code> again will have no effect.\n\n<\/p>\n<p>In the case of <code>setTimeout<\/code> when you <code>unref<\/code> you create a separate timer that\nwill wakeup the event loop, creating too many of these may adversely effect\nevent loop performance -- use wisely.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ref","title":"ref()","description":"<p>If you had previously <code>unref()<\/code>d a timer you can call <code>ref()<\/code> to explicitly\nrequest the timer hold the program open. If the timer is already <code>ref<\/code>d calling\n<code>ref<\/code> again will have no effect.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setimmediate_callback_arg","title":"setImmediate(callback, [arg], [...])","description":"<p>To schedule the &quot;immediate&quot; execution of <code>callback<\/code> after I\/O events\ncallbacks and before <code>setTimeout<\/code> and <code>setInterval<\/code> . Returns an\n<code>immediateId<\/code> for possible use with <code>clearImmediate()<\/code>. Optionally you\ncan also pass arguments to the callback.\n\n<\/p>\n<p>Immediates are queued in the order created, and are popped off the queue once\nper loop iteration. This is different from <code>process.nextTick<\/code> which will\nexecute <code>process.maxTickDepth<\/code> queued callbacks per iteration. <code>setImmediate<\/code>\nwill yield to the event loop after firing a queued callback to make sure I\/O is\nnot being starved. While order is preserved for execution, other I\/O events may\nfire between any two scheduled immediate callbacks.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearimmediate_immediateid","title":"clearImmediate(immediateId)","description":"<p>Stops an immediate from triggering.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_modules","title":"Modules","description":"<p>Node has a simple module loading system.  In Node, files and modules are in\none-to-one correspondence.  As an example, <code>foo.js<\/code> loads the module\n<code>circle.js<\/code> in the same directory.\n\n<\/p>\n<p>The contents of <code>foo.js<\/code>:\n\n<\/p>\n<pre><code>var circle = require(&#39;.\/circle.js&#39;);\nconsole.log( &#39;The area of a circle of radius 4 is &#39;\n           + circle.area(4));<\/code><\/pre>\n<p>The contents of <code>circle.js<\/code>:\n\n<\/p>\n<pre><code>var PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};<\/code><\/pre>\n<p>The module <code>circle.js<\/code> has exported the functions <code>area()<\/code> and\n<code>circumference()<\/code>.  To export an object, add to the special <code>exports<\/code>\nobject.\n\n<\/p>\n<p>Variables\nlocal to the module will be private. In this example the variable <code>PI<\/code> is\nprivate to <code>circle.js<\/code>.\n\n<\/p>\n<p>The module system is implemented in the <code>require(&quot;module&quot;)<\/code> module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cycles","title":"Cycles","description":"<p>When there are circular <code>require()<\/code> calls, a module might not be\ndone being executed when it is returned.\n\n<\/p>\n<p>Consider this situation:\n\n<\/p>\n<p><code>a.js<\/code>:\n\n<\/p>\n<pre><code>console.log(&#39;a starting&#39;);\nexports.done = false;\nvar b = require(&#39;.\/b.js&#39;);\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\nexports.done = true;\nconsole.log(&#39;a done&#39;);<\/code><\/pre>\n<p><code>b.js<\/code>:\n\n<\/p>\n<pre><code>console.log(&#39;b starting&#39;);\nexports.done = false;\nvar a = require(&#39;.\/a.js&#39;);\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\nexports.done = true;\nconsole.log(&#39;b done&#39;);<\/code><\/pre>\n<p><code>main.js<\/code>:\n\n<\/p>\n<pre><code>console.log(&#39;main starting&#39;);\nvar a = require(&#39;.\/a.js&#39;);\nvar b = require(&#39;.\/b.js&#39;);\nconsole.log(&#39;in main, a.done=%j, b.done=%j&#39;, a.done, b.done);<\/code><\/pre>\n<p>When <code>main.js<\/code> loads <code>a.js<\/code>, then <code>a.js<\/code> in turn loads <code>b.js<\/code>.  At that\npoint, <code>b.js<\/code> tries to load <code>a.js<\/code>.  In order to prevent an infinite\nloop an <strong>unfinished copy<\/strong> of the <code>a.js<\/code> exports object is returned to the\n<code>b.js<\/code> module.  <code>b.js<\/code> then finishes loading, and its exports object is\nprovided to the <code>a.js<\/code> module.\n\n<\/p>\n<p>By the time <code>main.js<\/code> has loaded both modules, they&#39;re both finished.\nThe output of this program would thus be:\n\n<\/p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true<\/code><\/pre>\n<p>If you have cyclic module dependencies in your program, make sure to\nplan accordingly.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_core_modules","title":"Core Modules","description":"<p>Node has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.\n\n<\/p>\n<p>The core modules are defined in node&#39;s source in the <code>lib\/<\/code> folder.\n\n<\/p>\n<p>Core modules are always preferentially loaded if their identifier is\npassed to <code>require()<\/code>.  For instance, <code>require(&#39;http&#39;)<\/code> will always\nreturn the built in HTTP module, even if there is a file by that name.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_modules","title":"File Modules","description":"<p>If the exact filename is not found, then node will attempt to load the\nrequired filename with the added extension of <code>.js<\/code>, <code>.json<\/code>, and then <code>.node<\/code>.\n\n<\/p>\n<p><code>.js<\/code> files are interpreted as JavaScript text files, and <code>.json<\/code> files are\nparsed as JSON text files. <code>.node<\/code> files are interpreted as compiled addon\nmodules loaded with <code>dlopen<\/code>.\n\n<\/p>\n<p>A module prefixed with <code>&#39;\/&#39;<\/code> is an absolute path to the file.  For\nexample, <code>require(&#39;\/home\/marco\/foo.js&#39;)<\/code> will load the file at\n<code>\/home\/marco\/foo.js<\/code>.\n\n<\/p>\n<p>A module prefixed with <code>&#39;.\/&#39;<\/code> is relative to the file calling <code>require()<\/code>.\nThat is, <code>circle.js<\/code> must be in the same directory as <code>foo.js<\/code> for\n<code>require(&#39;.\/circle&#39;)<\/code> to find it.\n\n<\/p>\n<p>Without a leading &#39;\/&#39; or &#39;.\/&#39; to indicate a file, the module is either a\n&quot;core module&quot; or is loaded from a <code>node_modules<\/code> folder.\n\n<\/p>\n<p>If the given path does not exist, <code>require()<\/code> will throw an Error with its\n<code>code<\/code> property set to <code>&#39;MODULE_NOT_FOUND&#39;<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loading_from_node_modules_folders","title":"Loading from `node_modules` Folders","description":"<p>If the module identifier passed to <code>require()<\/code> is not a native module,\nand does not begin with <code>&#39;\/&#39;<\/code>, <code>&#39;..\/&#39;<\/code>, or <code>&#39;.\/&#39;<\/code>, then node starts at the\nparent directory of the current module, and adds <code>\/node_modules<\/code>, and\nattempts to load the module from that location.\n\n<\/p>\n<p>If it is not found there, then it moves to the parent directory, and so\non, until the root of the tree is reached.\n\n<\/p>\n<p>For example, if the file at <code>&#39;\/home\/ry\/projects\/foo.js&#39;<\/code> called\n<code>require(&#39;bar.js&#39;)<\/code>, then node would look in the following locations, in\nthis order:\n\n<\/p>\n<ul>\n<li><code>\/home\/ry\/projects\/node_modules\/bar.js<\/code><\/li>\n<li><code>\/home\/ry\/node_modules\/bar.js<\/code><\/li>\n<li><code>\/home\/node_modules\/bar.js<\/code><\/li>\n<li><code>\/node_modules\/bar.js<\/code><\/li>\n<\/ul>\n<p>This allows programs to localize their dependencies, so that they do not\nclash.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_folders_as_modules","title":"Folders as Modules","description":"<p>It is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to <code>require()<\/code> as\nan argument.\n\n<\/p>\n<p>The first is to create a <code>package.json<\/code> file in the root of the folder,\nwhich specifies a <code>main<\/code> module.  An example package.json file might\nlook like this:\n\n<\/p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;.\/lib\/some-library.js&quot; }<\/code><\/pre>\n<p>If this was in a folder at <code>.\/some-library<\/code>, then\n<code>require(&#39;.\/some-library&#39;)<\/code> would attempt to load\n<code>.\/some-library\/lib\/some-library.js<\/code>.\n\n<\/p>\n<p>This is the extent of Node&#39;s awareness of package.json files.\n\n<\/p>\n<p>If there is no package.json file present in the directory, then node\nwill attempt to load an <code>index.js<\/code> or <code>index.node<\/code> file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then <code>require(&#39;.\/some-library&#39;)<\/code> would attempt to load:\n\n<\/p>\n<ul>\n<li><code>.\/some-library\/index.js<\/code><\/li>\n<li><code>.\/some-library\/index.node<\/code><\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_caching","title":"Caching","description":"<p>Modules are cached after the first time they are loaded.  This means\n(among other things) that every call to <code>require(&#39;foo&#39;)<\/code> will get\nexactly the same object returned, if it would resolve to the same file.\n\n<\/p>\n<p>Multiple calls to <code>require(&#39;foo&#39;)<\/code> may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n&quot;partially done&quot; objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.\n\n<\/p>\n<p>If you want to have a module execute code multiple times, then export a\nfunction, and call that function.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module_caching_caveats","title":"Module Caching Caveats","description":"<p>Modules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from <code>node_modules<\/code> folders), it is not a <em>guarantee<\/em>\nthat <code>require(&#39;foo&#39;)<\/code> will always return the exact same object, if it\nwould resolve to different files.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_all_together","title":"All Together...","description":"<p>To get the exact filename that will be loaded when <code>require()<\/code> is called, use\nthe <code>require.resolve()<\/code> function.\n\n<\/p>\n<p>Putting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:\n\n<\/p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &#39;.\/&#39; or &#39;\/&#39; or &#39;..\/&#39;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X\/package.json is a file,\n   a. Parse X\/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X\/index.js is a file, load X\/index.js as JavaScript text.  STOP\n3. If X\/index.node is a file, load X\/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR\/X)\n   b. LOAD_AS_DIRECTORY(DIR\/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let ROOT = index of first instance of &quot;node_modules&quot; in PARTS, or 0\n3. let I = count of PARTS - 1\n4. let DIRS = []\n5. while I &gt; ROOT,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n6. return DIRS<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loading_from_the_global_folders","title":"Loading from the global folders","description":"<p>If the <code>NODE_PATH<\/code> environment variable is set to a colon-delimited list\nof absolute paths, then node will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, <code>NODE_PATH<\/code> is delimited by\nsemicolons instead of colons.)\n\n<\/p>\n<p>Additionally, node will search in the following locations:\n\n<\/p>\n<ul>\n<li>1: <code>$HOME\/.node_modules<\/code><\/li>\n<li>2: <code>$HOME\/.node_libraries<\/code><\/li>\n<li>3: <code>$PREFIX\/lib\/node<\/code><\/li>\n<\/ul>\n<p>Where <code>$HOME<\/code> is the user&#39;s home directory, and <code>$PREFIX<\/code> is node&#39;s\nconfigured <code>node_prefix<\/code>.\n\n<\/p>\n<p>These are mostly for historic reasons.  You are highly encouraged to\nplace your dependencies locally in <code>node_modules<\/code> folders.  They will be\nloaded faster, and more reliably.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_accessing_the_main_module","title":"Accessing the main module","description":"<p>When a file is run directly from Node, <code>require.main<\/code> is set to its\n<code>module<\/code>. That means that you can determine whether a file has been run\ndirectly by testing\n\n<\/p>\n<pre><code>require.main === module<\/code><\/pre>\n<p>For a file <code>foo.js<\/code>, this will be <code>true<\/code> if run via <code>node foo.js<\/code>, but\n<code>false<\/code> if run by <code>require(&#39;.\/foo&#39;)<\/code>.\n\n<\/p>\n<p>Because <code>module<\/code> provides a <code>filename<\/code> property (normally equivalent to\n<code>__filename<\/code>), the entry point of the current application can be obtained\nby checking <code>require.main.filename<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_addenda_package_manager_tips","title":"Addenda: Package Manager Tips","description":"<p>The semantics of Node&#39;s <code>require()<\/code> function were designed to be general\nenough to support a number of sane directory structures. Package manager\nprograms such as <code>dpkg<\/code>, <code>rpm<\/code>, and <code>npm<\/code> will hopefully find it possible to\nbuild native packages from Node modules without modification.\n\n<\/p>\n<p>Below we give a suggested directory structure that could work:\n\n<\/p>\n<p>Let&#39;s say that we wanted to have the folder at\n<code>\/usr\/lib\/node\/&lt;some-package&gt;\/&lt;some-version&gt;<\/code> hold the contents of a\nspecific version of a package.\n\n<\/p>\n<p>Packages can depend on one another. In order to install package <code>foo<\/code>, you\nmay have to install a specific version of package <code>bar<\/code>.  The <code>bar<\/code> package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.\n\n<\/p>\n<p>Since Node looks up the <code>realpath<\/code> of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the\n<code>node_modules<\/code> folders as described above, this situation is very simple to\nresolve with the following architecture:\n\n<\/p>\n<ul>\n<li><code>\/usr\/lib\/node\/foo\/1.2.3\/<\/code> - Contents of the <code>foo<\/code> package, version 1.2.3.<\/li>\n<li><code>\/usr\/lib\/node\/bar\/4.3.2\/<\/code> - Contents of the <code>bar<\/code> package that <code>foo<\/code>\ndepends on.<\/li>\n<li><code>\/usr\/lib\/node\/foo\/1.2.3\/node_modules\/bar<\/code> - Symbolic link to\n<code>\/usr\/lib\/node\/bar\/4.3.2\/<\/code>.<\/li>\n<li><code>\/usr\/lib\/node\/bar\/4.3.2\/node_modules\/*<\/code> - Symbolic links to the packages\nthat <code>bar<\/code> depends on.<\/li>\n<\/ul>\n<p>Thus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.\n\n<\/p>\n<p>When the code in the <code>foo<\/code> package does <code>require(&#39;bar&#39;)<\/code>, it will get the\nversion that is symlinked into <code>\/usr\/lib\/node\/foo\/1.2.3\/node_modules\/bar<\/code>.\nThen, when the code in the <code>bar<\/code> package calls <code>require(&#39;quux&#39;)<\/code>, it&#39;ll get\nthe version that is symlinked into\n<code>\/usr\/lib\/node\/bar\/4.3.2\/node_modules\/quux<\/code>.\n\n<\/p>\n<p>Furthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in <code>\/usr\/lib\/node<\/code>, we could put them in\n<code>\/usr\/lib\/node_modules\/&lt;name&gt;\/&lt;version&gt;<\/code>.  Then node will not bother\nlooking for missing dependencies in <code>\/usr\/node_modules<\/code> or <code>\/node_modules<\/code>.\n\n<\/p>\n<p>In order to make modules available to the node REPL, it might be useful to\nalso add the <code>\/usr\/lib\/node_modules<\/code> folder to the <code>$NODE_PATH<\/code> environment\nvariable.  Since the module lookups using <code>node_modules<\/code> folders are all\nrelative, and based on the real path of the files making the calls to\n<code>require()<\/code>, the packages themselves can be anywhere.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_module_object","title":"The `module` Object","description":"<p>In each module, the <code>module<\/code> free variable is a reference to the object\nrepresenting the current module.  In particular\n<code>module.exports<\/code> is the same as the <code>exports<\/code> object.\n<code>module<\/code> isn&#39;t actually a global but rather local to each module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module_require_id","title":"module.require(id)","description":"<p>The <code>module.require<\/code> method provides a way to load a module as if\n<code>require()<\/code> was called from the original module.\n\n<\/p>\n<p>Note that in order to do this, you must get a reference to the <code>module<\/code>\nobject.  Since <code>require()<\/code> returns the <code>exports<\/code>, and the <code>module<\/code> is\ntypically <em>only<\/em> available within a specific module&#39;s code, it must be\nexplicitly exported in order to be used.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_addons","title":"Addons","description":"<p>Addons are dynamically linked shared objects. They can provide glue to C and\nC++ libraries. The API (at the moment) is rather complex, involving\nknowledge of several libraries:\n\n<\/p>\n<ul>\n<li><p>V8 JavaScript, a C++ library. Used for interfacing with JavaScript:\ncreating objects, calling functions, etc.  Documented mostly in the\n<code>v8.h<\/code> header file (<code>deps\/v8\/include\/v8.h<\/code> in the Node source\ntree), which is also available\n<a href=\"http:\/\/izs.me\/v8-docs\/main.html\">online<\/a>.<\/p>\n<\/li>\n<li><p><a href=\"https:\/\/github.com\/joyent\/libuv\">libuv<\/a>, C event loop library.\nAnytime one needs to wait for a file descriptor to become readable,\nwait for a timer, or wait for a signal to received one will need to\ninterface with libuv. That is, if you perform any I\/O, libuv will\nneed to be used.<\/p>\n<\/li>\n<li><p>Internal Node libraries. Most importantly is the <code>node::ObjectWrap<\/code>\nclass which you will likely want to derive from.<\/p>\n<\/li>\n<li><p>Others. Look in <code>deps\/<\/code> for what else is available.<\/p>\n<\/li>\n<\/ul>\n<p>Node statically compiles all its dependencies into the executable.\nWhen compiling your module, you don&#39;t need to worry about linking to\nany of these libraries.\n\n<\/p>\n<p>All of the following examples are available for\n<a href=\"https:\/\/github.com\/rvagg\/node-addon-examples\">download<\/a> and may be\nused as a starting-point for your own Addon.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_hello_world","title":"Hello world","description":"<p>To get started let&#39;s make a small Addon which is the C++ equivalent of\nthe following JavaScript code:\n\n<\/p>\n<pre><code>module.exports.hello = function() { return &#39;world&#39;; };<\/code><\/pre>\n<p>First we create a file <code>hello.cc<\/code>:\n\n<\/p>\n<pre><code>#include &lt;node.h&gt;\n#include &lt;v8.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Method(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;world&quot;));\n}\n\nvoid init(Handle&lt;Object&gt; exports) {\n  exports-&gt;Set(String::NewSymbol(&quot;hello&quot;),\n      FunctionTemplate::New(Method)-&gt;GetFunction());\n}\n\nNODE_MODULE(hello, init)<\/code><\/pre>\n<p>Note that all Node addons must export an initialization function:\n\n<\/p>\n<pre><code>void Initialize (Handle&lt;Object&gt; exports);\nNODE_MODULE(module_name, Initialize)<\/code><\/pre>\n<p>There is no semi-colon after <code>NODE_MODULE<\/code> as it&#39;s not a function (see <code>node.h<\/code>).\n\n<\/p>\n<p>The <code>module_name<\/code> needs to match the filename of the final binary (minus the\n.node suffix).\n\n<\/p>\n<p>The source code needs to be built into <code>hello.node<\/code>, the binary Addon. To\ndo this we create a file called <code>binding.gyp<\/code> which describes the configuration\nto build your module in a JSON-like format. This file gets compiled by\n<a href=\"https:\/\/github.com\/TooTallNate\/node-gyp\">node-gyp<\/a>.\n\n<\/p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;hello&quot;,\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ]\n    }\n  ]\n}<\/code><\/pre>\n<p>The next step is to generate the appropriate project build files for the\ncurrent platform. Use <code>node-gyp configure<\/code> for that.\n\n<\/p>\n<p>Now you will have either a <code>Makefile<\/code> (on Unix platforms) or a <code>vcxproj<\/code> file\n(on Windows) in the <code>build\/<\/code> directory. Next invoke the <code>node-gyp build<\/code>\ncommand.\n\n<\/p>\n<p>Now you have your compiled <code>.node<\/code> bindings file! The compiled bindings end up\nin <code>build\/Release\/<\/code>.\n\n<\/p>\n<p>You can now use the binary addon in a Node project <code>hello.js<\/code> by pointing <code>require<\/code> to\nthe recently built <code>hello.node<\/code> module:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/hello&#39;);\n\nconsole.log(addon.hello()); \/\/ &#39;world&#39;<\/code><\/pre>\n<p>Please see patterns below for further information or\n<\/p>\n<p><a href=\"https:\/\/github.com\/arturadib\/node-qt\">https:\/\/github.com\/arturadib\/node-qt<\/a> for an example in production.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_addon_patterns","title":"Addon patterns","description":"<p>Below are some addon patterns to help you get started. Consult the online\n<a href=\"http:\/\/izs.me\/v8-docs\/main.html\">v8 reference<\/a> for help with the various v8\ncalls, and v8&#39;s <a href=\"http:\/\/code.google.com\/apis\/v8\/embed.html\">Embedder&#39;s Guide<\/a>\nfor an explanation of several concepts used such as handles, scopes,\nfunction templates, etc.\n\n<\/p>\n<p>In order to use these examples you need to compile them using <code>node-gyp<\/code>.\nCreate the following <code>binding.gyp<\/code> file:\n\n<\/p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;addon.cc&quot; ]\n    }\n  ]\n}<\/code><\/pre>\n<p>In cases where there is more than one <code>.cc<\/code> file, simply add the file name to the\n<code>sources<\/code> array, e.g.:\n\n<\/p>\n<pre><code>&quot;sources&quot;: [&quot;addon.cc&quot;, &quot;myexample.cc&quot;]<\/code><\/pre>\n<p>Now that you have your <code>binding.gyp<\/code> ready, you can configure and build the\naddon:\n\n<\/p>\n<pre><code>$ node-gyp configure build<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_function_arguments","title":"Function arguments","description":"<p>The following pattern illustrates how to read arguments from JavaScript\nfunction calls and return a result. This is the main and only needed source\n<code>addon.cc<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.Length() &lt; 2) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong number of arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  Local&lt;Number&gt; num = Number::New(args[0]-&gt;NumberValue() +\n      args[1]-&gt;NumberValue());\n  return scope.Close(num);\n}\n\nvoid Init(Handle&lt;Object&gt; exports) {\n  exports-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)<\/code><\/pre>\n<p>You can test it with the following JavaScript snippet:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\nconsole.log( &#39;This should be eight:&#39;, addon.add(3,5) );<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_callbacks","title":"Callbacks","description":"<p>You can pass JavaScript functions to a C++ function and execute them from\nthere. Here&#39;s <code>addon.cc<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; RunCallback(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { Local&lt;Value&gt;::New(String::New(&quot;hello world&quot;)) };\n  cb-&gt;Call(Context::GetCurrent()-&gt;Global(), argc, argv);\n\n  return scope.Close(Undefined());\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(RunCallback)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)<\/code><\/pre>\n<p>Note that this example uses a two-argument form of <code>Init()<\/code> that receives\nthe full <code>module<\/code> object as the second argument. This allows the addon\nto completely overwrite <code>exports<\/code> with a single function instead of\nadding the function as a property of <code>exports<\/code>.\n\n<\/p>\n<p>To test it run the following JavaScript snippet:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\naddon(function(msg){\n  console.log(msg); \/\/ &#39;hello world&#39;\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_factory","title":"Object factory","description":"<p>You can create and return new objects from within a C++ function with this\n<code>addon.cc<\/code> pattern, which returns an object with property <code>msg<\/code> that echoes\nthe string passed to <code>createObject()<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Object&gt; obj = Object::New();\n  obj-&gt;Set(String::NewSymbol(&quot;msg&quot;), args[0]-&gt;ToString());\n\n  return scope.Close(obj);\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)<\/code><\/pre>\n<p>To test it in JavaScript:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\nvar obj1 = addon(&#39;hello&#39;);\nvar obj2 = addon(&#39;world&#39;);\nconsole.log(obj1.msg+&#39; &#39;+obj2.msg); \/\/ &#39;hello world&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_function_factory","title":"Function factory","description":"<p>This pattern illustrates how to create and return a JavaScript function that\nwraps a C++ function:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; MyFunction(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;hello world&quot;));\n}\n\nHandle&lt;Value&gt; CreateFunction(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n  fn-&gt;SetName(String::NewSymbol(&quot;theFunction&quot;)); \/\/ omit this to make it anonymous\n\n  return scope.Close(fn);\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateFunction)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)<\/code><\/pre>\n<p>To test:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\nvar fn = addon();\nconsole.log(fn()); \/\/ &#39;hello world&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_wrapping_c_objects","title":"Wrapping C++ objects","description":"<p>Here we will create a wrapper for a C++ object\/class <code>MyObject<\/code> that can be\ninstantiated in JavaScript through the <code>new<\/code> operator. First prepare the main\nmodule <code>addon.cc<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nvoid InitAll(Handle&lt;Object&gt; exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(addon, InitAll)<\/code><\/pre>\n<p>Then in <code>myobject.h<\/code> make your wrapper inherit from <code>node::ObjectWrap<\/code>:\n\n<\/p>\n<pre><code>#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Handle&lt;v8::Object&gt; exports);\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  double counter_;\n};\n\n#endif<\/code><\/pre>\n<p>And in <code>myobject.cc<\/code> implement the various methods that you want to expose.\nHere we expose the method <code>plusOne<\/code> by adding it to the constructor&#39;s\nprototype:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nvoid MyObject::Init(Handle&lt;Object&gt; exports) {\n  \/\/ Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  \/\/ Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n\n  Persistent&lt;Function&gt; constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n  exports-&gt;Set(String::NewSymbol(&quot;MyObject&quot;), constructor);\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;counter_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;counter_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;counter_));\n}<\/code><\/pre>\n<p>Test it with:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\nvar obj = new addon.MyObject(10);\nconsole.log( obj.plusOne() ); \/\/ 11\nconsole.log( obj.plusOne() ); \/\/ 12\nconsole.log( obj.plusOne() ); \/\/ 13<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_factory_of_wrapped_objects","title":"Factory of wrapped objects","description":"<p>This is useful when you want to be able to create native objects without\nexplicitly instantiating them with the <code>new<\/code> operator in JavaScript, e.g.\n\n<\/p>\n<pre><code>var obj = addon.createObject();\n\/\/ instead of:\n\/\/ var obj = new addon.Object();<\/code><\/pre>\n<p>Let&#39;s register our <code>createObject<\/code> method in <code>addon.cc<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nvoid InitAll(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  MyObject::Init();\n\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)<\/code><\/pre>\n<p>In <code>myobject.h<\/code> we now introduce the static method <code>NewInstance<\/code> that takes\ncare of instantiating the object (i.e. it does the job of <code>new<\/code> in JavaScript):\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  double counter_;\n};\n\n#endif<\/code><\/pre>\n<p>The implementation is similar to the above in <code>myobject.cc<\/code>:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nvoid MyObject::Init() {\n  \/\/ Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  \/\/ Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;counter_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;counter_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;counter_));\n}<\/code><\/pre>\n<p>Test it with:\n\n<\/p>\n<pre><code>var createObject = require(&#39;.\/build\/Release\/addon&#39;);\n\nvar obj = createObject(10);\nconsole.log( obj.plusOne() ); \/\/ 11\nconsole.log( obj.plusOne() ); \/\/ 12\nconsole.log( obj.plusOne() ); \/\/ 13\n\nvar obj2 = createObject(20);\nconsole.log( obj2.plusOne() ); \/\/ 21\nconsole.log( obj2.plusOne() ); \/\/ 22\nconsole.log( obj2.plusOne() ); \/\/ 23<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_passing_wrapped_objects_around","title":"Passing wrapped objects around","description":"<p>In addition to wrapping and returning C++ objects, you can pass them around\nby unwrapping them with Node&#39;s <code>node::ObjectWrap::Unwrap<\/code> helper function.\nIn the following <code>addon.cc<\/code> we introduce a function <code>add()<\/code> that can take on two\n<code>MyObject<\/code> objects:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;Val() + obj2-&gt;Val();\n  return scope.Close(Number::New(sum));\n}\n\nvoid InitAll(Handle&lt;Object&gt; exports) {\n  MyObject::Init();\n\n  exports-&gt;Set(String::NewSymbol(&quot;createObject&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n\n  exports-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)<\/code><\/pre>\n<p>To make things interesting we introduce a public method in <code>myobject.h<\/code> so we\ncan probe private values after unwrapping the object:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n  double Val() const { return val_; }\n\n private:\n  MyObject();\n  ~MyObject();\n\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  double val_;\n};\n\n#endif<\/code><\/pre>\n<p>The implementation of <code>myobject.cc<\/code> is similar as before:\n\n<\/p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nMyObject::MyObject() {};\nMyObject::~MyObject() {};\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nvoid MyObject::Init() {\n  \/\/ Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = new MyObject();\n  obj-&gt;val_ = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n  obj-&gt;Wrap(args.This());\n\n  return args.This();\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}<\/code><\/pre>\n<p>Test it with:\n\n<\/p>\n<pre><code>var addon = require(&#39;.\/build\/Release\/addon&#39;);\n\nvar obj1 = addon.createObject(10);\nvar obj2 = addon.createObject(20);\nvar result = addon.add(obj1, obj2);\n\nconsole.log(result); \/\/ 30<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util","title":"util","description":"<p>These functions are in the module <code>&#39;util&#39;<\/code>. Use <code>require(&#39;util&#39;)<\/code> to access\nthem.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_format_format","title":"util.format(format, [...])","description":"<p>Returns a formatted string using the first argument as a <code>printf<\/code>-like format.\n\n<\/p>\n<p>The first argument is a string that contains zero or more <em>placeholders<\/em>.\nEach placeholder is replaced with the converted value from its corresponding\nargument. Supported placeholders are:\n\n<\/p>\n<ul>\n<li><code>%s<\/code> - String.<\/li>\n<li><code>%d<\/code> - Number (both integer and float).<\/li>\n<li><code>%j<\/code> - JSON.<\/li>\n<li><code>%<\/code> - single percent sign (<code>&#39;%&#39;<\/code>). This does not consume an argument.<\/li>\n<\/ul>\n<p>If the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.\n\n<\/p>\n<pre><code>util.format(&#39;%s:%s&#39;, &#39;foo&#39;); \/\/ &#39;foo:%s&#39;<\/code><\/pre>\n<p>If there are more arguments than placeholders, the extra arguments are\nconverted to strings with <code>util.inspect()<\/code> and these strings are concatenated,\ndelimited by a space.\n\n<\/p>\n<pre><code>util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); \/\/ &#39;foo:bar baz&#39;<\/code><\/pre>\n<p>If the first argument is not a format string then <code>util.format()<\/code> returns\na string that is the concatenation of all its arguments separated by spaces.\nEach argument is converted to a string with <code>util.inspect()<\/code>.\n\n<\/p>\n<pre><code>util.format(1, 2, 3); \/\/ &#39;1 2 3&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_debug_string","title":"util.debug(string)","description":"<p>A synchronous output function. Will block the process and\noutput <code>string<\/code> immediately to <code>stderr<\/code>.\n\n<\/p>\n<pre><code>require(&#39;util&#39;).debug(&#39;message on stderr&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_error","title":"util.error([...])","description":"<p>Same as <code>util.debug()<\/code> except this will output all arguments immediately to\n<code>stderr<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_puts","title":"util.puts([...])","description":"<p>A synchronous output function. Will block the process and output all arguments\nto <code>stdout<\/code> with newlines after each argument.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_print","title":"util.print([...])","description":"<p>A synchronous output function. Will block the process, cast each argument to a\nstring then output to <code>stdout<\/code>. Does not place newlines after each argument.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_log_string","title":"util.log(string)","description":"<p>Output with timestamp on <code>stdout<\/code>.\n\n<\/p>\n<pre><code>require(&#39;util&#39;).log(&#39;Timestamped message.&#39;);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_inspect_object_options","title":"util.inspect(object, [options])","description":"<p>Return a string representation of <code>object<\/code>, which is useful for debugging.\n\n<\/p>\n<p>An optional <em>options<\/em> object may be passed that alters certain aspects of the\nformatted string:\n\n<\/p>\n<ul>\n<li><p><code>showHidden<\/code> - if <code>true<\/code> then the object&#39;s non-enumerable properties will be\nshown too. Defaults to <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>depth<\/code> - tells <code>inspect<\/code> how many times to recurse while formatting the\nobject. This is useful for inspecting large complicated objects. Defaults to\n<code>2<\/code>. To make it recurse indefinitely pass <code>null<\/code>.<\/p>\n<\/li>\n<li><p><code>colors<\/code> - if <code>true<\/code>, then the output will be styled with ANSI color codes.\nDefaults to <code>false<\/code>. Colors are customizable, see below.<\/p>\n<\/li>\n<li><p><code>customInspect<\/code> - if <code>false<\/code>, then custom <code>inspect()<\/code> functions defined on the\nobjects being inspected won&#39;t be called. Defaults to <code>true<\/code>.<\/p>\n<\/li>\n<\/ul>\n<p>Example of inspecting all properties of the <code>util<\/code> object:\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_customizing_util_inspect_colors","title":"Customizing `util.inspect` colors","description":"<p>Color output (if enabled) of <code>util.inspect<\/code> is customizable globally\nvia <code>util.inspect.styles<\/code> and <code>util.inspect.colors<\/code> objects.\n\n<\/p>\n<p><code>util.inspect.styles<\/code> is a map assigning each style a color\nfrom <code>util.inspect.colors<\/code>.\nHighlighted styles and their default values are:\n <em> <code>number<\/code> (yellow)\n <\/em> <code>boolean<\/code> (yellow)\n <em> <code>string<\/code> (green)\n <\/em> <code>date<\/code> (magenta)\n <em> <code>regexp<\/code> (red)\n <\/em> <code>null<\/code> (bold)\n <em> <code>undefined<\/code> (grey)\n <\/em> <code>special<\/code> - only function at this time (cyan)\n * <code>name<\/code> (intentionally no styling)\n\n<\/p>\n<p>Predefined color codes are: <code>white<\/code>, <code>grey<\/code>, <code>black<\/code>, <code>blue<\/code>, <code>cyan<\/code>, \n<code>green<\/code>, <code>magenta<\/code>, <code>red<\/code> and <code>yellow<\/code>.\nThere are also <code>bold<\/code>, <code>italic<\/code>, <code>underline<\/code> and <code>inverse<\/code> codes.\n\n<\/p>\n<p>Objects also may define their own <code>inspect(depth)<\/code> function which <code>util.inspect()<\/code>\nwill invoke and use the result of when inspecting the object:\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nvar obj = { name: &#39;nate&#39; };\nobj.inspect = function(depth) {\n  return &#39;{&#39; + this.name + &#39;}&#39;;\n};\n\nutil.inspect(obj);\n  \/\/ &quot;{nate}&quot;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isarray_object","title":"util.isArray(object)","description":"<p>Returns <code>true<\/code> if the given &quot;object&quot; is an <code>Array<\/code>. <code>false<\/code> otherwise.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nutil.isArray([])\n  \/\/ true\nutil.isArray(new Array)\n  \/\/ true\nutil.isArray({})\n  \/\/ false<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isregexp_object","title":"util.isRegExp(object)","description":"<p>Returns <code>true<\/code> if the given &quot;object&quot; is a <code>RegExp<\/code>. <code>false<\/code> otherwise.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nutil.isRegExp(\/some regexp\/)\n  \/\/ true\nutil.isRegExp(new RegExp(&#39;another regexp&#39;))\n  \/\/ true\nutil.isRegExp({})\n  \/\/ false<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isdate_object","title":"util.isDate(object)","description":"<p>Returns <code>true<\/code> if the given &quot;object&quot; is a <code>Date<\/code>. <code>false<\/code> otherwise.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nutil.isDate(new Date())\n  \/\/ true\nutil.isDate(Date())\n  \/\/ false (without &#39;new&#39; returns a String)\nutil.isDate({})\n  \/\/ false<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_iserror_object","title":"util.isError(object)","description":"<p>Returns <code>true<\/code> if the given &quot;object&quot; is an <code>Error<\/code>. <code>false<\/code> otherwise.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;);\n\nutil.isError(new Error())\n  \/\/ true\nutil.isError(new TypeError())\n  \/\/ true\nutil.isError({ name: &#39;Error&#39;, message: &#39;an error occurred&#39; })\n  \/\/ false<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_pump_readablestream_writablestream_callback","title":"util.pump(readableStream, writableStream, [callback])","description":"<p>Read the data from <code>readableStream<\/code> and send it to the <code>writableStream<\/code>.\nWhen <code>writableStream.write(data)<\/code> returns <code>false<\/code> <code>readableStream<\/code> will be\npaused until the <code>drain<\/code> event occurs on the <code>writableStream<\/code>. <code>callback<\/code> gets\nan error as its only argument and is called when <code>writableStream<\/code> is closed or\nwhen an error occurs.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_inherits_constructor_superconstructor","title":"util.inherits(constructor, superConstructor)","description":"<p>Inherit the prototype methods from one\n<a href=\"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/constructor\">constructor<\/a>\ninto another.  The prototype of <code>constructor<\/code> will be set to a new\nobject created from <code>superConstructor<\/code>.\n\n<\/p>\n<p>As an additional convenience, <code>superConstructor<\/code> will be accessible\nthrough the <code>constructor.super_<\/code> property.\n\n<\/p>\n<pre><code>var util = require(&quot;util&quot;);\nvar events = require(&quot;events&quot;);\n\nfunction MyStream() {\n    events.EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, events.EventEmitter);\n\nMyStream.prototype.write = function(data) {\n    this.emit(&quot;data&quot;, data);\n}\n\nvar stream = new MyStream();\n\nconsole.log(stream instanceof events.EventEmitter); \/\/ true\nconsole.log(MyStream.super_ === events.EventEmitter); \/\/ true\n\nstream.on(&quot;data&quot;, function(data) {\n    console.log(&#39;Received data: &quot;&#39; + data + &#39;&quot;&#39;);\n})\nstream.write(&quot;It works!&quot;); \/\/ Received data: &quot;It works!&quot;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_events","title":"Events","description":"<p>Many objects in Node emit events: a <code>net.Server<\/code> emits an event each time\na peer connects to it, a <code>fs.readStream<\/code> emits an event when the file is\nopened. All objects which emit events are instances of <code>events.EventEmitter<\/code>.\nYou can access this module by doing: <code>require(&quot;events&quot;);<\/code>\n\n<\/p>\n<p>Typically, event names are represented by a camel-cased string, however,\nthere aren&#39;t any strict restrictions on that, as any string will be accepted.\n\n<\/p>\n<p>Functions can then be attached to objects, to be executed when an event\nis emitted. These functions are called <em>listeners<\/em>.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain","title":"Domain","description":"<p>Domains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an <code>error<\/code> event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n<code>process.on(&#39;uncaughtException&#39;)<\/code> handler, or causing the program to\nexit with an error code.\n\n<\/p>\n<p>This feature is new in Node version 0.8.  It is a first pass, and is\nexpected to change significantly in future versions.  Please use it and\nprovide feedback.\n\n<\/p>\n<p>Due to their experimental nature, the Domains features are disabled unless\nthe <code>domain<\/code> module is loaded at least once.  No domains are created or\nregistered by default.  This is by design, to prevent adverse effects on\ncurrent programs.  It is expected to be enabled by default in future\nNode.js versions.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_create","title":"domain.create()","description":"<p>Returns a new Domain object.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_additions_to_error_objects","title":"Additions to Error objects","description":"<p>Any time an Error object is routed through a domain, a few extra fields\nare added to it.\n\n<\/p>\n<ul>\n<li><code>error.domain<\/code> The domain that first handled the error.<\/li>\n<li><code>error.domainEmitter<\/code> The event emitter that emitted an &#39;error&#39; event\nwith the error object.<\/li>\n<li><code>error.domainBound<\/code> The callback function which was bound to the\ndomain, and passed an error as its first argument.<\/li>\n<li><code>error.domainThrown<\/code> A boolean indicating whether the error was\nthrown, emitted, or passed to a bound callback function.<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implicit_binding","title":"Implicit Binding","description":"<p>If domains are in use, then all new EventEmitter objects (including\nStream objects, requests, responses, etc.) will be implicitly bound to\nthe active domain at the time of their creation.\n\n<\/p>\n<p>Additionally, callbacks passed to lowlevel event loop requests (such as\nto fs.open, or other callback-taking methods) will automatically be\nbound to the active domain.  If they throw, then the domain will catch\nthe error.\n\n<\/p>\n<p>In order to prevent excessive memory usage, Domain objects themselves\nare not implicitly added as children of the active domain.  If they\nwere, then it would be too easy to prevent request and response objects\nfrom being properly garbage collected.\n\n<\/p>\n<p>If you <em>want<\/em> to nest Domain objects as children of a parent Domain,\nthen you must explicitly add them, and then dispose of them later.\n\n<\/p>\n<p>Implicit binding routes thrown errors and <code>&#39;error&#39;<\/code> events to the\nDomain&#39;s <code>error<\/code> event, but does not register the EventEmitter on the\nDomain, so <code>domain.dispose()<\/code> will not shut down the EventEmitter.\nImplicit binding only takes care of thrown errors and <code>&#39;error&#39;<\/code> events.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_explicit_binding","title":"Explicit Binding","description":"<p>Sometimes, the domain in use is not the one that ought to be used for a\nspecific event emitter.  Or, the event emitter could have been created\nin the context of one domain, but ought to instead be bound to some\nother domain.\n\n<\/p>\n<p>For example, there could be one domain in use for an HTTP server, but\nperhaps we would like to have a separate domain to use for each request.\n\n<\/p>\n<p>That is possible via explicit binding.\n\n<\/p>\n<p>For example:\n\n<\/p>\n<pre><code>\/\/ create a top-level domain for the server\nvar serverDomain = domain.create();\n\nserverDomain.run(function() {\n  \/\/ server is created in the scope of serverDomain\n  http.createServer(function(req, res) {\n    \/\/ req and res are also created in the scope of serverDomain\n    \/\/ however, we&#39;d prefer to have a separate domain for each request.\n    \/\/ create it first thing, and add req and res to it.\n    var reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on(&#39;error&#39;, function(er) {\n      console.error(&#39;Error&#39;, er, req.url);\n      try {\n        res.writeHead(500);\n        res.end(&#39;Error occurred, sorry.&#39;);\n        res.on(&#39;close&#39;, function() {\n          \/\/ forcibly shut down any other things added to this domain\n          reqd.dispose();\n        });\n      } catch (er) {\n        console.error(&#39;Error sending 500&#39;, er, req.url);\n        \/\/ tried our best.  clean up anything remaining.\n        reqd.dispose();\n      }\n    });\n  }).listen(1337);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffer","title":"Buffer","description":"<p>Pure JavaScript is Unicode friendly but not nice to binary data.  When\ndealing with TCP streams or the file system, it&#39;s necessary to handle octet\nstreams. Node has several strategies for manipulating, creating, and\nconsuming octet streams.\n\n<\/p>\n<p>Raw data is stored in instances of the <code>Buffer<\/code> class. A <code>Buffer<\/code> is similar\nto an array of integers but corresponds to a raw memory allocation outside\nthe V8 heap. A <code>Buffer<\/code> cannot be resized.\n\n<\/p>\n<p>The <code>Buffer<\/code> class is a global, making it very rare that one would need\nto ever <code>require(&#39;buffer&#39;)<\/code>.\n\n<\/p>\n<p>Converting between Buffers and JavaScript string objects requires an explicit\nencoding method.  Here are the different string encodings.\n\n<\/p>\n<ul>\n<li><p><code>&#39;ascii&#39;<\/code> - for 7 bit ASCII data only.  This encoding method is very fast, and\nwill strip the high bit if set.<\/p>\n<p>Note that when converting from string to buffer, this encoding converts a null\ncharacter (<code>&#39;\\0&#39;<\/code> or <code>&#39;\\u0000&#39;<\/code>) into <code>0x20<\/code> (character code of a space). If\nyou want to convert a null character into <code>0x00<\/code>, you should use <code>&#39;utf8&#39;<\/code>.<\/p>\n<\/li>\n<li><p><code>&#39;utf8&#39;<\/code> - Multibyte encoded Unicode characters. Many web pages and other\ndocument formats use UTF-8.<\/p>\n<\/li>\n<li><p><code>&#39;utf16le&#39;<\/code> - 2 or 4 bytes, little endian encoded Unicode characters.\nSurrogate pairs (U+10000 to U+10FFFF) are supported.<\/p>\n<\/li>\n<li><p><code>&#39;ucs2&#39;<\/code> - Alias of <code>&#39;utf16le&#39;<\/code>.<\/p>\n<\/li>\n<li><p><code>&#39;base64&#39;<\/code> - Base64 string encoding.<\/p>\n<\/li>\n<li><p><code>&#39;binary&#39;<\/code> - A way of encoding raw binary data into strings by using only\nthe first 8 bits of each character. This encoding method is deprecated and\nshould be avoided in favor of <code>Buffer<\/code> objects where possible. This encoding\nwill be removed in future versions of Node.<\/p>\n<\/li>\n<li><p><code>&#39;hex&#39;<\/code> - Encode each byte as two hexadecimal characters.<\/p>\n<\/li>\n<\/ul>\n<p>A <code>Buffer<\/code> object can also be used with typed arrays.  The buffer object is\ncloned to an <code>ArrayBuffer<\/code> that is used as the backing store for the typed\narray.  The memory of the buffer and the <code>ArrayBuffer<\/code> is not shared.\n\n<\/p>\n<p>NOTE: Node.js v0.8 simply retained a reference to the buffer in <code>array.buffer<\/code>\ninstead of cloning it.\n\n<\/p>\n<p>While more efficient, it introduces subtle incompatibilities with the typed\narrays specification.  <code>ArrayBuffer#slice()<\/code> makes a copy of the slice while\n<code>Buffer#slice()<\/code> creates a view.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream","title":"Stream","description":"<p>A stream is an abstract interface implemented by various objects in\nNode.  For example a request to an HTTP server is a stream, as is\nstdout. Streams are readable, writable, or both. All streams are\ninstances of [EventEmitter][]\n\n<\/p>\n<p>You can load the Stream base classes by doing <code>require(&#39;stream&#39;)<\/code>.\nThere are base classes provided for Readable streams, Writable\nstreams, Duplex streams, and Transform streams.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_compatibility","title":"Compatibility","description":"<p>In earlier versions of Node, the Readable stream interface was\nsimpler, but also less powerful and less useful.\n\n<\/p>\n<ul>\n<li>Rather than waiting for you to call the <code>read()<\/code> method, <code>&#39;data&#39;<\/code>\nevents would start emitting immediately.  If you needed to do some\nI\/O to decide how to handle data, then you had to store the chunks\nin some kind of buffer so that they would not be lost.<\/li>\n<li>The <code>pause()<\/code> method was advisory, rather than guaranteed.  This\nmeant that you still had to be prepared to receive <code>&#39;data&#39;<\/code> events\neven when the stream was in a paused state.<\/li>\n<\/ul>\n<p>In Node v0.10, the Readable class described below was added.  For\nbackwards compatibility with older Node programs, Readable streams\nswitch into &quot;old mode&quot; when a <code>&#39;data&#39;<\/code> event handler is added, or when\nthe <code>pause()<\/code> or <code>resume()<\/code> methods are called.  The effect is that,\neven if you are not using the new <code>read()<\/code> method and <code>&#39;readable&#39;<\/code>\nevent, you no longer have to worry about losing <code>&#39;data&#39;<\/code> chunks.\n\n<\/p>\n<p>Most programs will continue to function normally.  However, this\nintroduces an edge case in the following conditions:\n\n<\/p>\n<ul>\n<li>No <code>&#39;data&#39;<\/code> event handler is added.<\/li>\n<li>The <code>pause()<\/code> and <code>resume()<\/code> methods are never called.<\/li>\n<\/ul>\n<p>For example, consider the following code:\n\n<\/p>\n<pre><code class=\"javascript\">\/\/ WARNING!  BROKEN!\nnet.createServer(function(socket) {\n\n  \/\/ we add an &#39;end&#39; method, but never consume the data\n  socket.on(&#39;end&#39;, function() {\n    \/\/ It will never get here.\n    socket.end(&#39;I got your message (but didnt read it)\\n&#39;);\n  });\n\n}).listen(1337);<\/code><\/pre>\n<p>In versions of node prior to v0.10, the incoming message data would be\nsimply discarded.  However, in Node v0.10 and beyond, the socket will\nremain paused forever.\n\n<\/p>\n<p>The workaround in this situation is to call the <code>resume()<\/code> method to\ntrigger &quot;old mode&quot; behavior:\n\n<\/p>\n<pre><code class=\"javascript\">\/\/ Workaround\nnet.createServer(function(socket) {\n\n  socket.on(&#39;end&#39;, function() {\n    socket.end(&#39;I got your message (but didnt read it)\\n&#39;);\n  });\n\n  \/\/ start the flow of data, discarding it.\n  socket.resume();\n\n}).listen(1337);<\/code><\/pre>\n<p>In addition to new Readable streams switching into old-mode, pre-v0.10\nstyle streams can be wrapped in a Readable class using the <code>wrap()<\/code>\nmethod.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto","title":"Crypto","description":"<pre><code>Stability: 2 - Unstable; API changes are being discussed for\nfuture versions.  Breaking changes will be minimized.  See below.<\/code><\/pre>\n<p>Use <code>require(&#39;crypto&#39;)<\/code> to access this module.\n\n<\/p>\n<p>The crypto module offers a way of encapsulating secure credentials to be\nused as part of a secure HTTPS net or http connection.\n\n<\/p>\n<p>It also offers a set of wrappers for OpenSSL&#39;s hash, hmac, cipher,\ndecipher, sign and verify methods.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getciphers","title":"crypto.getCiphers()","description":"<p>Returns an array with the names of the supported ciphers.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var ciphers = crypto.getCiphers();\nconsole.log(ciphers); \/\/ [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_gethashes","title":"crypto.getHashes()","description":"<p>Returns an array with the names of the supported hash algorithms.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var hashes = crypto.getHashes();\nconsole.log(hashes); \/\/ [&#39;sha&#39;, &#39;sha1&#39;, &#39;sha1WithRSAEncryption&#39;, ...]<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcredentials_details","title":"crypto.createCredentials(details)","description":"<p>Creates a credentials object, with the optional details being a\ndictionary with keys:\n\n<\/p>\n<ul>\n<li><code>pfx<\/code> : A string or buffer holding the PFX or PKCS12 encoded private\nkey, certificate and CA certificates<\/li>\n<li><code>key<\/code> : A string holding the PEM encoded private key<\/li>\n<li><code>passphrase<\/code> : A string of passphrase for the private key or pfx<\/li>\n<li><code>cert<\/code> : A string holding the PEM encoded certificate<\/li>\n<li><code>ca<\/code> : Either a string or list of strings of PEM encoded CA\ncertificates to trust.<\/li>\n<li><code>crl<\/code> : Either a string or list of strings of PEM encoded CRLs\n(Certificate Revocation List)<\/li>\n<li><code>ciphers<\/code>: A string describing the ciphers to use or exclude.\nConsult\n<a href=\"http:\/\/www.openssl.org\/docs\/apps\/ciphers.html#CIPHER_LIST_FORMAT\">http:\/\/www.openssl.org\/docs\/apps\/ciphers.html#CIPHER_LIST_FORMAT<\/a>\nfor details on the format.<\/li>\n<\/ul>\n<p>If no &#39;ca&#39; details are given, then node.js will use the default\npublicly trusted list of CAs as given in\n<\/p>\n<p><a href=\"http:\/\/mxr.mozilla.org\/mozilla\/source\/security\/nss\/lib\/ckfw\/builtins\/certdata.txt\">http:\/\/mxr.mozilla.org\/mozilla\/source\/security\/nss\/lib\/ckfw\/builtins\/certdata.txt<\/a>.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createhash_algorithm","title":"crypto.createHash(algorithm)","description":"<p>Creates and returns a hash object, a cryptographic hash with the given\nalgorithm which can be used to generate hash digests.\n\n<\/p>\n<p><code>algorithm<\/code> is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are <code>&#39;sha1&#39;<\/code>, <code>&#39;md5&#39;<\/code>,\n<code>&#39;sha256&#39;<\/code>, <code>&#39;sha512&#39;<\/code>, etc.  On recent releases, <code>openssl\nlist-message-digest-algorithms<\/code> will display the available digest\nalgorithms.\n\n<\/p>\n<p>Example: this program that takes the sha1 sum of a file\n\n<\/p>\n<pre><code>var filename = process.argv[2];\nvar crypto = require(&#39;crypto&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar shasum = crypto.createHash(&#39;sha1&#39;);\n\nvar s = fs.ReadStream(filename);\ns.on(&#39;data&#39;, function(d) {\n  shasum.update(d);\n});\n\ns.on(&#39;end&#39;, function() {\n  var d = shasum.digest(&#39;hex&#39;);\n  console.log(d + &#39;  &#39; + filename);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createhmac_algorithm_key","title":"crypto.createHmac(algorithm, key)","description":"<p>Creates and returns a hmac object, a cryptographic hmac with the given\nalgorithm and key.\n\n<\/p>\n<p>It is a <a href=\"stream.html\">stream<\/a> that is both readable and writable.  The\nwritten data is used to compute the hmac.  Once the writable side of\nthe stream is ended, use the <code>read()<\/code> method to get the computed\ndigest.  The legacy <code>update<\/code> and <code>digest<\/code> methods are also supported.\n\n<\/p>\n<p><code>algorithm<\/code> is dependent on the available algorithms supported by\nOpenSSL - see createHash above.  <code>key<\/code> is the hmac key to be used.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcipher_algorithm_password","title":"crypto.createCipher(algorithm, password)","description":"<p>Creates and returns a cipher object, with the given algorithm and\npassword.\n\n<\/p>\n<p><code>algorithm<\/code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;<\/code>, etc.  On\nrecent releases, <code>openssl list-cipher-algorithms<\/code> will display the\navailable cipher algorithms.  <code>password<\/code> is used to derive key and IV,\nwhich must be a <code>&#39;binary&#39;<\/code> encoded string or a <a href=\"buffer.html\">buffer<\/a>.\n\n<\/p>\n<p>It is a <a href=\"stream.html\">stream<\/a> that is both readable and writable.  The\nwritten data is used to compute the hash.  Once the writable side of\nthe stream is ended, use the <code>read()<\/code> method to get the computed hash\ndigest.  The legacy <code>update<\/code> and <code>digest<\/code> methods are also supported.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcipheriv_algorithm_key_iv","title":"crypto.createCipheriv(algorithm, key, iv)","description":"<p>Creates and returns a cipher object, with the given algorithm, key and\niv.\n\n<\/p>\n<p><code>algorithm<\/code> is the same as the argument to <code>createCipher()<\/code>.  <code>key<\/code> is\nthe raw key used by the algorithm.  <code>iv<\/code> is an <a href=\"http:\/\/en.wikipedia.org\/wiki\/Initialization_vector\">initialization\nvector<\/a>.\n\n<\/p>\n<p><code>key<\/code> and <code>iv<\/code> must be <code>&#39;binary&#39;<\/code> encoded strings or\n<a href=\"buffer.html\">buffers<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createdecipher_algorithm_password","title":"crypto.createDecipher(algorithm, password)","description":"<p>Creates and returns a decipher object, with the given algorithm and\nkey.  This is the mirror of the [createCipher()][] above.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createdecipheriv_algorithm_key_iv","title":"crypto.createDecipheriv(algorithm, key, iv)","description":"<p>Creates and returns a decipher object, with the given algorithm, key\nand iv.  This is the mirror of the [createCipheriv()][] above.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createsign_algorithm","title":"crypto.createSign(algorithm)","description":"<p>Creates and returns a signing object, with the given algorithm.  On\nrecent OpenSSL releases, <code>openssl list-public-key-algorithms<\/code> will\ndisplay the available signing algorithms. Examples are <code>&#39;RSA-SHA256&#39;<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createverify_algorithm","title":"crypto.createVerify(algorithm)","description":"<p>Creates and returns a verification object, with the given algorithm.\nThis is the mirror of the signing object above.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_creatediffiehellman_prime_length","title":"crypto.createDiffieHellman(prime_length)","description":"<p>Creates a Diffie-Hellman key exchange object and generates a prime of\nthe given bit length. The generator used is <code>2<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_creatediffiehellman_prime_encoding","title":"crypto.createDiffieHellman(prime, [encoding])","description":"<p>Creates a Diffie-Hellman key exchange object using the supplied prime.\nThe generator used is <code>2<\/code>. Encoding can be <code>&#39;binary&#39;<\/code>, <code>&#39;hex&#39;<\/code>, or\n<code>&#39;base64&#39;<\/code>.  If no encoding is specified, then a buffer is expected.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getdiffiehellman_group_name","title":"crypto.getDiffieHellman(group_name)","description":"<p>Creates a predefined Diffie-Hellman key exchange object.  The\nsupported groups are: <code>&#39;modp1&#39;<\/code>, <code>&#39;modp2&#39;<\/code>, <code>&#39;modp5&#39;<\/code> (defined in [RFC\n2412][]) and <code>&#39;modp14&#39;<\/code>, <code>&#39;modp15&#39;<\/code>, <code>&#39;modp16&#39;<\/code>, <code>&#39;modp17&#39;<\/code>,\n<code>&#39;modp18&#39;<\/code> (defined in [RFC 3526][]).  The returned object mimics the\ninterface of objects created by [crypto.createDiffieHellman()][]\nabove, but will not allow to change the keys (with\n[diffieHellman.setPublicKey()][] for example).  The advantage of using\nthis routine is that the parties don&#39;t have to generate nor exchange\ngroup modulus beforehand, saving both processor and communication\ntime.\n\n<\/p>\n<p>Example (obtaining a shared secret):\n\n<\/p>\n<pre><code>var crypto = require(&#39;crypto&#39;);\nvar alice = crypto.getDiffieHellman(&#39;modp5&#39;);\nvar bob = crypto.getDiffieHellman(&#39;modp5&#39;);\n\nalice.generateKeys();\nbob.generateKeys();\n\nvar alice_secret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nvar bob_secret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n\/* alice_secret and bob_secret should be the same *\/\nconsole.log(alice_secret == bob_secret);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_pbkdf2_password_salt_iterations_keylen_callback","title":"crypto.pbkdf2(password, salt, iterations, keylen, callback)","description":"<p>Asynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive\na key of given length from the given password, salt and iterations.\nThe callback gets two arguments <code>(err, derivedKey)<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_pbkdf2sync_password_salt_iterations_keylen","title":"crypto.pbkdf2Sync(password, salt, iterations, keylen)","description":"<p>Synchronous PBKDF2 function.  Returns derivedKey or throws error.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_randombytes_size_callback","title":"crypto.randomBytes(size, [callback])","description":"<p>Generates cryptographically strong pseudo-random data. Usage:\n\n<\/p>\n<pre><code>\/\/ async\ncrypto.randomBytes(256, function(ex, buf) {\n  if (ex) throw ex;\n  console.log(&#39;Have %d bytes of random data: %s&#39;, buf.length, buf);\n});\n\n\/\/ sync\ntry {\n  var buf = crypto.randomBytes(256);\n  console.log(&#39;Have %d bytes of random data: %s&#39;, buf.length, buf);\n} catch (ex) {\n  \/\/ handle error\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_pseudorandombytes_size_callback","title":"crypto.pseudoRandomBytes(size, [callback])","description":"<p>Generates <em>non<\/em>-cryptographically strong pseudo-random data. The data\nreturned will be unique if it is sufficiently long, but is not\nnecessarily unpredictable. For this reason, the output of this\nfunction should never be used where unpredictability is important,\nsuch as in the generation of encryption keys.\n\n<\/p>\n<p>Usage is otherwise identical to <code>crypto.randomBytes<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_recent_api_changes","title":"Recent API Changes","description":"<p>The Crypto module was added to Node before there was the concept of a\nunified Stream API, and before there were Buffer objects for handling\nbinary data.\n\n<\/p>\n<p>As such, the streaming classes don&#39;t have the typical methods found on\nother Node classes, and many methods accepted and returned\nBinary-encoded strings by default rather than Buffers.  This was\nchanged to use Buffers by default instead.\n\n<\/p>\n<p>This is a breaking change for some use cases, but not all.\n\n<\/p>\n<p>For example, if you currently use the default arguments to the Sign\nclass, and then pass the results to the Verify class, without ever\ninspecting the data, then it will continue to work as before.  Where\nyou once got a binary string and then presented the binary string to\nthe Verify object, you&#39;ll now get a Buffer, and present the Buffer to\nthe Verify object.\n\n<\/p>\n<p>However, if you were doing things with the string data that will not\nwork properly on Buffers (such as, concatenating them, storing in\ndatabases, etc.), or you are passing binary strings to the crypto\nfunctions without an encoding argument, then you will need to start\nproviding encoding arguments to specify which encoding you&#39;d like to\nuse.  To switch to the previous style of using binary strings by\ndefault, set the <code>crypto.DEFAULT_ENCODING<\/code> field to &#39;binary&#39;.  Note\nthat new programs will probably expect buffers, so only use this as a\ntemporary measure.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_ssl","title":"TLS (SSL)","description":"<p>Use <code>require(&#39;tls&#39;)<\/code> to access this module.\n\n<\/p>\n<p>The <code>tls<\/code> module uses OpenSSL to provide Transport Layer Security and\/or\nSecure Socket Layer: encrypted stream communication.\n\n<\/p>\n<p>TLS\/SSL is a public\/private key infrastructure. Each client and each\nserver must have a private key. A private key is created like this\n\n<\/p>\n<pre><code>openssl genrsa -out ryans-key.pem 1024<\/code><\/pre>\n<p>All severs and some clients need to have a certificate. Certificates are public\nkeys signed by a Certificate Authority or self-signed. The first step to\ngetting a certificate is to create a &quot;Certificate Signing Request&quot; (CSR)\nfile. This is done with:\n\n<\/p>\n<pre><code>openssl req -new -key ryans-key.pem -out ryans-csr.pem<\/code><\/pre>\n<p>To create a self-signed certificate with the CSR, do this:\n\n<\/p>\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem<\/code><\/pre>\n<p>Alternatively you can send the CSR to a Certificate Authority for signing.\n\n<\/p>\n<p>(TODO: docs on creating a CA, for now interested users should just look at\n<code>test\/fixtures\/keys\/Makefile<\/code> in the Node source code)\n\n<\/p>\n<p>To create .pfx or .p12, do this:\n\n<\/p>\n<pre><code>openssl pkcs12 -export -in agent5-cert.pem -inkey agent5-key.pem \\\n    -certfile ca-cert.pem -out agent5.pfx<\/code><\/pre>\n<ul>\n<li><code>in<\/code>:  certificate<\/li>\n<li><code>inkey<\/code>: private key<\/li>\n<li><code>certfile<\/code>: all CA certs concatenated in one file like\n<code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem<\/code><\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_createserver_options_secureconnectionlistener","title":"tls.createServer(options, [secureConnectionListener])","description":"<p>Creates a new [tls.Server][].  The <code>connectionListener<\/code> argument is\nautomatically set as a listener for the [secureConnection][] event.  The\n<code>options<\/code> object has these possibilities:\n\n<\/p>\n<ul>\n<li><p><code>pfx<\/code>: A string or <code>Buffer<\/code> containing the private key, certificate and\nCA certs of the server in PFX or PKCS12 format. (Mutually exclusive with\nthe <code>key<\/code>, <code>cert<\/code> and <code>ca<\/code> options.)<\/p>\n<\/li>\n<li><p><code>key<\/code>: A string or <code>Buffer<\/code> containing the private key of the server in\nPEM format. (Required)<\/p>\n<\/li>\n<li><p><code>passphrase<\/code>: A string of passphrase for the private key or pfx.<\/p>\n<\/li>\n<li><p><code>cert<\/code>: A string or <code>Buffer<\/code> containing the certificate key of the server in\nPEM format. (Required)<\/p>\n<\/li>\n<li><p><code>ca<\/code>: An array of strings or <code>Buffer<\/code>s of trusted certificates. If this is\nomitted several well known &quot;root&quot; CAs will be used, like VeriSign.\nThese are used to authorize connections.<\/p>\n<\/li>\n<li><p><code>crl<\/code> : Either a string or list of strings of PEM encoded CRLs (Certificate\nRevocation List)<\/p>\n<\/li>\n<li><p><code>ciphers<\/code>: A string describing the ciphers to use or exclude.<\/p>\n<p>To mitigate [BEAST attacks] it is recommended that you use this option in\nconjunction with the <code>honorCipherOrder<\/code> option described below to\nprioritize the non-CBC cipher.<\/p>\n<p>Defaults to\n<code>ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH<\/code>.\nConsult the [OpenSSL cipher list format documentation] for details on the\nformat.<\/p>\n<p><code>ECDHE-RSA-AES128-SHA256<\/code> and <code>AES128-GCM-SHA256<\/code> are used when node.js is\nlinked against OpenSSL 1.0.1 or newer and the client speaks TLS 1.2, RC4 is\nused as a secure fallback.<\/p>\n<p><strong>NOTE<\/strong>: Previous revisions of this section suggested <code>AES256-SHA<\/code> as an\nacceptable cipher. Unfortunately, <code>AES256-SHA<\/code> is a CBC cipher and therefore\nsusceptible to BEAST attacks. Do <em>not<\/em> use it.<\/p>\n<\/li>\n<li><p><code>handshakeTimeout<\/code>: Abort the connection if the SSL\/TLS handshake does not\nfinish in this many milliseconds. The default is 120 seconds.<\/p>\n<p>A <code>&#39;clientError&#39;<\/code> is emitted on the <code>tls.Server<\/code> object whenever a handshake\ntimes out.<\/p>\n<\/li>\n<li><p><code>honorCipherOrder<\/code> : When choosing a cipher, use the server&#39;s preferences\ninstead of the client preferences.<\/p>\n<p>Note that if SSLv2 is used, the server will send its list of preferences\nto the client, and the client chooses the cipher.<\/p>\n<p>Although, this option is disabled by default, it is <em>recommended<\/em> that you\nuse this option in conjunction with the <code>ciphers<\/code> option to mitigate\nBEAST attacks.<\/p>\n<\/li>\n<li><p><code>requestCert<\/code>: If <code>true<\/code> the server will request a certificate from\nclients that connect and attempt to verify that certificate. Default:\n<code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>rejectUnauthorized<\/code>: If <code>true<\/code> the server will reject any connection\nwhich is not authorized with the list of supplied CAs. This option only\nhas an effect if <code>requestCert<\/code> is <code>true<\/code>. Default: <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>NPNProtocols<\/code>: An array or <code>Buffer<\/code> of possible NPN protocols. (Protocols\nshould be ordered by their priority).<\/p>\n<\/li>\n<li><p><code>SNICallback<\/code>: A function that will be called if client supports SNI TLS\nextension. Only one argument will be passed to it: <code>servername<\/code>. And\n<code>SNICallback<\/code> should return SecureContext instance.\n(You can use <code>crypto.createCredentials(...).context<\/code> to get proper\nSecureContext). If <code>SNICallback<\/code> wasn&#39;t provided - default callback with\nhigh-level API will be used (see below).<\/p>\n<\/li>\n<li><p><code>sessionIdContext<\/code>: A string containing a opaque identifier for session\nresumption. If <code>requestCert<\/code> is <code>true<\/code>, the default is MD5 hash value\ngenerated from command-line. Otherwise, the default is not provided.<\/p>\n<\/li>\n<\/ul>\n<p>Here is a simple example echo server:\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\n\n  \/\/ This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  \/\/ This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&#39;server connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&#39;utf8&#39;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&#39;server bound&#39;);\n});<\/code><\/pre>\n<p>Or\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\n\n  \/\/ This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&#39;server connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&#39;utf8&#39;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&#39;server bound&#39;);\n});<\/code><\/pre>\n<p>You can test this server by connecting to it with <code>openssl s_client<\/code>:\n\n\n<\/p>\n<pre><code>openssl s_client -connect 127.0.0.1:8000<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_connect_options_callback","title":"tls.connect(options, [callback])","description":"<p>Creates a new client connection to the given <code>port<\/code> and <code>host<\/code> (old API) or\n<code>options.port<\/code> and <code>options.host<\/code>. (If <code>host<\/code> is omitted, it defaults to\n<code>localhost<\/code>.) <code>options<\/code> should be an object which specifies:\n\n<\/p>\n<ul>\n<li><p><code>host<\/code>: Host the client should connect to<\/p>\n<\/li>\n<li><p><code>port<\/code>: Port the client should connect to<\/p>\n<\/li>\n<li><p><code>socket<\/code>: Establish secure connection on a given socket rather than\ncreating a new socket. If this option is specified, <code>host<\/code> and <code>port<\/code>\nare ignored.<\/p>\n<\/li>\n<li><p><code>pfx<\/code>: A string or <code>Buffer<\/code> containing the private key, certificate and\nCA certs of the server in PFX or PKCS12 format.<\/p>\n<\/li>\n<li><p><code>key<\/code>: A string or <code>Buffer<\/code> containing the private key of the client in\nPEM format.<\/p>\n<\/li>\n<li><p><code>passphrase<\/code>: A string of passphrase for the private key or pfx.<\/p>\n<\/li>\n<li><p><code>cert<\/code>: A string or <code>Buffer<\/code> containing the certificate key of the client in\nPEM format.<\/p>\n<\/li>\n<li><p><code>ca<\/code>: An array of strings or <code>Buffer<\/code>s of trusted certificates. If this is\nomitted several well known &quot;root&quot; CAs will be used, like VeriSign.\nThese are used to authorize connections.<\/p>\n<\/li>\n<li><p><code>rejectUnauthorized<\/code>: If <code>true<\/code>, the server certificate is verified against\nthe list of supplied CAs. An <code>&#39;error&#39;<\/code> event is emitted if verification\nfails. Default: <code>true<\/code>.<\/p>\n<\/li>\n<li><p><code>NPNProtocols<\/code>: An array of string or <code>Buffer<\/code> containing supported NPN\nprotocols. <code>Buffer<\/code> should have following format: <code>0x05hello0x05world<\/code>,\nwhere first byte is next protocol name&#39;s length. (Passing array should\nusually be much simpler: <code>[&#39;hello&#39;, &#39;world&#39;]<\/code>.)<\/p>\n<\/li>\n<li><p><code>servername<\/code>: Servername for SNI (Server Name Indication) TLS extension.<\/p>\n<\/li>\n<\/ul>\n<p>The <code>callback<\/code> parameter will be added as a listener for the\n[&#39;secureConnect&#39;][] event.\n\n<\/p>\n<p><code>tls.connect()<\/code> returns a [CleartextStream][] object.\n\n<\/p>\n<p>Here is an example of a client of echo server as described previously:\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  \/\/ These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  \/\/ This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&#39;client connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&#39;utf8&#39;);\ncleartextStream.on(&#39;data&#39;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&#39;end&#39;, function() {\n  server.close();\n});<\/code><\/pre>\n<p>Or\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&#39;client connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&#39;utf8&#39;);\ncleartextStream.on(&#39;data&#39;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&#39;end&#39;, function() {\n  server.close();\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_connect_port_host_options_callback","title":"tls.connect(port, [host], [options], [callback])","description":"<p>Creates a new client connection to the given <code>port<\/code> and <code>host<\/code> (old API) or\n<code>options.port<\/code> and <code>options.host<\/code>. (If <code>host<\/code> is omitted, it defaults to\n<code>localhost<\/code>.) <code>options<\/code> should be an object which specifies:\n\n<\/p>\n<ul>\n<li><p><code>host<\/code>: Host the client should connect to<\/p>\n<\/li>\n<li><p><code>port<\/code>: Port the client should connect to<\/p>\n<\/li>\n<li><p><code>socket<\/code>: Establish secure connection on a given socket rather than\ncreating a new socket. If this option is specified, <code>host<\/code> and <code>port<\/code>\nare ignored.<\/p>\n<\/li>\n<li><p><code>pfx<\/code>: A string or <code>Buffer<\/code> containing the private key, certificate and\nCA certs of the server in PFX or PKCS12 format.<\/p>\n<\/li>\n<li><p><code>key<\/code>: A string or <code>Buffer<\/code> containing the private key of the client in\nPEM format.<\/p>\n<\/li>\n<li><p><code>passphrase<\/code>: A string of passphrase for the private key or pfx.<\/p>\n<\/li>\n<li><p><code>cert<\/code>: A string or <code>Buffer<\/code> containing the certificate key of the client in\nPEM format.<\/p>\n<\/li>\n<li><p><code>ca<\/code>: An array of strings or <code>Buffer<\/code>s of trusted certificates. If this is\nomitted several well known &quot;root&quot; CAs will be used, like VeriSign.\nThese are used to authorize connections.<\/p>\n<\/li>\n<li><p><code>rejectUnauthorized<\/code>: If <code>true<\/code>, the server certificate is verified against\nthe list of supplied CAs. An <code>&#39;error&#39;<\/code> event is emitted if verification\nfails. Default: <code>true<\/code>.<\/p>\n<\/li>\n<li><p><code>NPNProtocols<\/code>: An array of string or <code>Buffer<\/code> containing supported NPN\nprotocols. <code>Buffer<\/code> should have following format: <code>0x05hello0x05world<\/code>,\nwhere first byte is next protocol name&#39;s length. (Passing array should\nusually be much simpler: <code>[&#39;hello&#39;, &#39;world&#39;]<\/code>.)<\/p>\n<\/li>\n<li><p><code>servername<\/code>: Servername for SNI (Server Name Indication) TLS extension.<\/p>\n<\/li>\n<\/ul>\n<p>The <code>callback<\/code> parameter will be added as a listener for the\n[&#39;secureConnect&#39;][] event.\n\n<\/p>\n<p><code>tls.connect()<\/code> returns a [CleartextStream][] object.\n\n<\/p>\n<p>Here is an example of a client of echo server as described previously:\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  \/\/ These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  \/\/ This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&#39;client connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&#39;utf8&#39;);\ncleartextStream.on(&#39;data&#39;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&#39;end&#39;, function() {\n  server.close();\n});<\/code><\/pre>\n<p>Or\n\n<\/p>\n<pre><code>var tls = require(&#39;tls&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&#39;client connected&#39;,\n              cleartextStream.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&#39;utf8&#39;);\ncleartextStream.on(&#39;data&#39;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&#39;end&#39;, function() {\n  server.close();\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized","title":"tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])","description":"<p>Creates a new secure pair object with two streams, one of which reads\/writes\nencrypted data, and one reads\/writes cleartext data.\nGenerally the encrypted one is piped to\/from an incoming encrypted data stream,\nand the cleartext one is used as a replacement for the initial encrypted stream.\n\n<\/p>\n<ul>\n<li><p><code>credentials<\/code>: A credentials object from crypto.createCredentials( ... )<\/p>\n<\/li>\n<li><p><code>isServer<\/code>: A boolean indicating whether this tls connection should be\nopened as a server or a client.<\/p>\n<\/li>\n<li><p><code>requestCert<\/code>: A boolean indicating whether a server should request a\ncertificate from a connecting client. Only applies to server connections.<\/p>\n<\/li>\n<li><p><code>rejectUnauthorized<\/code>: A boolean indicating whether a server should\nautomatically reject clients with invalid certificates. Only applies to\nservers with <code>requestCert<\/code> enabled.<\/p>\n<\/li>\n<\/ul>\n<p><code>tls.createSecurePair()<\/code> returns a SecurePair object with [cleartext][] and\n<code>encrypted<\/code> stream properties.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_client_initiated_renegotiation_attack_mitigation","title":"Client-initiated renegotiation attack mitigation","description":"<p>The TLS protocol lets the client renegotiate certain aspects of the TLS session.\nUnfortunately, session renegotiation requires a disproportional amount of\nserver-side resources, which makes it a potential vector for denial-of-service\nattacks.\n\n<\/p>\n<p>To mitigate this, renegotiations are limited to three times every 10 minutes. An\nerror is emitted on the [CleartextStream][] instance when the threshold is\nexceeded. The limits are configurable:\n\n<\/p>\n<ul>\n<li><p><code>tls.CLIENT_RENEG_LIMIT<\/code>: renegotiation limit, default is 3.<\/p>\n<\/li>\n<li><p><code>tls.CLIENT_RENEG_WINDOW<\/code>: renegotiation window in seconds, default is<\/p>\n<pre><code>                       10 minutes.<\/code><\/pre>\n<\/li>\n<\/ul>\n<p>Don&#39;t change the defaults unless you know what you are doing.\n\n<\/p>\n<p>To test your server, connect to it with <code>openssl s_client -connect address:port<\/code>\nand tap <code>R&lt;CR&gt;<\/code> (that&#39;s the letter <code>R<\/code> followed by a carriage return) a few\ntimes.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_npn_and_sni","title":"NPN and SNI","description":"<p>NPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS\nhandshake extensions allowing you:\n\n<\/p>\n<ul>\n<li>NPN - to use one TLS server for multiple protocols (HTTP, SPDY)<\/li>\n<li>SNI - to use one TLS server for multiple hostnames with different SSL\ncertificates.<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stringdecoder","title":"StringDecoder","description":"<p>To use this module, do <code>require(&#39;string_decoder&#39;)<\/code>. StringDecoder decodes a\nbuffer to a string. It is a simple interface to <code>buffer.toString()<\/code> but provides\nadditional support for utf8.\n\n<\/p>\n<pre><code>var StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;\nvar decoder = new StringDecoder(&#39;utf8&#39;);\n\nvar cent = new Buffer([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nvar euro = new Buffer([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_system","title":"File System","description":"<p>File I\/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do <code>require(&#39;fs&#39;)<\/code>. All the methods have asynchronous and\nsynchronous forms.\n\n<\/p>\n<p>The asynchronous form always take a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be <code>null<\/code> or <code>undefined<\/code>.\n\n<\/p>\n<p>When using the synchronous form any exceptions are immediately thrown.\nYou can use try\/catch to handle exceptions or allow them to bubble up.\n\n<\/p>\n<p>Here is an example of the asynchronous version:\n\n<\/p>\n<pre><code>var fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;\/tmp\/hello&#39;, function (err) {\n  if (err) throw err;\n  console.log(&#39;successfully deleted \/tmp\/hello&#39;);\n});<\/code><\/pre>\n<p>Here is the synchronous version:\n\n<\/p>\n<pre><code>var fs = require(&#39;fs&#39;);\n\nfs.unlinkSync(&#39;\/tmp\/hello&#39;)\nconsole.log(&#39;successfully deleted \/tmp\/hello&#39;);<\/code><\/pre>\n<p>With the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:\n\n<\/p>\n<pre><code>fs.rename(&#39;\/tmp\/hello&#39;, &#39;\/tmp\/world&#39;, function (err) {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;\/tmp\/world&#39;, function (err, stats) {\n  if (err) throw err;\n  console.log(&#39;stats: &#39; + JSON.stringify(stats));\n});<\/code><\/pre>\n<p>It could be that <code>fs.stat<\/code> is executed before <code>fs.rename<\/code>.\nThe correct way to do this is to chain the callbacks.\n\n<\/p>\n<pre><code>fs.rename(&#39;\/tmp\/hello&#39;, &#39;\/tmp\/world&#39;, function (err) {\n  if (err) throw err;\n  fs.stat(&#39;\/tmp\/world&#39;, function (err, stats) {\n    if (err) throw err;\n    console.log(&#39;stats: &#39; + JSON.stringify(stats));\n  });\n});<\/code><\/pre>\n<p>In busy processes, the programmer is <em>strongly encouraged<\/em> to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.\n\n<\/p>\n<p>Relative path to filename can be used, remember however that this path will be\nrelative to <code>process.cwd()<\/code>.\n\n<\/p>\n<p>Most fs functions let you omit the callback argument. If you do, a default\ncallback is used that ignores errors, but prints a deprecation\nwarning.\n\n<\/p>\n<p><strong>IMPORTANT<\/strong>: Omitting the callback is deprecated.  v0.12 will throw the\nerrors as exceptions.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rename_oldpath_newpath_callback","title":"fs.rename(oldPath, newPath, callback)","description":"<p>Asynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_renamesync_oldpath_newpath","title":"fs.renameSync(oldPath, newPath)","description":"<p>Synchronous rename(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_ftruncate_fd_len_callback","title":"fs.ftruncate(fd, len, callback)","description":"<p>Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_ftruncatesync_fd_len","title":"fs.ftruncateSync(fd, len)","description":"<p>Synchronous ftruncate(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_truncate_path_len_callback","title":"fs.truncate(path, len, callback)","description":"<p>Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_truncatesync_path_len","title":"fs.truncateSync(path, len)","description":"<p>Synchronous truncate(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chown_path_uid_gid_callback","title":"fs.chown(path, uid, gid, callback)","description":"<p>Asynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chownsync_path_uid_gid","title":"fs.chownSync(path, uid, gid)","description":"<p>Synchronous chown(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchown_fd_uid_gid_callback","title":"fs.fchown(fd, uid, gid, callback)","description":"<p>Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchownsync_fd_uid_gid","title":"fs.fchownSync(fd, uid, gid)","description":"<p>Synchronous fchown(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchown_path_uid_gid_callback","title":"fs.lchown(path, uid, gid, callback)","description":"<p>Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchownsync_path_uid_gid","title":"fs.lchownSync(path, uid, gid)","description":"<p>Synchronous lchown(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chmod_path_mode_callback","title":"fs.chmod(path, mode, callback)","description":"<p>Asynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chmodsync_path_mode","title":"fs.chmodSync(path, mode)","description":"<p>Synchronous chmod(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchmod_fd_mode_callback","title":"fs.fchmod(fd, mode, callback)","description":"<p>Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchmodsync_fd_mode","title":"fs.fchmodSync(fd, mode)","description":"<p>Synchronous fchmod(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchmod_path_mode_callback","title":"fs.lchmod(path, mode, callback)","description":"<p>Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n\n<\/p>\n<p>Only available on Mac OS X.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchmodsync_path_mode","title":"fs.lchmodSync(path, mode)","description":"<p>Synchronous lchmod(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_stat_path_callback","title":"fs.stat(path, callback)","description":"<p>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)<\/code> where\n<code>stats<\/code> is a <a href=\"#fs_class_fs_stats\">fs.Stats<\/a> object.  See the <a href=\"#fs_class_fs_stats\">fs.Stats<\/a>\nsection below for more information.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lstat_path_callback","title":"fs.lstat(path, callback)","description":"<p>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)<\/code> where\n<code>stats<\/code> is a <code>fs.Stats<\/code> object. <code>lstat()<\/code> is identical to <code>stat()<\/code>, except that if\n<code>path<\/code> is a symbolic link, then the link itself is stat-ed, not the file that it\nrefers to.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fstat_fd_callback","title":"fs.fstat(fd, callback)","description":"<p>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)<\/code> where\n<code>stats<\/code> is a <code>fs.Stats<\/code> object. <code>fstat()<\/code> is identical to <code>stat()<\/code>, except that\nthe file to be stat-ed is specified by the file descriptor <code>fd<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_statsync_path","title":"fs.statSync(path)","description":"<p>Synchronous stat(2). Returns an instance of <code>fs.Stats<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lstatsync_path","title":"fs.lstatSync(path)","description":"<p>Synchronous lstat(2). Returns an instance of <code>fs.Stats<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fstatsync_fd","title":"fs.fstatSync(fd)","description":"<p>Synchronous fstat(2). Returns an instance of <code>fs.Stats<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_link_srcpath_dstpath_callback","title":"fs.link(srcpath, dstpath, callback)","description":"<p>Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_linksync_srcpath_dstpath","title":"fs.linkSync(srcpath, dstpath)","description":"<p>Synchronous link(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_symlink_srcpath_dstpath_type_callback","title":"fs.symlink(srcpath, dstpath, [type], callback)","description":"<p>Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback.\n<code>type<\/code> argument can be either <code>&#39;dir&#39;<\/code>, <code>&#39;file&#39;<\/code>, or <code>&#39;junction&#39;<\/code> (default is <code>&#39;file&#39;<\/code>).  It is only \nused on Windows (ignored on other platforms).\nNote that Windows junction points require the destination path to be absolute.  When using\n<code>&#39;junction&#39;<\/code>, the <code>destination<\/code> argument will automatically be normalized to absolute path.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_symlinksync_srcpath_dstpath_type","title":"fs.symlinkSync(srcpath, dstpath, [type])","description":"<p>Synchronous symlink(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readlink_path_callback","title":"fs.readlink(path, callback)","description":"<p>Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readlinksync_path","title":"fs.readlinkSync(path)","description":"<p>Synchronous readlink(2). Returns the symbolic link&#39;s string value.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpath_path_cache_callback","title":"fs.realpath(path, [cache], callback)","description":"<p>Asynchronous realpath(2). The <code>callback<\/code> gets two arguments <code>(err,\nresolvedPath)<\/code>. May use <code>process.cwd<\/code> to resolve relative paths. <code>cache<\/code> is an\nobject literal of mapped paths that can be used to force a specific path\nresolution or avoid additional <code>fs.stat<\/code> calls for known real paths.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var cache = {&#39;\/etc&#39;:&#39;\/private\/etc&#39;};\nfs.realpath(&#39;\/etc\/passwd&#39;, cache, function (err, resolvedPath) {\n  if (err) throw err;\n  console.log(resolvedPath);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpathsync_path_cache","title":"fs.realpathSync(path, [cache])","description":"<p>Synchronous realpath(2). Returns the resolved path.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unlink_path_callback","title":"fs.unlink(path, callback)","description":"<p>Asynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unlinksync_path","title":"fs.unlinkSync(path)","description":"<p>Synchronous unlink(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rmdir_path_callback","title":"fs.rmdir(path, callback)","description":"<p>Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rmdirsync_path","title":"fs.rmdirSync(path)","description":"<p>Synchronous rmdir(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdir_path_mode_callback","title":"fs.mkdir(path, [mode], callback)","description":"<p>Asynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback. <code>mode<\/code> defaults to <code>0777<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdirsync_path_mode","title":"fs.mkdirSync(path, [mode])","description":"<p>Synchronous mkdir(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readdir_path_callback","title":"fs.readdir(path, callback)","description":"<p>Asynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)<\/code> where <code>files<\/code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;<\/code> and <code>&#39;..&#39;<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readdirsync_path","title":"fs.readdirSync(path)","description":"<p>Synchronous readdir(3). Returns an array of filenames excluding <code>&#39;.&#39;<\/code> and\n<code>&#39;..&#39;<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_close_fd_callback","title":"fs.close(fd, callback)","description":"<p>Asynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_closesync_fd","title":"fs.closeSync(fd)","description":"<p>Synchronous close(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_open_path_flags_mode_callback","title":"fs.open(path, flags, [mode], callback)","description":"<p>Asynchronous file open. See open(2). <code>flags<\/code> can be:\n\n<\/p>\n<ul>\n<li><p><code>&#39;r&#39;<\/code> - Open file for reading.\nAn exception occurs if the file does not exist.<\/p>\n<\/li>\n<li><p><code>&#39;r+&#39;<\/code> - Open file for reading and writing.\nAn exception occurs if the file does not exist.<\/p>\n<\/li>\n<li><p><code>&#39;rs&#39;<\/code> - Open file for reading in synchronous mode. Instructs the operating\nsystem to bypass the local file system cache.<\/p>\n<p>This is primarily useful for opening files on NFS mounts as it allows you to\nskip the potentially stale local cache. It has a very real impact on I\/O\nperformance so don&#39;t use this mode unless you need it.<\/p>\n<p>Note that this doesn&#39;t turn <code>fs.open()<\/code> into a synchronous blocking call.\nIf that&#39;s what you want then you should be using <code>fs.openSync()<\/code><\/p>\n<\/li>\n<li><p><code>&#39;rs+&#39;<\/code> - Open file for reading and writing, telling the OS to open it\nsynchronously. See notes for <code>&#39;rs&#39;<\/code> about using this with caution.<\/p>\n<\/li>\n<li><p><code>&#39;w&#39;<\/code> - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).<\/p>\n<\/li>\n<li><p><code>&#39;wx&#39;<\/code> - Like <code>&#39;w&#39;<\/code> but opens the file in exclusive mode.<\/p>\n<\/li>\n<li><p><code>&#39;w+&#39;<\/code> - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).<\/p>\n<\/li>\n<li><p><code>&#39;wx+&#39;<\/code> - Like <code>&#39;w+&#39;<\/code> but opens the file in exclusive mode.<\/p>\n<\/li>\n<li><p><code>&#39;a&#39;<\/code> - Open file for appending.\nThe file is created if it does not exist.<\/p>\n<\/li>\n<li><p><code>&#39;ax&#39;<\/code> - Like <code>&#39;a&#39;<\/code> but opens the file in exclusive mode.<\/p>\n<\/li>\n<li><p><code>&#39;a+&#39;<\/code> - Open file for reading and appending.\nThe file is created if it does not exist.<\/p>\n<\/li>\n<li><p><code>&#39;ax+&#39;<\/code> - Like <code>&#39;a+&#39;<\/code> but opens the file in exclusive mode.<\/p>\n<\/li>\n<\/ul>\n<p><code>mode<\/code> defaults to <code>0666<\/code>. The callback gets two arguments <code>(err, fd)<\/code>.\n\n<\/p>\n<p>Exclusive mode (<code>O_EXCL<\/code>) ensures that <code>path<\/code> is newly created. <code>fs.open()<\/code>\nfails if a file by that name already exists. On POSIX systems, symlinks are\nnot followed. Exclusive mode may or may not work with network file systems.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_opensync_path_flags_mode","title":"fs.openSync(path, flags, [mode])","description":"<p>Synchronous open(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_utimes_path_atime_mtime_callback","title":"fs.utimes(path, atime, mtime, callback)","description":"<p>Change file timestamps of the file referenced by the supplied path.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_utimessync_path_atime_mtime","title":"fs.utimesSync(path, atime, mtime)","description":"<p>Change file timestamps of the file referenced by the supplied path.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_futimes_fd_atime_mtime_callback","title":"fs.futimes(fd, atime, mtime, callback)","description":"<p>Change the file timestamps of a file referenced by the supplied file\ndescriptor.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_futimessync_fd_atime_mtime","title":"fs.futimesSync(fd, atime, mtime)","description":"<p>Change the file timestamps of a file referenced by the supplied file\ndescriptor.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fsync_fd_callback","title":"fs.fsync(fd, callback)","description":"<p>Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fsyncsync_fd","title":"fs.fsyncSync(fd)","description":"<p>Synchronous fsync(2).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_write_fd_buffer_offset_length_position_callback","title":"fs.write(fd, buffer, offset, length, position, callback)","description":"<p>Write <code>buffer<\/code> to the file specified by <code>fd<\/code>.\n\n<\/p>\n<p><code>offset<\/code> and <code>length<\/code> determine the part of the buffer to be written.\n\n<\/p>\n<p><code>position<\/code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>position<\/code> is <code>null<\/code>, the data will be written at the\ncurrent position.\nSee pwrite(2).\n\n<\/p>\n<p>The callback will be given three arguments <code>(err, written, buffer)<\/code> where <code>written<\/code>\nspecifies how many <em>bytes<\/em> were written from <code>buffer<\/code>.\n\n<\/p>\n<p>Note that it is unsafe to use <code>fs.write<\/code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream<\/code> is strongly recommended.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writesync_fd_buffer_offset_length_position","title":"fs.writeSync(fd, buffer, offset, length, position)","description":"<p>Synchronous version of <code>fs.write()<\/code>. Returns the number of bytes written.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_read_fd_buffer_offset_length_position_callback","title":"fs.read(fd, buffer, offset, length, position, callback)","description":"<p>Read data from the file specified by <code>fd<\/code>.\n\n<\/p>\n<p><code>buffer<\/code> is the buffer that the data will be written to.\n\n<\/p>\n<p><code>offset<\/code> is offset within the buffer where reading will start.\n\n<\/p>\n<p><code>length<\/code> is an integer specifying the number of bytes to read.\n\n<\/p>\n<p><code>position<\/code> is an integer specifying where to begin reading from in the file.\nIf <code>position<\/code> is <code>null<\/code>, data will be read from the current file position.\n\n<\/p>\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readsync_fd_buffer_offset_length_position","title":"fs.readSync(fd, buffer, offset, length, position)","description":"<p>Synchronous version of <code>fs.read<\/code>. Returns the number of <code>bytesRead<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readfile_filename_options_callback","title":"fs.readFile(filename, [options], callback)","description":"<p>Asynchronously reads the entire contents of a file. Example:\n\n<\/p>\n<pre><code>fs.readFile(&#39;\/etc\/passwd&#39;, function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});<\/code><\/pre>\n<p>The callback is passed two arguments <code>(err, data)<\/code>, where <code>data<\/code> is the\ncontents of the file.\n\n<\/p>\n<p>If no encoding is specified, then the raw buffer is returned.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readfilesync_filename_options","title":"fs.readFileSync(filename, [options])","description":"<p>Synchronous version of <code>fs.readFile<\/code>. Returns the contents of the <code>filename<\/code>.\n\n<\/p>\n<p>If the <code>encoding<\/code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writefile_filename_data_options_callback","title":"fs.writeFile(filename, data, [options], callback)","description":"<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data<\/code> can be a string or a buffer.\n\n<\/p>\n<p>The <code>encoding<\/code> option is ignored if <code>data<\/code> is a buffer. It defaults\nto <code>&#39;utf8&#39;<\/code>.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node&#39;, function (err) {\n  if (err) throw err;\n  console.log(&#39;It\\&#39;s saved!&#39;);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writefilesync_filename_data_options","title":"fs.writeFileSync(filename, data, [options])","description":"<p>The synchronous version of <code>fs.writeFile<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_appendfile_filename_data_options_callback","title":"fs.appendFile(filename, data, [options], callback)","description":"<p>Asynchronously append data to a file, creating the file if it not yet exists.\n<code>data<\/code> can be a string or a buffer.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, function (err) {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_appendfilesync_filename_data_options","title":"fs.appendFileSync(filename, data, [options])","description":"<p>The synchronous version of <code>fs.appendFile<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_watchfile_filename_options_listener","title":"fs.watchFile(filename, [options], listener)","description":"<p>Watch for changes on <code>filename<\/code>. The callback <code>listener<\/code> will be called each\ntime the file is accessed.\n\n<\/p>\n<p>The second argument is optional. The <code>options<\/code> if provided should be an object\ncontaining two members a boolean, <code>persistent<\/code>, and <code>interval<\/code>. <code>persistent<\/code>\nindicates whether the process should continue to run as long as files are\nbeing watched. <code>interval<\/code> indicates how often the target should be polled,\nin milliseconds. The default is <code>{ persistent: true, interval: 5007 }<\/code>.\n\n<\/p>\n<p>The <code>listener<\/code> gets two arguments the current stat object and the previous\nstat object:\n\n<\/p>\n<pre><code>fs.watchFile(&#39;message.text&#39;, function (curr, prev) {\n  console.log(&#39;the current mtime is: &#39; + curr.mtime);\n  console.log(&#39;the previous mtime was: &#39; + prev.mtime);\n});<\/code><\/pre>\n<p>These stat objects are instances of <code>fs.Stat<\/code>.\n\n<\/p>\n<p>If you want to be notified when the file was modified, not just accessed\nyou need to compare <code>curr.mtime<\/code> and <code>prev.mtime<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unwatchfile_filename_listener","title":"fs.unwatchFile(filename, [listener])","description":"<p>Stop watching for changes on <code>filename<\/code>. If <code>listener<\/code> is specified, only that\nparticular listener is removed. Otherwise, <em>all<\/em> listeners are removed and you\nhave effectively stopped watching <code>filename<\/code>.\n\n<\/p>\n<p>Calling <code>fs.unwatchFile()<\/code> with a filename that is not being watched is a\nno-op, not an error.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_watch_filename_options_listener","title":"fs.watch(filename, [options], [listener])","description":"<p>Watch for changes on <code>filename<\/code>, where <code>filename<\/code> is either a file or a\ndirectory.  The returned object is a <a href=\"#fs_class_fs_fswatcher\">fs.FSWatcher<\/a>.\n\n<\/p>\n<p>The second argument is optional. The <code>options<\/code> if provided should be an object\ncontaining a boolean member <code>persistent<\/code>, which indicates whether the process\nshould continue to run as long as files are being watched. The default is\n<code>{ persistent: true }<\/code>.\n\n<\/p>\n<p>The listener callback gets two arguments <code>(event, filename)<\/code>.  <code>event<\/code> is either\n&#39;rename&#39; or &#39;change&#39;, and <code>filename<\/code> is the name of the file which triggered\nthe event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_caveats","title":"Caveats","description":"<p>The <code>fs.watch<\/code> API is not 100% consistent across platforms, and is\nunavailable in some situations.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_availability","title":"Availability","description":"<p>This feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.\n\n<\/p>\n<ul>\n<li>On Linux systems, this uses <code>inotify<\/code>.<\/li>\n<li>On BSD systems (including OS X), this uses <code>kqueue<\/code>.<\/li>\n<li>On SunOS systems (including Solaris and SmartOS), this uses <code>event ports<\/code>.<\/li>\n<li>On Windows systems, this feature depends on <code>ReadDirectoryChangesW<\/code>.<\/li>\n<\/ul>\n<p>If the underlying functionality is not available for some reason, then\n<code>fs.watch<\/code> will not be able to function.  For example, watching files or\ndirectories on network file systems (NFS, SMB, etc.) often doesn&#39;t work\nreliably or at all.\n\n<\/p>\n<p>You can still use <code>fs.watchFile<\/code>, which uses stat polling, but it is slower and\nless reliable.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_filename_argument","title":"Filename Argument","description":"<p>Providing <code>filename<\/code> argument in the callback is not supported\non every platform (currently it&#39;s only supported on Linux and Windows).  Even\non supported platforms <code>filename<\/code> is not always guaranteed to be provided.\nTherefore, don&#39;t assume that <code>filename<\/code> argument is always provided in the\ncallback, and have some fallback logic if it is null.\n\n<\/p>\n<pre><code>fs.watch(&#39;somedir&#39;, function (event, filename) {\n  console.log(&#39;event is: &#39; + event);\n  if (filename) {\n    console.log(&#39;filename provided: &#39; + filename);\n  } else {\n    console.log(&#39;filename not provided&#39;);\n  }\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_exists_path_callback","title":"fs.exists(path, callback)","description":"<p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback<\/code> argument with either true or false.  Example:\n\n<\/p>\n<pre><code>fs.exists(&#39;\/etc\/passwd&#39;, function (exists) {\n  util.debug(exists ? &quot;it&#39;s there&quot; : &quot;no passwd!&quot;);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_existssync_path","title":"fs.existsSync(path)","description":"<p>Synchronous version of <code>fs.exists<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_createreadstream_path_options","title":"fs.createReadStream(path, [options])","description":"<p>Returns a new ReadStream object (See <code>Readable Stream<\/code>).\n\n<\/p>\n<p><code>options<\/code> is an object with the following defaults:\n\n<\/p>\n<pre><code>{ flags: &#39;r&#39;,\n  encoding: null,\n  fd: null,\n  mode: 0666,\n  bufferSize: 64 * 1024,\n  autoClose: true\n}<\/code><\/pre>\n<p><code>options<\/code> can include <code>start<\/code> and <code>end<\/code> values to read a range of bytes from\nthe file instead of the entire file.  Both <code>start<\/code> and <code>end<\/code> are inclusive and\nstart at 0. The <code>encoding<\/code> can be <code>&#39;utf8&#39;<\/code>, <code>&#39;ascii&#39;<\/code>, or <code>&#39;base64&#39;<\/code>.\n\n<\/p>\n<p>If <code>autoClose<\/code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error.  It is your responsiblity to close it and make sure\nthere&#39;s no file descriptor leak.  If <code>autoClose<\/code> is set to true (default\nbehavior), on <code>error<\/code> or <code>end<\/code> the file descriptor will be closed\nautomatically.\n\n<\/p>\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:\n\n<\/p>\n<pre><code>fs.createReadStream(&#39;sample.txt&#39;, {start: 90, end: 99});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_createwritestream_path_options","title":"fs.createWriteStream(path, [options])","description":"<p>Returns a new WriteStream object (See <code>Writable Stream<\/code>).\n\n<\/p>\n<p><code>options<\/code> is an object with the following defaults:\n\n<\/p>\n<pre><code>{ flags: &#39;w&#39;,\n  encoding: null,\n  mode: 0666 }<\/code><\/pre>\n<p><code>options<\/code> may also include a <code>start<\/code> option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a <code>flags<\/code> mode of <code>r+<\/code> rather than the\ndefault mode <code>w<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path","title":"Path","description":"<p>This module contains utilities for handling and transforming file\npaths.  Almost all these methods perform only string transformations.\nThe file system is not consulted to check whether paths are valid.\n\n<\/p>\n<p>Use <code>require(&#39;path&#39;)<\/code> to use this module.  The following methods are provided:\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_normalize_p","title":"path.normalize(p)","description":"<p>Normalize a string path, taking care of <code>&#39;..&#39;<\/code> and <code>&#39;.&#39;<\/code> parts.\n\n<\/p>\n<p>When multiple slashes are found, they&#39;re replaced by a single one;\nwhen the path contains a trailing slash, it is preserved.\nOn Windows backslashes are used.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>path.normalize(&#39;\/foo\/bar\/\/baz\/asdf\/quux\/..&#39;)\n\/\/ returns\n&#39;\/foo\/bar\/baz\/asdf&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_join_path1_path2","title":"path.join([path1], [path2], [...])","description":"<p>Join all arguments together and normalize the resulting path.\n\n<\/p>\n<p>Arguments must be strings.  In v0.8, non-string arguments were\nsilently ignored.  In v0.10 and up, an exception is thrown.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>path.join(&#39;\/foo&#39;, &#39;bar&#39;, &#39;baz\/asdf&#39;, &#39;quux&#39;, &#39;..&#39;)\n\/\/ returns\n&#39;\/foo\/bar\/baz\/asdf&#39;\n\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;)\n\/\/ returns\n&#39;foo\/bar&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_resolve_from_to","title":"path.resolve([from ...], to)","description":"<p>Resolves <code>to<\/code> to an absolute path.\n\n<\/p>\n<p>If <code>to<\/code> isn&#39;t already absolute <code>from<\/code> arguments are prepended in right to left\norder, until an absolute path is found. If after using all <code>from<\/code> paths still\nno absolute path is found, the current working directory is used as well. The\nresulting path is normalized, and trailing slashes are removed unless the path\ngets resolved to the root directory. Non-string arguments are ignored.\n\n<\/p>\n<p>Another way to think of it is as a sequence of <code>cd<\/code> commands in a shell.\n\n<\/p>\n<pre><code>path.resolve(&#39;foo\/bar&#39;, &#39;\/tmp\/file\/&#39;, &#39;..&#39;, &#39;a\/..\/subfile&#39;)<\/code><\/pre>\n<p>Is similar to:\n\n<\/p>\n<pre><code>cd foo\/bar\ncd \/tmp\/file\/\ncd ..\ncd a\/..\/subfile\npwd<\/code><\/pre>\n<p>The difference is that the different paths don&#39;t need to exist and may also be\nfiles.\n\n<\/p>\n<p>Examples:\n\n<\/p>\n<pre><code>path.resolve(&#39;\/foo\/bar&#39;, &#39;.\/baz&#39;)\n\/\/ returns\n&#39;\/foo\/bar\/baz&#39;\n\npath.resolve(&#39;\/foo\/bar&#39;, &#39;\/tmp\/file\/&#39;)\n\/\/ returns\n&#39;\/tmp\/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files\/png\/&#39;, &#39;..\/gif\/image.gif&#39;)\n\/\/ if currently in \/home\/myself\/node, it returns\n&#39;\/home\/myself\/node\/wwwroot\/static_files\/gif\/image.gif&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_relative_from_to","title":"path.relative(from, to)","description":"<p>Solve the relative path from <code>from<\/code> to <code>to<\/code>.\n\n<\/p>\n<p>At times we have two absolute paths, and we need to derive the relative\npath from one to the other.  This is actually the reverse transform of\n<code>path.resolve<\/code>, which means we see that:\n\n<\/p>\n<pre><code>path.resolve(from, path.relative(from, to)) == path.resolve(to)<\/code><\/pre>\n<p>Examples:\n\n<\/p>\n<pre><code>path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;, &#39;C:\\\\orandea\\\\impl\\\\bbb&#39;)\n\/\/ returns\n&#39;..\\\\..\\\\impl\\\\bbb&#39;\n\npath.relative(&#39;\/data\/orandea\/test\/aaa&#39;, &#39;\/data\/orandea\/impl\/bbb&#39;)\n\/\/ returns\n&#39;..\/..\/impl\/bbb&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_dirname_p","title":"path.dirname(p)","description":"<p>Return the directory name of a path.  Similar to the Unix <code>dirname<\/code> command.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>path.dirname(&#39;\/foo\/bar\/baz\/asdf\/quux&#39;)\n\/\/ returns\n&#39;\/foo\/bar\/baz\/asdf&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_basename_p_ext","title":"path.basename(p, [ext])","description":"<p>Return the last portion of a path.  Similar to the Unix <code>basename<\/code> command.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>path.basename(&#39;\/foo\/bar\/baz\/asdf\/quux.html&#39;)\n\/\/ returns\n&#39;quux.html&#39;\n\npath.basename(&#39;\/foo\/bar\/baz\/asdf\/quux.html&#39;, &#39;.html&#39;)\n\/\/ returns\n&#39;quux&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_extname_p","title":"path.extname(p)","description":"<p>Return the extension of the path, from the last &#39;.&#39; to end of string\nin the last portion of the path.  If there is no &#39;.&#39; in the last portion\nof the path or the first character of it is &#39;.&#39;, then it returns\nan empty string.  Examples:\n\n<\/p>\n<pre><code>path.extname(&#39;index.html&#39;)\n\/\/ returns\n&#39;.html&#39;\n\npath.extname(&#39;index.&#39;)\n\/\/ returns\n&#39;.&#39;\n\npath.extname(&#39;index&#39;)\n\/\/ returns\n&#39;&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net","title":"net","description":"<p>The <code>net<\/code> module provides you with an asynchronous network wrapper. It contains\nmethods for creating both servers and clients (called streams). You can include\nthis module with <code>require(&#39;net&#39;);<\/code>\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createserver_options_connectionlistener","title":"net.createServer([options], [connectionListener])","description":"<p>Creates a new TCP server. The <code>connectionListener<\/code> argument is\nautomatically set as a listener for the [&#39;connection&#39;][] event.\n\n<\/p>\n<p><code>options<\/code> is an object with the following defaults:\n\n<\/p>\n<pre><code>{ allowHalfOpen: false\n}<\/code><\/pre>\n<p>If <code>allowHalfOpen<\/code> is <code>true<\/code>, then the socket won&#39;t automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the <code>end()<\/code> method explicitly.\nSee [&#39;end&#39;][] event for more information.\n\n<\/p>\n<p>Here is an example of an echo server which listens for connections\non port 8124:\n\n<\/p>\n<pre><code>var net = require(&#39;net&#39;);\nvar server = net.createServer(function(c) { \/\/&#39;connection&#39; listener\n  console.log(&#39;server connected&#39;);\n  c.on(&#39;end&#39;, function() {\n    console.log(&#39;server disconnected&#39;);\n  });\n  c.write(&#39;hello\\r\\n&#39;);\n  c.pipe(c);\n});\nserver.listen(8124, function() { \/\/&#39;listening&#39; listener\n  console.log(&#39;server bound&#39;);\n});<\/code><\/pre>\n<p>Test this by using <code>telnet<\/code>:\n\n<\/p>\n<pre><code>telnet localhost 8124<\/code><\/pre>\n<p>To listen on the socket <code>\/tmp\/echo.sock<\/code> the third line from the last would\njust be changed to\n\n<\/p>\n<pre><code>server.listen(&#39;\/tmp\/echo.sock&#39;, function() { \/\/&#39;listening&#39; listener<\/code><\/pre>\n<p>Use <code>nc<\/code> to connect to a UNIX domain socket server:\n\n<\/p>\n<pre><code>nc -U \/tmp\/echo.sock<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_options_connectionlistener","title":"net.connect(options, [connectionListener])","description":"<p>Constructs a new socket object and opens the socket to the given location.\nWhen the socket is established, the [&#39;connect&#39;][] event will be emitted.\n\n<\/p>\n<p>For TCP sockets, <code>options<\/code> argument should be an object which specifies:\n\n<\/p>\n<ul>\n<li><p><code>port<\/code>: Port the client should connect to (Required).<\/p>\n<\/li>\n<li><p><code>host<\/code>: Host the client should connect to. Defaults to <code>&#39;localhost&#39;<\/code>.<\/p>\n<\/li>\n<li><p><code>localAddress<\/code>: Local interface to bind to for network connections.<\/p>\n<\/li>\n<\/ul>\n<p>For UNIX domain sockets, <code>options<\/code> argument should be an object which specifies:\n\n<\/p>\n<ul>\n<li><code>path<\/code>: Path the client should connect to (Required).<\/li>\n<\/ul>\n<p>Common options are:\n\n<\/p>\n<ul>\n<li><code>allowHalfOpen<\/code>: if <code>true<\/code>, the socket won&#39;t automatically send\na FIN packet when the other end of the socket sends a FIN packet.\nDefaults to <code>false<\/code>.  See [&#39;end&#39;][] event for more information.<\/li>\n<\/ul>\n<p>The <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n<p>Here is an example of a client of echo server as described previously:\n\n<\/p>\n<pre><code>var net = require(&#39;net&#39;);\nvar client = net.connect({port: 8124},\n    function() { \/\/&#39;connect&#39; listener\n  console.log(&#39;client connected&#39;);\n  client.write(&#39;world!\\r\\n&#39;);\n});\nclient.on(&#39;data&#39;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, function() {\n  console.log(&#39;client disconnected&#39;);\n});<\/code><\/pre>\n<p>To connect on the socket <code>\/tmp\/echo.sock<\/code> the second line would just be\nchanged to\n\n<\/p>\n<pre><code>var client = net.connect({path: &#39;\/tmp\/echo.sock&#39;},<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_options_connectionlistener","title":"net.createConnection(options, [connectionListener])","description":"<p>Constructs a new socket object and opens the socket to the given location.\nWhen the socket is established, the [&#39;connect&#39;][] event will be emitted.\n\n<\/p>\n<p>For TCP sockets, <code>options<\/code> argument should be an object which specifies:\n\n<\/p>\n<ul>\n<li><p><code>port<\/code>: Port the client should connect to (Required).<\/p>\n<\/li>\n<li><p><code>host<\/code>: Host the client should connect to. Defaults to <code>&#39;localhost&#39;<\/code>.<\/p>\n<\/li>\n<li><p><code>localAddress<\/code>: Local interface to bind to for network connections.<\/p>\n<\/li>\n<\/ul>\n<p>For UNIX domain sockets, <code>options<\/code> argument should be an object which specifies:\n\n<\/p>\n<ul>\n<li><code>path<\/code>: Path the client should connect to (Required).<\/li>\n<\/ul>\n<p>Common options are:\n\n<\/p>\n<ul>\n<li><code>allowHalfOpen<\/code>: if <code>true<\/code>, the socket won&#39;t automatically send\na FIN packet when the other end of the socket sends a FIN packet.\nDefaults to <code>false<\/code>.  See [&#39;end&#39;][] event for more information.<\/li>\n<\/ul>\n<p>The <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n<p>Here is an example of a client of echo server as described previously:\n\n<\/p>\n<pre><code>var net = require(&#39;net&#39;);\nvar client = net.connect({port: 8124},\n    function() { \/\/&#39;connect&#39; listener\n  console.log(&#39;client connected&#39;);\n  client.write(&#39;world!\\r\\n&#39;);\n});\nclient.on(&#39;data&#39;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, function() {\n  console.log(&#39;client disconnected&#39;);\n});<\/code><\/pre>\n<p>To connect on the socket <code>\/tmp\/echo.sock<\/code> the second line would just be\nchanged to\n\n<\/p>\n<pre><code>var client = net.connect({path: &#39;\/tmp\/echo.sock&#39;},<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_port_host_connectlistener","title":"net.connect(port, [host], [connectListener])","description":"<p>Creates a TCP connection to <code>port<\/code> on <code>host<\/code>. If <code>host<\/code> is omitted,\n<code>&#39;localhost&#39;<\/code> will be assumed.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_port_host_connectlistener","title":"net.createConnection(port, [host], [connectListener])","description":"<p>Creates a TCP connection to <code>port<\/code> on <code>host<\/code>. If <code>host<\/code> is omitted,\n<code>&#39;localhost&#39;<\/code> will be assumed.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_path_connectlistener","title":"net.connect(path, [connectListener])","description":"<p>Creates unix socket connection to <code>path<\/code>.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_path_connectlistener","title":"net.createConnection(path, [connectListener])","description":"<p>Creates unix socket connection to <code>path<\/code>.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isip_input","title":"net.isIP(input)","description":"<p>Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isipv4_input","title":"net.isIPv4(input)","description":"<p>Returns true if input is a version 4 IP address, otherwise returns false.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isipv6_input","title":"net.isIPv6(input)","description":"<p>Returns true if input is a version 6 IP address, otherwise returns false.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_udp_datagram_sockets","title":"UDP \/ Datagram Sockets","description":"<p>Datagram sockets are available through <code>require(&#39;dgram&#39;)<\/code>.\n\n<\/p>\n<p>Important note: the behavior of <code>dgram.Socket#bind()<\/code> has changed in v0.10\nand is always asynchronous now.  If you have code that looks like this:\n\n<\/p>\n<pre><code>var s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234);\ns.addMembership(&#39;224.0.0.114&#39;);<\/code><\/pre>\n<p>You have to change it to this:\n\n<\/p>\n<pre><code>var s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234, function() {\n  s.addMembership(&#39;224.0.0.114&#39;);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dgram_createsocket_type_callback","title":"dgram.createSocket(type, [callback])","description":"<p>Creates a datagram Socket of the specified types.  Valid types are <code>udp4<\/code>\nand <code>udp6<\/code>.\n\n<\/p>\n<p>Takes an optional callback which is added as a listener for <code>message<\/code> events.\n\n<\/p>\n<p>Call <code>socket.bind<\/code> if you want to receive datagrams. <code>socket.bind()<\/code> will bind\nto the &quot;all interfaces&quot; address on a random port (it does the right thing for\nboth <code>udp4<\/code> and <code>udp6<\/code> sockets). You can then retrieve the address and port\nwith <code>socket.address().address<\/code> and <code>socket.address().port<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns","title":"DNS","description":"<p>Use <code>require(&#39;dns&#39;)<\/code> to access this module. All methods in the dns module\nuse C-Ares except for <code>dns.lookup<\/code> which uses <code>getaddrinfo(3)<\/code> in a thread\npool. C-Ares is much faster than <code>getaddrinfo<\/code> but the system resolver is\nmore constant with how other programs operate. When a user does\n<code>net.connect(80, &#39;google.com&#39;)<\/code> or <code>http.get({ host: &#39;google.com&#39; })<\/code> the\n<code>dns.lookup<\/code> method is used. Users who need to do a large number of look ups\nquickly should use the methods that go through C-Ares.\n\n<\/p>\n<p>Here is an example which resolves <code>&#39;www.google.com&#39;<\/code> then reverse\nresolves the IP addresses which are returned.\n\n<\/p>\n<pre><code>var dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;www.google.com&#39;, function (err, addresses) {\n  if (err) throw err;\n\n  console.log(&#39;addresses: &#39; + JSON.stringify(addresses));\n\n  addresses.forEach(function (a) {\n    dns.reverse(a, function (err, domains) {\n      if (err) {\n        throw err;\n      }\n\n      console.log(&#39;reverse for &#39; + a + &#39;: &#39; + JSON.stringify(domains));\n    });\n  });\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_lookup_domain_family_callback","title":"dns.lookup(domain, [family], callback)","description":"<p>Resolves a domain (e.g. <code>&#39;google.com&#39;<\/code>) into the first found A (IPv4) or\nAAAA (IPv6) record.\nThe <code>family<\/code> can be the integer <code>4<\/code> or <code>6<\/code>. Defaults to <code>null<\/code> that indicates\nboth Ip v4 and v6 address family.\n\n<\/p>\n<p>The callback has arguments <code>(err, address, family)<\/code>.  The <code>address<\/code> argument\nis a string representation of a IP v4 or v6 address. The <code>family<\/code> argument\nis either the integer 4 or 6 and denotes the family of <code>address<\/code> (not\nnecessarily the value initially passed to <code>lookup<\/code>).\n\n<\/p>\n<p>On error, <code>err<\/code> is an <code>Error<\/code> object, where <code>err.code<\/code> is the error code.\nKeep in mind that <code>err.code<\/code> will be set to <code>&#39;ENOENT&#39;<\/code> not only when\nthe domain does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve_domain_rrtype_callback","title":"dns.resolve(domain, [rrtype], callback)","description":"<p>Resolves a domain (e.g. <code>&#39;google.com&#39;<\/code>) into an array of the record types\nspecified by rrtype. Valid rrtypes are <code>&#39;A&#39;<\/code> (IPV4 addresses, default),\n<code>&#39;AAAA&#39;<\/code> (IPV6 addresses), <code>&#39;MX&#39;<\/code> (mail exchange records), <code>&#39;TXT&#39;<\/code> (text\nrecords), <code>&#39;SRV&#39;<\/code> (SRV records), <code>&#39;PTR&#39;<\/code> (used for reverse IP lookups),\n<code>&#39;NS&#39;<\/code> (name server records) and <code>&#39;CNAME&#39;<\/code> (canonical name records).\n\n<\/p>\n<p>The callback has arguments <code>(err, addresses)<\/code>.  The type of each item\nin <code>addresses<\/code> is determined by the record type, and described in the\ndocumentation for the corresponding lookup methods below.\n\n<\/p>\n<p>On error, <code>err<\/code> is an <code>Error<\/code> object, where <code>err.code<\/code> is\none of the error codes listed below.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve4_domain_callback","title":"dns.resolve4(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for IPv4 queries (<code>A<\/code> records).\n<code>addresses<\/code> is an array of IPv4 addresses (e.g.\n<code>[&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve6_domain_callback","title":"dns.resolve6(domain, callback)","description":"<p>The same as <code>dns.resolve4()<\/code> except for IPv6 queries (an <code>AAAA<\/code> query).\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvemx_domain_callback","title":"dns.resolveMx(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for mail exchange queries (<code>MX<\/code> records).\n\n<\/p>\n<p><code>addresses<\/code> is an array of MX records, each with a priority and an exchange\nattribute (e.g. <code>[{&#39;priority&#39;: 10, &#39;exchange&#39;: &#39;mx.example.com&#39;},...]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvetxt_domain_callback","title":"dns.resolveTxt(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for text queries (<code>TXT<\/code> records).\n<code>addresses<\/code> is an array of the text records available for <code>domain<\/code> (e.g.,\n<code>[&#39;v=spf1 ip4:0.0.0.0 ~all&#39;]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvesrv_domain_callback","title":"dns.resolveSrv(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for service records (<code>SRV<\/code> records).\n<code>addresses<\/code> is an array of the SRV records available for <code>domain<\/code>. Properties\nof SRV records are priority, weight, port, and name (e.g.,\n<code>[{&#39;priority&#39;: 10, {&#39;weight&#39;: 5, &#39;port&#39;: 21223, &#39;name&#39;: &#39;service.example.com&#39;}, ...]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvens_domain_callback","title":"dns.resolveNs(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for name server records (<code>NS<\/code> records).\n<code>addresses<\/code> is an array of the name server records available for <code>domain<\/code>\n(e.g., <code>[&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvecname_domain_callback","title":"dns.resolveCname(domain, callback)","description":"<p>The same as <code>dns.resolve()<\/code>, but only for canonical name records (<code>CNAME<\/code>\nrecords). <code>addresses<\/code> is an array of the canonical name records available for\n<code>domain<\/code> (e.g., <code>[&#39;bar.example.com&#39;]<\/code>).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_reverse_ip_callback","title":"dns.reverse(ip, callback)","description":"<p>Reverse resolves an ip address to an array of domain names.\n\n<\/p>\n<p>The callback has arguments <code>(err, domains)<\/code>.\n\n<\/p>\n<p>On error, <code>err<\/code> is an <code>Error<\/code> object, where <code>err.code<\/code> is\none of the error codes listed below.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_codes","title":"Error codes","description":"<p>Each DNS query can return one of the following error codes:\n\n<\/p>\n<ul>\n<li><code>dns.NODATA<\/code>: DNS server returned answer with no data.<\/li>\n<li><code>dns.FORMERR<\/code>: DNS server claims query was misformatted.<\/li>\n<li><code>dns.SERVFAIL<\/code>: DNS server returned general failure.<\/li>\n<li><code>dns.NOTFOUND<\/code>: Domain name not found.<\/li>\n<li><code>dns.NOTIMP<\/code>: DNS server does not implement requested operation.<\/li>\n<li><code>dns.REFUSED<\/code>: DNS server refused query.<\/li>\n<li><code>dns.BADQUERY<\/code>: Misformatted DNS query.<\/li>\n<li><code>dns.BADNAME<\/code>: Misformatted domain name.<\/li>\n<li><code>dns.BADFAMILY<\/code>: Unsupported address family.<\/li>\n<li><code>dns.BADRESP<\/code>: Misformatted DNS reply.<\/li>\n<li><code>dns.CONNREFUSED<\/code>: Could not contact DNS servers.<\/li>\n<li><code>dns.TIMEOUT<\/code>: Timeout while contacting DNS servers.<\/li>\n<li><code>dns.EOF<\/code>: End of file.<\/li>\n<li><code>dns.FILE<\/code>: Error reading file.<\/li>\n<li><code>dns.NOMEM<\/code>: Out of memory.<\/li>\n<li><code>dns.DESTRUCTION<\/code>: Channel is being destroyed.<\/li>\n<li><code>dns.BADSTR<\/code>: Misformatted string.<\/li>\n<li><code>dns.BADFLAGS<\/code>: Illegal flags specified.<\/li>\n<li><code>dns.NONAME<\/code>: Given hostname is not numeric.<\/li>\n<li><code>dns.BADHINTS<\/code>: Illegal hints flags specified.<\/li>\n<li><code>dns.NOTINITIALIZED<\/code>: c-ares library initialization not yet performed.<\/li>\n<li><code>dns.LOADIPHLPAPI<\/code>: Error loading iphlpapi.dll.<\/li>\n<li><code>dns.ADDRGETNETWORKPARAMS<\/code>: Could not find GetNetworkParams function.<\/li>\n<li><code>dns.CANCELLED<\/code>: DNS query cancelled.<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http","title":"HTTP","description":"<p>To use the HTTP server and client one must <code>require(&#39;http&#39;)<\/code>.\n\n<\/p>\n<p>The HTTP interfaces in Node are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.\n\n<\/p>\n<p>HTTP message headers are represented by an object like this:\n\n<\/p>\n<pre><code>{ &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text\/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;accept&#39;: &#39;*\/*&#39; }<\/code><\/pre>\n<p>Keys are lowercased. Values are not modified.\n\n<\/p>\n<p>In order to support the full spectrum of possible HTTP applications, Node&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_createserver_requestlistener","title":"http.createServer([requestListener])","description":"<p>Returns a new web server object.\n\n<\/p>\n<p>The <code>requestListener<\/code> is a function which is automatically\nadded to the <code>&#39;request&#39;<\/code> event.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_createclient_port_host","title":"http.createClient([port], [host])","description":"<p>This function is <strong>deprecated<\/strong>; please use [http.request()][] instead.\nConstructs a new HTTP client. <code>port<\/code> and <code>host<\/code> refer to the server to be\nconnected to.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_request_options_callback","title":"http.request(options, callback)","description":"<p>Node maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.\n\n<\/p>\n<p><code>options<\/code> can be an object or a string. If <code>options<\/code> is a string, it is\nautomatically parsed with [url.parse()][].\n\n<\/p>\n<p>Options:\n\n<\/p>\n<ul>\n<li><code>host<\/code>: A domain name or IP address of the server to issue the request to.\nDefaults to <code>&#39;localhost&#39;<\/code>.<\/li>\n<li><code>hostname<\/code>: To support <code>url.parse()<\/code> <code>hostname<\/code> is preferred over <code>host<\/code><\/li>\n<li><code>port<\/code>: Port of remote server. Defaults to 80.<\/li>\n<li><code>localAddress<\/code>: Local interface to bind for network connections.<\/li>\n<li><code>socketPath<\/code>: Unix Domain Socket (use one of host:port or socketPath)<\/li>\n<li><code>method<\/code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;<\/code>.<\/li>\n<li><code>path<\/code>: Request path. Defaults to <code>&#39;\/&#39;<\/code>. Should include query string if any.\nE.G. <code>&#39;\/index.html?page=12&#39;<\/code><\/li>\n<li><code>headers<\/code>: An object containing request headers.<\/li>\n<li><code>auth<\/code>: Basic authentication i.e. <code>&#39;user:password&#39;<\/code> to compute an\nAuthorization header.<\/li>\n<li><code>agent<\/code>: Controls [Agent][] behavior. When an Agent is used request will\ndefault to <code>Connection: keep-alive<\/code>. Possible values:<ul>\n<li><code>undefined<\/code> (default): use [global Agent][] for this host and port.<\/li>\n<li><code>Agent<\/code> object: explicitly use the passed in <code>Agent<\/code>.<\/li>\n<li><code>false<\/code>: opts out of connection pooling with an Agent, defaults request to\n<code>Connection: close<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p><code>http.request()<\/code> returns an instance of the <code>http.ClientRequest<\/code>\nclass. The <code>ClientRequest<\/code> instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the <code>ClientRequest<\/code> object.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;\/upload&#39;,\n  method: &#39;POST&#39;\n};\n\nvar req = http.request(options, function(res) {\n  console.log(&#39;STATUS: &#39; + res.statusCode);\n  console.log(&#39;HEADERS: &#39; + JSON.stringify(res.headers));\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, function (chunk) {\n    console.log(&#39;BODY: &#39; + chunk);\n  });\n});\n\nreq.on(&#39;error&#39;, function(e) {\n  console.log(&#39;problem with request: &#39; + e.message);\n});\n\n\/\/ write data to request body\nreq.write(&#39;data\\n&#39;);\nreq.write(&#39;data\\n&#39;);\nreq.end();<\/code><\/pre>\n<p>Note that in the example <code>req.end()<\/code> was called. With <code>http.request()<\/code> one\nmust always call <code>req.end()<\/code> to signify that you&#39;re done with the request -\neven if there is no data being written to the request body.\n\n<\/p>\n<p>If any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an <code>&#39;error&#39;<\/code> event is emitted\non the returned request object.\n\n<\/p>\n<p>There are a few special headers that should be noted.\n\n<\/p>\n<ul>\n<li><p>Sending a &#39;Connection: keep-alive&#39; will notify Node that the connection to\nthe server should be persisted until the next request.<\/p>\n<\/li>\n<li><p>Sending a &#39;Content-length&#39; header will disable the default chunked encoding.<\/p>\n<\/li>\n<li><p>Sending an &#39;Expect&#39; header will immediately send the request headers.\nUsually, when sending &#39;Expect: 100-continue&#39;, you should both set a timeout\nand listen for the <code>continue<\/code> event. See RFC2616 Section 8.2.3 for more\ninformation.<\/p>\n<\/li>\n<li><p>Sending an Authorization header will override using the <code>auth<\/code> option\nto compute basic authentication.<\/p>\n<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_get_options_callback","title":"http.get(options, callback)","description":"<p>Since most requests are GET requests without bodies, Node provides this\nconvenience method. The only difference between this method and <code>http.request()<\/code>\nis that it sets the method to GET and calls <code>req.end()<\/code> automatically.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>http.get(&quot;http:\/\/www.google.com\/index.html&quot;, function(res) {\n  console.log(&quot;Got response: &quot; + res.statusCode);\n}).on(&#39;error&#39;, function(e) {\n  console.log(&quot;Got error: &quot; + e.message);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https","title":"HTTPS","description":"<p>HTTPS is the HTTP protocol over TLS\/SSL. In Node this is implemented as a\nseparate module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_createserver_options_requestlistener","title":"https.createServer(options, [requestListener])","description":"<p>Returns a new HTTPS web server object. The <code>options<\/code> is similar to\n[tls.createServer()][].  The <code>requestListener<\/code> is a function which is\nautomatically added to the <code>&#39;request&#39;<\/code> event.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>\/\/ curl -k https:\/\/localhost:8000\/\nvar https = require(&#39;https&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);<\/code><\/pre>\n<p>Or\n\n<\/p>\n<pre><code>var https = require(&#39;https&#39;);\nvar fs = require(&#39;fs&#39;);\n\nvar options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_server_listen_path_callback","title":"server.listen(path, [callback])","description":"<p>See [http.listen()][] for details.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_server_listen_handle_callback","title":"server.listen(handle, [callback])","description":"<p>See [http.listen()][] for details.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_server_close_callback","title":"server.close([callback])","description":"<p>See [http.close()][] for details.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_request_options_callback","title":"https.request(options, callback)","description":"<p>Makes a request to a secure web server.\n\n<\/p>\n<p><code>options<\/code> can be an object or a string. If <code>options<\/code> is a string, it is\nautomatically parsed with <a href=\"url.html#url.parse\">url.parse()<\/a>.\n\n<\/p>\n<p>All options from [http.request()][] are valid.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var https = require(&#39;https&#39;);\n\nvar options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;\/&#39;,\n  method: &#39;GET&#39;\n};\n\nvar req = https.request(options, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&#39;data&#39;, function(d) {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&#39;error&#39;, function(e) {\n  console.error(e);\n});<\/code><\/pre>\n<p>The options argument has the following options\n\n<\/p>\n<ul>\n<li><code>host<\/code>: A domain name or IP address of the server to issue the request to.\nDefaults to <code>&#39;localhost&#39;<\/code>.<\/li>\n<li><code>hostname<\/code>: To support <code>url.parse()<\/code> <code>hostname<\/code> is preferred over <code>host<\/code><\/li>\n<li><code>port<\/code>: Port of remote server. Defaults to 443.<\/li>\n<li><code>method<\/code>: A string specifying the HTTP request method. Defaults to <code>&#39;GET&#39;<\/code>.<\/li>\n<li><code>path<\/code>: Request path. Defaults to <code>&#39;\/&#39;<\/code>. Should include query string if any.\nE.G. <code>&#39;\/index.html?page=12&#39;<\/code><\/li>\n<li><code>headers<\/code>: An object containing request headers.<\/li>\n<li><code>auth<\/code>: Basic authentication i.e. <code>&#39;user:password&#39;<\/code> to compute an\nAuthorization header.<\/li>\n<li><code>agent<\/code>: Controls [Agent][] behavior. When an Agent is used request will\ndefault to <code>Connection: keep-alive<\/code>. Possible values:<ul>\n<li><code>undefined<\/code> (default): use [globalAgent][] for this host and port.<\/li>\n<li><code>Agent<\/code> object: explicitly use the passed in <code>Agent<\/code>.<\/li>\n<li><code>false<\/code>: opts out of connection pooling with an Agent, defaults request to\n<code>Connection: close<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>The following options from [tls.connect()][] can also be specified. However, a\n[globalAgent][] silently ignores these.\n\n<\/p>\n<ul>\n<li><code>pfx<\/code>: Certificate, Private key and CA certificates to use for SSL. Default <code>null<\/code>.<\/li>\n<li><code>key<\/code>: Private key to use for SSL. Default <code>null<\/code>.<\/li>\n<li><code>passphrase<\/code>: A string of passphrase for the private key or pfx. Default <code>null<\/code>.<\/li>\n<li><code>cert<\/code>: Public x509 certificate to use. Default <code>null<\/code>.<\/li>\n<li><code>ca<\/code>: An authority certificate or array of authority certificates to check\nthe remote host against.<\/li>\n<li><code>ciphers<\/code>: A string describing the ciphers to use or exclude. Consult\n<a href=\"http:\/\/www.openssl.org\/docs\/apps\/ciphers.html#CIPHER_LIST_FORMAT\">http:\/\/www.openssl.org\/docs\/apps\/ciphers.html#CIPHER_LIST_FORMAT<\/a> for\ndetails on the format.<\/li>\n<li><code>rejectUnauthorized<\/code>: If <code>true<\/code>, the server certificate is verified against\nthe list of supplied CAs. An <code>&#39;error&#39;<\/code> event is emitted if verification\nfails. Verification happens at the connection level, <em>before<\/em> the HTTP\nrequest is sent. Default <code>true<\/code>.<\/li>\n<\/ul>\n<p>In order to specify these options, use a custom <code>Agent<\/code>.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;\/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n  ...\n}<\/code><\/pre>\n<p>Or does not use an <code>Agent<\/code>.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;\/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;),\n  agent: false\n};\n\nvar req = https.request(options, function(res) {\n  ...\n}<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_get_options_callback","title":"https.get(options, callback)","description":"<p>Like <code>http.get()<\/code> but for HTTPS.\n\n<\/p>\n<p><code>options<\/code> can be an object or a string. If <code>options<\/code> is a string, it is\nautomatically parsed with <a href=\"url.html#url.parse\">url.parse()<\/a>.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var https = require(&#39;https&#39;);\n\nhttps.get(&#39;https:\/\/encrypted.google.com\/&#39;, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&#39;data&#39;, function(d) {\n    process.stdout.write(d);\n  });\n\n}).on(&#39;error&#39;, function(e) {\n  console.error(e);\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url","title":"URL","description":"<p>This module has utilities for URL resolution and parsing.\nCall <code>require(&#39;url&#39;)<\/code> to use it.\n\n<\/p>\n<p>Parsed URL objects have some or all of the following fields, depending on\nwhether or not they exist in the URL string. Any parts that are not in the URL\nstring will not be in the parsed object. Examples are shown for the URL\n\n<\/p>\n<p><code>&#39;http:\/\/user:pass@host.com:8080\/p\/a\/t\/h?query=string#hash&#39;<\/code>\n\n<\/p>\n<ul>\n<li><p><code>href<\/code>: The full URL that was originally parsed. Both the protocol and host are lowercased.<\/p>\n<p>  Example: <code>&#39;http:\/\/user:pass@host.com:8080\/p\/a\/t\/h?query=string#hash&#39;<\/code><\/p>\n<\/li>\n<li><p><code>protocol<\/code>: The request protocol, lowercased.<\/p>\n<p>  Example: <code>&#39;http:&#39;<\/code><\/p>\n<\/li>\n<li><p><code>host<\/code>: The full lowercased host portion of the URL, including port\ninformation.<\/p>\n<p>  Example: <code>&#39;host.com:8080&#39;<\/code><\/p>\n<\/li>\n<li><p><code>auth<\/code>: The authentication information portion of a URL.<\/p>\n<p>  Example: <code>&#39;user:pass&#39;<\/code><\/p>\n<\/li>\n<li><p><code>hostname<\/code>: Just the lowercased hostname portion of the host.<\/p>\n<p>  Example: <code>&#39;host.com&#39;<\/code><\/p>\n<\/li>\n<li><p><code>port<\/code>: The port number portion of the host.<\/p>\n<p>  Example: <code>&#39;8080&#39;<\/code><\/p>\n<\/li>\n<li><p><code>pathname<\/code>: The path section of the URL, that comes after the host and\nbefore the query, including the initial slash if present.<\/p>\n<p>  Example: <code>&#39;\/p\/a\/t\/h&#39;<\/code><\/p>\n<\/li>\n<li><p><code>search<\/code>: The &#39;query string&#39; portion of the URL, including the leading\nquestion mark.<\/p>\n<p>  Example: <code>&#39;?query=string&#39;<\/code><\/p>\n<\/li>\n<li><p><code>path<\/code>: Concatenation of <code>pathname<\/code> and <code>search<\/code>.<\/p>\n<p>  Example: <code>&#39;\/p\/a\/t\/h?query=string&#39;<\/code><\/p>\n<\/li>\n<li><p><code>query<\/code>: Either the &#39;params&#39; portion of the query string, or a\nquerystring-parsed object.<\/p>\n<p>  Example: <code>&#39;query=string&#39;<\/code> or <code>{&#39;query&#39;:&#39;string&#39;}<\/code><\/p>\n<\/li>\n<li><p><code>hash<\/code>: The &#39;fragment&#39; portion of the URL including the pound-sign.<\/p>\n<p>  Example: <code>&#39;#hash&#39;<\/code><\/p>\n<\/li>\n<\/ul>\n<p>The following methods are provided by the URL module:\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_parse_urlstr_parsequerystring_slashesdenotehost","title":"url.parse(urlStr, [parseQueryString], [slashesDenoteHost])","description":"<p>Take a URL string, and return an object.\n\n<\/p>\n<p>Pass <code>true<\/code> as the second argument to also parse\nthe query string using the <code>querystring<\/code> module.\nDefaults to <code>false<\/code>.\n\n<\/p>\n<p>Pass <code>true<\/code> as the third argument to treat <code>\/\/foo\/bar<\/code> as\n<code>{ host: &#39;foo&#39;, pathname: &#39;\/bar&#39; }<\/code> rather than\n<code>{ pathname: &#39;\/\/foo\/bar&#39; }<\/code>. Defaults to <code>false<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_format_urlobj","title":"url.format(urlObj)","description":"<p>Take a parsed URL object, and return a formatted URL string.\n\n<\/p>\n<ul>\n<li><code>href<\/code> will be ignored.<\/li>\n<li><code>protocol<\/code>is treated the same with or without the trailing <code>:<\/code> (colon).<ul>\n<li>The protocols <code>http<\/code>, <code>https<\/code>, <code>ftp<\/code>, <code>gopher<\/code>, <code>file<\/code> will be\npostfixed with <code>:\/\/<\/code> (colon-slash-slash).<\/li>\n<li>All other protocols <code>mailto<\/code>, <code>xmpp<\/code>, <code>aim<\/code>, <code>sftp<\/code>, <code>foo<\/code>, etc will\nbe postfixed with <code>:<\/code> (colon)<\/li>\n<\/ul>\n<\/li>\n<li><code>auth<\/code> will be used if present.<\/li>\n<li><code>hostname<\/code> will only be used if <code>host<\/code> is absent.<\/li>\n<li><code>port<\/code> will only be used if <code>host<\/code> is absent.<\/li>\n<li><code>host<\/code> will be used in place of <code>hostname<\/code> and <code>port<\/code><\/li>\n<li><code>pathname<\/code> is treated the same with or without the leading <code>\/<\/code> (slash)<\/li>\n<li><code>search<\/code> will be used in place of <code>query<\/code><\/li>\n<li><code>query<\/code> (object; see <code>querystring<\/code>) will only be used if <code>search<\/code> is absent.<\/li>\n<li><code>search<\/code> is treated the same with or without the leading <code>?<\/code> (question mark)<\/li>\n<li><code>hash<\/code> is treated the same with or without the leading <code>#<\/code> (pound sign, anchor)<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_resolve_from_to","title":"url.resolve(from, to)","description":"<p>Take a base URL, and a href URL, and resolve them as a browser would for\nan anchor tag.  Examples:\n\n<\/p>\n<pre><code>url.resolve(&#39;\/one\/two\/three&#39;, &#39;four&#39;)         \/\/ &#39;\/one\/two\/four&#39;\nurl.resolve(&#39;http:\/\/example.com\/&#39;, &#39;\/one&#39;)    \/\/ &#39;http:\/\/example.com\/one&#39;\nurl.resolve(&#39;http:\/\/example.com\/one&#39;, &#39;\/two&#39;) \/\/ &#39;http:\/\/example.com\/two&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_query_string","title":"Query String","description":"<p>This module provides utilities for dealing with query strings.\nIt provides the following methods:\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_stringify_obj_sep_eq","title":"querystring.stringify(obj, [sep], [eq])","description":"<p>Serialize an object to a query string.\nOptionally override the default separator (<code>&#39;&amp;&#39;<\/code>) and assignment (<code>&#39;=&#39;<\/code>)\ncharacters.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\n\/\/ returns\n&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\n\/\/ returns\n&#39;foo:bar;baz:qux&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_parse_str_sep_eq_options","title":"querystring.parse(str, [sep], [eq], [options])","description":"<p>Deserialize a query string to an object.\nOptionally override the default separator (<code>&#39;&amp;&#39;<\/code>) and assignment (<code>&#39;=&#39;<\/code>)\ncharacters.\n\n<\/p>\n<p>Options object may contain <code>maxKeys<\/code> property (equal to 1000 by default), it&#39;ll\nbe used to limit processed keys. Set it to 0 to remove key count limitation.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>querystring.parse(&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;)\n\/\/ returns\n{ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; }<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode","title":"punycode","description":"<p><a href=\"http:\/\/mths.be\/punycode\">Punycode.js<\/a> is bundled with Node.js v0.6.2+. Use\n<code>require(&#39;punycode&#39;)<\/code> to access it. (To use it with other Node.js versions,\nuse npm to install the <code>punycode<\/code> module first.)\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_decode_string","title":"punycode.decode(string)","description":"<p>Converts a Punycode string of ASCII code points to a string of Unicode code\npoints.\n\n<\/p>\n<pre><code>\/\/ decode domain name parts\npunycode.decode(&#39;maana-pta&#39;); \/\/ &#39;ma\u00f1ana&#39;\npunycode.decode(&#39;--dqo34k&#39;); \/\/ &#39;\u2603-\u2318&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_encode_string","title":"punycode.encode(string)","description":"<p>Converts a string of Unicode code points to a Punycode string of ASCII code\npoints.\n\n<\/p>\n<pre><code>\/\/ encode domain name parts\npunycode.encode(&#39;ma\u00f1ana&#39;); \/\/ &#39;maana-pta&#39;\npunycode.encode(&#39;\u2603-\u2318&#39;); \/\/ &#39;--dqo34k&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_tounicode_domain","title":"punycode.toUnicode(domain)","description":"<p>Converts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn&#39;t matter if\nyou call it on a string that has already been converted to Unicode.\n\n<\/p>\n<pre><code>\/\/ decode domain names\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); \/\/ &#39;ma\u00f1ana.com&#39;\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;); \/\/ &#39;\u2603-\u2318.com&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_toascii_domain","title":"punycode.toASCII(domain)","description":"<p>Converts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn&#39;t matter if\nyou call it with a domain that&#39;s already in ASCII.\n\n<\/p>\n<pre><code>\/\/ encode domain names\npunycode.toASCII(&#39;ma\u00f1ana.com&#39;); \/\/ &#39;xn--maana-pta.com&#39;\npunycode.toASCII(&#39;\u2603-\u2318.com&#39;); \/\/ &#39;xn----dqo34k.com&#39;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline","title":"Readline","description":"<p>To use this module, do <code>require(&#39;readline&#39;)<\/code>. Readline allows reading of a\nstream (such as <code>process.stdin<\/code>) on a line-by-line basis.\n\n<\/p>\n<p>Note that once you&#39;ve invoked this module, your node program will not\nterminate until you&#39;ve closed the interface. Here&#39;s how to allow your\nprogram to gracefully exit:\n\n<\/p>\n<pre><code>var readline = require(&#39;readline&#39;);\n\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&quot;What do you think of node.js? &quot;, function(answer) {\n  \/\/ TODO: Log the answer in a database\n  console.log(&quot;Thank you for your valuable feedback:&quot;, answer);\n\n  rl.close();\n});<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_createinterface_options","title":"readline.createInterface(options)","description":"<p>Creates a readline <code>Interface<\/code> instance. Accepts an &quot;options&quot; Object that takes\nthe following values:\n\n<\/p>\n<ul>\n<li><p><code>input<\/code> - the readable stream to listen to (Required).<\/p>\n<\/li>\n<li><p><code>output<\/code> - the writable stream to write readline data to (Required).<\/p>\n<\/li>\n<li><p><code>completer<\/code> - an optional function that is used for Tab autocompletion. See\nbelow for an example of using this.<\/p>\n<\/li>\n<li><p><code>terminal<\/code> - pass <code>true<\/code> if the <code>input<\/code> and <code>output<\/code> streams should be\ntreated like a TTY, and have ANSI\/VT100 escape codes written to it.\nDefaults to checking <code>isTTY<\/code> on the <code>output<\/code> stream upon instantiation.<\/p>\n<\/li>\n<\/ul>\n<p>The <code>completer<\/code> function is given a the current line entered by the user, and\nis supposed to return an Array with 2 entries:\n\n<\/p>\n<ol>\n<li><p>An Array with matching entries for the completion.<\/p>\n<\/li>\n<li><p>The substring that was used for the matching.<\/p>\n<\/li>\n<\/ol>\n<p>Which ends up looking something like:\n<code>[[substr1, substr2, ...], originalsubstring]<\/code>.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>function completer(line) {\n  var completions = &#39;.help .error .exit .quit .q&#39;.split(&#39; &#39;)\n  var hits = completions.filter(function(c) { return c.indexOf(line) == 0 })\n  \/\/ show all completions if none found\n  return [hits.length ? hits : completions, line]\n}<\/code><\/pre>\n<p>Also <code>completer<\/code> can be run in async mode if it accepts two arguments:\n\n<\/p>\n<pre><code>function completer(linePartial, callback) {\n  callback(null, [[&#39;123&#39;], linePartial]);\n}<\/code><\/pre>\n<p><code>createInterface<\/code> is commonly used with <code>process.stdin<\/code> and\n<code>process.stdout<\/code> in order to accept user input:\n\n<\/p>\n<pre><code>var readline = require(&#39;readline&#39;);\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});<\/code><\/pre>\n<p>Once you have a readline instance, you most commonly listen for the\n<code>&quot;line&quot;<\/code> event.\n\n<\/p>\n<p>If <code>terminal<\/code> is <code>true<\/code> for this instance then the <code>output<\/code> stream will get\nthe best compatibility if it defines an <code>output.columns<\/code> property, and fires\na <code>&quot;resize&quot;<\/code> event on the <code>output<\/code> if\/when the columns ever change\n(<code>process.stdout<\/code> does this automatically when it is a TTY).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_events","title":"Events","description":null},{"url":"http:\/\/nodejs.org\/api\/all.html#all_repl","title":"REPL","description":"<p>A Read-Eval-Print-Loop (REPL) is available both as a standalone program and\neasily includable in other programs. The REPL provides a way to interactively\nrun JavaScript and see the results.  It can be used for debugging, testing, or\njust trying things out.\n\n<\/p>\n<p>By executing <code>node<\/code> without any arguments from the command-line you will be\ndropped into the REPL. It has simplistic emacs line-editing.\n\n<\/p>\n<pre><code>mjr:~$ node\nType &#39;.help&#39; for options.\n&gt; a = [ 1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach(function (v) {\n...   console.log(v);\n...   });\n1\n2\n3<\/code><\/pre>\n<p>For advanced line-editors, start node with the environmental variable\n<code>NODE_NO_READLINE=1<\/code>. This will start the main and debugger REPL in canonical\nterminal settings which will allow you to use with <code>rlwrap<\/code>.\n\n<\/p>\n<p>For example, you could add this to your bashrc file:\n\n<\/p>\n<pre><code>alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_repl_start_options","title":"repl.start(options)","description":"<p>Returns and starts a <code>REPLServer<\/code> instance. Accepts an &quot;options&quot; Object that\ntakes the following values:\n\n<\/p>\n<ul>\n<li><p><code>prompt<\/code> - the prompt and <code>stream<\/code> for all I\/O. Defaults to <code>&gt; <\/code>.<\/p>\n<\/li>\n<li><p><code>input<\/code> - the readable stream to listen to. Defaults to <code>process.stdin<\/code>.<\/p>\n<\/li>\n<li><p><code>output<\/code> - the writable stream to write readline data to. Defaults to\n<code>process.stdout<\/code>.<\/p>\n<\/li>\n<li><p><code>terminal<\/code> - pass <code>true<\/code> if the <code>stream<\/code> should be treated like a TTY, and\nhave ANSI\/VT100 escape codes written to it. Defaults to checking <code>isTTY<\/code>\non the <code>output<\/code> stream upon instantiation.<\/p>\n<\/li>\n<li><p><code>eval<\/code> - function that will be used to eval each given line. Defaults to\nan async wrapper for <code>eval()<\/code>. See below for an example of a custom <code>eval<\/code>.<\/p>\n<\/li>\n<li><p><code>useColors<\/code> - a boolean which specifies whether or not the <code>writer<\/code> function\nshould output colors. If a different <code>writer<\/code> function is set then this does\nnothing. Defaults to the repl&#39;s <code>terminal<\/code> value.<\/p>\n<\/li>\n<li><p><code>useGlobal<\/code> - if set to <code>true<\/code>, then the repl will use the <code>global<\/code> object,\ninstead of running scripts in a separate context. Defaults to <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>ignoreUndefined<\/code> - if set to <code>true<\/code>, then the repl will not output the\nreturn value of command if it&#39;s <code>undefined<\/code>. Defaults to <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>writer<\/code> - the function to invoke for each command that gets evaluated which\nreturns the formatting (including coloring) to display. Defaults to\n<code>util.inspect<\/code>.<\/p>\n<\/li>\n<\/ul>\n<p>You can use your own <code>eval<\/code> function if it has following signature:\n\n<\/p>\n<pre><code>function eval(cmd, context, filename, callback) {\n  callback(null, result);\n}<\/code><\/pre>\n<p>Multiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I\/O.\n\n<\/p>\n<p>Here is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n<\/p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start({\n  prompt: &quot;node via stdin&gt; &quot;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via Unix socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  })\n}).listen(&quot;\/tmp\/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via TCP socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  });\n}).listen(5001);<\/code><\/pre>\n<p>Running this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. <code>telnet<\/code> is useful\nfor connecting to TCP sockets, and <code>socat<\/code> can be used to connect to both Unix and\nTCP sockets.\n\n<\/p>\n<p>By starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n\n<\/p>\n<p>For an example of running a &quot;full-featured&quot; (<code>terminal<\/code>) REPL over\na <code>net.Server<\/code> and <code>net.Socket<\/code> instance, see: <a href=\"https:\/\/gist.github.com\/2209310\">https:\/\/gist.github.com\/2209310<\/a>\n\n<\/p>\n<p>For an example of running a REPL instance over <code>curl(1)<\/code>,\nsee: <a href=\"https:\/\/gist.github.com\/2053342\">https:\/\/gist.github.com\/2053342<\/a>\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_repl_features","title":"REPL Features","description":"<p>Inside the REPL, Control+D will exit.  Multi-line expressions can be input.\nTab completion is supported for both global and local variables.\n\n<\/p>\n<p>The special variable <code>_<\/code> (underscore) contains the result of the last expression.\n\n<\/p>\n<pre><code>&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n&gt; _.length\n3\n&gt; _ += 1\n4<\/code><\/pre>\n<p>The REPL provides access to any variables in the global scope. You can expose\na variable to the REPL explicitly by assigning it to the <code>context<\/code> object\nassociated with each <code>REPLServer<\/code>.  For example:\n\n<\/p>\n<pre><code>\/\/ repl_test.js\nvar repl = require(&quot;repl&quot;),\n    msg = &quot;message&quot;;\n\nrepl.start(&quot;&gt; &quot;).context.m = msg;<\/code><\/pre>\n<p>Things in the <code>context<\/code> object appear as local within the REPL:\n\n<\/p>\n<pre><code>mjr:~$ node repl_test.js\n&gt; m\n&#39;message&#39;<\/code><\/pre>\n<p>There are a few special REPL commands:\n\n<\/p>\n<ul>\n<li><code>.break<\/code> - While inputting a multi-line expression, sometimes you get lost\nor just don&#39;t care about completing it. <code>.break<\/code> will start over.<\/li>\n<li><code>.clear<\/code> - Resets the <code>context<\/code> object to an empty object and clears any\nmulti-line expression.<\/li>\n<li><code>.exit<\/code> - Close the I\/O stream, which will cause the REPL to exit.<\/li>\n<li><code>.help<\/code> - Show this list of special commands.<\/li>\n<li><code>.save<\/code> - Save the current REPL session to a file<blockquote>\n<p>.save .\/file\/to\/save.js<\/p>\n<\/blockquote>\n<\/li>\n<li><code>.load<\/code> - Load a file into the current REPL session.<blockquote>\n<p>.load .\/file\/to\/load.js<\/p>\n<\/blockquote>\n<\/li>\n<\/ul>\n<p>The following key combinations in the REPL have these special effects:\n\n<\/p>\n<ul>\n<li><code>&lt;ctrl&gt;C<\/code> - Similar to the <code>.break<\/code> keyword.  Terminates the current\ncommand.  Press twice on a blank line to forcibly exit.<\/li>\n<li><code>&lt;ctrl&gt;D<\/code> - Similar to the <code>.exit<\/code> keyword.<\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_executing_javascript","title":"Executing JavaScript","description":"<p>You can access this module with:\n\n<\/p>\n<pre><code>var vm = require(&#39;vm&#39;);<\/code><\/pre>\n<p>JavaScript code can be compiled and run immediately or compiled, saved, and run later.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runinthiscontext_code_filename","title":"vm.runInThisContext(code, [filename])","description":"<p><code>vm.runInThisContext()<\/code> compiles <code>code<\/code>, runs it and returns the result. Running\ncode does not have access to local scope. <code>filename<\/code> is optional, it&#39;s used only\nin stack traces.\n\n<\/p>\n<p>Example of using <code>vm.runInThisContext<\/code> and <code>eval<\/code> to run the same code:\n\n<\/p>\n<pre><code>var localVar = 123,\n    usingscript, evaled,\n    vm = require(&#39;vm&#39;);\n\nusingscript = vm.runInThisContext(&#39;localVar = 1;&#39;,\n  &#39;myfile.vm&#39;);\nconsole.log(&#39;localVar: &#39; + localVar + &#39;, usingscript: &#39; +\n  usingscript);\nevaled = eval(&#39;localVar = 1;&#39;);\nconsole.log(&#39;localVar: &#39; + localVar + &#39;, evaled: &#39; +\n  evaled);\n\n\/\/ localVar: 123, usingscript: 1\n\/\/ localVar: 1, evaled: 1<\/code><\/pre>\n<p><code>vm.runInThisContext<\/code> does not have access to the local scope, so <code>localVar<\/code> is unchanged.\n<code>eval<\/code> does have access to the local scope, so <code>localVar<\/code> is changed.\n\n<\/p>\n<p>In case of syntax error in <code>code<\/code>, <code>vm.runInThisContext<\/code> emits the syntax error to stderr\nand throws an exception.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runinnewcontext_code_sandbox_filename","title":"vm.runInNewContext(code, [sandbox], [filename])","description":"<p><code>vm.runInNewContext<\/code> compiles <code>code<\/code>, then runs it in <code>sandbox<\/code> and returns the\nresult. Running code does not have access to local scope. The object <code>sandbox<\/code>\nwill be used as the global object for <code>code<\/code>.\n<code>sandbox<\/code> and <code>filename<\/code> are optional, <code>filename<\/code> is only used in stack traces.\n\n<\/p>\n<p>Example: compile and execute code that increments a global variable and sets a new one.\nThese globals are contained in the sandbox.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;),\n    vm = require(&#39;vm&#39;),\n    sandbox = {\n      animal: &#39;cat&#39;,\n      count: 2\n    };\n\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox, &#39;myfile.vm&#39;);\nconsole.log(util.inspect(sandbox));\n\n\/\/ { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }<\/code><\/pre>\n<p>Note that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, <code>vm.runInNewContext<\/code> is quite useful, but safely running untrusted code\nrequires a separate process.\n\n<\/p>\n<p>In case of syntax error in <code>code<\/code>, <code>vm.runInNewContext<\/code> emits the syntax error to stderr\nand throws an exception.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runincontext_code_context_filename","title":"vm.runInContext(code, context, [filename])","description":"<p><code>vm.runInContext<\/code> compiles <code>code<\/code>, then runs it in <code>context<\/code> and returns the\nresult. A (V8) context comprises a global object, together with a set of\nbuilt-in objects and functions. Running code does not have access to local scope\nand the global object held within <code>context<\/code> will be used as the global object\nfor <code>code<\/code>.\n<code>filename<\/code> is optional, it&#39;s used only in stack traces.\n\n<\/p>\n<p>Example: compile and execute code in a existing context.\n\n<\/p>\n<pre><code>var util = require(&#39;util&#39;),\n    vm = require(&#39;vm&#39;),\n    initSandbox = {\n      animal: &#39;cat&#39;,\n      count: 2\n    },\n    context = vm.createContext(initSandbox);\n\nvm.runInContext(&#39;count += 1; name = &quot;CATT&quot;&#39;, context, &#39;myfile.vm&#39;);\nconsole.log(util.inspect(context));\n\n\/\/ { animal: &#39;cat&#39;, count: 3, name: &#39;CATT&#39; }<\/code><\/pre>\n<p>Note that <code>createContext<\/code> will perform a shallow clone of the supplied sandbox object in order to\ninitialize the global object of the freshly constructed context.\n\n<\/p>\n<p>Note that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, <code>vm.runInContext<\/code> is quite useful, but safely running untrusted code\nrequires a separate process.\n\n<\/p>\n<p>In case of syntax error in <code>code<\/code>, <code>vm.runInContext<\/code> emits the syntax error to stderr\nand throws an exception.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_createcontext_initsandbox","title":"vm.createContext([initSandbox])","description":"<p><code>vm.createContext<\/code> creates a new context which is suitable for use as the 2nd argument of a subsequent\ncall to <code>vm.runInContext<\/code>. A (V8) context comprises a global object together with a set of\nbuild-in objects and functions. The optional argument <code>initSandbox<\/code> will be shallow-copied\nto seed the initial contents of the global object used by the context.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_createscript_code_filename","title":"vm.createScript(code, [filename])","description":"<p><code>createScript<\/code> compiles <code>code<\/code> but does not run it. Instead, it returns a\n<code>vm.Script<\/code> object representing this compiled code. This script can be run\nlater many times using methods below. The returned script is not bound to any\nglobal object. It is bound before each run, just for that run. <code>filename<\/code> is\noptional, it&#39;s only used in stack traces.\n\n<\/p>\n<p>In case of syntax error in <code>code<\/code>, <code>createScript<\/code> prints the syntax error to stderr\nand throws an exception.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_caveats","title":"Caveats","description":"<p>The <code>vm<\/code> module has many known issues and edge cases. If you run into\nissues or unexpected behavior, please consult\n<a href=\"https:\/\/github.com\/joyent\/node\/issues\/search?q=vm\">the open issues on GitHub<\/a>.\nSome of the biggest problems are described below.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_sandboxes","title":"Sandboxes","description":"<p>The <code>sandbox<\/code> argument to <code>vm.runInNewContext<\/code> and <code>vm.createContext<\/code>,\nalong with the <code>initSandbox<\/code> argument to <code>vm.createContext<\/code>, do not\nbehave as one might normally expect and their behavior varies\nbetween different versions of Node.\n\n<\/p>\n<p>The key issue to be aware of is that V8 provides no way to directly\ncontrol the global object used within a context. As a result, while\nproperties of your <code>sandbox<\/code> object will be available in the context,\nany properties from the <code>prototype<\/code>s of the <code>sandbox<\/code> may not be\navailable. Furthermore, the <code>this<\/code> expression within the global scope\nof the context evaluates to the empty object (<code>{}<\/code>) instead of to\nyour sandbox.\n\n<\/p>\n<p>Your sandbox&#39;s properties are also not shared directly with the script.\nInstead, the properties of the sandbox are copied into the context at\nthe beginning of execution, and then after execution, the properties\nare copied back out in an attempt to propagate any changes.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_globals","title":"Globals","description":"<p>Properties of the global object, like <code>Array<\/code> and <code>String<\/code>, have\ndifferent values inside of a context. This means that common\nexpressions like <code>[] instanceof Array<\/code> or\n<code>Object.getPrototypeOf([]) === Array.prototype<\/code> may not produce\nexpected results when used inside of scripts evaluated via the <code>vm<\/code> module.\n\n<\/p>\n<p>Some of these problems have known workarounds listed in the issues for\n<code>vm<\/code> on GitHub. for example, <code>Array.isArray<\/code> works around\nthe example problem with <code>Array<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process","title":"Child Process","description":"<p>Node provides a tri-directional <code>popen(3)<\/code> facility through the\n<code>child_process<\/code> module.\n\n<\/p>\n<p>It is possible to stream data through a child&#39;s <code>stdin<\/code>, <code>stdout<\/code>, and\n<code>stderr<\/code> in a fully non-blocking way.  (Note that some programs use\nline-buffered I\/O internally.  That doesn&#39;t affect node.js but it means\ndata you send to the child process is not immediately consumed.)\n\n<\/p>\n<p>To create a child process use <code>require(&#39;child_process&#39;).spawn()<\/code> or\n<code>require(&#39;child_process&#39;).fork()<\/code>.  The semantics of each are slightly\ndifferent, and explained below.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_spawn_command_args_options","title":"child_process.spawn(command, [args], [options])","description":"<p>Launches a new process with the given <code>command<\/code>, with  command line arguments in <code>args<\/code>.\nIf omitted, <code>args<\/code> defaults to an empty Array.\n\n<\/p>\n<p>The third argument is used to specify additional options, which defaults to:\n\n<\/p>\n<pre><code>{ cwd: undefined,\n  env: process.env\n}<\/code><\/pre>\n<p><code>cwd<\/code> allows you to specify the working directory from which the process is spawned.\nUse <code>env<\/code> to specify environment variables that will be visible to the new process.\n\n<\/p>\n<p>Example of running <code>ls -lh \/usr<\/code>, capturing <code>stdout<\/code>, <code>stderr<\/code>, and the exit code:\n\n<\/p>\n<pre><code>var spawn = require(&#39;child_process&#39;).spawn,\n    ls    = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;\/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, function (data) {\n  console.log(&#39;stdout: &#39; + data);\n});\n\nls.stderr.on(&#39;data&#39;, function (data) {\n  console.log(&#39;stderr: &#39; + data);\n});\n\nls.on(&#39;close&#39;, function (code) {\n  console.log(&#39;child process exited with code &#39; + code);\n});<\/code><\/pre>\n<p>Example: A very elaborate way to run &#39;ps ax | grep ssh&#39;\n\n<\/p>\n<pre><code>var spawn = require(&#39;child_process&#39;).spawn,\n    ps    = spawn(&#39;ps&#39;, [&#39;ax&#39;]),\n    grep  = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nps.stdout.on(&#39;data&#39;, function (data) {\n  grep.stdin.write(data);\n});\n\nps.stderr.on(&#39;data&#39;, function (data) {\n  console.log(&#39;ps stderr: &#39; + data);\n});\n\nps.on(&#39;close&#39;, function (code) {\n  if (code !== 0) {\n    console.log(&#39;ps process exited with code &#39; + code);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on(&#39;data&#39;, function (data) {\n  console.log(&#39;&#39; + data);\n});\n\ngrep.stderr.on(&#39;data&#39;, function (data) {\n  console.log(&#39;grep stderr: &#39; + data);\n});\n\ngrep.on(&#39;close&#39;, function (code) {\n  if (code !== 0) {\n    console.log(&#39;grep process exited with code &#39; + code);\n  }\n});<\/code><\/pre>\n<p>Example of checking for failed exec:\n\n<\/p>\n<pre><code>var spawn = require(&#39;child_process&#39;).spawn,\n    child = spawn(&#39;bad_command&#39;);\n\nchild.stderr.setEncoding(&#39;utf8&#39;);\nchild.stderr.on(&#39;data&#39;, function (data) {\n  if (\/^execvp\\(\\)\/.test(data)) {\n    console.log(&#39;Failed to start child process.&#39;);\n  }\n});<\/code><\/pre>\n<p>Note that if spawn receives an empty options object, it will result in\nspawning the process with an empty environment rather than using\n<code>process.env<\/code>. This due to backwards compatibility issues with a deprecated\nAPI.\n\n<\/p>\n<p>The &#39;stdio&#39; option to <code>child_process.spawn()<\/code> is an array where each\nindex corresponds to a fd in the child.  The value is one of the following:\n\n<\/p>\n<ol>\n<li><code>&#39;pipe&#39;<\/code> - Create a pipe between the child process and the parent process.\nThe parent end of the pipe is exposed to the parent as a property on the\n<code>child_process<\/code> object as <code>ChildProcess.stdio[fd]<\/code>. Pipes created for\nfds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout\nand ChildProcess.stderr, respectively.<\/li>\n<li><code>&#39;ipc&#39;<\/code> - Create an IPC channel for passing messages\/file descriptors\nbetween parent and child. A ChildProcess may have at most <em>one<\/em> IPC stdio\nfile descriptor. Setting this option enables the ChildProcess.send() method.\nIf the child writes JSON messages to this file descriptor, then this will\ntrigger ChildProcess.on(&#39;message&#39;).  If the child is a Node.js program, then\nthe presence of an IPC channel will enable process.send() and\nprocess.on(&#39;message&#39;).<\/li>\n<li><code>&#39;ignore&#39;<\/code> - Do not set this file descriptor in the child. Note that Node\nwill always open fd 0 - 2 for the processes it spawns. When any of these is\nignored node will open <code>\/dev\/null<\/code> and attach it to the child&#39;s fd.<\/li>\n<li><code>Stream<\/code> object - Share a readable or writable stream that refers to a tty,\nfile, socket, or a pipe with the child process. The stream&#39;s underlying\nfile descriptor is duplicated in the child process to the fd that \ncorresponds to the index in the <code>stdio<\/code> array.<\/li>\n<li>Positive integer - The integer value is interpreted as a file descriptor \nthat is is currently open in the parent process. It is shared with the child\nprocess, similar to how <code>Stream<\/code> objects can be shared.<\/li>\n<li><code>null<\/code>, <code>undefined<\/code> - Use default value. For stdio fds 0, 1 and 2 (in other\nwords, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\ndefault is <code>&#39;ignore&#39;<\/code>.<\/li>\n<\/ol>\n<p>As a shorthand, the <code>stdio<\/code> argument may also be one of the following\nstrings, rather than an array:\n\n<\/p>\n<ul>\n<li><code>ignore<\/code> - <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]<\/code><\/li>\n<li><code>pipe<\/code> - <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]<\/code><\/li>\n<li><code>inherit<\/code> - <code>[process.stdin, process.stdout, process.stderr]<\/code> or <code>[0,1,2]<\/code><\/li>\n<\/ul>\n<p>Example:\n\n<\/p>\n<pre><code>var spawn = require(&#39;child_process&#39;).spawn;\n\n\/\/ Child will use parent&#39;s stdios\nspawn(&#39;prg&#39;, [], { stdio: &#39;inherit&#39; });\n\n\/\/ Spawn child sharing only stderr\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, &#39;pipe&#39;, process.stderr] });\n\n\/\/ Open an extra fd=4, to interact with programs present a\n\/\/ startd-style interface.\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, null, null, null, &#39;pipe&#39;] });<\/code><\/pre>\n<p>If the <code>detached<\/code> option is set, the child process will be made the leader of a\nnew process group.  This makes it possible for the child to continue running \nafter the parent exits.\n\n<\/p>\n<p>By default, the parent will wait for the detached child to exit.  To prevent\nthe parent from waiting for a given <code>child<\/code>, use the <code>child.unref()<\/code> method,\nand the parent&#39;s event loop will not include the child in its reference count.\n\n<\/p>\n<p>Example of detaching a long-running process and redirecting its output to a\nfile:\n\n<\/p>\n<pre><code> var fs = require(&#39;fs&#39;),\n     spawn = require(&#39;child_process&#39;).spawn,\n     out = fs.openSync(&#39;.\/out.log&#39;, &#39;a&#39;),\n     err = fs.openSync(&#39;.\/out.log&#39;, &#39;a&#39;);\n\n var child = spawn(&#39;prg&#39;, [], {\n   detached: true,\n   stdio: [ &#39;ignore&#39;, out, err ]\n });\n\n child.unref();<\/code><\/pre>\n<p>When using the <code>detached<\/code> option to start a long-running process, the process\nwill not stay running in the background unless it is provided with a <code>stdio<\/code>\nconfiguration that is not connected to the parent.  If the parent&#39;s <code>stdio<\/code> is\ninherited, the child will remain attached to the controlling terminal.\n\n<\/p>\n<p>There is a deprecated option called <code>customFds<\/code> which allows one to specify\nspecific file descriptors for the stdio of the child process. This API was\nnot portable to all platforms and therefore removed.\nWith <code>customFds<\/code> it was possible to hook up the new process&#39; <code>[stdin, stdout,\nstderr]<\/code> to existing streams; <code>-1<\/code> meant that a new stream should be created.\nUse at your own risk.\n\n<\/p>\n<p>There are several internal options. In particular <code>stdinStream<\/code>,\n<code>stdoutStream<\/code>, <code>stderrStream<\/code>. They are for INTERNAL USE ONLY. As with all\nundocumented APIs in Node, they should not be used.\n\n<\/p>\n<p>See also: <code>child_process.exec()<\/code> and <code>child_process.fork()<\/code>\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_exec_command_options_callback","title":"child_process.exec(command, [options], callback)","description":"<p>Runs a command in a shell and buffers the output.\n\n<\/p>\n<pre><code>var exec = require(&#39;child_process&#39;).exec,\n    child;\n\nchild = exec(&#39;cat *.js bad_file | wc -l&#39;,\n  function (error, stdout, stderr) {\n    console.log(&#39;stdout: &#39; + stdout);\n    console.log(&#39;stderr: &#39; + stderr);\n    if (error !== null) {\n      console.log(&#39;exec error: &#39; + error);\n    }\n});<\/code><\/pre>\n<p>The callback gets the arguments <code>(error, stdout, stderr)<\/code>. On success, <code>error<\/code>\nwill be <code>null<\/code>.  On error, <code>error<\/code> will be an instance of <code>Error<\/code> and <code>err.code<\/code>\nwill be the exit code of the child process, and <code>err.signal<\/code> will be set to the\nsignal that terminated the process.\n\n<\/p>\n<p>There is a second optional argument to specify several options. The\ndefault options are\n\n<\/p>\n<pre><code>{ encoding: &#39;utf8&#39;,\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: &#39;SIGTERM&#39;,\n  cwd: null,\n  env: null }<\/code><\/pre>\n<p>If <code>timeout<\/code> is greater than 0, then it will kill the child process\nif it runs longer than <code>timeout<\/code> milliseconds. The child process is killed with\n<code>killSignal<\/code> (default: <code>&#39;SIGTERM&#39;<\/code>). <code>maxBuffer<\/code> specifies the largest\namount of data allowed on stdout or stderr - if this value is exceeded then\nthe child process is killed.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_execfile_file_args_options_callback","title":"child_process.execFile(file, args, options, callback)","description":"<p>This is similar to <code>child_process.exec()<\/code> except it does not execute a\nsubshell but rather the specified file directly. This makes it slightly\nleaner than <code>child_process.exec<\/code>. It has the same options.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_fork_modulepath_args_options","title":"child\\_process.fork(modulePath, [args], [options])","description":"<p>This is a special case of the <code>spawn()<\/code> functionality for spawning Node\nprocesses. In addition to having all the methods in a normal ChildProcess\ninstance, the returned object has a communication channel built-in. See\n<code>child.send(message, [sendHandle])<\/code> for details.\n\n<\/p>\n<p>By default the spawned Node process will have the stdout, stderr associated\nwith the parent&#39;s. To change this behavior set the <code>silent<\/code> property in the\n<code>options<\/code> object to <code>true<\/code>.\n\n<\/p>\n<p>The child process does not automatically exit once it&#39;s done, you need to call\n<code>process.exit()<\/code> explicitly. This limitation may be lifted in the future.\n\n<\/p>\n<p>These child Nodes are still whole new instances of V8. Assume at least 30ms\nstartup and 10mb memory for each new Node. That is, you cannot create many\nthousands of them.\n\n<\/p>\n<p>The <code>execPath<\/code> property in the <code>options<\/code> object allows for a process to be\ncreated for the child rather than the current <code>node<\/code> executable. This should be\ndone with care and by default will talk over the fd represented an\nenvironmental variable <code>NODE_CHANNEL_FD<\/code> on the child process. The input and\noutput on this fd is expected to be line delimited JSON objects.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert","title":"Assert","description":"<p>This module is used for writing unit tests for your applications, you can\naccess it with <code>require(&#39;assert&#39;)<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_fail_actual_expected_message_operator","title":"assert.fail(actual, expected, message, operator)","description":"<p>Throws an exception that displays the values for <code>actual<\/code> and <code>expected<\/code> separated by the provided operator.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_value_message_assert_ok_value_message","title":"assert(value, message), assert.ok(value, [message])","description":"<p>Tests if value is truthy, it is equivalent to <code>assert.equal(true, !!value, message);<\/code>\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_equal_actual_expected_message","title":"assert.equal(actual, expected, [message])","description":"<p>Tests shallow, coercive equality with the equal comparison operator ( <code>==<\/code> ).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notequal_actual_expected_message","title":"assert.notEqual(actual, expected, [message])","description":"<p>Tests shallow, coercive non-equality with the not equal comparison operator ( <code>!=<\/code> ).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_deepequal_actual_expected_message","title":"assert.deepEqual(actual, expected, [message])","description":"<p>Tests for deep equality.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notdeepequal_actual_expected_message","title":"assert.notDeepEqual(actual, expected, [message])","description":"<p>Tests for any deep inequality.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_strictequal_actual_expected_message","title":"assert.strictEqual(actual, expected, [message])","description":"<p>Tests strict equality, as determined by the strict equality operator ( <code>===<\/code> )\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notstrictequal_actual_expected_message","title":"assert.notStrictEqual(actual, expected, [message])","description":"<p>Tests strict non-equality, as determined by the strict not equal operator ( <code>!==<\/code> )\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_throws_block_error_message","title":"assert.throws(block, [error], [message])","description":"<p>Expects <code>block<\/code> to throw an error. <code>error<\/code> can be constructor, regexp or \nvalidation function.\n\n<\/p>\n<p>Validate instanceof using constructor:\n\n<\/p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  Error\n);<\/code><\/pre>\n<p>Validate error message using RegExp:\n\n<\/p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  \/value\/\n);<\/code><\/pre>\n<p>Custom error validation:\n\n<\/p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; \/value\/.test(err) ) {\n      return true;\n    }\n  },\n  &quot;unexpected error&quot;\n);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_doesnotthrow_block_message","title":"assert.doesNotThrow(block, [message])","description":"<p>Expects <code>block<\/code> not to throw an error, see assert.throws for details.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_iferror_value","title":"assert.ifError(value)","description":"<p>Tests if value is not a false value, throws if it is a true value. Useful when\ntesting the first argument, <code>error<\/code> in callbacks.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tty","title":"TTY","description":"<p>The <code>tty<\/code> module houses the <code>tty.ReadStream<\/code> and <code>tty.WriteStream<\/code> classes. In\nmost cases, you will not need to use this module directly.\n\n<\/p>\n<p>When node detects that it is being run inside a TTY context, then <code>process.stdin<\/code>\nwill be a <code>tty.ReadStream<\/code> instance and <code>process.stdout<\/code> will be\na <code>tty.WriteStream<\/code> instance. The preferred way to check if node is being run in\na TTY context is to check <code>process.stdout.isTTY<\/code>:\n\n<\/p>\n<pre><code>$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tty_isatty_fd","title":"tty.isatty(fd)","description":"<p>Returns <code>true<\/code> or <code>false<\/code> depending on if the <code>fd<\/code> is associated with a\nterminal.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tty_setrawmode_mode","title":"tty.setRawMode(mode)","description":"<p>Deprecated. Use <code>tty.ReadStream#setRawMode()<\/code>\n(i.e. <code>process.stdin.setRawMode()<\/code>) instead.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_writestream","title":"Class WriteStream","description":"<p>A <code>net.Socket<\/code> subclass that represents the writable portion of a tty. In normal\ncircumstances, <code>process.stdout<\/code> will be the only <code>tty.WriteStream<\/code> instance\never created (and only when <code>isatty(1)<\/code> is true).\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib","title":"Zlib","description":"<p>You can access this module with:\n\n<\/p>\n<pre><code>var zlib = require(&#39;zlib&#39;);<\/code><\/pre>\n<p>This provides bindings to Gzip\/Gunzip, Deflate\/Inflate, and\nDeflateRaw\/InflateRaw classes.  Each class takes the same options, and\nis a readable\/writable Stream.\n\n<\/p>\n<h2>Examples<\/h2>\n<p>Compressing or decompressing a file can be done by piping an\nfs.ReadStream into a zlib stream, then into an fs.WriteStream.\n\n<\/p>\n<pre><code>var gzip = zlib.createGzip();\nvar fs = require(&#39;fs&#39;);\nvar inp = fs.createReadStream(&#39;input.txt&#39;);\nvar out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);<\/code><\/pre>\n<p>Compressing or decompressing data in one step can be done by using\nthe convenience methods.\n\n<\/p>\n<pre><code>var input = &#39;.................................&#39;;\nzlib.deflate(input, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  }\n});\n\nvar buffer = new Buffer(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString());\n  }\n});<\/code><\/pre>\n<p>To use this module in an HTTP client or server, use the\n<a href=\"http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.3\">accept-encoding<\/a>\non requests, and the\n<a href=\"http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.11\">content-encoding<\/a>\nheader on responses.\n\n<\/p>\n<p><strong>Note: these examples are drastically simplified to show\nthe basic concept.<\/strong>  Zlib encoding can be expensive, and the results\nought to be cached.  See <a href=\"#zlib_memory_usage_tuning\">Memory Usage Tuning<\/a>\nbelow for more information on the speed\/memory\/compression\ntradeoffs involved in zlib usage.\n\n<\/p>\n<pre><code>\/\/ client request example\nvar zlib = require(&#39;zlib&#39;);\nvar http = require(&#39;http&#39;);\nvar fs = require(&#39;fs&#39;);\nvar request = http.get({ host: &#39;izs.me&#39;,\n                         path: &#39;\/&#39;,\n                         port: 80,\n                         headers: { &#39;accept-encoding&#39;: &#39;gzip,deflate&#39; } });\nrequest.on(&#39;response&#39;, function(response) {\n  var output = fs.createWriteStream(&#39;izs.me_index.html&#39;);\n\n  switch (response.headers[&#39;content-encoding&#39;]) {\n    \/\/ or, just use zlib.createUnzip() to handle both cases\n    case &#39;gzip&#39;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &#39;deflate&#39;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n\n\/\/ server example\n\/\/ Running a gzip operation on every request is quite expensive.\n\/\/ It would be much more efficient to cache the compressed buffer.\nvar zlib = require(&#39;zlib&#39;);\nvar http = require(&#39;http&#39;);\nvar fs = require(&#39;fs&#39;);\nhttp.createServer(function(request, response) {\n  var raw = fs.createReadStream(&#39;index.html&#39;);\n  var acceptEncoding = request.headers[&#39;accept-encoding&#39;];\n  if (!acceptEncoding) {\n    acceptEncoding = &#39;&#39;;\n  }\n\n  \/\/ Note: this is not a conformant accept-encoding parser.\n  \/\/ See http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(\/\\bdeflate\\b\/)) {\n    response.writeHead(200, { &#39;content-encoding&#39;: &#39;deflate&#39; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(\/\\bgzip\\b\/)) {\n    response.writeHead(200, { &#39;content-encoding&#39;: &#39;gzip&#39; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_creategzip_options","title":"zlib.createGzip([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_gzip\">Gzip<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_creategunzip_options","title":"zlib.createGunzip([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_gunzip\">Gunzip<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createdeflate_options","title":"zlib.createDeflate([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_deflate\">Deflate<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createinflate_options","title":"zlib.createInflate([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_inflate\">Inflate<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createdeflateraw_options","title":"zlib.createDeflateRaw([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_deflateraw\">DeflateRaw<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createinflateraw_options","title":"zlib.createInflateRaw([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_inflateraw\">InflateRaw<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createunzip_options","title":"zlib.createUnzip([options])","description":"<p>Returns a new <a href=\"#zlib_class_zlib_unzip\">Unzip<\/a> object with an\n<a href=\"#zlib_options\">options<\/a>.\n\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflate_buf_callback","title":"zlib.deflate(buf, callback)","description":"<p>Compress a string with Deflate.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflateraw_buf_callback","title":"zlib.deflateRaw(buf, callback)","description":"<p>Compress a string with DeflateRaw.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gzip_buf_callback","title":"zlib.gzip(buf, callback)","description":"<p>Compress a string with Gzip.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gunzip_buf_callback","title":"zlib.gunzip(buf, callback)","description":"<p>Decompress a raw Buffer with Gunzip.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflate_buf_callback","title":"zlib.inflate(buf, callback)","description":"<p>Decompress a raw Buffer with Inflate.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflateraw_buf_callback","title":"zlib.inflateRaw(buf, callback)","description":"<p>Decompress a raw Buffer with InflateRaw.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_unzip_buf_callback","title":"zlib.unzip(buf, callback)","description":"<p>Decompress a raw Buffer with Unzip.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_convenience_methods","title":"Convenience Methods","description":"<p>All of these take a string or buffer as the first argument, and call the\nsupplied callback with <code>callback(error, result)<\/code>.  The\ncompression\/decompression engine is created using the default settings\nin all convenience methods.  To supply different options, use the\nzlib classes directly.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_options","title":"Options","description":"<p>Each class takes an options object.  All options are optional.  (The\nconvenience methods use the default settings for all options.)\n\n<\/p>\n<p>Note that some options are only relevant when compressing, and are\nignored by the decompression classes.\n\n<\/p>\n<ul>\n<li>flush (default: <code>zlib.Z_NO_FLUSH<\/code>)<\/li>\n<li>chunkSize (default: 16*1024)<\/li>\n<li>windowBits<\/li>\n<li>level (compression only)<\/li>\n<li>memLevel (compression only)<\/li>\n<li>strategy (compression only)<\/li>\n<li>dictionary (deflate\/inflate only, empty dictionary by default)<\/li>\n<\/ul>\n<p>See the description of <code>deflateInit2<\/code> and <code>inflateInit2<\/code> at\n<\/p>\n<p><a href=\"http:\/\/zlib.net\/manual.html#Advanced\">http:\/\/zlib.net\/manual.html#Advanced<\/a> for more information on these.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_memory_usage_tuning","title":"Memory Usage Tuning","description":"<p>From <code>zlib\/zconf.h<\/code>, modified to node&#39;s usage:\n\n<\/p>\n<p>The memory requirements for deflate are (in bytes):\n\n<\/p>\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))<\/code><\/pre>\n<p>that is: 128K for windowBits=15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\n<\/p>\n<p>For example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:\n\n<\/p>\n<pre><code>{ windowBits: 14, memLevel: 7 }<\/code><\/pre>\n<p>Of course this will generally degrade compression (there&#39;s no free lunch).\n\n<\/p>\n<p>The memory requirements for inflate are (in bytes)\n\n<\/p>\n<pre><code>1 &lt;&lt; windowBits<\/code><\/pre>\n<p>that is, 32K for windowBits=15 (default value) plus a few kilobytes\nfor small objects.\n\n<\/p>\n<p>This is in addition to a single internal output slab buffer of size\n<code>chunkSize<\/code>, which defaults to 16K.\n\n<\/p>\n<p>The speed of zlib compression is affected most dramatically by the\n<code>level<\/code> setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\n<\/p>\n<p>In general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it&#39;ll be able to process more data in a\nsingle <code>write<\/code> operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_constants","title":"Constants","description":"<p>All of the constants defined in zlib.h are also defined on\n<code>require(&#39;zlib&#39;)<\/code>.\nIn the normal course of operations, you will not need to ever set any of\nthese.  They are documented here so that their presence is not\nsurprising.  This section is taken almost directly from the <a href=\"http:\/\/zlib.net\/manual.html#Constants\">zlib\ndocumentation<\/a>.  See\n<\/p>\n<p><a href=\"http:\/\/zlib.net\/manual.html#Constants\">http:\/\/zlib.net\/manual.html#Constants<\/a> for more details.\n\n<\/p>\n<p>Allowed flush values.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_NO_FLUSH<\/code><\/li>\n<li><code>zlib.Z_PARTIAL_FLUSH<\/code><\/li>\n<li><code>zlib.Z_SYNC_FLUSH<\/code><\/li>\n<li><code>zlib.Z_FULL_FLUSH<\/code><\/li>\n<li><code>zlib.Z_FINISH<\/code><\/li>\n<li><code>zlib.Z_BLOCK<\/code><\/li>\n<li><code>zlib.Z_TREES<\/code><\/li>\n<\/ul>\n<p>Return codes for the compression\/decompression functions. Negative\nvalues are errors, positive values are used for special but normal\nevents.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_OK<\/code><\/li>\n<li><code>zlib.Z_STREAM_END<\/code><\/li>\n<li><code>zlib.Z_NEED_DICT<\/code><\/li>\n<li><code>zlib.Z_ERRNO<\/code><\/li>\n<li><code>zlib.Z_STREAM_ERROR<\/code><\/li>\n<li><code>zlib.Z_DATA_ERROR<\/code><\/li>\n<li><code>zlib.Z_MEM_ERROR<\/code><\/li>\n<li><code>zlib.Z_BUF_ERROR<\/code><\/li>\n<li><code>zlib.Z_VERSION_ERROR<\/code><\/li>\n<\/ul>\n<p>Compression levels.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_NO_COMPRESSION<\/code><\/li>\n<li><code>zlib.Z_BEST_SPEED<\/code><\/li>\n<li><code>zlib.Z_BEST_COMPRESSION<\/code><\/li>\n<li><code>zlib.Z_DEFAULT_COMPRESSION<\/code><\/li>\n<\/ul>\n<p>Compression strategy.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_FILTERED<\/code><\/li>\n<li><code>zlib.Z_HUFFMAN_ONLY<\/code><\/li>\n<li><code>zlib.Z_RLE<\/code><\/li>\n<li><code>zlib.Z_FIXED<\/code><\/li>\n<li><code>zlib.Z_DEFAULT_STRATEGY<\/code><\/li>\n<\/ul>\n<p>Possible values of the data_type field.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_BINARY<\/code><\/li>\n<li><code>zlib.Z_TEXT<\/code><\/li>\n<li><code>zlib.Z_ASCII<\/code><\/li>\n<li><code>zlib.Z_UNKNOWN<\/code><\/li>\n<\/ul>\n<p>The deflate compression method (the only one supported in this version).\n\n<\/p>\n<ul>\n<li><code>zlib.Z_DEFLATED<\/code><\/li>\n<\/ul>\n<p>For initializing zalloc, zfree, opaque.\n\n<\/p>\n<ul>\n<li><code>zlib.Z_NULL<\/code><\/li>\n<\/ul>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os","title":"os","description":"<p>Provides a few basic operating-system related utility functions.\n\n<\/p>\n<p>Use <code>require(&#39;os&#39;)<\/code> to access this module.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_tmpdir","title":"os.tmpdir()","description":"<p>Returns the operating system&#39;s default directory for temp files.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_endianness","title":"os.endianness()","description":"<p>Returns the endianness of the CPU. Possible values are <code>&quot;BE&quot;<\/code> or <code>&quot;LE&quot;<\/code>.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_hostname","title":"os.hostname()","description":"<p>Returns the hostname of the operating system.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_type","title":"os.type()","description":"<p>Returns the operating system name.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_platform","title":"os.platform()","description":"<p>Returns the operating system platform.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_arch","title":"os.arch()","description":"<p>Returns the operating system CPU architecture.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_release","title":"os.release()","description":"<p>Returns the operating system release.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_uptime","title":"os.uptime()","description":"<p>Returns the system uptime in seconds.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_loadavg","title":"os.loadavg()","description":"<p>Returns an array containing the 1, 5, and 15 minute load averages.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_totalmem","title":"os.totalmem()","description":"<p>Returns the total amount of system memory in bytes.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_freemem","title":"os.freemem()","description":"<p>Returns the amount of free system memory in bytes.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_cpus","title":"os.cpus()","description":"<p>Returns an array of objects containing information about each CPU\/core\ninstalled: model, speed (in MHz), and times (an object containing the number of\nmilliseconds the CPU\/core spent in: user, nice, sys, idle, and irq).\n\n<\/p>\n<p>Example inspection of os.cpus:\n\n<\/p>\n<pre><code>[ { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 252020,\n       nice: 0,\n       sys: 30340,\n       idle: 1070356870,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 306960,\n       nice: 0,\n       sys: 26980,\n       idle: 1071569080,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 248450,\n       nice: 0,\n       sys: 21750,\n       idle: 1070919370,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 256880,\n       nice: 0,\n       sys: 19430,\n       idle: 1070905480,\n       irq: 20 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 511580,\n       nice: 20,\n       sys: 40900,\n       idle: 1070842510,\n       irq: 0 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 291660,\n       nice: 0,\n       sys: 34360,\n       idle: 1070888000,\n       irq: 10 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 308260,\n       nice: 0,\n       sys: 55410,\n       idle: 1071129970,\n       irq: 880 } },\n  { model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times:\n     { user: 266450,\n       nice: 1480,\n       sys: 34920,\n       idle: 1072572010,\n       irq: 30 } } ]<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_networkinterfaces","title":"os.networkInterfaces()","description":"<p>Get a list of network interfaces:\n\n<\/p>\n<pre><code>{ lo0: \n   [ { address: &#39;::1&#39;, family: &#39;IPv6&#39;, internal: true },\n     { address: &#39;fe80::1&#39;, family: &#39;IPv6&#39;, internal: true },\n     { address: &#39;127.0.0.1&#39;, family: &#39;IPv4&#39;, internal: true } ],\n  en1: \n   [ { address: &#39;fe80::cabc:c8ff:feef:f996&#39;, family: &#39;IPv6&#39;,\n       internal: false },\n     { address: &#39;10.0.1.123&#39;, family: &#39;IPv4&#39;, internal: false } ],\n  vmnet1: [ { address: &#39;10.99.99.254&#39;, family: &#39;IPv4&#39;, internal: false } ],\n  vmnet8: [ { address: &#39;10.88.88.1&#39;, family: &#39;IPv4&#39;, internal: false } ],\n  ppp0: [ { address: &#39;10.2.0.231&#39;, family: &#39;IPv4&#39;, internal: false } ] }<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster","title":"Cluster","description":"<p>A single instance of Node runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node\nprocesses to handle the load.\n\n<\/p>\n<p>The cluster module allows you to easily create a network of processes that\nall share server ports.\n\n<\/p>\n<pre><code>var cluster = require(&#39;cluster&#39;);\nvar http = require(&#39;http&#39;);\nvar numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  \/\/ Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, function(worker, code, signal) {\n    console.log(&#39;worker &#39; + worker.process.pid + &#39; died&#39;);\n  });\n} else {\n  \/\/ Workers can share any TCP connection\n  \/\/ In this case its a HTTP server\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n  }).listen(8000);\n}<\/code><\/pre>\n<p>Running node will now share port 8000 between the workers:\n\n<\/p>\n<pre><code>% NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online<\/code><\/pre>\n<p>This feature was introduced recently, and may change in future versions.\nPlease try it out and provide feedback.\n\n<\/p>\n<p>Also note that, on Windows, it is not yet possible to set up a named pipe\nserver in a worker.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_setupmaster_settings","title":"cluster.setupMaster([settings])","description":"<p><code>setupMaster<\/code> is used to change the default &#39;fork&#39; behavior. The new settings\nare effective immediately and permanently, they cannot be changed later on.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>var cluster = require(&quot;cluster&quot;);\ncluster.setupMaster({\n  exec : &quot;worker.js&quot;,\n  args : [&quot;--use&quot;, &quot;https&quot;],\n  silent : true\n});\ncluster.fork();<\/code><\/pre>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_fork_env","title":"cluster.fork([env])","description":"<p>Spawn a new worker process. This can only be called from the master process.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_disconnect_callback","title":"cluster.disconnect([callback])","description":"<p>When calling this method, all workers will commit a graceful suicide. When they are\ndisconnected all internal handlers will be closed, allowing the master process to\ndie graceful if no other event is waiting.\n\n<\/p>\n<p>The method takes an optional callback argument which will be called when finished.\n\n<\/p>\n"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_how_it_works","title":"How It Works","description":"<p>The worker processes are spawned using the <code>child_process.fork<\/code> method,\nso that they can communicate with the parent via IPC and pass server\nhandles back and forth.\n\n<\/p>\n<p>When you call <code>server.listen(...)<\/code> in a worker, it serializes the\narguments and passes the request to the master process.  If the master\nprocess already has a listening server matching the worker&#39;s\nrequirements, then it passes the handle to the worker.  If it does not\nalready have a listening server matching that requirement, then it will\ncreate one, and pass the handle to the child.\n\n<\/p>\n<p>This causes potentially surprising behavior in three edge cases:\n\n<\/p>\n<ol>\n<li><code>server.listen({fd: 7})<\/code> Because the message is passed to the master,\nfile descriptor 7 <strong>in the parent<\/strong> will be listened on, and the\nhandle passed to the worker, rather than listening to the worker&#39;s\nidea of what the number 7 file descriptor references.<\/li>\n<li><code>server.listen(handle)<\/code> Listening on handles explicitly will cause\nthe worker to use the supplied handle, rather than talk to the master\nprocess.  If the worker already has the handle, then it&#39;s presumed\nthat you know what you are doing.<\/li>\n<li><code>server.listen(0)<\/code> Normally, this will cause servers to listen on a\nrandom port.  However, in a cluster, each worker will receive the\nsame &quot;random&quot; port each time they do <code>listen(0)<\/code>.  In essence, the\nport is random the first time, but predictable thereafter.  If you\nwant to listen on a unique port, generate a port number based on the\ncluster worker ID.<\/li>\n<\/ol>\n<p>When multiple processes are all <code>accept()<\/code>ing on the same underlying\nresource, the operating system load-balances across them very\nefficiently.  There is no routing logic in Node.js, or in your program,\nand no shared state between the workers.  Therefore, it is important to\ndesign your program such that it does not rely too heavily on in-memory\ndata objects for things like sessions and login.\n\n<\/p>\n<p>Because workers are all separate processes, they can be killed or\nre-spawned depending on your program&#39;s needs, without affecting other\nworkers.  As long as there are some workers still alive, the server will\ncontinue to accept connections.  Node does not automatically manage the\nnumber of workers for you, however.  It is your responsibility to manage\nthe worker pool for your application&#39;s needs.\n\n<\/p>\n"}]