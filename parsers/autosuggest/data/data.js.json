[{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date","title":"Date","description":"Summary\nCreates JavaScript&nbsp;Date instances which let you work with dates and times.\nSyntax\n\r\n          new Date()\nnew Date(milliseconds)\nnew Date(dateString)\nnew Date(year, month, day [, hour, minute, second, millisecond ])\r\n        \nNote:&nbsp;Note that JavaScript Date objects can only be instantiated by calling JavaScript Date as a constructor: calling it as a regular function (i.e. without the new operator) will return a string rather than a Date object; unlike other JavaScript object types, JavaScript Date objects have no literal syntax.\n\nParameters\n milliseconds Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).\n\n dateString String value representing a date. The string should be in a format recognized by the parse method (IETF-compliant RFC 1123 timestamps).\n\n year Integer value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.\n\n month Integer value representing the month, beginning with 0 for January to 11 for December.\n\n day Integer value representing the day of the month (1-31).\n\n hour Integer value representing the hour of the day (0-23).\n\n minute Integer value representing the minute segment (0-59) of a time reading.\n\n second Integer value representing the second segment (0-59) of a time reading.\n\n millisecond Integer value representing the millisecond segment (0-999) of a time reading.\n\nDescription\nIf you supply no arguments, the constructor creates a JavaScript Date object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds.\nThe JavaScript&nbsp;date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The JavaScript Date object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC.\nThe JavaScript Date object provides uniform behavior across platforms.\nThe JavaScript&nbsp;Date object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.\nInvoking JavaScript&nbsp;Date in a non-constructor context (i.e., without the new operator) will return a string representing the current time.\nProperties\nFor properties available on Date instances, see Properties of Date instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to a JavaScript&nbsp;Date object.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Date instances, see Methods of Date instances. \n\n\n\n\n\n\n\n\n\n\n now Returns the numeric value corresponding to the current time. parse Parses a string representation of a JavaScript date, and returns the number of milliseconds since January 1, 1970, 00:00:00, local time. UTC Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a JavaScript&nbsp;Date object since January 1, 1970, 00:00:00, universal time.\n\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nJavaScript&nbsp;Date instances\n  Date instances inherit from Date.prototype  . You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript&nbsp;Date instances. For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods getFullYear, setFullYear, getUTCFullYear, and setUTCFullYear.\n\t  Properties   constructor Returns the function that created an instance. This is the  Date constructor by default.   \n\nProperties inherited from  Object:__parent__, __proto__\n\n   Methods   getDate Returns the day of the month (1-31) for the specified date according to local time.   getDay Returns the day of the week (0-6) for the specified date according to local time.   getFullYear Returns the year (4 digits for 4-digit years) of the specified date according to local time.   getHours Returns the hour (0-23) in the specified date according to local time.   getMilliseconds Returns the milliseconds (0-999) in the specified date according to local time.   getMinutes Returns the minutes (0-59) in the specified date according to local time.   getMonth Returns the month (0-11) in the specified date according to local time.   getSeconds Returns the seconds (0-59) in the specified date according to local time.   getTime Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).   getTimezoneOffset Returns the time-zone offset in minutes for the current locale.   getUTCDate Returns the day (date) of the month (1-31) in the specified date according to universal time.   getUTCDay Returns the day of the week (0-6) in the specified date according to universal time.   getUTCFullYear Returns the year (4 digits for 4-digit years) in the specified date according to universal time.   getUTCHours Returns the hours (0-23) in the specified date according to universal time.   getUTCMilliseconds Returns the milliseconds (0-999) in the specified date according to universal time.   getUTCMinutes Returns the minutes (0-59) in the specified date according to universal time.   getUTCMonth Returns the month (0-11) in the specified date according to universal time.   getUTCSeconds Returns the seconds (0-59) in the specified date according to universal time.   getYear \n\nDeprecated\n\n Returns the year (usually 2-3 digits) in the specified date according to local time. Use getFullYear instead.   setDate Sets the day of the month (1-31) for a specified date according to local time.   setFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to local time.   setHours Sets the hours (0-23) for a specified date according to local time.   setMilliseconds Sets the milliseconds (0-999) for a specified date according to local time.   setMinutes Sets the minutes (0-59) for a specified date according to local time.   setMonth Sets the month (0-11) for a specified date according to local time.   setSeconds Sets the seconds (0-59) for a specified date according to local time.   setTime Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.   setUTCDate Sets the day of the month (1-31) for a specified date according to universal time.   setUTCFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to universal time.   setUTCHours Sets the hour (0-23) for a specified date according to universal time.   setUTCMilliseconds Sets the milliseconds (0-999) for a specified date according to universal time.   setUTCMinutes Sets the minutes (0-59) for a specified date according to universal time.   setUTCMonth Sets the month (0-11) for a specified date according to universal time.   setUTCSeconds Sets the seconds (0-59) for a specified date according to universal time.   setYear \n\nDeprecated\n\n Sets the year (usually 2-3 digits) for a specified date according to local time. Use setFullYear instead.   toDateString Returns the &quot;date&quot; portion of the Date as a human-readable string. toISOString Converts a date to a string following the ISO 8601 Extended Format. toJSON \nRequires JavaScript 1.8.5\n Returns a string encapsulating the Date object in JSON&nbsp;format.   toGMTString \n\nDeprecated\n\n Converts a date to a string, using the Internet GMT conventions. Use toUTCString instead.   toLocaleDateString Returns the &quot;date&quot; portion of the Date as a string, using the current locale's conventions.   toLocaleFormat Non-standard      Converts a date to a string, using a format string.   toLocaleString Converts a date to a string, using the current locale's conventions. Overrides the Object.toLocaleString method.   toLocaleTimeString Returns the &quot;time&quot; portion of the Date as a string, using the current locale's conventions.   toSource Non-standard      Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.   toString Returns a string representing the specified Date object. Overrides the Object.prototype.toString method.   toTimeString Returns the &quot;time&quot; portion of the Date as a human-readable string.   toUTCString Converts a date to a string, using the universal time convention.   valueOf Returns the primitive value of a Date object. Overrides the Object.prototype.valueOf method.  \n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n\nExamples\nExample: Several ways to assign dates\nThe following examples show several ways to assign JavaScript&nbsp;dates:\n\r\n          today = new Date();\nbirthday = new Date(&quot;December 17, 1995 03:24:00&quot;);\nbirthday = new Date(1995,11,17);\nbirthday = new Date(1995,11,17,3,24,0);\r\n        \nExample: Calculating elapsed time\nThe following examples show how to determine the elapsed time between two JavaScript&nbsp;dates:\n\r\n          \/\/ using static methods\nvar start = Date.now();\n\/\/ the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = Date.now();\nvar elapsed = end - start; \/\/ time in milliseconds\r\n        \n\/\/ if you have Date objects\nvar start = new Date();\n\/\/ the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = new Date();\nvar elapsed = end.getTime() - start.getTime(); \/\/ time in milliseconds\n\n\r\n          \/\/ if you want to test a function and get back its return\nfunction printElapsedTime (fTest) {\n\tvar nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now();\n\talert(&quot;Elapsed time: &quot; + String(nEndTime - nStartTime) + &quot; milliseconds&quot;);\n\treturn vReturn;\n}\n\nyourFunctionReturn = printElapsedTime(yourFunction);\r\n        \nExample: ISO 8601 formatted dates\nDate.toISOString() is now supported, so you can use that.\nThe following example demonstrates how to manually format a JavaScript date, in an ISO 8601 format using UTC:\n\r\n          \/* use a function for the exact format desired... *\/\nfunction ISODateString(d){\n  function pad(n){return n&lt;10 ? '0'+n : n}\n  return d.getUTCFullYear()+'-'\n      + pad(d.getUTCMonth()+1)+'-'\n      + pad(d.getUTCDate())+'T'\n      + pad(d.getUTCHours())+':'\n      + pad(d.getUTCMinutes())+':'\n      + pad(d.getUTCSeconds())+'Z'\n}\n\nvar d = new Date();\nconsole.log(ISODateString(d)); \/\/ prints something like 2009-09-28T19:03:12Z\r\n        \n\nExample: Several ways to assign dates\nThe following examples show several ways to assign JavaScript&nbsp;dates:\n\r\n          today = new Date();\nbirthday = new Date(&quot;December 17, 1995 03:24:00&quot;);\nbirthday = new Date(1995,11,17);\nbirthday = new Date(1995,11,17,3,24,0);\r\n        \nExample: Calculating elapsed time\nThe following examples show how to determine the elapsed time between two JavaScript&nbsp;dates:\n\r\n          \/\/ using static methods\nvar start = Date.now();\n\/\/ the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = Date.now();\nvar elapsed = end - start; \/\/ time in milliseconds\r\n        \n\/\/ if you have Date objects\nvar start = new Date();\n\/\/ the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = new Date();\nvar elapsed = end.getTime() - start.getTime(); \/\/ time in milliseconds\n\n\r\n          \/\/ if you want to test a function and get back its return\nfunction printElapsedTime (fTest) {\n\tvar nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now();\n\talert(&quot;Elapsed time: &quot; + String(nEndTime - nStartTime) + &quot; milliseconds&quot;);\n\treturn vReturn;\n}\n\nyourFunctionReturn = printElapsedTime(yourFunction);\r\n        \nExample: ISO 8601 formatted dates\nDate.toISOString() is now supported, so you can use that.\nThe following example demonstrates how to manually format a JavaScript date, in an ISO 8601 format using UTC:\n\r\n          \/* use a function for the exact format desired... *\/\nfunction ISODateString(d){\n  function pad(n){return n&lt;10 ? '0'+n : n}\n  return d.getUTCFullYear()+'-'\n      + pad(d.getUTCMonth()+1)+'-'\n      + pad(d.getUTCDate())+'T'\n      + pad(d.getUTCHours())+':'\n      + pad(d.getUTCMinutes())+':'\n      + pad(d.getUTCSeconds())+'Z'\n}\n\nvar d = new Date();\nconsole.log(ISODateString(d)); \/\/ prints something like 2009-09-28T19:03:12Z\r\n        \n\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean","title":"Boolean","description":"Summary\nThe Boolean object is an object wrapper for a boolean value.\nSyntax\n\r\n          new Boolean(value)\r\n        \nParameters\n value The initial value of the Boolean object.\n\nDescription\nThe value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (&quot;&quot;), the object has an initial value of false. All other values, including any object or the string &quot;false&quot;, create an object with an initial value of true.\nDo not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.\nAny object whose value is not undefined or null, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:\n\r\n          x = new Boolean(false);\nif (x) {\n  \/\/ . . . this code is executed\n}\r\n        \nThis behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to false:\n\r\n          x = false;\nif (x) {\n  \/\/ . . . this code is not executed\n}\r\n        \nDo not use a Boolean object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:\n\r\n          x = Boolean(expression);     \/\/ preferred\nx = new Boolean(expression); \/\/ don't use\r\n        \nIf you specify any object, including a Boolean object whose value is false, as the initial value of a Boolean object, the new Boolean object has a value of true.\n\r\n          myFalse = new Boolean(false);   \/\/ initial value of false\ng = new Boolean(myFalse);       \/\/ initial value of true\nmyString = new String(&quot;Hello&quot;); \/\/ string object\ns = new Boolean(myString);      \/\/ initial value of true\r\n        \nDo not use a Boolean object in place of a Boolean primitive.\nProperties\nFor properties available on Boolean instances, see Properties of Boolean instances. \n\n\n\n\n\n\n\n\n\n\nprototype: Defines a property that is shared by all Boolean objects.\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Boolean instances, see Methods of Boolean instances. \n\n\n\n\n\n\n\n\n\n\nThe global Boolean object contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nBoolean instances\nAll Boolean instances inherit from Boolean.prototype. As with all constructors, the prototype object dictates instances' inherited properties and methods.\nProperties\n\n constructor Returns the function that created an instance's prototype. This is the Boolean function by default.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.\n\n toString Returns a string of either &quot;true&quot; or &quot;false&quot; depending upon the value of the object. Overrides the Object.prototype.toStringmethod.\n\n valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\n\nProperties\n\n constructor Returns the function that created an instance's prototype. This is the Boolean function by default.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.\n\n toString Returns a string of either &quot;true&quot; or &quot;false&quot; depending upon the value of the object. Overrides the Object.prototype.toStringmethod.\n\n valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\n\nExamples\nCreating Boolean objects with an initial value of false\n\r\n          bNoParam = new Boolean();\nbZero = new Boolean(0);\nbNull = new Boolean(null);\nbEmptyString = new Boolean(&quot;&quot;);\nbfalse = new Boolean(false);\r\n        \nCreating Boolean objects with an initial value of true\n\r\n          btrue = new Boolean(true);\nbtrueString = new Boolean(&quot;true&quot;);\nbfalseString = new Boolean(&quot;false&quot;);\nbSuLin = new Boolean(&quot;Su Lin&quot;);\r\n        \nCreating Boolean objects with an initial value of false\n\r\n          bNoParam = new Boolean();\nbZero = new Boolean(0);\nbNull = new Boolean(null);\nbEmptyString = new Boolean(&quot;&quot;);\nbfalse = new Boolean(false);\r\n        \nCreating Boolean objects with an initial value of true\n\r\n          btrue = new Boolean(true);\nbtrueString = new Boolean(&quot;true&quot;);\nbfalseString = new Boolean(&quot;false&quot;);\nbSuLin = new Boolean(&quot;Su Lin&quot;);\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\nSee also\n Boolean.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects","title":"Global Objects","description":"Standard global objects (by category) General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  Standard global objects (alphabetically)  Array ArrayBuffer Boolean Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error eval EvalError Float32Array Float64Array Function Infinity Int16Array Int32Array Int8Array isFinite isNaN Iterator JSON Math NaN Number Object parseFloat parseInt RangeError ReferenceError RegExp StopIteration String SyntaxError TypeError Uint16Array Uint32Array Uint8Array Uint8ClampedArray undefined uneval URIError  Other objects in the global scope are either created by the user script or provided by the host application. The host objects available in Gecko-based browsers are documented in the Gecko DOM Reference. For more information about the distinction between the DOM and core JavaScript, see The DOM and JavaScript article.\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array","title":"Array","description":"Summary\nThe JavaScript&nbsp;Array global object is a constructor for arrays, which are high-level, list-like objects.\nSyntax\n \r\n          [element0, element1, ..., elementN]\nnew Array(element0, element1, ..., elementN)\nnew Array(arrayLength)\r\n        \n\n element0, element1, ..., elementN  A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the&nbsp;Array constructor and that argument is a number. (See below.) Note that this special case only applies to JavaScript arrays created with the&nbsp;Array constructor, not with array literals created with the bracket syntax. arrayLength If the first argument passed to the&nbsp;Array constructor is an integer between 0 and 232-1 (inclusive), a new JavaScript array is created with that number of elements. If the argument is any other number, a RangeError exception is thrown.\n\nDescription\nArrays are list-like objects that come with a several built-in methods to perform traversal and mutation operations. Neither the size of a JavaScript array nor the types of its elements are fixed.&nbsp; Since an array's size can grow or shrink at any time, JavaScript arrays are not guaranteed to be dense.&nbsp; In general, these are convenient characteristics, but if these are desirable things to have for your use case, you might consider using WebGL typed arrays.\nNote that you shouldn't use an array as an associative array. You can use plain objects instead, although doing so comes with its own caveats. See the post Lightweight JavaScript dictionaries with arbitrary keys as an example.\nAccessing array elements\nJavaScript arrays are zero-indexed; the first element of an array is actually at index 0, and the last element is at the index one less than the value of the array's length property.\n\r\n          var arr = [&quot;this is the first element&quot;, &quot;this is the second element&quot;];\nconsole.log(arr[0]);              \/\/ prints &quot;this is the first element&quot;\nconsole.log(arr[1]);              \/\/ prints &quot;this is the second element&quot;\nconsole.log(arr[arr.length - 1]); \/\/ prints &quot;this is the second element&quot;\r\n        \nArray elements are just object properties, in the way that toString is a property. However, note that trying to access the first element of an array as follows will throw a syntax error:\n\r\n          console.log(arr.0);\r\n        \nNote that there is nothing unique about JavaScript arrays and their properties that causes this. JavaScript properties that begin with a digit cannot be referenced with the dot notation.&nbsp; They must be accessed using bracket notation.&nbsp; For example, if you had an object with a property &quot;3d&quot;, it would not be possible to access it using dot notation, either. It, too, would have to be referenced using bracket notation.&nbsp; This similarity is exhibited in the following two code samples:\n\r\n          var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];\ntry {\n  console.log(years.0);\n}\ncatch (ex) {\n  console.log(&quot;Using bracket notation&quot;);\n  console.log(years[0]);\n}\r\n        \n\r\n          try {\n  renderer.3d.setTexture(model, &quot;character.png&quot;);\n}\ncatch (ex) {\n  console.log(&quot;Using bracket notation&quot;);\n  renderer[&quot;3d&quot;].setTexture(model, &quot;character.png&quot;);\n}\r\n        \nNote that in the 3d example, &quot;3d&quot; had to be quoted.&nbsp; It's possible to quote the JavaScript array indexes as well (e.g., years[&quot;2&quot;] instead of years[2]), though it's not necessary.&nbsp; The 2 in years[2] eventually gets coerced into a string by the JavaScript engine anyway, through an implicit toString conversion.&nbsp; It is for this reason that &quot;2&quot; and &quot;02&quot; would refer to two different slots on the years object and the following example logs true:\n\r\n          console.log(years[&quot;2&quot;] != years[&quot;02&quot;]);\r\n        \nRelationship between length and numerical properties\nA JavaScript array's length property and numerical properties are connected.&nbsp; Several of the built-in array methods (e.g., join, slice, indexOf, etc.) take into account the value of an array's length property when they're called.&nbsp; Other methods (e.g., push, splice, etc.) also result in updates to an array's length property.\n\r\n          var fruits = [];\nfruits.push(&quot;banana&quot;, &quot;apple&quot;, &quot;peach&quot;);\n\nconsole.log(fruits.length); \/\/ logs 3\r\n        \nWhen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the array will grow to a size large enough to accommodate an element at that index, and the engine will update the array's length property accordingly:\n\r\n          fruits[3] = &quot;mango&quot;;\nconsole.log(fruits[3]);\nconsole.log(fruits.length); \/\/ logs 4\r\n        \nSetting the length property directly also results in special behavior.\n\r\n          fruits.length = 10;\nconsole.log(fruits);        \/\/ The array gets padded with undefined\nconsole.log(fruits.length); \/\/ 10\r\n        \nThis is explained further on the length page.\nCreating an array using the result of a match\nThe result of a match between a regular expression and a string can create a JavaScript array. This array has properties and elements that provide information about the match. An array is the return value of RegExp.exec, String.match, and String.replace. To help explain these properties and elements, look at the following example and then refer to the table below:\n\r\n          \/\/ Match one d followed by one or more b's followed by one d\n\/\/ Remember matched b's and the following d\n\/\/ Ignore case\n\nvar myRe = \/d(b+)(d)\/i;\nvar myArray = myRe.exec(&quot;cdbBdbsbz&quot;);\r\n        \nThe properties and elements returned from this match are as follows:\n   Property\/Element Description Example   input A read-only property that reflects the original string against which the regular expression was matched. cdbBdbsbz   index A read-only property that is the zero-based index of the match in the string. 1   [0] A read-only element that specifies the last matched characters. dbBd   [1], ...[n] Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited. [1]: bB [2]: d  \n\nAccessing array elements\nJavaScript arrays are zero-indexed; the first element of an array is actually at index 0, and the last element is at the index one less than the value of the array's length property.\n\r\n          var arr = [&quot;this is the first element&quot;, &quot;this is the second element&quot;];\nconsole.log(arr[0]);              \/\/ prints &quot;this is the first element&quot;\nconsole.log(arr[1]);              \/\/ prints &quot;this is the second element&quot;\nconsole.log(arr[arr.length - 1]); \/\/ prints &quot;this is the second element&quot;\r\n        \nArray elements are just object properties, in the way that toString is a property. However, note that trying to access the first element of an array as follows will throw a syntax error:\n\r\n          console.log(arr.0);\r\n        \nNote that there is nothing unique about JavaScript arrays and their properties that causes this. JavaScript properties that begin with a digit cannot be referenced with the dot notation.&nbsp; They must be accessed using bracket notation.&nbsp; For example, if you had an object with a property &quot;3d&quot;, it would not be possible to access it using dot notation, either. It, too, would have to be referenced using bracket notation.&nbsp; This similarity is exhibited in the following two code samples:\n\r\n          var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];\ntry {\n  console.log(years.0);\n}\ncatch (ex) {\n  console.log(&quot;Using bracket notation&quot;);\n  console.log(years[0]);\n}\r\n        \n\r\n          try {\n  renderer.3d.setTexture(model, &quot;character.png&quot;);\n}\ncatch (ex) {\n  console.log(&quot;Using bracket notation&quot;);\n  renderer[&quot;3d&quot;].setTexture(model, &quot;character.png&quot;);\n}\r\n        \nNote that in the 3d example, &quot;3d&quot; had to be quoted.&nbsp; It's possible to quote the JavaScript array indexes as well (e.g., years[&quot;2&quot;] instead of years[2]), though it's not necessary.&nbsp; The 2 in years[2] eventually gets coerced into a string by the JavaScript engine anyway, through an implicit toString conversion.&nbsp; It is for this reason that &quot;2&quot; and &quot;02&quot; would refer to two different slots on the years object and the following example logs true:\n\r\n          console.log(years[&quot;2&quot;] != years[&quot;02&quot;]);\r\n        \nRelationship between length and numerical properties\nA JavaScript array's length property and numerical properties are connected.&nbsp; Several of the built-in array methods (e.g., join, slice, indexOf, etc.) take into account the value of an array's length property when they're called.&nbsp; Other methods (e.g., push, splice, etc.) also result in updates to an array's length property.\n\r\n          var fruits = [];\nfruits.push(&quot;banana&quot;, &quot;apple&quot;, &quot;peach&quot;);\n\nconsole.log(fruits.length); \/\/ logs 3\r\n        \nWhen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the array will grow to a size large enough to accommodate an element at that index, and the engine will update the array's length property accordingly:\n\r\n          fruits[3] = &quot;mango&quot;;\nconsole.log(fruits[3]);\nconsole.log(fruits.length); \/\/ logs 4\r\n        \nSetting the length property directly also results in special behavior.\n\r\n          fruits.length = 10;\nconsole.log(fruits);        \/\/ The array gets padded with undefined\nconsole.log(fruits.length); \/\/ 10\r\n        \nThis is explained further on the length page.\nCreating an array using the result of a match\nThe result of a match between a regular expression and a string can create a JavaScript array. This array has properties and elements that provide information about the match. An array is the return value of RegExp.exec, String.match, and String.replace. To help explain these properties and elements, look at the following example and then refer to the table below:\n\r\n          \/\/ Match one d followed by one or more b's followed by one d\n\/\/ Remember matched b's and the following d\n\/\/ Ignore case\n\nvar myRe = \/d(b+)(d)\/i;\nvar myArray = myRe.exec(&quot;cdbBdbsbz&quot;);\r\n        \nThe properties and elements returned from this match are as follows:\n   Property\/Element Description Example   input A read-only property that reflects the original string against which the regular expression was matched. cdbBdbsbz   index A read-only property that is the zero-based index of the match in the string. 1   [0] A read-only element that specifies the last matched characters. dbBd   [1], ...[n] Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited. [1]: bB [2]: d  \n\nProperties\nFor properties available on Array instances, see Properties of Array instances. \n\n\n\n\n\n\n\n\n\n\n   prototype Allows the addition of properties to all objects.  \n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Array instances, see Methods of Array instances. \n\n\n\n\n\n\n\n\n\n\n isArray  \nRequires JavaScript 1.8.5\n Return true if a variable is an array, if not false. \n\nArray instances\nArray&nbsp;instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all JavaScript&nbsp;Array instances.\nProperties\n\n constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch\n\n\nMethods\nMutator methods\n\nThese methods modify the array:\n pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.\n\n\nAccessor methods\n\n\nThese methods do not modify the array and return some representation of the array.\n concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf \nRequires JavaScript 1.6\n Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf \nRequires JavaScript 1.6\n Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\n\nIteration methods\n\nSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.\n filter \nRequires JavaScript 1.6\n Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach \nRequires JavaScript 1.6\n Calls a function for each element in the array. every \nRequires JavaScript 1.6\n Returns true if every element in this array satisfies the provided testing function. map \nRequires JavaScript 1.6\n Creates a new array with the results of calling a provided function on every element in this array. some \nRequires JavaScript 1.6\n Returns true if at least one element in this array satisfies the provided testing function. reduce \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n\n\nProperties\n\n constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch\n\n\nMethods\nMutator methods\n\nThese methods modify the array:\n pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.\n\n\nAccessor methods\n\n\nThese methods do not modify the array and return some representation of the array.\n concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf \nRequires JavaScript 1.6\n Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf \nRequires JavaScript 1.6\n Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\n\nIteration methods\n\nSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.\n filter \nRequires JavaScript 1.6\n Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach \nRequires JavaScript 1.6\n Calls a function for each element in the array. every \nRequires JavaScript 1.6\n Returns true if every element in this array satisfies the provided testing function. map \nRequires JavaScript 1.6\n Creates a new array with the results of calling a provided function on every element in this array. some \nRequires JavaScript 1.6\n Returns true if at least one element in this array satisfies the provided testing function. reduce \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n\n\nMutator methods\n\nThese methods modify the array:\n pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.\n\n\nAccessor methods\n\n\nThese methods do not modify the array and return some representation of the array.\n concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf \nRequires JavaScript 1.6\n Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf \nRequires JavaScript 1.6\n Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\n\nIteration methods\n\nSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.\n filter \nRequires JavaScript 1.6\n Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach \nRequires JavaScript 1.6\n Calls a function for each element in the array. every \nRequires JavaScript 1.6\n Returns true if every element in this array satisfies the provided testing function. map \nRequires JavaScript 1.6\n Creates a new array with the results of calling a provided function on every element in this array. some \nRequires JavaScript 1.6\n Returns true if at least one element in this array satisfies the provided testing function. reduce \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n\n\nExamples\nExample: Creating an Array\nThe following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100.\n\r\n          var msgArray = new Array();\nmsgArray[0] = &quot;Hello&quot;;\nmsgArray[99] = &quot;world&quot;;\n\nif (msgArray.length == 100)\n   print(&quot;The length is 100.&quot;);\r\n        \nExample: Creating a Two-dimensional Array\nThe following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank.\n\r\n          var board = \n[ ['R','N','B','Q','K','B','N','R'],\n  ['P','P','P','P','P','P','P','P'],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  ['p','p','p','p','p','p','p','p'],\n  ['r','n','b','q','k','b','n','r']];\nprint(board.join('\\n') + '\\n\\n');\n\n\/\/ Move King's Pawn forward 2\nboard[4][4] = board[6][4];\nboard[6][4] = ' ';\nprint(board.join('\\n'));\r\n        \nHere is the output:\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , , \n , , , , , , , \n , , , , , , , \n , , , , , , , \np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , , \n , , , , , , , \n , , , ,p, , , \n , , , , , , , \np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n\nExample: Creating an Array\nThe following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100.\n\r\n          var msgArray = new Array();\nmsgArray[0] = &quot;Hello&quot;;\nmsgArray[99] = &quot;world&quot;;\n\nif (msgArray.length == 100)\n   print(&quot;The length is 100.&quot;);\r\n        \nExample: Creating a Two-dimensional Array\nThe following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank.\n\r\n          var board = \n[ ['R','N','B','Q','K','B','N','R'],\n  ['P','P','P','P','P','P','P','P'],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  ['p','p','p','p','p','p','p','p'],\n  ['r','n','b','q','k','b','n','r']];\nprint(board.join('\\n') + '\\n\\n');\n\n\/\/ Move King's Pawn forward 2\nboard[4][4] = board[6][4];\nboard[6][4] = ' ';\nprint(board.join('\\n'));\r\n        \nHere is the output:\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , , \n , , , , , , , \n , , , , , , , \n , , , , , , , \np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , , \n , , , , , , , \n , , , ,p, , , \n , , , , , , , \np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)   \n\nSee Also\n Indexing Object Properties in Core JavaScript 1.5 Guide:Working with Object New in JavaScript 1.7: Array comprehensions New in JavaScript 1.6: Array extras Draft: Typed Arrays\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function","title":"Function","description":"Summary\nEvery function in JavaScript is actually a Function object.\nSyntax\nnew Function ([arg1[, arg2[, ... argN]],] functionBody)\nParameters\n arg1, arg2, ... argN Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example &quot;x&quot;, &quot;theValue&quot;, or &quot;a,b&quot;.\n\n functionBody A string containing the JavaScript statements comprising the function definition.\n\nDescription\nFunction objects created with the Function constructor are parsed when the function is created. This is less efficient than declaring a function and calling it within your code, because functions declared with the function statement are parsed with the rest of the code.\nAll arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.\nInvoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor.\nProperties\nFor properties available on Function instances, see Properties of Function instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the extension of all Function objects.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Function instances, see Methods of Function instances. \n\n\n\n\n\n\n\n\n\n\nAlthough the Function object does not provide any methods of its own, it does inherit methods through the prototype chain.\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nFunction instances\nFunction instances inherit from Function.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Function instances.\nProperties\n\n arguments\n\nDeprecated\n\n An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.\n\n arity\n\nObsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.\n\n caller Non-standard      Specifies the function that invoked the currently executing function.\n\n constructor Specifies the function that creates an object's prototype.\n\n length Specifies the number of arguments expected by the function.\n\n name Non-standard      The name of the function.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n\n apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.\n\n bind&nbsp;\nRequires JavaScript 1.8.5\n Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.\n\n call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator \nRequires JavaScript 1.8.6\n Returns true if the function is a generator; otherwise returns false.\n\n toSource&nbsp;Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.\n\n toString Returns a string representing the source code of the function. Overrides the Object.toString method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n\n\nProperties\n\n arguments\n\nDeprecated\n\n An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.\n\n arity\n\nObsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.\n\n caller Non-standard      Specifies the function that invoked the currently executing function.\n\n constructor Specifies the function that creates an object's prototype.\n\n length Specifies the number of arguments expected by the function.\n\n name Non-standard      The name of the function.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n\n apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.\n\n bind&nbsp;\nRequires JavaScript 1.8.5\n Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.\n\n call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator \nRequires JavaScript 1.8.6\n Returns true if the function is a generator; otherwise returns false.\n\n toSource&nbsp;Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.\n\n toString Returns a string representing the source code of the function. Overrides the Object.toString method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n\n\nExample: Specifying arguments with the Function constructor\nThe following code creates a Function object that takes two arguments.\n\r\n          \/\/ Example can be run directly in your JavaScript console\n\n\/\/ Create a function that takes two arguments and returns the sum of those arguments\nvar adder = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;);\n\n\/\/ Call the function\nadder(2, 6);\n\/\/ &gt; 8\r\n        \nThe arguments &quot;a&quot; and &quot;b&quot; are formal argument names that are used in the function body, &quot;return a + b&quot;.\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\nSee also\n function Operator function Statement Functions\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number","title":"Number","description":"Summary\nCreates a wrapper object to allow you to work with numerical values.\nSyntax\nnew Number(value)\nParameters\n value The numeric value of the object being created.\n\nDescription\nThe primary uses for the Number object are:\nIf the argument cannot be converted into a number, it returns NaN.\nIn a non-constructor context (i.e., without the new operator), Number can be used to perform a type conversion.\nProperties\nFor properties available on Number instances, see Properties of Number instances. \n\n\n\n\n\n\n\n\n\n\nThe largest positive representable number.&nbsp; The largest negative representable number is -MAX_VALUE.\n MAX_VALUE\n\nThe smallest positive representable number -- that is, the positive number closest to zero (without actually being zero).&nbsp; The smallest negative representable number is -MIN_VALUE.\n MIN_VALUE\n\n NaN Special &quot;not a number&quot; value.\n\n NEGATIVE_INFINITY Special value representing negative infinity; returned on overflow.\n\n POSITIVE_INFINITY Special value representing infinity; returned on overflow.\n\n prototype Allows the addition of properties to a Number object.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Number instances, see Methods of Number instances. \n\n\n\n\n\n\n\n\n\n\nAlthough the Number object contains no methods of its own, it does inherit some methods through the prototype chain.\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nNumber instances\nAll Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances.\nProperties\n\n constructor Returns the function that created this object's instance. By default this is the Number object.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n\n\nProperties\n\n constructor Returns the function that created this object's instance. By default this is the Number object.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n\n\nExamples\nExample: Using the Number object to assign values to numeric variables\nThe following example uses the Number object's properties to assign values to several numeric variables:\n\r\n          biggestNum = Number.MAX_VALUE;\nsmallestNum = Number.MIN_VALUE;\ninfiniteNum = Number.POSITIVE_INFINITY;\nnegInfiniteNum = Number.NEGATIVE_INFINITY;\nnotANum = Number.NaN;\r\n        \nExample: Using Number to convert a Date object\nThe following example converts the Date object to a numerical value using Number as a function:\n\r\n          var d = new Date(&quot;December 17, 1995 03:24:00&quot;);\nprint(Number(d));\r\n        \nThis displays &quot;819199440000&quot;.\nExample: Using the Number object to assign values to numeric variables\nThe following example uses the Number object's properties to assign values to several numeric variables:\n\r\n          biggestNum = Number.MAX_VALUE;\nsmallestNum = Number.MIN_VALUE;\ninfiniteNum = Number.POSITIVE_INFINITY;\nnegInfiniteNum = Number.NEGATIVE_INFINITY;\nnotANum = Number.NaN;\r\n        \nExample: Using Number to convert a Date object\nThe following example converts the Date object to a numerical value using Number as a function:\n\r\n          var d = new Date(&quot;December 17, 1995 03:24:00&quot;);\nprint(Number(d));\r\n        \nThis displays &quot;819199440000&quot;.\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\nSee also\n NaN The Math global object\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object","title":"Object","description":"Summary\nCreates an object wrapper.\nSyntax\nnew Object( [ value ] )\nParameters\n value Any value.\n\nDescription\nThe Object constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of a type that corresponds to the given value.\nWhen called in a non-constructor context, Object behaves identically.\nProperties\nFor properties available on Object instances, see Properties of Object instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to all objects of type Object.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on Object instances, see Methods of Object instances. \n\n\n\n\n\n\n\n\n\n\n create \nRequires JavaScript 1.8.5\n Creates a new object with the specified prototype object and properties. defineProperty \nRequires JavaScript 1.8.5\n Adds the named property described by a given descriptor to an object. defineProperties \nRequires JavaScript 1.8.5\n Adds the named properties described by the given descriptors to an object. getOwnPropertyDescriptor \nRequires JavaScript 1.8.5\n Returns a property descriptor for a named property on an object. keys \nRequires JavaScript 1.8.5\n Returns an array containing the names of all of the given object's own enumerable properties. getOwnPropertyNames \nRequires JavaScript 1.8.5\n Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties. getPrototypeOf \nRequires JavaScript 1.8.1\n Returns the prototype of the specified object. preventExtensions \nRequires JavaScript 1.8.5\n Prevents any extensions of an object. isExtensible \nRequires JavaScript 1.8.5\n Determine if extending of an object is allowed. seal \nRequires JavaScript 1.8.5\n Prevents other code from deleting properties of an object. isSealed \nRequires JavaScript 1.8.5\n Determine if an object is sealed. freeze \nRequires JavaScript 1.8.5\n Freezes an object: other code can't delete or change any properties. isFrozen \nRequires JavaScript 1.8.5\n Determine if an object was frozen.\n\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nObject instances\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden. For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\nProperties\n\n constructor Specifies the function that creates an object's prototype. __count__ \n\nObsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__ \n\nObsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.\n\n\nMethods\n\n __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.\n\n __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.\n\n eval \n\nObsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.\n\n __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.\n\n __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.\n\n __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.\n\n propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\n toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.\n\n toLocaleString Calls toString.\n\n toString Returns a string representation of the object.\n\n unwatch Non-standard      Removes a watchpoint from a property of the object.\n\n valueOf Returns the primitive value of the specified object.\n\n watch Non-standard      Adds a watchpoint to a property of the object.\n\n\nProperties\n\n constructor Specifies the function that creates an object's prototype. __count__ \n\nObsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__ \n\nObsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.\n\n\nMethods\n\n __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.\n\n __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.\n\n eval \n\nObsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.\n\n __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.\n\n __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.\n\n __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.\n\n propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\n toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.\n\n toLocaleString Calls toString.\n\n toString Returns a string representation of the object.\n\n unwatch Non-standard      Removes a watchpoint from a property of the object.\n\n valueOf Returns the primitive value of the specified object.\n\n watch Non-standard      Adds a watchpoint to a property of the object.\n\n\nExamples\nExample: Using Object given undefined and null types\nThe following examples store an empty Object object in o:\n\r\n          var o = new Object();\r\n        \n\r\n          var o = new Object(undefined);\r\n        \n\r\n          var o = new Object(null);\r\n        \nExample: Using Object to create Boolean objects\nThe following examples store Boolean objects in o:\n\r\n          \/\/ equivalent to o = new Boolean(true);\nvar o = new Object(true);\r\n        \n\r\n          \/\/ equivalent to o = new Boolean(false);\nvar o = new Object(Boolean());\r\n        \nExample: Using Object given undefined and null types\nThe following examples store an empty Object object in o:\n\r\n          var o = new Object();\r\n        \n\r\n          var o = new Object(undefined);\r\n        \n\r\n          var o = new Object(null);\r\n        \nExample: Using Object to create Boolean objects\nThe following examples store Boolean objects in o:\n\r\n          \/\/ equivalent to o = new Boolean(true);\nvar o = new Object(true);\r\n        \n\r\n          \/\/ equivalent to o = new Boolean(false);\nvar o = new Object(Boolean());\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp","title":"RegExp","description":"Summary\nCreates a regular expression object for matching text with a pattern.\nSyntax\nRegExp(pattern [, flags]) \/pattern\/flags\nParameters\n pattern The text of the regular expression.\n\n flags\n\nIf specified, flags can have any combination of the following values:\n g global match i ignore case m Treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\n\n y \nNew in Firefox 3\n Non-standard      sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes). This allows the match-only-at-start capabilities of the character &quot;^&quot; to effectively be used at any location in a string by changing the value of the lastIndex property.\n\nDescription\nWhen using the constructor function, the normal string escape rules (preceding special characters with \\ when included in a string) are necessary. For example, the following are equivalent:\n\r\n          var re = new RegExp(&quot;\\\\w+&quot;);\nvar re = \/\\w+\/;\r\n        \nNotice that the parameters to the literal format do not use quotation marks to indicate strings, while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:\n\r\n          \/ab+c\/i;\nnew RegExp(&quot;ab+c&quot;, &quot;i&quot;);\r\n        \nSpecial characters in regular expressions\n   Character Meaning   \\  For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, \/b\/ matches the character 'b'. By placing a backslash in front of b, that is by using \/\\b\/, the character becomes special to mean match a word boundary. or For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, \/a*\/ means match 0 or more &quot;a&quot;s. To match * literally, precede it with a backslash; for example, \/a\\*\/ matches 'a*'.    ^  Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, \/^A\/ does not match the 'A' in &quot;an A&quot;, but does match the first 'A' in &quot;An A.&quot;    $  Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, \/t$\/ does not match the 't' in &quot;eater&quot;, but does match it in &quot;eat&quot;.    *  Matches the preceding item 0 or more times. For example, \/bo*\/ matches 'boooo' in &quot;A ghost booooed&quot; and 'b' in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.    +  Matches the preceding item 1 or more times. Equivalent to {1,}. For example, \/a+\/ matches the 'a' in &quot;candy&quot; and all the a's in &quot;caaaaaaandy&quot;.    ?  Matches the preceding item 0 or 1 time. For example, \/e?le?\/ matches the 'el' in &quot;angel&quot; and the 'le' in &quot;angle.&quot; If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.    .  (The decimal point) matches any single character except the newline characters: \\n \\r \\u2028 or \\u2029. ([\\s\\S] can be used to match any character including newlines.) For example, \/.n\/ matches 'an' and 'on' in &quot;nay, an apple is on the tree&quot;, but not 'nay'.    (x)  Matches x and remembers the match. These are called capturing parentheses. For example, \/(foo)\/ matches and remembers 'foo' in &quot;foo bar.&quot; The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    (?:x)  Matches x but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    x(?=y)  Matches x only if x is followed by y. For example, \/Jack(?=Sprat)\/ matches 'Jack' only if it is followed by 'Sprat'. \/Jack(?=Sprat|Frost)\/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.    x(?!y)  Matches x only if x is not followed by y. For example, \/\\d+(?!\\.)\/ matches a number only if it is not followed by a decimal point. \/\\d+(?!\\.)\/.exec(&quot;3.141&quot;) matches 141 but not 3.141.    x|y  Matches either x or y. For example, \/green|red\/ matches 'green' in &quot;green apple&quot; and 'red' in &quot;red apple.&quot;    {n}  Where n is a positive integer. Matches exactly n occurrences of the preceding item. For example, \/a{2}\/ doesn't match the 'a' in &quot;candy,&quot; but it matches all of the a's in &quot;caandy,&quot; and the first two a's in &quot;caaandy.&quot;    {n,}  Where n is a positive integer. Matches at least n occurrences of the preceding item. For example, \/a{2,}\/ doesn't match the 'a' in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy.&quot;    {n,m}  Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding item. For example, \/a{1,3}\/ matches nothing in &quot;cndy&quot;, the 'a' in &quot;candy,&quot; the first two a's in &quot;caandy,&quot; and the first three a's in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more a's in it.    [xyz]  A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen. For example, [abcd] is the same as [a-d]. They match the 'b' in &quot;brisket&quot; and the 'c' in &quot;chop&quot;.    [^xyz]  A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen. For example, [^abc] is the same as [^a-c]. They initially match 'r' in &quot;brisket&quot; and 'h' in &quot;chop.&quot;    [\\b]  Matches a backspace. (Not to be confused with \\b.)    \\b  Matches a word boundary, such as a space. (Not to be confused with [\\b].) For example, \/\\bn\\w\/ matches the 'no' in &quot;noonday&quot;; \/\\wy\\b\/ matches the 'ly' in &quot;possibly yesterday.&quot;    \\B  Matches a non-word boundary. For example, \/\\w\\Bn\/ matches 'on' in &quot;noonday&quot;, and \/y\\B\\w\/ matches 'ye' in &quot;possibly yesterday.&quot;    \\cX  Where X is a letter from A - Z. Matches a control character in a string. For example, \/\\cM\/ matches control-M in a string.    \\d  Matches a digit character in the basic Latin alphabet. Equivalent to [0-9]. Note: In Firefox 2 and earlier, matches a digit character from any alphabet. (\n\nbug 378738\n) For example, \/\\d\/ or \/[0-9]\/ matches '2' in &quot;B2 is the suite number.&quot;    \\D  Matches any character that is not a digit in the basic Latin alphabet. Equivalent to [^0-9]. Note: In Firefox 2 and earlier, excludes digit characters from all alphabets. (\n\nbug 378738\n) For example, \/\\D\/ or \/[^0-9]\/ matches 'B' in &quot;B2 is the suite number.&quot;    \\f  Matches a form-feed.    \\n  Matches a linefeed.    \\r  Matches a carriage return.    \\s  Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces.\n[equivalent_s] For example, \/\\s\\w*\/ matches ' bar' in &quot;foo bar.&quot;    \\S  Matches a single character other than white space.\n[equivalent_S] For example, \/\\S\\w*\/ matches 'foo' in &quot;foo bar.&quot;    \\t  Matches a tab.    \\v  Matches a vertical tab.    \\w  Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_]. For example, \/\\w\/ matches 'a' in &quot;apple,&quot; '5' in &quot;$5.28,&quot; and '3' in &quot;3D.&quot;    \\W  Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_]. For example, \/\\W\/ or \/[^A-Za-z0-9_]\/ matches '%' in &quot;50%.&quot;    \\n  Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, \/apple(,)\\sorange\\1\/ matches 'apple, orange,' in &quot;apple, orange, cherry, peach.&quot; A more complete example follows this table.    \\0  Matches a NUL character. Do not follow this with another digit.    \\xhh  Matches the character with the code hh (two hexadecimal digits)    \\uhhhh  Matches the character with the Unicode value hhhh (four hexadecimal digits).   \n\nThe literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.\nThe constructor of the regular expression object, for example, new RegExp(&quot;ab+c&quot;), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.\n \n^Equivalent to: [\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]  \n^Equivalent to:\n[^\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]\nSpecial characters in regular expressions\n   Character Meaning   \\  For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally. For example, \/b\/ matches the character 'b'. By placing a backslash in front of b, that is by using \/\\b\/, the character becomes special to mean match a word boundary. or For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally. For example, * is a special character that means 0 or more occurrences of the preceding character should be matched; for example, \/a*\/ means match 0 or more &quot;a&quot;s. To match * literally, precede it with a backslash; for example, \/a\\*\/ matches 'a*'.    ^  Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character. For example, \/^A\/ does not match the 'A' in &quot;an A&quot;, but does match the first 'A' in &quot;An A.&quot;    $  Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character. For example, \/t$\/ does not match the 't' in &quot;eater&quot;, but does match it in &quot;eat&quot;.    *  Matches the preceding item 0 or more times. For example, \/bo*\/ matches 'boooo' in &quot;A ghost booooed&quot; and 'b' in &quot;A bird warbled&quot;, but nothing in &quot;A goat grunted&quot;.    +  Matches the preceding item 1 or more times. Equivalent to {1,}. For example, \/a+\/ matches the 'a' in &quot;candy&quot; and all the a's in &quot;caaaaaaandy&quot;.    ?  Matches the preceding item 0 or 1 time. For example, \/e?le?\/ matches the 'el' in &quot;angel&quot; and the 'le' in &quot;angle.&quot; If used immediately after any of the quantifiers *, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times). Also used in lookahead assertions, described under (?=), (?!), and (?:) in this table.    .  (The decimal point) matches any single character except the newline characters: \\n \\r \\u2028 or \\u2029. ([\\s\\S] can be used to match any character including newlines.) For example, \/.n\/ matches 'an' and 'on' in &quot;nay, an apple is on the tree&quot;, but not 'nay'.    (x)  Matches x and remembers the match. These are called capturing parentheses. For example, \/(foo)\/ matches and remembers 'foo' in &quot;foo bar.&quot; The matched substring can be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    (?:x)  Matches x but does not remember the match. These are called non-capturing parentheses. The matched substring can not be recalled from the resulting array's elements [1], ..., [n] or from the predefined RegExp object's properties $1, ..., $9.    x(?=y)  Matches x only if x is followed by y. For example, \/Jack(?=Sprat)\/ matches 'Jack' only if it is followed by 'Sprat'. \/Jack(?=Sprat|Frost)\/ matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.    x(?!y)  Matches x only if x is not followed by y. For example, \/\\d+(?!\\.)\/ matches a number only if it is not followed by a decimal point. \/\\d+(?!\\.)\/.exec(&quot;3.141&quot;) matches 141 but not 3.141.    x|y  Matches either x or y. For example, \/green|red\/ matches 'green' in &quot;green apple&quot; and 'red' in &quot;red apple.&quot;    {n}  Where n is a positive integer. Matches exactly n occurrences of the preceding item. For example, \/a{2}\/ doesn't match the 'a' in &quot;candy,&quot; but it matches all of the a's in &quot;caandy,&quot; and the first two a's in &quot;caaandy.&quot;    {n,}  Where n is a positive integer. Matches at least n occurrences of the preceding item. For example, \/a{2,}\/ doesn't match the 'a' in &quot;candy&quot;, but matches all of the a's in &quot;caandy&quot; and in &quot;caaaaaaandy.&quot;    {n,m}  Where n and m are positive integers. Matches at least n and at most m occurrences of the preceding item. For example, \/a{1,3}\/ matches nothing in &quot;cndy&quot;, the 'a' in &quot;candy,&quot; the first two a's in &quot;caandy,&quot; and the first three a's in &quot;caaaaaaandy&quot;. Notice that when matching &quot;caaaaaaandy&quot;, the match is &quot;aaa&quot;, even though the original string had more a's in it.    [xyz]  A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen. For example, [abcd] is the same as [a-d]. They match the 'b' in &quot;brisket&quot; and the 'c' in &quot;chop&quot;.    [^xyz]  A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen. For example, [^abc] is the same as [^a-c]. They initially match 'r' in &quot;brisket&quot; and 'h' in &quot;chop.&quot;    [\\b]  Matches a backspace. (Not to be confused with \\b.)    \\b  Matches a word boundary, such as a space. (Not to be confused with [\\b].) For example, \/\\bn\\w\/ matches the 'no' in &quot;noonday&quot;; \/\\wy\\b\/ matches the 'ly' in &quot;possibly yesterday.&quot;    \\B  Matches a non-word boundary. For example, \/\\w\\Bn\/ matches 'on' in &quot;noonday&quot;, and \/y\\B\\w\/ matches 'ye' in &quot;possibly yesterday.&quot;    \\cX  Where X is a letter from A - Z. Matches a control character in a string. For example, \/\\cM\/ matches control-M in a string.    \\d  Matches a digit character in the basic Latin alphabet. Equivalent to [0-9]. Note: In Firefox 2 and earlier, matches a digit character from any alphabet. (\n\nbug 378738\n) For example, \/\\d\/ or \/[0-9]\/ matches '2' in &quot;B2 is the suite number.&quot;    \\D  Matches any character that is not a digit in the basic Latin alphabet. Equivalent to [^0-9]. Note: In Firefox 2 and earlier, excludes digit characters from all alphabets. (\n\nbug 378738\n) For example, \/\\D\/ or \/[^0-9]\/ matches 'B' in &quot;B2 is the suite number.&quot;    \\f  Matches a form-feed.    \\n  Matches a linefeed.    \\r  Matches a carriage return.    \\s  Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces.\n[equivalent_s] For example, \/\\s\\w*\/ matches ' bar' in &quot;foo bar.&quot;    \\S  Matches a single character other than white space.\n[equivalent_S] For example, \/\\S\\w*\/ matches 'foo' in &quot;foo bar.&quot;    \\t  Matches a tab.    \\v  Matches a vertical tab.    \\w  Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to [A-Za-z0-9_]. For example, \/\\w\/ matches 'a' in &quot;apple,&quot; '5' in &quot;$5.28,&quot; and '3' in &quot;3D.&quot;    \\W  Matches any character that is not a word character from the basic Latin alphabet. Equivalent to [^A-Za-z0-9_]. For example, \/\\W\/ or \/[^A-Za-z0-9_]\/ matches '%' in &quot;50%.&quot;    \\n  Where n is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses). For example, \/apple(,)\\sorange\\1\/ matches 'apple, orange,' in &quot;apple, orange, cherry, peach.&quot; A more complete example follows this table.    \\0  Matches a NUL character. Do not follow this with another digit.    \\xhh  Matches the character with the code hh (two hexadecimal digits)    \\uhhhh  Matches the character with the Unicode value hhhh (four hexadecimal digits).   \n\nThe literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.\nThe constructor of the regular expression object, for example, new RegExp(&quot;ab+c&quot;), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.\n \n^Equivalent to: [\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]  \n^Equivalent to:\n[^\\t\\n\\v\\f\\r \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]\nProperties\nFor properties available on RegExp instances, see Properties of RegExp instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to all objects.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on RegExp instances, see Methods of RegExp instances. \n\n\n\n\n\n\n\n\n\n\nThe global RegExp object has no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nRegExp instances\nProperties\n\nSee also Deprecated RegExp Properties\nNote that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.\n constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky \nNew in Firefox 3\n Non-standard      Whether or not the search is sticky.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n  See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.  \n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n Properties\n\nSee also Deprecated RegExp Properties\nNote that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.\n constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky \nNew in Firefox 3\n Non-standard      Whether or not the search is sticky.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n  See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.  \n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n Examples\nExample: Using a regular expression to change data format\nThe following script uses the replace method inherited by the String instance to match a name in the format first last and output it in the format last, first. In the replacement text, the script uses $1 and $2 to indicate the results of the corresponding matching parentheses in the regular expression pattern.\n\r\n          var re = \/(\\w+)\\s(\\w+)\/;\nvar str = &quot;John Smith&quot;;\nvar newstr = str.replace(re, &quot;$2, $1&quot;);\nprint(newstr);\r\n        \nThis displays &quot;Smith, John&quot;.\nExample: Using a regular expression with the &quot;sticky&quot; flag\nThis example demonstrates how one could use the sticky flag on regular expressions to match individual lines of multiline input.\n\r\n          var text = &quot;First line\\nsecond line&quot;;\nvar regex = \/(\\S+) line\\n?\/y;\n\nvar match = regex.exec(text);\nprint(match[1]);  \/\/ prints &quot;First&quot;\nprint(regex.lastIndex); \/\/ prints 11\n\nvar match2 = regex.exec(text);\nprint(match2[1]); \/\/ prints &quot;Second&quot;\nprint(regex.lastIndex); \/\/ prints &quot;22&quot;\n\nvar match3 = regex.exec(text);\nprint(match3 === null); \/\/ prints &quot;true&quot;\r\n        \nOne can test at run-time whether the sticky flag is supported, using try&nbsp;{&nbsp;&hellip;&nbsp;} catch&nbsp;{&nbsp;&hellip;&nbsp;}. For this, either an eval(&hellip;) expression or the RegExp(regex-string,&nbsp;flags-string) syntax must be used (since the \/regex\/flags notation is processed at compile-time, so throws an exception before the catch block is encountered). For example:\n\r\n          var supports_sticky;\ntry { RegExp('','y'); supports_sticky = true; }\ncatch(e) { supports_sticky = false; }\nalert(supports_sticky); \/\/ alerts &quot;false&quot; in Firefox 2, &quot;true&quot; in Firefox 3+\r\n        \nExample: Using a regular expression to change data format\nThe following script uses the replace method inherited by the String instance to match a name in the format first last and output it in the format last, first. In the replacement text, the script uses $1 and $2 to indicate the results of the corresponding matching parentheses in the regular expression pattern.\n\r\n          var re = \/(\\w+)\\s(\\w+)\/;\nvar str = &quot;John Smith&quot;;\nvar newstr = str.replace(re, &quot;$2, $1&quot;);\nprint(newstr);\r\n        \nThis displays &quot;Smith, John&quot;.\nExample: Using a regular expression with the &quot;sticky&quot; flag\nThis example demonstrates how one could use the sticky flag on regular expressions to match individual lines of multiline input.\n\r\n          var text = &quot;First line\\nsecond line&quot;;\nvar regex = \/(\\S+) line\\n?\/y;\n\nvar match = regex.exec(text);\nprint(match[1]);  \/\/ prints &quot;First&quot;\nprint(regex.lastIndex); \/\/ prints 11\n\nvar match2 = regex.exec(text);\nprint(match2[1]); \/\/ prints &quot;Second&quot;\nprint(regex.lastIndex); \/\/ prints &quot;22&quot;\n\nvar match3 = regex.exec(text);\nprint(match3 === null); \/\/ prints &quot;true&quot;\r\n        \nOne can test at run-time whether the sticky flag is supported, using try&nbsp;{&nbsp;&hellip;&nbsp;} catch&nbsp;{&nbsp;&hellip;&nbsp;}. For this, either an eval(&hellip;) expression or the RegExp(regex-string,&nbsp;flags-string) syntax must be used (since the \/regex\/flags notation is processed at compile-time, so throws an exception before the catch block is encountered). For example:\n\r\n          var supports_sticky;\ntry { RegExp('','y'); supports_sticky = true; }\ncatch(e) { supports_sticky = false; }\nalert(supports_sticky); \/\/ alerts &quot;false&quot; in Firefox 2, &quot;true&quot; in Firefox 3+\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Supported) ? ? ?   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support ? (Supported) ? ? ?   \n\nSee also\n Regular Expressions chapter in the JavaScript Guide\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String","title":"String","description":"Summary\nThe String global object is a constructor for strings, or a sequence of characters.\nSyntax\nString literals take the forms:\n\r\n          'string text'\n&quot;string text&quot;\r\n        \nOr, using the String global object directly:\n\r\n          String(thing)\nnew String(thing)\r\n        \nParameters\n thing Anything to be converted to a string.\n\nDescription\nStrings are useful for holding data that can be represented in text form. Some of the most-used operations on strings are to check their length, to build and concatenate them using the + and += string operators, and checking for the existence or location of substrings with the substring and substr methods.\nCharacter access\nThere are two ways to access an individual character in a string. The first is the charAt method:\n\r\n          return 'cat'.charAt(1); \/\/ returns &quot;a&quot;\r\n        \nThe other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\r\n          return 'cat'[1]; \/\/ returns &quot;a&quot;\r\n        \nArray-like character access (the second way above) is not part of ECMAScript 3. It is a JavaScript and ECMAScript 5 feature.\nFor character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.)\nComparing strings\nC developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators:\n\r\n          var a = &quot;a&quot;;\nvar b = &quot;b&quot;;\nif (a &lt; b) \/\/ true\n  print(a + &quot; is less than &quot; + b);\nelse if (a &gt; b)\n  print(a + &quot; is greater than &quot; + b);\nelse\n  print(a + &quot; and &quot; + b + &quot; are equal.&quot;);\r\n        \nA similar result can be achieved using the localeCompare method inherited by String instances.\nDistinction between string primitives and String objects\nNote that JavaScript distinguishes between String objects and primitive string values. (The same is true of booleans and numbers.)\nString literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives and String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup.\n\r\n          var s_prim = &quot;foo&quot;;\nvar s_obj = new String(s_prim);\n\nconsole.log(typeof s_prim); \/\/ Logs &quot;string&quot;\nconsole.log(typeof s_obj);  \/\/ Logs &quot;object&quot;\r\n        \nString primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example:\n\r\n          s1 = &quot;2 + 2&quot;;               \/\/ creates a string primitive\ns2 = new String(&quot;2 + 2&quot;);   \/\/ creates a String object\nconsole.log(eval(s1));      \/\/ returns the number 4\nconsole.log(eval(s2));      \/\/ returns the string &quot;2 + 2&quot;\r\n        \nFor these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction.\nA String object can always be converted to its primitive counterpart with the valueOf method.\n\r\n          console.log(eval(s2.valueOf())); \/\/ returns the number 4\r\n        \nCharacter access\nThere are two ways to access an individual character in a string. The first is the charAt method:\n\r\n          return 'cat'.charAt(1); \/\/ returns &quot;a&quot;\r\n        \nThe other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\r\n          return 'cat'[1]; \/\/ returns &quot;a&quot;\r\n        \nArray-like character access (the second way above) is not part of ECMAScript 3. It is a JavaScript and ECMAScript 5 feature.\nFor character access using bracket notation, attempting to delete or assign a value to these properties will not succeed. The properties involved are neither writable nor configurable. (See Object.defineProperty for more information.)\nComparing strings\nC developers have the strcmp() function for comparing strings. In JavaScript, you just use the less-than and greater-than operators:\n\r\n          var a = &quot;a&quot;;\nvar b = &quot;b&quot;;\nif (a &lt; b) \/\/ true\n  print(a + &quot; is less than &quot; + b);\nelse if (a &gt; b)\n  print(a + &quot; is greater than &quot; + b);\nelse\n  print(a + &quot; and &quot; + b + &quot; are equal.&quot;);\r\n        \nA similar result can be achieved using the localeCompare method inherited by String instances.\nDistinction between string primitives and String objects\nNote that JavaScript distinguishes between String objects and primitive string values. (The same is true of booleans and numbers.)\nString literals (denoted by double or single quotes) and strings returned from String calls in a non-constructor context (i.e., without using the new keyword) are primitive strings. JavaScript automatically converts primitives and String objects, so that it's possible to use String object methods for primitive strings. In contexts where a method is to be invoked on a primitive string or a property lookup occurs, JavaScript will automatically wrap the string primitive and call the method or perform the property lookup.\n\r\n          var s_prim = &quot;foo&quot;;\nvar s_obj = new String(s_prim);\n\nconsole.log(typeof s_prim); \/\/ Logs &quot;string&quot;\nconsole.log(typeof s_obj);  \/\/ Logs &quot;object&quot;\r\n        \nString primitives and String objects also give different results when using eval. Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object. For example:\n\r\n          s1 = &quot;2 + 2&quot;;               \/\/ creates a string primitive\ns2 = new String(&quot;2 + 2&quot;);   \/\/ creates a String object\nconsole.log(eval(s1));      \/\/ returns the number 4\nconsole.log(eval(s2));      \/\/ returns the string &quot;2 + 2&quot;\r\n        \nFor these reasons, code may break when it encounters String objects when it expects a primitive string instead, although generally authors need not worry about the distinction.\nA String object can always be converted to its primitive counterpart with the valueOf method.\n\r\n          console.log(eval(s2.valueOf())); \/\/ returns the number 4\r\n        \nProperties\nFor properties available on String instances, see Properties of String instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to a String object.\n\n\n\nProperties inherited from  Function:arity, caller, constructor, length, name\n\n\nMethods\nFor methods available on String instances, see Methods of String instances. \n\n\n\n\n\n\n\n\n\n\n fromCharCode Returns a string created by using the specified sequence of Unicode values.\n\n\n\nMethods inherited from  Function:apply, call, toSource, toString\n\n\nString instances\nProperties\n\n constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n\n Methods unrelated to HTML\n\n charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (&quot;&quot;&quot;). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim \nRequires JavaScript 1.8.1\n Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the left side of the string. trimRight \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n\n HTML wrapper methods\n\n\n\nNon-standard\n Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.\n anchor &lt;a name=&quot;name&quot;&gt; (hypertext target) big &lt;big&gt; blink &lt;blink&gt; bold &lt;b&gt; fixed &lt;tt&gt; fontcolor &lt;font color=&quot;color&quot;&gt; fontsize &lt;font size=&quot;size&quot;&gt; italics &lt;i&gt; link &lt;a href=&quot;url&quot;&gt; (link to URL) small &lt;small&gt;. strike &lt;strike&gt; sub &lt;sub&gt; sup &lt;sup&gt;\n\nThese methods are of limited use, as they provide only a subset of the available HTML tags and attributes.\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\n\nExample\nIt's possible to use String as a &quot;safer&quot; toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example:\n\r\n          var outputStrings = [];\nfor (let i = 0, n = inputValues.length; i &lt; n; ++i) {\n  outputStrings.push(String(inputValues[i]));\n}\r\n        \nProperties\n\n constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\n\nMethods\n\n\n Methods unrelated to HTML\n\n charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (&quot;&quot;&quot;). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim \nRequires JavaScript 1.8.1\n Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the left side of the string. trimRight \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n\n HTML wrapper methods\n\n\n\nNon-standard\n Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.\n anchor &lt;a name=&quot;name&quot;&gt; (hypertext target) big &lt;big&gt; blink &lt;blink&gt; bold &lt;b&gt; fixed &lt;tt&gt; fontcolor &lt;font color=&quot;color&quot;&gt; fontsize &lt;font size=&quot;size&quot;&gt; italics &lt;i&gt; link &lt;a href=&quot;url&quot;&gt; (link to URL) small &lt;small&gt;. strike &lt;strike&gt; sub &lt;sub&gt; sup &lt;sup&gt;\n\nThese methods are of limited use, as they provide only a subset of the available HTML tags and attributes.\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\n\nExample\nIt's possible to use String as a &quot;safer&quot; toString alternative, as although it still normally calls the underlying toString, it also works for null and undefined. For example:\n\r\n          var outputStrings = [];\nfor (let i = 0, n = inputValues.length; i &lt; n; ++i) {\n  outputStrings.push(String(inputValues[i]));\n}\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 0.2 (Supported) (Supported) (Supported) (Supported)   \n\n    Feature Android Firefox Mobile (Gecko) IE&nbsp;Phone Opera Mobile Safari Mobile   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBuffer","title":"ArrayBuffer","description":"Method overview\n   ArrayBuffer ArrayBuffer(unsigned long length);  \n\nAttributes\n   Attribute Type Description   byteLength unsigned long The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. Read only.  \n\nMethods\nArrayBuffer()\nThe constructor accepts as input a byte length for the new buffer, and returns the newly-created ArrayBuffer object.\n\nArrayBuffer ArrayBuffer(\n&nbsp; unsigned long length\n);\n\nParameters\n length The size, in bytes, of the array buffer to create.\n\nReturn value\nA new ArrayBuffer object of the specified size. Its contents are initialized to 0.\nArrayBuffer()\nThe constructor accepts as input a byte length for the new buffer, and returns the newly-created ArrayBuffer object.\n\nArrayBuffer ArrayBuffer(\n&nbsp; unsigned long length\n);\n\nParameters\n length The size, in bytes, of the array buffer to create.\n\nReturn value\nA new ArrayBuffer object of the specified size. Its contents are initialized to 0.\nParameters\n length The size, in bytes, of the array buffer to create.\n\nReturn value\nA new ArrayBuffer object of the specified size. Its contents are initialized to 0.\nExample\nIn this example, we create a 32-byte buffer:\n\r\n          var buf = new ArrayBuffer(32);\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 7 4.0 (2)\n 10 11.6 5.1   \n\n    Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 4.0 4.0 (2)\n -- -- 4.2   \n\nSee also\n Typed Array Specification JavaScript typed arrays\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float32Array","title":"Float32Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Float32Array Float32Array(unsigned long length);    Float32Array Float32Array(TypedArray array);    Float32Array Float32Array(sequence&lt;type&gt; array);    Float32Array Float32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Float32Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Float32Array object.\n\nFloat32Array Float32Array(\n&nbsp; unsigned long length\n);\n\nFloat32Array Float32Array(\n&nbsp; TypedArray array\n);\n\nFloat32Array Float32Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nFloat32Array Float32Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Float32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 32-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit float.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit float.\nThe final form of the constructor creates a new Float32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Float32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 32-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit float.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit float.\nThe final form of the constructor creates a new Float32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Float32Array view on the ArrayBuffer store for this Float32Array object.\n\nFloat32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Float32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Float32Array view on the ArrayBuffer store for this Float32Array object.\n\nFloat32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Float32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Float32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float64Array","title":"Float64Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Float64Array Float64Array(unsigned long length);    Float64Array Float64Array(TypedArray array);    Float64Array Float64Array(sequence&lt;type&gt; array);    Float64Array Float64Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Float64Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 8 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 8 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Float64Array object.\n\nFloat64Array Float64Array(\n&nbsp; unsigned long length\n);\n\nFloat64Array Float64Array(\n&nbsp; TypedArray array\n);\n\nFloat64Array Float64Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nFloat64Array Float64Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 64-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float64Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float64Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Float64Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 64-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 64-bit float.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 64-bit float.\nThe final form of the constructor creates a new Float64Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Uint8Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 64-bit floating point number before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Float64Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Float64Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Float64Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of 64-bit floats, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 64-bit float.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 64-bit float.\nThe final form of the constructor creates a new Float64Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Float64Array view on the ArrayBuffer store for this Float64Array object.\n\nFloat64Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Float64Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Float64Array view on the ArrayBuffer store for this Float64Array object.\n\nFloat64Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Float64Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Float64Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Float64Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int16Array","title":"Int16Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Int16Array Int16Array(unsigned long length);    Int16Array Int16Array(TypedArray array);    Int16Array Int16Array(sequence&lt;type&gt; array);    Int16Array Int16Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int16Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Int16Array object.\n\nInt16Array Int16Array(\n&nbsp; unsigned long length\n);\n\nInt16Array Int16Array(\n&nbsp; TypedArray array\n);\n\nInt16Array Int16Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nInt16Array Int16Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int16Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int16Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit signed integer.\nThe final form of the constructor creates a new Int16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int16Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int16Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit signed integer.\nThe final form of the constructor creates a new Int16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Int16Array view on the ArrayBuffer store for this Int16Array object.\n\nInt16Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Int16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Int16Array view on the ArrayBuffer store for this Int16Array object.\n\nInt16Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Int16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Int16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int32Array","title":"Int32Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Int32Array Int32Array(unsigned long length);    Int32Array Int32Array(TypedArray array);    Int32Array Int32Array(sequence&lt;type&gt; array);    Int32Array Int32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int32Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Int32Array object.\n\nInt32Array Int32Array(\n&nbsp; unsigned long length\n);\n\nInt32Array Int32Array(\n&nbsp; TypedArray array\n);\n\nInt32Array Int32Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nInt32Array Int32Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit signed integer.\nThe final form of the constructor creates a new Int32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit signed integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit signed integer.\nThe final form of the constructor creates a new Int32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Int32Array view on the ArrayBuffer store for this Int32Array object.\n\nInt32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Int32Array object. end \nOptional\n The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Int32Array view on the ArrayBuffer store for this Int32Array object.\n\nInt32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Int32Array object. end \nOptional\n The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Int32Array object. end \nOptional\n The offset to one past the last element in the array to be referenced by the new Int32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int8Array","title":"Int8Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Int8Array Int8Array(unsigned long length);    Int8Array Int8Array(TypedArray array);    Int8Array Int8Array(sequence&lt;type&gt; array);    Int8Array&nbsp;Int8Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Int8Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array; for these 8-bit values, this is the same as the size of the array in bytes. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Int8Array object.\n\nInt8Array Int8Array(\n&nbsp; unsigned long length\n);\n\nInt8Array Int8Array(\n&nbsp; TypedArray array\n);\n\nInt8Array Int8Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nInt8Array Int8Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int8Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int8Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer.\nThe final form of the constructor creates a new Int8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Int8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Int8Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Int8Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer.\nThe final form of the constructor creates a new Int8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\n set() Sets multiple values in the typed array, reading input values from a specified array. \nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int8Array view on the ArrayBuffer store for this Int8Array object. \nInt8Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. set() Sets multiple values in the typed array, reading input values from a specified array. \nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  Parameters  array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).  subarray() Returns a new Int8Array view on the ArrayBuffer store for this Int8Array object. \nInt8Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. Parameters  begin The offset to the first element in the array to be referenced by the new Int8Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Int8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.  Notes The range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning. Note: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa. See also  Typed Array Specification JavaScript typed arrays "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint16Array","title":"Uint16Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Uint16Array Uint16Array(unsigned long length);    Uint16Array Uint16Array(TypedArray array);    Uint16Array Uint16Array(sequence&lt;type&gt; array);    Uint16Array Uint16Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint16Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 2 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Uint16Array object.\n\nUint16Array Uint16Array(\n&nbsp; unsigned long length\n);\n\nUint16Array Uint16Array(\n&nbsp; TypedArray array\n);\n\nUint16Array Uint16Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nUint16Array Uint16Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint16Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint16Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit unsigned integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit unsigned integer.\nThe final form of the constructor creates a new Uint16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 16-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint16Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint16Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint16Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 16-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 16-bit unsigned integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 16-bit unsigned integer.\nThe final form of the constructor creates a new Uint16Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint16Array view on the ArrayBuffer store for this Uint16Array object.\n\nUint16Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint16Array view on the ArrayBuffer store for this Uint16Array object.\n\nUint16Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint16Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint16Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint32Array","title":"Uint32Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Uint32Array Uint32Array(unsigned long length);    Uint32Array Uint32Array(TypedArray array);    Uint32Array Uint32Array(sequence&lt;type&gt; array);    Uint32Array Uint32Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint32Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 4 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Uint32Array object.\n\nUint32Array Uint32Array(\n&nbsp; unsigned long length\n);\n\nUint32Array Uint32Array(\n&nbsp; TypedArray array\n);\n\nUint32Array Uint32Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nUint32Array Uint32Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit unsigned integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit unsigned integer.\nThe final form of the constructor creates a new Uint32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int16Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to a 32-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint32Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint32Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint32Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of unsigned 32-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to a 32-bit unsigned integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to a 32-bit unsigned integer.\nThe final form of the constructor creates a new Uint32Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint32Array view on the ArrayBuffer store for this Uint32Array object.\n\nUint32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint32Array view on the ArrayBuffer store for this Uint32Array object.\n\nUint32Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint32Array object. end \nOptional\n The offset to the last element in the array to be referenced by the new Uint32Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.\nSee also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint8Array","title":"Uint8Array","description":"Constructors\nNote: In these methods, TypedArray represents any of the typed array object types.\n   Uint8Array Uint8Array(unsigned long length);    Uint8Array Uint8Array(TypedArray array);    Uint8Array Uint8Array(sequence&lt;type&gt; array);    Uint8Array Uint8Array(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long length);   \n\nMethod overview\nNote: In these methods, TypedArray represents any of the typed array object types.\n   void set(TypedArray array, optional unsigned long offset);    void set(type[] array, optional unsigned long offset);    Uint8Array subarray(long begin, optional long end);  \n\nAttributes\n   Attribute Type Description   length unsigned long  The number of entries in the array; for these 8-bit values, this is the same as the size of the array in bytes. Read only.  \n\nConstants\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.  \n\nElement size\n   Constant Value Description   BYTES_PER_ELEMENT 1 The size, in bytes, of each array element.  \n\nConstructor\nReturns a new Uint8Array object.\n\nUint8Array Uint8Array(\n&nbsp; unsigned long length\n);\n\nUint8Array Uint8Array(\n&nbsp; TypedArray array\n);\n\nUint8Array Uint8Array(\n&nbsp; sequence&lt;type&gt; array\n);\n\nUint8Array Uint8Array(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long length\n);\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint8Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint8Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer.\nThe final form of the constructor creates a new Uint8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nParameters\n length The number of elements in the byte array. If unspecified, length of the array view will match the buffer's length. array An object of any of the typed array types (such as Int32Array), or a sequence of objects of a particular type, to copy into a new ArrayBuffer. Each value in the source array is converted to an 8-bit unsigned integer before being copied into the new array. buffer An existing ArrayBuffer to use as the storage for the new Uint8Array object. byteOffset  The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the Uint8Array's view of the buffer will start with the first byte.\n\nReturn value\nA new Uint8Array object representing the specified data buffer.\nNotes\nThe first form of the constructor, accepting only a length, creates a new ArrayBuffer object that can hold the specified number of signed 8-bit integers, then creates and returns a typed array view referring to that new buffer. The length must be specified in this case.\nThe second form creates a new ArrayBuffer object that is a duplicate of the specified array, except with each element in the new array converted to an 8-bit signed integer.\nThe third form of the constructor likewise creates a new ArrayBuffer object that is a duplicate of the specified JavaScript array, with each element in the new array converted to an 8-bit signed integer.\nThe final form of the constructor creates a new Uint8Array object, using the specified ArrayBuffer as its storage. This lets you access the existing buffer in a different format. If specified, the byteOffset and length parameters let you create the new view to only a portion of the buffer.\nExceptions thrown\n INDEX_SIZE_ERR The specified byteOffset isn't a multiple of the element size, or the byteOffset and length result in the specified view extending past the end of the buffer.\n\nMethods\nset()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint8Array view on the ArrayBuffer store for this Uint8Array object.\n\nUint8Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint8Array object. end \nOptional\n The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.set()\nSets multiple values in the typed array, reading input values from a specified array.\n\nvoid set(\n&nbsp; TypedArray array,\n&nbsp; optional unsigned long offset\n);\n\nvoid set(\n&nbsp; type[] array,\n&nbsp; optional unsigned long offset\n);\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nParameters\n array An array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown. If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range. offset \nOptional\n The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).\n\nsubarray()\nReturns a new Uint8Array view on the ArrayBuffer store for this Uint8Array object.\n\nUint8Array subarray(\n&nbsp; long begin,\n&nbsp; optional long end\n);\n\nParameters\n begin The offset to the first element in the array to be referenced by the new Uint8Array object. end \nOptional\n The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.Parameters\n begin The offset to the first element in the array to be referenced by the new Uint8Array object. end \nOptional\n The offset to the element after last element in the array to be referenced by the new Uint8Array object; if not specified, all elements from the one specified by begin to the end of the array are included in the new view.\n\nNotes\nThe range specified by begin and end is clamped to the valid index range for the current array; if the computed length of the new array would be negative, it's clamped to zero. If either begin or end is negative, it refers to an index from the end of the array instead of from the beginning.\nNote: Keep in mind that this is creating a new view on the existing buffer; changes to the new object's contents will impact the original object and vice versa.See also\n Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error","title":"Error","description":"Summary\nCreates an error object.\nSyntax\nnew Error([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nDescription\nRuntime errors result in new Error objects being created and thrown.\nThis page documents the use of the Error object itself and its use as a constructor function. For a list of properties and methods inherited by Error instances, see Error.prototype.\nError types\nBesides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.\n EvalError Creates an instance representing an error that occurs regarding the global function eval()\n\n RangeError Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range\n\n ReferenceError Creates an instance representing an error that occurs when de-referencing an invalid reference\n\n SyntaxError Creates an instance representing a syntax error that occurs while parsing code in eval()\n\n TypeError Creates an instance representing an error that occurs when a variable or parameter is not of a valid type\n\n URIError Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters\n\nCustom Error Types\nThe Error object can be extended to create Error Types for your project.\n\r\n          \/\/ Create a new object, that prototypally inherits from the Error constructor.\nfunction MyError(message) {\n    this.name = &quot;MyError&quot;;\n    this.message = message || &quot;Default Message&quot;;\n}\nMyError.prototype = new Error();\nMyError.prototype.constructor = MyError;\n\ntry {\n    throw new MyError();\n} catch (e) {\n    console.log(e.name);     \/\/ &quot;MyError&quot;\n    console.log(e.message);  \/\/ &quot;Default Message&quot;\n}\n\ntry {\n    throw new MyError(&quot;custom message&quot;);\n} catch (e) {\n    console.log(e.name);     \/\/ &quot;MyError&quot;\n    console.log(e.message);  \/\/ &quot;custom message&quot;\n}\r\n        \nError types\nBesides the generic Error constructor, there are six other core error constructors in JavaScript. For client-side exceptions, see Exception Handling Statements.\n EvalError Creates an instance representing an error that occurs regarding the global function eval()\n\n RangeError Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range\n\n ReferenceError Creates an instance representing an error that occurs when de-referencing an invalid reference\n\n SyntaxError Creates an instance representing a syntax error that occurs while parsing code in eval()\n\n TypeError Creates an instance representing an error that occurs when a variable or parameter is not of a valid type\n\n URIError Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters\n\nCustom Error Types\nThe Error object can be extended to create Error Types for your project.\n\r\n          \/\/ Create a new object, that prototypally inherits from the Error constructor.\nfunction MyError(message) {\n    this.name = &quot;MyError&quot;;\n    this.message = message || &quot;Default Message&quot;;\n}\nMyError.prototype = new Error();\nMyError.prototype.constructor = MyError;\n\ntry {\n    throw new MyError();\n} catch (e) {\n    console.log(e.name);     \/\/ &quot;MyError&quot;\n    console.log(e.message);  \/\/ &quot;Default Message&quot;\n}\n\ntry {\n    throw new MyError(&quot;custom message&quot;);\n} catch (e) {\n    console.log(e.name);     \/\/ &quot;MyError&quot;\n    console.log(e.message);  \/\/ &quot;custom message&quot;\n}\r\n        \nProperties\nFor properties available on Error instances, see Properties of Error instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to Error instances.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on Error instances, see Methods of Error instances. \n\n\n\n\n\n\n\n\n\n\nThe global Error object contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nError instances\nAll Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.\n&nbsp;\nProperties\nStandard properties\n constructor Specifies the function that created an instance's prototype. message Error message. name Error name.\n\nVendor-specific extensions\n\n\nNon-standard\nMicrosoft\n description Error description. Similar to message. number Error number.\n\nMozilla\n fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.\n\nMethods\n toSource Non-standard      Returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.toSource method. toString Returns a string representing the specified object. Overrides the Object.toString method.\n\n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nExamples\nExample: Throwing a generic error\nUsually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct:\n\r\n          try {\n    throw new Error(&quot;Whoops!&quot;);\n} catch (e) {\n    alert(e.name + &quot;: &quot; + e.message);\n}\r\n        \nExample: Handling a specific error\n You can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword:\n\r\n          try {\n    foo.bar();\n} catch (e) {\n    if (e instanceof EvalError) {\n        alert(e.name + &quot;: &quot; + e.message);\n    } else if (e instanceof RangeError) {\n        alert(e.name + &quot;: &quot; + e.message);\n    }\n    \/\/ ... etc\n}\r\n        \nExample: Throwing a generic error\nUsually you create an Error object with the intention of raising it using the throw keyword. You can handle the error using the try...catch construct:\n\r\n          try {\n    throw new Error(&quot;Whoops!&quot;);\n} catch (e) {\n    alert(e.name + &quot;: &quot; + e.message);\n}\r\n        \nExample: Handling a specific error\n You can choose to handle only specific error types by testing the error type with the error's constructor property or, if you're writing for modern JavaScript engines, instanceof keyword:\n\r\n          try {\n    foo.bar();\n} catch (e) {\n    if (e instanceof EvalError) {\n        alert(e.name + &quot;: &quot; + e.message);\n    } else if (e instanceof RangeError) {\n        alert(e.name + &quot;: &quot; + e.message);\n    }\n    \/\/ ... etc\n}\r\n        \nSee also\n Error.prototype throw try...catch\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError","title":"EvalError","description":"Summary\nRepresents an error regarding the eval function.\nSyntax\nnew EvalError([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nDescription\nAn EvalError is thrown when eval is used improperly.\nProperties\nFor properties available on EvalError instances, see Properties of EvalError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to an EvalError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on EvalError instances, see Methods of EvalError instances. \n\n\n\n\n\n\n\n\n\n\nThe global EvalError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nEvalError instances\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote:&nbsp;Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote:&nbsp;Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nSee also\n Error eval EvalError.prototype\n\n&nbsp;"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError","title":"RangeError","description":"Summary\nRepresents an error when a number is not within the correct range allowed.\nSyntax\nnew RangeError([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nDescription\nA RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods toExponential, toFixed, or toPrecision.\nProperties\nFor properties available on RangeError instances, see Properties of RangeError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to an RangeError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on RangeError instances, see Methods of RangeError instances. \n\n\n\n\n\n\n\n\n\n\nThe global RangeError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nRangeError instances\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nAlthough ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nAlthough ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nSee also\n Array Error RangeError.prototype toExponential toFixed toPrecision\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError","title":"ReferenceError","description":"Summary\nRepresents an error when a non-existent variable is referenced.\nDescription\nA ReferenceError is thrown when trying to dereference a variable that has not been declared.\nSyntax\nnew ReferenceError([message[, fileName[, linenumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nProperties\nFor properties available on ReferenceError instances, see Properties of ReferenceError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to an ReferenceError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on ReferenceError instances, see Methods of ReferenceError instances. \n\n\n\n\n\n\n\n\n\n\nThe global ReferenceError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nReferenceError instances\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nSee also\n Error ReferenceError.prototype\n\n&nbsp;"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError","title":"SyntaxError","description":"Summary\nRepresents an error when trying to interpret syntactically invalid code.\nDescription\nA SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\nSyntax\nnew SyntaxError([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nProperties\nFor properties available on SyntaxError instances, see Properties of SyntaxError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to an SyntaxError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on SyntaxError instances, see Methods of SyntaxError instances. \n\n\n\n\n\n\n\n\n\n\nThe global SyntaxError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nSyntaxError instances\nAll SyntaxError instances inherit from SyntaxError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n\n constructor Specifies the function that created an instance's prototype. name Error name.\n\nNote: Although ECMA-262&nbsp; specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\n\nSee also\n Error SyntaxError.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError","title":"TypeError","description":"Summary\nRepresents an error when a value is not of the expected type.\nSyntax\nnew TypeError([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nDescription\nA TypeError is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function.\nProperties\nFor properties available on TypeError instances, see Properties of TypeError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to an TypeError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on TypeError instances, see Methods of TypeError instances. \n\n\n\n\n\n\n\n\n\n\nThe global TypeError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n  \n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nTypeError instances\nAll TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nSee also\n Error apply call TypeError.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError","title":"URIError","description":"Summary\nRepresents an error when a malformed URI is encountered.\nSyntax\nnew URIError([message[, fileName[, lineNumber]]])\nParameters\n message Human-readable description of the error\n\n fileName Non-standard      The name of the file containing the code that caused the exception\n\n lineNumber Non-standard      The line number of the code that caused the exception\n\nDescription\nA URIError is thrown when the URI handling functions are passed a malformed URI.\nProperties\nFor properties available on URIError instances, see Properties of URIError instances. \n\n\n\n\n\n\n\n\n\n\n prototype Allows the addition of properties to a URIError object.\n\n\n\n\nProperties inherited from Function.prototype\n\ncaller, constructor, length, name\n\n \nMethods\nFor methods available on URIError instances, see Methods of URIError instances. \n\n\n\n\n\n\n\n\n\n\nThe global URIError contains no methods of its own, however, it does inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Function.prototype\n\napply, call, toSource, toString, valueOf\n\n  \n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n \nURIError instances\nAll URIError instances inherit from URIError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote: Although ECMA-262&nbsp;specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \n\nMethods\n\nAlthough the URIError prototype object does not contain any methods of its own, URIErrror instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \n\nSee also\n decodeURI decodeURIComponent encodeURI encodeURIComponent Error URIError.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURI","title":"decodeURI","description":"Summary\nCore Function\nDecodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.\n   Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \n Syntax \n\ndecodeURI(encodedURI)\n\n\n Parameters \n encodedURI&nbsp; A complete, encoded Uniform Resource Identifier.\n\n Description \nReplaces each escape sequence in the encoded URI with the character that it represents.\nDoes not decode escape sequences that could not have been introduced by encodeURI.\n\n See also \ndecodeURIComponent,\nencodeURI,\nencodeURIComponent\n\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURIComponent","title":"decodeURIComponent","description":"Summary\nDecodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\n   Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \nSyntax\n decodeURIComponent(encodedURI) \nParameters\n encodedURI&nbsp; An encoded component of a Uniform Resource Identifier.\n\nDescription\nReplaces each escape sequence in the encoded URI component with the character that it represents.\nSee Also\ndecodeURI, encodeURI, encodeURIComponent\n&nbsp;\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseFloat","title":"parseFloat","description":"Summary\nParses a string argument and returns a floating point number.\n   Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \n\nSyntax\n parseFloat(string) \nParameters\n string&nbsp; A string that represents the value you want to parse.\n\nDescription\nparseFloat is a top-level function and is not associated with any object.\nparseFloat parses its argument, a string, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed.\nIf the first character cannot be converted to a number, parseFloat returns NaN.\nFor arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseFloat is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN.\nExamples\nExample: parseFloat returning a number\nThe following examples all return 3.14\n\r\n          parseFloat(&quot;3.14&quot;);\nparseFloat(&quot;314e-2&quot;);\nparseFloat(&quot;0.0314E+2&quot;);\nparseFloat(&quot;3.14more non-digit characters&quot;);\r\n        Example: parseFloat returning NaN\nThe following example returns NaN\n\r\n          parseFloat(&quot;FF2&quot;);\r\n        Example: parseFloat returning a number\nThe following examples all return 3.14\n\r\n          parseFloat(&quot;3.14&quot;);\nparseFloat(&quot;314e-2&quot;);\nparseFloat(&quot;0.0314E+2&quot;);\nparseFloat(&quot;3.14more non-digit characters&quot;);\r\n        Example: parseFloat returning NaN\nThe following example returns NaN\n\r\n          parseFloat(&quot;FF2&quot;);\r\n        See Also\nisNaN, parseInt\n&nbsp;\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseInt","title":"parseInt","description":"Summary\nParses a string argument and returns an integer of the specified radix or base.\n   Core Global Method     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \n\nSyntax\n\nvar intValue = parseInt(string[, radix]);\n\nParameters\n string&nbsp; The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.\n\n radix&nbsp; An integer that represents the radix of the above mentioned string. While this parameter is optional, always specify it to eliminate reader confusion and to guarantee predictable behavior.&nbsp; Different implementations produce different results when a radix is not specified.\n\nDescription\nparseInt is a top-level function and is not associated with any object.\nThe parseInt function converts its first argument to a string, parses it, and returns an integer or NaN. If not NaN, the returned value will be the decimal integer representation of the first argument taken as a number in the specified radix (base). For example, a radix of 10 indicates to convert from a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.\nIf parseInt encounters a character that is not a numeral in the specified radix, it ignores it and all succeeding characters and returns the integer value parsed up to that point. parseInt truncates numbers to integer values. Leading and trailing spaces are allowed.\nIf radix is undefined or 0, JavaScript assumes the following:\n If the input string begins with &quot;0x&quot; or &quot;0X&quot;, radix is 16 (hexadecimal). If the input string begins with &quot;0&quot;, radix is eight (octal). This feature is non-standard, and some implementations deliberately do not support it (instead using the radix 10).&nbsp; For this reason always specify a radix when using parseInt. If the input string begins with any other value, the radix is 10 (decimal).\n\nIf the first character cannot be converted to a number, parseInt returns NaN.\nFor arithmetic purposes, the NaN value is not a number in any radix. You can call the isNaN function to determine if the result of parseInt is NaN. If NaN is passed on to arithmetic operations, the operation results will also be NaN.\nTo convert number to its string literal in a particular radix use intValue.toString(radix).\nExamples\nExample: Using parseInt\nThe following examples all return 15:\n\nparseInt(&quot; 0xF&quot;, 16);\nparseInt(&quot; F&quot;, 16);\nparseInt(&quot;17&quot;, 8);\nparseInt(021, 8);\nparseInt(&quot;015&quot;, 10);\nparseInt(15.99, 10);\nparseInt(&quot;FXX123&quot;, 16);\nparseInt(&quot;1111&quot;, 2);\nparseInt(&quot;15*3&quot;, 10);\nparseInt(&quot;15e2&quot;, 10);\nparseInt(&quot;15px&quot;, 10);\nparseInt(&quot;12&quot;, 13);\n\nThe following examples all return NaN:\n\nparseInt(&quot;Hello&quot;, 8); \/\/ Not a number at all\nparseInt(&quot;546&quot;, 2);   \/\/ Digits are not valid for binary representations\n\nThe following examples all return -15:\n\nparseInt(&quot;-F&quot;, 16);\nparseInt(&quot;-0F&quot;, 16);\nparseInt(&quot;-0XF&quot;, 16);\nparseInt(-10, 16);\nparseInt(-15.1, 10)\nparseInt(&quot; -17&quot;, 8);\nparseInt(&quot; -15&quot;, 10);\nparseInt(&quot;-1111&quot;, 2);\nparseInt(&quot;-15e1&quot;, 10);\nparseInt(&quot;-12&quot;, 13);\n\nThe following example returns 224:\n\nparseInt(&quot;0e0&quot;, 16);\n\nExample: Using parseInt\nThe following examples all return 15:\n\nparseInt(&quot; 0xF&quot;, 16);\nparseInt(&quot; F&quot;, 16);\nparseInt(&quot;17&quot;, 8);\nparseInt(021, 8);\nparseInt(&quot;015&quot;, 10);\nparseInt(15.99, 10);\nparseInt(&quot;FXX123&quot;, 16);\nparseInt(&quot;1111&quot;, 2);\nparseInt(&quot;15*3&quot;, 10);\nparseInt(&quot;15e2&quot;, 10);\nparseInt(&quot;15px&quot;, 10);\nparseInt(&quot;12&quot;, 13);\n\nThe following examples all return NaN:\n\nparseInt(&quot;Hello&quot;, 8); \/\/ Not a number at all\nparseInt(&quot;546&quot;, 2);   \/\/ Digits are not valid for binary representations\n\nThe following examples all return -15:\n\nparseInt(&quot;-F&quot;, 16);\nparseInt(&quot;-0F&quot;, 16);\nparseInt(&quot;-0XF&quot;, 16);\nparseInt(-10, 16);\nparseInt(-15.1, 10)\nparseInt(&quot; -17&quot;, 8);\nparseInt(&quot; -15&quot;, 10);\nparseInt(&quot;-1111&quot;, 2);\nparseInt(&quot;-15e1&quot;, 10);\nparseInt(&quot;-12&quot;, 13);\n\nThe following example returns 224:\n\nparseInt(&quot;0e0&quot;, 16);\n\nOctal Interpretations with No Radix\nAlthough discouraged by ECMAScript 3, many implementations interpret a numeric string beginning with a leading 0 as octal. The following may have an octal result.\n\nparseInt(&quot;0e0&quot;); \/\/ 0\nparseInt(&quot;08&quot;); \/\/ 0, '8' is not an octal digit.\n\n\nECMAScript 5 Removes Octal Interpretation\nThe ECMAScript 5 specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values. ECMAScript 5 states:\nThe parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, number may also optionally begin with the character pairs 0x or 0X.\nThis differs from ECMAScript 3, which discouraged but allowed octal interpretation.\nSince many implementations have not adopted this behavior as of 2011, and because older browsers must be supported, always specify a radix.\nSee also\nisNaN, parseFloat, Object.valueOf, Number.toString\n\nECMAScript 5 Removes Octal Interpretation\nThe ECMAScript 5 specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values. ECMAScript 5 states:\nThe parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. If radix is 16, number may also optionally begin with the character pairs 0x or 0X.\nThis differs from ECMAScript 3, which discouraged but allowed octal interpretation.\nSince many implementations have not adopted this behavior as of 2011, and because older browsers must be supported, always specify a radix.\nSee also\nisNaN, parseFloat, Object.valueOf, Number.toString\n\nSee also\nisNaN, parseFloat, Object.valueOf, Number.toString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Infinity","title":"Infinity","description":"Summary\nA numeric value representing infinity.\n   Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n Infinity \nDescription\nInfinity is a property of the global object, i.e. it is a variable in global scope.\nThe initial value of Infinity is Number.POSITIVE_INFINITY. The value Infinity (positive infinity) is greater than any other number including itself. This value behaves mathematically like infinity; for example, anything multiplied by Infinity is Infinity, and anything divided by Infinity is 0.\n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), Infinity is read only, as per the ECMAScript 5 specification.\nSee also\nNumber.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON","title":"JSON","description":"Summary\nThe JSON object contains methods for converting values to JSON notation and for converting JSON notation to values.\nJSON Notation\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and null. &nbsp;It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON, and some JSON is not JavaScript.\nThe main differences between standard object and array literal notation and JSON notation are that all property names in a JSON object must be double-quoted strings and that trailing commas in objects and arrays are forbidden. &nbsp;The main differences between standard number notation and JSON number notation are that in JSON leading zeroes are prohibited and the decimal point in a number must be followed by at least one digit. &nbsp;The main differences between standard string notation and JSON string notation are that in JSON only a limited set of characters may be escaped in strings, certain control characters are prohibited in strings, the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted, and that strings must be double-quoted.&nbsp;&nbsp;\nThe full JSON syntax is as follows:\nJSON = null\n    or true or false\n    or JSONNumber\n    or JSONString\n    or JSONObject\n    or JSONArray\n\nJSONNumber = - PositiveNumber\n          or PositiveNumber\nPositiveNumber = DecimalNumber\n              or DecimalNumber . Digits\n              or DecimalNumber . Digits ExponentPart\n              or DecimalNumber ExponentPart\nDecimalNumber = 0\n             or OneToNine Digits\nExponentPart = e Exponent\n            or E Exponent\nExponent = Digits\n        or + Digits\n        or - Digits\nDigits = Digit\n      or Digits Digit\nDigit = 0 through 9\nOneToNine = 1 through 9\n\nJSONString = &quot;&quot;\n          or &quot; StringCharacters &quot;\nStringCharacters = StringCharacter\n                or StringCharacters StringCharacter\nStringCharacter = any character\n                  except &quot; or \\ or U+0000 through U+001F\n               or EscapeSequence\nEscapeSequence = \\&quot; or \\\/ or \\\\ or \\b or \\f or \\n or \\r or \\t\n              or \\u HexDigit HexDigit HexDigit HexDigit\nHexDigit = 0 through 9\n        or A through F\n        or a through f\n\nJSONObject = { }\n          or { Members }\nMembers = JSONString : JSON\n       or Members , JSONString : JSON\n\nJSONArray = [ ]\n         or [ ArrayElements ]\nArrayElements = JSON\n             or ArrayElements , JSON\nInsignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters.\nJSON Notation\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and null. &nbsp;It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON, and some JSON is not JavaScript.\nThe main differences between standard object and array literal notation and JSON notation are that all property names in a JSON object must be double-quoted strings and that trailing commas in objects and arrays are forbidden. &nbsp;The main differences between standard number notation and JSON number notation are that in JSON leading zeroes are prohibited and the decimal point in a number must be followed by at least one digit. &nbsp;The main differences between standard string notation and JSON string notation are that in JSON only a limited set of characters may be escaped in strings, certain control characters are prohibited in strings, the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted, and that strings must be double-quoted.&nbsp;&nbsp;\nThe full JSON syntax is as follows:\nJSON = null\n    or true or false\n    or JSONNumber\n    or JSONString\n    or JSONObject\n    or JSONArray\n\nJSONNumber = - PositiveNumber\n          or PositiveNumber\nPositiveNumber = DecimalNumber\n              or DecimalNumber . Digits\n              or DecimalNumber . Digits ExponentPart\n              or DecimalNumber ExponentPart\nDecimalNumber = 0\n             or OneToNine Digits\nExponentPart = e Exponent\n            or E Exponent\nExponent = Digits\n        or + Digits\n        or - Digits\nDigits = Digit\n      or Digits Digit\nDigit = 0 through 9\nOneToNine = 1 through 9\n\nJSONString = &quot;&quot;\n          or &quot; StringCharacters &quot;\nStringCharacters = StringCharacter\n                or StringCharacters StringCharacter\nStringCharacter = any character\n                  except &quot; or \\ or U+0000 through U+001F\n               or EscapeSequence\nEscapeSequence = \\&quot; or \\\/ or \\\\ or \\b or \\f or \\n or \\r or \\t\n              or \\u HexDigit HexDigit HexDigit HexDigit\nHexDigit = 0 through 9\n        or A through F\n        or a through f\n\nJSONObject = { }\n          or { Members }\nMembers = JSONString : JSON\n       or Members , JSONString : JSON\n\nJSONArray = [ ]\n         or [ ArrayElements ]\nArrayElements = JSON\n             or ArrayElements , JSON\nInsignificant whitespace may be present anywhere except within a JSONNumber (numbers must contain no whitespace) or JSONString (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (U+0009), carriage return (U+000D), line feed (U+000A), and space (U+0020) characters are the only valid whitespace characters.\nDescription\nThe JSON object contains methods for parsing JSON and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own.\nProperties\n \n\nProperties inherited from  Object:constructor, __parent__, __proto__\n\n\n\nMethods\n parse Parse a string as JSON, optionally transform the produced value and its properties, and return the value. stringify Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.\n Cross-browser compatibility Based on Kangax's compat table. \n\n\n Desktop Mobile\n\n     Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) (Supported) 10.5 (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    \n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math","title":"Math","description":"Summary\nA built-in object that has properties and methods for mathematical constants and functions.\nDescription\nUnlike the other global objects, Math is not a constructor. All properties and methods of Math are static. You refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.Properties\n E Euler's constant and the base of natural logarithms, approximately 2.718.\n\n LN2 Natural logarithm of 2, approximately 0.693.\n\n LN10 Natural logarithm of 10, approximately 2.302.\n\n LOG2E Base 2 logarithm of E, approximately 1.442.\n\n LOG10E Base 10 logarithm of E, approximately 0.434.\n\n PI Ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\n SQRT1_2 Square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.\n\n SQRT2 Square root of 2, approximately 1.414.\n\n\n\nProperties inherited from  Object:constructor, __parent__, __proto__\n\n\nMethods\n  Note that the trigonometric functions (sin, cos, tan, asin, acos, atan, atan2) expect or return angles in radians - to convert radians to degrees divide by (Math.PI \/ 180), and multiply by this to convert the other way. abs Returns the absolute value (modulus) of a number.\n\n acos Returns the arccosine of a number.\n\n asin Returns the arcsine of a number.\n\n atan Returns the arctangent of a number.\n\n atan2 Returns the arctangent of the quotient of its arguments.\n\n ceil Returns the smallest integer greater than or equal to a number.\n\n cos Returns the cosine of a number.\n\n exp Returns Enumber, where number is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm.\n\n floor Returns the largest integer less than or equal to a number.\n\n log Returns the natural logarithm (loge, also ln) of a number.\n\n max Returns the largest of zero or more numbers.\n\n min Returns the smallest of zero or more numbers.\n\n pow Returns base to the exponent power, that is, baseexponent.\n\n random Returns a pseudo-random number between 0 and 1.\n\n round Returns the value of a number rounded to the nearest integer.\n\n sin Returns the sine of a number.\n\n sqrt Returns the positive square root of a number.\n\n tan Returns the tangent of a number.\n\n toSource Non-standard      Returns the string &quot;Math&quot;.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/NaN","title":"NaN","description":"Summary\nA value representing Not-A-Number.\n   Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nNaN\nDescription\nNaN is a property of the global object.\nThe initial value of NaN is Not-A-Number &mdash; the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\nIt is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)) or when a function trying to parse a number fails (parseInt(&quot;blabla&quot;)).\nTesting against NaN\nEquality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead.\n\r\n          NaN === NaN;        \/\/ false\nNumber.NaN === NaN; \/\/ false\nisNaN(NaN);         \/\/ true\nisNaN(Number.NaN);  \/\/ true\r\n        \nTesting against NaN\nEquality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead.\n\r\n          NaN === NaN;        \/\/ false\nNumber.NaN === NaN; \/\/ false\nisNaN(NaN);         \/\/ true\nisNaN(Number.NaN);  \/\/ true\r\n        \nSee also\nisNaN\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/undefined","title":"undefined","description":"Summary\nThe value undefined.\n   Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\n undefined \nDescription\nundefined is a property of the global object, i.e. it is a variable in global scope.\nThe initial value of undefined is the primitive value undefined. \n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), undefined is non-writable, as per the ECMAScript 5 specification.\nA variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned.\nYou can use undefined and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable x is not defined, and the if statement evaluates to true.\n\r\n          var x;\nif (x === undefined) {\n   \/\/ these statements execute\n}\nif (x !== undefined) {\n   \/\/ these statements do not execute\n}\r\n        \nNote: The strict equality operator rather than the standard equality operator must be used here, because x == undefined also checks whether x is null, while strict equality doesn't. null is not equivalent to undefined. See comparison operators for details.\nAlternatively, typeof can be used:\n\r\n          var x;\nif (typeof x == 'undefined') {\n   \/\/ these statements execute\n}\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/block","title":"block","description":"Summary\nA block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\nVersion Information\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262  \n\nSyntax\n\r\n          {\n   statement_1\n   statement_2\n   ...\n   statement_n\n}\r\n        \nParameters\n statement_1, statement_2, statement_n Statements grouped within the block statement.\n\nDescription\nThis statement is commonly used with control flow statements (e.g. if, for, while). For example:\n\r\n          while (x &lt; 10) {\n   x++;\n}\r\n        \nImportant: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although &quot;standalone&quot; blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example:\n\r\n          var x = 1;\n{\n   var x = 2;\n}\nalert(x); \/\/ outputs 2\r\n        \nThis outputs 2 because the var x statement within the conditional is in the same scope as the var x statement before the conditional. In C or Java, the equivalent code would have outputted 1.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/break","title":"break","description":"Summary\nTerminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\nVersion Information\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version:  ECMA-262 (for the unlabeled version) ECMA-262, Edition 3 (for the labeled version)   \n\nSyntax\n\r\n          break [label];\r\n        \nParameters\n label&nbsp; Identifier associated with the label of the statement.&nbsp; If the statement is not a loop or switch, this is required.\n\nDescription\nThe break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within this labelled statement. The labelled statement can be any block statement; it does not have to be preceded by a loop statement.\nExample\nThe following function has a break statement that terminates the while loop when i is 3, and then returns the value 3 * x.\n\r\n          function testBreak(x) {\n   var i = 0;\n   while (i &lt; 6) {\n      if (i == 3) {\n         break;\n      }\n      i += 1;\n   }\n   return i * x;\n}\r\n        \nSee also\n continue label switch\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/const","title":"const","description":"Summary\nDeclares a read-only, named constant.\n   Statement   Implemented in: JavaScript 1.5, NES 6.0 (Netscape extension, C engine only)  \n\nSyntax\nconst varname1 = value1 [, varname2 = value2 [, varname3 = value3 [, ... [, varnameN = valueN]]]];\nParameters\n varnameN Constant name. It can be any legal identifier.\n\n valueN Value of the constant. It can be any legal expression.\n\nDescription\nCreates a constant that can be global or local to the function in which it is declared. Constants follow the same scope rules as variables.\nThe value of a constant cannot change through re-assignment, and a constant cannot be re-declared. Because of this, although it is possible to declare a constant without initializing it, it would be useless to do so.\nA constant cannot share its name with a function or a variable in the same scope.\n&nbsp;\nBrowser Compatibility\nconst&nbsp;is a&nbsp;Mozilla-specific extension and is not part of ECMAScript 5.&nbsp;\nIt is supported in Firefox &amp; Chrome (V8) and partially supported in Opera 9+ &amp; Safari (though it acts as a var). It is not supported in IE6-9.\n&nbsp;\nExamples\nThe following example produces the output &quot;a is 7.&quot;\n\r\n          const a = 7;\nconsole.log(&quot;a is &quot; + a + &quot;.&quot;);\r\n        \nSee also\n var let Constants in JavaScript Guide\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/continue","title":"continue","description":"Summary\nTerminates execution of the statements in the current iteration of the current or labelled loop, and continues execution of the loop with the next iteration.\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262 (for the unlabeled version) ECMA-262, Edition 3 (for the labeled version)   \n\nSyntax\ncontinue [label]; \nParameters\n label Identifier associated with the label of the statement.\n\nDescription\nIn contrast to the break statement, continue does not terminate the execution of the loop entirely: instead,\n In a while loop, it jumps back to the condition.\n\n In a for loop, it jumps to the update expression.\n\nThe continue statement can include an optional label that allows the program to jump to the next iteration of a labelled loop statement instead of the current loop. In this case, the continue statement needs to be nested within this labelled statement.\nExamples\nExample: Using continue with while\nThe following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12.\n\r\n          i = 0;\nn = 0;\nwhile (i &lt; 5) {\n   i++;\n   if (i == 3)\n      continue;\n   n += i;\n}\r\n        \nExample: Using continue with a label\nIn the following example, a statement labeled checkiandj contains a statement labeled checkj. If continue is encountered, the program continues at the top of the checkj statement. Each time continue is encountered, checkj reiterates until its condition returns false. When false is returned, the remainder of the checkiandj statement is completed.\nIf continue had a label of checkiandj, the program would continue at the top of the checkiandj statement.\n\r\n          checkiandj:\nwhile (i &lt; 4) {\n   document.write(i + &quot;&lt;br&gt;&quot;);\n   i += 1;\n\n   checkj:\n   while (j &gt; 4) {\n      document.write(j + &quot;&lt;br&gt;&quot;);\n      j -= 1;\n      if ((j % 2) == 0)\n         continue checkj;\n      document.write(j + &quot; is odd.&lt;br&gt;&quot;);\n   }\n   document.write(&quot;i = &quot; + i + &quot;&lt;br&gt;&quot;);\n   document.write(&quot;j = &quot; + j + &quot;&lt;br&gt;&quot;);\n}\r\n        \nExample: Using continue with while\nThe following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12.\n\r\n          i = 0;\nn = 0;\nwhile (i &lt; 5) {\n   i++;\n   if (i == 3)\n      continue;\n   n += i;\n}\r\n        \nExample: Using continue with a label\nIn the following example, a statement labeled checkiandj contains a statement labeled checkj. If continue is encountered, the program continues at the top of the checkj statement. Each time continue is encountered, checkj reiterates until its condition returns false. When false is returned, the remainder of the checkiandj statement is completed.\nIf continue had a label of checkiandj, the program would continue at the top of the checkiandj statement.\n\r\n          checkiandj:\nwhile (i &lt; 4) {\n   document.write(i + &quot;&lt;br&gt;&quot;);\n   i += 1;\n\n   checkj:\n   while (j &gt; 4) {\n      document.write(j + &quot;&lt;br&gt;&quot;);\n      j -= 1;\n      if ((j % 2) == 0)\n         continue checkj;\n      document.write(j + &quot; is odd.&lt;br&gt;&quot;);\n   }\n   document.write(&quot;i = &quot; + i + &quot;&lt;br&gt;&quot;);\n   document.write(&quot;j = &quot; + j + &quot;&lt;br&gt;&quot;);\n}\r\n        \nSee also\nbreak, label\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/debugger","title":"debugger","description":"Summary\nInvokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n   Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262 5th Edition  \nSyntax\ndebugger;\nExamples\n\nThe following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.\n\nfunction potentiallyBuggyCode()\n{\n  debugger;\n  \/\/ do potentially buggy stuff to examine, step through, etc.\n} \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/do...while","title":"do...while","description":" Summary \nCreates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n\n\n\nStatement\n\n\nImplemented in:\nJavaScript 1.2, NES 3.0\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n\n Syntax \ndo\n   statement\nwhile (condition);\n\n Parameters \n statement&nbsp; A statement that is executed at least once and is re-executed each time the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.\n\n condition&nbsp; An expression evaluated after each pass through the loop. If condition evaluates to true, the statement is re-executed. When condition evaluates to false, control passes to the statement following the do...while.\n\n Examples \n Example: Using do...while \nIn the following example, the do...while loop iterates at least once and reiterates until i is no longer less than 5.\n\ndo {\n   i += 1;\n   document.write(i);\n} while (i &lt; 5);\n\n Example: Using do...while \nIn the following example, the do...while loop iterates at least once and reiterates until i is no longer less than 5.\n\ndo {\n   i += 1;\n   document.write(i);\n} while (i &lt; 5);\n\n See also \nwhile,\nfor\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/export","title":"export","description":"Summary\nAllows a signed script to provide properties, functions, and objects to other signed or unsigned scripts. This feature is not in ECMA-262, Edition 3.\n   Statement   Implemented in: JavaScript 1.2, NES 3.0  \n\nSyntax\n export name1, name2, ..., nameN; \n export *; \nParameters\n nameN&nbsp; Property, function, or object to be exported.\n\nDescription\nTypically, information in a signed script is available only to scripts signed by the same principals. By exporting properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the companion import statement to access the information.\nThe first syntax exports the specified properties, functions, and objects.\nThe second syntax exports all properties, functions, and objects from the script.\nSee also\nimport\n&nbsp;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for","title":"for","description":"Summary\nCreates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262  \n\nSyntax\nfor ([initialization]; [condition]; [final-expression])\n   statement\n\nParameters\n initialization An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the var keyword. These variables are not local to the loop, i.e. they are in the same scope the for loop is in. The result of this expression is discarded.\n\n condition An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the for construct.\n\n final-expression An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable.\n\n statement A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.\n\nExamples\nExample: Using for\nThe following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop.\n\r\n          for (var i = 0; i &lt; 9; i++) {\n   n += i;\n   myfunc(n);\n}\r\n        \nExample: Using for without the statement section\nThe following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section:\n\r\n          function showOffsetPos (sId) {\n  var nLeft = 0, nTop = 0;\n  for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);\n  alert(&quot;Offset position of \\&quot;&quot; + sId + &quot;\\&quot; element:\\n left: &quot; + nLeft + &quot;px;\\n top: &quot; + nTop + &quot;px;&quot;);\n}\r\n        \nNote: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle.\nExample: Using for\nThe following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop.\n\r\n          for (var i = 0; i &lt; 9; i++) {\n   n += i;\n   myfunc(n);\n}\r\n        \nExample: Using for without the statement section\nThe following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section:\n\r\n          function showOffsetPos (sId) {\n  var nLeft = 0, nTop = 0;\n  for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);\n  alert(&quot;Offset position of \\&quot;&quot; + sId + &quot;\\&quot; element:\\n left: &quot; + nLeft + &quot;px;\\n top: &quot; + nTop + &quot;px;&quot;);\n}\r\n        \nNote: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle.\nSee also\nwhile, do...while, for...in\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for...in","title":"for...in","description":"Summary\nIterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262  \n\nSyntax\nfor (variable in object) {\n  ...\n} \n\nParameters\n variable A different property name is assigned to variable on each iteratation.\n\n object Object whose enumerable properties are iterated.\n\nDescription\nA for...in loop does not iterate over non&ndash;enumerable properties. Objects created from built&ndash;in constructors like Array and Object have inherited non&ndash;enumerable properties from Object.prototype and String.prototype that are not enumerable, such as String's indexOf method or Object's toString method. The loop will iterate over all enumerable properties of the object or that it inherits from its constructor's proptotype (including any which overwrite built-in properties).\nA for...in loop iterates over the properties of an object in an arbitrary order (see the delete operator for more on why one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting). If a property is modified in one iteration and then visited at a later time, its value in the loop is its value at that later time. A property that is deleted before it has been visited will not be visited later. Properties added to the object over which iteration is occurring may either be visited or omitted from iteration. In general it is best not to add, modify or remove properties from the object during iteration, other than the property currently being visited. There is no guarantee whether or not an added property will be visited, whether a modified property (other than the current one) will be visited before or after it is modified, or whether a deleted property will be visited before it is deleted.\nWhere only the properties of the object should be considered, a&nbsp;hasOwnProperty&nbsp;check should be performed to ensure that only properties of the object and not inherited properties are used (propertyIsEnumerable&nbsp;can also be used but is not intuitive).  In some cases, built&ndash;in prototypes be usefully extended by the user where there are no concerns caused by inclusion of other code that may use&nbsp;for..in&nbsp; and not perform the above checks.\n for..in should not be used to iterate over an Array where index order is important. Array indexes are just enumerable properties with integer names and are otherwise identical to general Object properties.&nbsp; There is no guarantee that for...in will return the indexes in any particular order and it will return all enumerable properties, including those with non&ndash;integer names and those that are inherited. Because the order of iteration is implementation dependent, iterating over an array may not visit elements in a consistent order. Therefore it is better to use a for loop with a numeric index when iterating over arrays where the order of access is important.\n\nExamples\nThe following function takes as its arguments an object and the object's name. It then iterates over all the object's enumerable properties and returns a string of the property names and their values.\n\r\n          var o = {a:1, b:2, c:3};\n\nfunction show_props(obj, objName) {  \n   var result = &quot;&quot;;  \n   for (var prop in obj) {  \n      result += objName + &quot;.&quot; + prop + &quot; = &quot; + obj[prop] + &quot;\\n&quot;;  \n   }  \n   return result;  \n}  \n\nalert(show_props(o, &quot;o&quot;));\n\/* alerts:\no.a = 1\no.b = 2\no.c = 3\n*\/\r\n        \nIterating over only&nbsp;\nIterating over only&nbsp;\nSee also\n for each...in - similar to for...in, but iterates over the values of object's properties, rather than the property names themselves. (New in JavaScript 1.6.) for Generator expressions (uses the for...in syntax)\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for_each...in","title":"for each...in","description":"Summary\nIterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\nNote: for each...in is a Mozilla extension, and is not part of the ECMAScript standard.\n   Statement   Implemented in: JavaScript 1.6   ECMA Version: none  \n\nSyntax\n\nfor each (variable in object)\n  statement\n\nParameters\n variable&nbsp; Variable to iterate over property values, optionally declared with the var keyword. This variable is local to the function, not to the loop.\n\n object&nbsp; Object for which the properties are iterated.\n\n statement&nbsp; A statement to execute for each property. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.\n\nDescription\nSome built-in properties are not iterated over. These include all built-in methods of objects, e.g. String's indexOf method. However, all user-defined properties are iterated over.\nExamples\nExample: Using for each...in\nWarning: Never use a loop like this on arrays. Only use it on objects. Details.\nThe following snippet iterates over an object's properties, calculating their sum:\n\nvar sum = 0;\nvar obj = {prop1: 5, prop2: 13, prop3: 8};\nfor each (var item in obj) {\n  sum += item;\n}\nprint(sum); \/\/ prints &quot;26&quot;, which is 5+13+8\n\nExample: Using for each...in\nWarning: Never use a loop like this on arrays. Only use it on objects. Details.\nThe following snippet iterates over an object's properties, calculating their sum:\n\nvar sum = 0;\nvar obj = {prop1: 5, prop2: 13, prop3: 8};\nfor each (var item in obj) {\n  sum += item;\n}\nprint(sum); \/\/ prints &quot;26&quot;, which is 5+13+8\n\nSee also\n for...in - a similar statement that iterates over the property names. for Array&nbsp;comprehensions (these use for each)\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/function","title":"function","description":"Summary\nDeclares a function with the specified parameters.\nYou can also define functions using the Function constructor and the function operator (function expression).\n   Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262  \n Syntax \nfunction name([param] [, param] [..., param]) {\n   statements\n}\n\n Parameters \n name&nbsp; The function name.\n\n param&nbsp; The name of an argument to be passed to the function. A function can have up to 255 arguments.\n\n statements&nbsp; The statements which comprise the body of the function.\n\n Description \nTo return a value, the function must have a return statement that specifies the value to return.\nA function created with the function statement is a Function object and has all the properties, methods, and behavior of Function objects. See Function for detailed information on functions.\nA function can also be declared inside an expression. In this case the function is usually anonymous. See function operator for more information about the function (function expression).\nFunctions can be conditionally declared. That is, a function definition can be nested within an if statement. Technically, such declarations are not actually function declarations; they are function expressions.\n\n Examples \n Example: Using function \nThe following code declares a function that returns the total dollar amount of sales, when given the number of units sold of products a, b, and c.\n\nfunction calc_sales(units_a, units_b, units_c) {\n   return units_a*79 + units_b * 129 + units_c * 699;\n}\n\n Example: Using function \nThe following code declares a function that returns the total dollar amount of sales, when given the number of units sold of products a, b, and c.\n\nfunction calc_sales(units_a, units_b, units_c) {\n   return units_a*79 + units_b * 129 + units_c * 699;\n}\n\n See also \nFunctions,\nFunction,\nfunction operator\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/if...else","title":"if...else","description":"Summary\nExecutes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262  \n\nSyntax\n\nif (condition)\n   statement1\n[else\n   statement2]\n\nParameters\n condition&nbsp; An expression that evaluates to true or false.\n\n statement1&nbsp; Statement that is executed if condition evaluates to true. Can be any statement, including further nested if statements. To execute multiple statements, use a block statement ({ ... }) to group those statements.\n\n statement2&nbsp; Statement that is executed if condition evaluates to false and the else clause exists. Can be any statement, including block statements and further nested if statements.\n\nDescription\nMultiple if...else statements can be nested to create an else if clause:\n\nif (condition1)\n   statement1\nelse if (condition2)\n   statement2\nelse if (condition3)\n   statement3\n...\nelse\n   statementN\n\nTo see how this works, this is how it would look like if the nesting were properly indented:\n\nif (condition1)\n   statement1\nelse\n   if (condition2)\n      statement2\n   else\n      if (condition3)\n...\n\nTo execute multiple statements within a clause, use a block statement ({ ... }) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested if statements:\n\nif (condition) {\n   statements1\n} else {\n   statements2\n}\n\nDo not confuse the primitive boolean values true and false with the true and false values of the Boolean object. Any value that is not undefined, null, 0, NaN, or the empty string (&quot;&quot;), and any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example:\n\nvar b = new Boolean(false);\nif (b) \/\/ this condition evaluates to true\n\nExamples\nExample: Using if...else\n\nif (cipher_char == from_char) {\n   result = result + to_char;\n   x++;\n} else {\n   result = result + clear_char;\n\nExample: Assignment within the conditional expression\nIt is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:\n\nif (x = y) {\n   \/* do the right thing *\/\n}\n\nIf you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:\n\nif ((x = y)) {\n   \/* do the right thing *\/\n}\n\n&nbsp;\n&nbsp;\n\nExample: Using if...else\n\nif (cipher_char == from_char) {\n   result = result + to_char;\n   x++;\n} else {\n   result = result + clear_char;\n\nExample: Assignment within the conditional expression\nIt is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:\n\nif (x = y) {\n   \/* do the right thing *\/\n}\n\nIf you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:\n\nif ((x = y)) {\n   \/* do the right thing *\/\n}\n\n&nbsp;\n&nbsp;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/import","title":"import","description":" Summary \nAllows a script to import properties, functions, and objects from a signed script that has exported the information.\nThis feature is not in ECMA 262, Edition 3.\n\n\n\nStatement\n\n\nImplemented in:\nJavaScript 1.2, NES 3.0\n\n\n Syntax \n\nimport objectName.name1, objectName.name2, ..., objectName.nameN;\n\n\nimport objectName.*;\n\n\n Parameters \n objectName&nbsp; Name of the object that will receive the imported names.\n\n nameN&nbsp; Property, function, or object to be imported.\n\n Description \nThe objectName parameter is the name of the object that will receive the imported names. For example, if f and p have been exported, and if obj is an object from the importing script, the following code makes f and p accessible in the importing script as properties of obj.\n\nimport obj.f, obj.p;\n\nThe first syntax imports the specified properties, functions, and objects from the exported script.\nThe second syntax imports all properties, functions, and objects from the exported script.\nTypically, information in a signed script is available only to scripts signed by the same principals. By exporting (using the export statement) properties, functions, or objects, a signed script makes this information available to any script (signed or unsigned). The receiving script uses the import statement to access the information.\nThe script must load the export script into a window, frame, or layer before it can import and use any exported properties, functions, and objects.\n\n See also \nexport\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/label","title":"label","description":"Summary\nProvides a statement with an identifier that you can refer to using a break or continue statement.\nFor example, you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution.\n   Statement   Implemented in: JavaScript 1.2, NES 3.0   ECMA Version: ECMA-262, Edition 3  \n\nSyntax\nlabel&nbsp;:\n   statement\n\nParameters\n label Any JavaScript identifier that is not a reserved word.\n\n statement Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements.\n\nAvoid using labels\nLabels are not very commonly used in JavaScript since they make programs harder to read an understand. As much as possible, avoid using labels and, depending on the cases, prefer calling functions or throwing an error.\nExamples\ncontinue Example\n\r\n          var i,j;\n\nloop1:\nfor (i = 0; i &lt; 3; i++) {      \/\/The first for statement is labeled &quot;loop1&quot;\n   loop2:\n   for (j = 0; j &lt; 3; j++) {   \/\/The second for statement is labeled &quot;loop2&quot;\n      if (i == 1 &amp;&amp; j == 1) {\n         continue loop1;\n      } else {\n         console.log(&quot;i = &quot; + i + &quot;, j = &quot; + j);\n      }\n   }\n} \n\/\/ Output is:\n\/\/   &quot;i = 0, j = 0&quot;\n\/\/   &quot;i = 0, j = 1&quot;\n\/\/   &quot;i = 0, j = 2&quot;\n\/\/   &quot;i = 1, j = 0&quot;\n\/\/   &quot;i = 2, j = 0&quot;\n\/\/   &quot;i = 2, j = 1&quot;\n\/\/   &quot;i = 2, j = 2&quot;\n\/\/ Notice how it skips both &quot;i = 1, j = 1&quot; and &quot;i = 1, j = 2&quot;\r\n        \nExample 2 (continue)\nGiven an array of items and an array of tests, this example counts the number of items that passes all the tests.\n\r\n          var itemsPassed = 0;\nvar i, j;\n\ntop:\nfor (i = 0; i &lt; items.length; i++){\n  for (j = 0; j &lt; tests.length; j++)\n    if (!tests[j].pass(items[i]))\n      continue top;\n  itemsPassed++;\n}\r\n        \nExample 3 (break)\nGiven an array of items and an array of tests, this example determines whether all items pass all tests.\n\r\n          var allPass = true;\nvar i, j;\n\ntop:\nfor (i = 0; items.length; i++)\n  for (j = 0; j &lt; tests.length; i++)\n    if (!tests[j].pass(items[i])){\n      allPass = false;\n      break top;\n    }\r\n        \ncontinue Example\n\r\n          var i,j;\n\nloop1:\nfor (i = 0; i &lt; 3; i++) {      \/\/The first for statement is labeled &quot;loop1&quot;\n   loop2:\n   for (j = 0; j &lt; 3; j++) {   \/\/The second for statement is labeled &quot;loop2&quot;\n      if (i == 1 &amp;&amp; j == 1) {\n         continue loop1;\n      } else {\n         console.log(&quot;i = &quot; + i + &quot;, j = &quot; + j);\n      }\n   }\n} \n\/\/ Output is:\n\/\/   &quot;i = 0, j = 0&quot;\n\/\/   &quot;i = 0, j = 1&quot;\n\/\/   &quot;i = 0, j = 2&quot;\n\/\/   &quot;i = 1, j = 0&quot;\n\/\/   &quot;i = 2, j = 0&quot;\n\/\/   &quot;i = 2, j = 1&quot;\n\/\/   &quot;i = 2, j = 2&quot;\n\/\/ Notice how it skips both &quot;i = 1, j = 1&quot; and &quot;i = 1, j = 2&quot;\r\n        \nExample 2 (continue)\nGiven an array of items and an array of tests, this example counts the number of items that passes all the tests.\n\r\n          var itemsPassed = 0;\nvar i, j;\n\ntop:\nfor (i = 0; i &lt; items.length; i++){\n  for (j = 0; j &lt; tests.length; j++)\n    if (!tests[j].pass(items[i]))\n      continue top;\n  itemsPassed++;\n}\r\n        \nExample 3 (break)\nGiven an array of items and an array of tests, this example determines whether all items pass all tests.\n\r\n          var allPass = true;\nvar i, j;\n\ntop:\nfor (i = 0; items.length; i++)\n  for (j = 0; j &lt; tests.length; i++)\n    if (!tests[j].pass(items[i])){\n      allPass = false;\n      break top;\n    }\r\n        \nSee also\nbreak, continue\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/let","title":"let","description":"Summary\nDeclares a local variable, optionally initializing it to a value.\nSyntax\nlet definition:\n\r\n          let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];\r\n        \nlet expression:\n\r\n          let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) expression;\r\n        \nlet statement:\n\r\n          let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) statement;\r\n        \nParameters\n   Parameter Description     var1, var2, &hellip;, varN Variable name. It can be any legal identifier.   value1, value2, &hellip;, valueN Initial value of the variable. It can be any legal expression.   expression Any legal expression.   statement Any legal statement.  \n\nDescription\nlet allows you to declare variables, limiting its scope to the block, statement, or expression on which is used. This is unlike the var keyword, which defines a variable globally, or local to an entire function regardless of block scope.\nExamples\nA let expression limit the scope of the variable declared only in that expression.\n\r\n          var a = 5;\nlet(a = 6) alert(a); \/\/ 6\nalert(a); \/\/ 5\r\n        \n&nbsp;Used inside a block, let limits the variable's scope to that block. Note the difference between var which its scope is inside the function where is declared\n\r\n          var a = 5;\nvar b = 10;\nif (a === 5) {\n  let a = 4; \/\/ The scope is inside the if-block\n  var b = 1; \/\/ The scope is inside the function\n\n  console.log(a);  \/\/ 4\n  console.log(b);  \/\/ 1\n} \nconsole.log(a); \/\/ 5\nconsole.log(b); \/\/ 1\r\n        \nYou can use the let keyword to bind variables locally in the scope of for loops instead of using a global variable (defined using var) for that.\n\r\n          for (let i = 0; i&lt;10; i++) {\n  alert(i); \/\/ 1, 2, 3, 4 ... 9\n}\n\nalert(i); \/\/ i is not defined\r\n        \nSee also\n var const New in&nbsp;JavaScript 1.7\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/return","title":"return","description":" Summary \nSpecifies the value to be returned by a function.\n\n\n\nStatement\n\n\nImplemented in:\nJavaScript 1.0, NES 2.0\n\n\nECMA Version:\nECMA-262\n\n\n Syntax \n\nreturn [expression];\n\n\n Parameters \n expression&nbsp; The expression to return. If omitted, undefined is returned instead.\n\n Examples \n Example: Using return \nThe following function returns the square of its argument, x, where x is a number.\n\nfunction square(x) {\n   return x * x;\n}\n\n Example: Using return \nThe following function returns the square of its argument, x, where x is a number.\n\nfunction square(x) {\n   return x * x;\n}\n\n See also \nFunctions\n\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/switch","title":"switch","description":"Summary\nEvaluates an expression, matching the expression's value to a case label, and executes statements associated with that case.\n   Statement   Implemented in: JavaScript 1.2, NES 3.0   ECMA Version: ECMA-262, Edition 3  \n\nSyntax\n\nswitch (expression) {\n   case label1:\n      statements1\n      [break;]\n   case label2:\n      statements2\n      [break;]\n   ...\n   case labelN:\n      statementsN\n      [break;]\n   default:\n      statements_def\n      [break;]\n}\n\nParameters\n expression&nbsp; An expression matched against each label.\n\n labelN&nbsp; Identifier used to match against expression.\n\n statementsN&nbsp; Statements that are executed if expression matches the associated label.\n\n statements_def&nbsp; Statements that are executed if expression does not match any label.\n\nDescription\nIf a match is found, the program executes the associated statements. If multiple cases match the provided value, the first case that matches is selected, even if the cases are not equal to each other.\nThe program first looks for a case clause with a label matching the value of expression and then transfers control to that clause, executing the associated statements. If no matching label is found, the program looks for the optional default clause, and if found, transfers control to that clause, executing the associated statements. If no default clause is found, the program continues execution at the statement following the end of switch. By convention, the default clause is the last clause, but it does not need to be so.\nThe optional break statement associated with each case label ensures that the program breaks out of switch once the matched statement is executed and continues execution at the statement following switch. If break is omitted, the program continues execution at the next statement in the switch statement.\nExamples\nExample: Using switch\nIn the following example, if expression evaluates to &quot;Bananas&quot;, the program matches the value with case &quot;Bananas&quot; and executes the associated statement. When break is encountered, the program breaks out of switch and executes the statement following switch. If break were omitted, the statement for case &quot;Cherries&quot; would also be executed.\n\r\n          switch (expr) {\n   case &quot;Oranges&quot;:\n      document.write(&quot;Oranges are $0.59 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Apples&quot;:\n      document.write(&quot;Apples are $0.32 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Bananas&quot;:\n      document.write(&quot;Bananas are $0.48 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Cherries&quot;:\n      document.write(&quot;Cherries are $3.00 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Mangoes&quot;:\n   case &quot;Papayas&quot;:\n      document.write(&quot;Mangoes and papayas are $2.79 a pound.&lt;br&gt;&quot;);\n      break;\n   default:\n      document.write(&quot;Sorry, we are out of &quot; + expr + &quot;.&lt;br&gt;&quot;);\n}\ndocument.write(&quot;Is there anything else you'd like?&lt;br&gt;&quot;);\r\n        \n&nbsp;\nExample: Using switch\nIn the following example, if expression evaluates to &quot;Bananas&quot;, the program matches the value with case &quot;Bananas&quot; and executes the associated statement. When break is encountered, the program breaks out of switch and executes the statement following switch. If break were omitted, the statement for case &quot;Cherries&quot; would also be executed.\n\r\n          switch (expr) {\n   case &quot;Oranges&quot;:\n      document.write(&quot;Oranges are $0.59 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Apples&quot;:\n      document.write(&quot;Apples are $0.32 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Bananas&quot;:\n      document.write(&quot;Bananas are $0.48 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Cherries&quot;:\n      document.write(&quot;Cherries are $3.00 a pound.&lt;br&gt;&quot;);\n      break;\n   case &quot;Mangoes&quot;:\n   case &quot;Papayas&quot;:\n      document.write(&quot;Mangoes and papayas are $2.79 a pound.&lt;br&gt;&quot;);\n      break;\n   default:\n      document.write(&quot;Sorry, we are out of &quot; + expr + &quot;.&lt;br&gt;&quot;);\n}\ndocument.write(&quot;Is there anything else you'd like?&lt;br&gt;&quot;);\r\n        \n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/throw","title":"throw","description":"Summary\nThrows a user-defined exception.\n   Statement   Implemented in: JavaScript 1.4   ECMA Version: ECMA-262, Edition 3  \n\nSyntax\nthrow expression; \nParameters\n expression The expression to throw.\n\nDescription\nUse the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception:\n throw &quot;Error2&quot;; \/\/ generates an exception with a string value throw 42; \/\/ generates an exception with the value 42 throw true; \/\/ generates an exception with the value true\n\nExamples\nExample: Throw an object\nYou can specify an object when you throw an exception. You can then reference the object's properties in the catch block. The following example creates an object myUserException of type UserException and uses it in a throw statement.\nfunction UserException(message) {\n   this.message = message;\n   this.name = &quot;UserException&quot;;\n}\nfunction getMonthName(mo) {\n   mo = mo-1; \/\/ Adjust month number for array index (1=Jan, 12=Dec)\n   var months = new Array(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;,\n      &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;);\n   if (months[mo]&nbsp;!== undefined) {\n      return months[mo];\n   } else {\n      myUserException = new UserException(&quot;InvalidMonthNo&quot;);\n      throw myUserException;\n   }\n}\n\ntry {\n   \/\/ statements to try\n   var myMonth = 15; \/\/ 15 is out of bound to raise the exception\n   monthName = getMonthName(myMonth);\n} catch (e) {\n   monthName = &quot;unknown&quot;;\n   logMyErrors(e.message, e.name); \/\/ pass exception object to err handler\n}\n\nExample: Another example of throwing an object\nThe following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type ZipCodeFormatException.\n\/*\n * Creates a ZipCode object.\n *\n * Accepted formats for a zip code are:\n *    12345\n *    12345-6789\n *    123456789\n *    12345 6789\n *\n * If the argument passed to the ZipCode constructor does not\n * conform to one of these patterns, an exception is thrown.\n *\/\n\nfunction ZipCode(zip) {\n   zip = new String(zip);\n   pattern = \/[0-9]{5}([- ]?[0-9]{4})?\/;\n   if (pattern.test(zip)) {\n      \/\/ zip code value will be the first match in the string\n      this.value = zip.match(pattern)[0];\n      this.valueOf = function() {\n         return this.value\n      };\n      this.toString = function() {\n         return String(this.value)\n      };\n   } else {\n      throw new ZipCodeFormatException(zip);\n   }\n}\n\nfunction ZipCodeFormatException(value) {\n   this.value = value;\n   this.message = &quot;does not conform to the expected format for a zip code&quot;;\n   this.toString = function() {\n      return this.value + this.message\n   };\n}\n\n\/*\n * This could be in a script that validates address data\n * for US addresses.\n *\/\n\nvar ZIPCODE_INVALID = -1;\nvar ZIPCODE_UNKNOWN_ERROR = -2;\n\nfunction verifyZipCode(z) {\n   try {\n      z = new ZipCode(z);\n   } catch (e) {\n      if (e instanceof ZipCodeFormatException) {\n         return ZIPCODE_INVALID;\n      } else {\n         return ZIPCODE_UNKNOWN_ERROR;\n      }\n   }\n   return z;\n}\n\na = verifyZipCode(95060);         \/\/ returns 95060\nb = verifyZipCode(9560;)          \/\/ returns -1\nc = verifyZipCode(&quot;a&quot;);           \/\/ returns -1\nd = verifyZipCode(&quot;95060&quot;);       \/\/ returns 95060\ne = verifyZipCode(&quot;95060 1234&quot;);  \/\/ returns 95060 1234\n\nExample: Rethrow an exception\nYou can use throw to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it.\ntry {\n   throw n; \/\/ throws an exception with a numeric value\n} catch (e) {\n   if (e &lt;= 50) {\n      \/\/ statements to handle exceptions 1-50\n   } else {\n      \/\/ cannot handle this exception, so rethrow\n      throw e;\n   }\n}\n\nExample: Throw an object\nYou can specify an object when you throw an exception. You can then reference the object's properties in the catch block. The following example creates an object myUserException of type UserException and uses it in a throw statement.\nfunction UserException(message) {\n   this.message = message;\n   this.name = &quot;UserException&quot;;\n}\nfunction getMonthName(mo) {\n   mo = mo-1; \/\/ Adjust month number for array index (1=Jan, 12=Dec)\n   var months = new Array(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;,\n      &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;);\n   if (months[mo]&nbsp;!== undefined) {\n      return months[mo];\n   } else {\n      myUserException = new UserException(&quot;InvalidMonthNo&quot;);\n      throw myUserException;\n   }\n}\n\ntry {\n   \/\/ statements to try\n   var myMonth = 15; \/\/ 15 is out of bound to raise the exception\n   monthName = getMonthName(myMonth);\n} catch (e) {\n   monthName = &quot;unknown&quot;;\n   logMyErrors(e.message, e.name); \/\/ pass exception object to err handler\n}\n\nExample: Another example of throwing an object\nThe following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type ZipCodeFormatException.\n\/*\n * Creates a ZipCode object.\n *\n * Accepted formats for a zip code are:\n *    12345\n *    12345-6789\n *    123456789\n *    12345 6789\n *\n * If the argument passed to the ZipCode constructor does not\n * conform to one of these patterns, an exception is thrown.\n *\/\n\nfunction ZipCode(zip) {\n   zip = new String(zip);\n   pattern = \/[0-9]{5}([- ]?[0-9]{4})?\/;\n   if (pattern.test(zip)) {\n      \/\/ zip code value will be the first match in the string\n      this.value = zip.match(pattern)[0];\n      this.valueOf = function() {\n         return this.value\n      };\n      this.toString = function() {\n         return String(this.value)\n      };\n   } else {\n      throw new ZipCodeFormatException(zip);\n   }\n}\n\nfunction ZipCodeFormatException(value) {\n   this.value = value;\n   this.message = &quot;does not conform to the expected format for a zip code&quot;;\n   this.toString = function() {\n      return this.value + this.message\n   };\n}\n\n\/*\n * This could be in a script that validates address data\n * for US addresses.\n *\/\n\nvar ZIPCODE_INVALID = -1;\nvar ZIPCODE_UNKNOWN_ERROR = -2;\n\nfunction verifyZipCode(z) {\n   try {\n      z = new ZipCode(z);\n   } catch (e) {\n      if (e instanceof ZipCodeFormatException) {\n         return ZIPCODE_INVALID;\n      } else {\n         return ZIPCODE_UNKNOWN_ERROR;\n      }\n   }\n   return z;\n}\n\na = verifyZipCode(95060);         \/\/ returns 95060\nb = verifyZipCode(9560;)          \/\/ returns -1\nc = verifyZipCode(&quot;a&quot;);           \/\/ returns -1\nd = verifyZipCode(&quot;95060&quot;);       \/\/ returns 95060\ne = verifyZipCode(&quot;95060 1234&quot;);  \/\/ returns 95060 1234\n\nExample: Rethrow an exception\nYou can use throw to rethrow an exception after you catch it. The following example catches an exception with a numeric value and rethrows it if the value is over 50. The rethrown exception propagates up to the enclosing function or to the top level so that the user sees it.\ntry {\n   throw n; \/\/ throws an exception with a numeric value\n} catch (e) {\n   if (e &lt;= 50) {\n      \/\/ statements to handle exceptions 1-50\n   } else {\n      \/\/ cannot handle this exception, so rethrow\n      throw e;\n   }\n}\n\nSee also\ntry...catch\n&nbsp;\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/try...catch","title":"try...catch","description":"Summary\nMarks a block of statements to try, and specifies a response, should an exception be thrown.\n   Statement   Implemented in: JavaScript 1.4 JavaScript 1.5, NES 6.0: Added multiple catch clauses (Netscape extension).    ECMA Version: ECMA-262, Edition 3  \n\nSyntax\ntry {\n   try_statements\n}\n[catch (exception_var_1 if condition_1) {\n   catch_statements_1\n}]\n...\n[catch (exception_var_2) {\n   catch_statements_2\n}]\n[finally {\n   finally_statements\n}]\n\nParameters\n try_statements The statements to be executed.\n\n catch_statements_1, catch_statements_2 Statements that are executed if an exception is thrown in the try block.\n\n exception_var_1, exception_var_2 An identifier to hold an exception object for the associated catch clause.\n\n condition_1 A conditional expression.\n\n finally_statements Statements that are executed after the try statement completes. These statements execute regardless of whether or not an exception was thrown or caught.\n\nDescription\nThe try statement consists of a try block, which contains one or more statements, and at least one catch clause or a finally clause, or both. That is, there are three forms of the try statement:\n try...catch try...finally try...catch...finally\n\nA catch clause contain statements that specify what to do if an exception is thrown in the try block. That is, you want the try block to succeed, and if it does not succeed, you want control to pass to the catch block. If any statement within the try block (or in a function called from within the try block) throws an exception, control immediately shifts to the catch clause. If no exception is thrown in the try block, the catch clause is skipped.\nThe finally clause executes after the try block and catch clause(s) execute but before the statements following the try statement. It always executes, regardless of whether or not an exception was thrown or caught.\nYou can nest one or more try statements. If an inner try statement does not have a catch clause, the enclosing try statement's catch clause is entered.\nYou also use the try statement to handle Java exceptions. See the Core JavaScript 1.5 Guide for information on Java exceptions.\nUnconditional catch clause\nWhen a single, unconditional catch clause is used, the catch block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the catch clause.\n\r\n          try {\n   throw &quot;myException&quot;; \/\/ generates an exception\n}\ncatch (e) {\n   \/\/ statements to handle any exceptions\n   logMyErrors(e); \/\/ pass exception object to error handler\n}\r\n        \nConditional catch clauses\nYou can also use one or more conditional catch clauses to handle specific exceptions. In this case, the appropriate catch clause is entered when the specified exception is thrown. In the following example, code in the try block can potentially throw three exceptions: TypeError, RangeError, and EvalError. When an exception occurs, control transfers to the appropriate catch clause. If the exception is not one of the specified exceptions and an unconditional catch clause is found, control transfers to that catch clause.\nIf you use an unconditional catch clause with one or more conditional catch clauses, the unconditional catch clause must be specified last. Otherwise, the unconditional catch clause will intercept all types of exception before they can reach the conditional ones.\n\r\n          try {\n   myroutine(); \/\/ may throw three exceptions\n} catch (e if e instanceof TypeError) {\n   \/\/ statements to handle TypeError exceptions\n} catch (e if e instanceof RangeError) {\n   \/\/ statements to handle RangeError exceptions\n} catch (e if e instanceof EvalError) {\n   \/\/ statements to handle EvalError exceptions\n} catch (e) {\n   \/\/ statements to handle any unspecified exceptions\n   logMyErrors(e); \/\/ pass exception object to error handler\n}\r\n        \nNote: This functionality is not part of the ECMAScript specification.\nThe exception identifier\nWhen an exception is thrown in the try block, exception_var (e.g. the e in catch (e)) holds the value specified by the throw statement. You can use this identifier to get information about the exception that was thrown.\nThis identifier is local to the catch clause. That is, it is created when the catch clause is entered, and after the catch clause finishes executing, the identifier is no longer available.\nThe finally clause\nThe finally clause contains statements to execute after the try block and catch clause(s) execute but before the statements following the try statement. The finally clause executes regardless of whether or not an exception is thrown. If an exception is thrown, the statements in the finally clause execute even if no catch clause handles the exception.\nYou can use the finally clause to make your script fail gracefully when an exception occurs; for example, you may need to release a resource that your script has tied up. The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the finally clause closes the file before the script fails.\n\r\n          openMyFile()\ntry {\n   \/\/ tie up a resource\n   writeMyFile(theData);\n}\nfinally {\n   closeMyFile(); \/\/ always close the resource\n}\r\n        \nUnconditional catch clause\nWhen a single, unconditional catch clause is used, the catch block is entered when any exception is thrown. For example, when the exception occurs in the following code, control transfers to the catch clause.\n\r\n          try {\n   throw &quot;myException&quot;; \/\/ generates an exception\n}\ncatch (e) {\n   \/\/ statements to handle any exceptions\n   logMyErrors(e); \/\/ pass exception object to error handler\n}\r\n        \nConditional catch clauses\nYou can also use one or more conditional catch clauses to handle specific exceptions. In this case, the appropriate catch clause is entered when the specified exception is thrown. In the following example, code in the try block can potentially throw three exceptions: TypeError, RangeError, and EvalError. When an exception occurs, control transfers to the appropriate catch clause. If the exception is not one of the specified exceptions and an unconditional catch clause is found, control transfers to that catch clause.\nIf you use an unconditional catch clause with one or more conditional catch clauses, the unconditional catch clause must be specified last. Otherwise, the unconditional catch clause will intercept all types of exception before they can reach the conditional ones.\n\r\n          try {\n   myroutine(); \/\/ may throw three exceptions\n} catch (e if e instanceof TypeError) {\n   \/\/ statements to handle TypeError exceptions\n} catch (e if e instanceof RangeError) {\n   \/\/ statements to handle RangeError exceptions\n} catch (e if e instanceof EvalError) {\n   \/\/ statements to handle EvalError exceptions\n} catch (e) {\n   \/\/ statements to handle any unspecified exceptions\n   logMyErrors(e); \/\/ pass exception object to error handler\n}\r\n        \nNote: This functionality is not part of the ECMAScript specification.\nThe exception identifier\nWhen an exception is thrown in the try block, exception_var (e.g. the e in catch (e)) holds the value specified by the throw statement. You can use this identifier to get information about the exception that was thrown.\nThis identifier is local to the catch clause. That is, it is created when the catch clause is entered, and after the catch clause finishes executing, the identifier is no longer available.\nThe finally clause\nThe finally clause contains statements to execute after the try block and catch clause(s) execute but before the statements following the try statement. The finally clause executes regardless of whether or not an exception is thrown. If an exception is thrown, the statements in the finally clause execute even if no catch clause handles the exception.\nYou can use the finally clause to make your script fail gracefully when an exception occurs; for example, you may need to release a resource that your script has tied up. The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the finally clause closes the file before the script fails.\n\r\n          openMyFile()\ntry {\n   \/\/ tie up a resource\n   writeMyFile(theData);\n}\nfinally {\n   closeMyFile(); \/\/ always close the resource\n}\r\n        \nExamples\nSee the examples for throw.\nSee also\n throw Error\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/while","title":"while","description":" Summary \nCreates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n\n\nStatement\n\n\nImplemented in:\nJavaScript 1.0, NES 2.0\n\n\nECMA version:\nECMA-262\n\n\n Syntax \nwhile (condition)\n  statement\n\n Parameters \n condition&nbsp; An expression evaluated before each pass through the loop. If this condition evaluates to true, statement is executed. When condition evaluates to false, execution continues with the statement after the while loop.\n\n statement&nbsp; A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.\n\n Examples \nThe following while loop iterates as long as n is less than three.\n\nn = 0;\nx = 0;\nwhile (n &lt; 3) {\n  n ++;\n  x += n;\n}\n\nEach iteration, the loop increments n and adds it to x. Therefore, x and n take on the following values:\n\n After the first pass: n = 1 and x = 1\n After the second pass: n = 2 and x = 3\n After the third pass: n = 3 and x = 6\n\nAfter completing the third pass, the condition n &lt; 3 is no longer true, so the loop terminates.\n\n See also \ndo...while,\nfor\n\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/var","title":"var","description":"Summary\nDeclares a variable, optionally initializing it to a value.\n   Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262  \n\nSyntax\nvar varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]];\nParameters\n varnameN Variable name. It can be any legal identifier.\n\n valueN Initial value of the variable. It can be any legal expression.\n\nDescription\nThe scope of a variable declared with var is the enclosing function or, for variables declared outside a function, the global scope (which is bound to the global object).\nUsing var outside a function is optional; assigning a value to an undeclared variable implicitly declares it as a global variable (also a property of the global object). The difference is that z declared variable is a non-configurable property of the global object while an undeclared is configurable.\n\r\n          var a = 1;\nb = 2;\n\ndelete this.a; \/\/ Throws a TypeError in strict mode. Fails silently otherwise.\ndelete this.b;\n\nconsole.log(a, b); \/\/ Throws a ReferenceError. Since the 'b' property doesn't exist in the global object,\n\/\/ the 'b' variable stops being a variable\r\n        \nConsequently, it is recommended to always declare your variables, regardless of being in the global scope or in a function\nFailure to declare the variable in these cases will very likely lead to unexpected results. For that reason, in ECMAScript 5 strict mode, assigning a value an undeclared variable inside a function throws an error.\nvar hoisting\nIn JavaScript, variable can be declared after being used.\n\r\n          bla = 2\nvar bla;\n\/\/ ...\n\n\/\/ is implicitly understood as:\n\nvar bla;\nbla = 2;\r\n        \nFor that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases:\n\r\n          var cells = document.getElementsByTagName('td');\n\nfor(var i=0; i&lt;cells.length; i++){\n  var cell = cells[i];\n  cell.addEventListener('click', function(){\n    cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?\n  }, false);\n}\r\n        \nHere, while the intention is to capture the 'local' cell within the loop, what happened is the following:\n\r\n          var i, cell;\nvar cells = document.getElementsByTagName('td');\n\nfor(i=0; i&lt;cells.length; i++){\n  cell = cells[i];\n  cell.addEventListener('click', function(){\n    cell.style.backgroundColor = '#00F';\n  }, false);\n}\r\n        \nThe 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.var hoisting\nIn JavaScript, variable can be declared after being used.\n\r\n          bla = 2\nvar bla;\n\/\/ ...\n\n\/\/ is implicitly understood as:\n\nvar bla;\nbla = 2;\r\n        \nFor that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases:\n\r\n          var cells = document.getElementsByTagName('td');\n\nfor(var i=0; i&lt;cells.length; i++){\n  var cell = cells[i];\n  cell.addEventListener('click', function(){\n    cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?\n  }, false);\n}\r\n        \nHere, while the intention is to capture the 'local' cell within the loop, what happened is the following:\n\r\n          var i, cell;\nvar cells = document.getElementsByTagName('td');\n\nfor(i=0; i&lt;cells.length; i++){\n  cell = cells[i];\n  cell.addEventListener('click', function(){\n    cell.style.backgroundColor = '#00F';\n  }, false);\n}\r\n        \nThe 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.Examples\nDeclaring and initializing two variables:\n\r\n          var a = 0, b = 0;\r\n        \nAssigning 2 variables with single string value.\n\r\n          var a = &quot;A&quot;;\nvar b = a;\n\n\/\/ Equivalent to:\n\nvar a, b = a = &quot;A&quot;;\r\n        \nBe careful of the order though:\n\r\n          var x = y, y = 'A';\nconsole.log(x + y); \/\/ undefinedA\n\n\/\/ Here, x is declared. y declaration (but not initialisation!) is hoisted\n\/\/ so, at the time of &quot;x = y&quot;, y is declared (no ReferenceError is thrown) and its value is 'undefined'\n\/\/ then, y is assigned its value.\n\/\/ Consequently, after the first line, x === undefined &amp;&amp; y === 'A'. Hence the concatenation\r\n        \nBe careful of initialization of several variables:\n\r\n          var x = 0;\n\nfunction f(){\n  var x = y = 1; \/\/ x is declared locally. y is not!\n}\nf();\n\nconsole.log(x, y); \/\/ 0, 1\n\/\/ x is the global one as expected\n\/\/ y leaked outside of the function, though!\r\n        \nSee also\n let const How One Missing `var` Ruined our Launch. \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/with","title":"with","description":" Summary \nExtends the scope chain for a statement.\n\n\n\nStatement\n\n\nImplemented in:\nJavaScript 1.0, NES 2.0\n\n\nECMA version:\nECMA-262\n\n\n Syntax \nwith (object)\n  statement\n\n Parameters \n object&nbsp; Adds the given object to the scope chain used when evaluating the statement. The parentheses around object are required.\n\n statement&nbsp; Any statement. To execute multiple statements, use a block statement ({ ... }) to group those statements.\n\nDescription\nJavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a 'ReferenceError' is thrown.\nUsing with is not recommended, and is forbidden in ECMAScript 5 strict mode. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.\n(On a historical note, Firefox 1.5 used to generate a warning when the 'with' statement was used: &quot;deprecated with statement usage&quot;. This has been removed in Firefox 1.5.0.1 (\n\nbug 322430\n).)\nPerformance Pro &amp; Con\n Pro: 'with' can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.\n\n Con: 'with' forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.\n\nAmbiguity Con\n Con: 'with' makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example: \nfunction f(x, o) {\n  with (o)\n    print(x);\n}\n only when f is called is x either found or not, and if found, either in o or (if no such property exists) in f's activation object, where x names the first formal argument. If you forget to define x in the object you pass as the second argument, or if there's some similar bug or confusion, you won't get an error -- just unexpected results. \n Examples \n Example: Using with \nThe following with statement specifies that the Math object is the default object. The statements following the with statement refer to the PI property and the cos and sin methods, without specifying an object. JavaScript assumes the Math object for these references.\n\nvar a, x, y;\nvar r = 10;\nwith (Math) {\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI \/ 2);\n}\n\n\n\n\n\n Example: Using with \nThe following with statement specifies that the Math object is the default object. The statements following the with statement refer to the PI property and the cos and sin methods, without specifying an object. JavaScript assumes the Math object for these references.\n\nvar a, x, y;\nvar r = 10;\nwith (Math) {\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI \/ 2);\n}\n\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Arithmetic_Operators","title":"Arithmetic Operators","description":"Summary\nArithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (\/).\nThese operators work as they do in most other programming languages when used with floating point numbers (in particular, note that division by zero produces +\/-Infinity). For example:\n\n1 \/ 2      \/\/ returns 0.5 in JavaScript\n1 \/ 2      \/\/ returns 0 in Java (neither number is explicitly a floating point number)\n\n1.0 \/ 2.0  \/\/ returns 0.5 in both JavaScript and Java\n\n2.0 \/ 0    \/\/ returns Infinity in Javascript\n2.0 \/ 0.0  \/\/ returns Infinity too\n2.0 \/ -0.0 \/\/ returns -Infinity in Javascript\n\n\n   Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\n&nbsp;% (Modulus)\nThe modulus operator is used as follows:\n var1&nbsp;% var2 \nThe modulus operator returns the first operand modulo the second operand, that is, var1 modulo var2, in the preceding statement, where var1 and var2 are variables. The modulo function is the integer remainder of dividing var1 by var2. For example, 12&nbsp;% 5 returns 2. The result will have the same sign as var1; that is, &minus;1&nbsp;% 2 returns &minus;1.\n++ (Increment)\nThe increment operator is used as follows:\nvar++ or ++var\nThis operator increments (adds one to) its operand and returns a value. If used postfix, with operator after operand (for example, x++), then it returns the value before incrementing. If used prefix with operator before operand (for example, ++x), then it returns the value after incrementing.\nFor example, if x is three, then the statement y = x++ sets y to 3 and increments x to 4. If x is 3, then the statement y = ++x increments x to 4 and sets y to 4.\n-- (Decrement)\nThe decrement operator is used as follows:\nvar-- or --var\nThis operator decrements (subtracts one from) its operand and returns a value. If used postfix (for example, x--), then it returns the value before decrementing. If used prefix (for example, --x), then it returns the value after decrementing.\nFor example, if x is three, then the statement y = x-- sets y to 3 and decrements x to 2. If x is 3, then the statement y = --x decrements x to 2 and sets y to 2.\n- (Unary Negation)\nThe unary negation operator precedes its operand and negates it. For example, y = -x negates the value of x and assigns that to y; that is, if x were 3, y would get the value -3 and x would retain the value 3.\n+ (Unary Plus)\nThe unary plus operator precedes its operand and evaluates to its operand but attempts to converts it into a number, if it isn't already. For example, y = +x takes the value of x and assigns that to y; that is, if x were 3, y would get the value 3 and x would retain the value 3; but if x were the string &quot;3&quot;, y would also get the value 3. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values true, false, and null. Integers in both decimal and hexadecimal (&quot;0x&quot;-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to NaN.\n&nbsp;\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Assignment_Operators","title":"Assignment Operators","description":"Summary\nAn assignment operator assigns a value to its left operand based on the value of its right operand.\n   Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\nThe basic assignment operator is equal (=), which assigns the value of its right operand to its left operand. That is, x = y assigns the value of y to x. The other assignment operators are usually shorthand for standard operations, as shown in the following table.\n   Shorthand operator Meaning   x += y x = x + y   x -= y x = x - y   x *= y x = x * y   x \/= y x = x \/ y   x&nbsp;%= y x = x&nbsp;% y   x &lt;&lt;= y x = x &lt;&lt; y   x &gt;&gt;= y x = x &gt;&gt; y   x &gt;&gt;&gt;= y x = x &gt;&gt;&gt; y   x &amp;= y x = x &amp; y   x ^= y x = x ^ y   x |= y x = x | y  \n\nIn unusual situations, the assignment operator is not identical to the Meaning expression in this table. When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:\n\na[i++] += 5 \/\/i is evaluated only once\na[i++] = a[i++] + 5 \/\/i is evaluated twice\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Bitwise_Operators","title":"Bitwise Operators","description":"Summary\nBitwise operators treat their operands as a sequence of 32 bits (zeros and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.\n   Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\nThe following table summarizes JavaScript's bitwise operators:\n   Operator Usage Description   Bitwise AND a &amp; b Returns a one in each bit position for which the corresponding bits of both operands are ones.   Bitwise OR a | b Returns a one in each bit position for which the corresponding bits of either or both operands are ones.   Bitwise XOR a ^ b Returns a one in each bit position for which the corresponding bits of either but not both operands are ones.   Bitwise NOT ~ a Inverts the bits of its operand.   Left shift a &lt;&lt; b Shifts a in binary representation b (&lt; 32) bits to the left, shifting in zeros from the right.   Sign-propagating right shift a &gt;&gt; b Shifts a in binary representation b (&lt; 32) bits to the right, discarding bits shifted off.   Zero-fill right shift a &gt;&gt;&gt; b Shifts a in binary representation b (&lt; 32) bits to the right, discarding bits shifted off, and shifting in zeros from the left.  \n\nSigned 32-bit integers\nThe operands of all bitwise operators are converted to signed 32-bit integers in big-endian order and in two's complement format. Big-endian order means that the most significant bit (the bit position with the greatest value) is the left-most bit if the 32 bits are arranged in a horizontal line. Two's complement format means that a number's negative counterpart (e.g. 5 vs. -5) is all the number's bits inverted (bitwise NOT of the number, a.k.a. one's complement of the number) plus one. For example, the following encodes the integer 314 (base 10):\n\n00000000000000000000000100111010\n\nThe following encodes ~314, i.e. the one's complement of 314:\n\n11111111111111111111111011000101\n\nFinally, the following encodes -314, i.e. the two's complement of 314:\n\n11111111111111111111111011000110\n\nThe two's complement guarantees that the left-most bit is 0 when the number is positive and 1 when the number is negative. Thus, it is called the sign bit.\nThe number 0 is the integer that is composed completely of 0 bits.\nThe number -1 is the integer that is composed completely of 1 bits.\nBitwise logical operators\nConceptually, the bitwise logical operators work as follows:\n The operands are converted to 32-bit integers and expressed by a series of bits (zeros and ones). Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on. The operator is applied to each pair of bits, and the result is constructed bitwise.\n\n&amp; (Bitwise AND)\nPerforms the AND operation on each pair of bits. a AND b yields 1 only if both a and b are 1. The truth table for the AND operation is:\n   a b a AND b   0 0 0   0 1 0   1 0 0   1 1 1  \n\nExample:\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 &amp; 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n\nBitwise ANDing any number x with 0 yields 0.\nBitwise ANDing any number x with -1 yields x.\n| (Bitwise OR)\nPerforms the OR operation on each pair of bits. a OR b yields 1 if either a or b is 1. The truth table for the OR operation is:\n   a b a OR b   0 0 0   0 1 1   1 0 1   1 1 1  \n\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n\nBitwise ORing any number x with 0 yields x.\nBitwise ORing any number x with -1 yields -1.\n^ (Bitwise XOR)\nPerforms the XOR operation on each pair of bits. a XOR b yields 1 if a and b are different. The truth table for the XOR operation is:\n   a b a XOR b   0 0 0   0 1 1   1 0 1   1 1 0  \n\nExample:\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n\nBitwise XORing any number x with 0 yields x.\nBitwise XORing any number x with -1 yields ~x.\n~ (Bitwise NOT)\nPerforms the NOT operator on each bit. NOT a yields the inverted value (a.k.a. one's complement) of a. The truth table for the NOT operation is:\n   a NOT a   0 1   1 0  \n\nExample:\n\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n\nBitwise NOTing any number x yields -(x + 1). For example, ~5 yields -6.\n&amp; (Bitwise AND)\nPerforms the AND operation on each pair of bits. a AND b yields 1 only if both a and b are 1. The truth table for the AND operation is:\n   a b a AND b   0 0 0   0 1 0   1 0 0   1 1 1  \n\nExample:\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 &amp; 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n\nBitwise ANDing any number x with 0 yields 0.\nBitwise ANDing any number x with -1 yields x.\n| (Bitwise OR)\nPerforms the OR operation on each pair of bits. a OR b yields 1 if either a or b is 1. The truth table for the OR operation is:\n   a b a OR b   0 0 0   0 1 1   1 0 1   1 1 1  \n\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n\nBitwise ORing any number x with 0 yields x.\nBitwise ORing any number x with -1 yields -1.\n^ (Bitwise XOR)\nPerforms the XOR operation on each pair of bits. a XOR b yields 1 if a and b are different. The truth table for the XOR operation is:\n   a b a XOR b   0 0 0   0 1 1   1 0 1   1 1 0  \n\nExample:\n\n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n    14 (base 10) = 00000000000000000000000000001110 (base 2)\n                   --------------------------------\n14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n\nBitwise XORing any number x with 0 yields x.\nBitwise XORing any number x with -1 yields ~x.\n~ (Bitwise NOT)\nPerforms the NOT operator on each bit. NOT a yields the inverted value (a.k.a. one's complement) of a. The truth table for the NOT operation is:\n   a NOT a   0 1   1 0  \n\nExample:\n\n 9 (base 10) = 00000000000000000000000000001001 (base 2)\n               --------------------------------\n~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n\nBitwise NOTing any number x yields -(x + 1). For example, ~5 yields -6.\nBitwise shift operators\nThe bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used.\nShift operators convert their operands to 32-bit integers in big-endian order and return a result of the same type as the left operand.&nbsp; The right operand should be less than 32, but if not only the low five bits will be used.\n&lt;&lt; (Left shift)\nThis operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.\nFor example, 9 &lt;&lt; 2 yields 36:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 &lt;&lt; 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n\nBitwise shifting any number x to the left by y bits yields x * y^2.\n&gt;&gt; (Sign-propagating right shift)\nThis operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.\nFor example, 9 &gt;&gt; 2 yields 2:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 &gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nLikewise, -9 &gt;&gt; 2 yields -3, because the sign is preserved:\n\n     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 &gt;&gt; 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n\n&gt;&gt;&gt; (Zero-fill right shift)\nThis operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always positive.\nFor non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, 9 &gt;&gt;&gt; 2 yields 2, the same as 9 &gt;&gt; 2:\n\n      9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 &gt;&gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nHowever, this is not the case for negative numbers. For example, -9 &gt;&gt;&gt; 2 yields 1073741821, which is different than -9 &gt;&gt; 2 (which yields -3):\n\n      -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 &gt;&gt;&gt; 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n\n&lt;&lt; (Left shift)\nThis operator shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.\nFor example, 9 &lt;&lt; 2 yields 36:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 &lt;&lt; 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n\nBitwise shifting any number x to the left by y bits yields x * y^2.\n&gt;&gt; (Sign-propagating right shift)\nThis operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.\nFor example, 9 &gt;&gt; 2 yields 2:\n\n     9 (base 10): 00000000000000000000000000001001 (base 2)\n                  --------------------------------\n9 &gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nLikewise, -9 &gt;&gt; 2 yields -3, because the sign is preserved:\n\n     -9 (base 10): 11111111111111111111111111110111 (base 2)\n                   --------------------------------\n-9 &gt;&gt; 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n\n&gt;&gt;&gt; (Zero-fill right shift)\nThis operator shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always positive.\nFor non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, 9 &gt;&gt;&gt; 2 yields 2, the same as 9 &gt;&gt; 2:\n\n      9 (base 10): 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n9 &gt;&gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n\nHowever, this is not the case for negative numbers. For example, -9 &gt;&gt;&gt; 2 yields 1073741821, which is different than -9 &gt;&gt; 2 (which yields -3):\n\n      -9 (base 10): 11111111111111111111111111110111 (base 2)\n                    --------------------------------\n-9 &gt;&gt;&gt; 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n\nExamples\nExample: Flags and bitmasks\nThe bitwise logical operators are often used to create, manipulate, and read sequences of flags, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).\nSuppose there are 4 flags:\n flag A: we have an ant problem flag B: we own a bat flag C: we own a cat flag D: we own a duck\n\nThese flags are represented by a sequence of bits: DCBA. When a flag is set, it has a value of 1. When a flag is cleared, it has a value of 0. Suppose a variable flags has the binary value 0101:\n\nvar flags = 0x5;   \/\/ binary 0101\n\nThis value indicates:\n flag A is true (we have an ant problem); flag B is false (we don't own a bat); flag C is true (we own a cat); flag D is false (we don't own a duck);\n\nSince bitwise operators are 32-bit, 0101 is actually 00000000000000000000000000000101, but the preceding zeroes can be neglected since they contain no meaningful information.\nA bitmask is a sequence of bits that can manipulate and\/or read flags. Typically, a &quot;primitive&quot; bitmask for each flag is defined:\n\nvar FLAG_A = 0x1; \/\/ 0001\nvar FLAG_B = 0x2; \/\/ 0010\nvar FLAG_C = 0x4; \/\/ 0100\nvar FLAG_D = 0x8; \/\/ 1000\n\nNew bitmasks can be created by using the bitwise logical operators on these primitive bitmasks. For example, the bitmask 1011 can be created by ORing FLAG_A, FLAG_B, and FLAG_D:\n\nvar mask = FLAG_A | FLAG_B | FLAG_D; \/\/ 0001 | 0010 | 1000 =&gt; 1011\n\nIndividual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will &quot;extract&quot; the corresponding flag. The bitmask masks out the non-relevant flags by ANDing with zeros (hence the term &quot;bitmask&quot;). For example, the bitmask 0100 can be used to see if flag C is set:\n\n\/\/ if we own a cat\nif (flags &amp; FLAG_C) { \/\/ 0101 &amp; 0100 =&gt; 0100 =&gt; true\n   \/\/ do stuff\n}\n\nA bitmask with multiple set flags acts like an &quot;either\/or&quot;. For example, the following two are equivalent:\n\n\/\/ if we own a bat or we own a cat\nif ((flags &amp; FLAG_B) || (flags &amp; FLAG_C)) { \/\/ (0101 &amp; 0010) || (0101 &amp; 0100) =&gt; 0000 || 0100 =&gt; true\n   \/\/ do stuff\n}\n\n\n\/\/ if we own a bat or cat\nvar mask = FLAG_B | FLAG_C; \/\/ 0010 | 0100 =&gt; 0110\nif (flags &amp; mask) { \/\/ 0101 &amp; 0110 =&gt; 0100 =&gt; true\n   \/\/ do stuff\n}\n\nFlags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1010 can be used to set flags C and D:\n\n\/\/ yes, we own a cat and a duck\nvar mask = FLAG_C | FLAG_D; \/\/ 0100 | 1000 =&gt; 1100\nflags |= mask;   \/\/ 0101 | 1100 =&gt; 1101\n\nFlags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:\n\n\/\/ no, we don't neither have an ant problem nor own a cat\nvar mask = ~(FLAG_A | FLAG_C); \/\/ ~0101 =&gt; 1010\nflags &amp;= mask;   \/\/ 1101 &amp; 1010 =&gt; 1000\n\nThe mask could also have been created with ~FLAG_A &amp; ~FLAG_C (De Morgan's law):\n\n\/\/ no, we don't have an ant problem, and we don't own a cat\nvar mask = ~FLAG_A &amp; ~FLAG_C;\nflags &amp;= mask;   \/\/ 1101 &amp; 1010 =&gt; 1000\n\nFlags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:\n\n\/\/ if we didn't have a bat, we have one now, and if we did have one, bye-bye bat\n\/\/ same thing for cats\nvar mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;   \/\/ 1100 ^ 0110 =&gt; 1010\n\nFinally, the flags can all be flipped with the NOT operator:\n\n\/\/ entering parallel universe...\nflags = ~flags;    \/\/ ~1010 =&gt; 0101\n\nExample: Flags and bitmasks\nThe bitwise logical operators are often used to create, manipulate, and read sequences of flags, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).\nSuppose there are 4 flags:\n flag A: we have an ant problem flag B: we own a bat flag C: we own a cat flag D: we own a duck\n\nThese flags are represented by a sequence of bits: DCBA. When a flag is set, it has a value of 1. When a flag is cleared, it has a value of 0. Suppose a variable flags has the binary value 0101:\n\nvar flags = 0x5;   \/\/ binary 0101\n\nThis value indicates:\n flag A is true (we have an ant problem); flag B is false (we don't own a bat); flag C is true (we own a cat); flag D is false (we don't own a duck);\n\nSince bitwise operators are 32-bit, 0101 is actually 00000000000000000000000000000101, but the preceding zeroes can be neglected since they contain no meaningful information.\nA bitmask is a sequence of bits that can manipulate and\/or read flags. Typically, a &quot;primitive&quot; bitmask for each flag is defined:\n\nvar FLAG_A = 0x1; \/\/ 0001\nvar FLAG_B = 0x2; \/\/ 0010\nvar FLAG_C = 0x4; \/\/ 0100\nvar FLAG_D = 0x8; \/\/ 1000\n\nNew bitmasks can be created by using the bitwise logical operators on these primitive bitmasks. For example, the bitmask 1011 can be created by ORing FLAG_A, FLAG_B, and FLAG_D:\n\nvar mask = FLAG_A | FLAG_B | FLAG_D; \/\/ 0001 | 0010 | 1000 =&gt; 1011\n\nIndividual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will &quot;extract&quot; the corresponding flag. The bitmask masks out the non-relevant flags by ANDing with zeros (hence the term &quot;bitmask&quot;). For example, the bitmask 0100 can be used to see if flag C is set:\n\n\/\/ if we own a cat\nif (flags &amp; FLAG_C) { \/\/ 0101 &amp; 0100 =&gt; 0100 =&gt; true\n   \/\/ do stuff\n}\n\nA bitmask with multiple set flags acts like an &quot;either\/or&quot;. For example, the following two are equivalent:\n\n\/\/ if we own a bat or we own a cat\nif ((flags &amp; FLAG_B) || (flags &amp; FLAG_C)) { \/\/ (0101 &amp; 0010) || (0101 &amp; 0100) =&gt; 0000 || 0100 =&gt; true\n   \/\/ do stuff\n}\n\n\n\/\/ if we own a bat or cat\nvar mask = FLAG_B | FLAG_C; \/\/ 0010 | 0100 =&gt; 0110\nif (flags &amp; mask) { \/\/ 0101 &amp; 0110 =&gt; 0100 =&gt; true\n   \/\/ do stuff\n}\n\nFlags can be set by ORing them with a bitmask, where each bit with the value one will set the corresponding flag, if that flag isn't already set. For example, the bitmask 1010 can be used to set flags C and D:\n\n\/\/ yes, we own a cat and a duck\nvar mask = FLAG_C | FLAG_D; \/\/ 0100 | 1000 =&gt; 1100\nflags |= mask;   \/\/ 0101 | 1100 =&gt; 1101\n\nFlags can be cleared by ANDing them with a bitmask, where each bit with the value zero will clear the corresponding flag, if it isn't already cleared. This bitmask can be created by NOTing primitive bitmasks. For example, the bitmask 1010 can be used to clear flags A and C:\n\n\/\/ no, we don't neither have an ant problem nor own a cat\nvar mask = ~(FLAG_A | FLAG_C); \/\/ ~0101 =&gt; 1010\nflags &amp;= mask;   \/\/ 1101 &amp; 1010 =&gt; 1000\n\nThe mask could also have been created with ~FLAG_A &amp; ~FLAG_C (De Morgan's law):\n\n\/\/ no, we don't have an ant problem, and we don't own a cat\nvar mask = ~FLAG_A &amp; ~FLAG_C;\nflags &amp;= mask;   \/\/ 1101 &amp; 1010 =&gt; 1000\n\nFlags can be toggled by XORing them with a bitmask, where each bit with the value one will toggle the corresponding flag. For example, the bitmask 0110 can be used to toggle flags B and C:\n\n\/\/ if we didn't have a bat, we have one now, and if we did have one, bye-bye bat\n\/\/ same thing for cats\nvar mask = FLAG_B | FLAG_C;\nflags = flags ^ mask;   \/\/ 1100 ^ 0110 =&gt; 1010\n\nFinally, the flags can all be flipped with the NOT operator:\n\n\/\/ entering parallel universe...\nflags = ~flags;    \/\/ ~1010 =&gt; 0101\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comparison_Operators","title":"Comparison Operators","description":"Summary\nThe operands can be numerical or string values. Strings are compared based on standard lexicographical ordering, using Unicode values.\nJavaScript has both strict and type-converting equality comparison. For strict equality the objects being compared must have the same type and:\n Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions. Two numbers are strictly equal when they are numerically equal (have the same number value). NaN is not equal to anything, including NaN. Positive and negative zeros are equal to one another. Two Boolean operands are strictly equal if both are true or both are false. Two objects are strictly equal if they refer to the same Object. Null and Undefined types are == (but not ===).\n\nThe following table describes the comparison operators:\n   Operator Description Examples returning true1   Equal (==) If the two operands are not of the same type, JavaScript converts the operands then applies strict comparison. If either operand is a number or a boolean, the operands are converted to numbers if possible; else if either operand is a string, the other operand is converted to a string if possible. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.  3 == var1 &quot;3&quot; == var1 3 == '3'     Not equal (!=) Returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison.&nbsp;If both operands are&nbsp;objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.  var1&nbsp;!= 4 var1&nbsp;!= &quot;5&quot;    Strict equal (===) Returns true if the operands are strictly equal (see above) with no type conversion.  3 === var1    Strict not equal (!==) Returns true if the operands are not equal and\/or not of the same type.  var2&nbsp;!== 3 3&nbsp;!== '3'    Greater than (&gt;) Returns true if the left operand is greater than the right operand.  var2 &gt; var1    Greater than or equal (&gt;=) Returns true if the left operand is greater than or equal to the right operand.  var2 &gt;= var1 var1 &gt;= 3    Less than (&lt;) Returns true if the left operand is less than the right operand.  var1 &lt; var2    Less than or equal to (&lt;=) Returns true if the left operand is less than or equal to the right operand.  var1 &lt;= var2 var2 &lt;= 5   \n\n1 These examples assume that var1 has been assigned the value 3 and var2 has been assigned the value 4.\nUsing the Equality Operators\nThe standard equality operators (== and !=) compare two operands without regard to their type. The strict equality operators (=== and !==) perform equality comparisons on operands of the same type. Use strict equality operators if the operands must be of a specific type as well as value or if the exact type of the operands is important. Otherwise, use the standard equality operators, which allow you to compare the identity of two operands even if they are not of the same type.\nWhen type conversion is needed, JavaScript converts String, Number, Boolean, or Object operands as follows.\n When comparing a number and a string, the string is converted to a number value. JavaScript attempts to convert the string numeric literal to a Number type value. First, a mathematical value is derived from the string numeric literal. Next, this value is rounded to nearest Number type value. If one of the operands is Boolean, the Boolean operand is converted to 1 if it is true and +0 if it is false. If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a String or Number value, using the valueOf and toString methods of the objects. If this attempt to convert the object fails, a runtime error is generated. Note that an object is converted into a primitive if, and only if, its comparand is a primitive. If both operands are objects, they're compared as objects, and the equality test is true only if both refer the same object.\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Logical_Operators","title":"Logical Operators","description":"Summary\nLogical operators are typically used with Boolean (logical) values; when they are, they return a Boolean value. However, the &amp;&amp; and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.\n   Operators   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\nThe logical operators are described in the following table:\n   Operator Usage Description   Logical AND (&amp;&amp;) expr1 &amp;&amp; expr2 Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, &amp;&amp; returns true if both operands are true; otherwise, returns false.   Logical OR (||) expr1 || expr2 Returns expr1 if it can be converted to true; otherwise, returns expr2. Thus, when used with Boolean values, || returns true if either operand is true; if both are false, returns false.   Logical NOT (!) !expr Returns false if its single operand can be converted to true; otherwise, returns true.  \n\nExamples of expressions that can be converted to false are those that evaluate to null, 0, the empty string (&quot;&quot;), or undefined.\nEven though the &amp;&amp; and || operators can be used with operands that are not Boolean values, they can still be considered Boolean operators since their return values can always be converted to Boolean values.\nShort-Circuit Evaluation\nAs logical expressions are evaluated left to right, they are tested for possible &quot;short-circuit&quot; evaluation using the following rules:\n false &amp;&amp; anything is short-circuit evaluated to false. true || anything is short-circuit evaluated to true.\n\nThe rules of logic guarantee that these evaluations are always correct. Note that the anything part of the above expressions is not evaluated, so any side effects of doing so do not take effect.\nFor example, the following two functions are equivalent.\nfunction shortCircuitEvaluation() {\n&nbsp;&nbsp;doSomething() || doSomethingElse()\n}\n\nfunction equivalentEvaluation() {\n&nbsp; var flag = doSomething();\n&nbsp; if (!flag) {\n&nbsp; &nbsp; doSomethingElse();\n&nbsp; }\n}\n\nShort-Circuit Evaluation\nAs logical expressions are evaluated left to right, they are tested for possible &quot;short-circuit&quot; evaluation using the following rules:\n false &amp;&amp; anything is short-circuit evaluated to false. true || anything is short-circuit evaluated to true.\n\nThe rules of logic guarantee that these evaluations are always correct. Note that the anything part of the above expressions is not evaluated, so any side effects of doing so do not take effect.\nFor example, the following two functions are equivalent.\nfunction shortCircuitEvaluation() {\n&nbsp;&nbsp;doSomething() || doSomethingElse()\n}\n\nfunction equivalentEvaluation() {\n&nbsp; var flag = doSomething();\n&nbsp; if (!flag) {\n&nbsp; &nbsp; doSomethingElse();\n&nbsp; }\n}\n\nBackward Compatibility\nJavaScript 1.0 and 1.1\nThe &amp;&amp; and || operators behave as follows:\n   Operator Usage Behavior   &amp;&amp; expr1 &amp;&amp; expr2 If the first operand (expr1) can be converted to false, the &amp;&amp; operator returns false rather than the value of expr1.   || expr1 || expr2 If the first operand (expr1) can be converted to true, the || operator returns true rather than the value of expr1.  \n\nJavaScript 1.0 and 1.1\nThe &amp;&amp; and || operators behave as follows:\n   Operator Usage Behavior   &amp;&amp; expr1 &amp;&amp; expr2 If the first operand (expr1) can be converted to false, the &amp;&amp; operator returns false rather than the value of expr1.   || expr1 || expr2 If the first operand (expr1) can be converted to true, the || operator returns true rather than the value of expr1.  \n\nExamples\nLogical AND (&amp;&amp;)\nThe following code shows examples of the &amp;&amp; (logical AND) operator.\n\na1=true &amp;&amp; true       \/\/ t &amp;&amp; t returns true\na2=true &amp;&amp; false      \/\/ t &amp;&amp; f returns false\na3=false &amp;&amp; true      \/\/ f &amp;&amp; t returns false\na4=false &amp;&amp; (3 == 4)  \/\/ f &amp;&amp; f returns false\na5=&quot;Cat&quot; &amp;&amp; &quot;Dog&quot;     \/\/ t &amp;&amp; t returns Dog\na6=false &amp;&amp; &quot;Cat&quot;     \/\/ f &amp;&amp; t returns false\na7=&quot;Cat&quot; &amp;&amp; false     \/\/ t &amp;&amp; f returns false\n\nLogical OR (||)\nThe following code shows examples of the || (logical OR) operator.\n\no1=true || true       \/\/ t || t returns true\no2=false || true      \/\/ f || t returns true\no3=true || false      \/\/ t || f returns true\no4=false || (3 == 4)  \/\/ f || f returns false\no5=&quot;Cat&quot; || &quot;Dog&quot;     \/\/ t || t returns Cat\no6=false || &quot;Cat&quot;     \/\/ f || t returns Cat\no7=&quot;Cat&quot; || false     \/\/ t || f returns Cat\n\nLogical NOT (!)\nThe following code shows examples of the ! (logical NOT) operator.\n\nn1=!true              \/\/&nbsp;!t returns false\nn2=!false             \/\/&nbsp;!f returns true\nn3=!&quot;Cat&quot;             \/\/&nbsp;!t returns false\n\n&nbsp;\nLogical AND (&amp;&amp;)\nThe following code shows examples of the &amp;&amp; (logical AND) operator.\n\na1=true &amp;&amp; true       \/\/ t &amp;&amp; t returns true\na2=true &amp;&amp; false      \/\/ t &amp;&amp; f returns false\na3=false &amp;&amp; true      \/\/ f &amp;&amp; t returns false\na4=false &amp;&amp; (3 == 4)  \/\/ f &amp;&amp; f returns false\na5=&quot;Cat&quot; &amp;&amp; &quot;Dog&quot;     \/\/ t &amp;&amp; t returns Dog\na6=false &amp;&amp; &quot;Cat&quot;     \/\/ f &amp;&amp; t returns false\na7=&quot;Cat&quot; &amp;&amp; false     \/\/ t &amp;&amp; f returns false\n\nLogical OR (||)\nThe following code shows examples of the || (logical OR) operator.\n\no1=true || true       \/\/ t || t returns true\no2=false || true      \/\/ f || t returns true\no3=true || false      \/\/ t || f returns true\no4=false || (3 == 4)  \/\/ f || f returns false\no5=&quot;Cat&quot; || &quot;Dog&quot;     \/\/ t || t returns Cat\no6=false || &quot;Cat&quot;     \/\/ f || t returns Cat\no7=&quot;Cat&quot; || false     \/\/ t || f returns Cat\n\nLogical NOT (!)\nThe following code shows examples of the ! (logical NOT) operator.\n\nn1=!true              \/\/&nbsp;!t returns false\nn2=!false             \/\/&nbsp;!f returns true\nn3=!&quot;Cat&quot;             \/\/&nbsp;!t returns false\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/String_Operators","title":"String Operators","description":" Summary \nIn addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings. For example, &quot;my &quot; + &quot;string&quot; returns the string &quot;my string&quot;.\nThe shorthand assignment operator += can also be used to concatenate strings. For example, if the variable mystring has the value &quot;alpha&quot;, then the expression mystring += &quot;bet&quot; evaluates to &quot;alphabet&quot; and assigns this value to mystring.\n\n\n\nOperator\n\n\nImplemented in:\nJavaScript 1.0\n\n\nECMA Version:\nECMA-262\n\n\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Member_Operators","title":"Member Operators","description":"Summary\nMember operators provide access to an object's properties and methods.\nAn object is actually an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of object members. It's typical when speaking of an object's members to make a distinction between properties and methods. However, the property\/method distinction is little more than a convention. A method is simply a property with a function as its value.\nThere are two ways to access object members: dot notation and bracket notation (a.k.a. subscript operator).\nNote:&nbsp;The ECMAScript specification labels these operators as &quot;property accessors&quot; rather than &quot;member operators&quot;. Given the property\/method distinction above, however, we will use &quot;member&quot; as an inclusive term for properties and methods, for the sake of clarity.\n\nDot notation\n\nget = object.property;\nobject.property = set;\n\nproperty must be a valid JavaScript identifier, i.e. a sequence of alphanumerical characters, also including the underscore (&quot;_&quot;) and dollar sign (&quot;$&quot;), that cannot start with a number. For example, object.$1 is valid, while object.1 is not.\nExample:\n\ndocument.createElement('pre');\n\nHere, the method named &quot;createElement&quot; is retrieved from document and is called.\nBracket notation\n\nget = object[property_name];\nobject[property_name] = set;\n\nproperty_name is a string. The string does not have to be a valid identifier; it can have any value, e.g. &quot;1foo&quot;, &quot;!bar!&quot;, or even &quot; &quot; (a space).\nExample:\n\ndocument['createElement']('pre');\n\nThis does the exact same thing as the previous example.\nProperty names\nProperty names must be strings. This means that non-string objects cannot be used as keys in the object. Any non-string object, including a number, is typecasted into a string via the toString method.\nExamples:\n\nvar object = {};\nobject['1'] = 'value';\nalert(object[1]);\n\nThis outputs &quot;value&quot;, since 1 is typecasted into '1'.\n\nvar foo = {unique_prop: 1}, bar = {unique_prop: 2}, object = {};\nobject[foo] = 'value';\nalert(object[bar]);\n\nThis also outputs &quot;value&quot;, since both foo and bar are converted to the same string. In the SpiderMonkey JavaScript engine, this string would be &quot;[object Object]&quot;.\nMethod binding\nA method is not bound to the object that it is a method of. Specifically, this is not fixed in a method, i.e. this does not necessarily refer to an object containing the method. this is instead &quot;passed&quot; by the function call.\nSee method binding.\nNote on eval\nJavaScript novices often make the mistake of using eval where the bracket notation can be used instead. For example, the following syntax is often seen in many scripts.\n\nx = eval('document.form_name.' + strFormControl + '.value');\n\neval is slow and should be avoided whenever possible. It is better to use the bracket notation instead:\n\nx = document.form_name[strFormControl].value;\n\n&nbsp;\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Conditional_Operator","title":"Conditional Operator","description":" Summary \nThe conditional operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.\n\n\n\nOperator\n\n\nImplemented in:\nJavaScript 1.0\n\n\nECMA Version:\nECMA-262\n\n\n Syntax \n\ncondition&nbsp;? expr1&nbsp;: expr2\n\n\n Parameters \n condition&nbsp; An expression that evaluates to true or false.\n\n expr1, expr2&nbsp; Expressions with values of any type.\n\n Description \nIf condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2. For example, to display a different message based on the value of the isMember variable, you could use this statement:\n\n\ndocument.write (&quot;The fee is &quot; + (isMember&nbsp;? &quot;$2.00&quot;&nbsp;: &quot;$10.00&quot;))\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comma_Operator","title":"Comma Operator","description":"Summary\nThe comma operator evaluates both of its operands (from left to right)&nbsp;and returns the value of the second operand.\n   Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\nSyntax\n expr1, expr2 \nParameters\n expr1, expr2&nbsp; Any expressions.\n\nDescription\nYou can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop.\nExample\nIf a is a 2-dimensional array with 10 elements on a side, the following code uses the comma operator to increment two variables at once. The code prints the values of the diagonal elements in the array:\n\r\n          for (var i = 0, j = 9; i &lt;= 9; i++, j--)\n  document.writeln(&quot;a[&quot; + i + &quot;][&quot; + j + &quot;] = &quot; + a[i][j]);\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/delete","title":"delete","description":"Summary\nThe delete operator deletes a property of an object.\n   Operator     Implemented in: JavaScript 1.2   ECMAScript Edition: ECMA-262 ? Edition  \nSyntax\ndelete expression\n&nbsp;\nwhere expression should evaluate to a property reference, e.g.:\n\ndelete variableName\ndelete objectExpression.property\ndelete objectExpression[&quot;property&quot;]\ndelete objectExpression[index]\ndelete property \/\/ legal only within a with statement\n\nIf expression does not evaluate to a property, delete does nothing.Parameters\n objectName The name of an object.\n\n property The property to delete.\n\n index An integer representing the array index to delete.\n\nReturns\nReturns false only if the property exists and cannot be deleted. It returns true in all other cases.\nDescription\nThe fifth form is legal only within a with statement, to delete a property from an object.\nYou can use the delete operator to delete variables declared implicitly but not those declared with the var or the function statement.\nIf the delete operator succeeds, it removes the property from the object entirely, although this might reveal a similarly named property on a prototype of the object.\nSome object properties cannot be deleted. In the ECMA 262 specification these are marked as DontDelete.\n\r\n          x = 42;        \/\/ assigns as property of global object\nvar y = 43;    \/\/ declares as variable\nmyobj = new Number();\nmyobj.h = 4;    \/\/ create property h\nmyobj.k = 5;    \/\/ create property k\n\ndelete x;       \/\/ returns true (can delete if declared implicitly)\ndelete y;       \/\/ returns false (cannot delete if declared with var, property is DontDelete)\ndelete Math.PI; \/\/ returns false (cannot delete most predefined properties, declared DontDelete)\ndelete myobj.h; \/\/ returns true (can delete user-defined properties)\nwith(myobj) { \n  delete k;    \/\/ returns true (equivalent to delete myobj.k)\n} \ndelete myobj;   \/\/ returns true (can delete if declared implicitly, equivalent to x)\r\n        \nYou cannot delete a property on an object that it inherits from a prototype (although you can delete it directly on the prototype).\n\r\n          function Foo(){}\n Foo.prototype.bar = 42;\n var foo = new Foo();\n delete foo.bar;           \/\/ but doesn't do anything\n alert(foo.bar);           \/\/ alerts 42, property inherited\n delete Foo.prototype.bar; \/\/ deletes property on prototype\n alert(foo.bar);           \/\/ alerts &quot;undefined&quot;, property no longer inherited\r\n        \nDeleting array elements\nWhen you delete an array element, the array length is not affected. For example, if you delete a[3], a[4] is still a[4] and a[3] is undefined. This holds even if you delete the last element of the array (delete a[a.length-1]).\nWhen the delete operator removes an array element, that element is no longer in the array. In the following example, trees[3] is removed with delete.\n\r\n          var trees = [&quot;redwood&quot;,&quot;bay&quot;,&quot;cedar&quot;,&quot;oak&quot;,&quot;maple&quot;];\ndelete trees[3];\nif (3 in trees) {\n   \/\/ this does not get executed\n}\r\n        \nIf you want an array element to exist but have an undefined value, use the undefined value instead of the delete operator. In the following example, trees[3] is assigned the value undefined, but the array element still exists:\n\r\n          var trees = [&quot;redwood&quot;,&quot;bay&quot;,&quot;cedar&quot;,&quot;oak&quot;,&quot;maple&quot;];\ntrees[3]=undefined;\nif (3 in trees) {\n   \/\/ this gets executed\n}\r\n        \nDeleting array elements\nWhen you delete an array element, the array length is not affected. For example, if you delete a[3], a[4] is still a[4] and a[3] is undefined. This holds even if you delete the last element of the array (delete a[a.length-1]).\nWhen the delete operator removes an array element, that element is no longer in the array. In the following example, trees[3] is removed with delete.\n\r\n          var trees = [&quot;redwood&quot;,&quot;bay&quot;,&quot;cedar&quot;,&quot;oak&quot;,&quot;maple&quot;];\ndelete trees[3];\nif (3 in trees) {\n   \/\/ this does not get executed\n}\r\n        \nIf you want an array element to exist but have an undefined value, use the undefined value instead of the delete operator. In the following example, trees[3] is assigned the value undefined, but the array element still exists:\n\r\n          var trees = [&quot;redwood&quot;,&quot;bay&quot;,&quot;cedar&quot;,&quot;oak&quot;,&quot;maple&quot;];\ntrees[3]=undefined;\nif (3 in trees) {\n   \/\/ this gets executed\n}\r\n        \nCross-browser issues\nAlthough ECMAScript makes iteration order of objects implementation-dependent, it may appear that all major browsers support an iteration order based on the earliest added property coming first (at least for properties not on the prototype). However, in the case of Internet Explorer, when one uses delete on a property, some confusing behavior results, preventing other browsers from using simple objects like object literals as ordered associative arrays. In Explorer, while the property value is indeed set to undefined, if one later adds back a property with the same name, the property will be iterated in its old position--not at the end of the iteration sequence as one might expect after having deleted the property and then added it back.\nSo if you want to simulate an ordered associative array in a cross-browser environment, you are forced to either use two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/get","title":"get","description":"Summary\nBinds an object property to a function that will be called when that property is looked up.\nSyntax\n{get prop() { .&nbsp;.&nbsp;. } }\nParameters\n prop the name of the property to bind to the given function\n\nDescription\nSometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a getter. It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it is possible to use a getter and a setter in conjunction to create a type of pseudo-property.\n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5, the get operator:\n  \n    can have an identifier which is either a number or a string;\n    must have exactly zero parameters (see \n      Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments\n      for more information);\n    must not appear in an object literal with another get\n      or with a data entry for the same property ({ get x() { }, get x() { } }\n      and { x: ..., get x() { } } are forbidden).\n  \nA getter can be removed using the delete operator.\nExamples\nDefining a getter with the get operator\nThis will create a pseudo-property latest of object o that will return the most recent entry into o.log:\n\r\n          var o = {\n  get latest () {\n    if (this.log.length &gt; 0) {\n      return this.log[this.log.length - 1];\n    }\n    else {\n      return null;\n    }\n  },\n  log: []\n}\r\n        \nNote that attempting to assign a value to latest will not change it.\nDeleting a getter using the delete operator\n\r\n          delete o.latest;\r\n         Defining a getter with the get operator\nThis will create a pseudo-property latest of object o that will return the most recent entry into o.log:\n\r\n          var o = {\n  get latest () {\n    if (this.log.length &gt; 0) {\n      return this.log[this.log.length - 1];\n    }\n    else {\n      return null;\n    }\n  },\n  log: []\n}\r\n        \nNote that attempting to assign a value to latest will not change it.\nDeleting a getter using the delete operator\n\r\n          delete o.latest;\r\n         Browser compatibility\nBased on Robert Nyman's page\nNo support (notably in IE6-8) means that the script will trigger a syntax error.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 2.0 (1.8.1)\n 1 9 9.5 3  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\nSee also\n delete set __defineGetter__ __defineSetter__ Defining Getters and Setters in JavaScript Guide\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/in","title":"in","description":"Summary\nThe in operator returns true if the specified property is in the specified object.\n   Operator   Implemented in: JavaScript 1.4  \n\nSyntax\n prop in objectName \nParameters\n prop A string or numeric expression representing a property name or array index.\n\n objectName Name of an object.\n\nDescription\nThe following examples show some uses of the in operator.\n\n\/\/ Arrays\nvar trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);\n0 in trees        \/\/ returns true\n3 in trees        \/\/ returns true\n6 in trees        \/\/ returns false\n&quot;bay&quot; in trees    \/\/ returns false (you must specify the index number,\n                  \/\/ not the value at that index)\n&quot;length&quot; in trees \/\/ returns true (length is an Array property)\n\n\/\/ Predefined objects\n&quot;PI&quot; in Math          \/\/ returns true\n\n\/\/ Custom objects\nvar mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};\n&quot;make&quot; in mycar  \/\/ returns true\n&quot;model&quot; in mycar \/\/ returns true\n\nYou must specify an object on the right side of the in operator. For example, you can specify a string created with the String constructor, but you cannot specify a string literal.\n\nvar color1 = new String(&quot;green&quot;);\n&quot;length&quot; in color1 \/\/ returns true\nvar color2 = &quot;coral&quot;;\n&quot;length&quot; in color2 \/\/ generates an error (color is not a String object)\n\nUsing in with deleted or undefined properties\nIf you delete a property with the delete operator, the in operator returns false for that property.\n\nvar mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};\ndelete mycar.make;\n&quot;make&quot; in mycar;  \/\/ returns false\n\nvar trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);\ndelete trees[3];\n3 in trees; \/\/ returns false\n\nIf you set a property to undefined but do not delete it, the in operator returns true for that property.\n\nvar mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};\nmycar.make = undefined;\n&quot;make&quot; in mycar;  \/\/ returns true\n\n\nvar trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);\ntrees[3] = undefined;\n3 in trees; \/\/ returns true\n\nInherited properties\nThe in operator returns true for properties in the prototype chain.\n\n&quot;toString&quot; in {}; \/\/ returns true\nUsing in with deleted or undefined properties\nIf you delete a property with the delete operator, the in operator returns false for that property.\n\nvar mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};\ndelete mycar.make;\n&quot;make&quot; in mycar;  \/\/ returns false\n\nvar trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);\ndelete trees[3];\n3 in trees; \/\/ returns false\n\nIf you set a property to undefined but do not delete it, the in operator returns true for that property.\n\nvar mycar = {make: &quot;Honda&quot;, model: &quot;Accord&quot;, year: 1998};\nmycar.make = undefined;\n&quot;make&quot; in mycar;  \/\/ returns true\n\n\nvar trees = new Array(&quot;redwood&quot;, &quot;bay&quot;, &quot;cedar&quot;, &quot;oak&quot;, &quot;maple&quot;);\ntrees[3] = undefined;\n3 in trees; \/\/ returns true\n\nInherited properties\nThe in operator returns true for properties in the prototype chain.\n\n&quot;toString&quot; in {}; \/\/ returns true\nSee also\n delete Object.prototype.hasOwnProperty\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/instanceof","title":"instanceof","description":"Summary\nThe instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.\n   Operator     Implemented in: JavaScript 1.4   ECMAScript Edition: ECMA-262 ? Edition  \n\nSyntax\nobject instanceof constructorParameters\n object The object to test.\n\n constructor Function to test against\n\nDescription\nThe instanceof operator tests presence of constructor.prototype in object prototype chain.\n\r\n          function C(){} \/\/ defining a constructor\nfunction D(){} \/\/ defining another constructor\n\nvar o = new C();\no instanceof C; \/\/ true, because: Object.getPrototypeOf(o) === C.prototype\no instanceof D; \/\/ false, because D.prototype is nowhere in o's prototype chain\no instanceof Object; \/\/ true, because:\nC.prototype instanceof Object \/\/ true\n\nC.prototype = {};\nvar o2 = new C();\no2 instanceof C; \/\/ true\no instanceof C; \/\/ false, because C.prototype is nowhere in o's prototype chain anymore\n\nD.prototype = Object.getPrototypeOf(o);\no instanceof D; \/\/ true\r\n        \nNote that if the value of an instanceof test can change based on changes to the prototype property of constructors, it cannot be changed by changing an object prototype, because changing an object prototype is not possible in standard ECMAScript. It is however possible using the non-standard __proto__ pseudo-property. instanceof and multiple context (e.g. frames or windows)\nDifferent scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers\nIn code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test.\nUnlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope.\ninstanceof and multiple context (e.g. frames or windows)\nDifferent scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers\nIn code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test.\nUnlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope.\nExamples\nAlso see the examples for throw.\nExample: Determining whether theDay is a Date object\nThe following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.\n\nvar theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995\nif (theDay instanceof Date)\n{\n  print(&quot;theDay is a Date object&quot;);\n  \/\/ whatever else...\n} \n\nExample: Demonstrating that String and Date are of type Object\nThe following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object).\n\r\n          var myString = new String();\nvar myDate = new Date();\n\nmyString instanceof String; \/\/ returns true\nmyString instanceof Object; \/\/ returns true\nmyString instanceof Date;   \/\/ returns false\n\nmyDate instanceof Date;     \/\/ returns true\nmyDate instanceof Object;   \/\/ returns true\nmyDate instanceof String;   \/\/ returns false\r\n        \nExample: Demonstrating that mycar is of type Car and type Object\nThe following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object.\n\r\n          function Car(make, model, year)\n{\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nvar mycar = new Car(&quot;Honda&quot;, &quot;Accord&quot;, 1998);\nvar a = mycar instanceof Car;    \/\/ returns true\nvar b = mycar instanceof Object; \/\/ returns true\r\n        \nExample: Determining whether theDay is a Date object\nThe following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.\n\nvar theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995\nif (theDay instanceof Date)\n{\n  print(&quot;theDay is a Date object&quot;);\n  \/\/ whatever else...\n} \n\nExample: Demonstrating that String and Date are of type Object\nThe following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object).\n\r\n          var myString = new String();\nvar myDate = new Date();\n\nmyString instanceof String; \/\/ returns true\nmyString instanceof Object; \/\/ returns true\nmyString instanceof Date;   \/\/ returns false\n\nmyDate instanceof Date;     \/\/ returns true\nmyDate instanceof Object;   \/\/ returns true\nmyDate instanceof String;   \/\/ returns false\r\n        \nExample: Demonstrating that mycar is of type Car and type Object\nThe following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object.\n\r\n          function Car(make, model, year)\n{\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\nvar mycar = new Car(&quot;Honda&quot;, &quot;Accord&quot;, 1998);\nvar a = mycar instanceof Car;    \/\/ returns true\nvar b = mycar instanceof Object; \/\/ returns true\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/set","title":"set","description":"Summary\nBinds an object property to a function to be called when there is an attempt to set that property.\nSyntax\n{set prop(val) { .&nbsp;.&nbsp;. }}\nParameters\n prop the name of the property to bind to the given function\n\n val an alias for the variable that holds the value attempted to be assigned to prop\n\nDescription\nIn JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.\n\nJavaScript 1.8.1 noteStarting in JavaScript 1.8.1, setters are no longer called when setting properties in object and array initializers.\n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5, set operator:\n  \n    can have an identifier which is either a number or a string;\n    must have exactly one parameter (see \n      Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments\n      for more information);\n    must not appear in an object literal with another set\n      or with a data entry for the same property ({ set x(v) { }, set x(v) { } }\n      and { x: ..., set x(v) { } } are forbidden).\n  \nA setter can be removed using the delete operator.Examples\nDefining a setter with the set operator\nThis will define a pseudo-property current of object o that, when assigned a value, will update log with that value:\n\r\n          var o = {\n  set current (str) {\n    return this.log[this.log.length] = str;\n  },\n  log: []\n}\r\n        \nNote that current is not defined and any attempts to access it will result in undefined\nRemoving a setter with the delete operator\n\r\n          delete o.current;\r\n        \nDefining a setter with the set operator\nThis will define a pseudo-property current of object o that, when assigned a value, will update log with that value:\n\r\n          var o = {\n  set current (str) {\n    return this.log[this.log.length] = str;\n  },\n  log: []\n}\r\n        \nNote that current is not defined and any attempts to access it will result in undefined\nRemoving a setter with the delete operator\n\r\n          delete o.current;\r\n        \nBrowser compatibility\nBased on Robert Nyman's page\nNo support (notably in IE6-8) means that the script will trigger a syntax error.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 2.0 (1.8.1)\n 1 9 9.5 3  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\nSee also\n delete get __defineGetter__ __defineSetter__ Defining Getters and Setters in JavaScript Guide\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/new","title":"new","description":"Summary\nThe new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\n   Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262  \n\nSyntax\nnew constructor[([arguments])]\nParameters\n constructor A function that specifies the type of the object instance.\n\n arguments A list of values that the constructor will be called with.\n\nDescription\nCreating a user-defined object requires two steps:\n Define the object type by writing a function. Create an instance of the object with new.\n\nTo define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below.\nWhen the code new foo(...) is executed, the following things happen:\n A new object is created, inheriting from foo.prototype. The constructor function foo is called with the specified arguments and this bound to the newly created object. new foo is equivalent to new foo(), i.e. if no argument list is specified, foo is called without arguments. The object returned by the constructor function becomes the result of the whole new expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead. (Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)\n\nYou can always add a property to a previously defined object. For example, the statement car1.color = &quot;black&quot; adds a property color to car1, and assigns it a value of &quot;black&quot;. However, this does not affect any other objects. To add the new property to all objects of the same type, you must add the property to the definition of the car object type.\nYou can add a shared property to a previously defined object type by using the Function.prototype property. This defines a property that is shared by all objects created with that function, rather than by just one instance of the object type. The following code adds a color property with value null to all objects of type car, and then overwrites that value with the string &quot;black&quot; only in the instance object car1. For more information, see prototype.\n\n function Car() {}\n car1 = new Car()\n \n alert(car1.color)           \/\/ undefined\n \n Car.prototype.color = null\n alert(car1.color)           \/\/ null\n \n car1.color = &quot;black&quot;\n alert(car1.color)           \/\/ black\n\nExamples\nExample: Object type and object instance\nSuppose you want to create an object type for cars. You want this type of object to be called car, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\nfunction car(make, model, year) {\n   this.make = make;\n   this.model = model;\n   this.year = year;\n}\n\nNow you can create an object called mycar as follows:\n\nvar mycar = new car(&quot;Eagle&quot;, &quot;Talon TSi&quot;, 1993);\n\nThis statement creates mycar and assigns it the specified values for its properties. Then the value of mycar.make is the string &quot;Eagle&quot;, mycar.year is the integer 1993, and so on.\nYou can create any number of car objects by calls to new. For example:\n\nvar kenscar = new car(&quot;Nissan&quot;, &quot;300ZX&quot;, 1992);\n\nExample: Object property that is itself another object\nSuppose you define an object called person as follows:\n\nfunction person(name, age, sex) {\n   this.name = name;\n   this.age = age;\n   this.sex = sex;\n}\n\nAnd then instantiate two new person objects as follows:\n\nvar rand = new person(&quot;Rand McNally&quot;, 33, &quot;M&quot;);\nvar ken = new person(&quot;Ken Jones&quot;, 39, &quot;M&quot;);\n\nThen you can rewrite the definition of car to include an owner property that takes a person object, as follows:\n\nfunction car(make, model, year, owner) {\n   this.make = make;\n   this.model = model;\n   this.year = year;\n   this.owner = owner;\n}\n\nTo instantiate the new objects, you then use the following:\n\nvar car1 = new car(&quot;Eagle&quot;, &quot;Talon TSi&quot;, 1993, rand);\nvar car2 = new car(&quot;Nissan&quot;, &quot;300ZX&quot;, 1992, ken);\n\nInstead of passing a literal string or integer value when creating the new objects, the above statements pass the objects rand and ken as the parameters for the owners. To find out the name of the owner of car2, you can access the following property:\n\ncar2.owner\n\n&nbsp;\nExample: Object type and object instance\nSuppose you want to create an object type for cars. You want this type of object to be called car, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\nfunction car(make, model, year) {\n   this.make = make;\n   this.model = model;\n   this.year = year;\n}\n\nNow you can create an object called mycar as follows:\n\nvar mycar = new car(&quot;Eagle&quot;, &quot;Talon TSi&quot;, 1993);\n\nThis statement creates mycar and assigns it the specified values for its properties. Then the value of mycar.make is the string &quot;Eagle&quot;, mycar.year is the integer 1993, and so on.\nYou can create any number of car objects by calls to new. For example:\n\nvar kenscar = new car(&quot;Nissan&quot;, &quot;300ZX&quot;, 1992);\n\nExample: Object property that is itself another object\nSuppose you define an object called person as follows:\n\nfunction person(name, age, sex) {\n   this.name = name;\n   this.age = age;\n   this.sex = sex;\n}\n\nAnd then instantiate two new person objects as follows:\n\nvar rand = new person(&quot;Rand McNally&quot;, 33, &quot;M&quot;);\nvar ken = new person(&quot;Ken Jones&quot;, 39, &quot;M&quot;);\n\nThen you can rewrite the definition of car to include an owner property that takes a person object, as follows:\n\nfunction car(make, model, year, owner) {\n   this.make = make;\n   this.model = model;\n   this.year = year;\n   this.owner = owner;\n}\n\nTo instantiate the new objects, you then use the following:\n\nvar car1 = new car(&quot;Eagle&quot;, &quot;Talon TSi&quot;, 1993, rand);\nvar car2 = new car(&quot;Nissan&quot;, &quot;300ZX&quot;, 1992, ken);\n\nInstead of passing a literal string or integer value when creating the new objects, the above statements pass the objects rand and ken as the parameters for the owners. To find out the name of the owner of car2, you can access the following property:\n\ncar2.owner\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/this","title":"this","description":"Introduction\nA function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.\nIn general, the object bound to this in the current scope is determined by how the current function was called, it can't be set by assignment during execution, and it can be different each time the function is called. ES5 introduced the bind method to fix a function's this regardless of how it's called.Global context\nIn the global context (outside of any function), this refers to the global object, whether in strict mode or not.\nconsole.log(this.document === document); \/\/ true\n\n\/\/ In web browsers, the window object is also the global object:\nconsole.log(this === window); \/\/ true\n\nthis.a = 37;\nconsole.log(window.a); \/\/ 37\n\nFunction context\nWhen the this keyword occurs inside a function, its value depends on how the function is called.\nSimple call\n\r\n          function f1(){\n  return this;\n}\n\nf1() === window; \/\/ global object\n\n\nfunction f2(){\n  &quot;use strict&quot;; \/\/ see strict mode\n  return this;\n}\n\nf2() === undefined;\r\n        \nNote: In the second example, this should be undefined, because f2 was called without providing any base (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode; because of this, they incorrectly returned the window object.\nAs an object method\nWhen a function is called as a method of an object, its this is set to the object the method is called on.\nIn the following example, when o.f() is invoked, inside the function this is bound to the o object.\n\r\n          var o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); \/\/ logs 37\r\n        \nNote that this behavior is not at all affected by how or where the function was defined. In the previous example, we defined the function inline as the f member during the definition of o.&nbsp; However, we could have just as easily defined the function first and later attached it to o.f. Doing so results in the same behavior:\n\r\n          var o = {prop: 37};\n\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\n\nconsole.log(o.f()); \/\/ logs 37\r\n        \nThis demonstrates that it matters only that the function was invoked from the f member of o.\nSimilarly, the this binding is only affected by the most immediate member reference. In the following example, when we invoke the function, we call it as a method g of the object o.b. This time during execution, this inside the function will refer to o.b. The fact that the object is itself a member of o has no consequence; the most immediate reference is all that matters.\n\r\n          o.b = {g: independent, prop: 42};\nconsole.log(o.b.g()); \/\/ logs 42\r\n        \n... on the prototype chain\nThe same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object.\n\r\n          var o = {f:function(){ return this.a + this.b; }};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); \/\/ 5\r\n        \nIn this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance.\n... or as a getter or setter\nAgain, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten.\n\r\n          function modulus(){\n  return Math.sqrt(this.re * this.re + this.im * this.im);\n}\n\nvar o = {\n  re: 1,\n  im: -1,\n  get phase(){\n    return Math.atan2(this.im, this.re);\n  }\n};\n\nObject.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});\n\nconsole.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r\n        \nAs a constructor\nWhen a function is used as a constructor (with the new keyword), its this is bound to new object being constructed, unless execution of the constructor results in the JavaScript engine encountering a return statement where the value to be returned is an object.\n\r\n          \/*\n * Constructors work like this:\n *\n * function MyConstructor(){\n *   \/\/ Actual function body code goes here.  Create properties on |this| as\n *   \/\/ desired by assigning to them.  E.g.,\n *   this.fum = &quot;nom&quot;;\n *   \/\/ et cetera...\n *\n *   \/\/ If the function has a return statement that returns an object, that\n *   \/\/ object will be the result of the |new| expression.  Otherwise, the\n *   \/\/ result of the expression is the object currently bound to |this|\n *   \/\/ (i.e., the common case most usually seen).\n * }\n *\/\n\nfunction C(){\n  this.a = 37;\n}\n\nvar o = new C();\nconsole.log(o.a); \/\/ logs 37\n\n\nfunction C2(){\n  this.a = 37;\n  return {a:38};\n}\n\no = new C2();\nconsole.log(o.a); \/\/ logs 38\r\n        \nIn the last example (C2), because an object was returned during construction, the new object that this was bound to simply gets discarded. (This essentially makes the statement &quot;this.a = 37;&quot; dead code. It's not exactly dead, because it gets executed, but it can be eliminated with no outside effects.)\ncall and apply\nWhere a function uses the this keyword in its body, its value can be bound to a particular object during execution using the call or apply methods that all functions inherit from Function.prototype.\n\r\n          function add(c, d){\n  return this.a + this.b + c + d;\n}\n\nvar o = {a:1, b:3};\n\n\/\/ The first parameter is the object to use as 'this', subsequent parameters are passed as \n\/\/ arguments in the function call\nadd.call(o, 5, 7); \/\/ 1 + 3 + 5 + 7 = 16\n\n\/\/ The first parameter is the object to use as 'this', the second is an array whose\n\/\/ members are used as the arguments in the function call\nadd.apply(o, [10, 20]); \/\/ 1 + 3 + 10 + 20 = 34\r\n        \nBound functions\nECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject) creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.\n\r\n          function f(){\n  return this.a;\n}\n\nvar g = f.bind({a:&quot;azerty&quot;});\nconsole.log(g()); \/\/ azerty\n\nvar o = {a:37, f:f, g:g};\nconsole.log(o.f(), o.g()); \/\/ 37, azerty\r\n        \nAs a DOM event handler\nWhen a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener).\n\r\n          \/\/ When called as a listener, turns the related element blue\nfunction bluify(e){\n  console.log(this === e.currentTarget); \/\/ Always true\n  console.log(this === e.target);        \/\/ true when currentTarget and target are the same object\n  this.style.backgroundColor = '#A5D9F3';\n}\n\n\/\/ Get a list of every element in the document\nvar elements = document.getElementsByTagName('*');\n\n\/\/ Add bluify as a click listener so when the element is clicked on,\n\/\/ it turns blue\nfor(var i=0 ; i&lt;elements.length ; i++){\n  elements[i].addEventListener('click', bluify, false);\n}\r\n        \nSimple call\n\r\n          function f1(){\n  return this;\n}\n\nf1() === window; \/\/ global object\n\n\nfunction f2(){\n  &quot;use strict&quot;; \/\/ see strict mode\n  return this;\n}\n\nf2() === undefined;\r\n        \nNote: In the second example, this should be undefined, because f2 was called without providing any base (e.g. window.f2()). This feature wasn't implemented in some browsers when they first started to support strict mode; because of this, they incorrectly returned the window object.\nAs an object method\nWhen a function is called as a method of an object, its this is set to the object the method is called on.\nIn the following example, when o.f() is invoked, inside the function this is bound to the o object.\n\r\n          var o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); \/\/ logs 37\r\n        \nNote that this behavior is not at all affected by how or where the function was defined. In the previous example, we defined the function inline as the f member during the definition of o.&nbsp; However, we could have just as easily defined the function first and later attached it to o.f. Doing so results in the same behavior:\n\r\n          var o = {prop: 37};\n\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\n\nconsole.log(o.f()); \/\/ logs 37\r\n        \nThis demonstrates that it matters only that the function was invoked from the f member of o.\nSimilarly, the this binding is only affected by the most immediate member reference. In the following example, when we invoke the function, we call it as a method g of the object o.b. This time during execution, this inside the function will refer to o.b. The fact that the object is itself a member of o has no consequence; the most immediate reference is all that matters.\n\r\n          o.b = {g: independent, prop: 42};\nconsole.log(o.b.g()); \/\/ logs 42\r\n        \n... on the prototype chain\nThe same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object.\n\r\n          var o = {f:function(){ return this.a + this.b; }};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); \/\/ 5\r\n        \nIn this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance.\n... or as a getter or setter\nAgain, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten.\n\r\n          function modulus(){\n  return Math.sqrt(this.re * this.re + this.im * this.im);\n}\n\nvar o = {\n  re: 1,\n  im: -1,\n  get phase(){\n    return Math.atan2(this.im, this.re);\n  }\n};\n\nObject.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});\n\nconsole.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r\n        \n... on the prototype chain\nThe same notion holds true for methods defined somewhere on the object's prototype chain. If the method is on an object's prototype chain, this refers to the object the method was called on, as if the method was on the object.\n\r\n          var o = {f:function(){ return this.a + this.b; }};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); \/\/ 5\r\n        \nIn this example, the object assigned to the variable p doesn't have its own f property, it inherits it from its prototype. But it doesn't matter that the lookup for f eventually finds a member with that name on o; the lookup began as a reference to p.f, so this inside the function takes the value of the object referred to as p. That is, since f is called as a method of p, its this refers to p. This is an interesting feature of JavaScript's prototype inheritance.\n... or as a getter or setter\nAgain, the same notion holds true when a function is invoked from a getter or a setter. A function used as getter or setter has its this bound to the object from which the property is being set or gotten.\n\r\n          function modulus(){\n  return Math.sqrt(this.re * this.re + this.im * this.im);\n}\n\nvar o = {\n  re: 1,\n  im: -1,\n  get phase(){\n    return Math.atan2(this.im, this.re);\n  }\n};\n\nObject.defineProperty(o, 'modulus', {get: modulus, enumerable:true, configurable:true});\n\nconsole.log(o.phase, o.modulus); \/\/ logs -0.78 1.4142\r\n        \nAs a constructor\nWhen a function is used as a constructor (with the new keyword), its this is bound to new object being constructed, unless execution of the constructor results in the JavaScript engine encountering a return statement where the value to be returned is an object.\n\r\n          \/*\n * Constructors work like this:\n *\n * function MyConstructor(){\n *   \/\/ Actual function body code goes here.  Create properties on |this| as\n *   \/\/ desired by assigning to them.  E.g.,\n *   this.fum = &quot;nom&quot;;\n *   \/\/ et cetera...\n *\n *   \/\/ If the function has a return statement that returns an object, that\n *   \/\/ object will be the result of the |new| expression.  Otherwise, the\n *   \/\/ result of the expression is the object currently bound to |this|\n *   \/\/ (i.e., the common case most usually seen).\n * }\n *\/\n\nfunction C(){\n  this.a = 37;\n}\n\nvar o = new C();\nconsole.log(o.a); \/\/ logs 37\n\n\nfunction C2(){\n  this.a = 37;\n  return {a:38};\n}\n\no = new C2();\nconsole.log(o.a); \/\/ logs 38\r\n        \nIn the last example (C2), because an object was returned during construction, the new object that this was bound to simply gets discarded. (This essentially makes the statement &quot;this.a = 37;&quot; dead code. It's not exactly dead, because it gets executed, but it can be eliminated with no outside effects.)\ncall and apply\nWhere a function uses the this keyword in its body, its value can be bound to a particular object during execution using the call or apply methods that all functions inherit from Function.prototype.\n\r\n          function add(c, d){\n  return this.a + this.b + c + d;\n}\n\nvar o = {a:1, b:3};\n\n\/\/ The first parameter is the object to use as 'this', subsequent parameters are passed as \n\/\/ arguments in the function call\nadd.call(o, 5, 7); \/\/ 1 + 3 + 5 + 7 = 16\n\n\/\/ The first parameter is the object to use as 'this', the second is an array whose\n\/\/ members are used as the arguments in the function call\nadd.apply(o, [10, 20]); \/\/ 1 + 3 + 10 + 20 = 34\r\n        \nBound functions\nECMAScript 5 introduced Function.prototype.bind. Calling f.bind(someObject) creates a new function with the same body and scope as f, but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.\n\r\n          function f(){\n  return this.a;\n}\n\nvar g = f.bind({a:&quot;azerty&quot;});\nconsole.log(g()); \/\/ azerty\n\nvar o = {a:37, f:f, g:g};\nconsole.log(o.f(), o.g()); \/\/ 37, azerty\r\n        \nAs a DOM event handler\nWhen a function is used as an event handler, its this is set to the element the event fired from (some browsers do not follow this convention for listeners added dynamically with methods other than addEventListener).\n\r\n          \/\/ When called as a listener, turns the related element blue\nfunction bluify(e){\n  console.log(this === e.currentTarget); \/\/ Always true\n  console.log(this === e.target);        \/\/ true when currentTarget and target are the same object\n  this.style.backgroundColor = '#A5D9F3';\n}\n\n\/\/ Get a list of every element in the document\nvar elements = document.getElementsByTagName('*');\n\n\/\/ Add bluify as a click listener so when the element is clicked on,\n\/\/ it turns blue\nfor(var i=0 ; i&lt;elements.length ; i++){\n  elements[i].addEventListener('click', bluify, false);\n}\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/typeof","title":"typeof","description":"Summary\nThe typeof operator returns a string indicating the type of the unevaluated operand.\n   Operator     Implemented in: JavaScript 1.1   ECMA Version: ECMA-262 (and ECMA-357 for E4X objects)  \n\nSyntax\nThe typeof operator is used in either of the following ways:\n typeof operand typeof (operand)\n\nParameters\noperand is the string, variable, keyword, or object for which the type is to be returned. The parentheses are optional.\nDescription\nThis table summarizes the possible return values of typeof:\n   Type Result     Undefined &quot;undefined&quot;   Null &quot;object&quot;   Boolean &quot;boolean&quot;   Number &quot;number&quot;   String &quot;string&quot;   Host object (provided by the JS environment) Implementation-dependent   Function object (implements [[Call]] in ECMA-262 terms) &quot;function&quot;   E4X&nbsp;XML&nbsp;object &quot;xml&quot;   E4X&nbsp;XMLList object &quot;xml&quot;   Any other object &quot;object&quot;  \n\nExamples\nNormal cases\n\r\n          \/\/ Numbers\ntypeof 37 === 'number';\ntypeof 3.14 === 'number';\ntypeof Math.LN2 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number'; \/\/ Despite being &quot;Not-A-Number&quot;\ntypeof Number(1) === 'number'; \/\/ but never use this form!\n\n\/\/ Strings\ntypeof &quot;&quot; === 'string';\ntypeof &quot;bla&quot; === 'string';\ntypeof (typeof 1) === 'string'; \/\/ typeof always return a string\ntypeof String(&quot;abc&quot;) === 'string'; \/\/ but never use this form!\n\n\/\/ Booleans\ntypeof true === 'boolean';\ntypeof false === 'boolean';\ntypeof Boolean(true) === 'boolean'; \/\/ but never use this form!\n\n\/\/ Undefined\ntypeof undefined === 'undefined';\ntypeof blabla === 'undefined'; \/\/ an undefined variable\n\n\/\/ Objects\ntypeof {a:1} === 'object';\ntypeof [1, 2, 4] === 'object'; \/\/ use Array.isArray or Object.prototype.toString.call to differentiate regular objects from arrays\ntypeof new Date() === 'object';\n\ntypeof new Boolean(true) === 'object' \/\/ this is confusing. Don't use!\ntypeof new Number(1) === 'object' \/\/ this is confusing. Don't use!\ntypeof new String(&quot;abc&quot;) === 'object';  \/\/ this is confusing. Don't use!\n\n\/\/ Functions\ntypeof function(){} === 'function';\ntypeof Math.sin === 'function';\r\n        \nnull\n\r\n          typeof null === 'object'; \/\/ This stands since the beginning of JavaScript\r\n        \nIn the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 is most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value. (reference needed)\nThis is planned on being fixed in the next version of ECMAScript (which will be available via an opt-in). It will result in typeof null === 'null'.Regular expressions\nCallable regular expressions were a non-standard addition in some browsers (need reference to say which).\n\r\n          typeof \/s\/ === 'function'; \/\/ Chrome 1-12 ... \/\/ Non-conform to ECMAScript 5.1\ntypeof \/s\/ === 'object'; \/\/ Firefox 5+ ...    \/\/ Conform to ECMAScript 5.1\r\n         Other quirks\nalert in old Internet Explorer versions\nOn IE 6, 7 and 8, typeof alert === 'object'Normal cases\n\r\n          \/\/ Numbers\ntypeof 37 === 'number';\ntypeof 3.14 === 'number';\ntypeof Math.LN2 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number'; \/\/ Despite being &quot;Not-A-Number&quot;\ntypeof Number(1) === 'number'; \/\/ but never use this form!\n\n\/\/ Strings\ntypeof &quot;&quot; === 'string';\ntypeof &quot;bla&quot; === 'string';\ntypeof (typeof 1) === 'string'; \/\/ typeof always return a string\ntypeof String(&quot;abc&quot;) === 'string'; \/\/ but never use this form!\n\n\/\/ Booleans\ntypeof true === 'boolean';\ntypeof false === 'boolean';\ntypeof Boolean(true) === 'boolean'; \/\/ but never use this form!\n\n\/\/ Undefined\ntypeof undefined === 'undefined';\ntypeof blabla === 'undefined'; \/\/ an undefined variable\n\n\/\/ Objects\ntypeof {a:1} === 'object';\ntypeof [1, 2, 4] === 'object'; \/\/ use Array.isArray or Object.prototype.toString.call to differentiate regular objects from arrays\ntypeof new Date() === 'object';\n\ntypeof new Boolean(true) === 'object' \/\/ this is confusing. Don't use!\ntypeof new Number(1) === 'object' \/\/ this is confusing. Don't use!\ntypeof new String(&quot;abc&quot;) === 'object';  \/\/ this is confusing. Don't use!\n\n\/\/ Functions\ntypeof function(){} === 'function';\ntypeof Math.sin === 'function';\r\n        \nnull\n\r\n          typeof null === 'object'; \/\/ This stands since the beginning of JavaScript\r\n        \nIn the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. null was represented as the NULL pointer (0x00 is most platforms). Consequently, null had 0 as type tag, hence the bogus typeof return value. (reference needed)\nThis is planned on being fixed in the next version of ECMAScript (which will be available via an opt-in). It will result in typeof null === 'null'.Regular expressions\nCallable regular expressions were a non-standard addition in some browsers (need reference to say which).\n\r\n          typeof \/s\/ === 'function'; \/\/ Chrome 1-12 ... \/\/ Non-conform to ECMAScript 5.1\ntypeof \/s\/ === 'object'; \/\/ Firefox 5+ ...    \/\/ Conform to ECMAScript 5.1\r\n         Other quirks\nalert in old Internet Explorer versions\nOn IE 6, 7 and 8, typeof alert === 'object'alert in old Internet Explorer versions\nOn IE 6, 7 and 8, typeof alert === 'object'Specification\nECMA-262 section 11.4.3\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/void","title":"void","description":"Syntax\nvoid expression\nSummary\nThe void operator evaluates the given expression and then returns undefined.\n   Operator   Implemented in: JavaScript 1.1   ECMA Version: ECMA-262  \n\nUses\nThis operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired.\nThe void operator is often used merely to obtain the undefined primitive value, usually using &quot;void(0)&quot; (which is equivalent to &quot;void 0&quot;). In these cases, the global variable undefined can be used instead (assuming it has not been assigned to a non-default value).\nJavaScript URIs\nWhen a browser follows a javascript: URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is undefined. The void operator can be used to return undefined. For example:\n\n&lt;a href=&quot;javascript:void(0);&quot;&gt;Click here to do nothing&lt;\/a&gt;\n&lt;a href=&quot;javascript:void(document.body.style.backgroundColor='green');&quot;&gt;Click here for green background&lt;\/a&gt;\n\nNote, however, that the javascript: pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Operator_Precedence","title":"Operator Precedence","description":"Summary\nOperator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first.\nA common example:\n\n3 + 4 * 5 \/\/ returns 23\t \n\nThe multiplication operator (&quot;*&quot;) has higher precedence than the addition operator (&quot;+&quot;) and thus will be evaluated first.\nAssociativity\nAssociativity determines the order in which operators of the same precedence are processed. For example, consider an expression:\n\na OP b OP c\n\nLeft-associativity (left-to-right) means that it is processed as (a OP b) OP c, while right-associativity (right-to-left) means it is interpreted as a OP (b OP c). Assignment operators are right-associative, so you can write:\n\na = b = 5;\n\nwith the expected result that a and b get the value 5. This is because the assignment operator returns the value that it assigned. First, b is set to 5. Then the a is set to the value of b.\nTable\nThe following table is ordered from highest (1) to lowest (17) precedence.\n   Precedence Operator type Associativity Individual operators   1 member left-to-right .   []   new right-to-left new   2 function call left-to-right ()   3 increment n\/a ++   decrement n\/a --   4 logical-not right-to-left !   bitwise not right-to-left ~   unary + right-to-left +   unary negation right-to-left -   typeof right-to-left typeof   void right-to-left void   delete right-to-left delete   5 multiplication left-to-right *   division left-to-right \/   modulus left-to-right    6 addition left-to-right +   subtraction left-to-right -   7 bitwise shift left-to-right &lt;&lt;   &gt;&gt;   &gt;&gt;&gt;   8 relational left-to-right &lt;   &lt;=   &gt;   &gt;=   in left-to-right in   instanceof left-to-right instanceof   9 equality left-to-right ==   !=   ===   !==   10 bitwise-and left-to-right &amp;   11 bitwise-xor left-to-right ^   12 bitwise-or left-to-right |   13 logical-and left-to-right &amp;&amp;   14 logical-or left-to-right ||   15 conditional right-to-left ?:   16 assignment right-to-left =   +=   -=   *=   \/=   %=   &lt;&lt;=   &gt;&gt;=   &gt;&gt;&gt;=   &amp;=   ^=   |=   17 comma left-to-right ,  \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/parse","title":"Date.parse","description":"Summary\nParses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\n Date.parse(dateString) \nParameters\n dateString A string representing an RFC822 or ISO 8601 date.\nDescription\nThe parse method takes a date string (such as &quot;Dec 25, 1995&quot;) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. The local time zone is used to interpret arguments that do not contain time zone information. This function is useful for setting date values based on string values, for example in conjunction with the setTime method and the Date object.\nGiven a string representing a time, parse returns the time value. It accepts the RFC822 \/ IETF date syntax (RFC 1123 Section 5.2.14 and elsewhere), e.g. &quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;. It understands the continental US time-zone abbreviations, but for general use, use a time-zone offset, for example, &quot;Mon, 25 Dec 1995 13:30:00 GMT+0430&quot; (4 hours, 30 minutes east of the Greenwich meridian). If you do not specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent.\n\nJavaScript 1.8.5 noteA subset of ISO 8601 formatted date strings can now also be parsed.\nAlternatively, the date\/time string may be in ISO 8601 format. Starting with JavaScript 1.8.5 \/ Firefox 4, a subset of ISO 8601 is supported. For example, &quot;2011-10-10&quot; (just date) or &quot;2011-10-10T14:48:00 (date and time) can be passed and parsed. Timezones in ISO dates are not yet supported, so e.g. &quot;2011-10-10T14:48:00+0200&quot; (with timezone) does not give the intended result yet.\nNote that while time zone specifiers are used during date string parsing to properly interpret the argument, they do not affect the value returned, which is always the number of milliseconds between January 1, 1970 00:00:00 UTC and the point in time represented by the argument.\nBecause parse is a static method of Date, you always use it as Date.parse(), rather than as a method of a Date object you created.Examples\nExample: Using parse\nIf IPOdate is an existing Date object, then you can set it to August 9, 1995 (local time) as follows:\n\r\n          IPOdate.setTime(Date.parse(&quot;Aug 9, 1995&quot;));\r\n        \nSome other examples:\n\r\n          \/\/ Returns 807937200000 in time zone GMT-0300, and other values in other\n\/\/ timezones, since the argument does not specify a time zone.\nDate.parse(&quot;Aug 9, 1995&quot;);\r\n        \n\r\n          \/\/ Returns 807926400000 no matter the local time zone.\nDate.parse(&quot;Wed, 09 Aug 1995 00:00:00 GMT&quot;);\r\n        \n\r\n          \/\/ Returns 807937200000 in timezone GMT-0300, and other values in other\n\/\/ timezones, since there is no time zone specifier in the argument.\nDate.parse(&quot;Wed, 09 Aug 1995 00:00:00&quot;);\r\n        \n\r\n          \/\/ Returns 0 no matter the local time zone.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00 GMT&quot;);\r\n        \n\r\n          \/\/ Returns 14400000 in timezone GMT-0400, and other values in other \n\/\/ timezones, since there is no time zone specifier in the argument.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00&quot;);\r\n        \n\r\n          \/\/ Returns 14400000 no matter the local time zone.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00 GMT-0400&quot;);\r\n        \nExample: Using parse\nIf IPOdate is an existing Date object, then you can set it to August 9, 1995 (local time) as follows:\n\r\n          IPOdate.setTime(Date.parse(&quot;Aug 9, 1995&quot;));\r\n        \nSome other examples:\n\r\n          \/\/ Returns 807937200000 in time zone GMT-0300, and other values in other\n\/\/ timezones, since the argument does not specify a time zone.\nDate.parse(&quot;Aug 9, 1995&quot;);\r\n        \n\r\n          \/\/ Returns 807926400000 no matter the local time zone.\nDate.parse(&quot;Wed, 09 Aug 1995 00:00:00 GMT&quot;);\r\n        \n\r\n          \/\/ Returns 807937200000 in timezone GMT-0300, and other values in other\n\/\/ timezones, since there is no time zone specifier in the argument.\nDate.parse(&quot;Wed, 09 Aug 1995 00:00:00&quot;);\r\n        \n\r\n          \/\/ Returns 0 no matter the local time zone.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00 GMT&quot;);\r\n        \n\r\n          \/\/ Returns 14400000 in timezone GMT-0400, and other values in other \n\/\/ timezones, since there is no time zone specifier in the argument.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00&quot;);\r\n        \n\r\n          \/\/ Returns 14400000 no matter the local time zone.\nDate.parse(&quot;Thu, 01 Jan 1970 00:00:00 GMT-0400&quot;);\r\n        \nSee also\nDate.UTC\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/prototype","title":"Date.prototype","description":"Summary\nRepresents the prototype for the Date constructor.\nDescription\n JavaScript Date  instances inherit from  Date.prototype . You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript&nbsp;Date instances. For compatibility with millennium calculations (in other words, to take into account the year 2000), you should always specify the year in full; for example, use 1998, not 98. To assist you in specifying the complete year, JavaScript includes the methods getFullYear, setFullYear, getUTCFullYear, and setUTCFullYear.\n\t Properties    constructor Returns the function that created an instance. This is the Date    \n\nProperties inherited from  Object:__parent__, __proto__\n\n  Methods    getDate Returns the day of the month (1-31) for the specified date according to local time.   getDay Returns the day of the week (0-6) for the specified date according to local time.   getFullYear Returns the year (4 digits for 4-digit years) of the specified date according to local time.   getHours Returns the hour (0-23) in the specified date according to local time.   getMilliseconds Returns the milliseconds (0-999) in the specified date according to local time.   getMinutes Returns the minutes (0-59) in the specified date according to local time.   getMonth Returns the month (0-11) in the specified date according to local time.   getSeconds Returns the seconds (0-59) in the specified date according to local time.   getTime Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).   getTimezoneOffset Returns the time-zone offset in minutes for the current locale.   getUTCDate Returns the day (date) of the month (1-31) in the specified date according to universal time.   getUTCDay Returns the day of the week (0-6) in the specified date according to universal time.   getUTCFullYear Returns the year (4 digits for 4-digit years) in the specified date according to universal time.   getUTCHours Returns the hours (0-23) in the specified date according to universal time.   getUTCMilliseconds Returns the milliseconds (0-999) in the specified date according to universal time.   getUTCMinutes Returns the minutes (0-59) in the specified date according to universal time.   getUTCMonth Returns the month (0-11) in the specified date according to universal time.   getUTCSeconds Returns the seconds (0-59) in the specified date according to universal time.   getYear \n\nDeprecated\n\n Returns the year (usually 2-3 digits) in the specified date according to local time. Use getFullYear instead.   setDate Sets the day of the month (1-31) for a specified date according to local time.   setFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to local time.   setHours Sets the hours (0-23) for a specified date according to local time.   setMilliseconds Sets the milliseconds (0-999) for a specified date according to local time.   setMinutes Sets the minutes (0-59) for a specified date according to local time.   setMonth Sets the month (0-11) for a specified date according to local time.   setSeconds Sets the seconds (0-59) for a specified date according to local time.   setTime Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.   setUTCDate Sets the day of the month (1-31) for a specified date according to universal time.   setUTCFullYear Sets the full year (4 digits for 4-digit years) for a specified date according to universal time.   setUTCHours Sets the hour (0-23) for a specified date according to universal time.   setUTCMilliseconds Sets the milliseconds (0-999) for a specified date according to universal time.   setUTCMinutes Sets the minutes (0-59) for a specified date according to universal time.   setUTCMonth Sets the month (0-11) for a specified date according to universal time.   setUTCSeconds Sets the seconds (0-59) for a specified date according to universal time.   setYear \n\nDeprecated\n\n Sets the year (usually 2-3 digits) for a specified date according to local time. Use setFullYear instead.   toDateString Returns the &quot;date&quot; portion of the Date as a human-readable string. toISOString Converts a date to a string following the ISO 8601 Extended Format. toJSON \nRequires JavaScript 1.8.5\n Returns a string encapsulating the Date object in JSON&nbsp;format.   toGMTString \n\nDeprecated\n\n Converts a date to a string, using the Internet GMT conventions. Use toUTCString instead.   toLocaleDateString Returns the &quot;date&quot; portion of the Date as a string, using the current locale's conventions.   toLocaleFormat Non-standard      Converts a date to a string, using a format string.   toLocaleString Converts a date to a string, using the current locale's conventions. Overrides the Object.toLocaleString method.   toLocaleTimeString Returns the &quot;time&quot; portion of the Date as a string, using the current locale's conventions.   toSource Non-standard      Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.   toString Returns a string representing the specified Date object. Overrides the Object.prototype.toString method.   toTimeString Returns the &quot;time&quot; portion of the Date as a human-readable string.   toUTCString Converts a date to a string, using the universal time convention.   valueOf Returns the primitive value of a Date object. Overrides the Object.prototype.valueOf method.  \n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n\n See also\n\n\n  Date \n\n Function.prototype\n\n \nSee also\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Arity","title":"Function.Arity","description":"Summary\nSpecifies the number of arguments expected by the function.\n   Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None  \n\nDescription\nThe arity property no longer exists and has been replaced by the Function.prototype.length property.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Caller","title":"Function.Caller","description":"Summary\nReturns the function that invoked the specified function.\nThis property is not part of ECMA-262 Edition 3 standard. It is implemented at least in SpiderMonkey (the JavaScript engine used in Mozilla) (see \n\nbug 65683\n), V8 (the JavaScript engine used in Chrome) and JScript.\n   Property of Function     Implemented in JavaScript 1.5   ECMAScript Edition none  \n\nDescription\nIf the function f was invoked by the top level code, the value of f.caller is null, otherwise it's the function that called f\nThis property replaces deprecated arguments.caller.\nNotes\nNote that in case of recursion, you can't reconstruct the call stack using this property. Consider:\n\nfunction f(n) { g(n-1) }\nfunction g(n) { if(n&gt;0) f(n); else stop() }\nf(2)\n\nAt the moment stop() is called the call stack will be:\n\nf(2) -&gt; g(1) -&gt; f(1) -&gt; g(0) -&gt; stop()\n\nThe following is true:\n\nstop.caller === g &amp;&amp; f.caller === g &amp;&amp; g.caller === f\n\nso if you tried to get the stack trace in the stop() function like this:\n\nvar f = stop;\nvar stack = &quot;Stack trace:&quot;;\nwhile (f) {\n  stack += &quot;\\n&quot; + f.name;\n  f = f.caller;\n}\n\nthe loop would never stop.\nThe special property __caller__, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.\nExamples\nExample: Checking the value of a function's caller property\nThe following code checks the value a function's caller property.\n\nfunction myFunc() {\n   if (myFunc.caller == null) {\n      return (&quot;The function was called from the top!&quot;);\n   } else\n      return (&quot;This function's caller was &quot; + myFunc.caller);\n}\n\n&nbsp;\nExample: Checking the value of a function's caller property\nThe following code checks the value a function's caller property.\n\nfunction myFunc() {\n   if (myFunc.caller == null) {\n      return (&quot;The function was called from the top!&quot;);\n   } else\n      return (&quot;This function's caller was &quot; + myFunc.caller);\n}\n\n&nbsp;\nBrowser Support\nFunction.caller is currently supported by all major browsers:&nbsp;Firefox, Safari, Chrome, Opera and IE. &nbsp;Test page with results.\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Constructor","title":"Function.Constructor","description":" Summary \nReturns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Length","title":"Function.Length","description":"Summary\nSpecifies the number of arguments expected by the function.\n   Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nlength is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.\nExample\n\r\n          console.log((function () {}).length);  \/* 0 *\/\nconsole.log((function (a) {}).length); \/* 1 *\/\nconsole.log((function (a, b) {}).length); \/* 2 etc. *\/\r\n        \n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Name","title":"Function.Name","description":"Summary\nThe name of the function.\n   Property of Function     Implemented in JavaScript ?   ECMAScript Edition None  \n\nDescription\nThe name property returns the name of a function, or an empty string for anonymous functions:\nfunction doSomething() {}\nalert(doSomething.name); \/\/ alerts &quot;doSomething&quot;\n\nFunctions created with the syntax new Function(...) or just Function(...) have their name property set to &quot;anonymous&quot; on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer.\nNote that in these examples anonymous functions are created, so name returns an empty string:\nvar f = function() { };\nvar object = {\n  someMethod: function() {}\n};\n\nalert(f.name == &quot;&quot;); \/\/ true\nalert(object.someMethod.name == &quot;&quot;); \/\/ also true\n\nYou can define a function with a name in a function expression:\nvar object = {\n  someMethod: function object_someMethod() {}\n};\nalert(object.someMethod.name); \/\/ alerts &quot;object_someMethod&quot;\n\ntry { object_someMethod } catch(e) { alert(e); }\n\/\/ ReferenceError: object_someMethod is not defined\n\nYou cannot change the name of a function, this property is read-only:\nvar object = {\n  \/\/ anonymous\n  someMethod: function(){}\n};\nobject.someMethod.name = &quot;someMethod&quot;;\nalert(object.someMethod.name); \/\/ empty string, someMethod is anonymous\n\nExamples\nYou can use obj.constructor.name to check the &quot;class&quot; of an object:\nfunction a()\n{\n}\n\nvar b = new a();\nalert(b.constructor.name); \/\/Alerts &quot;a&quot;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/now","title":"Date.now","description":"Introduction\nReturns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.\n   Method of Date     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\n\r\n          var timeInMs = Date.now();\r\n        \nParameters\nNone.\nDescription\nThe now method returns the milliseconds elapsed since 1 January 1970 00:00:00 UTC up until now as a number.\nWhen using now to create timestamps or unique IDs, keep in mind that the resolution may be 15 milliseconds on Windows (see \n\nbug 363258\n), so you could end up with several equal values if now is called multiple times within a short time span.\nCompatibility\nThis method was standardized in ECMA-262 5th edition.&nbsp; Engines which have not been updated to support this method can work around the absence of this method using the following shim:\n\r\n          if (!Date.now) {\n  Date.now = function now() {\n    return +(new Date);\n  };\n}\r\n        \nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3 5 9 10.50 4   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/UTC","title":"Date.UTC","description":"Summary\nAccepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nDate.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n\n\n Parameters \n year&nbsp; A year after 1900. \n month&nbsp; An integer between 0 and 11 representing the month. \n date&nbsp; An integer between 1 and 31 representing the day of the month. \n hrs&nbsp; An integer between 0 and 23 representing the hours. \n min&nbsp; An integer between 0 and 59 representing the minutes. \n sec&nbsp; An integer between 0 and 59 representing the seconds. \n ms&nbsp; An integer between 0 and 999 representing the milliseconds.\n\n Description \nUTC takes comma-delimited date parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, universal time and the time you specified.\nYou should specify a full year for the year; for example, 1998. If a year between 0 and 99 is specified, the method converts the year to a year in the 20th century (1900 + year); for example, if you specify 95, the year 1995 is used.\nThe UTC method differs from the Date constructor in two ways.\n\n Date.UTC uses universal time instead of the local time.\n Date.UTC returns a time value as a number instead of creating a Date object.\n\nIf a parameter you specify is outside of the expected range, the UTC method updates the other parameters to allow for your number. For example, if you use 15 for month, the year will be incremented by 1 (year + 1), and 3 will be used for the month.\nBecause UTC is a static method of Date, you always use it as Date.UTC(), rather than as a method of a Date object you created.\n\n Examples \n Example: Using Date.UTC \nThe following statement creates a Date object using GMT instead of local time:\n\ngmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));\n\n Example: Using Date.UTC \nThe following statement creates a Date object using GMT instead of local time:\n\ngmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));\n\n See also \nparse\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Apply","title":"Function.Apply","description":"Summary\nCalls a function with a given this value and arguments provided as an array.\nNOTE:&nbsp;While the syntax of this function is almost identical to that of&nbsp;call(), the fundamental difference is that&nbsp;call()&nbsp;accepts an argument list, while&nbsp;apply()&nbsp;accepts a single array of arguments.\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMA-262 3rd Edition  \n\nSyntax\nfun.apply(thisArg[, argsArray])\nParameters\n thisArg \n\n The value of&nbsp;this&nbsp;provided for the call to&nbsp;fun. &nbsp;Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code,&nbsp;null&nbsp;and&nbsp;undefined&nbsp;will be replaced with the global object, and primitive values will be boxed.  \n\n argsArray An array like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.\n\n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), this method works according to the ECMAScript 5 specification. That is, the arguments can be a generic array-like object instead of an array. See \n\nbug 562448\n for details on this change.\nDescription\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\napply is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')).\nYou can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments.\nSince ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1':&nbsp;'bananas'}.\nNote:&nbsp;Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array like objects and will throw an exception.\n\nExamples\nUsing apply to chain constructors\nYou can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \napply and built-in functions\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array.\n\r\n          \/* min\/max number in an array *\/\nvar numbers = [5, 6, 2, 3, 7];\n\n\/* using Math.min\/Math.max apply *\/\nvar max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/\nvar min = Math.min.apply(null, numbers);\n\n\/* vs. simple loop based algorithm *\/\nmax = -Infinity, min = +Infinity;\n\nfor (var i = 0; i &lt; numbers.length; i++) {\n  if (numbers[i] &gt; max)\n    max = numbers[i];\n  if (numbers[i] &lt; min) \n    min = numbers[i];\n}\r\n        \nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)&nbsp; If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\r\n          function minOfArray(arr)\n{\n  var min = Infinity;\n  var QUANTUM = 32768;\n  for (var i = 0, len = arr.length; i &lt; len; i += QUANTUM)\n  {\n    var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));\n    min = Math.min(submin, min);\n  }\n  return min;\n}\n\nvar min = minOfArray([5, 6, 2, 3, 7]);\r\n        \nUsing apply to chain constructors\nYou can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \napply and built-in functions\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array.\n\r\n          \/* min\/max number in an array *\/\nvar numbers = [5, 6, 2, 3, 7];\n\n\/* using Math.min\/Math.max apply *\/\nvar max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/\nvar min = Math.min.apply(null, numbers);\n\n\/* vs. simple loop based algorithm *\/\nmax = -Infinity, min = +Infinity;\n\nfor (var i = 0; i &lt; numbers.length; i++) {\n  if (numbers[i] &gt; max)\n    max = numbers[i];\n  if (numbers[i] &lt; min) \n    min = numbers[i];\n}\r\n        \nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)&nbsp; If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\r\n          function minOfArray(arr)\n{\n  var min = Infinity;\n  var QUANTUM = 32768;\n  for (var i = 0, len = arr.length; i &lt; len; i += QUANTUM)\n  {\n    var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));\n    min = Math.min(submin, min);\n  }\n  return min;\n}\n\nvar min = minOfArray([5, 6, 2, 3, 7]);\r\n        \nSee Also\ncall, bind, arguments\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Call","title":"Function.Call","description":"Summary\nCalls a function with a given this value and arguments provided individually.\nNOTE: While the syntax of this function is almost identical to that of&nbsp;apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nfun.call(thisArg[, arg1[, arg2[, ...]]])\nParameters\n thisArg The value of this provided for the call to&nbsp;fun. &nbsp;Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.\n\n arg1, arg2, ... Arguments for the object.\nDescription\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object.\nWith call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\nExamples\nUsing call to chain constructors for an object\nYou can use call to chain constructors for an object, similar to Java.&nbsp;In the following example, the constructor for the&nbsp;Product&nbsp;object is defined with two parameters, name&nbsp;and&nbsp;value. Two other functions&nbsp;Food&nbsp;and&nbsp;Toy&nbsp;invoke&nbsp;Product&nbsp;passing&nbsp;this&nbsp;and&nbsp;name&nbsp;and&nbsp;value. Product initializes the properties name and price, both specialized functions define the category.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.call(this, name, price);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \nUsing call to invoke an anonymous function\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\r\n          var animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n\nfor (var i = 0; i &lt; animals.length; i++) {\n  (function (i) { \n    this.print = function () { \n      console.log('#' + i  + ' ' + this.species + ': ' + this.name); \n    } \n  }).call(animals[i], i);\n}\r\n        \nUsing call to chain constructors for an object\nYou can use call to chain constructors for an object, similar to Java.&nbsp;In the following example, the constructor for the&nbsp;Product&nbsp;object is defined with two parameters, name&nbsp;and&nbsp;value. Two other functions&nbsp;Food&nbsp;and&nbsp;Toy&nbsp;invoke&nbsp;Product&nbsp;passing&nbsp;this&nbsp;and&nbsp;name&nbsp;and&nbsp;value. Product initializes the properties name and price, both specialized functions define the category.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.call(this, name, price);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \nUsing call to invoke an anonymous function\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\r\n          var animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n\nfor (var i = 0; i &lt; animals.length; i++) {\n  (function (i) { \n    this.print = function () { \n      console.log('#' + i  + ' ' + this.species + ': ' + this.name); \n    } \n  }).call(animals[i], i);\n}\r\n        \nSee Also\napply\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToSource","title":"Function.ToSource","description":" Summary \nReturns a string representing the source code for the function.\n\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \nvar sourceString = function.toSource();\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Function object, toSource returns the following string indicating that the source code is not available:\n\nfunction Function() {\n   [native code]\n}\n\n For custom functions, toSource returns the JavaScript source that defines the object as a string.\n\nThis method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.\n\n See Also \ntoString\nObject.prototype.valueOf\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToString","title":"Function.ToString","description":"Summary\nReturns a string representing the source code of the function.\n   Method of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nfunction.toString(indentation)\nParameters\n indentation Non-standard      The amount of spaces to indent the string representation of the source code. If indentation is less than or equal to -1, most unnecessary spaces are removed.\n\nDescription\nThe Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration.&nbsp; That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body.\nJavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string.\nSee also\nObject.prototype.toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getFullYear","title":"Date.getFullYear","description":" Summary \nReturns the year of the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetFullYear()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getFullYear is an absolute number. For dates between the years 1000 and 9999, getFullYear returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.\nUse this method instead of the getYear method.\n\n Examples \n Example: Using getFullYear \nThe following example assigns the four-digit value of the current year to the variable yr.\n\n\nvar today = new Date();\nvar yr = today.getFullYear(); \n\n Example: Using getFullYear \nThe following example assigns the four-digit value of the current year to the variable yr.\n\n\nvar today = new Date();\nvar yr = today.getFullYear(); \n\n See Also \ngetYear,\ngetUTCFullYear,\nsetFullYear\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setFullYear","title":"Date.setFullYear","description":" Summary \nSets the full year for a specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetFullYear(yearValue[, monthValue[, dayValue]])\n\n\n Parameters \n yearValue&nbsp; An integer specifying the numeric value of the year, for example, 1995.\n\n monthValue&nbsp; An integer between 0 and 11 representing the months January through December.\n\n dayValue&nbsp; An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue. \n Description \nIf you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used.\nIf a parameter you specify is outside of the expected range, setFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.\n\n Examples \n Example: Using setFullYear \n\ntheBigDay = new Date();\ntheBigDay.setFullYear(1997);\n\n Example: Using setFullYear \n\ntheBigDay = new Date();\ntheBigDay.setFullYear(1997);\n\n See Also \ngetUTCFullYear,\nsetUTCFullYear,\nsetYear\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCFullYear","title":"Date.getUTCFullYear","description":" Summary \nReturns the year in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCFullYear()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCFullYear is an absolute number that is compliant with year-2000, for example, 1995.\n\n Examples \n Example: Using getUTCFullYear \nThe following example assigns the four-digit value of the current year to the variable yr.\n\n\nvar yr;\nToday = new Date();\nyr = Today.getUTCFullYear(); \n\n Example: Using getUTCFullYear \nThe following example assigns the four-digit value of the current year to the variable yr.\n\n\nvar yr;\nToday = new Date();\nyr = Today.getUTCFullYear(); \n\n See Also \ngetFullYear,\nsetFullYear\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCFullYear","title":"Date.setUTCFullYear","description":" Summary \nSets the full year for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCFullYear(yearValue[, monthValue[, dayValue]])\n\n\n Parameters \n yearValue&nbsp; An integer specifying the numeric value of the year, for example, 1995. \n monthValue&nbsp; An integer between 0 and 11 representing the months January through December. \n dayValue&nbsp; An integer between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue.\n\n Description \nIf you do not specify the monthValue and dayValue parameters, the values returned from the getMonth and getDate methods are used.\nIf a parameter you specify is outside of the expected range, setUTCFullYear attempts to update the other parameters and the date information in the Date object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.\n\n Examples \n Example: Using setUTCFullYear \n\ntheBigDay = new Date();\ntheBigDay.setUTCFullYear(1997);\n\n Example: Using setUTCFullYear \n\ntheBigDay = new Date();\ntheBigDay.setUTCFullYear(1997);\n\n See Also \ngetUTCFullYear,\nsetFullYear\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/constructor","title":"Date.constructor","description":" Summary \nReturns a reference to the Date function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Parent","title":"Object.Parent","description":"Summary\nPoints to an object's context.\nSyntax\nobj.__parent__\nDescription\nFor top-level objects, this is the e.g. window.\nSee Also\n SpiderMonkey change du jour: the special __parent__ property has been removed\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Proto","title":"Object.Proto","description":"Summary\nRefers to the prototype of the object, which may be an object or null&nbsp;(which usually means the object is Object.prototype, which has no prototype). &nbsp;It is sometimes used to implement prototype-inheritance based property lookup.\nThis property is deprecated and should not be used in new code: use Object.getPrototypeOf&nbsp;instead.\nSyntax\nvar proto = obj.__proto__;\nNote: this is two underscores, followed by the five characters &quot;proto&quot;, followed by two more underscores.\nDescription\nWhen an object is created, its __proto__ property is set to constructing function's prototype property. For example var fred = new Employee(); will cause fred.__proto__ = Employee.prototype;.\nThis is used at runtime to look up properties which are not declared in the object directly. E.g. when fred.doSomething() is executed and fred does not contain a doSomething, fred.__proto__ is checked, which points to Employee.prototype, which contains a doSomething, i.e. fred.__proto__.doSomething() is invoked.\nNote that __proto__ is a property of the instances, whereas prototype is a property of their constructor functions.\nExample\nThis example demonstrates that the __proto__ property can be changed to point to a different object after initial construction. This change will alter the lookup results for object properties. This example also illustrates that all objects have __proto__, including the objects bound to the prototype property of functions. The object  anOnion will have a __proto__ property equal to Plant.prototype; if we write anOnion.foo, then we will lookup foo in the anOnion object first, then in Plant.prototype (the value of anOnion.__proto__), then in Lifeform.prototype (the value of Plant.prototype set by the call to extend()), and finally in Lifeform.__proto__.\n\r\n          function extend(child, supertype) {\n   child.prototype.__proto__ = supertype.prototype;\n}\n\nextend(Animal, Lifeform);\nextend(Plant, Lifeform);\n\nvar anOnion = new Plant();\r\n        \nHowever, this only applies to extensible objects:&nbsp;a non-extensible object's&nbsp;__proto__&nbsp;property (more generally, the object's prototype) cannot be changed:\n\r\n          var obj = {};\nObject.preventExtensions(obj);\n\nobj.__proto__ = {}; \/\/ throws a TypeError\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDate","title":"Date.getDate","description":" Summary \nReturns the day of the month for the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetDate()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getDate is an integer between 1 and 31.\n\n Examples \n Example: Using getDate \nThe second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nday = Xmas95.getDate() \n\n Example: Using getDate \nThe second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nday = Xmas95.getDate() \n\n See Also \ngetUTCDate,\ngetUTCDay,\nsetDate\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDay","title":"Date.getDay","description":" Summary \nReturns the day of the week for the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetDay()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.\n\n Examples \n Example: Using getDay \nThe second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;);\nweekday = Xmas95.getDay();\n\n Example: Using getDay \nThe second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;);\nweekday = Xmas95.getDay();\n\n See Also \ngetUTCDay,\nsetDate\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getHours","title":"Date.getHours","description":" Summary \nReturns the hour for the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetHours()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getHours is an integer between 0 and 23.\n\n Examples \n Example: Using getHours \nThe second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nhours = Xmas95.getHours() \n\n Example: Using getHours \nThe second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nhours = Xmas95.getHours() \n\n See Also \ngetUTCHours,\nsetHours\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMilliseconds","title":"Date.getMilliseconds","description":" Summary \nReturns the milliseconds in the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetMilliseconds()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getMilliseconds is a number between 0 and 999.\n\n Examples \n Example: Using getMilliseconds \nThe following example assigns the milliseconds portion of the current time to the variable ms.\n\n\nvar ms;\nToday = new Date();\nms = Today.getMilliseconds(); \n\n Example: Using getMilliseconds \nThe following example assigns the milliseconds portion of the current time to the variable ms.\n\n\nvar ms;\nToday = new Date();\nms = Today.getMilliseconds(); \n\n See Also \ngetUTCMilliseconds,\nsetMilliseconds\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMinutes","title":"Date.getMinutes","description":" Summary \nReturns the minutes in the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetMinutes()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getMinutes is an integer between 0 and 59.\n\n Examples \n Example: Using getMinutes \nThe second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nminutes = Xmas95.getMinutes()\n\n Example: Using getMinutes \nThe second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nminutes = Xmas95.getMinutes()\n\n See Also \ngetUTCMinutes,\nsetMinutes\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMonth","title":"Date.getMonth","description":" Summary \nReturns the month in the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetMonth()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getMonth is an integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.\n\n Examples \n Example: Using getMonth \nThe second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nmonth = Xmas95.getMonth() \n\n Example: Using getMonth \nThe second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:00&quot;)\nmonth = Xmas95.getMonth() \n\n See Also \ngetUTCMonth,\nsetMonth\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getSeconds","title":"Date.getSeconds","description":" Summary \nReturns the seconds in the specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetSeconds()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getSeconds is an integer between 0 and 59.\n\n Examples \n Example: Using getSeconds \nThe second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:30&quot;)\nsecs = Xmas95.getSeconds()\n\n Example: Using getSeconds \nThe second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.\n\n\nXmas95 = new Date(&quot;December 25, 1995 23:15:30&quot;)\nsecs = Xmas95.getSeconds()\n\n See Also \ngetUTCSeconds,\nsetSeconds\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTime","title":"Date.getTime","description":"Summary\nReturns the numeric value corresponding to the time for the specified date according to universal time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n getTime() \nParameters\nNone.\nDescription\nThe value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00 UTC. You can use this method to help assign a date and time to another Date object.\nThis method is functionally equivalent to the valueOf method.\nExamples\nUsing getTime for copying dates\nConstructing a date object with the identical time value.\n\r\n          var birthday = new Date(1994, 12, 10);\nvar copy = new Date();\ncopy.setTime(birthday.getTime());\r\n        \nMeasuring execution time\nSubtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations.\n\r\n          var end, start;\n\nstart = new Date();\nfor (var i = 0; i &lt; 1000; i++)\n  Math.sqrt(i);\nend = new Date();\n\nconsole.log(&quot;Operation took &quot; + (end.getTime() - start.getTime()) + &quot; msec&quot;);\r\n        Using getTime for copying dates\nConstructing a date object with the identical time value.\n\r\n          var birthday = new Date(1994, 12, 10);\nvar copy = new Date();\ncopy.setTime(birthday.getTime());\r\n        \nMeasuring execution time\nSubtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations.\n\r\n          var end, start;\n\nstart = new Date();\nfor (var i = 0; i &lt; 1000; i++)\n  Math.sqrt(i);\nend = new Date();\n\nconsole.log(&quot;Operation took &quot; + (end.getTime() - start.getTime()) + &quot; msec&quot;);\r\n        See also\ngetUTCHours, setTime, valueOf "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTimezoneOffset","title":"Date.getTimezoneOffset","description":"Summary\nReturns the time-zone offset from UTC, in minutes, for the current locale.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n getTimezoneOffset() \nParameters\nNone.\nDescription\nThe time-zone offset is the difference, in minutes, between UTC&nbsp;and local time. Note that this means that the offset is positive if the local timezone is behind UTC&nbsp;and negative if it is ahead.&nbsp; For example, if your time zone is UTC+10 (Australian Eastern Standard Time), -600 will be returned. Daylight savings time prevents this value from being a constant even for a given locale\nExamples\nExample: Using getTimezoneOffset\nx = new Date()\ncurrentTimeZoneOffsetInHours = x.getTimezoneOffset()\/60\n\nExample: Using getTimezoneOffset\nx = new Date()\ncurrentTimeZoneOffsetInHours = x.getTimezoneOffset()\/60\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDate","title":"Date.getUTCDate","description":" Summary \nReturns the day (date) of the month in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCDate()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCDate is an integer between 1 and 31.\n\n Examples \n Example: Using getUTCDate \nThe following example assigns the day portion of the current date to the variable d.\n\n\nvar d;\nToday = new Date();\nd = Today.getUTCDate(); \n\n Example: Using getUTCDate \nThe following example assigns the day portion of the current date to the variable d.\n\n\nvar d;\nToday = new Date();\nd = Today.getUTCDate(); \n\n See Also \ngetDate,\ngetUTCDay,\nsetUTCDate\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDay","title":"Date.getUTCDay","description":" Summary \nReturns the day of the week in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCDay()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.\n\n Examples \n Example: Using getUTCDay \nThe following example assigns the weekday portion of the current date to the variable weekday.\n\n\nvar weekday;\nToday = new Date()\nweekday = Today.getUTCDay()\n\n Example: Using getUTCDay \nThe following example assigns the weekday portion of the current date to the variable weekday.\n\n\nvar weekday;\nToday = new Date()\nweekday = Today.getUTCDay()\n\n See Also \ngetDay,\ngetUTCDate,\nsetUTCDate\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCHours","title":"Date.getUTCHours","description":" Summary \nReturns the hours in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCHours\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCHours is an integer between 0 and 23.\n\n Examples \n Example: Using getUTCHours \nThe following example assigns the hours portion of the current time to the variable hrs.\n\n\nvar hrs;\nToday = new Date();\nhrs = Today.getUTCHours();\n\n Example: Using getUTCHours \nThe following example assigns the hours portion of the current time to the variable hrs.\n\n\nvar hrs;\nToday = new Date();\nhrs = Today.getUTCHours();\n\n See Also \ngetHours,\nsetUTCHours\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMilliseconds","title":"Date.getUTCMilliseconds","description":" Summary \nReturns the milliseconds in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCMilliseconds()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCMilliseconds is an integer between 0 and 999.\n\n Examples \n Example: Using getUTCMilliseconds =\nThe following example assigns the milliseconds portion of the current time to the variable ms.\n\n\nvar ms;\nToday = new Date();\nms = Today.getUTCMilliseconds();\n\n See Also \ngetMilliseconds,\nsetUTCmilliseconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMinutes","title":"Date.getUTCMinutes","description":" Summary \nReturns the minutes in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCMinutes()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCMinutes is an integer between 0 and 59.\n\n Examples \n Example: Using getUTCMinutes \nThe following example assigns the minutes portion of the current time to the variable min.\n\n\nvar min;\nToday = new Date();\nmin = Today.getUTCMinutes();\n\n Example: Using getUTCMinutes \nThe following example assigns the minutes portion of the current time to the variable min.\n\n\nvar min;\nToday = new Date();\nmin = Today.getUTCMinutes();\n\n See Also \ngetMinutes,\nsetUTCMinutes\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMonth","title":"Date.getUTCMonth","description":" Summary \nReturns the month of the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCMonth()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.\n\n Examples \n Example: Using getUTCMonth \nThe following example assigns the month portion of the current date to the variable mon.\n\n\nvar mon;\nToday = new Date();\nmon = Today.getUTCMonth();\n\n Example: Using getUTCMonth \nThe following example assigns the month portion of the current date to the variable mon.\n\n\nvar mon;\nToday = new Date();\nmon = Today.getUTCMonth();\n\n See Also \ngetMonth,\nsetUTCMonth\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCSeconds","title":"Date.getUTCSeconds","description":" Summary \nReturns the seconds in the specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ngetUTCSeconds()\n\n\n Parameters \nNone.\n\n Description \nThe value returned by getUTCSeconds is an integer between 0 and 59.\n\n Examples \n Example: Using getUTCSeconds \nThe following example assigns the seconds portion of the current time to the variable sec.\n\n\nvar sec;\nToday = new Date();\nsec = Today.getUTCSeconds();\n\n Example: Using getUTCSeconds \nThe following example assigns the seconds portion of the current time to the variable sec.\n\n\nvar sec;\nToday = new Date();\nsec = Today.getUTCSeconds();\n\n See Also \ngetSeconds,\nsetUTCSeconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getYear","title":"Date.getYear","description":"Summary\nReturns the year in the specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\n Syntax \n\ngetYear()\n\n\n Parameters \nNone.\n\n Description \ngetYear is no longer used and has been replaced by the getFullYear method.\nThe getYear method returns the year minus 1900; thus:\n\n For years greater than or equal to 2000, the value returned by getYear is 100 or greater. For example, if the year is 2026, getYear returns 126.\n\n For years between and including 1900 and 1999, the value returned by getYear is between 0 and 99. For example, if the year is 1976, getYear returns 76.\n\n For years less than 1900, the value returned by getYear is less than 0. For example, if the year is 1800, getYear returns -100.\n\nTo take into account years before and after 2000, you should use getFullYear instead of getYear so that the year is specified in full.\n\n Backward Compatibility \n JavaScript 1.2 and earlier \nThe getYear method returns either a 2-digit or 4-digit year:\n\n For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.\n\n For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.\n\n JavaScript 1.2 and earlier \nThe getYear method returns either a 2-digit or 4-digit year:\n\n For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.\n\n For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.\n\n Examples \n Example: Years between 1900 and 1999 \nThe second statement assigns the value 95 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 1995 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns 95\n\n Example: Years above 1999 \nThe second statement assigns the value 100 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 2000 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns 100\n\n Example: Years below 1900 \nThe second statement assigns the value -100 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 1800 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns -100\n\n Example: Setting and getting a year between 1900 and 1999 \nThe second statement assigns the value 95 to the variable year, representing the year 1995.\n\n\nXmas.setYear(95)\nyear = Xmas.getYear() \/\/ returns 95 \n\n Example: Years between 1900 and 1999 \nThe second statement assigns the value 95 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 1995 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns 95\n\n Example: Years above 1999 \nThe second statement assigns the value 100 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 2000 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns 100\n\n Example: Years below 1900 \nThe second statement assigns the value -100 to the variable year.\n\n\nXmas = new Date(&quot;December 25, 1800 23:15:00&quot;)\nyear = Xmas.getYear() \/\/ returns -100\n\n Example: Setting and getting a year between 1900 and 1999 \nThe second statement assigns the value 95 to the variable year, representing the year 1995.\n\n\nXmas.setYear(95)\nyear = Xmas.getYear() \/\/ returns 95 \n\n See Also \ngetFullYear,\ngetUTCFullYear,\nsetYear\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setDate","title":"Date.setDate","description":"Summary\nSets the day of the month for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n setDate(dayValue) \nParameters\n dayValue&nbsp; An integer from 1 to 31, representing the day of the month.\n\nDescription\nIf the parameter you specify is outside of the expected range, setDate attempts to update the date information in the Date object accordingly. For example, if you use 0 for dayValue, the date will be set to the last day of the previous month.\nExamples\nExample: Using setDate\nThe second statement below changes the day for theBigDay to July 24 from its original value.\n\ntheBigDay = new Date(&quot;July 27, 1962 23:30:00&quot;)\ntheBigDay.setDate(24) \n\nExample: Using setDate\nThe second statement below changes the day for theBigDay to July 24 from its original value.\n\ntheBigDay = new Date(&quot;July 27, 1962 23:30:00&quot;)\ntheBigDay.setDate(24) \n\nSee Also\ngetDate, setUTCDate\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setHours","title":"Date.setHours","description":"Summary\nSets the hours for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nsetHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])\n\n\n Versions prior to JavaScript 1.3 \n\nsetHours(hoursValue)\n\n\n Versions prior to JavaScript 1.3 \n\nsetHours(hoursValue)\n\n\n Parameters \n hoursValue&nbsp; An integer between 0 and 23, representing the hour. \n minutesValue&nbsp; An integer between 0 and 59, representing the minutes. \n secondsValue&nbsp; An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue. \n msValue&nbsp; A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue. \n Description \nIf you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getMilliseconds methods are used.\nIf a parameter you specify is outside of the expected range, setHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.\n\n Examples \n Example: Using setHours \n\ntheBigDay.setHours(7)\n\n Example: Using setHours \n\ntheBigDay.setHours(7)\n\n See Also \ngetHours,\nsetUTCHours\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMilliseconds","title":"Date.setMilliseconds","description":" Summary \nSets the milliseconds for a specified date according to local time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetMilliseconds(millisecondsValue)\n\n\n Parameters \n millisecondsValue&nbsp; A number between 0 and 999, representing the milliseconds.\n\n Description \nIf you specify a number outside the expected range, the date information in the Date object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.\n\n Examples \n Example: Using setMilliseconds \n\ntheBigDay = new Date();\ntheBigDay.setMilliseconds(100);\n\n Example: Using setMilliseconds \n\ntheBigDay = new Date();\ntheBigDay.setMilliseconds(100);\n\n See Also \ngetMilliseconds,\nsetUTCMilliseconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMinutes","title":"Date.setMinutes","description":"Summary\nSets the minutes for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nsetMinutes(minutesValue[, secondsValue[, msValue]])\n\n\n Versions prior to JavaScript 1.3 \n\nsetMinutes(minutesValue)\n\n\n Versions prior to JavaScript 1.3 \n\nsetMinutes(minutesValue)\n\n\n Parameters \n minutesValue&nbsp; An integer between 0 and 59, representing the minutes. \n secondsValue&nbsp; An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.\n\n msValue&nbsp; A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.\n\n Description \nIf you do not specify the secondsValue and msValue parameters, the values returned from getSeconds and getMilliseconds methods are used.\nIf a parameter you specify is outside of the expected range, setMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.\n\n Examples \n Example: Using setMinutes \n\ntheBigDay.setMinutes(45)\n\n Example: Using setMinutes \n\ntheBigDay.setMinutes(45)\n\n See Also \ngetMinutes,\nsetUTCMinutes\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setSeconds","title":"Date.setSeconds","description":"Summary\nSets the seconds for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nsetSeconds(secondsValue[, msValue])\n\n\n Versions prior to JavaScript 1.3 \n\nsetSeconds(secondsValue)\n\n\n Versions prior to JavaScript 1.3 \n\nsetSeconds(secondsValue)\n\n\n Parameters \n secondsValue&nbsp; An integer between 0 and 59. \n msValue&nbsp; A number between 0 and 999, representing the milliseconds.\n\n Description \nIf you do not specify the msValue parameter, the value returned from the getMilliseconds method is used.\nIf a parameter you specify is outside of the expected range, setSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.\n\n Examples \n Example: Using setSeconds \n\ntheBigDay.setSeconds(30)\n\n Example: Using setSeconds \n\ntheBigDay.setSeconds(30)\n\n See Also \ngetSeconds,\nsetUTCSeconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMonth","title":"Date.setMonth","description":"Summary\nSet the month for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nsetMonth(monthValue[, dayValue])\n\n\n Versions prior to JavaScript 1.3 \n\nsetMonth(monthValue) \n\n Versions prior to JavaScript 1.3 \n\nsetMonth(monthValue) \n\n Parameter \n monthValue&nbsp; An integer between 0 and 11 (representing the months January through December). \n dayValue&nbsp; An integer from 1 to 31, representing the day of the month.\n\n Description \nIf you do not specify the dayValue parameter, the value returned from the getDate method is used.\nIf a parameter you specify is outside of the expected range, setMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.\n\n Examples \n Example: Using setMonth \n\ntheBigDay.setMonth(6)\n\n Example: Using setMonth \n\ntheBigDay.setMonth(6)\n\n See Also \ngetMonth,\nsetUTCMonth\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCDate","title":"Date.setUTCDate","description":" Summary \nSets the day of the month for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCDate(dayValue)\n\n\n Parameters \n dayValue&nbsp; An integer from 1 to 31, representing the day of the month.\n\n Description \nIf a parameter you specify is outside of the expected range, setUTCDate attempts to update the date information in the Date object accordingly. For example, if you use 40 for dayValue, and the month stored in the Date object is June, the day will be changed to 10 and the month will be incremented to July.\n\n Examples \n Example: Using setUTCDate \n\ntheBigDay = new Date();\ntheBigDay.setUTCDate(20);\n\n Example: Using setUTCDate \n\ntheBigDay = new Date();\ntheBigDay.setUTCDate(20);\n\n See Also \ngetUTCDate,\nsetDate\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setTime","title":"Date.setTime","description":" Summary \nSets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetTime(timeValue)\n\n\n Parameters \n timeValue&nbsp; An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.\n\n Description \nUse the setTime method to help assign a date and time to another Date object.\n\n Examples \n Example: Using setTime \n\ntheBigDay = new Date(&quot;July 1, 1999&quot;)\nsameAsBigDay = new Date()\nsameAsBigDay.setTime(theBigDay.getTime())\n\n Example: Using setTime \n\ntheBigDay = new Date(&quot;July 1, 1999&quot;)\nsameAsBigDay = new Date()\nsameAsBigDay.setTime(theBigDay.getTime())\n\n See Also \ngetTime,\nsetUTCHours\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCHours","title":"Date.setUTCHours","description":" Summary \nSets the hour for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])\n\n\n Parameters \n hoursValue&nbsp; An integer between 0 and 23, representing the hour. \n minutesValue&nbsp; An integer between 0 and 59, representing the minutes. \n secondsValue&nbsp; An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue.\n\n msValue&nbsp; A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.\n\n Description \nIf you do not specify the minutesValue, secondsValue, and msValue parameters, the values returned from the getUTCMinutes, getUTCSeconds, and getUTCMilliseconds methods are used.\nIf a parameter you specify is outside of the expected range, setUTCHours attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.\n\n Examples \n Example: Using setUTCHours \n\ntheBigDay = new Date();\ntheBigDay.setUTCHours(8);\n\n Example: Using setUTCHours \n\ntheBigDay = new Date();\ntheBigDay.setUTCHours(8);\n\n See Also \ngetUTCHours,\nsetHours\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMilliseconds","title":"Date.setUTCMilliseconds","description":" Summary \nSets the milliseconds for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCMilliseconds(millisecondsValue)\n\n\n Parameters \n millisecondsValue&nbsp; A number between 0 and 999, representing the milliseconds.\n\n Description \nIf a parameter you specify is outside of the expected range, setUTCMilliseconds attempts to update the date information in the Date object accordingly. For example, if you use 1100 for millisecondsValue, the seconds stored in the Date object will be incremented by 1, and 100 will be used for milliseconds.\n\n Examples \n Example: Using setUTCMilliseconds \n\ntheBigDay = new Date();\ntheBigDay.setUTCMilliseconds(500);\n\n Example: Using setUTCMilliseconds \n\ntheBigDay = new Date();\ntheBigDay.setUTCMilliseconds(500);\n\n See Also \ngetUTCMilliseconds,\nsetMilliseconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMinutes","title":"Date.setUTCMinutes","description":" Summary \nSets the minutes for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCMinutes(minutesValue[, secondsValue[, msValue]])\n\n\n Parameters \n minutesValue&nbsp; An integer between 0 and 59, representing the minutes. \n secondsValue&nbsp; An integer between 0 and 59, representing the seconds. If you specify the secondsValue parameter, you must also specify the minutesValue. \n msValue&nbsp; A number between 0 and 999, representing the milliseconds. If you specify the msValue parameter, you must also specify the minutesValue and secondsValue.\n\n Description \nIf you do not specify the secondsValue and msValue parameters, the values returned from getUTCSeconds and getUTCMilliseconds methods are used.\nIf a parameter you specify is outside of the expected range, setUTCMinutes attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes (minutesValue) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.\n\n Examples \n Example: Using setUTCMinutes \n\ntheBigDay = new Date();\ntheBigDay.setUTCMinutes(43);\n\n Example: Using setUTCMinutes \n\ntheBigDay = new Date();\ntheBigDay.setUTCMinutes(43);\n\n See Also \ngetUTCMinutes,\nsetMinutes\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMonth","title":"Date.setUTCMonth","description":" Summary \nSets the month for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCMonth(monthValue[, dayValue])\n\n\n Parameters \n monthValue&nbsp; An integer between 0 and 11, representing the months January through December. \n dayValue&nbsp; An integer from 1 to 31, representing the day of the month.\n\n Description \nIf you do not specify the dayValue parameter, the value returned from the getUTCDate method is used.\nIf a parameter you specify is outside of the expected range, setUTCMonth attempts to update the date information in the Date object accordingly. For example, if you use 15 for monthValue, the year will be incremented by 1 (year + 1), and 3 will be used for month.\n\n Examples \n Example: Using setUTCMonth \n\ntheBigDay = new Date();\ntheBigDay.setUTCMonth(11);\n\n Example: Using setUTCMonth \n\ntheBigDay = new Date();\ntheBigDay.setUTCMonth(11);\n\n See Also \ngetUTCMonth,\nsetMonth\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCSeconds","title":"Date.setUTCSeconds","description":" Summary \nSets the seconds for a specified date according to universal time.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nsetUTCSeconds(secondsValue[, msValue])\n\n\n Parameters \n secondsValue&nbsp; An integer between 0 and 59. \n msValue&nbsp; A number between 0 and 999, representing the milliseconds.\n\n Description \nIf you do not specify the msValue parameter, the value returned from the getUTCMilliseconds methods is used.\nIf a parameter you specify is outside of the expected range, setUTCSeconds attempts to update the date information in the Date object accordingly. For example, if you use 100 for secondsValue, the minutes stored in the Date object will be incremented by 1, and 40 will be used for seconds.\n\n Examples \n Example: Using setUTCSeconds \n\ntheBigDay = new Date();\ntheBigDay.setUTCSeconds(20);\n\n Example: Using setUTCSeconds \n\ntheBigDay = new Date();\ntheBigDay.setUTCSeconds(20);\n\n See Also \ngetUTCSeconds,\nsetSeconds\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setYear","title":"Date.setYear","description":"Summary\nSets the year for a specified date according to local time.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax \n\nsetYear(yearValue)\n\n\n Parameters \n yearValue&nbsp; An integer.\n\n Description \nsetYear is no longer used and has been replaced by the setFullYear method.\nIf yearValue&lt;\/code. is a number between 0 and 99 (inclusive), then the year for &lt;code&gt;dateObjectName is set to 1900 + yearValue. Otherwise, the year for dateObjectName is set to yearValue.\nTo take into account years before and after 2000, you should use setFullYear instead of setYear so that the year is specified in full.\n\n Examples \n Example: Using setYear \nThe first two lines set the year to 1996. The third sets the year to 2000.\n\n\ntheBigDay.setYear(96)\ntheBigDay.setYear(1996)\ntheBigDay.setYear(2000)\n\n Example: Using setYear \nThe first two lines set the year to 1996. The third sets the year to 2000.\n\n\ntheBigDay.setYear(96)\ntheBigDay.setYear(1996)\ntheBigDay.setYear(2000)\n\n See Also \ngetYear,\nsetFullYear,\nsetUTCFullYear\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toDateString","title":"Date.toDateString","description":"Summary\nReturns the date portion of a Date object in human readable form in American English.\n   Method of Date     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \n\nSyntax\ndate.toDateString()\nDescription\nDate instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the toDateString method.\nThe toDateString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.\nExample\nExample: A basic usage of toDateString\nvar d = new Date(1993, 6, 28, 14, 39, 7);\nprintln(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)\nprintln(d.toDateString()); \/\/ prints Wed Jul 28 1993\n\nSee also\n toLocaleDateString toTimeString toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toISOString","title":"Date.toISOString","description":"Summary\nJavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format.\nThe Date.prototype.toISOString is an ECMAScript 5 addition. Format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ\n\n   Method of Date     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nmyDate.toISOString() \nNote: mydate is a Date object.\nParameters\nNone.\nExamples\n\r\n          var today = new Date(&quot;05 October 2011 14:48 UTC&quot;);\nalert(today.toISOString()); \/\/ Returns 2011-10-10T14:48:00.000z\r\n        \nSee Also\ntoUTCString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toJSON","title":"Date.toJSON","description":"Summary\nReturns a JSON representation of the Date object.\n   Method of Date     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \nSyntax\ndate.toJSON()Description\nDate instances refer to a specific point in time. Calling toJSON() returns a JSON formatted string representing the Date object's value. &nbsp;This method is generally intended to, by default, usefully serialize Date objects during JSON serialization.\nExample\n\r\n          var jsonDate = (new Date()).toJSON();\nvar backToDate = new Date(jsonDate);\n\nconsole.log(&quot;Serialized date object: &quot; + jsonDate);\r\n        "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toGMTString","title":"Date.toGMTString","description":"Summary\nConverts a date to a string, using Internet GMT conventioins.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\n toGMTString() \nParameters\nNone.\nDescription\ntoGMTString is deprecated and should no longer be used, it's only there for backwards compatibility, use toUTCString instead.\nThe exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string.Examples\nExample: Using toGMTString\nIn the following example, today is a Date object:\ntoday.toGMTString()\n\nIn this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform.\nMon, 18 Dec 1995 17:28:35 GMT\n\nExample: Using toGMTString\nIn the following example, today is a Date object:\ntoday.toGMTString()\n\nIn this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform.\nMon, 18 Dec 1995 17:28:35 GMT\n\nSee Also\ntoLocaleString, toUTCString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toUTCString","title":"Date.toUTCString","description":"Summary\nConverts a date to a string, using the universal time convention.\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\ntoUTCString() \nParameters\nNone.\nDescription\nThe value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform. The most common return value is a RFC-1123 formatted date stamp, which is a slightly updated version of RFC-822 date stamps.\nExamples\nExample: Using toUTCString\nvar today = new Date();\nvar UTCstring = today.toUTCString();\n\/\/ Mon, 03 Jul 2006 21:44:38 GMT\n\nExample: Using toUTCString\nvar today = new Date();\nvar UTCstring = today.toUTCString();\n\/\/ Mon, 03 Jul 2006 21:44:38 GMT\n\nSee Also\ntoLocaleString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleDateString","title":"Date.toLocaleDateString","description":" Summary \nConverts a date to a string, returning the &quot;date&quot; portion using the operating system's locale's conventions.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ntoLocaleDateString()\n\n\n Parameters \nNone.\n\nDescription\nThe toLocaleDateString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleDateString returns a string that is not year-2000 compliant. toLocaleDateString behaves similarly to toString when converting a year that the operating system does not properly format.\nMethods such as getDate, getMonth, and getFullYear give more portable results than toLocaleDateString. Use toLocaleDateString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples\nUsing toLocaleDateString\nIn the following example, today is a Date object:\ntoday = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11\ntoday.toLocaleDateString()\n\nIn this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.\n12\/18\/95\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n&quot;Last visit: &quot; + someDate.toLocaleDateString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleDateString(); \/\/ Bad exampleUsing toLocaleDateString\nIn the following example, today is a Date object:\ntoday = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11\ntoday.toLocaleDateString()\n\nIn this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.\n12\/18\/95\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n&quot;Last visit: &quot; + someDate.toLocaleDateString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleDateString(); \/\/ Bad exampleSee Also\n toDateString toLocaleString toLocaleTimeString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toLocaleString","title":"Object.toLocaleString","description":" Summary \nReturns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n\n\nMethod of Object\n\n\nECMA Version:\nECMA-262 Edition 3\n\n\n Syntax \n\ntoLocaleString()\n\n\n Parameters \nNone.\n\n Description \nObject's toLocaleString returns the result of calling toString.\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.\n\n See also \ntoString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleTimeString","title":"Date.toLocaleTimeString","description":"Summary\nConverts a date to a string, returning the &quot;time&quot; portion using the current locale's conventions.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n toLocaleTimeString() \nParameters\nNone.\nDescription\nThe toLocaleTimeString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98).\nMethods such as getHours, getMinutes, and getSeconds give more consistent results than toLocaleTimeString. Use toLocaleTimeString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.\nExamples\nUsing toLocaleTimeString\nIn the following example, today is a Date object:\n\ntoday = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11\ntoday.toLocaleTimeString()\n\nIn this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.\n\n17:28:35\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n\n&quot;Last visit: &quot; + someDate.toLocaleTimeString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleTimeString(); \/\/ Bad example\nUsing toLocaleTimeString\nIn the following example, today is a Date object:\n\ntoday = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11\ntoday.toLocaleTimeString()\n\nIn this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.\n\n17:28:35\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n\n&quot;Last visit: &quot; + someDate.toLocaleTimeString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleTimeString(); \/\/ Bad example\nSee Also\n toTimeString toLocaleString toLocaleDateString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleFormat","title":"Date.toLocaleFormat","description":"Summary\nConverts a date to a string using the specified formatting.\n   Method of Date     Implemented in JavaScript 1.6   ECMAScript Edition None  \n\nSyntax\ndateObj.toLocaleFormat(formatString)Parameters\n formatString&nbsp; A format string in the same format expected by the strftime() function in C. \nDescription\nThe toLocaleFormat() provides greater software control over the formatting of the generated date and\/or time. Names for months and days of the week are localized using the operating system's locale. However, ordering of the day and month and other localization tasks are not handled automatically since you have control over the order in which they occur.You should take care that the format string is localized properly according to the user's system settings. Be aware that the locale used is not necessarily the same as the locale of the browser. Extension and XulRunner developers should know that just loading the format string from a .dtd or .properties file using a chrome:\/\/somedomain\/locale\/somefile.ext URI should be avoided, as the dtd\/properties file and the toLocaleFormat method does not not necessarily use the same locale, which could result in odd looking or even ambiguous or unreadable dates. Also note that the behavior of the used locale depends on the platform, and the user might customize the locale used, so using the system locale the choose the format string might in some cases not even be adequate. You might consider using some of the more general toLocale* methods of the Date object or doing your own custom localization of the date to be displayed using some of the get* methods of the Date object instead of using this method.\nExamples\nExample: Using toLocaleFormat\nvar today = new Date();\nvar date = today.toLocaleFormat(&quot;%A,&nbsp;%B&nbsp;%e,&nbsp;%Y&quot;); \/\/&nbsp;Bad example\n\nIn this example, toLocaleFormat() returns a string such as &quot;Wednesday, October 3, 2007&quot;. Note that the format string in this example is not properly localized, which will result in the problems described above.\nExample: Using toLocaleFormat\nvar today = new Date();\nvar date = today.toLocaleFormat(&quot;%A,&nbsp;%B&nbsp;%e,&nbsp;%Y&quot;); \/\/&nbsp;Bad example\n\nIn this example, toLocaleFormat() returns a string such as &quot;Wednesday, October 3, 2007&quot;. Note that the format string in this example is not properly localized, which will result in the problems described above.\nSee Also\n toLocaleString toLocaleDateString toLocaleTimeString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleString","title":"Date.toLocaleString","description":" Summary \nConverts a date to a string, using the operating system's locale's conventions.\n\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\ntoLocaleString()\n\n\n Parameters \nNone.\n\nDescription\nThe toLocaleString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleString returns a string that is not year-2000 compliant. toLocaleString behaves similarly to toString when converting a year that the operating system does not properly format.\nMethods such as getDate, getMonth, getFullYear, getHours, getMinutes, and getSeconds give more portable results than toLocaleString. Use toLocaleString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples\nUsing toLocaleString\nIn the following example, today is a Date object:\ntoday = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11\ntoday.toLocaleString();\n\nIn this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.\n12\/18\/95 17:28:35\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n&quot;Last visit: &quot; + someDate.toLocaleString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleString(); \/\/ Bad example\nUsing toLocaleString\nIn the following example, today is a Date object:\ntoday = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11\ntoday.toLocaleString();\n\nIn this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.\n12\/18\/95 17:28:35\n\nYou shouldn't use this method in contexts where you rely on a particular format or locale.\n&quot;Last visit: &quot; + someDate.toLocaleString(); \/\/ Good example\n&quot;Last visit was at &quot; + someDate.toLocaleString(); \/\/ Bad example\nSee also\n toString toUTCString toLocaleDateString toLocaleTimeString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toSource","title":"Date.toSource","description":" Summary \nReturns a string representing the source code of the object.\n\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \ndate.toSource()\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Date object, toSource returns the following string indicating that the source code is not available:\n\nfunction Date() {\n   [native code]\n}\n\n For instances of Date, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n See Also \nObject.toSource\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toSource","title":"Object.toSource","description":"Summary\nReturns a string representing the source code of the object.\n   Method of Object     Implemented in JavaScript 1.3   ECMAScript Edition None  \nSyntax\nobj.toSource()\nParameters\nNone.\nDescription\nThe toSource method returns the following values:\n For the built-in Object object, toSource returns the following string indicating that the source code is not available:\n\n\nfunction Object() {\n   [native code]\n}\n\n For instances of Object, toSource returns a string representing the source code.\n\nYou can call toSource while debugging to examine the contents of an object.\nIt is safe for objects to override the toSource method.&nbsp; For example:\n\nfunction Person(name) {\n    this.name = name;\n}\nPerson.prototype.toSource = function Person_toSource() {\n    return &quot;new Person(&quot; + uneval(this.name) + &quot;)&quot;;\n};\nalert(new Person(&quot;Joe&quot;).toSource());    \/\/ ---&gt;&nbsp;new Person(&quot;Joe&quot;)\n\nBuilt-in toSource methods\nEach core JavaScript type has its own toSource method. These objects are: \n\n toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.\n\n\n\nBuilt-in toSource methods\nEach core JavaScript type has its own toSource method. These objects are: \n\n toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.\n\n\n\nExamples\nExample: Using toSource\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\nfunction Dog(name, breed, color, sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;, &quot;Lab&quot;, &quot;chocolate&quot;, &quot;girl&quot;);\n\nCalling the toSource method of theDog displays the JavaScript source that defines the object:\n\ntheDog.toSource();\n\nreturns\n\n({name:&quot;Gabby&quot;, breed:&quot;Lab&quot;, color:&quot;chocolate&quot;, sex:&quot;girl&quot;})\n\nExample: Using toSource\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\nfunction Dog(name, breed, color, sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;, &quot;Lab&quot;, &quot;chocolate&quot;, &quot;girl&quot;);\n\nCalling the toSource method of theDog displays the JavaScript source that defines the object:\n\ntheDog.toSource();\n\nreturns\n\n({name:&quot;Gabby&quot;, breed:&quot;Lab&quot;, color:&quot;chocolate&quot;, sex:&quot;girl&quot;})\n\nSee Also\ntoString\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toString","title":"Date.toString","description":"Summary\nReturns a string representing the specified Date object.\n   Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\n toString() \nParameters\nNone.\nDescription\nThe Date object overrides the toString method of the Object object; it does not inherit Object.toString. For Date objects, the toString method returns a string representation of the object.\ntoString always returns a string representation of the date in American English.\nJavaScript calls the toString method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation.\nExamples\nExample: Using toString\nThe following assigns the toString value of a Date object to myVar:\nx = new Date();\nmyVar=x.toString();   \/\/assigns a value to myVar similar to:\n     \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)\n\nExample: Using toString\nThe following assigns the toString value of a Date object to myVar:\nx = new Date();\nmyVar=x.toString();   \/\/assigns a value to myVar similar to:\n     \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)\n\nSee also\n Object.toString toDateString toTimeString toLocaleString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toString","title":"Object.toString","description":"Summary\nReturns a string representing the object.\n   Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition  \n\nSyntax\nobject.toString()\nDescription\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns &quot;[object type]&quot;, where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           \/\/ returns [object Object]\n\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\nExamples\nOverriding the default toString method\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\r\n          function Dog(name,breed,color,sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;,&quot;Lab&quot;,&quot;chocolate&quot;,&quot;female&quot;);\r\n        \nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\ntheDog.toString(); \/\/returns [object Object]\n\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;property = value;&quot;.\n\r\n          Dog.prototype.toString = function dogToString() {\n  var ret = &quot;Dog &quot; + this.name + &quot; is a &quot; + this.sex + &quot; &quot; + this.color + &quot; &quot; + this.breed;\n  return ret;\n}\r\n        \nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\n\nUsing toString() to detect object class\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\r\n          var toString = Object.prototype.toString;\n\ntoString.call(new Date); \/\/ [object Date]\ntoString.call(new String); \/\/ [object String]\ntoString.call(Math); \/\/ [object Math]\n\n\/\/Since JavaScript 1.8.5\ntoString.call(undefined); \/\/ [object Undefined]\ntoString.call(null); \/\/ [object Null]\r\n        Overriding the default toString method\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\r\n          function Dog(name,breed,color,sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;,&quot;Lab&quot;,&quot;chocolate&quot;,&quot;female&quot;);\r\n        \nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\ntheDog.toString(); \/\/returns [object Object]\n\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;property = value;&quot;.\n\r\n          Dog.prototype.toString = function dogToString() {\n  var ret = &quot;Dog &quot; + this.name + &quot; is a &quot; + this.sex + &quot; &quot; + this.color + &quot; &quot; + this.breed;\n  return ret;\n}\r\n        \nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\n\nUsing toString() to detect object class\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\r\n          var toString = Object.prototype.toString;\n\ntoString.call(new Date); \/\/ [object Date]\ntoString.call(new String); \/\/ [object String]\ntoString.call(Math); \/\/ [object Math]\n\n\/\/Since JavaScript 1.8.5\ntoString.call(undefined); \/\/ [object Undefined]\ntoString.call(null); \/\/ [object Null]\r\n        See Also\n toSource valueOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toTimeString","title":"Date.toTimeString","description":"Syntax\ndate.toTimeString()\nDescription\nDate instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the toTimeString method.\nThe toTimeString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.\nExample\nExample: A basic usage of toTimeString\n\nvar d = new Date(1993, 6, 28, 14, 39, 7);\nprintln(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)\nprintln(d.toTimeString()); \/\/ prints 14:39:07 GMT-0600 (PDT)\n\nSee also\n toLocaleTimeString toDateString toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/valueOf","title":"Date.valueOf","description":" Summary \nReturns the primitive value of a Date object.\n\n   Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nvalueOf()\n\n\n Parameters \nNone.\n\n Description \nThe valueOf method returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.\nThis method is functionally equivalent to the getTime method.\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n Examples \n Example: Using valueOf \nx = new Date(56, 6, 17);\nmyVar = x.valueOf();      \/\/assigns -424713600000 to myVar\n\n\n\n Example: Using valueOf \nx = new Date(56, 6, 17);\nmyVar = x.valueOf();      \/\/assigns -424713600000 to myVar\n\n\n\n See also \nObject.valueOf,\ngetTime\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf","title":"Object.valueOf","description":" Summary \nReturns the primitive value of the specified object\n\n   Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nvalueOf()\n\n\n Parameters \nNone.\n\n Description \nJavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\nBy default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:\n\n\n[object Object]\n\nYou can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.\n\n Overriding valueOf for custom objects \nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\nmyNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\nmyNumber.valueOf()\n\nNote\nObjects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only &quot;[object type]&quot;. But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects \nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\nmyNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\nmyNumber.valueOf()\n\nNote\nObjects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only &quot;[object type]&quot;. But many objects do not convert to number, boolean, or function.See Also\n parseInt toString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineGetter","title":"Object.DefineGetter","description":"Summary\nBinds an object's property to a function to be called when that property is looked up.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__defineGetter__(sprop, fun)\nParameters\n sprop a string containing the name of the property to bind to the given function\n\n fun a function to be bound to a lookup of the specified property\n\nDescription\nThe __defineGetter__ allows a getter to be defined on a pre-existing object.\nSee also\n get __lookupGetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineSetter","title":"Object.DefineSetter","description":"Summary\nBinds an object's property to a function to be called when an attempt is made to set that property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__defineSetter__(sprop, fun)\nParameters\n sprop a string containing the name of the property to be bound to the given function\n\n fun a function to be called when there is an attempt to set the specified property. This function takes the form function (val) { .&nbsp;.&nbsp;. }  val an alias for the variable that holds the value attempted to be assigned to prop  \n\nDescription\nThe __defineSetter__ method allows a setter to be defined on a pre-existing object.\nSee also\n set __lookupSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/HasOwnProperty","title":"Object.HasOwnProperty","description":"Summary\nReturns a boolean indicating whether the object has the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition  \nSyntax\nobj.hasOwnProperty(prop)\nParameters\n prop The name of the property to test.\n\nDescription\nEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.\nExamples\nExample: Using hasOwnProperty to test for a property's existence\nThe following example determines whether the o object contains a property named prop:\n\r\n          o = new Object();\no.prop = 'exists';\n\nfunction changeO() {\n  o.newprop = o.prop;\n  delete o.prop;\n}\n\no.hasOwnProperty('prop');   \/\/returns true\nchangeO();\no.hasOwnProperty('prop');   \/\/returns false\r\n        \nExample: Direct versus inherited properties\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\r\n          o = new Object();\no.prop = 'exists';\no.hasOwnProperty('prop');             \/\/ returns true\no.hasOwnProperty('toString');         \/\/ returns false\no.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r\n        \nExample: Iterating over the properties of an object\nThe following example shows how to iterate over the properties of an object without executing on inherit properties.\n\r\n          var buz = {\n    fog: 'stack'\n};\n\nfor (var name in buz) {\n    if (buz.hasOwnProperty(name)) {\n        alert(&quot;this is fog (&quot; + name + &quot;) for sure. Value: &quot; + buz[name]);\n    }\n    else {\n        alert(name); \/\/ toString or something else\n    }\n}\r\n        \nExample: Using hasOwnProperty to test for a property's existence\nThe following example determines whether the o object contains a property named prop:\n\r\n          o = new Object();\no.prop = 'exists';\n\nfunction changeO() {\n  o.newprop = o.prop;\n  delete o.prop;\n}\n\no.hasOwnProperty('prop');   \/\/returns true\nchangeO();\no.hasOwnProperty('prop');   \/\/returns false\r\n        \nExample: Direct versus inherited properties\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\r\n          o = new Object();\no.prop = 'exists';\no.hasOwnProperty('prop');             \/\/ returns true\no.hasOwnProperty('toString');         \/\/ returns false\no.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r\n        \nExample: Iterating over the properties of an object\nThe following example shows how to iterate over the properties of an object without executing on inherit properties.\n\r\n          var buz = {\n    fog: 'stack'\n};\n\nfor (var name in buz) {\n    if (buz.hasOwnProperty(name)) {\n        alert(&quot;this is fog (&quot; + name + &quot;) for sure. Value: &quot; + buz[name]);\n    }\n    else {\n        alert(name); \/\/ toString or something else\n    }\n}\r\n        \nSee also\nfor...in\nin\ninheritance\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/IsPrototypeOf","title":"Object.IsPrototypeOf","description":"Summary\nTests for an object in another object's prototype chain.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nprototype.isPrototypeOf(object)\nParameters\n prototype &nbsp; an object to be tested against each link in the prototype chain of the object&nbsp; argument\n\nNote:&nbsp;isPrototypeOf differs from instanceof operator. In the expression object instanceof AFunction, the object prototype chain is checked against AFunction.prototype, not against AFunction itself\n\n object the object whose prototype chain will be searched\n\nDescription\nisPrototypeOf allows you to check whether or not an object exists within another object's prototype chain.\nFor example, consider the following prototype chain:\nfunction Fee() {\n  \/\/ . . .\n}\n\nfunction Fi() {\n  \/\/ . . .\n}\nFi.prototype = new Fee();\n\nfunction Fo() {\n  \/\/ . . .\n}\nFo.prototype = new Fi();\n\nfunction Fum() {\n  \/\/ . . .\n}\nFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\nvar fum = new Fum();\n. . .\n\nif (Fi.prototype.isPrototypeOf(fum)) {\n  \/\/ do something safe\n}\n\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\nSee also\n instanceof getProtoypeOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupGetter","title":"Object.LookupGetter","description":"Summary\nReturn the function bound as a getter to the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None, but see getOwnPropertyDescriptor and getPrototypeOf.  \nSyntax\nobj.__lookupGetter__(sprop)\nParameters\n sprop a string containing the name of the property whose getter should be returned\n\nDescription\nIf a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. __lookupGetter__ can be used to obtain a reference to the getter function.\nIt is now possible to do this in a standardized way using getOwnPropertyDescriptor and getPrototypeOf.See also\n get __defineGetter__ __defineSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupSetter","title":"Object.LookupSetter","description":"Summary\nReturn the function bound as a setter to the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__lookupSetter__(sprop)\nParameters\n sprop a string containing the name of the property whose setter should be returned\n\nDescription\nIf a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property refers to the return value of that function. __lookupSetter__ can be used to obtain a reference to the setter function.\nSee also\n set __defineSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/NoSuchMethod","title":"Object.NoSuchMethod","description":"Summary\nExecutes a function when a non-existent method is called on an object.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__noSuchMethod__ = fun\nParameters\n fun a function that takes the form function (id, args) { .&nbsp;.&nbsp;. }  id the name of the non-existent method that was called args an array of the arguments passed to the method  \n\nDescription\nBy default, an attempt to call a method that doesn't exist on an object results in a TypeError being thrown. This behavior can be circumvented by defining a function at that object's __noSuchMethod__ member. The function takes two arguments, the first is the name of the method attempted and the second is an array of the arguments that were passed in the method call. The second argument is an actual array (that is, it inherits through the Array prototype chain) and not the array-like arguments object.\nIf this method cannot be called, either as if undefined by default, if deleted, or if manually set to a non-function, the JavaScript engine will revert to throwing TypeErrors.\nExample\n__noSuchMethod__ can be used to simulate multiple inheritance.\nAn example of code that implements a primitive form of multiple inheritance is shown below.\n\r\n          \/\/ Doesn't work with multiple inheritance objects as parents\n\nfunction noMethod(name, args) {\n  var parents=this.__parents_;\n  \n  \/\/ Go through all parents\n  \n  for (var i=0;i&lt;parents.length;i++) {\n    \/\/ If we find a function on the parent, we call it\n    if (typeof parents[i][name] ==&quot;function&quot;) {\n      return parents[i][name].apply(this, args);\n    }\n  }\n  \n  \/\/ If we get here, the method hasn't been found\n  \n  throw new TypeError;\n}\n\n\/\/ Used to add a parent for multiple inheritance\n\nfunction addParent(obj, parent) {\n  \/\/ If the object isn't initialized, initialize it\n  \n  if (!obj.__parents_) {\n    obj.__parents_=[];\n    obj.__noSuchMethod__=noMethod;\n  }\n  \n  \/\/ Add the parent\n  \n  obj.__parents_.push(parent);\n}\r\n        \nAn example of using this idea is shown below.\n\r\n          \/\/ Example base class 1\n\nfunction NamedThing(name){\n  this.name=name;\n}\n\nNamedThing.prototype = {\n  getName: function() {return this.name;},\n  setName: function(newName) {this.name=newName;}\n}\n\n\/\/Example base class 2\n\nfunction AgedThing(age){\n  this.age=age;\n}\n\nAgedThing.prototype = {\n  getAge: function(){return this.age;},\n  setAge: function(age){this.age=age;}\n}\n\n\/\/ Child class. inherits from NamedThing and AgedThing as well as defining address\n\nfunction Person(name, age, address){\n  addParent(this, NamedThing.prototype);\n  NamedThing.call(this, name);\n  addParent(this, AgedThing.prototype);\n  AgedThing.call(this, age);\n  this.address=address;\n}\n\nPerson.prototype = {\n  getAddr: function() {return this.address;},\n  setAddr: function(addr) {this.address=addr;}\n}\n\nvar bob=new Person(&quot;bob&quot;, 25, &quot;New York&quot;);\n\nconsole.log(&quot;getAge is &quot;+((&quot;getAge&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's age is: &quot;+bob.getAge());\nconsole.log(&quot;getName is &quot;+((&quot;getName&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's name is: &quot;+bob.getName());\nconsole.log(&quot;getAddr is &quot;+((&quot;getAddr&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's address is: &quot;+bob.getAddr());\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/PropertyIsEnumerable","title":"Object.PropertyIsEnumerable","description":"Summary\nReturns a Boolean indicating whether the specified property is enumerable.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition  \nSyntax\nobj.propertyIsEnumerable(prop)Parameters\n prop&nbsp; The name of the property to test.\n\nDescription\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\nNote: Starting in JavaScript 1.8.1 (in Firefox 3.6), propertyIsEnumerable(&quot;prototype&quot;) returns false instead of true; this makes the result compliant with ECMAScript 5.\nExamples\nExample: A basic use of propertyIsEnumerable\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\r\n          var o = {};\nvar a = [];\no.prop = 'is enumerable';\na[0] = 'is enumerable';\n\no.propertyIsEnumerable('prop');   \/\/ returns true\na.propertyIsEnumerable(0);        \/\/ returns true\r\n        \nExample: User-defined versus built-in objects\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\r\n          var a = ['is enumerable'];\n\na.propertyIsEnumerable(0);          \/\/ returns true\na.propertyIsEnumerable('length');   \/\/ returns false\n\nMath.propertyIsEnumerable('random');   \/\/ returns false\nthis.propertyIsEnumerable('Math');     \/\/ returns false\r\n        \nExample: Direct versus inherited properties\n\r\n          var a = [];\na.propertyIsEnumerable('constructor');         \/\/ returns false\n\nfunction firstConstructor()\n{\n  this.property = 'is not enumerable';\n}\nfirstConstructor.prototype.firstMethod = function () {};\n\nfunction secondConstructor()\n{\n  this.method = function method() { return 'is enumerable'; };\n}\n\nsecondConstructor.prototype = new firstConstructor;\nsecondConstructor.prototype.constructor = secondConstructor;\n\nvar o = new secondConstructor();\no.arbitraryProperty = 'is enumerable';\n\no.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true\no.propertyIsEnumerable('method');              \/\/ returns true\no.propertyIsEnumerable('property');            \/\/ returns false\n\no.property = 'is enumerable';\n\no.propertyIsEnumerable('property');            \/\/ returns true\n\n\/\/ These return false as they are on the prototype which \n\/\/ propertyIsEnumerable does not consider (even though the last two\n\/\/ are iteratable with for-in)\no.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6)\no.propertyIsEnumerable('constructor'); \/\/ returns false\no.propertyIsEnumerable('firstMethod'); \/\/ returns false\r\n        \nExample: A basic use of propertyIsEnumerable\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\r\n          var o = {};\nvar a = [];\no.prop = 'is enumerable';\na[0] = 'is enumerable';\n\no.propertyIsEnumerable('prop');   \/\/ returns true\na.propertyIsEnumerable(0);        \/\/ returns true\r\n        \nExample: User-defined versus built-in objects\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\r\n          var a = ['is enumerable'];\n\na.propertyIsEnumerable(0);          \/\/ returns true\na.propertyIsEnumerable('length');   \/\/ returns false\n\nMath.propertyIsEnumerable('random');   \/\/ returns false\nthis.propertyIsEnumerable('Math');     \/\/ returns false\r\n        \nExample: Direct versus inherited properties\n\r\n          var a = [];\na.propertyIsEnumerable('constructor');         \/\/ returns false\n\nfunction firstConstructor()\n{\n  this.property = 'is not enumerable';\n}\nfirstConstructor.prototype.firstMethod = function () {};\n\nfunction secondConstructor()\n{\n  this.method = function method() { return 'is enumerable'; };\n}\n\nsecondConstructor.prototype = new firstConstructor;\nsecondConstructor.prototype.constructor = secondConstructor;\n\nvar o = new secondConstructor();\no.arbitraryProperty = 'is enumerable';\n\no.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true\no.propertyIsEnumerable('method');              \/\/ returns true\no.propertyIsEnumerable('property');            \/\/ returns false\n\no.property = 'is enumerable';\n\no.propertyIsEnumerable('property');            \/\/ returns true\n\n\/\/ These return false as they are on the prototype which \n\/\/ propertyIsEnumerable does not consider (even though the last two\n\/\/ are iteratable with for-in)\no.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6)\no.propertyIsEnumerable('constructor'); \/\/ returns false\no.propertyIsEnumerable('firstMethod'); \/\/ returns false\r\n        \nSee also\nfor...in "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Unwatch","title":"Object.Unwatch","description":"Summary\nRemoves a watchpoint set with the watch() method.\n   Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none  \n\nSyntax\nunwatch(prop) \nParameters\n prop The name of a property of the object to stop watching.\n\nDescription\nThe JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman.\nBy default, this method is inherited by every object descended from Object.\nNote: The reason for unwatch() to take the property name prop as its only parameter is due to the &quot;single handler allowing&quot; behavior of the watch() method.Examples\nSee watch().\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Watch","title":"Object.Watch","description":"Summary\nWatches for a property to be assigned a value and runs a function when that occurs.\n   Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none  \n\nSyntax\nobject.watch(prop, handler) \nParameters\n prop The name of a property of the object on which you wish to monitor changes.\n\n handler A function to call when the specified property's value changes.\n\nDescription\nWarning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details.\nWatches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval).\nIf you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect.\nTo remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object.\nThe JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman.\nIn Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler.\nNote: Calling watch() on an object for a specific property overrides and previous handler attached for that property.\nExamples\nExample: Using watch and unwatch\n\r\n          var o = {p:1};\no.watch(&quot;p&quot;,\n  function (id, oldval, newval) {\n    console.log(&quot;o.&quot; + id + &quot; changed from &quot; + oldval + &quot; to &quot; + newval);\n    return newval;\n  });\n\no.p = 2;\no.p = 3;\ndelete o.p;\no.p = 4;\n\no.unwatch('p');\no.p = 5;\r\n        \nThis script displays the following:\no.p changed from 1 to 2\no.p changed from 2 to 3\no.p changed from undefined to 4\n\nExample: Using watch to validate an object's properties\nYou can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200.\n\r\n          Person = function(name,age) {\n  this.watch(&quot;age&quot;, Person.prototype._isValidAssignment);\n  this.watch(&quot;name&quot;, Person.prototype._isValidAssignment);\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return this.name + &quot;, &quot; + this.age;\n};\n\nPerson.prototype._isValidAssignment = function(id, oldval, newval) {\n  if (id === &quot;name&quot; &amp;&amp; (!newval || newval.length &gt; 30)) {\n    throw new RangeError(&quot;invalid name for &quot; + this);\n  }\n  if (id === &quot;age&quot;  &amp;&amp; (newval &lt; 0 || newval &gt; 200)) {\n    throw new RangeError(&quot;invalid age for &quot; + this);\n  }\n  return newval;\n}\n\nwill = new Person(&quot;Will&quot;, 29);\nprint(will);   \/\/ Will, 29\n\ntry {\n  will.name = &quot;&quot;;\n} catch (e) {\n  print(e);\n}\n\ntry {\n  will.age = -4;\n} catch (e) {\n  print(e);\n}\r\n        \nThis script displays the following:\nWill, 29\nRangeError: invalid name for Will, 29\nRangeError: invalid age for Will, 29\n\nExample: Using watch and unwatch\n\r\n          var o = {p:1};\no.watch(&quot;p&quot;,\n  function (id, oldval, newval) {\n    console.log(&quot;o.&quot; + id + &quot; changed from &quot; + oldval + &quot; to &quot; + newval);\n    return newval;\n  });\n\no.p = 2;\no.p = 3;\ndelete o.p;\no.p = 4;\n\no.unwatch('p');\no.p = 5;\r\n        \nThis script displays the following:\no.p changed from 1 to 2\no.p changed from 2 to 3\no.p changed from undefined to 4\n\nExample: Using watch to validate an object's properties\nYou can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200.\n\r\n          Person = function(name,age) {\n  this.watch(&quot;age&quot;, Person.prototype._isValidAssignment);\n  this.watch(&quot;name&quot;, Person.prototype._isValidAssignment);\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return this.name + &quot;, &quot; + this.age;\n};\n\nPerson.prototype._isValidAssignment = function(id, oldval, newval) {\n  if (id === &quot;name&quot; &amp;&amp; (!newval || newval.length &gt; 30)) {\n    throw new RangeError(&quot;invalid name for &quot; + this);\n  }\n  if (id === &quot;age&quot;  &amp;&amp; (newval &lt; 0 || newval &gt; 200)) {\n    throw new RangeError(&quot;invalid age for &quot; + this);\n  }\n  return newval;\n}\n\nwill = new Person(&quot;Will&quot;, 29);\nprint(will);   \/\/ Will, 29\n\ntry {\n  will.name = &quot;&quot;;\n} catch (e) {\n  print(e);\n}\n\ntry {\n  will.age = -4;\n} catch (e) {\n  print(e);\n}\r\n        \nThis script displays the following:\nWill, 29\nRangeError: invalid name for Will, 29\nRangeError: invalid age for Will, 29\n\nCompatibility\n This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work\n\nSee also\nunwatch()\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/prototype","title":"Boolean.prototype","description":"Summary\nRepresents the prototype for the Boolean constructor.\nDescription\nBoolean instances inherit from Boolean.prototype. You can use the constructor's prototype object to add properties or methods to all Boolean instances.\nProperties\n constructor Returns the function that created an instance's prototype. This is the Boolean function by default.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.\n\n toString Returns a string of either &quot;true&quot; or &quot;false&quot; depending upon the value of the object. Overrides the Object.prototype.toStringmethod.\n\n valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/constructor","title":"Boolean.constructor","description":" Summary \nReturns a reference to the Boolean function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toSource","title":"Boolean.toSource","description":"Summary\nReturns a string representing the source code of the object.\n   Method of Boolean     Implemented in JavaScript 1.3   ECMAScript Edition none  \n\n Syntax \nboolean.toSource()\n\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Boolean object, toSource returns the following string indicating that the source code is not available:\n\nfunction Boolean() {\n   [native code]\n}\n\n For instances of Boolean, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n See Also \nObject.toSource\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toString","title":"Boolean.toString","description":"Summary\nReturns a string representing the specified Boolean object.\n   Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nbool.toString() Parameters \nNone.\n\nDescription\nThe Boolean object overrides the toString method of the Object object; it does not inherit Object.toString. For Boolean objects, the toString method returns a string representation of the object.\nJavaScript calls the toString method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation.\nFor Boolean objects and values, the built-in toString method returns the string &quot;true&quot; or &quot;false&quot; depending on the value of the boolean object. In the following code, flag.toString returns &quot;true&quot;.\n\nvar flag = new Boolean(true)\nvar myVar = flag.toString()\n See Also \nObject.toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/valueOf","title":"Boolean.valueOf","description":"Summary\nReturns the primitive value of a Boolean object.\n   Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nbool.valueOf()\nParameters\nNone.\nDescription\nThe valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type.\nThis method is usually called internally by JavaScript and not explicitly in code.\nExamples\nExample: Using valueOf\n\nx = new Boolean();\nmyVar = x.valueOf()      \/\/assigns false to myVar\n\nExample: Using valueOf\n\nx = new Boolean();\nmyVar = x.valueOf()      \/\/assigns false to myVar\n\nSee Also\nObject.valueOf\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToLocaleString","title":"Object.ToLocaleString","description":" Summary \nReturns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n\n\n\nMethod of Object\n\n\nECMA Version:\nECMA-262 Edition 3\n\n\n Syntax \n\ntoLocaleString()\n\n\n Parameters \nNone.\n\n Description \nObject's toLocaleString returns the result of calling toString.\nThis function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.\n\n See also \ntoString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/length","title":"Array.length","description":"Summary\nAn unsigned, 32-bit integer that specifies the number of elements in an array.\n   Property of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Description \nThe value of the length property is an integer with a positive sign and a value less than 2 to the 32 power (232).\nYou can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements does not increase; for example, if you set length to 3 when it is currently 2, the array still contains only 2 elements.\n\n Examples \n Example: Iterating over an array \nIn the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.\n\n\nvar numbers = [1,2,3,4,5];\nfor (var i = 0; i &lt; numbers.length; i++) {\n  numbers[i] *= 2;\n}\n\/\/ numbers is now [2,4,6,8,10];\n\n Example: Shortening an array \nThe following example shortens the array statesUS to a length of 50 if the current length is greater than 50.\n\n\nif (statesUS.length &gt; 50) {\n   statesUS.length=50\n}\n\n\n\n Example: Iterating over an array \nIn the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.\n\n\nvar numbers = [1,2,3,4,5];\nfor (var i = 0; i &lt; numbers.length; i++) {\n  numbers[i] *= 2;\n}\n\/\/ numbers is now [2,4,6,8,10];\n\n Example: Shortening an array \nThe following example shortens the array statesUS to a length of 50 if the current length is greater than 50.\n\n\nif (statesUS.length &gt; 50) {\n   statesUS.length=50\n}\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join","title":"Array.join","description":"Summary\nJoins all elements of an array into a string.\n   Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\narray.join(separator)\nParameters\n separator&nbsp; Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.\n\nDescription\nThe string conversions of all array elements are joined into one string.\nExamples\nExample: Joining an array three different ways\nThe following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.\n\nvar a = new Array(&quot;Wind&quot;,&quot;Rain&quot;,&quot;Fire&quot;);\nvar myVar1 = a.join();      \/\/ assigns &quot;Wind,Rain,Fire&quot; to myVar1\nvar myVar2 = a.join(&quot;, &quot;);  \/\/ assigns &quot;Wind, Rain, Fire&quot; to myVar2\nvar myVar3 = a.join(&quot; + &quot;); \/\/ assigns &quot;Wind + Rain + Fire&quot; to myVar3\n\nExample: Joining an array three different ways\nThe following example creates an array, a, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.\n\nvar a = new Array(&quot;Wind&quot;,&quot;Rain&quot;,&quot;Fire&quot;);\nvar myVar1 = a.join();      \/\/ assigns &quot;Wind,Rain,Fire&quot; to myVar1\nvar myVar2 = a.join(&quot;, &quot;);  \/\/ assigns &quot;Wind, Rain, Fire&quot; to myVar2\nvar myVar3 = a.join(&quot; + &quot;); \/\/ assigns &quot;Wind + Rain + Fire&quot; to myVar3\n\nSee Also\n reverse String:split toString\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/slice","title":"Array.slice","description":"Summary\nReturns a one-level deep copy of a portion of an array.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n Syntax\narray.slice(begin[, end])\nParameters\n begin&nbsp; Zero-based index at which to begin extraction. As a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence.\n\n end&nbsp; Zero-based index at which to end extraction. slice extracts up to but not including end. slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3). As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence. If end is omitted, slice extracts to the end of the sequence.\n\nDescription\nslice does not alter the original array, but returns a new &quot;one level deep&quot; copy that contains copies of the elements sliced from the original array. Elements of the original array are copied into the new array as follows:\n For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.\n\n For strings and numbers (not String and Number objects), slice copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.\n\nIf a new element is added to either array, the other array is not affected.\nExamples\nExample: Using slice\nIn the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change.\n\n\/\/ Using slice, create newCar from myCar.\nvar myHonda = { color: &quot;red&quot;, wheels: 4, engine: { cylinders: 4, size: 2.2 } };\nvar myCar = [myHonda, 2, &quot;cherry condition&quot;, &quot;purchased 1997&quot;];\nvar newCar = myCar.slice(0, 2);\n\n\/\/ Print the values of myCar, newCar, and the color of myHonda\n\/\/  referenced from both arrays.\nprint(&quot;myCar = &quot; + myCar.toSource());\nprint(&quot;newCar = &quot; + newCar.toSource());\nprint(&quot;myCar[0].color = &quot; + myCar[0].color);\nprint(&quot;newCar[0].color = &quot; + newCar[0].color);\n\n\/\/ Change the color of myHonda.\nmyHonda.color = &quot;purple&quot;;\nprint(&quot;The new color of my Honda is &quot; + myHonda.color);\n\n\/\/ Print the color of myHonda referenced from both arrays.\nprint(&quot;myCar[0].color = &quot; + myCar[0].color);\nprint(&quot;newCar[0].color = &quot; + newCar[0].color);\n\nThis script writes:\n\nmyCar = [{color:&quot;red&quot;, wheels:4, engine:{cylinders:4, size:2.2}}, 2, &quot;cherry condition&quot;, &quot;purchased 1997&quot;]\nnewCar = [{color:&quot;red&quot;, wheels:4, engine:{cylinders:4, size:2.2}}, 2]\nmyCar[0].color = red \nnewCar[0].color = red\nThe new color of my Honda is purple\nmyCar[0].color = purple\nnewCar[0].color = purple\n\nExample: Using slice\nIn the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change.\n\n\/\/ Using slice, create newCar from myCar.\nvar myHonda = { color: &quot;red&quot;, wheels: 4, engine: { cylinders: 4, size: 2.2 } };\nvar myCar = [myHonda, 2, &quot;cherry condition&quot;, &quot;purchased 1997&quot;];\nvar newCar = myCar.slice(0, 2);\n\n\/\/ Print the values of myCar, newCar, and the color of myHonda\n\/\/  referenced from both arrays.\nprint(&quot;myCar = &quot; + myCar.toSource());\nprint(&quot;newCar = &quot; + newCar.toSource());\nprint(&quot;myCar[0].color = &quot; + myCar[0].color);\nprint(&quot;newCar[0].color = &quot; + newCar[0].color);\n\n\/\/ Change the color of myHonda.\nmyHonda.color = &quot;purple&quot;;\nprint(&quot;The new color of my Honda is &quot; + myHonda.color);\n\n\/\/ Print the color of myHonda referenced from both arrays.\nprint(&quot;myCar[0].color = &quot; + myCar[0].color);\nprint(&quot;newCar[0].color = &quot; + newCar[0].color);\n\nThis script writes:\n\nmyCar = [{color:&quot;red&quot;, wheels:4, engine:{cylinders:4, size:2.2}}, 2, &quot;cherry condition&quot;, &quot;purchased 1997&quot;]\nnewCar = [{color:&quot;red&quot;, wheels:4, engine:{cylinders:4, size:2.2}}, 2]\nmyCar[0].color = red \nnewCar[0].color = red\nThe new color of my Honda is purple\nmyCar[0].color = purple\nnewCar[0].color = purple\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf","title":"Array.indexOf","description":"Summary\nReturns the first index at which a given element can be found in the array, or -1 if it is not present.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.indexOf(searchElement[, fromIndex])\nParameters\n searchElement Element to locate in the array. fromIndex The index at which to begin the search. Defaults to 0, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from front to back. If the calculated index is less than 0, the whole array will be searched.\n\nDescription\nindexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator).\nCompatibility\nindexOf is a recent addition to the ECMA-262 standard; as such it may not be present in all browsers. You can work around this by inserting the following code at the beginning of your scripts, allowing use of indexOf in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object,&nbsp;TypeError,&nbsp;Number, Math.floor, Math.abs, and&nbsp;Math.max have their original value. &nbsp;\n\r\n          if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement \/*, fromIndex *\/ ) {\n        &quot;use strict&quot;;\n        if (this == null) {\n            throw new TypeError();\n        }\n        var t = Object(this);\n        var len = t.length &gt;&gt;&gt; 0;\n        if (len === 0) {\n            return -1;\n        }\n        var n = 0;\n        if (arguments.length &gt; 0) {\n            n = Number(arguments[1]);\n            if (n != n) { \/\/ shortcut for verifying if it's NaN\n                n = 0;\n            } else if (n != 0 &amp;&amp; n != Infinity &amp;&amp; n != -Infinity) {\n                n = (n &gt; 0 || -1) * Math.floor(Math.abs(n));\n            }\n        }\n        if (n &gt;= len) {\n            return -1;\n        }\n        var k = n &gt;= 0 ? n : Math.max(len - Math.abs(n), 0);\n        for (; k &lt; len; k++) {\n            if (k in t &amp;&amp; t[k] === searchElement) {\n                return k;\n            }\n        }\n        return -1;\n    }\n}\r\n        \nExamples\nExample: Using indexOf\nThe following example uses indexOf to locate values in an array.\n\r\n          var array = [2, 5, 9];\nvar index = array.indexOf(2);\n\/\/ index is 0\nindex = array.indexOf(7);\n\/\/ index is -1\r\n        \nExample: Finding all the occurrences of an element\nThe following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.\n \r\n          var indices = [];\nvar idx = array.indexOf(element);\nwhile (idx != -1) {\n    indices.push(idx);\n    idx = array.indexOf(element, idx + 1);\n}\r\n        \n\nExample: Using indexOf\nThe following example uses indexOf to locate values in an array.\n\r\n          var array = [2, 5, 9];\nvar index = array.indexOf(2);\n\/\/ index is 0\nindex = array.indexOf(7);\n\/\/ index is -1\r\n        \nExample: Finding all the occurrences of an element\nThe following example uses indexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.\n \r\n          var indices = [];\nvar idx = array.indexOf(element);\nwhile (idx != -1) {\n    indices.push(idx);\n    idx = array.indexOf(element, idx + 1);\n}\r\n        \n\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nSee also\nlastIndexOf\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/push","title":"Array.push","description":"Summary\nMutates an array by appending the given elements and returning the new length of the array.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\narray.push(element1, ..., elementN)\nParameters\n element1, ..., elementN The elements to add to the end of the array.\n\nReturns\nThe new length property of the object upon which the method was called.\nDescription\nThe push method is useful for easily appending values to an array.\npush is intentionally generic. This method can be called or applied to objects resembling arrays. The push method relies on a length property to determine where to start inserting the given values. If the length property cannot be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created.\nThe only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable.\nExamples\nExample: Adding elements to an array\nThe following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: &quot;soccer&quot;, &quot;baseball&quot;, &quot;football&quot; and &quot;swimming&quot;.\n\r\n          var sports = [&quot;soccer&quot;, &quot;baseball&quot;];\nsports.push(&quot;football&quot;, &quot;swimming&quot;);\r\n        \nExample: Adding elements to an array\nThe following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: &quot;soccer&quot;, &quot;baseball&quot;, &quot;football&quot; and &quot;swimming&quot;.\n\r\n          var sports = [&quot;soccer&quot;, &quot;baseball&quot;];\nsports.push(&quot;football&quot;, &quot;swimming&quot;);\r\n        \nSee Also\n pop shift unshift concat\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/splice","title":"Array.splice","description":"Summary\nChanges the content of an array, adding new elements while removing old elements.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\narray.splice(index , howMany[, element1[, ...[, elementN]]]) array.splice(index[, howMany[, element1[, ...[, elementN]]]])\nParameters\n index Index at which to start changing the array. If negative, will begin that many elements from the end.\n\n howMany An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.\n\n element1, ..., elementN The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.\n\nReturns\nAn array containing the removed elements. If only one element is removed, an array of one element is returned.\nDescription\nIf you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.\nBackward Compatibility\nJavaScript 1.2\nThe splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array.\nJavaScript 1.2\nThe splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array.\nExamples\nExample: Using splice\nThe following script illustrate the use of splice:\n\r\n          \/\/ assumes a print function is defined\nvar myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\nprint(&quot;myFish: &quot; + myFish);\n\nvar removed = myFish.splice(2, 0, &quot;drum&quot;);\nprint(&quot;After adding 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(3, 1);\nprint(&quot;After removing 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(2, 1, &quot;trumpet&quot;);\nprint(&quot;After replacing 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(0, 2, &quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;);\nprint(&quot;After replacing 2: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\r\n        \nThis script displays:\n\nmyFish: angel,clown,mandarin,surgeon\nAfter adding 1: angel,clown,drum,mandarin,surgeon\nremoved is: \nAfter removing 1: angel,clown,drum,surgeon\nremoved is: mandarin\nAfter replacing 1: angel,clown,trumpet,surgeon\nremoved is: drum\nAfter replacing 2: parrot,anemone,blue,trumpet,surgeon\nremoved is: angel,clown\n\nExample: Using splice\nThe following script illustrate the use of splice:\n\r\n          \/\/ assumes a print function is defined\nvar myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\nprint(&quot;myFish: &quot; + myFish);\n\nvar removed = myFish.splice(2, 0, &quot;drum&quot;);\nprint(&quot;After adding 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(3, 1);\nprint(&quot;After removing 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(2, 1, &quot;trumpet&quot;);\nprint(&quot;After replacing 1: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\n\nremoved = myFish.splice(0, 2, &quot;parrot&quot;, &quot;anemone&quot;, &quot;blue&quot;);\nprint(&quot;After replacing 2: &quot; + myFish);\nprint(&quot;removed is: &quot; + removed);\r\n        \nThis script displays:\n\nmyFish: angel,clown,mandarin,surgeon\nAfter adding 1: angel,clown,drum,mandarin,surgeon\nremoved is: \nAfter removing 1: angel,clown,drum,surgeon\nremoved is: mandarin\nAfter replacing 1: angel,clown,trumpet,surgeon\nremoved is: drum\nAfter replacing 2: parrot,anemone,blue,trumpet,surgeon\nremoved is: angel,clown\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray","title":"Array.isArray","description":"Summary\nReturns true if an object is an array, false if it is not.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nArray.isArray(obj)\nParameters\n obj The object to be checked\n\nDescription\nThis function is part of the ECMAScript 5 standard. See the&nbsp;Web Tech Blog for more details.\nExamples\n\r\n          \/\/ all following calls return true\nArray.isArray([]);\nArray.isArray([1]);\nArray.isArray( new Array() );\nArray.isArray( Array.prototype ); \/\/ Little known fact: Array.prototype itself is an array.\n\n\/\/ all following calls return false\nArray.isArray();\nArray.isArray({});\nArray.isArray(null);\nArray.isArray(undefined);\nArray.isArray(17);\nArray.isArray(&quot;Array&quot;);\nArray.isArray(true);\nArray.isArray(false);\r\n        \nCompatibility\nRunning the following code before any other code will create Array.isArray if it's not natively available. This relies on Object.prototype.toString being unchanged and call resolving to the native Function.prototype.call method.\n\r\n          if(!Array.isArray) {\n  Array.isArray = function (arg) {\n    return Object.prototype.toString.call(arg) == '[object Array]';\n  };\n}\r\n        \nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 10.5 5   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nSee also\n Bug&nbsp;510537 - ES5: Array.isArray \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype","title":"Array.prototype","description":"Summary\nRepresents the prototype for the Array constructor.\nDescription\nArray instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances.\nProperties\n constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch\n\nMethods\nMutator methods\nThese methods modify the array:\n pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.\n\nAccessor methods\n\nThese methods do not modify the array and return some representation of the array.\n concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf \nRequires JavaScript 1.6\n Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf \nRequires JavaScript 1.6\n Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\nIteration methods\nSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.\n filter \nRequires JavaScript 1.6\n Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach \nRequires JavaScript 1.6\n Calls a function for each element in the array. every \nRequires JavaScript 1.6\n Returns true if every element in this array satisfies the provided testing function. map \nRequires JavaScript 1.6\n Creates a new array with the results of calling a provided function on every element in this array. some \nRequires JavaScript 1.6\n Returns true if at least one element in this array satisfies the provided testing function. reduce \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n\nGeneric methods\nMany methods on the JavaScript Array object are designed to be generally applied to all objects which &quot;look like&quot; Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set. \n concat join pop push reverse shift slice sort splice toSource toString unshift\n\n\nIntroduced in JavaScript 1.6\n every filter forEach indexOf lastIndexOf map some\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n\nMutator methods\nThese methods modify the array:\n pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.\n\nAccessor methods\n\nThese methods do not modify the array and return some representation of the array.\n concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf \nRequires JavaScript 1.6\n Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf \nRequires JavaScript 1.6\n Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\nIteration methods\nSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.\n filter \nRequires JavaScript 1.6\n Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach \nRequires JavaScript 1.6\n Calls a function for each element in the array. every \nRequires JavaScript 1.6\n Returns true if every element in this array satisfies the provided testing function. map \nRequires JavaScript 1.6\n Creates a new array with the results of calling a provided function on every element in this array. some \nRequires JavaScript 1.6\n Returns true if at least one element in this array satisfies the provided testing function. reduce \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight \nRequires JavaScript 1.8\n Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n\nGeneric methods\nMany methods on the JavaScript Array object are designed to be generally applied to all objects which &quot;look like&quot; Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set. \n concat join pop push reverse shift slice sort splice toSource toString unshift\n\n\nIntroduced in JavaScript 1.6\n every filter forEach indexOf lastIndexOf map some\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n\nSee also\n Core JavaScript 1.5 Reference:Global Objects:Array Function.prototype\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/constructor","title":"Array.constructor","description":" Summary \nReturns a reference to the Array function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n\n\nProperty of Array\n\n\nImplemented in:\nJavaScript 1.1, NES 2.0\n\n\nECMA Version:\nECMA-262\n\n\n Description \nSee Object.constructor.\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToSource","title":"Object.ToSource","description":"Summary\nReturns a string representing the source code of the object.\n   Method of Object     Implemented in JavaScript 1.3   ECMAScript Edition None  \nSyntax\nobj.toSource()\nParameters\nNone.\nDescription\nThe toSource method returns the following values:\n For the built-in Object object, toSource returns the following string indicating that the source code is not available:\n\n\nfunction Object() {\n   [native code]\n}\n\n For instances of Object, toSource returns a string representing the source code.\n\nYou can call toSource while debugging to examine the contents of an object.\nIt is safe for objects to override the toSource method.&nbsp; For example:\n\nfunction Person(name) {\n    this.name = name;\n}\nPerson.prototype.toSource = function Person_toSource() {\n    return &quot;new Person(&quot; + uneval(this.name) + &quot;)&quot;;\n};\nalert(new Person(&quot;Joe&quot;).toSource());    \/\/ ---&gt;&nbsp;new Person(&quot;Joe&quot;)\n\nBuilt-in toSource methods\nEach core JavaScript type has its own toSource method. These objects are: \n\n toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.\n\n\n\nBuilt-in toSource methods\nEach core JavaScript type has its own toSource method. These objects are: \n\n toSource - Array Object method. toSource - Boolean Object method. toSource - Date Object method. toSource - Function Object method. toSource - Number Object method. toSource - Object Object method. toSource - RegExp Object method. toSource - String Object method.\n\n\n\nExamples\nExample: Using toSource\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\nfunction Dog(name, breed, color, sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;, &quot;Lab&quot;, &quot;chocolate&quot;, &quot;girl&quot;);\n\nCalling the toSource method of theDog displays the JavaScript source that defines the object:\n\ntheDog.toSource();\n\nreturns\n\n({name:&quot;Gabby&quot;, breed:&quot;Lab&quot;, color:&quot;chocolate&quot;, sex:&quot;girl&quot;})\n\nExample: Using toSource\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\nfunction Dog(name, breed, color, sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;, &quot;Lab&quot;, &quot;chocolate&quot;, &quot;girl&quot;);\n\nCalling the toSource method of theDog displays the JavaScript source that defines the object:\n\ntheDog.toSource();\n\nreturns\n\n({name:&quot;Gabby&quot;, breed:&quot;Lab&quot;, color:&quot;chocolate&quot;, sex:&quot;girl&quot;})\n\nSee Also\ntoString\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToString","title":"Object.ToString","description":"Summary\nReturns a string representing the object.\n   Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition  \n\nSyntax\nobject.toString()\nDescription\nEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns &quot;[object type]&quot;, where type is the object type. The following code illustrates this:\n\nvar o = new Object();\no.toString();           \/\/ returns [object Object]\n\nStarting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\nExamples\nOverriding the default toString method\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\r\n          function Dog(name,breed,color,sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;,&quot;Lab&quot;,&quot;chocolate&quot;,&quot;female&quot;);\r\n        \nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\ntheDog.toString(); \/\/returns [object Object]\n\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;property = value;&quot;.\n\r\n          Dog.prototype.toString = function dogToString() {\n  var ret = &quot;Dog &quot; + this.name + &quot; is a &quot; + this.sex + &quot; &quot; + this.color + &quot; &quot; + this.breed;\n  return ret;\n}\r\n        \nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\n\nUsing toString() to detect object class\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\r\n          var toString = Object.prototype.toString;\n\ntoString.call(new Date); \/\/ [object Date]\ntoString.call(new String); \/\/ [object String]\ntoString.call(Math); \/\/ [object Math]\n\n\/\/Since JavaScript 1.8.5\ntoString.call(undefined); \/\/ [object Undefined]\ntoString.call(null); \/\/ [object Null]\r\n        Overriding the default toString method\nYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.\nThe following code defines the Dog object type and creates theDog, an object of type Dog:\n\r\n          function Dog(name,breed,color,sex) {\n   this.name=name;\n   this.breed=breed;\n   this.color=color;\n   this.sex=sex;\n}\n\ntheDog = new Dog(&quot;Gabby&quot;,&quot;Lab&quot;,&quot;chocolate&quot;,&quot;female&quot;);\r\n        \nIf you call the toString() method on this custom object, it returns the default value inherited from Object:\n\ntheDog.toString(); \/\/returns [object Object]\n\nThe following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;property = value;&quot;.\n\r\n          Dog.prototype.toString = function dogToString() {\n  var ret = &quot;Dog &quot; + this.name + &quot; is a &quot; + this.sex + &quot; &quot; + this.color + &quot; &quot; + this.breed;\n  return ret;\n}\r\n        \nWith the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:\n\nDog Gabby is a female chocolate Lab\n\nUsing toString() to detect object class\ntoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.\n\r\n          var toString = Object.prototype.toString;\n\ntoString.call(new Date); \/\/ [object Date]\ntoString.call(new String); \/\/ [object String]\ntoString.call(Math); \/\/ [object Math]\n\n\/\/Since JavaScript 1.8.5\ntoString.call(undefined); \/\/ [object Undefined]\ntoString.call(null); \/\/ [object Null]\r\n        See Also\n toSource valueOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ValueOf","title":"Object.ValueOf","description":" Summary \nReturns the primitive value of the specified object\n\n   Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nvalueOf()\n\n\n Parameters \nNone.\n\n Description \nJavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\nBy default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:\n\n\n[object Object]\n\nYou can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.\n\n Overriding valueOf for custom objects \nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\nmyNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\nmyNumber.valueOf()\n\nNote\nObjects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only &quot;[object type]&quot;. But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects \nYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.\nSuppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:\n\n\nmyNumberType.prototype.valueOf = new Function(functionText)\n\nWith the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.\nAn object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n\nmyNumber.valueOf()\n\nNote\nObjects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only &quot;[object type]&quot;. But many objects do not convert to number, boolean, or function.See Also\n parseInt toString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/pop","title":"Array.pop","description":"Summary\nRemoves the last element from an array and returns that element.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\n array.pop() \nDescription\nThe pop method removes the last element from an array and returns that value to the caller.\npop is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.\nExample\nExample: Removing the last element of an array\nThe following code creates the myFish array containing four elements, then removes its last element.\n\nmyFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\npopped = myFish.pop();\n\nExample: Removing the last element of an array\nThe following code creates the myFish array containing four elements, then removes its last element.\n\nmyFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\npopped = myFish.pop();\n\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7)\n 1.0 5.5 &nbsp; &nbsp;      \n\n\n\n\nSee Also\npush, shift, unshift\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/reverse","title":"Array.reverse","description":"Summary\nReverses an array in place.&nbsp; The first array element becomes the last and the last becomes the first.\n   Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\narray.reverse()\nParameters\nNone.\nDescription\nThe reverse method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.\nExamples\nExample: Reversing the elements in an array\nThe following example creates an array myArray, containing three elements, then reverses the array.\n\nvar myArray = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];\nmyArray.reverse();\n\nThis code changes myArray so that:\n myArray[0] is &quot;three&quot; myArray[1] is &quot;two&quot; myArray[2] is &quot;one&quot;\n\nExample: Reversing the elements in an array\nThe following example creates an array myArray, containing three elements, then reverses the array.\n\nvar myArray = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];\nmyArray.reverse();\n\nThis code changes myArray so that:\n myArray[0] is &quot;three&quot; myArray[1] is &quot;two&quot; myArray[2] is &quot;one&quot;\n\nSee Also\njoin, sort\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/shift","title":"Array.shift","description":"Summary\nRemoves the first element from an array and returns that element. This method changes the length of the array.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \nSyntax\narray.shift()\nDescription\nThe shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value.\nshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.\nExamples\nExample: Removing an element from an array\nThe following code displays the myFish array before and after removing its first element. It also displays the removed element:\n\n\/\/ assumes a println function is defined\nvar myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\nprintln(&quot;myFish before: &quot; + myFish);\nvar shifted = myFish.shift();\nprintln(&quot;myFish after: &quot; + myFish);\nprintln(&quot;Removed this element: &quot; + shifted);\n\nThis example displays the following:\n\nmyFish before: angel,clown,mandarin,surgeon\nmyFish after: clown,mandarin,surgeon\nRemoved this element: angel\n\nExample: Removing an element from an array\nThe following code displays the myFish array before and after removing its first element. It also displays the removed element:\n\n\/\/ assumes a println function is defined\nvar myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;surgeon&quot;];\nprintln(&quot;myFish before: &quot; + myFish);\nvar shifted = myFish.shift();\nprintln(&quot;myFish after: &quot; + myFish);\nprintln(&quot;Removed this element: &quot; + shifted);\n\nThis example displays the following:\n\nmyFish before: angel,clown,mandarin,surgeon\nmyFish after: clown,mandarin,surgeon\nRemoved this element: angel\n\nSee also\n pop push unshift\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/sort","title":"Array.sort","description":"Summary\nSorts the elements of an array in place and returns the array.\nWorks across all browsers.\n   Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\narray.sort([compareFunction])\nParameters\n compareFunction&nbsp; Specifies a function that defines the sort order. If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.\n\nDescription\nIf compareFunction is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic (&quot;dictionary&quot; or &quot;telephone book,&quot; not numerical) order. For example, &quot;80&quot; comes before &quot;9&quot; in lexicographic order, but in a numeric sort 9 comes before 80.\nIf compareFunction is supplied, the array elements are sorted according to the return value of the compare function. If a and b are two elements being compared, then:\n If compareFunction(a, b) is less than 0, sort a to a lower index than b.\n\n If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\n\n If compareFunction(a, b) is greater than 0, sort b to a lower index than a.\n\n compareFunction(a, b) must always returns the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined\n\nSo, the compare function has the following form:\n\r\n          function compare(a, b)\n{\n  if (a is less than b by some ordering criterion)\n     return -1;\n  if (a is greater than b by the ordering criterion)\n     return 1;\n  \/\/ a must be equal to b\n  return 0;\n}\r\n        \nTo compare numbers instead of strings, the compare function can simply subtract b from a:\n\r\n          function compareNumbers(a, b)\n{\n  return a - b;\n}\r\n        \nSome implementations of JavaScript implement a stable sort: the index partial order of a and b does not change if a and b are equal. If a's index was less than b's before sorting, it will be after sorting, no matter how a and b move due to sorting.\nSort is stable in SpiderMonkey and all Mozilla-based browsers starting with Gecko 1.9 (see \n\nbug 224128\n).\nThe behavior of the sort method changed between JavaScript 1.1 and JavaScript 1.2.\nIn JavaScript 1.1, on some platforms, the sort method does not work. This method works on all platforms for JavaScript 1.2.\nIn JavaScript 1.2, this method no longer converts undefined elements to null; instead it sorts them to the high end of the array. For example, assume you have this script:\n\r\n          var a = [];\na[0] = &quot;Ant&quot;;\na[5] = &quot;Zebra&quot;;\n\n\/\/ assumes a print function is defined\nfunction writeArray(x)\n{\n  for (i = 0; i &lt; x.length; i++)\n  {\n    print(x[i]);\n    if (i &lt; x.length-1)\n      print(&quot;, &quot;);\n  }\n}\n\nwriteArray(a);\na.sort();\nprint(&quot;\\n&quot;);\nwriteArray(a);\r\n        \nIn JavaScript 1.1, JavaScript prints:\n\nant, null, null, null, null, zebra\nant, null, null, null, null, zebra\n\nIn JavaScript 1.2, JavaScript prints:\n\nant, undefined, undefined, undefined, undefined, zebra\nant, zebra, undefined, undefined, undefined, undefined\n\nThe sort()&nbsp;method can be conveniently used with closures:&nbsp;\n\r\n          var numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b) {\n    return a - b;\n});\nprint(numbers);\r\n        \nExamples\nExample: Creating, displaying, and sorting an array\nThe following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.\n\r\n          var stringArray = [&quot;Blue&quot;, &quot;Humpback&quot;, &quot;Beluga&quot;];\nvar numericStringArray = [&quot;80&quot;, &quot;9&quot;, &quot;700&quot;];\nvar numberArray = [40, 1, 5, 200];\nvar mixedNumericArray = [&quot;80&quot;, &quot;9&quot;, &quot;700&quot;, 40, 1, 5, 200];\n\nfunction compareNumbers(a, b)\n{\n  return a - b;\n}\n\n\/\/ again, assumes a print function is defined\nprint(&quot;stringArray: &quot; + stringArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted: &quot; + stringArray.sort() +&quot;\\n\\n&quot;);\n\nprint(&quot;numberArray: &quot; + numberArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + numberArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + numberArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\n\nprint(&quot;numericStringArray: &quot; + numericStringArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + numericStringArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + numericStringArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\n\nprint(&quot;mixedNumericArray: &quot; + mixedNumericArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + mixedNumericArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + mixedNumericArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\r\n        \nThis example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.\n\nstringArray: Blue,Humpback,Beluga\nSorted: Beluga,Blue,Humpback\n\nnumberArray: 40,1,5,200\nSorted without a compare function: 1,200,40,5\nSorted with compareNumbers: 1,5,40,200\n\nnumericStringArray: 80,9,700\nSorted without a compare function: 700,80,9\nSorted with compareNumbers: 9,80,700\n\nmixedNumericArray: 80,9,700,40,1,5,200\nSorted without a compare function: 1,200,40,5,700,80,9\nSorted with compareNumbers: 1,5,9,40,80,200,700\n\nExample: Creating, displaying, and sorting an array\nThe following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.\n\r\n          var stringArray = [&quot;Blue&quot;, &quot;Humpback&quot;, &quot;Beluga&quot;];\nvar numericStringArray = [&quot;80&quot;, &quot;9&quot;, &quot;700&quot;];\nvar numberArray = [40, 1, 5, 200];\nvar mixedNumericArray = [&quot;80&quot;, &quot;9&quot;, &quot;700&quot;, 40, 1, 5, 200];\n\nfunction compareNumbers(a, b)\n{\n  return a - b;\n}\n\n\/\/ again, assumes a print function is defined\nprint(&quot;stringArray: &quot; + stringArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted: &quot; + stringArray.sort() +&quot;\\n\\n&quot;);\n\nprint(&quot;numberArray: &quot; + numberArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + numberArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + numberArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\n\nprint(&quot;numericStringArray: &quot; + numericStringArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + numericStringArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + numericStringArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\n\nprint(&quot;mixedNumericArray: &quot; + mixedNumericArray.join() +&quot;\\n&quot;);\nprint(&quot;Sorted without a compare function: &quot; + mixedNumericArray.sort() +&quot;\\n&quot;);\nprint(&quot;Sorted with compareNumbers: &quot; + mixedNumericArray.sort(compareNumbers) +&quot;\\n\\n&quot;);\r\n        \nThis example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.\n\nstringArray: Blue,Humpback,Beluga\nSorted: Beluga,Blue,Humpback\n\nnumberArray: 40,1,5,200\nSorted without a compare function: 1,200,40,5\nSorted with compareNumbers: 1,5,40,200\n\nnumericStringArray: 80,9,700\nSorted without a compare function: 700,80,9\nSorted with compareNumbers: 9,80,700\n\nmixedNumericArray: 80,9,700,40,1,5,200\nSorted without a compare function: 1,200,40,5,700,80,9\nSorted with compareNumbers: 1,5,9,40,80,200,700\n\nSee Also\njoin, reverse\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toSource","title":"Array.toSource","description":" Summary \nReturns a string representing the source code of the array.\n\n   Method of Array     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \narray.toSource()\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Array object, toSource returns the following string indicating that the source code is not available:\n\nfunction Array() {\n    [native code]\n}\n\n For instances of Array, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an array.\n\n Examples \n Example: Examining the source code of an array \nTo examine the source code of an array:\n\nalpha = new Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nalpha.toSource()                    \/\/returns [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\n Example: Examining the source code of an array \nTo examine the source code of an array:\n\nalpha = new Array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\nalpha.toSource()                    \/\/returns [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\n See Also \ntoString\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/concat","title":"Array.concat","description":"Summary\nReturns a new array comprised of this array joined with other array(s) and\/or value(s).\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n Syntax\narray.concat(value1, value2, ..., valueN)\nParameters\n valueN&nbsp; Arrays and\/or values to concatenate to the resulting array.\n\nDescription\nconcat creates a new array consisting of the elements in the this object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).\nconcat does not alter this or any of the arrays provided as arguments but instead returns a &quot;one level deep&quot; copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:\n Object references (and not the actual object): concat copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.\n\n Strings and numbers (not String and Number objects): concat copies the values of strings and numbers into the new array.\n\nAny operation on the new array will have no effect on the original arrays, and vice versa.\nExamples\nExample: Concatenating two arrays\nThe following code concatenates two arrays:\n\r\n          var alpha = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nvar numeric = [1, 2, 3];\n\n\/\/ creates array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]; alpha and numeric are unchanged\nvar alphaNumeric = alpha.concat(numeric);\r\n        \nExample: Concatenating three arrays\nThe following code concatenates three arrays:\n\r\n          var num1 = [1, 2, 3];\nvar num2 = [4, 5, 6];\nvar num3 = [7, 8, 9];\n\n\/\/ creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged\nvar nums = num1.concat(num2, num3);\r\n        \nExample: Concatenating values to an array\nThe following code concatenates three values to an array:\n\r\n          var alpha = ['a', 'b', 'c'];\n\n\/\/ creates array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3], leaving alpha unchanged\nvar alphaNumeric = alpha.concat(1, [2, 3]);\r\n        \nExample: Concatenating two arrays\nThe following code concatenates two arrays:\n\r\n          var alpha = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nvar numeric = [1, 2, 3];\n\n\/\/ creates array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]; alpha and numeric are unchanged\nvar alphaNumeric = alpha.concat(numeric);\r\n        \nExample: Concatenating three arrays\nThe following code concatenates three arrays:\n\r\n          var num1 = [1, 2, 3];\nvar num2 = [4, 5, 6];\nvar num3 = [7, 8, 9];\n\n\/\/ creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged\nvar nums = num1.concat(num2, num3);\r\n        \nExample: Concatenating values to an array\nThe following code concatenates three values to an array:\n\r\n          var alpha = ['a', 'b', 'c'];\n\n\/\/ creates array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3], leaving alpha unchanged\nvar alphaNumeric = alpha.concat(1, [2, 3]);\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/unshift","title":"Array.unshift","description":"Summary\nAdds one or more elements to the beginning of an array and returns the new length of the array.\n   Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\narrayName.unshift(element1, ..., elementN) \nParameters\n element1, ..., elementN The elements to add to the front of the array.\n\nReturns\nThe new length property of the object upon which the method was called.\n\n\nDescription\nThe unshift method inserts the given values to the beginning of an array-like object.\nunshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.\nExamples\nExample: Adding elements to an array\nThe following code displays the myFish array before and after adding elements to it.\n\n\/\/ assumes a println function exists\nmyFish = [&quot;angel&quot;, &quot;clown&quot;];\nprintln(&quot;myFish before: &quot; + myFish);\nunshifted = myFish.unshift(&quot;drum&quot;, &quot;lion&quot;);\nprintln(&quot;myFish after: &quot; + myFish);\nprintln(&quot;New length: &quot; + unshifted);\n\nThis example displays the following:\n\nmyFish before: [&quot;angel&quot;, &quot;clown&quot;]\nmyFish after: [&quot;drum&quot;, &quot;lion&quot;, &quot;angel&quot;, &quot;clown&quot;]\nNew length: 4\n\nExample: Adding elements to an array\nThe following code displays the myFish array before and after adding elements to it.\n\n\/\/ assumes a println function exists\nmyFish = [&quot;angel&quot;, &quot;clown&quot;];\nprintln(&quot;myFish before: &quot; + myFish);\nunshifted = myFish.unshift(&quot;drum&quot;, &quot;lion&quot;);\nprintln(&quot;myFish after: &quot; + myFish);\nprintln(&quot;New length: &quot; + unshifted);\n\nThis example displays the following:\n\nmyFish before: [&quot;angel&quot;, &quot;clown&quot;]\nmyFish after: [&quot;drum&quot;, &quot;lion&quot;, &quot;angel&quot;, &quot;clown&quot;]\nNew length: 4\n\nSee Also\n pop push shift\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toString","title":"Array.toString","description":"Summary\nReturns a string representing the specified array and its elements.\n   Method of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\narray.toString()\nParameters\nNone.\n \nJavaScript 1.8.5 note Starting in&nbsp;JavaScript 1.8.5, and consistent with ECMAScript 5th edition semantics, the toString()&nbsp;method is generic and can be used with any object. If the object has a&nbsp;join()&nbsp;method, it will be called and that value will be returned. &nbsp;Otherwise Object.prototype.toString()&nbsp;will be called, and the resulting value will be returned.\n\nDescription\nThe Array object overrides the toString method of Object. For Array objects, the toString method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses toString to convert the array to a string.\nvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr'];\nvar myVar = monthNames.toString(); \/\/ assigns &quot;Jan,Feb,Mar,Apr&quot; to myVar.\n\nJavaScript calls the toString method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.\nSee also\ntoSource\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/lastIndexOf","title":"Array.lastIndexOf","description":"Summary\nReturns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.lastIndexOf(searchElement[, fromIndex])\nParameters\n searchElement Element to locate in the array. fromIndex The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.\n\nDescription\nlastIndexOf compares searchElement to elements of the Array using strict equality (the same method used by the ===, or triple-equals, operator).\nCompatibility\nlastIndexOf is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of lastIndexOf in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object,&nbsp;TypeError,&nbsp;Number, Math.floor, Math.abs, and Math.min have their original values. \n\r\n          if (!Array.prototype.lastIndexOf)\n{\n  Array.prototype.lastIndexOf = function(searchElement \/*, fromIndex*\/)\n  {\n    &quot;use strict&quot;;\n\n    if (this == null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (len === 0)\n      return -1;\n\n    var n = len;\n    if (arguments.length &gt; 1)\n    {\n      n = Number(arguments[1]);\n      if (n != n)\n        n = 0;\n      else if (n != 0 &amp;&amp; n != (1 \/ 0) &amp;&amp; n != -(1 \/ 0))\n        n = (n &gt; 0 || -1) * Math.floor(Math.abs(n));\n    }\n\n    var k = n &gt;= 0\n          ? Math.min(n, len - 1)\n          : len - Math.abs(n);\n\n    for (; k &gt;= 0; k--)\n    {\n      if (k in t &amp;&amp; t[k] === searchElement)\n        return k;\n    }\n    return -1;\n  };\n}\r\n        \nAgain, note that this implementation aims for absolute compatibility with lastIndexOf in Firefox and the SpiderMonkey JavaScript engine, including in several cases which are arguably edge cases. If you intend to use this in real-world applications, you may be able to calculate from with less complicated code if you ignore those cases.\nExamples\nExample: Using lastIndexOf\nThe following example uses lastIndexOf to locate values in an array.\nvar array = [2, 5, 9, 2];\nvar index = array.lastIndexOf(2);\n\/\/ index is 3\nindex = array.lastIndexOf(7);\n\/\/ index is -1\nindex = array.lastIndexOf(2, 3);\n\/\/ index is 3\nindex = array.lastIndexOf(2, 2);\n\/\/ index is 0\nindex = array.lastIndexOf(2, -2);\n\/\/ index is 0\nindex = array.lastIndexOf(2, -1);\n\/\/ index is 3\n\nExample: Finding all the occurrences of an element\nThe following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.\nvar indices = [];\nvar idx = array.lastIndexOf(element);\nwhile (idx&nbsp;!= -1)\n{\n  indices.push(idx);\n  idx = (idx &gt; 0&nbsp;? array.lastIndexOf(element, idx - 1)&nbsp;: -1);\n}\n\nNote that we have to handle the case idx == 0 separately here because the element will always be found regardless of the fromIndex parameter if it is the first element of the array. This is different from the indexOf method.\nExample: Using lastIndexOf\nThe following example uses lastIndexOf to locate values in an array.\nvar array = [2, 5, 9, 2];\nvar index = array.lastIndexOf(2);\n\/\/ index is 3\nindex = array.lastIndexOf(7);\n\/\/ index is -1\nindex = array.lastIndexOf(2, 3);\n\/\/ index is 3\nindex = array.lastIndexOf(2, 2);\n\/\/ index is 0\nindex = array.lastIndexOf(2, -2);\n\/\/ index is 0\nindex = array.lastIndexOf(2, -1);\n\/\/ index is 3\n\nExample: Finding all the occurrences of an element\nThe following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found.\nvar indices = [];\nvar idx = array.lastIndexOf(element);\nwhile (idx&nbsp;!= -1)\n{\n  indices.push(idx);\n  idx = (idx &gt; 0&nbsp;? array.lastIndexOf(element, idx - 1)&nbsp;: -1);\n}\n\nNote that we have to handle the case idx == 0 separately here because the element will always be found regardless of the fromIndex parameter if it is the first element of the array. This is different from the indexOf method.\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nSee also\nindexOf\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/filter","title":"Array.filter","description":"Summary\nCreates a new array with all elements that pass the test implemented by the provided function.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.filter(callback[, thisObject])\nParameters\n callback Function to test each element of the array. thisObject Object to use as this when executing callback.\n\nDescription\nfilter calls a provided callback function once for each element in an array, and constructs a new array of all the values for which callback returns a true value. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Array elements which do not pass the callback test are simply skipped, and are not included in the new array.\ncallback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.\nIf a thisObject parameter is provided to filter, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.\nfilter does not mutate the array on which it is called.\nThe range of elements processed by filter is set before the first invocation of callback. Elements which are appended to the array after the call to filter begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time filter visits them; elements that are deleted are not visited.\nCompatibility\nfilter is a JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of filter in ECMA-262 implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object&nbsp;and&nbsp;TypeError&nbsp;have their original values, that&nbsp;fun.call&nbsp;evaluates to the original value of&nbsp;Function.prototype.call, and that Array.prototype.push has its original value.&nbsp;\n\r\n          if (!Array.prototype.filter)\n{\n  Array.prototype.filter = function(fun \/*, thisp *\/)\n  {\n    &quot;use strict&quot;;\n\n    if (this == null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (typeof fun != &quot;function&quot;)\n      throw new TypeError();\n\n    var res = [];\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n      if (i in t)\n      {\n        var val = t[i]; \/\/ in case fun mutates this\n        if (fun.call(thisp, val, i, t))\n          res.push(val);\n      }\n    }\n\n    return res;\n  };\n}\r\n        \nExamples\nExample: Filtering out all small values\nThe following example uses filter to create a filtered array that has all elements with values less than 10 removed.\n\r\n          function isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n\/\/ filtered is [12, 130, 44]\r\n        \nExample: Filtering out all small values\nThe following example uses filter to create a filtered array that has all elements with values less than 10 removed.\n\r\n          function isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n\/\/ filtered is [12, 130, 44]\r\n        \nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/forEach","title":"Array.forEach","description":"Summary\nExecutes a provided function once per array element.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.forEach(callback[, thisArg])\nParameters\n callback Function to execute for each element. thisArg Object to use as this when executing callback.\n\nDescription\nforEach executes the provided function (callback) once for each element present in the array. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.\ncallback is invoked with three arguments:\n the element value the element index the array being traversed\n\nIf a thisArg parameter is provided to forEach, it will be used as the this value for each callback invocation as if callback.call(thisArg, element, index, array) was called. If thisArg is undefined or null, the this value within the function depends on whether the function is in strict mode or not (passed value if in strict mode, global object if in non-strict mode).\nThe range of elements processed by forEach is set before the first invocation of callback. Elements which are appended to the array after the call to forEach begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time forEach visits them; elements that are deleted are not visited.\nCompatibility\nforEach is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of forEach in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming Object and TypeError have their original values and that callback.call&nbsp;evaluates to the original value of Function.prototype.call. \n\r\n          \/\/ Production steps of ECMA-262, Edition 5, 15.4.4.18\n\/\/ Reference: http:\/\/es5.github.com\/#x15.4.4.18\nif ( !Array.prototype.forEach ) {\n\n  Array.prototype.forEach = function( callback, thisArg ) {\n\n    var T, k;\n\n    if ( this == null ) {\n      throw new TypeError( &quot; this is null or not defined&quot; );\n    }\n\n    \/\/ 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n    var O = Object(this);\n\n    \/\/ 2. Let lenValue be the result of calling the Get internal method of O with the argument &quot;length&quot;.\n    \/\/ 3. Let len be ToUint32(lenValue).\n    var len = O.length &gt;&gt;&gt; 0; \/\/ Hack to convert O.length to a UInt32\n\n    \/\/ 4. If IsCallable(callback) is false, throw a TypeError exception.\n    \/\/ See: http:\/\/es5.github.com\/#x9.11\n    if ( {}.toString.call(callback) != &quot;[object Function]&quot; ) {\n      throw new TypeError( callback + &quot; is not a function&quot; );\n    }\n\n    \/\/ 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    if ( thisArg ) {\n      T = thisArg;\n    }\n\n    \/\/ 6. Let k be 0\n    k = 0;\n\n    \/\/ 7. Repeat, while k &lt; len\n    while( k &lt; len ) {\n\n      var kValue;\n\n      \/\/ a. Let Pk be ToString(k).\n      \/\/   This is implicit for LHS operands of the in operator\n      \/\/ b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n      \/\/   This step can be combined with c\n      \/\/ c. If kPresent is true, then\n      if ( k in O ) {\n\n        \/\/ i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n        kValue = O[ k ];\n\n        \/\/ ii. Call the Call internal method of callback with T as the this value and\n        \/\/ argument list containing kValue, k, and O.\n        callback.call( T, kValue, k, O );\n      }\n      \/\/ d. Increase k by 1.\n      k++;\n    }\n    \/\/ 8. return undefined\n  };\n}\r\n        \nExamples\nPrinting the contents of an array\nThe following code logs a line for each element in an array:\n\r\n          function logArrayElements(element, index, array) {\n    console.log(&quot;a[&quot; + index + &quot;] = &quot; + element);\n}\n[2, 5, 9].forEach(logArrayElements);\n\/\/ logs:\n\/\/ a[0] = 2\n\/\/ a[1] = 5\n\/\/ a[2] = 9\r\n        \nAn object copy function\nThe following code creates a copy of a given object. There are different ways to create a copy of an object. This one is just one of them here to explain how Array.prototype.forEach works. It uses a couple of new ECMAScript 5 Object.* functions.\n\r\n          function copy(o){\n  var copy = Object.create( Object.getPrototypeOf(o) );\n  var propNames = Object.getOwnPropertyNames(o);\n  propNames.forEach(function(name){\n                      var desc = Object.getOwnPropertyDescriptor(o, name);\n                      Object.defineProperty(copy, name, desc);\n                    });\n  return copy;\n}\n\n\nvar o1 = {a:1, b:2};\nvar o2 = copy(o1); \/\/ o2 looks like o1 now\r\n        \nPrinting the contents of an array\nThe following code logs a line for each element in an array:\n\r\n          function logArrayElements(element, index, array) {\n    console.log(&quot;a[&quot; + index + &quot;] = &quot; + element);\n}\n[2, 5, 9].forEach(logArrayElements);\n\/\/ logs:\n\/\/ a[0] = 2\n\/\/ a[1] = 5\n\/\/ a[2] = 9\r\n        \nAn object copy function\nThe following code creates a copy of a given object. There are different ways to create a copy of an object. This one is just one of them here to explain how Array.prototype.forEach works. It uses a couple of new ECMAScript 5 Object.* functions.\n\r\n          function copy(o){\n  var copy = Object.create( Object.getPrototypeOf(o) );\n  var propNames = Object.getOwnPropertyNames(o);\n  propNames.forEach(function(name){\n                      var desc = Object.getOwnPropertyDescriptor(o, name);\n                      Object.defineProperty(copy, name, desc);\n                    });\n  return copy;\n}\n\n\nvar o1 = {a:1, b:2};\nvar o2 = copy(o1); \/\/ o2 looks like o1 now\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nBased on Kangax's compat tables\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/every","title":"Array.every","description":"Summary\nTests whether all elements in the array pass the test implemented by the provided function.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.every(callback[, thisObject])\nParameters\n callback Function to test for each element. thisObject Object to use as this when executing callback.\n\nDescription\nevery executes the provided callback function once for each element present in the array until it finds one where callback returns a false value. If such an element is found, the every method immediately returns false. Otherwise, if callback returned a true value for all elements, every will return true. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.\ncallback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.\nIf a thisObject parameter is provided to every, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.\nevery does not mutate the array on which it is called.\nThe range of elements processed by every is set before the first invocation of callback. Elements which are appended to the array after the call to every begins will not be visited by callback. If existing elements of the array are changed, their value as passed to callback will be the value at the time every visits them; elements that are deleted are not visited.\nevery acts like the &quot;for all&quot; quantifier in mathematics. In particular, for an empty array, it returns true. (It is vacuously true that all elements of the empty set satisfy any given condition.)\nCompatibility\nevery is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of every in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object&nbsp;and&nbsp;TypeError&nbsp;have their original values and that&nbsp;fun.call&nbsp;evaluates to the original value of&nbsp;Function.prototype.call. &nbsp;\n\r\n          if (!Array.prototype.every)\n{\n  Array.prototype.every = function(fun \/*, thisp *\/)\n  {\n    &quot;use strict&quot;;\n\n    if (this == null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (typeof fun != &quot;function&quot;)\n      throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n      if (i in t &amp;&amp; !fun.call(thisp, t[i], i, t))\n        return false;\n    }\n\n    return true;\n  };\n}\r\n        \nExamples\nExample: Testing size of all array elements\nThe following example tests whether all elements in the array are bigger than 10.\n\r\n          function isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n\/\/ passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n\/\/ passed is true\r\n        \nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nExample: Testing size of all array elements\nThe following example tests whether all elements in the array are bigger than 10.\n\r\n          function isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n\/\/ passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n\/\/ passed is true\r\n        \nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/map","title":"Array.map","description":"Summary\nCreates a new array with the results of calling a provided function on every element in this array.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.map(callback[, thisArg])\nParameters\n callback Function that produces an element of the new Array from an element of the current one. thisArg Object to use as this when executing callback.\n\nDescription\nmap calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.\ncallback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.\nIf a thisArg parameter is provided to map, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.\nmap does not mutate the array on which it is called.\nThe range of elements processed by map is set before the first invocation of callback. Elements which are appended to the array after the call to map begins will not be visited by callback. If existing elements of the array are changed, or deleted, their value as passed to callback will be the value at the time map visits them; elements that are deleted are not visited.\nCompatibility\nmap is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of map in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object,&nbsp;TypeError, and Array have their original values and that&nbsp;callback.call&nbsp;evaluates to the original value of&nbsp;Function.prototype.call. &nbsp;\n\r\n          \/\/ Production steps of ECMA-262, Edition 5, 15.4.4.19\n\/\/ Reference: http:\/\/es5.github.com\/#x15.4.4.19\nif (!Array.prototype.map) {\n  Array.prototype.map = function(callback, thisArg) {\n\n    var T, A, k;\n\n    if (this == null) {\n      throw new TypeError(&quot; this is null or not defined&quot;);\n    }\n\n    \/\/ 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n    var O = Object(this);\n\n    \/\/ 2. Let lenValue be the result of calling the Get internal method of O with the argument &quot;length&quot;.\n    \/\/ 3. Let len be ToUint32(lenValue).\n    var len = O.length &gt;&gt;&gt; 0;\n\n    \/\/ 4. If IsCallable(callback) is false, throw a TypeError exception.\n    \/\/ See: http:\/\/es5.github.com\/#x9.11\n    if ({}.toString.call(callback) != &quot;[object Function]&quot;) {\n      throw new TypeError(callback + &quot; is not a function&quot;);\n    }\n\n    \/\/ 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    if (thisArg) {\n      T = thisArg;\n    }\n\n    \/\/ 6. Let A be a new array created as if by the expression new Array(len) where Array is\n    \/\/ the standard built-in constructor with that name and len is the value of len.\n    A = new Array(len);\n\n    \/\/ 7. Let k be 0\n    k = 0;\n\n    \/\/ 8. Repeat, while k &lt; len\n    while(k &lt; len) {\n\n      var kValue, mappedValue;\n\n      \/\/ a. Let Pk be ToString(k).\n      \/\/   This is implicit for LHS operands of the in operator\n      \/\/ b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n      \/\/   This step can be combined with c\n      \/\/ c. If kPresent is true, then\n      if (k in O) {\n\n        \/\/ i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n        kValue = O[ k ];\n\n        \/\/ ii. Let mappedValue be the result of calling the Call internal method of callback\n        \/\/ with T as the this value and argument list containing kValue, k, and O.\n        mappedValue = callback.call(T, kValue, k, O);\n\n        \/\/ iii. Call the DefineOwnProperty internal method of A with arguments\n        \/\/ Pk, Property Descriptor {Value: mappedValue, Writable: true, Enumerable: true, Configurable: true},\n        \/\/ and false.\n\n        \/\/ In browsers that support Object.defineProperty, use the following:\n        \/\/ Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });\n\n        \/\/ For best browser support, use the following:\n        A[ k ] = mappedValue;\n      }\n      \/\/ d. Increase k by 1.\n      k++;\n    }\n\n    \/\/ 9. return A\n    return A;\n  };      \n}\r\n        \nExamples\nExample: Pluralizing the words (strings) in an array\nThe following code creates an array of &quot;plural&quot; forms of nouns from an array of their singular forms.\n\r\n          function fuzzyPlural(single) {\n  return single.replace(\/o\/g, 'e');\n}\n\nvar words = [&quot;foot&quot;, &quot;goose&quot;, &quot;moose&quot;];\nconsole.log(words.map(fuzzyPlural));\n\n\/\/ [&quot;feet&quot;, &quot;geese&quot;, &quot;meese&quot;]\r\n        \nExample: Mapping an array of numbers to an array of square roots\nThe following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.\n\r\n          var numbers = [1, 4, 9];\nvar roots = numbers.map(Math.sqrt);\n\/* roots is now [1, 2, 3], numbers is still [1, 4, 9] *\/\r\n        \nExample: using map generically\nThis example shows how to use map on a string to get an array of bytes in the ASCII encoding representing the character values:\n\r\n          var map = Array.prototype.map\nvar a = map.call(&quot;Hello World&quot;, function(x) { return x.charCodeAt(0); })\n\/\/ a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r\n        \nTricky use case\n(inspired by this blog post)\nIt is common to use the callback with one argument (the element being traversed). Some functions are also commonly used with one argument. These habits may lead to confusing behaviors.\n\r\n          \/\/ Consider:\n[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt);\n\/\/ While one could expect [1, 2, 3]\n\/\/ The actual result is [1, NaN, NaN]\n\n\/\/ parseInt is often used with one argument, but takes two. The second being the radix\n\/\/ To the callback function, Array.prototype.map passes 3 arguments: the element, the index, the array\n\/\/ The third argument is ignored by parseInt, but not the second one, hence the possible confusion.\n\/\/ See the blog post for more details\r\n        \nExample: Pluralizing the words (strings) in an array\nThe following code creates an array of &quot;plural&quot; forms of nouns from an array of their singular forms.\n\r\n          function fuzzyPlural(single) {\n  return single.replace(\/o\/g, 'e');\n}\n\nvar words = [&quot;foot&quot;, &quot;goose&quot;, &quot;moose&quot;];\nconsole.log(words.map(fuzzyPlural));\n\n\/\/ [&quot;feet&quot;, &quot;geese&quot;, &quot;meese&quot;]\r\n        \nExample: Mapping an array of numbers to an array of square roots\nThe following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.\n\r\n          var numbers = [1, 4, 9];\nvar roots = numbers.map(Math.sqrt);\n\/* roots is now [1, 2, 3], numbers is still [1, 4, 9] *\/\r\n        \nExample: using map generically\nThis example shows how to use map on a string to get an array of bytes in the ASCII encoding representing the character values:\n\r\n          var map = Array.prototype.map\nvar a = map.call(&quot;Hello World&quot;, function(x) { return x.charCodeAt(0); })\n\/\/ a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\r\n        \nTricky use case\n(inspired by this blog post)\nIt is common to use the callback with one argument (the element being traversed). Some functions are also commonly used with one argument. These habits may lead to confusing behaviors.\n\r\n          \/\/ Consider:\n[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt);\n\/\/ While one could expect [1, 2, 3]\n\/\/ The actual result is [1, NaN, NaN]\n\n\/\/ parseInt is often used with one argument, but takes two. The second being the radix\n\/\/ To the callback function, Array.prototype.map passes 3 arguments: the element, the index, the array\n\/\/ The third argument is ignored by parseInt, but not the second one, hence the possible confusion.\n\/\/ See the blog post for more details\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat tables\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/some","title":"Array.some","description":"Summary\nTests whether some element in the array passes the test implemented by the provided function.\n   Method of Array     Implemented in JavaScript 1.6   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.some(callback[, thisObject])\nParameters\n callback Function to test for each element. thisObject Object to use as this when executing callback.\n\nDescription\nsome executes the callback function once for each element present in the array until it finds one where callback returns a true value. If such an element is found, some immediately returns true. Otherwise, some returns false. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.\ncallback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.\nIf a thisObject parameter is provided to some, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.\nsome does not mutate the array on which it is called.\nThe range of elements processed by some is set before the first invocation of callback. Elements that are appended to the array after the call to some begins will not be visited by callback. If an existing, unvisited element of the array is changed by callback, its value passed to the visiting callback will be the value at the time that some visits that element's index; elements that are deleted are not visited.\nCompatibility\nsome is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of some in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object&nbsp;and&nbsp;TypeError&nbsp;have their original values and that&nbsp;fun.call&nbsp;evaluates to the original value of&nbsp;Function.prototype.call. &nbsp;\n&nbsp;\n&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text\/html; charset=utf-8&quot;\/&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text\/html; charset=utf-8&quot;\/&gt;\nif (!Array.prototype.some)\n{\n  Array.prototype.some = function(fun \/*, thisp *\/)\n  {\n    &quot;use strict&quot;;\n\n    if (this == null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (typeof fun&nbsp;!= &quot;function&quot;)\n      throw new TypeError();\n\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n      if (i in t &amp;&amp; fun.call(thisp, t[i], i, t))\n        return true;\n    }\n\n    return false;\n  };\n}\n\nExamples\nExample: Testing size of all array elements\nThe following example tests whether some element in the array is bigger than 10.\nfunction isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n\/\/ passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n\/\/ passed is true\n\nExample: Testing size of all array elements\nThe following example tests whether some element in the array is bigger than 10.\nfunction isBigEnough(element, index, array) {\n  return (element &gt;= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n\/\/ passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n\/\/ passed is true\n\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 (Supported) (Supported)   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/ReduceRight","title":"Array.ReduceRight","description":"Summary\nApply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n   Method of Array     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\narray.reduceRight(callback[, initialValue])\nParameters\n callback Function to execute on each value in the array. initialValue Object to use as the first argument to the first call of the callback.\n\nDescription\nreduceRight executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.\nThe call to the reduceRight callback would look something like this:\narray.reduceRight(function(previousValue, currentValue, index, array) {\n    \/\/ ...\n});\n\nThe first time the function is called, the previousValue and currentValue can be one of two values. If an initialValue was provided in the call to reduceRight, then previousValue will be equal to initialValue and currentValue will be equal to the last value in the array. If no initialValue was provided, then previousValue will be equal to the last value in the array and currentValue will be equal to the second-to-last value.\nSome example run-throughs of the function would look like this:\n\r\n          [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n    return previousValue + currentValue;\n});\n\n\/\/ First call\npreviousValue = 4, currentValue = 3, index = 3\n\n\/\/ Second call\npreviousValue = 7, currentValue = 2, index = 2\n\n\/\/ Third call\npreviousValue = 9, currentValue = 1, index = 1\n\n\/\/ Fourth call\npreviousValue = 10, currentValue = 0, index = 0\n\n\/\/ array is always the object [0,1,2,3,4] upon which reduceRight was called\n\n\/\/ Return Value: 10\r\n        \nAnd if you were to provide an initialValue, the result would look like this:\n\r\n          [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n    return previousValue + currentValue;\n}, 10);\n\n\/\/ First call\npreviousValue = 10, currentValue = 4, index = 4\n\n\/\/ Second call\npreviousValue = 14, currentValue = 3, index = 3\n\n\/\/ Third call\npreviousValue = 17, currentValue = 2, index = 2\n\n\/\/ Fourth call\npreviousValue = 19, currentValue = 1, index = 1\n\n\/\/ Fifth call\npreviousValue = 20, currentValue = 0, index = 0\n\n\/\/ array is always the object [0,1,2,3,4] upon which reduceRight was called\n\n\/\/ Return Value: 20\r\n        \nCompatibility\nreduceRight is a recent addition to the ECMA-262 standard; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of reduceRight in implementations which do not natively support it. This algorithm is exactly the one specified in ECMA-262, 5th edition, assuming&nbsp;Object&nbsp;and&nbsp;TypeError&nbsp;have their original value&nbsp;and that&nbsp;callbackfn.call&nbsp;evaluates to the original value of&nbsp;Function.prototype.call. &nbsp;\n\r\n          if (!Array.prototype.reduceRight)\n{\n  Array.prototype.reduceRight = function(callbackfn \/*, initialValue *\/)\n  {\n    &quot;use strict&quot;;\n\n    if (this == null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (typeof callbackfn != &quot;function&quot;)\n      throw new TypeError();\n\n    \/\/ no value to return if no initial value, empty array\n    if (len === 0 &amp;&amp; arguments.length === 1)\n      throw new TypeError();\n\n    var k = len - 1;\n    var accumulator;\n    if (arguments.length &gt;= 2)\n    {\n      accumulator = arguments[1];\n    }\n    else\n    {\n      do\n      {\n        if (k in this)\n        {\n          accumulator = this[k--];\n          break;\n        }\n\n        \/\/ if array contains no values, no initial value to return\n        if (--k &lt; 0)\n          throw new TypeError();\n      }\n      while (true);\n    }\n\n    while (k &gt;= 0)\n    {\n      if (k in t)\n        accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);\n      k--;\n    }\n\n    return accumulator;\n  };\n}\r\n        \nExamples\nExample: Sum up all values within an array\n\r\n          var total = [0, 1, 2, 3].reduceRight(function(a, b) {\n    return a + b;\n});\n\/\/ total == 6\r\n        \nExample: Flatten an array of arrays\n\r\n          var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {\n    return a.concat(b);\n}, []);\n\/\/ flattened is [4, 5, 2, 3, 0, 1]\r\n        \nExample: Sum up all values within an array\n\r\n          var total = [0, 1, 2, 3].reduceRight(function(a, b) {\n    return a + b;\n});\n\/\/ total == 6\r\n        \nExample: Flatten an array of arrays\n\r\n          var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {\n    return a.concat(b);\n}, []);\n\/\/ flattened is [4, 5, 2, 3, 0, 1]\r\n        \nSee Also\n reduce\n\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)\n (Supported) 9 10.5 4.0   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/Reduce","title":"Array.Reduce","description":"Syntax\narray.reduce(callback[, initialValue])\nParameters\n callback Function to execute on each value in the array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied. (See below.) currentValue The current element being processed in the array. index The index of the current element being processed in the array. array The array reduce was called upon.   initialValue Object to use as the first argument to the first call of the callback.\n\nDescription\nreduce executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.\nThe first time the callback is called, previousValue and currentValue can be one of two values. If initialValue is provided in the call to reduce, then previousValue will be equal to initialValue and currentValue will be equal to the first value in the array. If no initialValue was provided, then previousValue will be equal to the first value in the array and currentValue will be equal to the second.\nSuppose the following use of reduce occurred:\n\r\n          [0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){\n  return previousValue + currentValue;\n});\r\n        \nThe callback would be invoked four times, with the arguments and return values in each call being as follows:\n   &nbsp; previousValue  currentValue  index array return value     first call 0  1  1  [0,1,2,3,4] 1    second call 1  2  2  [0,1,2,3,4] 3    third call 3  3  3  [0,1,2,3,4] 6    fourth call 6  4  4  [0,1,2,3,4] 10   \n\nThe value returned by reduce would be that of the last callback invocation (10).\nIf you were to provide an initial value as the second argument to reduce, the result would look like this:\n\r\n          [0,1,2,3,4].reduce(function(previousValue, currentValue, index, array){\n  return previousValue + currentValue;\n}, 10);\r\n        \n   &nbsp; previousValue  currentValue  index array return value     first call 10  0  0  [0,1,2,3,4] 10    second call 10  1  1 [0,1,2,3,4] 11    third call 11  2  2  [0,1,2,3,4] 13    fourth call 13  3  3  [0,1,2,3,4] 16    fifth call 16 4 4 [0,1,2,3,4] 20   \n\nThe value returned by reduce this time would be, of course, 20.\nCompatibility\nArray.prototype.reduce is an ECMAScript 5 addition; as such it may not be present in other implementations of the standard. You can work around this by inserting the following code at the beginning of your scripts, allowing use of reduce in implementations which do not natively support it.\n\r\n          if ( !Array.prototype.reduce ) {\n  Array.prototype.reduce = function reduce(accumulator){\n        var i, l = this.length, curr;\n        \n        if(typeof accumulator !== &quot;function&quot;) \/\/ ES5 : &quot;If IsCallable(callbackfn) is false, throw a TypeError exception.&quot;\n          throw new TypeError(&quot;First argument is not callable&quot;);\n\n        if((l == 0 || l === null) &amp;&amp; (arguments.length &lt;= 1))\/\/ == on purpose to test 0 and false.\n          throw new TypeError(&quot;Array length is 0 and no second argument&quot;);\n        \n        if(arguments.length &lt;= 1){\n          curr = this[0]; \/\/ Increase i to start searching the secondly defined element in the array\n          i = 1; \/\/ start accumulating at the second element\n        }\n        else{\n          curr = arguments[1];\n        }\n        \n        for(i = i || 0 ; i &lt; l ; ++i){\n          if(i in this)\n            curr = accumulator.call(undefined, curr, this[i], i, this);\n        }\n        \n        return curr;\n      };\n  }\r\n        \nExamples\nExample: Sum up all values within an array\n\r\n          var total = [0, 1, 2, 3].reduce(function(a, b) {\n    return a + b;\n});\n\/\/ total == 6\r\n        \nExample: Flatten an array of arrays\n\r\n          var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n    return a.concat(b);\n});\n\/\/ flattened is [0, 1, 2, 3, 4, 5]\r\n        \nExample: Sum up all values within an array\n\r\n          var total = [0, 1, 2, 3].reduce(function(a, b) {\n    return a + b;\n});\n\/\/ total == 6\r\n        \nExample: Flatten an array of arrays\n\r\n          var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n    return a.concat(b);\n});\n\/\/ flattened is [0, 1, 2, 3, 4, 5]\r\n        \nSee Also\n reduceRight\n\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)\n (Supported) 9 10.5 4.0   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.0 (1.9)\n (Supported) 9 10.5 4.0   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays","title":"JavaScript typed arrays","description":"Buffers and views:&nbsp;typed array architecture\nTo achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into a buffer and a view. A buffer (implemented by the ArrayBuffer class) is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a view. A view provides a context&mdash;that is, a data type, starting offset, and number of elements&mdash;that turns the data into an actual typed array. Views are implemented by the ArrayBufferView class and its subclasses.\nArrayBufferArrayBufferViewDataViewFloat32ArrayFloat64ArrayInt16ArrayInt32ArrayInt8ArrayUint16ArrayUint32ArrayUint8Array\nUsing views with buffers\nLet's create a 16-byte buffer:\n\r\n          var buffer = new ArrayBuffer(16);\r\n        \nAt this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. We can confirm that it is indeed 16 bytes long, and that's about it:\n\r\n          if (buffer.byteLength == 16) {\n  alert(&quot;Yes, it's 16 bytes.&quot;);\n} else {\n  alert(&quot;Oh no, it's the wrong size!&quot;);\n}\r\n        \nBefore we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers:\n\r\n          var int32View = new Int32Array(buffer);\r\n        \nNow we can access the fields in the array just like a normal array:\n\r\n          for (var i=0; i&lt;int32View.length; i++) {\n  int32View[i] = i*2;\n}\r\n        \nThis fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values 0, 2, 4, and 6.\nMultiple views on the same data\nThings start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this:\n\r\n          var int16View = new Int16Array(buffer);\n\nfor (var i=0; i&lt;int16View.length; i++) {\n  console.log(&quot;Entry &quot; + i + &quot;: &quot; + int16View[i]);\n}\r\n        \nHere we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output 0, 0, 2, 0, 4, 0, 6, 0.\nYou can go a step farther, though. Consider this:\n\r\n          int16View[0] = 32;\nconsole.log(&quot;Entry 0 in the 32-bit array is now &quot; + int32View[0]);\r\n        \nThe output from this is &quot;Entry 0 in the 32-bit array is now 32&quot;. In other words, the two arrays are indeed simply views on the same data buffer, treating it as different formats. You can do this with any view types.\nMultiple views on the same data\nThings start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this:\n\r\n          var int16View = new Int16Array(buffer);\n\nfor (var i=0; i&lt;int16View.length; i++) {\n  console.log(&quot;Entry &quot; + i + &quot;: &quot; + int16View[i]);\n}\r\n        \nHere we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output 0, 0, 2, 0, 4, 0, 6, 0.\nYou can go a step farther, though. Consider this:\n\r\n          int16View[0] = 32;\nconsole.log(&quot;Entry 0 in the 32-bit array is now &quot; + int32View[0]);\r\n        \nThe output from this is &quot;Entry 0 in the 32-bit array is now 32&quot;. In other words, the two arrays are indeed simply views on the same data buffer, treating it as different formats. You can do this with any view types.\nWorking with complex data structures\nBy combining a single buffer with multiple views of different types, starting at different offsets into the buffer, you can interact with data objects containing multiple data types. This lets you, for example, interact with complex data structures from WebGL, data files, or C structures you need to use while using js-ctypes.\nConsider this C structure:\n\r\n          struct someStruct {\n  unsigned long id;\n  char username[16];\n  float amountDue;\n};\r\n        \nYou can access a buffer containing data in this format like this:\n\r\n          var buffer = new ArrayBuffer(24);\n\n\/\/ ... read the data into the buffer ...\n\nvar idView = new Uint32Array(buffer, 0, 1);\nvar usernameView = new Uint8Array(buffer, 4, 16);\nvar amountDueView = new Float32Array(buffer, 20, 1);\r\n        \nThen you can access, for example, the amount due with amountDueView[0].\nNote: The data structure alignment in a C structure is platform-dependent. Take precautions and considerations for these padding differences.\nCompatibility\nTyped arrays are available in WebKit as well. Chrome 7 includes support for ArrayBuffer, Float32Array, Int16Array, and Uint8Array. Chrome 9 adds support for DataView objects.\nSpecification\n Typed Arrays\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/prototype","title":"Function.prototype","description":"Summary\nRepresents the Function prototype object. \nDescription\nFunction objects inherit from Function.prototype. Modifications to the Function.prototype object are propagated to all Function instances.\nProperties\n arguments\n\nDeprecated\n\n An array corresponding to the arguments passed to a function. This is deprecated as property of Function, use the arguments object available within the function instead.\n\n arity\n\nObsolete since JavaScript 1.8.6 Specifies the number of arguments expected by the function. Use the length property instead.\n\n caller Non-standard      Specifies the function that invoked the currently executing function.\n\n constructor Specifies the function that creates an object's prototype.\n\n length Specifies the number of arguments expected by the function.\n\n name Non-standard      The name of the function.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\nMethods\n apply Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.\n\n bind&nbsp;\nRequires JavaScript 1.8.5\n Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.\n\n call Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are. isGenerator \nRequires JavaScript 1.8.6\n Returns true if the function is a generator; otherwise returns false.\n\n toSource&nbsp;Non-standard      Returns a string representing the source code of the function. Overrides the Object.toSource method.\n\n toString Returns a string representing the source code of the function. Overrides the Object.toString method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arguments","title":"Function.arguments","description":" Summary \nAn array-like object corresponding to the arguments passed to a function.\n\nDescription\nUse the arguments object available within functions instead of Function.arguments. Notes \nIn the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function.\n\n Example \nfunction f(n) { g(n-1) }\nfunction g(n) {\n  print(&quot;before: &quot; + g.arguments[0]);\n  if(n&gt;0)\n    f(n);\n  print(&quot;after: &quot; + g.arguments[0]);\n}\nf(2)\n\noutputs:\n\nbefore: 1\nbefore: 0\nafter: 0\nafter: 1\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arity","title":"Function.arity","description":"Summary\nSpecifies the number of arguments expected by the function.\n   Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None  \n\nDescription\nThe arity property no longer exists and has been replaced by the Function.prototype.length property.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/length","title":"Function.length","description":"Summary\nSpecifies the number of arguments expected by the function.\n   Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nlength is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. By contrast, arguments.length is local to a function and provides the number of arguments actually passed to the function.\nExample\n\r\n          console.log((function () {}).length);  \/* 0 *\/\nconsole.log((function (a) {}).length); \/* 1 *\/\nconsole.log((function (a, b) {}).length); \/* 2 etc. *\/\r\n        \n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/constructor","title":"Function.constructor","description":" Summary \nReturns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/caller","title":"Function.caller","description":"Summary\nReturns the function that invoked the specified function.\nThis property is not part of ECMA-262 Edition 3 standard. It is implemented at least in SpiderMonkey (the JavaScript engine used in Mozilla) (see \n\nbug 65683\n), V8 (the JavaScript engine used in Chrome) and JScript.\n   Property of Function     Implemented in JavaScript 1.5   ECMAScript Edition none  \n\nDescription\nIf the function f was invoked by the top level code, the value of f.caller is null, otherwise it's the function that called f\nThis property replaces deprecated arguments.caller.\nNotes\nNote that in case of recursion, you can't reconstruct the call stack using this property. Consider:\n\nfunction f(n) { g(n-1) }\nfunction g(n) { if(n&gt;0) f(n); else stop() }\nf(2)\n\nAt the moment stop() is called the call stack will be:\n\nf(2) -&gt; g(1) -&gt; f(1) -&gt; g(0) -&gt; stop()\n\nThe following is true:\n\nstop.caller === g &amp;&amp; f.caller === g &amp;&amp; g.caller === f\n\nso if you tried to get the stack trace in the stop() function like this:\n\nvar f = stop;\nvar stack = &quot;Stack trace:&quot;;\nwhile (f) {\n  stack += &quot;\\n&quot; + f.name;\n  f = f.caller;\n}\n\nthe loop would never stop.\nThe special property __caller__, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.\nExamples\nExample: Checking the value of a function's caller property\nThe following code checks the value a function's caller property.\n\nfunction myFunc() {\n   if (myFunc.caller == null) {\n      return (&quot;The function was called from the top!&quot;);\n   } else\n      return (&quot;This function's caller was &quot; + myFunc.caller);\n}\n\n&nbsp;\nExample: Checking the value of a function's caller property\nThe following code checks the value a function's caller property.\n\nfunction myFunc() {\n   if (myFunc.caller == null) {\n      return (&quot;The function was called from the top!&quot;);\n   } else\n      return (&quot;This function's caller was &quot; + myFunc.caller);\n}\n\n&nbsp;\nBrowser Support\nFunction.caller is currently supported by all major browsers:&nbsp;Firefox, Safari, Chrome, Opera and IE. &nbsp;Test page with results.\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/name","title":"Function.name","description":"Summary\nThe name of the function.\n   Property of Function     Implemented in JavaScript ?   ECMAScript Edition None  \n\nDescription\nThe name property returns the name of a function, or an empty string for anonymous functions:\nfunction doSomething() {}\nalert(doSomething.name); \/\/ alerts &quot;doSomething&quot;\n\nFunctions created with the syntax new Function(...) or just Function(...) have their name property set to &quot;anonymous&quot; on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer.\nNote that in these examples anonymous functions are created, so name returns an empty string:\nvar f = function() { };\nvar object = {\n  someMethod: function() {}\n};\n\nalert(f.name == &quot;&quot;); \/\/ true\nalert(object.someMethod.name == &quot;&quot;); \/\/ also true\n\nYou can define a function with a name in a function expression:\nvar object = {\n  someMethod: function object_someMethod() {}\n};\nalert(object.someMethod.name); \/\/ alerts &quot;object_someMethod&quot;\n\ntry { object_someMethod } catch(e) { alert(e); }\n\/\/ ReferenceError: object_someMethod is not defined\n\nYou cannot change the name of a function, this property is read-only:\nvar object = {\n  \/\/ anonymous\n  someMethod: function(){}\n};\nobject.someMethod.name = &quot;someMethod&quot;;\nalert(object.someMethod.name); \/\/ empty string, someMethod is anonymous\n\nExamples\nYou can use obj.constructor.name to check the &quot;class&quot; of an object:\nfunction a()\n{\n}\n\nvar b = new a();\nalert(b.constructor.name); \/\/Alerts &quot;a&quot;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/bind","title":"Function.bind","description":"Summary\nCreates a new function that, when called, itself calls this function in the context of the provided this value, with a given sequence of arguments preceding any provided when the new function was called.\n   Method of Function     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\nParameters\n thisArg The value to be passed as the this parameter to the target function when the bound function is called. &nbsp;The value is ignored if the bound function is constructed using the new operator. arg1, arg2, ... Arguments to prepend to arguments provided to the bound function when invoking the target function.\n\nDescription\nThe bind function creates a new function (a bound function) with the same function body (internal Call attribute in ECMAScript 5 terms) as the function it is being called on (the bound function's target function) with the this value bound to the first argument of bind, which cannot be overridden. bind also accepts leading default arguments to provide to the target function when the bound function is called. &nbsp;A bound function may also be constructed using the new operator: doing so acts as though the target function had instead been constructed. &nbsp;The provided this value is ignored, while prepended arguments are provided to the emulated function.\nCompatibility\nThe bind function is a recent addition to ECMA-262, 5th edition; as such it may not be present in all browsers. You can partially work around this by inserting the following code at the beginning of your scripts, allowing use of much of the functionality of bind in implementations that do not natively support it.\n\r\n          if (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== &quot;function&quot;) {\n      \/\/ closest thing possible to the ECMAScript 5 internal IsCallable function\n      throw new TypeError(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || window,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\r\n        \nSome of the many differences (there may well be others, as this list does not seriously attempt to be exhaustive) between this algorithm and the specified algorithm are:\n The partial implementation relies Array.prototype.slice, Array.prototype.concat, Function.prototype.call and Function.prototype.apply, built-in methods to have their original values. The partial implementation creates functions that do not have immutable &quot;poison pill&quot; caller and arguments properties that throw a TypeError upon get, set, or deletion. (This could be added if the implementation supports Object.defineProperty, or partially implemented [without throw-on-delete behavior] if the implementation supports the __defineGetter__ and __defineSetter__ extensions.) The partial implementation creates functions that have a prototype property. (Proper bound functions have none.) The partial implementation creates bound functions whose length property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.\n\nIf you choose to use this partial implementation, you must not rely on those cases where behavior deviates from ECMA-262, 5th edition! With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when bind is widely implemented according to the specification.\nExamples\nCreating a bound function\nThe simplest use of bind is to make a function that, no matter how it is called, is called with a particular this value. &nbsp;A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). &nbsp;Without special care, however, the original object is usually lost. &nbsp;Creating a bound function from the function, using the original object, neatly solves this problem:\n\r\n          var x = 9; \nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nmodule.getX(); \/\/ 81\n\nvar getX = module.getX;\ngetX(); \/\/ 9, because in this case, &quot;this&quot; refers to the global object\n\n\/\/ create a new function with 'this' bound to module\nvar boundGetX = getX.bind(module);\nboundGetX(); \/\/ 81\r\n        \nCurrying\nThe next simplest use of bind is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.\n\r\n          function list() {\n  return Array.prototype.slice.call(arguments);\n}\n\nvar list1 = list(1, 2, 3); \/\/ [1, 2, 3]\n\n\/\/  Create a function with a preset leading argument\nvar leadingZeroList = list.bind(undefined, 37);\n\nvar list2 = leadingZeroList(); \/\/ [37]\nvar list3 = leadingZeroList(1, 2, 3); \/\/ [37, 1, 2, 3]\r\n        \nBound functions used as constructors\nBound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call:\n\r\n          function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() { \n  return this.x + &quot;,&quot; + this.y; \n};\n\nvar p = new Point(1, 2);\np.toString(); \/\/ &quot;1,2&quot;\n\n\nvar emptyObj = {};\nvar YAxisPoint = Point.bind(emptyObj, 0 \/* x *\/);\n\nvar axisPoint = new YAxisPoint(5);\naxisPoint.toString(); \/\/  &quot;0,5&quot;\n\naxisPoint instanceof Point; \/\/ true\naxisPoint instanceof YAxisPoint; \/\/ true\nnew Point(17, 42) instanceof YAxisPoint; \/\/ false with native bind \/\/ true, when using the above polyfill\r\n        \nNote that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new. If you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction.\n\r\n          \/\/ Example can be run directly in your JavaScript console\n\/\/ ...continuing from above\n\n\/\/ Can still be called as a normal function (although usually this is undesired)\nYAxisPoint(13);\n\nemptyObj.x + &quot;,&quot; + emptyObj.y;\n\/\/ &gt;  &quot;0,13&quot;\r\n        \nCreating Shortcuts\n bind&nbsp;is also helpful in cases where you want to create a shortcut to a function which requires a specific this value. Take&nbsp;Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this: \nvar slice = Array.prototype.slice;\n\n\/\/ ...\n\nslice.call(arguments); With&nbsp;bind, this can be simplified to the following. slice will be a bound function to the .call function of Function.prototype, with the this value set to the .slice function of Array.prototype. This means that additional .call calls can be eliminated: \nvar slice = Function.prototype.call.bind(Array.prototype.slice);\n\n\/\/ ...\n\nslice(arguments);\n\nCreating a bound function\nThe simplest use of bind is to make a function that, no matter how it is called, is called with a particular this value. &nbsp;A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its this (e.g. by using that method in callback-based code). &nbsp;Without special care, however, the original object is usually lost. &nbsp;Creating a bound function from the function, using the original object, neatly solves this problem:\n\r\n          var x = 9; \nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nmodule.getX(); \/\/ 81\n\nvar getX = module.getX;\ngetX(); \/\/ 9, because in this case, &quot;this&quot; refers to the global object\n\n\/\/ create a new function with 'this' bound to module\nvar boundGetX = getX.bind(module);\nboundGetX(); \/\/ 81\r\n        \nCurrying\nThe next simplest use of bind is to make a function with pre-specified initial arguments. These arguments (if any) follow the provided this value and are then inserted at the start of the arguments passed to the target function, followed by the arguments passed to the bound function, whenever the bound function is called.\n\r\n          function list() {\n  return Array.prototype.slice.call(arguments);\n}\n\nvar list1 = list(1, 2, 3); \/\/ [1, 2, 3]\n\n\/\/  Create a function with a preset leading argument\nvar leadingZeroList = list.bind(undefined, 37);\n\nvar list2 = leadingZeroList(); \/\/ [37]\nvar list3 = leadingZeroList(1, 2, 3); \/\/ [37, 1, 2, 3]\r\n        \nBound functions used as constructors\nBound functions are automatically suitable for use with the new operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided this is ignored. However, provided arguments are still prepended to the constructor call:\n\r\n          function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() { \n  return this.x + &quot;,&quot; + this.y; \n};\n\nvar p = new Point(1, 2);\np.toString(); \/\/ &quot;1,2&quot;\n\n\nvar emptyObj = {};\nvar YAxisPoint = Point.bind(emptyObj, 0 \/* x *\/);\n\nvar axisPoint = new YAxisPoint(5);\naxisPoint.toString(); \/\/  &quot;0,5&quot;\n\naxisPoint instanceof Point; \/\/ true\naxisPoint instanceof YAxisPoint; \/\/ true\nnew Point(17, 42) instanceof YAxisPoint; \/\/ false with native bind \/\/ true, when using the above polyfill\r\n        \nNote that you need do nothing special to create a bound function for use with new. The corollary is that you need do nothing special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using new. If you wish to support use of a bound function only using new, or only by calling it, the target function must enforce that restriction.\n\r\n          \/\/ Example can be run directly in your JavaScript console\n\/\/ ...continuing from above\n\n\/\/ Can still be called as a normal function (although usually this is undesired)\nYAxisPoint(13);\n\nemptyObj.x + &quot;,&quot; + emptyObj.y;\n\/\/ &gt;  &quot;0,13&quot;\r\n        \nCreating Shortcuts\n bind&nbsp;is also helpful in cases where you want to create a shortcut to a function which requires a specific this value. Take&nbsp;Array.prototype.slice, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this: \nvar slice = Array.prototype.slice;\n\n\/\/ ...\n\nslice.call(arguments); With&nbsp;bind, this can be simplified to the following. slice will be a bound function to the .call function of Function.prototype, with the this value set to the .slice function of Array.prototype. This means that additional .call calls can be eliminated: \nvar slice = Function.prototype.call.bind(Array.prototype.slice);\n\n\/\/ ...\n\nslice(arguments);\n\nSupplemental\nOne interesting wrinkle of bound functions working &quot;as expected&quot; with the new operator is that it is now possible to implement what one might call &quot;Function.prototype.construct&quot;, an analog to Function.prototype.apply that takes an array of values as its sole argument,&nbsp;constructing this function with the provided arguments using the new operator:\n\r\n          \/\/ Function.prototype.construct will work with the Function.prototype.bind defined above\n\nif (!Function.prototype.construct) { \n  Function.prototype.construct = function(aArgs) {\n\n    if (aArgs.constructor !== Array)\n      throw new TypeError(&quot;second argument to Function.prototype.construct must be an array&quot;);\n\n    var aBoundArgs = Array.prototype.concat.apply([null], aArgs), \n        fBound = this.bind.apply(this, aBoundArgs);\n        \n    return new fBound();\n\n  };\n}\n\n\/\/ Now consider the string &quot;2011-7-16 19:35:46&quot;. Without an analog of the Function.apply method for constructors,\n\/\/ you would run a lot of steps in order to construct a Date object from it:\n\nvar aDateArgs = &quot;2011-7-16 19:35:46&quot;.split(\/[- :]\/),\n    oMyDate1 = new Date(aDateArgs[0], aDateArgs[1], aDateArgs[2], aDateArgs[3], aDateArgs[4], aDateArgs[5]);\nalert(oMyDate1.toLocaleString());\n\n\n\/\/ With the Function.construct method we could do the same thing with a single step:\nvar oMyDate2 = Date.construct(&quot;2011-7-16 19:35:46&quot;.split(\/[- :]\/));\nalert(oMyDate2.toLocaleString());\n\n\/\/ Here is another example:\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function() { \n  return this.x + &quot;,&quot; + this.y; \n};\n\nalert(Point.construct([2, 4]).toString()); \/\/ &quot;2,4&quot;\r\n        \nBut note well: the efficiency of constructing a new function every time you wish to construct an object by invoking a bound function via new with a variable number of arguments is questionable. Your code will be faster and more efficient if you use Function.prototype.apply instead, with normal call syntax rather than using new operator-based syntax.\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 7 9 11.60 --   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nBased on Kangax's compat tables.\nSee also\n Function.prototype.apply Function.prototype.call\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/apply","title":"Function.apply","description":"Summary\nCalls a function with a given this value and arguments provided as an array.\nNOTE:&nbsp;While the syntax of this function is almost identical to that of&nbsp;call(), the fundamental difference is that&nbsp;call()&nbsp;accepts an argument list, while&nbsp;apply()&nbsp;accepts a single array of arguments.\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMA-262 3rd Edition  \n\nSyntax\nfun.apply(thisArg[, argsArray])\nParameters\n thisArg \n\n The value of&nbsp;this&nbsp;provided for the call to&nbsp;fun. &nbsp;Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code,&nbsp;null&nbsp;and&nbsp;undefined&nbsp;will be replaced with the global object, and primitive values will be boxed.  \n\n argsArray An array like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.\n\n\nJavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), this method works according to the ECMAScript 5 specification. That is, the arguments can be a generic array-like object instead of an array. See \n\nbug 562448\n for details on this change.\nDescription\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object. With apply, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\napply is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With apply, you can use an array literal, for example, fun.apply(this, ['eat', 'bananas']), or an Array object, for example, fun.apply(this, new Array('eat', 'bananas')).\nYou can also use arguments for the argsArray parameter. arguments is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the apply method. You can use arguments to pass all the arguments to the called object. The called object is then responsible for handling the arguments.\nSince ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property length and integer properties in the range [0...length). As an example you can now use a NodeList or a own custom object like {'length': 2, '0': 'eat', '1':&nbsp;'bananas'}.\nNote:&nbsp;Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array like objects and will throw an exception.\n\nExamples\nUsing apply to chain constructors\nYou can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \napply and built-in functions\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array.\n\r\n          \/* min\/max number in an array *\/\nvar numbers = [5, 6, 2, 3, 7];\n\n\/* using Math.min\/Math.max apply *\/\nvar max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/\nvar min = Math.min.apply(null, numbers);\n\n\/* vs. simple loop based algorithm *\/\nmax = -Infinity, min = +Infinity;\n\nfor (var i = 0; i &lt; numbers.length; i++) {\n  if (numbers[i] &gt; max)\n    max = numbers[i];\n  if (numbers[i] &lt; min) \n    min = numbers[i];\n}\r\n        \nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)&nbsp; If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\r\n          function minOfArray(arr)\n{\n  var min = Infinity;\n  var QUANTUM = 32768;\n  for (var i = 0, len = arr.length; i &lt; len; i += QUANTUM)\n  {\n    var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));\n    min = Math.min(submin, min);\n  }\n  return min;\n}\n\nvar min = minOfArray([5, 6, 2, 3, 7]);\r\n        \nUsing apply to chain constructors\nYou can use apply to chain constructors for an object, similar to Java. In the following example, the constructor for the Product object is defined with two parameters, name and value. Two other functions Food and Toy invoke Product passing this and arguments. Product initializes the properties name and price, both specialized functions define the category. In this example, the arguments object is fully passed to the product constructor and corresponds to the two defined parameters.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.apply(this, arguments);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \napply and built-in functions\nClever usage of apply allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max\/Math.min to find out the maximum\/minimum value in an array.\n\r\n          \/* min\/max number in an array *\/\nvar numbers = [5, 6, 2, 3, 7];\n\n\/* using Math.min\/Math.max apply *\/\nvar max = Math.max.apply(null, numbers); \/* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) *\/\nvar min = Math.min.apply(null, numbers);\n\n\/* vs. simple loop based algorithm *\/\nmax = -Infinity, min = +Infinity;\n\nfor (var i = 0; i &lt; numbers.length; i++) {\n  if (numbers[i] &gt; max)\n    max = numbers[i];\n  if (numbers[i] &lt; min) \n    min = numbers[i];\n}\r\n        \nBut beware: in using apply this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)&nbsp; If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\r\n          function minOfArray(arr)\n{\n  var min = Infinity;\n  var QUANTUM = 32768;\n  for (var i = 0, len = arr.length; i &lt; len; i += QUANTUM)\n  {\n    var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));\n    min = Math.min(submin, min);\n  }\n  return min;\n}\n\nvar min = minOfArray([5, 6, 2, 3, 7]);\r\n        \nSee Also\ncall, bind, arguments\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/call","title":"Function.call","description":"Summary\nCalls a function with a given this value and arguments provided individually.\nNOTE: While the syntax of this function is almost identical to that of&nbsp;apply(), the fundamental difference is that call() accepts an argument list, while apply() accepts a single array of arguments.\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nfun.call(thisArg[, arg1[, arg2[, ...]]])\nParameters\n thisArg The value of this provided for the call to&nbsp;fun. &nbsp;Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.\n\n arg1, arg2, ... Arguments for the object.\nDescription\nYou can assign a different this object when calling an existing function. this refers to the current object, the calling object.\nWith call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.\nExamples\nUsing call to chain constructors for an object\nYou can use call to chain constructors for an object, similar to Java.&nbsp;In the following example, the constructor for the&nbsp;Product&nbsp;object is defined with two parameters, name&nbsp;and&nbsp;value. Two other functions&nbsp;Food&nbsp;and&nbsp;Toy&nbsp;invoke&nbsp;Product&nbsp;passing&nbsp;this&nbsp;and&nbsp;name&nbsp;and&nbsp;value. Product initializes the properties name and price, both specialized functions define the category.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.call(this, name, price);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \nUsing call to invoke an anonymous function\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\r\n          var animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n\nfor (var i = 0; i &lt; animals.length; i++) {\n  (function (i) { \n    this.print = function () { \n      console.log('#' + i  + ' ' + this.species + ': ' + this.name); \n    } \n  }).call(animals[i], i);\n}\r\n        \nUsing call to chain constructors for an object\nYou can use call to chain constructors for an object, similar to Java.&nbsp;In the following example, the constructor for the&nbsp;Product&nbsp;object is defined with two parameters, name&nbsp;and&nbsp;value. Two other functions&nbsp;Food&nbsp;and&nbsp;Toy&nbsp;invoke&nbsp;Product&nbsp;passing&nbsp;this&nbsp;and&nbsp;name&nbsp;and&nbsp;value. Product initializes the properties name and price, both specialized functions define the category.\n\r\n          function Product(name, price) {\n  this.name = name;\n  this.price = price;\n\n  if (price &lt; 0)\n    throw RangeError('Cannot create product &quot;' + name + '&quot; with a negative price');\n  return this;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\nFood.prototype = new Product();\n\nfunction Toy(name, price) {\n  Product.call(this, name, price);\n  this.category = 'toy';\n}\nToy.prototype = new Product();\n\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);\r\n        \nUsing call to invoke an anonymous function\nIn this purely constructed example, we create anonymous function and use call to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as this value was not strictly necessary, but is done for explanatory purpose.\n\r\n          var animals = [\n  {species: 'Lion', name: 'King'},\n  {species: 'Whale', name: 'Fail'}\n];\n\nfor (var i = 0; i &lt; animals.length; i++) {\n  (function (i) { \n    this.print = function () { \n      console.log('#' + i  + ' ' + this.species + ': ' + this.name); \n    } \n  }).call(animals[i], i);\n}\r\n        \nSee Also\napply\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/isGenerator","title":"Function.isGenerator","description":"Summary\nDetermines whether or not a function is a generator.\n   Method of Function     Implemented in JavaScript 1.8.6   ECMAScript Edition None (Harmony Proposal)  \nSyntax\nresult = fun.isGenerator()Parameters\nNone.\nDescription\nThis method lets you determine whether or not a function is a generator.\nExamples\n\r\n          function f() {}\nfunction g() {\n  yield 42;\n}\nconsole.log(&quot;f.isGenerator() = &quot; + f.isGenerator());\nconsole.log(&quot;g.isGenerator() = &quot; + g.isGenerator());\r\n        \nThe output from this code is:\n\nf.isGenerator()&nbsp;= false\ng.isGenerator()&nbsp;= true \n\nSee also\n Iterators and generators\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toSource","title":"Function.toSource","description":" Summary \nReturns a string representing the source code for the function.\n\n   Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \nvar sourceString = function.toSource();\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Function object, toSource returns the following string indicating that the source code is not available:\n\nfunction Function() {\n   [native code]\n}\n\n For custom functions, toSource returns the JavaScript source that defines the object as a string.\n\nThis method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.\n\n See Also \ntoString\nObject.prototype.valueOf\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toString","title":"Function.toString","description":"Summary\nReturns a string representing the source code of the function.\n   Method of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nfunction.toString(indentation)\nParameters\n indentation Non-standard      The amount of spaces to indent the string representation of the source code. If indentation is less than or equal to -1, most unnecessary spaces are removed.\n\nDescription\nThe Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For Function objects, the toString method returns a string representation of the object in the form of a function declaration.&nbsp; That is, toString decompiles the function, and the string returned includes the function keyword, the argument list, curly braces, and the source of the function body.\nJavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string.\nSee also\nObject.prototype.toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MAX_VALUE","title":"Number.MAX_VALUE","description":" Summary \nThe maximum numeric value representable in JavaScript.\n\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nThe MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as &quot;Infinity&quot;.\nBecause MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.\n\n Examples \n Example: Using MAX_VALUE \nThe following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\nif (num1 * num2 &lt;= Number.MAX_VALUE)\n   func1();\nelse\n   func2();\n  Example: Using MAX_VALUE \nThe following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\nif (num1 * num2 &lt;= Number.MAX_VALUE)\n   func1();\nelse\n   func2();\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MIN_VALUE","title":"Number.MIN_VALUE","description":"Summary\nThe smallest positive numeric value representable in JavaScript.\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Description\nThe MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent.\nMIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (&quot;underflow values&quot;) are converted to 0.\nBecause MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created.\nExamples\nExample: Using MIN_VALUE\nThe following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\nif (num1 \/ num2 &gt;= Number.MIN_VALUE)\n   func1()\nelse\n   func2()\n Example: Using MIN_VALUE\nThe following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.\n\nif (num1 \/ num2 &gt;= Number.MIN_VALUE)\n   func1()\nelse\n   func2()\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NEGATIVE_INFINITY","title":"Number.NEGATIVE_INFINITY","description":"Summary\nA value representing the negative Infinity value.\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Description\nThe value of Number.NEGATIVE_INFINITY is the same as the negative value of the global object's Infinity property.\nThis value behaves slightly differently than mathematical infinity:\n Any positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY. Any negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is POSITIVE_INFINITY. Zero multiplied by NEGATIVE_INFINITY is NaN. NaN multiplied by NEGATIVE_INFINITY is NaN. NEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is POSITIVE_INFINITY. NEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is NEGATIVE_INFINITY. NEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN. Any number divided by NEGATIVE_INFINITY is Zero.\n\nSeveral JavaScript methods (such as the Number constructor, parseFloat, and parseInt) return NaN if the value specified in the parameter is significantly lower than Number.MIN_VALUE.\nYou might use the Number.NEGATIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\nExample\nIn the following example, the variable smallNumber is assigned a value that is smaller than the minimum value. When the if statement executes, smallNumber has the value &quot;-Infinity&quot;, so smallNumber is set to a more manageable value before continuing.\n\nvar smallNumber = (-Number.MAX_VALUE) * 2\nif (smallNumber == Number.NEGATIVE_INFINITY) {\n smallNumber = returnFinite();\n}\n\nSee Also\nInfinity, POSITIVE_INFINITY, isFinite\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NaN","title":"Number.NaN","description":"Summary\nA value representing Not-A-Number.\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nNumber.NaN is the same thing than NaN. See the NaN page for more info."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/POSITIVE_INFINITY","title":"Number.POSITIVE_INFINITY","description":"Summary\nA value representing the positive Infinity value.\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nThe value of Number.POSITIVE_INFINITY is the same as the value of the global object's Infinity property.\nThis value behaves slightly differently than mathematical infinity:\n Any positive value, including POSITIVE_INFINITY, multiplied by POSITIVE_INFINITY is POSITIVE_INFINITY. Any negative value, including NEGATIVE_INFINITY, multiplied by POSITIVE_INFINITY is NEGATIVE_INFINITY. Zero multiplied by POSITIVE_INFINITY is NaN. NaN multiplied by POSITIVE_INFINITY is NaN. POSITIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is NEGATIVE_INFINITY. POSITIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is POSITIVE_INFINITY. POSITIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN. Any number divided by POSITIVE_INFINITY is Zero.\n\nSeveral JavaScript methods (such as the Number constructor, parseFloat, and parseInt) return NaN if the value specified in the parameter is significantly higher than Number.MAX_VALUE.\nYou might use the Number.POSITIVE_INFINITY property to indicate an error condition that returns a finite number in case of success. Note, however, that isFinite would be more appropriate in such a case.\nExample\nIn the following example, the variable bigNumber is assigned a value that is larger than the maximum value. When the if statement executes, bigNumber has the value &quot;Infinity&quot;, so bigNumber is set to a more manageable value before continuing.\n\nvar bigNumber = Number.MAX_VALUE * 2\nif (bigNumber == Number.POSITIVE_INFINITY) {\n bigNumber = returnFinite();\n}\n\nSee Also\nInfinity, NEGATIVE_INFINITY, isFinite\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/prototype","title":"Number.prototype","description":"Summary\nRepresents the prototype for the Number constructor.\nDescription\nAll Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances.\nProperties\n constructor Returns the function that created this object's instance. By default this is the Number object.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch\n\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/constructor","title":"Number.constructor","description":" Summary \nReturns a reference to the Number function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor.\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toExponential","title":"Number.toExponential","description":"Summary\nReturns a string representing the Number object in exponential notation\n   Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition  \n\n Syntax \nnumber.toExponential( [fractionDigits] )\n\n Parameter \n fractionDigits\n An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.\n\n Returns \nA string representing a Number object in exponential notation with one digit before the decimal point, rounded to fractionDigits digits after the decimal point. If the fractionDigits argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.\nIf you use the toExponential method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.\nIf a number has more digits that requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits. See the discussion of rounding in the description of the toFixed method, which also applies to toExponential.\n\n Example \n\nvar num=77.1234;\n\nalert(&quot;num.toExponential() is &quot; + num.toExponential()); \/\/displays 7.71234e+1\n\nalert(&quot;num.toExponential(4) is &quot; + num.toExponential(4)); \/\/displays 7.7123e+1\n\nalert(&quot;num.toExponential(2) is &quot; + num.toExponential(2)); \/\/displays 7.71e+1\n\nalert(&quot;77.1234.toExponential() is &quot; + 77.1234.toExponential()); \/\/displays 7.71234e+1\n\nalert(&quot;77 .toExponential() is &quot; + 77 .toExponential()); \/\/displays 7.7e+1\n\n See Also \nNumber.toFixed(),\nNumber.toPrecision(),\nNumber.toString()\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toFixed","title":"Number.toFixed","description":"Summary\nFormats a number using fixed-point notation\n   Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nnumber.toFixed( [digits] )\nParameter\n digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.\n\nReturns\nA string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation.\nThrows\n RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.\n\n TypeError If this method is invoked on an object that is not a Number.\n\nExample\n\nvar n = 12345.6789;\n\nn.toFixed();              \/\/ Returns &quot;12346&quot;: note rounding, no fractional part\n\nn.toFixed(1);             \/\/ Returns &quot;12345.7&quot;: note rounding\n\nn.toFixed(6);             \/\/ Returns &quot;12345.678900&quot;: note added zeros\n\n(1.23e+20).toFixed(2);    \/\/ Returns &quot;123000000000000000000.00&quot;\n\n(1.23e-10).toFixed(2);    \/\/ Returns &quot;0.00&quot;\n\n2.34.toFixed(1);          \/\/ Returns &quot;2.3&quot;\n\n-2.34.toFixed(1);         \/\/ Returns -2.3 (due to operator precedence, negative numbers don't return a string...)\n\n(-2.24).toFixed(1);       \/\/ Returns &quot;-2.3&quot; (...unless you use parentheses)\n\nSee Also\nNumber.toExponential(), Number.toLocaleString(), Number.toPrecision(), Number.toString(), Number.toSource(), Number.valueOf()\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/ToLocaleString","title":"Number.ToLocaleString","description":"Syntax\nnumber.toLocaleString()\nExamples\n\r\n          var number = 3500\nconsole.log(number.toLocaleString()); \/* Displays &quot;3,500&quot; in English locale *\/\r\n        \nSee Also\nNumber.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toPrecision","title":"Number.toPrecision","description":"Summary\nReturns a string representing the Number object to the specified precision.    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition  \n Syntax\nnumber.toPrecision( [ precision ] )\nParameter\n precision An integer specifying the number of significant digits.\n\nReturns\nA string representing a Number object in fixed-point or exponential notation rounded to precision significant digits. See the discussion of rounding in the description of the toFixed method, which also applies to toPrecision.\nIf the precision argument is omitted, behaves as Number.toString. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a RangeError is thrown.\nECMA-262 only requires a precision of up to 21 significant digits. Other implementations may not support precisions higher than required by the standard.\nExample\n\nvar num = 5.123456;\nprintln(&quot;num.toPrecision() is &quot; + num.toPrecision());   \/\/displays 5.123456\nprintln(&quot;num.toPrecision(5) is &quot; + num.toPrecision(5)); \/\/displays 5.1235\nprintln(&quot;num.toPrecision(2) is &quot; + num.toPrecision(2)); \/\/displays 5.1\nprintln(&quot;num.toPrecision(1) is &quot; + num.toPrecision(1)); \/\/displays 5\n\nSee Also\n toExponential toFixed toString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toSource","title":"Number.toSource","description":" Summary \nReturns a string representing the source code of the object.\n\n   Method of Number     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \nnumber.toSource()\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in Number object, toSource returns the following string indicating that the source code is not available:\n\nfunction Number() {[native code]}\n\n For instances of Number, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n See Also \nObject.prototype.toSource\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toString","title":"Number.toString","description":" Summary \nReturns a string representing the specified Number object\n\n   Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \nnumber.toString( [radix] )\n\n Parameter \n radix\n An integer between 2 and 36 specifying the base to use for representing numeric values.\n\n Description \nThe Number object overrides the toString method of the Object object; it does not inherit Object.toString. For Number objects, the toString method returns a string representation of the object in the specified radix.\nThe toString method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.\nIf toString is given a radix not between 2 and 36, an exception is thrown.\nIf the radix is not specified, JavaScript assumes the preferred radix is 10.\n\n Examples \nvar count = 10;\nprint(count.toString());   \/\/ displays &quot;10&quot;\nprint((17).toString());    \/\/ displays &quot;17&quot;\n\nvar x = 7;\nprint(x.toString(2));      \/\/ displays &quot;111&quot;\n\n See Also \nNumber.prototype.toExponential\nNumber.prototype.toLocaleString\nNumber.prototype.toPrecision\nNumber.prototype.toFixed\nNumber.prototype.toSource\nNumber.prototype.valueOf\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/valueOf","title":"Number.valueOf","description":" Summary \nReturns the primitive value of a Number object.\n\n   Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nnumber.valueOf() Parameters \nNone.\n\n Description \nThe valueOf method of Number returns the primitive value of a Number object as a number data type.\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n Examples \nvar x = new Number();\nprint(x.valueOf());     \/\/ prints &quot;0&quot;\n\n See Also \nObject.toSource\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty","title":"Object.defineProperty","description":"Summary\nDefines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.defineProperty(obj, prop, descriptor)\nParameters\n obj The object on which to define the property. prop The name of the property to be defined or modified. descriptor The descriptor for the property being defined or modified.\n\nDescription\nThis method allows precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in loop), whose values may be changed, and which may be deleted. This method allows these extra details to be changed from their defaults.\nProperty descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both. All descriptors regardless of flavor include the configurable and enumerable fields.\nA property descriptor is an object with the following fields:\n value The value associated with the property. (data descriptors only).&nbsp;Defaults to undefined. writable True if and only if the value associated with the property may be changed. (data descriptors only). Defaults to false. get A function which serves as a getter for the property, or undefined if there is no getter. (accessor descriptors only).&nbsp;Defaults to undefined. set A function which serves as a setter for the property, or undefined if there is no setter. (accessor descriptors only).&nbsp;Defaults to undefined. configurable True if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.&nbsp;Defaults to false. enumerable True if and only if this property shows up during enumeration of the properties on the corresponding object.&nbsp;Defaults to false. \n\nCreating a property\nWhen the property specified doesn't exist in the object, Object.defineProperty creates a new property as described. Fields may be omitted from the descriptor, and default values for those fields are imputed. All of the boolean-valued fields default to false. The value, get, and set fields default to undefined.\nExample\n\r\n          var o = {}; \/\/ Creates a new object\n\n\/\/ Example of an object property added with defineProperty with a data property descriptor\nObject.defineProperty(o, &quot;a&quot;, {value : 37,\n                               writable : true,\n                               enumerable : true,\n                               configurable : true});\n\/\/ 'a' property exists in the o object and its value is 37\n\n\/\/ Example of an object property added with defineProperty with an accessor property descriptor\nvar bValue;\nObject.defineProperty(o, &quot;b&quot;, {get : function(){ return bValue; },\n                               set : function(newValue){ bValue = newValue; },\n                               enumerable : true,\n                               configurable : true});\no.b = 38;\n\/\/ 'b' property exists in the o object and its value is 38\n\/\/ The value of o.b is now always identical to bValue, unless o.b is redefined\n\n\/\/ You cannot try to mix both :\nObject.defineProperty(o, &quot;conflict&quot;, { value: 0x9f91102, \n                                       get: function() { return 0xdeadbeef; } });\n\/\/ throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\r\n        \nYou can use the Object.defineProperty method with native objects also. The following example shows how to implement the HTMLSelectElement's selectedIndex property in radio button groups.\n\r\n          &lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text\/html; charset=UTF-8&quot; \/&gt;\n&lt;title&gt;Radio group selectedIndex example&lt;\/title&gt;\n&lt;script type=&quot;text\/javascript&quot;&gt;\nObject.defineProperty(NodeList.prototype, &quot;selectedIndex&quot;, {\n\tget: function() {\n\t\tvar nIndex = this.length - 1;\n\t\twhile (nIndex &gt; -1 &amp;&amp; !this[nIndex].checked) { nIndex--; }\n\t\treturn nIndex;\n\t},\n\tset: function(nNewIndex) {\n\t\tif (isNaN(nNewIndex)) { return; }\n\t\tvar nOldIndex = this.selectedIndex;\n\t\tif (nOldIndex &gt; -1) { this[nOldIndex].checked = false; }\n\t\tif (nNewIndex &gt; -1) { this[nNewIndex].checked = true; }\n\t},\n\tenumerable : true,\n\tconfigurable : false\n});\n\n\/\/ try it!\nfunction checkForm() {\n\tvar nSelectedIndex = document.myForm.myRadioGroup.selectedIndex;\n\tif (nSelectedIndex &lt; 0) { alert(&quot;Select a gadget!!&quot;); return false; }\n\talert(&quot;Congratulations!! You selected the &quot; + document.myForm.myRadioGroup[nSelectedIndex].value + &quot;.&quot;);\n\treturn true;\n}\n&lt;\/script&gt;\n\n&lt;\/head&gt;\n\n&lt;body&gt;\n\t\t\t\t\t\t\n&lt;form name=&quot;myForm&quot; onsubmit=&quot;return(checkForm());&quot;&gt;\n&lt;fieldset&gt;&lt;legend&gt;Select a gadget&lt;\/legend&gt;\n&lt;p&gt;&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourShirt&quot; value=&quot;shirt&quot; \/&gt; &lt;label for=&quot;ourShirt&quot;&gt;shirt&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourPants&quot; value=&quot;pants&quot; \/&gt; &lt;label for=&quot;ourPants&quot;&gt;pants&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourBelt&quot; value=&quot;belt&quot; \/&gt; &lt;label for=&quot;ourBelt&quot;&gt;belt&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourShoes&quot; value=&quot;shoes&quot; \/&gt; &lt;label for=&quot;ourShoes&quot;&gt;shoes&lt;\/label&gt;&lt;\/p&gt;\n&lt;p&gt;&lt;span style=&quot;cursor:pointer;text-decoration:underline;color:#0000ff;&quot; onclick=&quot;document.myForm.myRadioGroup.selectedIndex=2;&quot;&gt;Select our favorite gadget ;-)&lt;\/span&gt;&lt;\/p&gt;\n&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Order!&quot; \/&gt;\n&lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;\r\n        \nExample\n\r\n          var o = {}; \/\/ Creates a new object\n\n\/\/ Example of an object property added with defineProperty with a data property descriptor\nObject.defineProperty(o, &quot;a&quot;, {value : 37,\n                               writable : true,\n                               enumerable : true,\n                               configurable : true});\n\/\/ 'a' property exists in the o object and its value is 37\n\n\/\/ Example of an object property added with defineProperty with an accessor property descriptor\nvar bValue;\nObject.defineProperty(o, &quot;b&quot;, {get : function(){ return bValue; },\n                               set : function(newValue){ bValue = newValue; },\n                               enumerable : true,\n                               configurable : true});\no.b = 38;\n\/\/ 'b' property exists in the o object and its value is 38\n\/\/ The value of o.b is now always identical to bValue, unless o.b is redefined\n\n\/\/ You cannot try to mix both :\nObject.defineProperty(o, &quot;conflict&quot;, { value: 0x9f91102, \n                                       get: function() { return 0xdeadbeef; } });\n\/\/ throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\r\n        \nYou can use the Object.defineProperty method with native objects also. The following example shows how to implement the HTMLSelectElement's selectedIndex property in radio button groups.\n\r\n          &lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text\/html; charset=UTF-8&quot; \/&gt;\n&lt;title&gt;Radio group selectedIndex example&lt;\/title&gt;\n&lt;script type=&quot;text\/javascript&quot;&gt;\nObject.defineProperty(NodeList.prototype, &quot;selectedIndex&quot;, {\n\tget: function() {\n\t\tvar nIndex = this.length - 1;\n\t\twhile (nIndex &gt; -1 &amp;&amp; !this[nIndex].checked) { nIndex--; }\n\t\treturn nIndex;\n\t},\n\tset: function(nNewIndex) {\n\t\tif (isNaN(nNewIndex)) { return; }\n\t\tvar nOldIndex = this.selectedIndex;\n\t\tif (nOldIndex &gt; -1) { this[nOldIndex].checked = false; }\n\t\tif (nNewIndex &gt; -1) { this[nNewIndex].checked = true; }\n\t},\n\tenumerable : true,\n\tconfigurable : false\n});\n\n\/\/ try it!\nfunction checkForm() {\n\tvar nSelectedIndex = document.myForm.myRadioGroup.selectedIndex;\n\tif (nSelectedIndex &lt; 0) { alert(&quot;Select a gadget!!&quot;); return false; }\n\talert(&quot;Congratulations!! You selected the &quot; + document.myForm.myRadioGroup[nSelectedIndex].value + &quot;.&quot;);\n\treturn true;\n}\n&lt;\/script&gt;\n\n&lt;\/head&gt;\n\n&lt;body&gt;\n\t\t\t\t\t\t\n&lt;form name=&quot;myForm&quot; onsubmit=&quot;return(checkForm());&quot;&gt;\n&lt;fieldset&gt;&lt;legend&gt;Select a gadget&lt;\/legend&gt;\n&lt;p&gt;&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourShirt&quot; value=&quot;shirt&quot; \/&gt; &lt;label for=&quot;ourShirt&quot;&gt;shirt&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourPants&quot; value=&quot;pants&quot; \/&gt; &lt;label for=&quot;ourPants&quot;&gt;pants&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourBelt&quot; value=&quot;belt&quot; \/&gt; &lt;label for=&quot;ourBelt&quot;&gt;belt&lt;\/label&gt;&lt;br \/&gt;\n&lt;input type=&quot;radio&quot; name=&quot;myRadioGroup&quot; id=&quot;ourShoes&quot; value=&quot;shoes&quot; \/&gt; &lt;label for=&quot;ourShoes&quot;&gt;shoes&lt;\/label&gt;&lt;\/p&gt;\n&lt;p&gt;&lt;span style=&quot;cursor:pointer;text-decoration:underline;color:#0000ff;&quot; onclick=&quot;document.myForm.myRadioGroup.selectedIndex=2;&quot;&gt;Select our favorite gadget ;-)&lt;\/span&gt;&lt;\/p&gt;\n&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Order!&quot; \/&gt;\n&lt;\/fieldset&gt;\n&lt;\/form&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;\r\n        \nModifying a property\nWhen the property already exists, Object.defineProperty attempts to modify the property according to the values in the descriptor and the object current configuration. If the old descriptor had its configurable attribute set to false (the property is said &quot;non-configurable&quot;), then no attribute besides writable can be changed. In that case, it is also not possible to switch back and forth from data\/accessor properties type (a property which would have been defined without get\/set\/value\/writable is called &quot;generic&quot; and is &quot;typed&quot; as a data descriptor).\nA TypeError is thrown when non-configurable property attributes are changed unless it's the writable attribute or if the current and new values are equal.\nWritable attribute\nWhen the writable property attribute is set to false, the property is said to be &quot;non-writable&quot;. It cannot be assigned.\nExample\n\r\n          var o = {}; \/\/ Creates a new object\n\nObject.defineProperty(o, &quot;a&quot;, {value : 37,\n                               writable : false});\n\nalert(o.a); \/\/ alerts 37\no.a = 25;\nalert(o.a); \/\/ alerts 37. The assignment didn't work. No error thrown\r\n        \nAs seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.\nExample\n\r\n          var o = {}; \/\/ Creates a new object\n\nObject.defineProperty(o, &quot;a&quot;, {value : 37,\n                               writable : false});\n\nalert(o.a); \/\/ alerts 37\no.a = 25;\nalert(o.a); \/\/ alerts 37. The assignment didn't work. No error thrown\r\n        \nAs seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.\nEnumerable attribute\nThe Enumerable property attribute defines whether the property shows up in a for...in loop or not.\nExample\n\r\n          var i;\nvar o = {};\nObject.defineProperty(o, &quot;a&quot;, { value : 1, enumerable:true });\nObject.defineProperty(o, &quot;b&quot;, { value : 2, enumerable:false });\nObject.defineProperty(o, &quot;c&quot;, { value : 3 }); \/\/ enumerable defaults to false\no.d = 4;\n\nfor (i in o) {    \n    alert(i);  \n}\n\/\/ alerts 'a' then 'd'\r\n        \nExample\n\r\n          var i;\nvar o = {};\nObject.defineProperty(o, &quot;a&quot;, { value : 1, enumerable:true });\nObject.defineProperty(o, &quot;b&quot;, { value : 2, enumerable:false });\nObject.defineProperty(o, &quot;c&quot;, { value : 3 }); \/\/ enumerable defaults to false\no.d = 4;\n\nfor (i in o) {    \n    alert(i);  \n}\n\/\/ alerts 'a' then 'd'\r\n        \nConfigurable attribute\nThe configurable attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.\nExample\n\r\n          var o = {};\nObject.defineProperty(o, &quot;a&quot;, { get : function(){return 1;}, \n                                configurable : false } );\n\nObject.defineProperty(o, &quot;a&quot;, {configurable : true}); \/\/ throws a TypeError\nObject.defineProperty(o, &quot;a&quot;, {enumerable : true}); \/\/ throws a TypeError\nObject.defineProperty(o, &quot;a&quot;, {set : function(){}}); \/\/ throws a TypeError (set was undefined previously)\nObject.defineProperty(o, &quot;a&quot;, {get : function(){return 1;}}); \/\/ throws a TypeError (even though the new get does exactly the same thing)\nObject.defineProperty(o, &quot;a&quot;, {value : 12}); \/\/ throws a TypeError\n\nalert(o.a); \/\/ alerts 1\ndelete o.a; \/\/ Nothing happens\nalert(o.a); \/\/ alerts 1\r\n        \nIf o.a configurable attribute was true, none of the error would be thrown and the property would be deleted at the end.\nExample\n\r\n          var o = {};\nObject.defineProperty(o, &quot;a&quot;, { get : function(){return 1;}, \n                                configurable : false } );\n\nObject.defineProperty(o, &quot;a&quot;, {configurable : true}); \/\/ throws a TypeError\nObject.defineProperty(o, &quot;a&quot;, {enumerable : true}); \/\/ throws a TypeError\nObject.defineProperty(o, &quot;a&quot;, {set : function(){}}); \/\/ throws a TypeError (set was undefined previously)\nObject.defineProperty(o, &quot;a&quot;, {get : function(){return 1;}}); \/\/ throws a TypeError (even though the new get does exactly the same thing)\nObject.defineProperty(o, &quot;a&quot;, {value : 12}); \/\/ throws a TypeError\n\nalert(o.a); \/\/ alerts 1\ndelete o.a; \/\/ Nothing happens\nalert(o.a); \/\/ alerts 1\r\n        \nIf o.a configurable attribute was true, none of the error would be thrown and the property would be deleted at the end.\nDifference with usual property addition and default values\n\r\n          var o = {};\n\no.a = 1;\n\/\/ is equivalent to :\nObject.defineProperty(o, &quot;a&quot;, {value : 1,\n                               writable : true,\n                               configurable : true,\n                               enumerable : true});\n\n\n\/\/ On the other hand,\nObject.defineProperty(o, &quot;a&quot;, {value : 1});\n\/\/ is equivalent to :\nObject.defineProperty(o, &quot;a&quot;, {value : 1,\n                               writable : false,\n                               configurable : false,\n                               enumerable : false});\r\n        \nCode considerations\nIf you have to define many properties through the Object.defineProperty method, you can utilise the same descriptor object for each property, redefining it from time to time through binary flags.\nExamples\n\r\n          var oDesc = {};\nfunction setProp (nMask, oObj, sKey, vVal_fGet, fSet) {\n\tif (nMask &amp; 12) {\n\t\tif (arguments.length &gt; 3) { oDesc.value = vVal_fGet; } else { delete oDesc.value; }\n\t\toDesc.writable = Boolean(nMask &amp; 8);\n\t\tdelete oDesc.get;\n\t\tdelete oDesc.set;\n\t} else {\n\t\tif (vVal_fGet) { oDesc.get = vVal_fGet; } else { delete oDesc.get; }\n\t\tif (fSet) { oDesc.set = fSet; } else { delete oDesc.set; }\n\t\tdelete oDesc.value;\n\t\tdelete oDesc.writable;\n\t}\n\toDesc.enumerable = Boolean(nMask &amp; 1);\n\toDesc.configurable = Boolean(nMask &amp; 2);\n\tObject.defineProperty(oObj, sKey, oDesc);\n}\n\n\/**\n*\t:: function setProp ::\n*\n*\tvVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor;\n*\n*\tnMask is a bitmask:\n*\n*\tflag 0x1: property is enumerable,\n*\tflag 0x2: property is configurable,\n*\tflag 0x4: property is data descriptor,\n*\tflag 0x8: property is writable.\n*\tNote: If flag 0x8 is setted to &quot;writable&quot;, the propery will be considered a data descriptor even if the flag 0x4 is setted to &quot;accessor descriptor&quot;!\n*\n*\tValues:\n*\n*\t0  : accessor descriptor - not configurable, not enumerable (0000).\n*\t1  : accessor descriptor - not configurable, enumerable (0001).\n*\t2  : accessor descriptor - configurable, not enumerable (0010).\n*\t3  : accessor descriptor - configurable, enumerable (0011).\n*\t4  : readonly data descriptor - not configurable, not enumerable (0100).\n*\t5  : readonly data descriptor - not configurable, enumerable (0101).\n*\t6  : readonly data descriptor - configurable, not enumerable (0110).\n*\t7  : readonly data descriptor - configurable, enumerable (0111).\n*\t8  : writable data descriptor - not configurable, not enumerable (1000).\n*\t9  : writable data descriptor - not configurable, enumerable (1001).\n*\t10 : writable data descriptor - configurable, not enumerable (1010).\n*\t11 : writable data descriptor - configurable, enumerable (1011).\n*\/\n\n\/\/ creating a new empty object\nvar myObj = {};\n\n\/\/ adding a writable data descriptor - not configurable, not enumerable\nsetProp(8, myObj, &quot;myNumber&quot;, 25);\n\n\/\/ adding a readonly data descriptor - not configurable, enumerable\nsetProp(5, myObj, &quot;myString&quot;, &quot;Hello world!&quot;);\n\n\/\/ adding an accessor descriptor - not configurable, enumerable\nsetProp(1, myObj, &quot;myArray&quot;, function() {\n\tfor (var iBit = 0, iFlag = 1, aBoolArr = [false]; iFlag &lt; this.myNumber + 1 || (this.myNumber &amp; iFlag); iFlag = iFlag &lt;&lt; 1) { aBoolArr[iBit++] = Boolean(this.myNumber &amp; iFlag); }\n\treturn aBoolArr;\n}, function(aNewMask) {\n\tfor (var nNew = 0, iBit = 0; iBit &lt; aNewMask.length; iBit++) { nNew |= Boolean(aNewMask[iBit]) &lt;&lt; iBit; }\n\tthis.myNumber = nNew;\n});\n\n\/\/ adding a writable data descriptor (undefined value) - configurable, enumerable\nsetProp(11, myObj, &quot;myUndefined&quot;);\n\n\/\/ adding an accessor descriptor (only getter) - not configurable, enumerable\nsetProp(1, myObj, &quot;myDate&quot;, function() { return new Date(); });\n\n\/\/ adding an accessor descriptor (only setter) - not configurable, not enumerable\nsetProp(0, myObj, &quot;myAlert&quot;, null, function(sTxt) { alert(sTxt); });\n\nmyObj.myAlert = myObj.myDate.toLocaleString() + &quot;\\n\\n&quot; + myObj.myString + &quot;\\nThe number &quot; + myObj.myNumber + &quot; represents the following bitmask: &quot; + myObj.myArray.join(&quot;, &quot;) + &quot;.&quot;;\r\n        \nYou can do the same thing with an anonymous descriptor object.\n\r\n          new (function() {\n\tfunction buildProp (nMask, oObj, sKey, vVal_fGet, fSet) {\n\t\tif (nMask &amp; 12) {\n\t\t\tif (arguments.length &gt; 3) { this.value = vVal_fGet; } else { delete this.value; }\n\t\t\tthis.writable = Boolean(nMask &amp; 8);\n\t\t\tdelete this.get;\n\t\t\tdelete this.set;\n\t\t} else {\n\t\t\tif (vVal_fGet) { this.get = vVal_fGet; } else { delete this.get; }\n\t\t\tif (fSet) { this.set = fSet; } else { delete this.set; }\n\t\t\tdelete this.value;\n\t\t\tdelete this.writable;\n\t\t}\n\t\tthis.enumerable = Boolean(nMask &amp; 1);\n\t\tthis.configurable = Boolean(nMask &amp; 2);\n\t\tObject.defineProperty(oObj, sKey, this);\n\t};\n\tbuildProp(5, window, &quot;setProp&quot;, buildProp);\n})();\n\n\/\/ creating a new empty object\nvar myObj = {};\n\n\/\/ adding a writable data descriptor - not configurable, not enumerable\nsetProp(8, myObj, &quot;myNumber&quot;, 25);\n\n\/\/ adding a readonly data descriptor - not configurable, enumerable\nsetProp(5, myObj, &quot;myString&quot;, &quot;Hello world!&quot;);\n\/\/ etc. etc.\r\n        \nExamples\n\r\n          var oDesc = {};\nfunction setProp (nMask, oObj, sKey, vVal_fGet, fSet) {\n\tif (nMask &amp; 12) {\n\t\tif (arguments.length &gt; 3) { oDesc.value = vVal_fGet; } else { delete oDesc.value; }\n\t\toDesc.writable = Boolean(nMask &amp; 8);\n\t\tdelete oDesc.get;\n\t\tdelete oDesc.set;\n\t} else {\n\t\tif (vVal_fGet) { oDesc.get = vVal_fGet; } else { delete oDesc.get; }\n\t\tif (fSet) { oDesc.set = fSet; } else { delete oDesc.set; }\n\t\tdelete oDesc.value;\n\t\tdelete oDesc.writable;\n\t}\n\toDesc.enumerable = Boolean(nMask &amp; 1);\n\toDesc.configurable = Boolean(nMask &amp; 2);\n\tObject.defineProperty(oObj, sKey, oDesc);\n}\n\n\/**\n*\t:: function setProp ::\n*\n*\tvVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor;\n*\n*\tnMask is a bitmask:\n*\n*\tflag 0x1: property is enumerable,\n*\tflag 0x2: property is configurable,\n*\tflag 0x4: property is data descriptor,\n*\tflag 0x8: property is writable.\n*\tNote: If flag 0x8 is setted to &quot;writable&quot;, the propery will be considered a data descriptor even if the flag 0x4 is setted to &quot;accessor descriptor&quot;!\n*\n*\tValues:\n*\n*\t0  : accessor descriptor - not configurable, not enumerable (0000).\n*\t1  : accessor descriptor - not configurable, enumerable (0001).\n*\t2  : accessor descriptor - configurable, not enumerable (0010).\n*\t3  : accessor descriptor - configurable, enumerable (0011).\n*\t4  : readonly data descriptor - not configurable, not enumerable (0100).\n*\t5  : readonly data descriptor - not configurable, enumerable (0101).\n*\t6  : readonly data descriptor - configurable, not enumerable (0110).\n*\t7  : readonly data descriptor - configurable, enumerable (0111).\n*\t8  : writable data descriptor - not configurable, not enumerable (1000).\n*\t9  : writable data descriptor - not configurable, enumerable (1001).\n*\t10 : writable data descriptor - configurable, not enumerable (1010).\n*\t11 : writable data descriptor - configurable, enumerable (1011).\n*\/\n\n\/\/ creating a new empty object\nvar myObj = {};\n\n\/\/ adding a writable data descriptor - not configurable, not enumerable\nsetProp(8, myObj, &quot;myNumber&quot;, 25);\n\n\/\/ adding a readonly data descriptor - not configurable, enumerable\nsetProp(5, myObj, &quot;myString&quot;, &quot;Hello world!&quot;);\n\n\/\/ adding an accessor descriptor - not configurable, enumerable\nsetProp(1, myObj, &quot;myArray&quot;, function() {\n\tfor (var iBit = 0, iFlag = 1, aBoolArr = [false]; iFlag &lt; this.myNumber + 1 || (this.myNumber &amp; iFlag); iFlag = iFlag &lt;&lt; 1) { aBoolArr[iBit++] = Boolean(this.myNumber &amp; iFlag); }\n\treturn aBoolArr;\n}, function(aNewMask) {\n\tfor (var nNew = 0, iBit = 0; iBit &lt; aNewMask.length; iBit++) { nNew |= Boolean(aNewMask[iBit]) &lt;&lt; iBit; }\n\tthis.myNumber = nNew;\n});\n\n\/\/ adding a writable data descriptor (undefined value) - configurable, enumerable\nsetProp(11, myObj, &quot;myUndefined&quot;);\n\n\/\/ adding an accessor descriptor (only getter) - not configurable, enumerable\nsetProp(1, myObj, &quot;myDate&quot;, function() { return new Date(); });\n\n\/\/ adding an accessor descriptor (only setter) - not configurable, not enumerable\nsetProp(0, myObj, &quot;myAlert&quot;, null, function(sTxt) { alert(sTxt); });\n\nmyObj.myAlert = myObj.myDate.toLocaleString() + &quot;\\n\\n&quot; + myObj.myString + &quot;\\nThe number &quot; + myObj.myNumber + &quot; represents the following bitmask: &quot; + myObj.myArray.join(&quot;, &quot;) + &quot;.&quot;;\r\n        \nYou can do the same thing with an anonymous descriptor object.\n\r\n          new (function() {\n\tfunction buildProp (nMask, oObj, sKey, vVal_fGet, fSet) {\n\t\tif (nMask &amp; 12) {\n\t\t\tif (arguments.length &gt; 3) { this.value = vVal_fGet; } else { delete this.value; }\n\t\t\tthis.writable = Boolean(nMask &amp; 8);\n\t\t\tdelete this.get;\n\t\t\tdelete this.set;\n\t\t} else {\n\t\t\tif (vVal_fGet) { this.get = vVal_fGet; } else { delete this.get; }\n\t\t\tif (fSet) { this.set = fSet; } else { delete this.set; }\n\t\t\tdelete this.value;\n\t\t\tdelete this.writable;\n\t\t}\n\t\tthis.enumerable = Boolean(nMask &amp; 1);\n\t\tthis.configurable = Boolean(nMask &amp; 2);\n\t\tObject.defineProperty(oObj, sKey, this);\n\t};\n\tbuildProp(5, window, &quot;setProp&quot;, buildProp);\n})();\n\n\/\/ creating a new empty object\nvar myObj = {};\n\n\/\/ adding a writable data descriptor - not configurable, not enumerable\nsetProp(8, myObj, &quot;myNumber&quot;, 25);\n\n\/\/ adding a readonly data descriptor - not configurable, enumerable\nsetProp(5, myObj, &quot;myString&quot;, &quot;Hello world!&quot;);\n\/\/ etc. etc.\r\n        \nCross-browser concerns\nRedefining the length property of an Array object\nIt is possible to redefine the length property of arrays, but not all browsers permit this redefinition. &nbsp;Firefox 4 will throw a TypeError on any attempt to redefine the length property of an array. &nbsp;Versions of Chrome which implement Object.defineProperty&nbsp;in some circumstances ignore a length value different from the array's current length property, and changing writability seems to silently not work in some circumstances. &nbsp;Versions of Safari which implement Object.defineProperty&nbsp;ignore a length value different from the array's current length property, and attempts to change writability execute without error but do not actually change the property's writability. &nbsp;Only IE9 appears to fully and correctly implement redefinition of the length property of arrays. &nbsp;For now, don't rely on redefining the length property of an array to either work, or to work in a particular manner.\nInternet Explorer 8 specific case\nIE8 implemented a Object.defineProperty() method that could only be used on DOM objects. A couple of things need to be noted:\n Trying to use Object.defineProperty() on native objects throws an error. Property attributes must be set to some values. true, true, true for data descriptor and true for configurable, false for enumerable for accessor descriptor. Any attempt to provide other value will result in an error being thrown. Reconfiguring a property requires to delete the property first. If the property isn't deleted, it stays as it was before the reconfiguration attempt.\n\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 (8, but only on DOM objects and with some non standard behaviors. See above.) -- 5.1 (5, but not on DOM objects)  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat tables.Redefining the length property of an Array object\nIt is possible to redefine the length property of arrays, but not all browsers permit this redefinition. &nbsp;Firefox 4 will throw a TypeError on any attempt to redefine the length property of an array. &nbsp;Versions of Chrome which implement Object.defineProperty&nbsp;in some circumstances ignore a length value different from the array's current length property, and changing writability seems to silently not work in some circumstances. &nbsp;Versions of Safari which implement Object.defineProperty&nbsp;ignore a length value different from the array's current length property, and attempts to change writability execute without error but do not actually change the property's writability. &nbsp;Only IE9 appears to fully and correctly implement redefinition of the length property of arrays. &nbsp;For now, don't rely on redefining the length property of an array to either work, or to work in a particular manner.\nInternet Explorer 8 specific case\nIE8 implemented a Object.defineProperty() method that could only be used on DOM objects. A couple of things need to be noted:\n Trying to use Object.defineProperty() on native objects throws an error. Property attributes must be set to some values. true, true, true for data descriptor and true for configurable, false for enumerable for accessor descriptor. Any attempt to provide other value will result in an error being thrown. Reconfiguring a property requires to delete the property first. If the property isn't deleted, it stays as it was before the reconfiguration attempt.\n\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 (8, but only on DOM objects and with some non standard behaviors. See above.) -- 5.1 (5, but not on DOM objects)  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat tables.See also\n Object.create\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/create","title":"Object.create","description":"Summary\nCreates a new object with the specified prototype object and properties.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.create(proto [, propertiesObject ])\nParameters\n proto The object which should be the prototype of the newly-created object. propertiesObject If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names.\n\nDescription\nThrows a TypeError exception if the proto parameter isn't null or an object.\n\nExamples\n\r\n          var o;\n\n\/\/ create an object with null as prototype\no = Object.create(null);\n\n\no = {};\n\/\/ is equivalent to:\no = Object.create(Object.prototype);\n\n\nfunction Constructor(){}\no = new Constructor();\n\/\/ is equivalent to:\no = Object.create(Constructor.prototype);\n\/\/ Of course, if there is actual initialization code in the Constructor function, the Object.create cannot reflect it\n\n\n\/\/ create a new object whose prototype is a new, empty object\n\/\/ and a adding single property 'p', with value 42\no = Object.create({}, { p: { value: 42 } })\n\n\/\/ by default properties ARE NOT writable, enumerable or configurable:\no.p = 24\no.p\n\/\/42\n\no.q = 12\nfor (var prop in o) {\n   console.log(prop)\n}\n\/\/&quot;q&quot;\n\ndelete o.p\n\/\/false\n\n\/\/to specify an ES3 property\no2 = Object.create({}, { p: { value: 42, writable: true, enumerable: true, configurable: true } });\r\n        \nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 4 (2.0) 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nPolyfill\n\r\n          if (!Object.create) {\n    Object.create = function (o) {\n        if (arguments.length &gt; 1) {\n            throw new Error('Object.create implementation only accepts the first parameter.');\n        }\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\r\n        \nThis polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.\nPolyfill\n\r\n          if (!Object.create) {\n    Object.create = function (o) {\n        if (arguments.length &gt; 1) {\n            throw new Error('Object.create implementation only accepts the first parameter.');\n        }\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\r\n        \nThis polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.\nSee also\n Object.defineProperty Object.defineProperties Object.prototype.isPrototypeOf John&nbsp;Resig's post on getPrototypeOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/prototype","title":"Object.prototype","description":"Summary\nRepresents the Object prototype object.\nDescription\nAll objects in JavaScript are descended from Object; all objects inherit methods and properties from Object.prototype, although they may be overridden&nbsp;(except an&nbsp;Object&nbsp;with a null prototype, i.e.&nbsp;Object.create(null)). For example, other constructors' prototypes override the constructor property and provide their own toString methods. Changes to the Object prototype object are propagated to all objects unless the properties and methods subject to those changes are overridden further along the prototype chain.\nProperties\n constructor Specifies the function that creates an object's prototype. __count__ \n\nObsolete since JavaScript 1.8.5 Returns the number of enumerable properties directly on a user-defined object. __parent__ \n\nObsolete since JavaScript 1.8.5 Points to an object's context. __proto__ Non-standard      Points to the object which was used as prototype when the object was instantiated.\n\nMethods\n __defineGetter__ Non-standard      Associates a function with a property that, when accessed, executes that function and returns its return value.\n\n __defineSetter__ Non-standard      Associates a function with a property that, when set, executes that function which modifies the property.\n\n eval \n\nObsolete since JavaScript 1.8.5 Evaluates a string of JavaScript code in the context of the specified object. hasOwnProperty Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. isPrototypeOf Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.\n\n __lookupGetter__ Non-standard      Returns the function associated with the specified property by the __defineGetter__ method.\n\n __lookupSetter__ Non-standard      Returns the function associated with the specified property by the __defineSetter__ method.\n\n __noSuchMethod__ Non-standard      Allows a function to be defined that will be executed when an undefined object member is called as a method.\n\n propertyIsEnumerable Returns a boolean indicating if the internal ECMAScript DontEnum attribute is set.\n\n toSource Non-standard      Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.\n\n toLocaleString Calls toString.\n\n toString Returns a string representation of the object.\n\n unwatch Non-standard      Removes a watchpoint from a property of the object.\n\n valueOf Returns the primitive value of the specified object.\n\n watch Non-standard      Adds a watchpoint to a property of the object.\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperties","title":"Object.defineProperties","description":"Summary\nDefines new or modifies existing properties directly on an object, returning the object.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n Syntax\nObject.defineProperties(obj, props)\nParameters\n obj The object on which to define or modify properties. props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.\n\nDescription\nObject.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object objrops object.\nAssuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript:\n\r\n          function defineProperties(obj, properties)\n{\n  function convertToDescriptor(desc)\n  {\n    function hasProperty(obj, prop)\n    {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n    function isCallable(v)\n    {\n      \/\/ NB: modify as necessary if other values than functions are callable.\n      return typeof v === &quot;function&quot;;\n    }\n\n    if (typeof desc !== &quot;object&quot; || desc === null)\n      throw new TypeError(&quot;bad desc&quot;);\n\n    var d = {};\n    if (hasProperty(desc, &quot;enumerable&quot;))\n      d.enumerable = !!obj.enumerable;\n    if (hasProperty(desc, &quot;configurable&quot;))\n      d.configurable = !!obj.configurable;\n    if (hasProperty(desc, &quot;value&quot;))\n      d.value = obj.value;\n    if (hasProperty(desc, &quot;writable&quot;))\n      d.writable = !!desc.writable;\n    if (hasProperty(desc, &quot;get&quot;))\n    {\n      var g = desc.get;\n      if (!isCallable(g) &amp;&amp; g !== &quot;undefined&quot;)\n        throw new TypeError(&quot;bad get&quot;);\n      d.get = g;\n    }\n    if (hasProperty(desc, &quot;set&quot;))\n    {\n      var s = desc.set;\n      if (!isCallable(s) &amp;&amp; s !== &quot;undefined&quot;)\n        throw new TypeError(&quot;bad set&quot;);\n      d.set = s;\n    }\n\n    if ((&quot;get&quot; in d || &quot;set&quot; in d) &amp;&amp; (&quot;value&quot; in d || &quot;writable&quot; in d))\n      throw new TypeError(&quot;identity-confused descriptor&quot;);\n\n    return d;\n  }\n\n  if (typeof obj !== &quot;object&quot; || obj === null)\n    throw new TypeError(&quot;bad obj&quot;);\n\n  properties = Object(properties);\n  var keys = Object.keys(properties);\n  var descs = [];\n  for (var i = 0; i &lt; keys.length; i++)\n    descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);\n  for (var i = 0; i &lt; descs.length; i++)\n    Object.defineProperty(obj, descs[i][0], descs[i][1]);\n\n  return obj;\n}\r\n        \nBrowser compatibility\nBased on Kangax's compat tables.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n See also\n Object.defineProperty Object.keys\nBrowser compatibility\nBased on Kangax's compat tables.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n See also\n Object.defineProperty Object.keys\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyDescriptor","title":"Object.getOwnPropertyDescriptor","description":"Syntax\nObject.getOwnPropertyDescriptor(obj, prop)\nParameters\n obj The object in which to look for the property. prop The name of the property whose description is to be retrieved\n\nDescription\nThis method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. A property descriptor is a record with some of the following attributes:\n value The value associated with the property (data descriptors only). writable true if and only if the value associated with the property may be changed (data descriptors only). get A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only). set A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only). configurable true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. enumerable true if and only if this property shows up during enumeration of the properties on the corresponding object.\n\nFurther information about property descriptor attributes can be found on the Object.defineProperty descriptionExamples\n\r\n          var o, d;\n\no = { get foo() { return 17; } };\nd = Object.getOwnPropertyDescriptor(o, &quot;foo&quot;);\n\/\/ d is { configurable: true, enumerable: true, get: \/*the getter function*\/, set: undefined }\n\no = { bar: 42 };\nd = Object.getOwnPropertyDescriptor(o, &quot;bar&quot;);\n\/\/ d is { configurable: true, enumerable: true, value: 42, writable: true }\n\no = {};\nObject.defineProperty(o, &quot;baz&quot;, { value: 8675309, writable: false, enumerable: false });\nd = Object.getOwnPropertyDescriptor(o, &quot;baz&quot;);\n\/\/ d is { value: 8675309, writable: false, enumerable: false, configurable: false }\r\n        \nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 8 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nSee also\n Object.defineProperty\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/keys","title":"Object.keys","description":"Summary\nReturns an array of all own enumerable properties found upon a given object, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.keys(obj)\nParameters\n obj The object whose enumerable own properties are to be returned.\n\nDescription\nObject.keys returns an array whose elements are strings corresponding to the enumerable properties found directly upon object. The ordering of the properties is the same as that given by looping over the properties of the object manually. Examples\n\r\n          var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; alert(Object.keys(arr)); \/\/ will alert &quot;0,1,2&quot;\n\n\/\/ array like object\nvar obj = { 0 : &quot;a&quot;, 1 : &quot;b&quot;, 2 : &quot;c&quot;};\nalert(Object.keys(obj)); \/\/ will alert &quot;0,1,2&quot;\n\n\/\/ getFoo is property which isn't enumerable\nvar my_obj = Object.create({}, { getFoo : { value : function () { return this.foo } } });\nmy_obj.foo = 1;\n\nalert(Object.keys(my_obj)); \/\/ will alert only foo\r\n        \nIf you want all properties, even the not enumerable, see Object.getOwnPropertyNames.&nbsp;\nCompatiblity\nTo add compatible Object.keys support in older environments that do not natively support it, copy the following snippet:\n\r\n          if(!Object.keys) Object.keys = function(o){\n if (o !== Object(o))\n      throw new TypeError('Object.keys called on non-object');\n var ret=[],p;\n for(p in o) if(Object.prototype.hasOwnProperty.call(o,p)) ret.push(p);\n return ret;\n}\r\n         Browser support\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n See also\n propertyIsEnumerable Object.create Object.getOwnPropertyNames Bug&nbsp;307791 - Implement ES5's Object.keys(O) \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyNames","title":"Object.getOwnPropertyNames","description":"Summary\nReturns an array of all properties (enumerable or not) found upon a given object.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.getOwnPropertyNames(obj)\nParameters\n obj The object whose enumerable and non-enumerable own properties are to be returned.\n\nDescription\nObject.getOwnPropertyNames returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly upon obj. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a &nbsp;for...in loop&nbsp;(or by&nbsp;Object.keys) over the properties of the object. &nbsp;The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined. Examples\n\r\n          var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nprint(Object.getOwnPropertyNames(arr).sort()); \/\/ prints &quot;0,1,2,length&quot;\n\n\/\/ array-like object\nvar obj = { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;};\nprint(Object.getOwnPropertyNames(obj).sort()); \/\/ prints &quot;0,1,2&quot;\n\n\/\/ non-enumerable property\nvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });\nmy_obj.foo = 1;\n\nprint(Object.getOwnPropertyNames(my_obj).sort()); \/\/ prints &quot;foo, getFoo&quot;\r\n        \nIf you want only the enumerable properties, see Object.keys or use a for...in loop&nbsp;(although note that this will return enumerable properties not found directly upon that object but also along the prototype chain for the object). Cross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n See also\n propertyIsEnumerable Object.create Object.keys Bug&nbsp;518663 - ES5: Object.getOwnPropertyNames \n\n \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/GetPrototypeOf","title":"Object.GetPrototypeOf","description":"Summary\nReturns the prototype of the specified object.\n   Method of Object     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.getPrototypeOf(object)\nParameters\n object The object whose prototype is to be returned.\n\nDescription\nThrows a TypeError exception if the object parameter isn't an Object.\nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 5 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nEven if Opera does not support Object.getPrototypeOf() yet, it does support the non-standard __proto__ property since Opera 10.50.See also\n isPrototypeOf&nbsp; John&nbsp;Resig's post on getPrototypeOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/preventExtensions","title":"Object.preventExtensions","description":"Summary\nPrevents new properties from ever being added to an object (i.e. prevents future extensions to the object).\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n Syntax\nObject.preventExtensions(obj) Parameters\n obj The object which should be made non-extensible.\n Description\nAn object is extensible if new properties can be added to it. &nbsp;preventExtensions&nbsp;marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. &nbsp;Note that the properties of a non-extensible object, in general, may still be deleted. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a TypeError (most commonly, but not exclusively, when in&nbsp;strict mode).\nObject.preventExtensions only prevents addition of own properties. Properties can still be added to the object prototype. However, calling Object.preventExtensions on an object will also prevent extensions on its __proto__ ( \n\nDeprecated\n\n ) property.\nIf there is a way to turn an extensible object to a non-extensible one, there is no way to do the opposite in ECMAScript 5\nExamples\n\r\n          \/\/ Object.preventExtensions returns the object being made non-extensible.\nvar obj = {};\nvar obj2 = Object.preventExtensions(obj);\nassert(obj === obj2);\n\n\/\/ Objects are extensible by default.\nvar empty = {};\nassert(Object.isExtensible(empty) === true);\n\n\/\/ ...but that can be changed.\nObject.preventExtensions(empty);\nassert(Object.isExtensible(empty) === false);\n\n\/\/ Object.defineProperty throws when adding a new property to a non-extensible object.\nvar nonExtensible = { removable: true };\nObject.preventExtensions(nonExtensible);\nObject.defineProperty(nonExtensible, &quot;new&quot;, { value: 8675309 }); \/\/ throws a TypeError\n\n\/\/ In strict mode, attempting to add new properties to a non-extensible object throws a TypeError.\nfunction fail()\n{\n  &quot;use strict&quot;;\n  nonExtensible.newProperty = &quot;FAIL&quot;; \/\/ throws a TypeError\n}\nfail();\n\n\/\/ EXTENSION (only works in engines supporting __proto__ (which is deprecated. Use Object.getPrototypeOf instead)): A non-extensible object's prototype is immutable.\nvar fixed = Object.preventExtensions({});\nfixed.__proto__ = { oh: &quot;hai&quot; }; \/\/ throws a TypeError\r\n         Cross-browser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.See also\n Object.isExtensible Object.seal Object.isSealed Object.freeze Object.isFrozen\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isExtensible","title":"Object.isExtensible","description":"Summary\nDetermines if an object is extensible (whether it can have new properties added to it).\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.isExtensible(obj)\nParameters\n obj The object which should be checked.\n\nDescription\nObjects are extensible by default: they can have new properties added to them, and (in engines that support __proto__ \n\nDeprecated\n\n their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions, Object.seal, or Object.freeze.\nExamples\n\r\n          \/\/ New objects are extensible.\nvar empty = {};\nassert(Object.isExtensible(empty) === true);\n\n\/\/ ...but that can be changed.\nObject.preventExtensions(empty);\nassert(Object.isExtensible(empty) === false);\n\n\/\/ Sealed objects are by definition non-extensible.\nvar sealed = Object.seal({});\nassert(Object.isExtensible(sealed) === false);\n\n\/\/ Frozen objects are also by definition non-extensible.\nvar frozen = Object.freeze({});\nassert(Object.isExtensible(frozen) === false);\r\n         Cross-browser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.See also\n Object.preventExtensions Object.seal Object.isSealed Object.freeze Object.isFrozen\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/seal","title":"Object.seal","description":"Summary\nSeals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.seal(obj)\nParameters\n obj The object which should be sealed.\n\nDescription\nBy default objects are extensible (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a TypeError (most commonly, although not exclusively, when in strict mode&nbsp;code).\nThe prototype chain remains untouched. However, the __proto__ ( \n\nDeprecated\n\n ) property is sealed as well.\nExamples\n\r\n          var obj = {\n    prop: function () {},\n    foo: &quot;bar&quot;\n  };\n\n\/\/ New properties may be added, existing properties may be changed or removed\nobj.foo = &quot;baz&quot;;\nobj.lumpy = &quot;woof&quot;;\ndelete obj.prop;\n\nvar o = Object.seal(obj);\nassert(o === obj);\nassert(Object.isSealed(obj) === true);\n\n\/\/ Changing property values on a sealed object still works.\nobj.foo = &quot;quux&quot;;\n\n\/\/ But you can't convert data properties to accessors, or vice versa.\nObject.defineProperty(obj, &quot;foo&quot;, { get: function() { return &quot;g&quot;; } }); \/\/ throws a TypeError\n\n\/\/ Now any changes, other than to property values, will fail.\nobj.quaxxor = &quot;the friendly duck&quot;; \/\/ silently doesn't add the property\ndelete obj.foo; \/\/ silently doesn't delete the property\n\n\/\/ ...and in strict mode such attempts will throw TypeErrors\nfunction fail() {\n  &quot;use strict&quot;;\n  delete obj.foo; \/\/ throws a TypeError\n  obj.sparky = &quot;arf&quot;; \/\/ throws a TypeError\n}\nfail();\n\n\/\/ Attempted additions through Object.defineProperty will also throw\nObject.defineProperty(obj, &quot;ohai&quot;, { value: 17 }); \/\/ throws a TypeError\nObject.defineProperty(obj, &quot;foo&quot;, { value: &quot;eit&quot; }); \/\/ throws a TypeError\r\n         Examples\n\r\n          var obj = {\n    prop: function () {},\n    foo: &quot;bar&quot;\n  };\n\n\/\/ New properties may be added, existing properties may be changed or removed\nobj.foo = &quot;baz&quot;;\nobj.lumpy = &quot;woof&quot;;\ndelete obj.prop;\n\nvar o = Object.seal(obj);\nassert(o === obj);\nassert(Object.isSealed(obj) === true);\n\n\/\/ Changing property values on a sealed object still works.\nobj.foo = &quot;quux&quot;;\n\n\/\/ But you can't convert data properties to accessors, or vice versa.\nObject.defineProperty(obj, &quot;foo&quot;, { get: function() { return &quot;g&quot;; } }); \/\/ throws a TypeError\n\n\/\/ Now any changes, other than to property values, will fail.\nobj.quaxxor = &quot;the friendly duck&quot;; \/\/ silently doesn't add the property\ndelete obj.foo; \/\/ silently doesn't delete the property\n\n\/\/ ...and in strict mode such attempts will throw TypeErrors\nfunction fail() {\n  &quot;use strict&quot;;\n  delete obj.foo; \/\/ throws a TypeError\n  obj.sparky = &quot;arf&quot;; \/\/ throws a TypeError\n}\nfail();\n\n\/\/ Attempted additions through Object.defineProperty will also throw\nObject.defineProperty(obj, &quot;ohai&quot;, { value: 17 }); \/\/ throws a TypeError\nObject.defineProperty(obj, &quot;foo&quot;, { value: &quot;eit&quot; }); \/\/ throws a TypeError\r\n         Cross-browser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.See also\n Object.isSealed Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/freeze","title":"Object.freeze","description":"Summary\nFreezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed.&nbsp;In essence the object is made effectively immutable. The method returns the object being frozen.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.freeze(obj)\nParameters\n obj The object which should be frozen.\n\nDescription\nNothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\nValues cannot be changed for data properties. Accessor properties (getters and setters) work the same (and still give the illusion that you are changing the value)\nExamples\n\r\n          var obj = {\n  prop: function (){},\n  foo: &quot;bar&quot;\n};\n\n\/\/ New properties may be added, existing properties may be changed or removed\nobj.foo = &quot;baz&quot;;\nobj.lumpy = &quot;woof&quot;;\ndelete obj.prop;\n\nvar o = Object.freeze(obj);\n\nassert(Object.isFrozen(obj) === true);\n\n\/\/ Now any changes will fail\nobj.foo = &quot;quux&quot;; \/\/ silently does nothing\nobj.quaxxor = &quot;the friendly duck&quot;; \/\/ silently doesn't add the property\n\n\/\/ ...and in strict mode such attempts will throw TypeErrors\nfunction fail(){\n  &quot;use strict&quot;;\n  obj.foo = &quot;sparky&quot;; \/\/ throws a TypeError\n  delete obj.quaxxor; \/\/ throws a TypeError\n  obj.sparky = &quot;arf&quot;; \/\/ throws a TypeError\n}\nfail();\n\n\/\/ Attempted changes through Object.defineProperty will also throw\nObject.defineProperty(obj, &quot;ohai&quot;, { value: 17 }); \/\/ throws a TypeError\nObject.defineProperty(obj, &quot;foo&quot;, { value: &quot;eit&quot; }); \/\/ throws a TypeError\r\n        \nExamples\n\r\n          var obj = {\n  prop: function (){},\n  foo: &quot;bar&quot;\n};\n\n\/\/ New properties may be added, existing properties may be changed or removed\nobj.foo = &quot;baz&quot;;\nobj.lumpy = &quot;woof&quot;;\ndelete obj.prop;\n\nvar o = Object.freeze(obj);\n\nassert(Object.isFrozen(obj) === true);\n\n\/\/ Now any changes will fail\nobj.foo = &quot;quux&quot;; \/\/ silently does nothing\nobj.quaxxor = &quot;the friendly duck&quot;; \/\/ silently doesn't add the property\n\n\/\/ ...and in strict mode such attempts will throw TypeErrors\nfunction fail(){\n  &quot;use strict&quot;;\n  obj.foo = &quot;sparky&quot;; \/\/ throws a TypeError\n  delete obj.quaxxor; \/\/ throws a TypeError\n  obj.sparky = &quot;arf&quot;; \/\/ throws a TypeError\n}\nfail();\n\n\/\/ Attempted changes through Object.defineProperty will also throw\nObject.defineProperty(obj, &quot;ohai&quot;, { value: 17 }); \/\/ throws a TypeError\nObject.defineProperty(obj, &quot;foo&quot;, { value: &quot;eit&quot; }); \/\/ throws a TypeError\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 12 5.1   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\nBased on Kangax's compat table.\nSee also\n Object.isFrozen Object.preventExtensions Object.isExtensible   Object.seal Object.isSealed\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isSealed","title":"Object.isSealed","description":"Summary\nDetermine if an object is sealed.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.isSealed(obj)\nParameters\n obj The object which should be checked.\n\nDescription\nReturns true if the object is sealed, otherwise false. An object is sealed if it is non-extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable).\nExamples\n\r\n          \/\/ Objects aren't sealed by default.\nvar empty = {};\nassert(Object.isSealed(empty) === false);\n\n\/\/ If you make an empty object non-extensible, it is vacuously sealed.\nObject.preventExtensions(empty);\nassert(Object.isSealed(empty) === true);\n\n\/\/ The same is not true of a non-empty object, unless its properties are all non-configurable.\nvar hasProp = { fee: &quot;fie foe fum&quot; };\nObject.preventExtensions(hasProp);\nassert(Object.isSealed(hasProp) === false);\n\n\/\/ But make them all non-configurable and the object becomes sealed.\nObject.defineProperty(hasProp, &quot;fee&quot;, { configurable: false });\nassert(Object.isSealed(hasProp) === true);\n\n\/\/ The easiest way to seal an object, of course, is Object.seal.\nvar sealed = {};\nObject.seal(sealed);\nassert(Object.isSealed(sealed) === true);\n\n\/\/ A sealed object is, by definition, non-extensible.\nassert(Object.isExtensible(sealed) === false);\n\n\/\/ A sealed object might be frozen, but it doesn't have to be.\nassert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable\n\nvar s2 = Object.seal({ p: 3 });\nassert(Object.isFrozen(s2) === false); \/\/ &quot;p&quot; is still writable\n\nvar s3 = Object.seal({ get p() { return 0; } });\nassert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r\n         Examples\n\r\n          \/\/ Objects aren't sealed by default.\nvar empty = {};\nassert(Object.isSealed(empty) === false);\n\n\/\/ If you make an empty object non-extensible, it is vacuously sealed.\nObject.preventExtensions(empty);\nassert(Object.isSealed(empty) === true);\n\n\/\/ The same is not true of a non-empty object, unless its properties are all non-configurable.\nvar hasProp = { fee: &quot;fie foe fum&quot; };\nObject.preventExtensions(hasProp);\nassert(Object.isSealed(hasProp) === false);\n\n\/\/ But make them all non-configurable and the object becomes sealed.\nObject.defineProperty(hasProp, &quot;fee&quot;, { configurable: false });\nassert(Object.isSealed(hasProp) === true);\n\n\/\/ The easiest way to seal an object, of course, is Object.seal.\nvar sealed = {};\nObject.seal(sealed);\nassert(Object.isSealed(sealed) === true);\n\n\/\/ A sealed object is, by definition, non-extensible.\nassert(Object.isExtensible(sealed) === false);\n\n\/\/ A sealed object might be frozen, but it doesn't have to be.\nassert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable\n\nvar s2 = Object.seal({ p: 3 });\nassert(Object.isFrozen(s2) === false); \/\/ &quot;p&quot; is still writable\n\nvar s3 = Object.seal({ get p() { return 0; } });\nassert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r\n         Cross-browser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.See also\n Object.seal Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isFrozen","title":"Object.isFrozen","description":"Summary\nDetermine if an object is frozen.\n   Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.isFrozen(obj)\nParameters\n obj The object which should be checked.\n\nDescription\nAn object is frozen if and only if it is not extensible, all its properties are&nbsp;non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.\nExamples\n\r\n          \/\/ A new object is extensible, so it is not frozen.\nassert(Object.isFrozen({}) === false);\n\n\/\/ An empty object which is not extensible is vacuously frozen.\nvar vacuouslyFrozen = Object.preventExtensions({});\nassert(Object.isFrozen(vacuouslyFrozen) === true);\n\n\/\/ A new object with one property is also extensible, ergo not frozen.\nvar oneProp = { p: 42 };\nassert(Object.isFrozen(oneProp) === false);\n\n\/\/ Preventing extensions to the object still doesn't make it frozen,\n\/\/ because the property is still configurable (and writable).\nObject.preventExtensions(oneProp);\nassert(Object.isFrozen(oneProp) === false);\n\n\/\/ ...but then deleting that property makes the object vacuously frozen.\ndelete oneProp.p;\nassert(Object.isFrozen(oneProp) === true);\n\n\/\/ A non-extensible object with a non-writable but still configurable property is not frozen.\nvar nonWritable = { e: &quot;plep&quot; };\nObject.preventExtensions(nonWritable);\nObject.defineProperty(nonWritable, &quot;e&quot;, { writable: false }); \/\/ make non-writable\nassert(Object.isFrozen(nonWritable) === false);\n\n\/\/ Changing that property to non-configurable then makes the object frozen.\nObject.defineProperty(nonWritable, &quot;e&quot;, { configurable: false }); \/\/ make non-configurable\nassert(Object.isFrozen(nonWritable) === true);\n\n\/\/ A non-extensible object with a non-configurable but still writable property also isn't frozen.\nvar nonConfigurable = { release: &quot;the kraken!&quot; };\nObject.preventExtensions(nonConfigurable);\nObject.defineProperty(nonConfigurable, &quot;release&quot;, { configurable: false });\nassert(Object.isFrozen(nonConfigurable) === false);\n\n\/\/ Changing that property to non-writable then makes the object frozen.\nObject.defineProperty(nonConfigurable, &quot;release&quot;, { writable: false });\nassert(Object.isFrozen(nonConfigurable) === true);\n\n\/\/ A non-extensible object with a configurable accessor property isn't frozen.\nvar accessor = { get food() { return &quot;yum&quot;; } };\nObject.preventExtensions(accessor);\nassert(Object.isFrozen(accessor) === false);\n\n\/\/ ...but make that property non-configurable and it becomes frozen.\nObject.defineProperty(accessor, &quot;food&quot;, { configurable: false });\nassert(Object.isFrozen(accessor) === true);\n\n\/\/ But the easiest way for an object to be frozen is if Object.freeze has been called on it.\nvar frozen = { 1: 81 };\nassert(Object.isFrozen(frozen) === false);\nObject.freeze(frozen);\nassert(Object.isFrozen(frozen) === true);\n\n\/\/ By definition, a frozen object is non-extensible.\nassert(Object.isExtensible(frozen) === false);\n\n\/\/ Also by definition, a frozen object is sealed.\nassert(Object.isSealed(frozen) === true);\r\n        \nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.\nSee also\n Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed\nBrowser compatibility\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nBased on Kangax's compat table.\nSee also\n Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed\nSee also\n Object.freeze  Object.preventExtensions Object.isExtensible  Object.seal Object.isSealed\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/constructor","title":"Object.constructor","description":"Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, &quot;read-only&quot;).\n   Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Description\nAll objects inherit a constructor property from their prototype:\n\no = new Object \/\/ or o = {} in JavaScript 1.2\no.constructor == Object\na = new Array \/\/ or a = [] in JavaScript 1.2\na.constructor == Array\nn = new Number(3)\nn.constructor == Number\n\nEven though you cannot construct most HTML objects, you can do comparisons. For example,\n\ndocument.constructor == Document\ndocument.form3.constructor == Form\n\nExamples\nExample: Displaying the constructor of an object\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\nfunction Tree(name) {\n   this.name = name;\n}\ntheTree = new Tree(&quot;Redwood&quot;);\nconsole.log(&quot;theTree.constructor is &quot; + theTree.constructor);\n\nThis example displays the following output:\n\ntheTree.constructor is function Tree(name) {\n    this.name = name;\n}\n\nExample: Changing the constructor of an object\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and &quot;test&quot; variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.\n\nfunction Type(){};\nvar\ttypes = [\n\tnew Array,\t[],\n\tnew Boolean,\ttrue,\n\tnew Date,\n\tnew Error,\n\tnew Function,\tfunction(){},\n\tMath,\t\n\tnew Number,\t1,\n\tnew Object,\t{},\n\tnew RegExp,\t\/(?:)\/,\n\tnew String,\t&quot;test&quot;\n];\nfor(var i = 0; i &lt; types.length; i++){\n\ttypes[i].constructor = Type;\n\ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n};\nalert(types.join(&quot;\\n&quot;));\n\nExample: Displaying the constructor of an object\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\nfunction Tree(name) {\n   this.name = name;\n}\ntheTree = new Tree(&quot;Redwood&quot;);\nconsole.log(&quot;theTree.constructor is &quot; + theTree.constructor);\n\nThis example displays the following output:\n\ntheTree.constructor is function Tree(name) {\n    this.name = name;\n}\n\nExample: Changing the constructor of an object\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and &quot;test&quot; variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.\n\nfunction Type(){};\nvar\ttypes = [\n\tnew Array,\t[],\n\tnew Boolean,\ttrue,\n\tnew Date,\n\tnew Error,\n\tnew Function,\tfunction(){},\n\tMath,\t\n\tnew Number,\t1,\n\tnew Object,\t{},\n\tnew RegExp,\t\/(?:)\/,\n\tnew String,\t&quot;test&quot;\n];\nfor(var i = 0; i &lt; types.length; i++){\n\ttypes[i].constructor = Type;\n\ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n};\nalert(types.join(&quot;\\n&quot;));\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/proto","title":"Object.proto","description":"Summary\nRefers to the prototype of the object, which may be an object or null&nbsp;(which usually means the object is Object.prototype, which has no prototype). &nbsp;It is sometimes used to implement prototype-inheritance based property lookup.\nThis property is deprecated and should not be used in new code: use Object.getPrototypeOf&nbsp;instead.\nSyntax\nvar proto = obj.__proto__;\nNote: this is two underscores, followed by the five characters &quot;proto&quot;, followed by two more underscores.\nDescription\nWhen an object is created, its __proto__ property is set to constructing function's prototype property. For example var fred = new Employee(); will cause fred.__proto__ = Employee.prototype;.\nThis is used at runtime to look up properties which are not declared in the object directly. E.g. when fred.doSomething() is executed and fred does not contain a doSomething, fred.__proto__ is checked, which points to Employee.prototype, which contains a doSomething, i.e. fred.__proto__.doSomething() is invoked.\nNote that __proto__ is a property of the instances, whereas prototype is a property of their constructor functions.\nExample\nThis example demonstrates that the __proto__ property can be changed to point to a different object after initial construction. This change will alter the lookup results for object properties. This example also illustrates that all objects have __proto__, including the objects bound to the prototype property of functions. The object  anOnion will have a __proto__ property equal to Plant.prototype; if we write anOnion.foo, then we will lookup foo in the anOnion object first, then in Plant.prototype (the value of anOnion.__proto__), then in Lifeform.prototype (the value of Plant.prototype set by the call to extend()), and finally in Lifeform.__proto__.\n\r\n          function extend(child, supertype) {\n   child.prototype.__proto__ = supertype.prototype;\n}\n\nextend(Animal, Lifeform);\nextend(Plant, Lifeform);\n\nvar anOnion = new Plant();\r\n        \nHowever, this only applies to extensible objects:&nbsp;a non-extensible object's&nbsp;__proto__&nbsp;property (more generally, the object's prototype) cannot be changed:\n\r\n          var obj = {};\nObject.preventExtensions(obj);\n\nobj.__proto__ = {}; \/\/ throws a TypeError\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineGetter","title":"Object.defineGetter","description":"Summary\nBinds an object's property to a function to be called when that property is looked up.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__defineGetter__(sprop, fun)\nParameters\n sprop a string containing the name of the property to bind to the given function\n\n fun a function to be bound to a lookup of the specified property\n\nDescription\nThe __defineGetter__ allows a getter to be defined on a pre-existing object.\nSee also\n get __lookupGetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineSetter","title":"Object.defineSetter","description":"Summary\nBinds an object's property to a function to be called when an attempt is made to set that property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__defineSetter__(sprop, fun)\nParameters\n sprop a string containing the name of the property to be bound to the given function\n\n fun a function to be called when there is an attempt to set the specified property. This function takes the form function (val) { .&nbsp;.&nbsp;. }  val an alias for the variable that holds the value attempted to be assigned to prop  \n\nDescription\nThe __defineSetter__ method allows a setter to be defined on a pre-existing object.\nSee also\n set __lookupSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/eval","title":"Object.eval","description":"Summary\nEvaluates a string of JavaScript code in the context of an object.Syntax\nobject.eval(string)\nParameters\n string&nbsp; Any string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.\n\nDescription\nThe eval method can't no longer be used as a method of Object. Use the top-level eval function instead.See Also\neval\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/hasOwnProperty","title":"Object.hasOwnProperty","description":"Summary\nReturns a boolean indicating whether the object has the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition  \nSyntax\nobj.hasOwnProperty(prop)\nParameters\n prop The name of the property to test.\n\nDescription\nEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain.\nExamples\nExample: Using hasOwnProperty to test for a property's existence\nThe following example determines whether the o object contains a property named prop:\n\r\n          o = new Object();\no.prop = 'exists';\n\nfunction changeO() {\n  o.newprop = o.prop;\n  delete o.prop;\n}\n\no.hasOwnProperty('prop');   \/\/returns true\nchangeO();\no.hasOwnProperty('prop');   \/\/returns false\r\n        \nExample: Direct versus inherited properties\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\r\n          o = new Object();\no.prop = 'exists';\no.hasOwnProperty('prop');             \/\/ returns true\no.hasOwnProperty('toString');         \/\/ returns false\no.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r\n        \nExample: Iterating over the properties of an object\nThe following example shows how to iterate over the properties of an object without executing on inherit properties.\n\r\n          var buz = {\n    fog: 'stack'\n};\n\nfor (var name in buz) {\n    if (buz.hasOwnProperty(name)) {\n        alert(&quot;this is fog (&quot; + name + &quot;) for sure. Value: &quot; + buz[name]);\n    }\n    else {\n        alert(name); \/\/ toString or something else\n    }\n}\r\n        \nExample: Using hasOwnProperty to test for a property's existence\nThe following example determines whether the o object contains a property named prop:\n\r\n          o = new Object();\no.prop = 'exists';\n\nfunction changeO() {\n  o.newprop = o.prop;\n  delete o.prop;\n}\n\no.hasOwnProperty('prop');   \/\/returns true\nchangeO();\no.hasOwnProperty('prop');   \/\/returns false\r\n        \nExample: Direct versus inherited properties\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\r\n          o = new Object();\no.prop = 'exists';\no.hasOwnProperty('prop');             \/\/ returns true\no.hasOwnProperty('toString');         \/\/ returns false\no.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r\n        \nExample: Iterating over the properties of an object\nThe following example shows how to iterate over the properties of an object without executing on inherit properties.\n\r\n          var buz = {\n    fog: 'stack'\n};\n\nfor (var name in buz) {\n    if (buz.hasOwnProperty(name)) {\n        alert(&quot;this is fog (&quot; + name + &quot;) for sure. Value: &quot; + buz[name]);\n    }\n    else {\n        alert(name); \/\/ toString or something else\n    }\n}\r\n        \nSee also\nfor...in\nin\ninheritance\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isPrototypeOf","title":"Object.isPrototypeOf","description":"Summary\nTests for an object in another object's prototype chain.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nprototype.isPrototypeOf(object)\nParameters\n prototype &nbsp; an object to be tested against each link in the prototype chain of the object&nbsp; argument\n\nNote:&nbsp;isPrototypeOf differs from instanceof operator. In the expression object instanceof AFunction, the object prototype chain is checked against AFunction.prototype, not against AFunction itself\n\n object the object whose prototype chain will be searched\n\nDescription\nisPrototypeOf allows you to check whether or not an object exists within another object's prototype chain.\nFor example, consider the following prototype chain:\nfunction Fee() {\n  \/\/ . . .\n}\n\nfunction Fi() {\n  \/\/ . . .\n}\nFi.prototype = new Fee();\n\nfunction Fo() {\n  \/\/ . . .\n}\nFo.prototype = new Fi();\n\nfunction Fum() {\n  \/\/ . . .\n}\nFum.prototype = new Fo();\n\nLater on down the road, if you instantiate Fum and need to check if Fi's prototype exists within the Fum prototype chain, you could do this:\nvar fum = new Fum();\n. . .\n\nif (Fi.prototype.isPrototypeOf(fum)) {\n  \/\/ do something safe\n}\n\nThis, along with the instanceof operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.\nSee also\n instanceof getProtoypeOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupGetter","title":"Object.lookupGetter","description":"Summary\nReturn the function bound as a getter to the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None, but see getOwnPropertyDescriptor and getPrototypeOf.  \nSyntax\nobj.__lookupGetter__(sprop)\nParameters\n sprop a string containing the name of the property whose getter should be returned\n\nDescription\nIf a getter has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. __lookupGetter__ can be used to obtain a reference to the getter function.\nIt is now possible to do this in a standardized way using getOwnPropertyDescriptor and getPrototypeOf.See also\n get __defineGetter__ __defineSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/noSuchMethod","title":"Object.noSuchMethod","description":"Summary\nExecutes a function when a non-existent method is called on an object.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__noSuchMethod__ = fun\nParameters\n fun a function that takes the form function (id, args) { .&nbsp;.&nbsp;. }  id the name of the non-existent method that was called args an array of the arguments passed to the method  \n\nDescription\nBy default, an attempt to call a method that doesn't exist on an object results in a TypeError being thrown. This behavior can be circumvented by defining a function at that object's __noSuchMethod__ member. The function takes two arguments, the first is the name of the method attempted and the second is an array of the arguments that were passed in the method call. The second argument is an actual array (that is, it inherits through the Array prototype chain) and not the array-like arguments object.\nIf this method cannot be called, either as if undefined by default, if deleted, or if manually set to a non-function, the JavaScript engine will revert to throwing TypeErrors.\nExample\n__noSuchMethod__ can be used to simulate multiple inheritance.\nAn example of code that implements a primitive form of multiple inheritance is shown below.\n\r\n          \/\/ Doesn't work with multiple inheritance objects as parents\n\nfunction noMethod(name, args) {\n  var parents=this.__parents_;\n  \n  \/\/ Go through all parents\n  \n  for (var i=0;i&lt;parents.length;i++) {\n    \/\/ If we find a function on the parent, we call it\n    if (typeof parents[i][name] ==&quot;function&quot;) {\n      return parents[i][name].apply(this, args);\n    }\n  }\n  \n  \/\/ If we get here, the method hasn't been found\n  \n  throw new TypeError;\n}\n\n\/\/ Used to add a parent for multiple inheritance\n\nfunction addParent(obj, parent) {\n  \/\/ If the object isn't initialized, initialize it\n  \n  if (!obj.__parents_) {\n    obj.__parents_=[];\n    obj.__noSuchMethod__=noMethod;\n  }\n  \n  \/\/ Add the parent\n  \n  obj.__parents_.push(parent);\n}\r\n        \nAn example of using this idea is shown below.\n\r\n          \/\/ Example base class 1\n\nfunction NamedThing(name){\n  this.name=name;\n}\n\nNamedThing.prototype = {\n  getName: function() {return this.name;},\n  setName: function(newName) {this.name=newName;}\n}\n\n\/\/Example base class 2\n\nfunction AgedThing(age){\n  this.age=age;\n}\n\nAgedThing.prototype = {\n  getAge: function(){return this.age;},\n  setAge: function(age){this.age=age;}\n}\n\n\/\/ Child class. inherits from NamedThing and AgedThing as well as defining address\n\nfunction Person(name, age, address){\n  addParent(this, NamedThing.prototype);\n  NamedThing.call(this, name);\n  addParent(this, AgedThing.prototype);\n  AgedThing.call(this, age);\n  this.address=address;\n}\n\nPerson.prototype = {\n  getAddr: function() {return this.address;},\n  setAddr: function(addr) {this.address=addr;}\n}\n\nvar bob=new Person(&quot;bob&quot;, 25, &quot;New York&quot;);\n\nconsole.log(&quot;getAge is &quot;+((&quot;getAge&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's age is: &quot;+bob.getAge());\nconsole.log(&quot;getName is &quot;+((&quot;getName&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's name is: &quot;+bob.getName());\nconsole.log(&quot;getAddr is &quot;+((&quot;getAddr&quot; in bob)?&quot;in&quot;:&quot;not in&quot;)+&quot; bob&quot;);\nconsole.log(&quot;bob's address is: &quot;+bob.getAddr());\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/propertyIsEnumerable","title":"Object.propertyIsEnumerable","description":"Summary\nReturns a Boolean indicating whether the specified property is enumerable.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition  \nSyntax\nobj.propertyIsEnumerable(prop)Parameters\n prop&nbsp; The name of the property to test.\n\nDescription\nEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for...in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.\nNote: Starting in JavaScript 1.8.1 (in Firefox 3.6), propertyIsEnumerable(&quot;prototype&quot;) returns false instead of true; this makes the result compliant with ECMAScript 5.\nExamples\nExample: A basic use of propertyIsEnumerable\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\r\n          var o = {};\nvar a = [];\no.prop = 'is enumerable';\na[0] = 'is enumerable';\n\no.propertyIsEnumerable('prop');   \/\/ returns true\na.propertyIsEnumerable(0);        \/\/ returns true\r\n        \nExample: User-defined versus built-in objects\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\r\n          var a = ['is enumerable'];\n\na.propertyIsEnumerable(0);          \/\/ returns true\na.propertyIsEnumerable('length');   \/\/ returns false\n\nMath.propertyIsEnumerable('random');   \/\/ returns false\nthis.propertyIsEnumerable('Math');     \/\/ returns false\r\n        \nExample: Direct versus inherited properties\n\r\n          var a = [];\na.propertyIsEnumerable('constructor');         \/\/ returns false\n\nfunction firstConstructor()\n{\n  this.property = 'is not enumerable';\n}\nfirstConstructor.prototype.firstMethod = function () {};\n\nfunction secondConstructor()\n{\n  this.method = function method() { return 'is enumerable'; };\n}\n\nsecondConstructor.prototype = new firstConstructor;\nsecondConstructor.prototype.constructor = secondConstructor;\n\nvar o = new secondConstructor();\no.arbitraryProperty = 'is enumerable';\n\no.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true\no.propertyIsEnumerable('method');              \/\/ returns true\no.propertyIsEnumerable('property');            \/\/ returns false\n\no.property = 'is enumerable';\n\no.propertyIsEnumerable('property');            \/\/ returns true\n\n\/\/ These return false as they are on the prototype which \n\/\/ propertyIsEnumerable does not consider (even though the last two\n\/\/ are iteratable with for-in)\no.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6)\no.propertyIsEnumerable('constructor'); \/\/ returns false\no.propertyIsEnumerable('firstMethod'); \/\/ returns false\r\n        \nExample: A basic use of propertyIsEnumerable\nThe following example shows the use of propertyIsEnumerable on objects and arrays:\n\r\n          var o = {};\nvar a = [];\no.prop = 'is enumerable';\na[0] = 'is enumerable';\n\no.propertyIsEnumerable('prop');   \/\/ returns true\na.propertyIsEnumerable(0);        \/\/ returns true\r\n        \nExample: User-defined versus built-in objects\nThe following example demonstrates the enumerability of user-defined versus built-in properties:\n\r\n          var a = ['is enumerable'];\n\na.propertyIsEnumerable(0);          \/\/ returns true\na.propertyIsEnumerable('length');   \/\/ returns false\n\nMath.propertyIsEnumerable('random');   \/\/ returns false\nthis.propertyIsEnumerable('Math');     \/\/ returns false\r\n        \nExample: Direct versus inherited properties\n\r\n          var a = [];\na.propertyIsEnumerable('constructor');         \/\/ returns false\n\nfunction firstConstructor()\n{\n  this.property = 'is not enumerable';\n}\nfirstConstructor.prototype.firstMethod = function () {};\n\nfunction secondConstructor()\n{\n  this.method = function method() { return 'is enumerable'; };\n}\n\nsecondConstructor.prototype = new firstConstructor;\nsecondConstructor.prototype.constructor = secondConstructor;\n\nvar o = new secondConstructor();\no.arbitraryProperty = 'is enumerable';\n\no.propertyIsEnumerable('arbitraryProperty');   \/\/ returns true\no.propertyIsEnumerable('method');              \/\/ returns true\no.propertyIsEnumerable('property');            \/\/ returns false\n\no.property = 'is enumerable';\n\no.propertyIsEnumerable('property');            \/\/ returns true\n\n\/\/ These return false as they are on the prototype which \n\/\/ propertyIsEnumerable does not consider (even though the last two\n\/\/ are iteratable with for-in)\no.propertyIsEnumerable('prototype'); \/\/ returns false (as of JS 1.8.1\/FF3.6)\no.propertyIsEnumerable('constructor'); \/\/ returns false\no.propertyIsEnumerable('firstMethod'); \/\/ returns false\r\n        \nSee also\nfor...in "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupSetter","title":"Object.lookupSetter","description":"Summary\nReturn the function bound as a setter to the specified property.\n   Method of Object     Implemented in JavaScript ?   ECMAScript Edition None  \n\nSyntax\nobj.__lookupSetter__(sprop)\nParameters\n sprop a string containing the name of the property whose setter should be returned\n\nDescription\nIf a setter has been defined for an object's property, it's not possible to reference the setter function through that property, because that property refers to the return value of that function. __lookupSetter__ can be used to obtain a reference to the setter function.\nSee also\n set __defineSetter__ JS Guide:Defining Getters and Setters\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/unwatch","title":"Object.unwatch","description":"Summary\nRemoves a watchpoint set with the watch() method.\n   Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none  \n\nSyntax\nunwatch(prop) \nParameters\n prop The name of a property of the object to stop watching.\n\nDescription\nThe JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman.\nBy default, this method is inherited by every object descended from Object.\nNote: The reason for unwatch() to take the property name prop as its only parameter is due to the &quot;single handler allowing&quot; behavior of the watch() method.Examples\nSee watch().\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/constructor","title":"RegExp.constructor","description":" Summary \nReturns a reference to the RegExp function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee Object.constructor\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/prototype","title":"RegExp.prototype","description":"Summary\nRepresents the prototype object for the RegExp constructor.\nDescription\nSee RegExp for a description of RegExp instances.\nRegExp instances inherit from RegExp.prototype. Modifications to the prototype object are propagated to all RegExp instances.\nProperties\nSee also Deprecated RegExp Properties\nNote that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.\n constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky \nNew in Firefox 3\n Non-standard      Whether or not the search is sticky.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n  See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.  \n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch\n\n See also  RegExp Function.prototype  "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/watch","title":"Object.watch","description":"Summary\nWatches for a property to be assigned a value and runs a function when that occurs.\n   Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none  \n\nSyntax\nobject.watch(prop, handler) \nParameters\n prop The name of a property of the object on which you wish to monitor changes.\n\n handler A function to call when the specified property's value changes.\n\nDescription\nWarning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details.\nWatches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval).\nIf you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect.\nTo remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object.\nThe JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman.\nIn Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler.\nNote: Calling watch() on an object for a specific property overrides and previous handler attached for that property.\nExamples\nExample: Using watch and unwatch\n\r\n          var o = {p:1};\no.watch(&quot;p&quot;,\n  function (id, oldval, newval) {\n    console.log(&quot;o.&quot; + id + &quot; changed from &quot; + oldval + &quot; to &quot; + newval);\n    return newval;\n  });\n\no.p = 2;\no.p = 3;\ndelete o.p;\no.p = 4;\n\no.unwatch('p');\no.p = 5;\r\n        \nThis script displays the following:\no.p changed from 1 to 2\no.p changed from 2 to 3\no.p changed from undefined to 4\n\nExample: Using watch to validate an object's properties\nYou can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200.\n\r\n          Person = function(name,age) {\n  this.watch(&quot;age&quot;, Person.prototype._isValidAssignment);\n  this.watch(&quot;name&quot;, Person.prototype._isValidAssignment);\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return this.name + &quot;, &quot; + this.age;\n};\n\nPerson.prototype._isValidAssignment = function(id, oldval, newval) {\n  if (id === &quot;name&quot; &amp;&amp; (!newval || newval.length &gt; 30)) {\n    throw new RangeError(&quot;invalid name for &quot; + this);\n  }\n  if (id === &quot;age&quot;  &amp;&amp; (newval &lt; 0 || newval &gt; 200)) {\n    throw new RangeError(&quot;invalid age for &quot; + this);\n  }\n  return newval;\n}\n\nwill = new Person(&quot;Will&quot;, 29);\nprint(will);   \/\/ Will, 29\n\ntry {\n  will.name = &quot;&quot;;\n} catch (e) {\n  print(e);\n}\n\ntry {\n  will.age = -4;\n} catch (e) {\n  print(e);\n}\r\n        \nThis script displays the following:\nWill, 29\nRangeError: invalid name for Will, 29\nRangeError: invalid age for Will, 29\n\nExample: Using watch and unwatch\n\r\n          var o = {p:1};\no.watch(&quot;p&quot;,\n  function (id, oldval, newval) {\n    console.log(&quot;o.&quot; + id + &quot; changed from &quot; + oldval + &quot; to &quot; + newval);\n    return newval;\n  });\n\no.p = 2;\no.p = 3;\ndelete o.p;\no.p = 4;\n\no.unwatch('p');\no.p = 5;\r\n        \nThis script displays the following:\no.p changed from 1 to 2\no.p changed from 2 to 3\no.p changed from undefined to 4\n\nExample: Using watch to validate an object's properties\nYou can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200.\n\r\n          Person = function(name,age) {\n  this.watch(&quot;age&quot;, Person.prototype._isValidAssignment);\n  this.watch(&quot;name&quot;, Person.prototype._isValidAssignment);\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.toString = function() {\n  return this.name + &quot;, &quot; + this.age;\n};\n\nPerson.prototype._isValidAssignment = function(id, oldval, newval) {\n  if (id === &quot;name&quot; &amp;&amp; (!newval || newval.length &gt; 30)) {\n    throw new RangeError(&quot;invalid name for &quot; + this);\n  }\n  if (id === &quot;age&quot;  &amp;&amp; (newval &lt; 0 || newval &gt; 200)) {\n    throw new RangeError(&quot;invalid age for &quot; + this);\n  }\n  return newval;\n}\n\nwill = new Person(&quot;Will&quot;, 29);\nprint(will);   \/\/ Will, 29\n\ntry {\n  will.name = &quot;&quot;;\n} catch (e) {\n  print(e);\n}\n\ntry {\n  will.age = -4;\n} catch (e) {\n  print(e);\n}\r\n        \nThis script displays the following:\nWill, 29\nRangeError: invalid name for Will, 29\nRangeError: invalid age for Will, 29\n\nCompatibility\n This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work\n\nSee also\nunwatch()\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/global","title":"RegExp.global","description":" Summary \nWhether or not the &quot;g&quot; flag is used with the regular expression.\n\n\n\nProperty of RegExp instances\n\n\n\nRead-only\n\n\n\n\nImplemented in:\nJavaScript 1.2, NES3.0\nJavaScript 1.5: global is a property of a RegExp instance, not the RegExp object.\n\n\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n Description \nglobal is a property of an individual regular expression object.\nThe value of global is true if the &quot;g&quot; flag was used; otherwise, false. The &quot;g&quot; flag indicates that the regular expression should be tested against all possible matches in a string.\nYou cannot change this property directly.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/ignoreCase","title":"RegExp.ignoreCase","description":" Summary \nWhether or not the &quot;i&quot; flag is used with the regular expression.\n\n\n\nProperty of RegExp instances\n\n\nImplemented in:\nJavaScript 1.2, NES3.0\nJavaScript 1.5: ignoreCase is a property of a RegExp instance, not the RegExp object.\n\n\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n Description \nignoreCase is a property of an individual regular expression object.\nThe value of ignoreCase is true if the &quot;i&quot; flag was used; otherwise, false. The &quot;i&quot; flag indicates that case should be ignored while attempting a match in a string.\nYou cannot change this property directly.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/multiline","title":"RegExp.multiline","description":" Summary \nReflects whether or not to search in strings across multiple lines.\n\n\n\nProperty of RegExp instances\n\n\n\nStatic\n\n\n\n\nImplemented in:\nJavaScript 1.2, NES3.0\nJavaScript 1.5: multiline is a property of a RegExp instance, not the RegExp object.\n\n\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n Description \nmultiline is a property of an individual regular expression object..\nThe value of multiline is true if the &quot;m&quot; flag was used; otherwise, false. The &quot;m&quot; flag indicates that a multiline input string should be treated as multiple lines. For example, if &quot;m&quot; is used, &quot;^&quot; and &quot;$&quot; change from matching at only the start or end of the entire string to the start or end of any line within the string.\nYou cannot change this property directly.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/lastIndex","title":"RegExp.lastIndex","description":" Summary \nA read\/write integer property that specifies the index at which to start the next match.\n\n\n\nProperty of RegExp\n\n\nImplemented in:\nJavaScript 1.2, NES3.0\nJavaScript 1.5: lastIndex is a property of a RegExp instance, not the RegExp object.\n\n\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n Description \nlastIndex is a property of an individual regular expression object.\nThis property is set only if the regular expression used the &quot;g&quot; flag to indicate a global search. The following rules apply:\n\n If lastIndex is greater than the length of the string, regexp.test and regexp.exec fail, and lastIndex is set to 0.\n\n If lastIndex is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at lastIndex.\n\n If lastIndex is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and lastIndex is reset to 0.\n\n Otherwise, lastIndex is set to the next position following the most recent match.\n\nFor example, consider the following sequence of statements:\n\n re = \/(hi)?\/g&nbsp; Matches the empty string. \n re(&quot;hi&quot;)&nbsp; Returns [&quot;hi&quot;, &quot;hi&quot;] with lastIndex equal to 2. \n re(&quot;hi&quot;)&nbsp; Returns [&quot;&quot;], an empty array whose zeroth element is the match string. In this case, the empty string because lastIndex was 2 (and still is 2) and &quot;hi&quot; has length 2.\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/source","title":"RegExp.source","description":" Summary \nA read-only property that contains the text of the pattern, excluding the forward slashes.\n\n\n\nProperty of RegExp instances\n\n\n\nStatic\n\n\n\n\nImplemented in:\nJavaScript 1.2, NES3.0\nJavaScript 1.5: source is a property of a RegExp instance, not the RegExp object.\n\n\n\n\nECMA Version:\nECMA-262, Edition 3\n\n\n Description \nsource is a property of an individual regular expression object.\nYou cannot change this property directly.\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/test","title":"RegExp.test","description":"Summary\nExecutes the search for a match between a regular expression and a specified string. Returns true or false.\n   Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nregexp.test([str]) \nParameters\n regexp The name of the regular expression. It can be a variable name or a literal.\n\n str The string against which to match the regular expression.\n\nDescription\nWhen you want to know whether a pattern is found in a string use the test method (similar to the String.search method); for more information (but slower execution) use the exec method (similar to the String.match method). As with exec (or in combination with it), test called multiple times on the same global regular expression instance will advance past the previous match.\n \nGecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n\n Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n, test() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string &quot;undefined&quot;. This is fixed; now \/undefined\/.test() correctly results in true, instead of an error.\n\nExamples\nExample: Using test\nThe following example prints a message which depends on the success of the test:\n\r\n          function testinput(re, str){\n   if (re.test(str)) {\n      midstring = &quot; contains &quot;;\n   } else {\n      midstring = &quot; does not contain &quot;;\n   }\n   document.write (str + midstring + re.source);\n}\r\n        \nExample: Using test\nThe following example prints a message which depends on the success of the test:\n\r\n          function testinput(re, str){\n   if (re.test(str)) {\n      midstring = &quot; contains &quot;;\n   } else {\n      midstring = &quot; does not contain &quot;;\n   }\n   document.write (str + midstring + re.source);\n}\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/exec","title":"RegExp.exec","description":"Summary\nExecutes a search for a match in a specified string. Returns a result array, or null.\n   Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nresult = regexp.exec(str)\nParameters\n regexp The name of the regular expression. It can be a variable name or a literal.\n\n str The string against which to match the regular expression.\n\nDescription\nIf the match succeeds, the exec method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.&nbsp; If the match fails, the exec method returns null.\nIf you are executing a match simply to find true or false, use the test method or the String search method.\nConsider the following example:\n\r\n          \/\/ Match one d followed by one or more b's followed by one d\n\/\/ Remember matched b's and the following d\n\/\/ Ignore case\nvar re = \/d(b+)(d)\/ig;\nvar result = re.exec(&quot;cdbBdbsbz&quot;);\r\n        \nThe following table shows the results for this script:\n   Object Property\/Index Description Example   result &nbsp; The content of myArray. [&quot;dbBd&quot;, &quot;bB&quot;, &quot;d&quot;]   index The 0-based index of the match in the string. 1   input The original string. cdbBdbsbz   [0] The last matched characters dbBd   [1], ...[n] The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited. [1] = bB [2] = d   re lastIndex The index at which to start the next match. 5   ignoreCase Indicates if the &quot;i&quot; flag was used to ignore case. true   global Indicates if the &quot;g&quot; flag was used for a global match. true   multiline Indicates if the &quot;m&quot; flag was used to search in strings across multiple line. false   source The text of the pattern. d(b+)(d)  \n\n \nGecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n\n Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n, exec() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string &quot;undefined&quot;. This is fixed; now \/undefined\/.exec() correctly results in ['undefined'], instead of an error.\n\nIf your regular expression uses the &quot;g&quot; flag, you can use the exec method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of str specified by the regular expression's lastIndex property (test will also advance the lastIndex property). For example, assume you have this script:\n\r\n          var myRe = \/ab*\/g;\nvar str = &quot;abbcdefabh&quot;;\nvar myArray;\nwhile ((myArray = myRe.exec(str)) != null)\n{\n  var msg = &quot;Found &quot; + myArray[0] + &quot;.  &quot;;\n  msg += &quot;Next match starts at &quot; + myRe.lastIndex;\n  print(msg);\n}\r\n        \nThis script displays the following text:\n\nFound abb. Next match starts at 3\nFound ab. Next match starts at 9\n\nYou can also use exec() without creating a RegExp object:\n\r\n          var matches = \/(hello \\S+)\/.exec('This is a hello world!');\nalert(matches[1]);\r\n        \n&nbsp;This will display an alert containing 'hello world!';\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toSource","title":"RegExp.toSource","description":" Summary \nReturns a string representing the source code of the object.\n\n   Method of RegExp     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \nregexp.toSource()\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in RegExp object, toSource returns the following string indicating that the source code is not available:\n\nfunction RegExp() {[native code]}\n\n For instances of RegExp, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n See Also \nObject.prototype.toSource\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/replace","title":"String.replace","description":"Summary\nReturns a new string with some or all matches of a pattern replaced by a replacement.&nbsp; The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nstr.replace(regexp|substr, newSubStr|function[, Non-standard      flags]);\nParameters\n regexp A RegExp object. The match is replaced by the return value of parameter #2.\n\n substr A String that is to be replaced by newSubStr.\n\n newSubStr The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the &quot;Specifying a string as a parameter&quot; section below.\n\n function A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). The arguments supplied to this function are described in the &quot;Specifying a function as a parameter&quot; section below.\n\n flags Non-standard     A string specifying a combination of regular expression flags. The use of the flags parameter in the String.replace method is non-standard, use a RegExp object with the corresponding flags.  g global match i ignore case m match over multiple lines y Non-standard      sticky  \n\nDescription\nThis method does not change the String object it is called on. It simply returns a new string.\nTo perform a global search and replace, either include the g switch in the regular expression or if the first parameter is a string, include g in the flags parameter.\nSpecifying a string as a parameter\nThe replacement string can include the following special replacement patterns:\n   Pattern Inserts   $$ Inserts a &quot;$&quot;.   $&amp; Inserts the matched substring.   $` Inserts the portion of the string that precedes the matched substring.   $' Inserts the portion of the string that follows the matched substring.   $n or $nn Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.  \n\nSpecifying a function as a parameter\nYou can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do not apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.\nThe arguments to the function are as follows:\n   Possible name Supplied value   str The matched substring. (Corresponds to $&amp; above.)   p1, p2, ... The nth parenthesized submatch string, provided the first argument to replace was a RegExp object. (Correspond to $1, $2, etc. above.)   offset The offset of the matched substring within the total string being examined. (For example, if the total string was &quot;abcd&quot;, and the matched substring was &quot;bc&quot;, then this argument will be 1.)   s The total string being examined.  \n\n(The exact number of arguments will depend on whether the first argument was a RegExp object and, if so, how many parenthesized submatches it specifies.)\nThe following example will set newString to &quot;XXzzzz - XX , zzzz&quot;:\n\r\n          function replacer(str, p1, p2, offset, s)\n{\n  return str + &quot; - &quot; + p1 + &quot; , &quot; + p2;\n}\nvar newString = &quot;XXzzzz&quot;.replace(\/(X*)(z*)\/, replacer);\r\n        \nSpecifying a string as a parameter\nThe replacement string can include the following special replacement patterns:\n   Pattern Inserts   $$ Inserts a &quot;$&quot;.   $&amp; Inserts the matched substring.   $` Inserts the portion of the string that precedes the matched substring.   $' Inserts the portion of the string that follows the matched substring.   $n or $nn Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.  \n\nSpecifying a function as a parameter\nYou can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (Note: the above-mentioned special replacement patterns do not apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.\nThe arguments to the function are as follows:\n   Possible name Supplied value   str The matched substring. (Corresponds to $&amp; above.)   p1, p2, ... The nth parenthesized submatch string, provided the first argument to replace was a RegExp object. (Correspond to $1, $2, etc. above.)   offset The offset of the matched substring within the total string being examined. (For example, if the total string was &quot;abcd&quot;, and the matched substring was &quot;bc&quot;, then this argument will be 1.)   s The total string being examined.  \n\n(The exact number of arguments will depend on whether the first argument was a RegExp object and, if so, how many parenthesized submatches it specifies.)\nThe following example will set newString to &quot;XXzzzz - XX , zzzz&quot;:\n\r\n          function replacer(str, p1, p2, offset, s)\n{\n  return str + &quot; - &quot; + p1 + &quot; , &quot; + p2;\n}\nvar newString = &quot;XXzzzz&quot;.replace(\/(X*)(z*)\/, replacer);\r\n        \nExamples\nExample: Using global and ignore with replace\nIn the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'.\n\r\n          var re = \/apples\/gi;\nvar str = &quot;Apples are round, and apples are juicy.&quot;;\nvar newstr = str.replace(re, &quot;oranges&quot;);\nprint(newstr);\r\n        \nIn this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter.\n\r\n          var str = &quot;Apples are round, and apples are juicy.&quot;;\nvar newstr = str.replace(&quot;apples&quot;, &quot;oranges&quot;, &quot;gi&quot;);\nprint(newstr);\r\n        \nBoth of these examples print &quot;oranges are round, and oranges are juicy.&quot;\nExample: Defining the regular expression in replace\nIn the following example, the regular expression is defined in replace and includes the ignore case flag.\n\r\n          var str = &quot;Twas the night before Xmas...&quot;;\nvar newstr = str.replace(\/xmas\/i, &quot;Christmas&quot;);\nprint(newstr);\r\n        \nThis prints &quot;Twas the night before Christmas...&quot;\nExample: Switching words in a string\nThe following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns.\n\r\n          var re = \/(\\w+)\\s(\\w+)\/;\nvar str = &quot;John Smith&quot;;\nvar newstr = str.replace(re, &quot;$2, $1&quot;);\nprint(newstr);\r\n        \nThis prints &quot;Smith, John&quot;.\nExample: Using an inline function that modifies the matched characters\nIn this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.\nThe replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.\n\r\n          function styleHyphenFormat(propertyName)\n{\n  function upperToHyphenLower(match)\n  {\n    return '-' + match.toLowerCase();\n  }\n  return propertyName.replace(\/[A-Z]\/, upperToHyphenLower);\n}\r\n        \nGiven styleHyphenFormat('borderTop'), this returns 'border-top'.\nBecause we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect.\n\r\n          var newString = propertyName.replace(\/[A-Z]\/, '-' + '$&amp;'.toLowerCase());  \/\/ won't work\r\n        \nThis is because '$&amp;'.toLowerCase() would be evaluated first as a string literal (resulting in the same '$&amp;') before using the characters as a pattern.\nExample: Replacing a Fahrenheit degree with its Celsius equivalent\nThe following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.\nThe regular expression test checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, p1. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the f2c function. f2c then returns the Celsius number. This function approximates Perl's s\/\/\/e flag.\n\r\n          function f2c(x)\n{\n  function convert(str, p1, offset, s)\n  {\n    return ((p1-32) * 5\/9) + &quot;C&quot;;\n  }\n  var s = String(x);\n  var test = \/(\\d+(?:\\.\\d*)?)F\\b\/g;\n  return s.replace(test, convert);\n}\r\n        \n&nbsp;\nExample: Using global and ignore with replace\nIn the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'.\n\r\n          var re = \/apples\/gi;\nvar str = &quot;Apples are round, and apples are juicy.&quot;;\nvar newstr = str.replace(re, &quot;oranges&quot;);\nprint(newstr);\r\n        \nIn this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter.\n\r\n          var str = &quot;Apples are round, and apples are juicy.&quot;;\nvar newstr = str.replace(&quot;apples&quot;, &quot;oranges&quot;, &quot;gi&quot;);\nprint(newstr);\r\n        \nBoth of these examples print &quot;oranges are round, and oranges are juicy.&quot;\nExample: Defining the regular expression in replace\nIn the following example, the regular expression is defined in replace and includes the ignore case flag.\n\r\n          var str = &quot;Twas the night before Xmas...&quot;;\nvar newstr = str.replace(\/xmas\/i, &quot;Christmas&quot;);\nprint(newstr);\r\n        \nThis prints &quot;Twas the night before Christmas...&quot;\nExample: Switching words in a string\nThe following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns.\n\r\n          var re = \/(\\w+)\\s(\\w+)\/;\nvar str = &quot;John Smith&quot;;\nvar newstr = str.replace(re, &quot;$2, $1&quot;);\nprint(newstr);\r\n        \nThis prints &quot;Smith, John&quot;.\nExample: Using an inline function that modifies the matched characters\nIn this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.\nThe replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.\n\r\n          function styleHyphenFormat(propertyName)\n{\n  function upperToHyphenLower(match)\n  {\n    return '-' + match.toLowerCase();\n  }\n  return propertyName.replace(\/[A-Z]\/, upperToHyphenLower);\n}\r\n        \nGiven styleHyphenFormat('borderTop'), this returns 'border-top'.\nBecause we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect.\n\r\n          var newString = propertyName.replace(\/[A-Z]\/, '-' + '$&amp;'.toLowerCase());  \/\/ won't work\r\n        \nThis is because '$&amp;'.toLowerCase() would be evaluated first as a string literal (resulting in the same '$&amp;') before using the characters as a pattern.\nExample: Replacing a Fahrenheit degree with its Celsius equivalent\nThe following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.\nThe regular expression test checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, p1. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the f2c function. f2c then returns the Celsius number. This function approximates Perl's s\/\/\/e flag.\n\r\n          function f2c(x)\n{\n  function convert(str, p1, offset, s)\n  {\n    return ((p1-32) * 5\/9) + &quot;C&quot;;\n  }\n  var s = String(x);\n  var test = \/(\\d+(?:\\.\\d*)?)F\\b\/g;\n  return s.replace(test, convert);\n}\r\n        \n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toString","title":"RegExp.toString","description":" Summary \nReturns a string representing the specified object.\n\n   Method of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition  \n  Syntax \nregexp.toString()\n\n Parameters \nNone.\n\n Description \nThe RegExp object overrides the toString method of the Object object; it does not inherit Object.toString. For RegExp objects, the toString method returns a string representation of the regular expression.\n\n Examples \n Example: Using toString \nThe following example displays the string value of a RegExp object:\n\n\nmyExp = new RegExp(&quot;a+b+c&quot;);\nalert(myExp.toString());       \/\/ displays &quot;\/a+b+c\/&quot;\n\n Example: Using toString \nThe following example displays the string value of a RegExp object:\n\n\nmyExp = new RegExp(&quot;a+b+c&quot;);\nalert(myExp.toString());       \/\/ displays &quot;\/a+b+c\/&quot;\n\n See Also \nObject.prototype.toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/length","title":"String.length","description":"Summary\nThe length of a string.\n   Property of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nThis property returns the number of code units in the string. \nUTF-16\n, the string format used by&nbsp;JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string.\nFor an empty string, length is 0.\nExamples\n\r\n          var x = &quot;Netscape&quot;;\nvar empty = &quot;&quot;;\n\nconsole.log(&quot;Netspace is &quot; + x.length + &quot; code units long&quot;);\nconsole.log(&quot;The empty string is has a length of &quot; + empty.length); \/* should be 0 *\/\r\n        \nSee also\n JavaScript String.length and Internationalizing Web Applications\n\nSee also\n JavaScript String.length and Internationalizing Web Applications\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substring","title":"String.substring","description":"Summary\nReturns a subset of a string between one index and another, or through the end of the string.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nstring.substring(indexA[, indexB])\nParameters\n indexA An integer between 0 and one less than the length of the string.\n\n indexB (optional) An integer between 0 and the length of the string.\n\nDescription\nsubstring extracts characters from indexA up to but not including indexB. In particular:\n If indexA equals indexB, substring returns an empty string. If indexB is omitted, substring extracts characters to the end of the string. If either argument is less than 0 or is NaN, it is treated as if it were 0. If either argument is greater than stringName.length, it is treated as if it were stringName.length.\n\nIf indexA is larger than indexB, then the effect of substring is as if the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).\nExamples\nExample: Using substring\nThe following example uses substring to display characters from the string &quot;Mozilla&quot;:\n\/\/ assumes a print function is defined\nvar anyString = &quot;Mozilla&quot;;\n\n\/\/ Displays &quot;Moz&quot;\nprint(anyString.substring(0,3));\nprint(anyString.substring(3,0));\n\n\/\/ Displays &quot;lla&quot;\nprint(anyString.substring(4,7));\nprint(anyString.substring(7,4));\n\n\/\/ Displays &quot;Mozill&quot;\nprint(anyString.substring(0,6));\n\n\/\/ Displays &quot;Mozilla&quot;\nprint(anyString.substring(0,7));\nprint(anyString.substring(0,10));\n\nExample: Replacing a substring within a string\nThe following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &quot;Brave New World&quot; into &quot;Brave New Web&quot;.\nfunction replaceString(oldS, newS, fullS) {\n\/\/ Replaces oldS with newS in the string fullS\n   for (var i = 0; i &lt; fullS.length; i++) {\n      if (fullS.substring(i, i + oldS.length) == oldS) {\n         fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);\n      }\n   }\n   return fullS;\n}\n\nreplaceString(&quot;World&quot;, &quot;Web&quot;, &quot;Brave New World&quot;);\nNote that this can result in an infinite loop if oldS is itself a substring of newS -- for example, if you attempted to replace &quot;World&quot; with &quot;OtherWorld&quot; here. A better method for replacing strings is as follows:\nfunction replaceString(oldS, newS,fullS){\n&nbsp; &nbsp; return fullS.split(oldS).join(newS);\n}\n\n\nExample: Using substring\nThe following example uses substring to display characters from the string &quot;Mozilla&quot;:\n\/\/ assumes a print function is defined\nvar anyString = &quot;Mozilla&quot;;\n\n\/\/ Displays &quot;Moz&quot;\nprint(anyString.substring(0,3));\nprint(anyString.substring(3,0));\n\n\/\/ Displays &quot;lla&quot;\nprint(anyString.substring(4,7));\nprint(anyString.substring(7,4));\n\n\/\/ Displays &quot;Mozill&quot;\nprint(anyString.substring(0,6));\n\n\/\/ Displays &quot;Mozilla&quot;\nprint(anyString.substring(0,7));\nprint(anyString.substring(0,10));\n\nExample: Replacing a substring within a string\nThe following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &quot;Brave New World&quot; into &quot;Brave New Web&quot;.\nfunction replaceString(oldS, newS, fullS) {\n\/\/ Replaces oldS with newS in the string fullS\n   for (var i = 0; i &lt; fullS.length; i++) {\n      if (fullS.substring(i, i + oldS.length) == oldS) {\n         fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);\n      }\n   }\n   return fullS;\n}\n\nreplaceString(&quot;World&quot;, &quot;Web&quot;, &quot;Brave New World&quot;);\nNote that this can result in an infinite loop if oldS is itself a substring of newS -- for example, if you attempted to replace &quot;World&quot; with &quot;OtherWorld&quot; here. A better method for replacing strings is as follows:\nfunction replaceString(oldS, newS,fullS){\n&nbsp; &nbsp; return fullS.split(oldS).join(newS);\n}\n\n\nSee also\nsubstr, slice\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substr","title":"String.substr","description":"Summary\nReturns the characters in a string beginning at the specified location through the specified number of characters.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition None, although ECMAScript 3rd Edition has a non-normative section suggesting uniform semantics  \n\nSyntax\nstring.substr(start[, length])\nParameters\n start Location at which to begin extracting characters.\n\n length The number of characters to extract.\n\nDescription\nstart is a character index. The index of the first character is 0, and the index of the last character is 1 less than the length of the string. substr begins extracting characters at start and collects length characters (unless it reaches the end of the string first, in which case it will return fewer).\nIf start is positive and is greater than or equal to the length of the string, substr returns an empty string.\nIf start is negative, substr uses it as a character index from the end of the string. If start is negative and abs(start) is larger than the length of the string, substr uses 0 as the start index. Note: the described handling of negative values of the start argument is not supported by Microsoft JScript [1].\nIf length is 0 or negative, substr returns an empty string. If length is omitted, substr extracts characters to the end of the string.\nCompatibility\nMicrosoft's JScript does not support negative values for the start index. If you wish to make use of this feature, you can use the following compatibilty code to work around this bug:\n\r\n          \/\/ only run when the substr function is broken\nif ('ab'.substr(-1) != 'b')\n{\n  \/**\n   *  Get the substring of a string\n   *  @param  {integer}  start   where to start the substring\n   *  @param  {integer}  length  how many characters to return\n   *  @return {string}\n   *\/\n  String.prototype.substr = function(substr) {\n    return function(start, length) {\n      \/\/ did we get a negative start, calculate how much it is from the beginning of the string\n      if (start &lt; 0) start = this.length + start;\n      \n      \/\/ call the original function\n      return substr.call(this, start, length);\n    }\n  }(String.prototype.substr);\n}\r\n        \nExamples\nExample: Using substr\nConsider the following script:\n\/\/ assumes a print function is defined\nvar str = &quot;abcdefghij&quot;;\nprint(&quot;(1,2): &quot;    + str.substr(1,2));\nprint(&quot;(-3,2): &quot;   + str.substr(-3,2));\nprint(&quot;(-3): &quot;     + str.substr(-3));\nprint(&quot;(1): &quot;      + str.substr(1));\nprint(&quot;(-20, 2): &quot; + str.substr(-20,2));\nprint(&quot;(20, 2): &quot;  + str.substr(20,2));\n\nThis script displays:\n(1,2): bc\n(-3,2): hi\n(-3): hij\n(1): bcdefghij\n(-20, 2): ab\n(20, 2):\n\nExample: Using substr\nConsider the following script:\n\/\/ assumes a print function is defined\nvar str = &quot;abcdefghij&quot;;\nprint(&quot;(1,2): &quot;    + str.substr(1,2));\nprint(&quot;(-3,2): &quot;   + str.substr(-3,2));\nprint(&quot;(-3): &quot;     + str.substr(-3));\nprint(&quot;(1): &quot;      + str.substr(1));\nprint(&quot;(-20, 2): &quot; + str.substr(-20,2));\nprint(&quot;(20, 2): &quot;  + str.substr(20,2));\n\nThis script displays:\n(1,2): bc\n(-3,2): hi\n(-3): hij\n(1): bcdefghij\n(-20, 2): ab\n(20, 2):\n\nSee also\nslice,&nbsp;substring\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charAt","title":"String.charAt","description":"Summary\nReturns the specified character from a string.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nstring.charAt(index)\nParameters\n index&nbsp; An integer between 0 and 1 less than the length of the string.\n\nDescription\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called stringName is stringName.length - 1. If the index you supply is out of range, JavaScript returns an empty string.\nExamples\nExample: Displaying characters at different locations in a string\nThe following example displays characters at different locations in the string &quot;Brave new world&quot;:\n\r\n          var anyString=&quot;Brave new world&quot;;\n\ndocument.writeln(&quot;The character at index 0 is '&quot; + anyString.charAt(0) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 1 is '&quot; + anyString.charAt(1) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 2 is '&quot; + anyString.charAt(2) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 3 is '&quot; + anyString.charAt(3) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 4 is '&quot; + anyString.charAt(4) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 999 is '&quot; + anyString.charAt(999) + &quot;'&quot;);\r\n        \nThese lines display the following:\n\nThe character at index 0 is 'B'\nThe character at index 1 is 'r'\nThe character at index 2 is 'a'\nThe character at index 3 is 'v'\nThe character at index 4 is 'e'\nThe character at index 999 is ''\n\nExample 2:&nbsp;Getting whole characters\nThe following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.\n\r\n          var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n    if ((chr = getWholeChar(str, i)) === false) {continue;} \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning a variable to represent the individual character\n    alert(chr);\n}\n\nfunction getWholeChar (str, i) {\n    var code = str.charCodeAt(i);     \n \n    if (isNaN(code)) {\n        return ''; \/\/ Position not found\n    }\n    if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n        return str.charAt(i);\n    }\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        if (str.length &lt;= (i+1))  {\n            throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n        if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n        }\n        return str.charAt(i)+str.charAt(i+1);\n    }\n    \/\/ Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n    if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i-1);\n    if (0xD800 &gt; prev || prev &gt; 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    return false; \/\/ We can pass over low surrogates now as the second component in a pair which we have already processed\n}\r\n        \n&nbsp;\nIn an exclusive JavaScript 1.7+&nbsp;environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).\n\r\n          var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n    [chr, i] = getWholeCharAndI(str, i); \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning an array with the individual character and 'i' value (only changed if a surrogate pair)\n    alert(chr);\n}\n\nfunction getWholeCharAndI (str, i) {\n    var code = str.charCodeAt(i);\n    if (isNaN(code)) {\n        return ''; \/\/ Position not found\n    }\n    if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n        return [str.charAt(i), i]; \/\/ Normal character, keeping 'i' the same\n    }\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        if (str.length &lt;= (i+1))  {\n            throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n        if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n        }\n        return [str.charAt(i)+str.charAt(i+1), i+1];\n    }\n    \/\/ Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n    if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i-1);\n    if (0xD800 &gt; prev || prev &gt; 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    return [str.charAt(i+1), i+1]; \/\/ Return the next character instead (and increment)\n}\r\n        \n&nbsp;\nExample 3:&nbsp;Fixing charAt to support non-Basic-Multilingual-Plane (BMP)&nbsp;characters\nWhile example 2 may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP&nbsp;character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:\n\r\n          function fixedCharAt (str, idx) {\n    var ret = '';\n    str += '';\n    var end = str.length;\n\n    var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;\n    while ((surrogatePairs.exec(str)) != null) {\n        var li = surrogatePairs.lastIndex;\n        if (li - 2 &lt; idx) {\n            idx++;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (idx &gt;= end || idx &lt; 0) {\n        return '';\n    }\n\n    ret += str.charAt(idx);\n\n    if (\/[\\uD800-\\uDBFF]\/.test(ret) &amp;&amp; \/[\\uDC00-\\uDFFF]\/.test(str.charAt(idx+1))) {\n        ret += str.charAt(idx+1); \/\/ Go one further, since one of the &quot;characters&quot; is part of a surrogate pair\n    }\n    return ret;\n}\r\n        \nExample: Displaying characters at different locations in a string\nThe following example displays characters at different locations in the string &quot;Brave new world&quot;:\n\r\n          var anyString=&quot;Brave new world&quot;;\n\ndocument.writeln(&quot;The character at index 0 is '&quot; + anyString.charAt(0) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 1 is '&quot; + anyString.charAt(1) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 2 is '&quot; + anyString.charAt(2) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 3 is '&quot; + anyString.charAt(3) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 4 is '&quot; + anyString.charAt(4) + &quot;'&quot;);\ndocument.writeln(&quot;The character at index 999 is '&quot; + anyString.charAt(999) + &quot;'&quot;);\r\n        \nThese lines display the following:\n\nThe character at index 0 is 'B'\nThe character at index 1 is 'r'\nThe character at index 2 is 'a'\nThe character at index 3 is 'v'\nThe character at index 4 is 'e'\nThe character at index 999 is ''\n\nExample 2:&nbsp;Getting whole characters\nThe following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.\n\r\n          var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n    if ((chr = getWholeChar(str, i)) === false) {continue;} \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning a variable to represent the individual character\n    alert(chr);\n}\n\nfunction getWholeChar (str, i) {\n    var code = str.charCodeAt(i);     \n \n    if (isNaN(code)) {\n        return ''; \/\/ Position not found\n    }\n    if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n        return str.charAt(i);\n    }\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        if (str.length &lt;= (i+1))  {\n            throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n        if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n        }\n        return str.charAt(i)+str.charAt(i+1);\n    }\n    \/\/ Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n    if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i-1);\n    if (0xD800 &gt; prev || prev &gt; 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    return false; \/\/ We can pass over low surrogates now as the second component in a pair which we have already processed\n}\r\n        \n&nbsp;\nIn an exclusive JavaScript 1.7+&nbsp;environment (such as Firefox) which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).\n\r\n          var str = 'A\\uD87E\\uDC04Z'; \/\/ We could also use a non-BMP character directly\nfor (var i=0, chr; i &lt; str.length; i++) {\n    [chr, i] = getWholeCharAndI(str, i); \/\/ Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning an array with the individual character and 'i' value (only changed if a surrogate pair)\n    alert(chr);\n}\n\nfunction getWholeCharAndI (str, i) {\n    var code = str.charCodeAt(i);\n    if (isNaN(code)) {\n        return ''; \/\/ Position not found\n    }\n    if (code &lt; 0xD800 || code &gt; 0xDFFF) {\n        return [str.charAt(i), i]; \/\/ Normal character, keeping 'i' the same\n    }\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        if (str.length &lt;= (i+1))  {\n            throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n        if (0xDC00 &gt; next || next &gt; 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n        }\n        return [str.charAt(i)+str.charAt(i+1), i+1];\n    }\n    \/\/ Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF)\n    if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i-1);\n    if (0xD800 &gt; prev || prev &gt; 0xDBFF) { \/\/ (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        throw 'Low surrogate without preceding high surrogate';\n    }\n    return [str.charAt(i+1), i+1]; \/\/ Return the next character instead (and increment)\n}\r\n        \n&nbsp;\nExample 3:&nbsp;Fixing charAt to support non-Basic-Multilingual-Plane (BMP)&nbsp;characters\nWhile example 2 may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP&nbsp;character might appear), in the event that one does wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:\n\r\n          function fixedCharAt (str, idx) {\n    var ret = '';\n    str += '';\n    var end = str.length;\n\n    var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;\n    while ((surrogatePairs.exec(str)) != null) {\n        var li = surrogatePairs.lastIndex;\n        if (li - 2 &lt; idx) {\n            idx++;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (idx &gt;= end || idx &lt; 0) {\n        return '';\n    }\n\n    ret += str.charAt(idx);\n\n    if (\/[\\uD800-\\uDBFF]\/.test(ret) &amp;&amp; \/[\\uDC00-\\uDFFF]\/.test(str.charAt(idx+1))) {\n        ret += str.charAt(idx+1); \/\/ Go one further, since one of the &quot;characters&quot; is part of a surrogate pair\n    }\n    return ret;\n}\r\n        \nSee Also\nindexOf, lastIndexOf, split, charCodeAt\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/valueOf","title":"String.valueOf","description":"Summary\nReturns the primitive value of a String object.\n   Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nstring.valueOf()\nParameters\nNone.\nDescription\nThe valueOf method of String returns the primitive value of a String object as a string data type. This value is equivalent to String.toString.\nThis method is usually called internally by JavaScript and not explicitly in code.\nExamples\nExample: Using valueOf\n\nx = new String(&quot;Hello world&quot;);\nalert(x.valueOf())          \/\/ Displays &quot;Hello world&quot;\n\nExample: Using valueOf\n\nx = new String(&quot;Hello world&quot;);\nalert(x.valueOf())          \/\/ Displays &quot;Hello world&quot;\n\nSee Also\ntoString, Object.valueOf\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/prototype","title":"String.prototype","description":"Summary\nRepresents the String prototype object.\nDescription\nAll String instances inherit from String.prototype. Changes to the String prototype object are propagated to all String instances.\nProperties\n constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.\n\n\n\nProperties inherited from  Object:__parent__, __proto__\n\n\nMethods\n Methods unrelated to HTML \n\n charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (&quot;&quot;&quot;). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim \nRequires JavaScript 1.8.1\n Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the left side of the string. trimRight \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n HTML wrapper methods\n\n\n\n\nNon-standard\n Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.\n anchor &lt;a name=&quot;name&quot;&gt; (hypertext target) big &lt;big&gt; blink &lt;blink&gt; bold &lt;b&gt; fixed &lt;tt&gt; fontcolor &lt;font color=&quot;color&quot;&gt; fontsize &lt;font size=&quot;size&quot;&gt; italics &lt;i&gt; link &lt;a href=&quot;url&quot;&gt; (link to URL) small &lt;small&gt;. strike &lt;strike&gt; sub &lt;sub&gt; sup &lt;sup&gt;\n\nThese methods are of limited use, as they provide only a subset of the available HTML tags and attributes.\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\nMethods unrelated to HTML \n\n charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (&quot;&quot;&quot;). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim \nRequires JavaScript 1.8.1\n Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the left side of the string. trimRight \nRequires JavaScript 1.8.1\n Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.\n\n HTML wrapper methods\n\n\n\n\nNon-standard\n Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.\n anchor &lt;a name=&quot;name&quot;&gt; (hypertext target) big &lt;big&gt; blink &lt;blink&gt; bold &lt;b&gt; fixed &lt;tt&gt; fontcolor &lt;font color=&quot;color&quot;&gt; fontsize &lt;font size=&quot;size&quot;&gt; italics &lt;i&gt; link &lt;a href=&quot;url&quot;&gt; (link to URL) small &lt;small&gt;. strike &lt;strike&gt; sub &lt;sub&gt; sup &lt;sup&gt;\n\nThese methods are of limited use, as they provide only a subset of the available HTML tags and attributes.\n\n\nMethods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch\n\n\nExamples\nExample: Extending string instances with a repeat method\nThe following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered.\n\r\n          var s1 = new String(&quot;a&quot;);\nvar s2 = new String(&quot;b&quot;);\nvar s3 = new String(&quot;c&quot;);\n\n\/\/ Create a repeat-string-N-times method for all String objects\nfunction str_rep(n) {\n   var s = &quot;&quot;, t = this.toString();\n   while (--n &gt;= 0) {\n     s += t\n   }\n   return s;\n}\n\nString.prototype.repeat = str_rep;\n\ns1a=s1.repeat(3); \/\/ returns &quot;aaa&quot;\ns2a=s2.repeat(5); \/\/ returns &quot;bbbbb&quot;\ns3a=s3.repeat(2); \/\/ returns &quot;cc&quot;\n\n\/\/ Create an alternate method and assign it to only one String variable\nfunction fake_rep(n) {\n   return &quot;repeat &quot; + this + &quot; &quot; + n + &quot; times.&quot;;\n}\n\ns1.repeat = fake_rep\ns1b=s1.repeat(1); \/\/ returns &quot;repeat a 1 times.&quot;\ns2b=s2.repeat(4); \/\/ returns &quot;bbbb&quot;\ns3b=s3.repeat(6); \/\/ returns &quot;cccccc&quot;\r\n        \nThe function in this example also works on String objects not created with the String constructor. The following code returns &quot;zzz&quot;.\n&quot;z&quot;.repeat(3);\n\nExample: Extending string instances with a repeat method\nThe following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered.\n\r\n          var s1 = new String(&quot;a&quot;);\nvar s2 = new String(&quot;b&quot;);\nvar s3 = new String(&quot;c&quot;);\n\n\/\/ Create a repeat-string-N-times method for all String objects\nfunction str_rep(n) {\n   var s = &quot;&quot;, t = this.toString();\n   while (--n &gt;= 0) {\n     s += t\n   }\n   return s;\n}\n\nString.prototype.repeat = str_rep;\n\ns1a=s1.repeat(3); \/\/ returns &quot;aaa&quot;\ns2a=s2.repeat(5); \/\/ returns &quot;bbbbb&quot;\ns3a=s3.repeat(2); \/\/ returns &quot;cc&quot;\n\n\/\/ Create an alternate method and assign it to only one String variable\nfunction fake_rep(n) {\n   return &quot;repeat &quot; + this + &quot; &quot; + n + &quot; times.&quot;;\n}\n\ns1.repeat = fake_rep\ns1b=s1.repeat(1); \/\/ returns &quot;repeat a 1 times.&quot;\ns2b=s2.repeat(4); \/\/ returns &quot;bbbb&quot;\ns3b=s3.repeat(6); \/\/ returns &quot;cccccc&quot;\r\n        \nThe function in this example also works on String objects not created with the String constructor. The following code returns &quot;zzz&quot;.\n&quot;z&quot;.repeat(3);\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fromCharCode","title":"String.fromCharCode","description":"Summary\nReturns a string created by using the specified sequence of Unicode values.\n   Static Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\n String.fromCharCode(num1, ..., numN) \nParameters\n num1, ..., numN A sequence of numbers that are Unicode values.\n\nDescription\nThis method returns a string and not a String object.\nBecause fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created.\nGetting it to work with higher values\nAlthough most common Unicode values can be represented in a fixed width system\/with one number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) &quot;surrogate&quot; numbers to form a single character, fromCharCode() can be used to return such a pair and thus adequately represent these higher valued characters.\nBe aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one).\n\r\n          \/\/ String.fromCharCode() alone cannot get the character at such a high code point\n\/\/ The following, on the other hand, can return a 4-byte character as well as the \n\/\/   usual 2-byte ones (i.e., it can return a single character which actually has \n\/\/   a string length of 2 instead of 1!)\nalert(fixedFromCharCode(0x2F804)); \/\/ or 194564 in decimal\n\n\nfunction fixedFromCharCode (codePt) {\n    if (codePt &gt; 0xFFFF) {\n        codePt -= 0x10000;\n        return String.fromCharCode(0xD800 + (codePt &gt;&gt; 10), 0xDC00 +\n(codePt &amp; 0x3FF));\n    }\n    else {\n        return String.fromCharCode(codePt);\n    }\n}\r\n        Examples\nExample: Using fromCharCode\nThe following example returns the string &quot;ABC&quot;.\nString.fromCharCode(65,66,67)\n\nExample: Using fromCharCode\nThe following example returns the string &quot;ABC&quot;.\nString.fromCharCode(65,66,67)\n\nSee also\nString.prototype.charCodeAt\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/localeCompare","title":"String.localeCompare","description":"Summary\nReturns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n localeCompare(compareString) \nParameters\ncompareString - The string against which the referring string is comparing\nDescription\nReturns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than compareString, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level.\nExamples\nExample: Using localeCompare\nThe following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:\n\r\n          alert('a'.localeCompare('b')); \/\/ -1\nalert('b'.localeCompare('a')); \/\/ 1\nalert('b'.localeCompare('b')); \/\/ 0\r\n        \nExample: Using localeCompare\nThe following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:\n\r\n          alert('a'.localeCompare('b')); \/\/ -1\nalert('b'.localeCompare('a')); \/\/ 1\nalert('b'.localeCompare('b')); \/\/ 0\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/constructor","title":"String.constructor","description":" Summary \nReturns a reference to the String function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.\n\n   Property of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nSee constructor\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charCodeAt","title":"String.charCodeAt","description":"Summary\nReturns the numeric Unicode value of the character at the given index (except for unicode codepoints &gt; 0x10000).\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\nstring.charCodeAt(index)\nParameters\n index&nbsp; An integer greater than 0 and less than the length of the string; if it is not a number, it defaults to 0.\n\nDescription\nUnicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding. For information on Unicode, see the Core JavaScript 1.5 Guide.\nNote that charCodeAt will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued)&nbsp;&quot;surrogate&quot; pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only charCodeAt(i), but also charCodeAt(i+1) (as if examining\/reproducing a string with two letters). See example 2 and 3 below.\ncharCodeAt returns NaN if the given index is not greater than 0 or is greater than the length of the string.\nBackward Compatibility\nJavaScript 1.2\nThe charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.\nJavaScript 1.2\nThe charCodeAt method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.\nExamples\nExample 1: Using charCodeAt\nThe following example returns 65, the Unicode value for A.\n\n&quot;ABC&quot;.charCodeAt(0) \/\/ returns 65\n\nExample 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown\n&nbsp;\nThis version might be used in for loops and the like when it is unknown whether non-BMP&nbsp;characters exist before the specified index position.\n\r\n          function fixedCharCodeAt (str, idx) {\n    \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); \/\/ 65536\n    \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); \/\/ 65536\n    idx = idx || 0;\n    var code = str.charCodeAt(idx);\n    var hi, low;\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        hi = code;\n        low = str.charCodeAt(idx+1);\n        if (isNaN(low)) {\n            throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';\n        }\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n    if (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF) { \/\/ Low surrogate\n        \/\/ We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration\n        return false;\n        \/*hi = str.charCodeAt(idx-1);\n        low = code;\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*\/\n    }\n    return code;\n}\r\n        Example 3: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known\n&nbsp;\n\r\n          function knownCharCodeAt (str, idx) {\n    str += '';\n    var code,\n        end = str.length;\n\n    var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;\n    while ((surrogatePairs.exec(str)) != null) {\n        var li = surrogatePairs.lastIndex;\n        if (li - 2 &lt; idx) {\n            idx++;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (idx &gt;= end || idx &lt; 0) {\n        return NaN;\n    }\n\n    code = str.charCodeAt(idx);\n\n    var hi, low;\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) {\n        hi = code;\n        low = str.charCodeAt(idx+1); \/\/ Go one further, since one of the &quot;characters&quot; is part of a surrogate pair\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n    return code;\n}\r\n        \n&nbsp;\nExample 1: Using charCodeAt\nThe following example returns 65, the Unicode value for A.\n\n&quot;ABC&quot;.charCodeAt(0) \/\/ returns 65\n\nExample 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown\n&nbsp;\nThis version might be used in for loops and the like when it is unknown whether non-BMP&nbsp;characters exist before the specified index position.\n\r\n          function fixedCharCodeAt (str, idx) {\n    \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); \/\/ 65536\n    \/\/ ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); \/\/ 65536\n    idx = idx || 0;\n    var code = str.charCodeAt(idx);\n    var hi, low;\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) { \/\/ High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n        hi = code;\n        low = str.charCodeAt(idx+1);\n        if (isNaN(low)) {\n            throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';\n        }\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n    if (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF) { \/\/ Low surrogate\n        \/\/ We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration\n        return false;\n        \/*hi = str.charCodeAt(idx-1);\n        low = code;\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*\/\n    }\n    return code;\n}\r\n        Example 3: Fixing charCodeAt to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known\n&nbsp;\n\r\n          function knownCharCodeAt (str, idx) {\n    str += '';\n    var code,\n        end = str.length;\n\n    var surrogatePairs = \/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]\/g;\n    while ((surrogatePairs.exec(str)) != null) {\n        var li = surrogatePairs.lastIndex;\n        if (li - 2 &lt; idx) {\n            idx++;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (idx &gt;= end || idx &lt; 0) {\n        return NaN;\n    }\n\n    code = str.charCodeAt(idx);\n\n    var hi, low;\n    if (0xD800 &lt;= code &amp;&amp; code &lt;= 0xDBFF) {\n        hi = code;\n        low = str.charCodeAt(idx+1); \/\/ Go one further, since one of the &quot;characters&quot; is part of a surrogate pair\n        return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n    }\n    return code;\n}\r\n        \n&nbsp;\nSee Also\nfromCharCode, charAt\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/concat","title":"String.concat","description":"Summary\nCombines the text of two or more strings and returns a new string.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n Syntax\nstring.concat(string2, string3[, ..., stringN])Parameters\n string2...stringN&nbsp; Strings to concatenate to this string.\n\nDescription\nconcat combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string.\nExamples\nExample: Using concat\nThe following example combines strings into a new string.\n\r\n          var hello = &quot;Hello, &quot;;\nconsole.log(hello.concat(&quot;Kevin&quot;, &quot; have a nice day.&quot;)); \/* Hello, Kevin have a nice day. *\/\r\n        \nExample: Using concat\nThe following example combines strings into a new string.\n\r\n          var hello = &quot;Hello, &quot;;\nconsole.log(hello.concat(&quot;Kevin&quot;, &quot; have a nice day.&quot;)); \/* Hello, Kevin have a nice day. *\/\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/indexOf","title":"String.indexOf","description":"Summary\nReturns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex, returns -1 if the value is not found.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nstring.indexOf(searchValue[, fromIndex])\nParameters\n searchValue A string representing the value to search for.\n\n fromIndex The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.\n\nDescription\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called stringName is stringName.length - 1.\n\r\n          &quot;Blue Whale&quot;.indexOf(&quot;Blue&quot;)    \/\/ returns 0\n&quot;Blue Whale&quot;.indexOf(&quot;Blute&quot;)   \/\/ returns -1\n&quot;Blue Whale&quot;.indexOf(&quot;Whale&quot;,0) \/\/ returns 5\n&quot;Blue Whale&quot;.indexOf(&quot;Whale&quot;,5) \/\/ returns 5\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;,9)      \/\/ returns 9\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;,10)     \/\/ returns 10\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;,11)     \/\/ returns 10\r\n        \nThe indexOf method is case sensitive. For example, the following expression returns -1:\n\r\n          &quot;Blue Whale&quot;.indexOf(&quot;blue&quot;) \/\/ returns -1\r\n        \nNote that '0' doesn't evaluate to true and '-1' doesn't evaluate to false. Therefore, when checking if a specific string exists within another string the correct way to check would be:\n\r\n          &quot;Blue Whale&quot;.indexOf(&quot;Blue&quot;) != -1 \/\/ true\n&quot;Blue Whale&quot;.indexOf(&quot;Bloe&quot;) != -1 \/\/ false\r\n        \nExamples\nExample: Using indexOf and lastIndexOf\nThe following example uses indexOf and lastIndexOf to locate values in the string &quot;Brave new world&quot;.\n\r\n          var anyString=&quot;Brave new world&quot;\n\n\ndocument.write(&quot;&lt;P&gt;The index of the first w from the beginning is &quot; +\n   anyString.indexOf(&quot;w&quot;))          \/\/ Displays 8\n\ndocument.write(&quot;&lt;P&gt;The index of the first w from the end is &quot; +\n   anyString.lastIndexOf(&quot;w&quot;))      \/\/ Displays 10\n\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the beginning is &quot; +\n   anyString.indexOf(&quot;new&quot;))        \/\/ Displays 6\n\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the end is &quot; +\n   anyString.lastIndexOf(&quot;new&quot;))    \/\/ Displays 6\r\n        \nExample: indexOf and case-sensitivity\nThe following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first writeln method displays 19. But because the indexOf method is case sensitive, the string &quot;cheddar&quot; is not found in myCapString, so the second writeln method displays -1.\n\r\n          myString = &quot;brie, pepper jack, cheddar&quot;\nmyCapString = &quot;Brie, Pepper Jack, Cheddar&quot;\ndocument.writeln('myString.indexOf(&quot;cheddar&quot;) is ' +\n   myString.indexOf(&quot;cheddar&quot;))\ndocument.writeln('&lt;P&gt;myCapString.indexOf(&quot;cheddar&quot;) is ' +\n   myCapString.indexOf(&quot;cheddar&quot;))\r\n        \nExample: Using indexOf to count occurrences of a letter in a string\nThe following example sets count to the number of occurrences of the letter x in the string str:\n\r\n          count = 0;\npos = str.indexOf(&quot;x&quot;);\nwhile ( pos != -1 ) {\n   count++;\n   pos = str.indexOf(&quot;x&quot;,pos+1);\n}\r\n        \nExample: Using indexOf and lastIndexOf\nThe following example uses indexOf and lastIndexOf to locate values in the string &quot;Brave new world&quot;.\n\r\n          var anyString=&quot;Brave new world&quot;\n\n\ndocument.write(&quot;&lt;P&gt;The index of the first w from the beginning is &quot; +\n   anyString.indexOf(&quot;w&quot;))          \/\/ Displays 8\n\ndocument.write(&quot;&lt;P&gt;The index of the first w from the end is &quot; +\n   anyString.lastIndexOf(&quot;w&quot;))      \/\/ Displays 10\n\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the beginning is &quot; +\n   anyString.indexOf(&quot;new&quot;))        \/\/ Displays 6\n\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the end is &quot; +\n   anyString.lastIndexOf(&quot;new&quot;))    \/\/ Displays 6\r\n        \nExample: indexOf and case-sensitivity\nThe following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first writeln method displays 19. But because the indexOf method is case sensitive, the string &quot;cheddar&quot; is not found in myCapString, so the second writeln method displays -1.\n\r\n          myString = &quot;brie, pepper jack, cheddar&quot;\nmyCapString = &quot;Brie, Pepper Jack, Cheddar&quot;\ndocument.writeln('myString.indexOf(&quot;cheddar&quot;) is ' +\n   myString.indexOf(&quot;cheddar&quot;))\ndocument.writeln('&lt;P&gt;myCapString.indexOf(&quot;cheddar&quot;) is ' +\n   myCapString.indexOf(&quot;cheddar&quot;))\r\n        \nExample: Using indexOf to count occurrences of a letter in a string\nThe following example sets count to the number of occurrences of the letter x in the string str:\n\r\n          count = 0;\npos = str.indexOf(&quot;x&quot;);\nwhile ( pos != -1 ) {\n   count++;\n   pos = str.indexOf(&quot;x&quot;,pos+1);\n}\r\n        \nSee Also\ncharAt, lastIndexOf, split, Array.indexOf\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/lastIndexOf","title":"String.lastIndexOf","description":"Summary\nReturns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nstring.lastIndexOf(searchValue[, fromIndex])\nParameters\n searchValue A string representing the value to search for.\n\n fromIndex The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.\n\nDescription\nCharacters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is stringName.length - 1.\n\r\n          &quot;canal&quot;.lastIndexOf(&quot;a&quot;)   \/\/ returns 3\n&quot;canal&quot;.lastIndexOf(&quot;a&quot;,2) \/\/ returns 1\n&quot;canal&quot;.lastIndexOf(&quot;a&quot;,0) \/\/ returns -1\n&quot;canal&quot;.lastIndexOf(&quot;x&quot;)   \/\/ returns -1\r\n        \nThe lastIndexOf method is case sensitive. For example, the following expression returns -1:\n&quot;Blue Whale, Killer Whale&quot;.lastIndexOf(&quot;blue&quot;) \/\/ returns -1\n\nExamples\nExample: Using indexOf and lastIndexOf\nThe following example uses indexOf and lastIndexOf to locate values in the string &quot;Brave new world&quot;.\n\r\n          var anyString = &quot;Brave new world&quot;\n\n\/\/ Displays 8\ndocument.write(&quot;&lt;P&gt;The index of the first w from the beginning is &quot; +\n   anyString.indexOf(&quot;w&quot;))\n\/\/ Displays 10\ndocument.write(&quot;&lt;P&gt;The index of the first w from the end is &quot; +\n   anyString.lastIndexOf(&quot;w&quot;))\n\/\/ Displays 6\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the beginning is &quot; +\n   anyString.indexOf(&quot;new&quot;))\n\/\/ Displays 6\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the end is &quot; +\n   anyString.lastIndexOf(&quot;new&quot;))\r\n        \nExample: Using indexOf and lastIndexOf\nThe following example uses indexOf and lastIndexOf to locate values in the string &quot;Brave new world&quot;.\n\r\n          var anyString = &quot;Brave new world&quot;\n\n\/\/ Displays 8\ndocument.write(&quot;&lt;P&gt;The index of the first w from the beginning is &quot; +\n   anyString.indexOf(&quot;w&quot;))\n\/\/ Displays 10\ndocument.write(&quot;&lt;P&gt;The index of the first w from the end is &quot; +\n   anyString.lastIndexOf(&quot;w&quot;))\n\/\/ Displays 6\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the beginning is &quot; +\n   anyString.indexOf(&quot;new&quot;))\n\/\/ Displays 6\ndocument.write(&quot;&lt;P&gt;The index of 'new' from the end is &quot; +\n   anyString.lastIndexOf(&quot;new&quot;))\r\n        \nSee Also\ncharAt, indexOf, split\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/match","title":"String.match","description":"Summary\nUsed to retrieve the matches when matching a&nbsp;string&nbsp;against a&nbsp;regular expression.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nstring.match(regexp)\nParameters\nDescription\nIf the regular expression does not include the g flag, returns the same result as regexp.exec(string).\nIf the regular expression includes the g flag, the method returns an Array containing all matches. If there were no matches, the method returns null.\nThe returned Array has an extra input property, which contains the regexp that generated it as a result. In addition, it has an index property, which represents the zero-based index of the match in the string.\n regexp A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\n\n \nGecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n\n Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n, match() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against undefined, instead of always returning an empty string. This is fixed.\n\nNotes\n If you need to know if a string matches a regular expression regexp, use regexp.test(string). If you only want the first match found, you might want to use regexp.exec(string) instead. See &sect;15.5.4.10 of the ECMA-262 specification.\n\nNotes\n If you need to know if a string matches a regular expression regexp, use regexp.test(string). If you only want the first match found, you might want to use regexp.exec(string) instead. See &sect;15.5.4.10 of the ECMA-262 specification.\n\nExamples\nExample: Using match\nIn the following example, match is used to find &quot;Chapter&quot; followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.\n\n&lt;script type=&quot;text\/javascript&quot;&gt;\nstr = &quot;For more information, see Chapter 3.4.5.1&quot;;\nre = \/(chapter \\d+(\\.\\d)*)\/i;\nfound = str.match(re);\nalert(found);\n&lt;\/script&gt;\n\nThis returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1\n&quot;Chapter 3.4.5.1&quot; is the first match and the first value remembered from (Chapter \\d+(\\.\\d)*).\n&quot;.1&quot; is the second value remembered from (\\.\\d).\nExample: Using global and ignore case flags with match\nThe following example demonstrates the use of the global and ignore case flags with match. All letters A through E and a through e are returned, each its own element in the array\n\nvar str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;\nvar regexp = \/[A-E]\/gi;\nvar matches_array = str.match(regexp);\nalert(matches_array);\n\nmatches_array now equals ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\nExample: Using match\nIn the following example, match is used to find &quot;Chapter&quot; followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the i flag so that case will be ignored.\n\n&lt;script type=&quot;text\/javascript&quot;&gt;\nstr = &quot;For more information, see Chapter 3.4.5.1&quot;;\nre = \/(chapter \\d+(\\.\\d)*)\/i;\nfound = str.match(re);\nalert(found);\n&lt;\/script&gt;\n\nThis returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1\n&quot;Chapter 3.4.5.1&quot; is the first match and the first value remembered from (Chapter \\d+(\\.\\d)*).\n&quot;.1&quot; is the second value remembered from (\\.\\d).\nExample: Using global and ignore case flags with match\nThe following example demonstrates the use of the global and ignore case flags with match. All letters A through E and a through e are returned, each its own element in the array\n\nvar str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;\nvar regexp = \/[A-E]\/gi;\nvar matches_array = str.match(regexp);\nalert(matches_array);\n\nmatches_array now equals ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/quote","title":"String.quote","description":"Syntax\nstr.quote()\nExamples\n   str str.quote() eval(str.quote())     Hello world! &quot;Hello world!&quot; Hello world!   Hello &nbsp; &nbsp; &nbsp; &nbsp; world! &quot;Hello\\n\\tworld!&quot; Hello &nbsp; &nbsp; &nbsp; &nbsp; world!   &quot; \\ &mdash; ' \\&quot; \\\\ \\u2014 ' &quot; \\ &mdash; '  \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/search","title":"String.search","description":"Summary\nExecutes the search for a match between a regular expression and this String object.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nstring.search(regexp)\nParameters\n regexp A  regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\n\nDescription\nIf successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1.\nWhen you want to know whether a pattern is found in a string use search (similar to the regular expression test method); for more information (but slower execution) use match (similar to the regular expression exec method).\n \nGecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n\n Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)\n, search() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against the string &quot;undefined&quot;, instead of matching against the empty string. This is fixed; now &quot;a&quot;.search() and &quot;a&quot;.search(undefined) correctly return 0.\n\nExamples\nExample: Using search\nThe following example prints a message which depends on the success of the test.\n\r\n          function testinput(re, str){\n   if (str.search(re) != -1){\n      midstring = &quot; contains &quot;;\n   }\n   else{\n      midstring = &quot; does not contain &quot;;\n   }\n   document.write (str + midstring + re);\n}\r\n        \nExample: Using search\nThe following example prints a message which depends on the success of the test.\n\r\n          function testinput(re, str){\n   if (str.search(re) != -1){\n      midstring = &quot; contains &quot;;\n   }\n   else{\n      midstring = &quot; does not contain &quot;;\n   }\n   document.write (str + midstring + re);\n}\r\n        \n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/slice","title":"String.slice","description":"Summary\nExtracts a section of a string and returns a new string.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 3rd Edition  \n Syntax\nstring.slice(beginslice[, endSlice])Parameters\n beginSlice&nbsp; The zero-based index at which to begin extraction.\n\n endSlice&nbsp; The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string.\n\nDescription\nslice extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.\nslice extracts up to but not including endSlice. string.slice(1,4) extracts the second character through the fourth character (characters indexed 1, 2, and 3).\nAs a negative index, endSlice indicates an offset from the end of the string. string.slice(2,-1) extracts the third character through the second to last character in the string.\nExamples\nExample: Using slice to create a new string\nThe following example uses slice to create a new string.\n\r\n          \/\/ assumes a print function is defined\nvar str1 = &quot;The morning is upon us.&quot;;\nvar str2 = str1.slice(4, -2);\nprint(str2);\r\n        \nThis writes:\n\nmorning is upon u\n\n&nbsp;\nExample: Using slice to create a new string\nThe following example uses slice to create a new string.\n\r\n          \/\/ assumes a print function is defined\nvar str1 = &quot;The morning is upon us.&quot;;\nvar str2 = str1.slice(4, -2);\nprint(str2);\r\n        \nThis writes:\n\nmorning is upon u\n\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/split","title":"String.split","description":"Summary\nSplits a String object into an array of strings by separating the string into substrings.\n   Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition  \n\nSyntax\nstring.split([separator][, limit])\nParameters\n separator Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.\n\n limit Integer specifying a limit on the number of splits to be found. &nbsp;The&nbsp;split method still splits on every match of&nbsp;separator, but it truncates the returned array to at most&nbsp;limit elements.\n\nDescription\nThe split method returns the new array.\nWhen found, separator is removed from the string and the substrings are returned in an array. If separator is omitted, the array contains one element consisting of the entire string.\nIf separator is a regular expression that contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. However, not all browsers support this capability.\nNote:&nbsp;When the string is empty, split returns an array containing one empty string, rather than an empty array.\n\nExamples\nExample: Using split\nThe following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.\n\r\n          function splitString(stringToSplit,separator)\n{\n  var arrayOfStrings = stringToSplit.split(separator);\n  print('The original string is: &quot;' + stringToSplit + '&quot;');\n  print('The separator is: &quot;' + separator + '&quot;');\n  print(&quot;The array has &quot; + arrayOfStrings.length + &quot; elements: &quot;);\n\n  for (var i=0; i &lt; arrayOfStrings.length; i++)\n    print(arrayOfStrings[i] + &quot; \/ &quot;);\n}\n\nvar tempestString = &quot;Oh brave new world that has such people in it.&quot;;\nvar monthString = &quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;;\n\nvar space = &quot; &quot;;\nvar comma = &quot;,&quot;;\n\nsplitString(tempestString, space);\nsplitString(tempestString);\nsplitString(monthString, comma);\r\n        \nThis example produces the following output:\nThe original string is: &quot;Oh brave new world that has such people in it.&quot;\nThe separator is: &quot; &quot;\nThe array has 10 elements: Oh \/ brave \/ new \/ world \/ that \/ has \/ such \/ people \/ in \/ it. \/\n\nThe original string is: &quot;Oh brave new world that has such people in it.&quot;\nThe separator is: &quot;undefined&quot;\nThe array has 1 elements: Oh brave new world that has such people in it. \/\n\nThe original string is: &quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;\nThe separator is: &quot;,&quot;\nThe array has 12 elements: Jan \/ Feb \/ Mar \/ Apr \/ May \/ Jun \/ Jul \/ Aug \/ Sep \/ Oct \/ Nov \/ Dec \/\n\nExample: Removing spaces from a string\nIn the following example, split looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split.\n\r\n          var names = &quot;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand &quot;;\nprint(names);\nvar re = \/\\s*;\\s*\/;\nvar nameList = names.split(re);\nprint(nameList);\r\n        \nThis prints two lines; the first line prints the original string, and the second line prints the resulting array.\nHarry Trump&nbsp;;Fred Barney; Helen Rigby&nbsp;; Bill Abel&nbsp;;Chris Hand\nHarry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand\n\nExample: Returning a limited number of splits\nIn the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds.\n\r\n          var myString = &quot;Hello World. How are you doing?&quot;;\nvar splits = myString.split(&quot; &quot;, 3);\nprint(splits);\r\n        \nThis script displays the following:\nHello,World.,How\n\nExample: Capturing parentheses\nIf separator contains capturing parentheses, matched results are returned in the array.\n\r\n          var myString = &quot;Hello 1 word. Sentence number 2.&quot;;\nvar splits = myString.split(\/(\\d)\/);\nprint(splits);\r\n        \nThis script displays the following:\nHello ,1, word. Sentence number ,2, .\n\nExample: Using split\nThe following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.\n\r\n          function splitString(stringToSplit,separator)\n{\n  var arrayOfStrings = stringToSplit.split(separator);\n  print('The original string is: &quot;' + stringToSplit + '&quot;');\n  print('The separator is: &quot;' + separator + '&quot;');\n  print(&quot;The array has &quot; + arrayOfStrings.length + &quot; elements: &quot;);\n\n  for (var i=0; i &lt; arrayOfStrings.length; i++)\n    print(arrayOfStrings[i] + &quot; \/ &quot;);\n}\n\nvar tempestString = &quot;Oh brave new world that has such people in it.&quot;;\nvar monthString = &quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;;\n\nvar space = &quot; &quot;;\nvar comma = &quot;,&quot;;\n\nsplitString(tempestString, space);\nsplitString(tempestString);\nsplitString(monthString, comma);\r\n        \nThis example produces the following output:\nThe original string is: &quot;Oh brave new world that has such people in it.&quot;\nThe separator is: &quot; &quot;\nThe array has 10 elements: Oh \/ brave \/ new \/ world \/ that \/ has \/ such \/ people \/ in \/ it. \/\n\nThe original string is: &quot;Oh brave new world that has such people in it.&quot;\nThe separator is: &quot;undefined&quot;\nThe array has 1 elements: Oh brave new world that has such people in it. \/\n\nThe original string is: &quot;Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec&quot;\nThe separator is: &quot;,&quot;\nThe array has 12 elements: Jan \/ Feb \/ Mar \/ Apr \/ May \/ Jun \/ Jul \/ Aug \/ Sep \/ Oct \/ Nov \/ Dec \/\n\nExample: Removing spaces from a string\nIn the following example, split looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split.\n\r\n          var names = &quot;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand &quot;;\nprint(names);\nvar re = \/\\s*;\\s*\/;\nvar nameList = names.split(re);\nprint(nameList);\r\n        \nThis prints two lines; the first line prints the original string, and the second line prints the resulting array.\nHarry Trump&nbsp;;Fred Barney; Helen Rigby&nbsp;; Bill Abel&nbsp;;Chris Hand\nHarry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand\n\nExample: Returning a limited number of splits\nIn the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds.\n\r\n          var myString = &quot;Hello World. How are you doing?&quot;;\nvar splits = myString.split(&quot; &quot;, 3);\nprint(splits);\r\n        \nThis script displays the following:\nHello,World.,How\n\nExample: Capturing parentheses\nIf separator contains capturing parentheses, matched results are returned in the array.\n\r\n          var myString = &quot;Hello 1 word. Sentence number 2.&quot;;\nvar splits = myString.split(\/(\\d)\/);\nprint(splits);\r\n        \nThis script displays the following:\nHello ,1, word. Sentence number ,2, .\n\nSee Also\ncharAt, indexOf, lastIndexOf, Array:join\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleLowerCase","title":"String.toLocaleLowerCase","description":"Summary\nReturns the calling string value converted to lower case, according to any locale-specific case mappings.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n toLocaleLowerCase() \nParameters\nNone.\nDescription\nThe toLocaleLowerCase method returns the value of the string converted to lower case according to any locale-specific case mappings. toLocaleLowerCase does not affect the value of the string itself. In most cases, this will produce the same result as toLowerCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.\nExamples\nExample: Using toLocaleLowerCase\nThe following example displays the string &quot;alphabet&quot;:\n\r\n          var upperText=&quot;ALPHABET&quot;;\ndocument.write(upperText.toLocaleLowerCase());\r\n        Example: Using toLocaleLowerCase\nThe following example displays the string &quot;alphabet&quot;:\n\r\n          var upperText=&quot;ALPHABET&quot;;\ndocument.write(upperText.toLocaleLowerCase());\r\n        See also\ntoLowerCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLowerCase","title":"String.toLowerCase","description":"Summary\nReturns the calling string value converted to lowercase.\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nstring.toLowerCase()\nParameters\nNone.\nDescription\nThe toLowerCase method returns the value of the string converted to lowercase. toLowerCase does not affect the value of the string itself.\nExamples\nExample: Using toLowerCase\nThe following example displays the lowercase string &quot;alphabet&quot;:\n\r\n          var upperText=&quot;ALPHABET&quot;;\ndocument.write(upperText.toLowerCase());\r\n        \nExample: Using toLowerCase\nThe following example displays the lowercase string &quot;alphabet&quot;:\n\r\n          var upperText=&quot;ALPHABET&quot;;\ndocument.write(upperText.toLowerCase());\r\n        \nSee Also\ntoLocaleLowerCase\ntoUpperCase\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toUpperCase","title":"String.toUpperCase","description":"Syntax\nstring.toUpperCase()\nParameters\nNone.\nDescription\nThe toUpperCase method returns the value of the string converted to uppercase. toUpperCase does not affect the value of the string itself.\nExamples\nExample: Using toUpperCase\nThe following example displays the string &quot;ALPHABET&quot;:\n\nvar lowerText=&quot;alphabet&quot;;\ndocument.write(lowerText.toUpperCase());\nExample: Using toUpperCase\nThe following example displays the string &quot;ALPHABET&quot;:\n\nvar lowerText=&quot;alphabet&quot;;\ndocument.write(lowerText.toUpperCase());\nSee Also\ntoLocaleUpperCase\ntoLowerCase\n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleUpperCase","title":"String.toLocaleUpperCase","description":"Summary\nReturns the calling string value converted to upper case, according to any locale-specific case mappings.\n   Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n toLocaleUpperCase() \nParameters\nNone.\nDescription\nThe toLocaleUpperCase method returns the value of the string converted to upper case according to any locale-specific case mappings. toLocaleUpperCase does not affect the value of the string itself. In most cases, this will produce the same result as toUpperCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.\nExamples\nExample: Using toLocaleUpperCase\nThe following example displays the string &quot;ALPHABET&quot;:\n\r\n          var lowerText=&quot;alphabet&quot;;\ndocument.write(lowerText.toLocaleUpperCase());\r\n        \nExample: Using toLocaleUpperCase\nThe following example displays the string &quot;ALPHABET&quot;:\n\r\n          var lowerText=&quot;alphabet&quot;;\ndocument.write(lowerText.toLocaleUpperCase());\r\n        \nSee also\ntoUpperCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toSource","title":"String.toSource","description":" Summary \nReturns a string representing the source code of the object.\n\n   Method of String     Implemented in JavaScript 1.3   ECMAScript Edition none  \n  Syntax \nstring.toSource()\n\n Parameters \nNone.\n\n Description \nThe toSource method returns the following values:\n\n\n For the built-in String object, toSource returns the following string indicating that the source code is not available:\n\nfunction String() {[native code]}\n\n For instances of String or string literals, toSource returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n See also \nObject.prototype.toSource\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toString","title":"String.toString","description":"Summary\nReturns a string representing the specified object.\n   Method of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\nstring.toString()\nParameters\nNone.\nDescription\nThe String object overrides the toString method of the Object object; it does not inherit Object.toString. For String objects, the toString method returns a string representation of the object.\nExamples\nExample: Using toString\nThe following example displays the string value of a String object:\n\nx = new String(&quot;Hello world&quot;);\nalert(x.toString())      \/\/ Displays &quot;Hello world&quot;\n\nExample: Using toString\nThe following example displays the string value of a String object:\n\nx = new String(&quot;Hello world&quot;);\nalert(x.toString())      \/\/ Displays &quot;Hello world&quot;\n\nSee also\nObject.toString\n&nbsp; "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/Trim","title":"String.Trim","description":"Summary\nRemoves whitespace from both ends of the string.\n   Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nstring.trim()\nParameters\nNone.\nDescription\nThe trim method returns the string stripped of whitespace from both ends. trim does not affect the value of the string itself.\nExamples\nExample: Using trim\nThe following example displays the lowercase string &quot;foo&quot;:\n\r\n          var orig = &quot;   foo  &quot;;\nalert(orig.trim());\r\n        \nExample: Using trim\nThe following example displays the lowercase string &quot;foo&quot;:\n\r\n          var orig = &quot;   foo  &quot;;\nalert(orig.trim());\r\n        \nSee Also\n trimLeft() trimRight()\n\nCompatibility\nRunning the following code before any other code will create String.trim if it's not natively available.\n\r\n          if(!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(\/^\\s+|\\s+$\/g,'');\n  };\n}\r\n        \nBrowser compatibility\nBased on Kangax's compat tables\n\n\n\n Desktop Mobile\n\n\n    Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 10.5 5   \n\n    Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?   \n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimLeft","title":"String.TrimLeft","description":"Summary\nRemoves whitespace from the left end of the string.\n   Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition None  \n\nSyntax\nstring.trimLeft()\nParameters\nNone.\nDescription\nThe trimLeft method returns the string stripped of whitespace from its left end. trimLeft does not affect the value of the string itself.\nExamples\nExample: Using trimLeft\nThe following example displays the lowercase string &quot;foo&nbsp; &quot;:\n\nvar orig=&quot;   foo  &quot;\ndocument.write(orig.trimLeft())\n\nExample: Using trimLeft\nThe following example displays the lowercase string &quot;foo&nbsp; &quot;:\n\nvar orig=&quot;   foo  &quot;\ndocument.write(orig.trimLeft())\n\nSee Also\n trim()&nbsp; trimRight()&nbsp;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimRight","title":"String.TrimRight","description":"Summary\nRemoves whitespace from the right end of the string.\n   Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition None  \n\nSyntax\nstring.trimRight()\nParameters\nNone.\nDescription\nThe trimRight method returns the string stripped of whitespace from its right end. trimRight does not affect the value of the string itself.\nExamples\nExample: Using trimRight\nThe following example displays the lowercase string &quot;&nbsp;&nbsp; foo&quot;:\n\nvar orig=&quot;   foo  &quot;\ndocument.write(orig.trimRight())\n\nExample: Using trimRight\nThe following example displays the lowercase string &quot;&nbsp;&nbsp; foo&quot;:\n\nvar orig=&quot;   foo  &quot;\ndocument.write(orig.trimRight())\n\nSee Also\n trim()&nbsp; trimRight()&nbsp;\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/anchor","title":"String.anchor","description":" Summary \nCreates an HTML anchor that is used as a hypertext target.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nanchor(nameAttribute)\n\n\n Parameters \n nameAttribute&nbsp; A string.\n\n Description \nUse the anchor method with the document.write or document.writeln methods to programmatically create and display an anchor in a document. Create the anchor with the anchor method, and then call write or writeln to display the anchor in a document. In server-side JavaScript, use the write function to display the anchor.\nIn the syntax, the text string represents the literal text that you want the user to see. The nameAttribute string represents the NAME attribute of the A tag.\nAnchors created with the anchor method become elements in the document.anchors array.\n\n Examples \n Example: Using anchor \nThe following example code within an HTML script element:\n\n\nvar myString = &quot;Table of Contents&quot;;\ndocument.writeln(myString.anchor(&quot;contents_anchor&quot;));\n\nwill output the following HTML:\n\n\n&lt;A NAME=&quot;contents_anchor&quot;&gt;Table of Contents&lt;\/A&gt;\n\n Example: Using anchor \nThe following example code within an HTML script element:\n\n\nvar myString = &quot;Table of Contents&quot;;\ndocument.writeln(myString.anchor(&quot;contents_anchor&quot;));\n\nwill output the following HTML:\n\n\n&lt;A NAME=&quot;contents_anchor&quot;&gt;Table of Contents&lt;\/A&gt;\n\n See Also \nlink\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/big","title":"String.big","description":" Summary \nCauses a string to be displayed in a big font as if it were in a BIG tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nbig()\n\n\n Parameters \nNone.\n\n Description \nUse the big method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using big \nThe following example uses string methods to change the size of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONTSIZE=7&gt;Hello, world&lt;\/FONTSIZE&gt;\n\n Example: Using big \nThe following example uses string methods to change the size of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONTSIZE=7&gt;Hello, world&lt;\/FONTSIZE&gt;\n\n See Also \nfontsize,\nsmall\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/blink","title":"String.blink","description":" Summary \nCauses a string to blink as if it were in a BLINK tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nblink()\n\n\n Parameters \nNone.\n\n Description \nUse the blink method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n See Also \nbold,\nitalics,\nstrike\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fixed","title":"String.fixed","description":" Summary \nCauses a string to be displayed in fixed-pitch font as if it were in a TT tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nfixed()\n\n\n Parameters \nNone.\n\n Description \nUse the fixed method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using fixed to change the formatting of a string \nThe following example uses the fixed method to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\ndocument.write(worldString.fixed())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;TT&gt;Hello, world&lt;\/TT&gt;\n\n\n  Example: Using fixed to change the formatting of a string \nThe following example uses the fixed method to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\ndocument.write(worldString.fixed())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;TT&gt;Hello, world&lt;\/TT&gt;\n\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/bold","title":"String.bold","description":" Summary \nCauses a string to be displayed as bold as if it were in a B tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nbold()\n\n\n Parameters \nNone.\n\n Description \nUse the bold method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n See Also \nblink,\nitalics,\nstrike\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/italics","title":"String.italics","description":" Summary \nCauses a string to be italic, as if it were in an I tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nitalics()\n\n\n Parameters \nNone.\n\n Description \nUse the italics method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n See Also \nblink,\nbold,\nstrike\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontcolor","title":"String.fontcolor","description":" Summary \nCauses a string to be displayed in the specified color as if it were in a &lt;FONT COLOR=&quot;color&quot;&gt; tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nfontcolor(color)\n\n\n Parameters \n color&nbsp; A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the Core JavaScript 1.5 Guide.\n\n Description \nUse the fontcolor method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\nIf you express color as a hexadecimal RGB triplet, you must use the format rrggbb. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is &quot;FA8072&quot;.\nThe fontcolor method overrides a value set in the fgColor property.\n\n Examples \n Example: Using fontcolor \nThe following example uses the fontcolor method to change the color of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.fontcolor(&quot;maroon&quot;) +\n   &quot; is maroon in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;salmon&quot;) +\n   &quot; is salmon in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;red&quot;) +\n   &quot; is red in this line&quot;)\n\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;8000&quot;) +\n   &quot; is maroon in hexadecimal in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;FA8072&quot;) +\n   &quot; is salmon in hexadecimal in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;FF00&quot;) +\n   &quot; is red in hexadecimal in this line&quot;)\n\nThe previous example produces the same output as the following HTML:\n\n\n&lt;FONT COLOR=&quot;maroon&quot;&gt;Hello, world&lt;\/FONT&gt; is maroon in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;salmon&quot;&gt;Hello, world&lt;\/FONT&gt; is salmon in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;red&quot;&gt;Hello, world&lt;\/FONT&gt; is red in this line\n\n&lt;P&gt;&lt;FONT COLOR=&quot;8000&quot;&gt;Hello, world&lt;\/FONT&gt;\nis maroon in hexadecimal in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;FA8072&quot;&gt;Hello, world&lt;\/FONT&gt;\nis salmon in hexadecimal in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;FF00&quot;&gt;Hello, world&lt;\/FONT&gt;\nis red in hexadecimal in this line\n  Example: Using fontcolor \nThe following example uses the fontcolor method to change the color of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.fontcolor(&quot;maroon&quot;) +\n   &quot; is maroon in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;salmon&quot;) +\n   &quot; is salmon in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;red&quot;) +\n   &quot; is red in this line&quot;)\n\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;8000&quot;) +\n   &quot; is maroon in hexadecimal in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;FA8072&quot;) +\n   &quot; is salmon in hexadecimal in this line&quot;)\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontcolor(&quot;FF00&quot;) +\n   &quot; is red in hexadecimal in this line&quot;)\n\nThe previous example produces the same output as the following HTML:\n\n\n&lt;FONT COLOR=&quot;maroon&quot;&gt;Hello, world&lt;\/FONT&gt; is maroon in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;salmon&quot;&gt;Hello, world&lt;\/FONT&gt; is salmon in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;red&quot;&gt;Hello, world&lt;\/FONT&gt; is red in this line\n\n&lt;P&gt;&lt;FONT COLOR=&quot;8000&quot;&gt;Hello, world&lt;\/FONT&gt;\nis maroon in hexadecimal in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;FA8072&quot;&gt;Hello, world&lt;\/FONT&gt;\nis salmon in hexadecimal in this line\n&lt;P&gt;&lt;FONT COLOR=&quot;FF00&quot;&gt;Hello, world&lt;\/FONT&gt;\nis red in hexadecimal in this line\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontsize","title":"String.fontsize","description":" Summary \nCauses a string to be displayed in the specified font size as if it were in a &lt;FONT SIZE=&quot;size&quot;&gt; tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nfontsize(size)\n\n\n Parameters \n size&nbsp; An integer between 1 and 7, a string representing a signed integer between 1 and 7.\n\n Description \nUse the fontsize method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\nWhen you specify size as an integer, you set the size of stringName to one of the 7 defined sizes. When you specify size as a string such as &quot;-2&quot;, you adjust the font size of stringName relative to the size set in the BASEFONT tag.\n\n Examples \n Example: Using string methods to change the size of a string \nThe following example uses string methods to change the size of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONT SIZE=&quot;7&quot;&gt;Hello, world&lt;\/FONT&gt;\n\n Example: Using string methods to change the size of a string \nThe following example uses string methods to change the size of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONT SIZE=&quot;7&quot;&gt;Hello, world&lt;\/FONT&gt;\n\n See Also \nbig,\nsmall\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/small","title":"String.small","description":" Summary \nCauses a string to be displayed in a small font, as if it were in a SMALL tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nsmall()\n\n\n Parameters \nNone.\n\n Description \nUse the small method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using string methods to change the size of a string \n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONTSIZE=7&gt;Hello, world&lt;\/FONTSIZE&gt;\n\n Example: Using string methods to change the size of a string \n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.small())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.big())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.fontsize(7))\n\nThis example produces the same output as the following HTML:\n\n\n&lt;SMALL&gt;Hello, world&lt;\/SMALL&gt;\n&lt;P&gt;&lt;BIG&gt;Hello, world&lt;\/BIG&gt;\n&lt;P&gt;&lt;FONTSIZE=7&gt;Hello, world&lt;\/FONTSIZE&gt;\n\n See Also \nbig,\nfontsize\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sub","title":"String.sub","description":" Summary \nCauses a string to be displayed as a subscript, as if it were in a SUB tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nsub()\n\n\n Parameters \nNone.\n\n Description \nUse the sub method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.\n\n Examples \n Example: Using sub and sup methods to format a string \nThe following example uses the sub and sup methods to format a string:\n\n\nvar superText=&quot;superscript&quot;\nvar subText=&quot;subscript&quot;\n\ndocument.write(&quot;This is what a &quot; + superText.sup() + &quot; looks like.&quot;)\ndocument.write(&quot;&lt;P&gt;This is what a &quot; + subText.sub() + &quot; looks like.&quot;)\n\nThis example produces the same output as the following HTML:\n\n\nThis is what a &lt;SUP&gt;superscript&lt;\/SUP&gt; looks like.\n&lt;P&gt;This is what a &lt;SUB&gt;subscript&lt;\/SUB&gt; looks like.\n\n Example: Using sub and sup methods to format a string \nThe following example uses the sub and sup methods to format a string:\n\n\nvar superText=&quot;superscript&quot;\nvar subText=&quot;subscript&quot;\n\ndocument.write(&quot;This is what a &quot; + superText.sup() + &quot; looks like.&quot;)\ndocument.write(&quot;&lt;P&gt;This is what a &quot; + subText.sub() + &quot; looks like.&quot;)\n\nThis example produces the same output as the following HTML:\n\n\nThis is what a &lt;SUP&gt;superscript&lt;\/SUP&gt; looks like.\n&lt;P&gt;This is what a &lt;SUB&gt;subscript&lt;\/SUB&gt; looks like.\n\n See Also \nsup\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/link","title":"String.link","description":" Summary \nCreates an HTML hypertext link that requests another URL.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nlink(hrefAttribute)\n\n\n Parameters \n hrefAttribute&nbsp; Any string that specifies the HREF of the A tag; it should be a valid URL (relative or absolute).\n\n Description \nUse the link method to create an HTML snippet for a hypertext link. The returned string can then be added to the document via document.write\n or element.innerHTML\n.\nLinks created with the link method become elements in the links array of the document object. See document.links\n.\n\n Examples \n Example: Using link \nThe following example displays the word &quot;Netscape&quot; as a hypertext link that returns the user to the Netscape home page:\n\n\nvar hotText=&quot;Netscape&quot;\nvar URL=&quot;http:\/\/home.netscape.com&quot;\n\ndocument.write(&quot;Click to return to &quot; + hotText.link(URL))\n\nThis example produces the same output as the following HTML:\n\n\nClick to return to &lt;A HREF=&quot;http:\/\/home.netscape.com&quot;&gt;Netscape&lt;\/A&gt;\n\n\n  Example: Using link \nThe following example displays the word &quot;Netscape&quot; as a hypertext link that returns the user to the Netscape home page:\n\n\nvar hotText=&quot;Netscape&quot;\nvar URL=&quot;http:\/\/home.netscape.com&quot;\n\ndocument.write(&quot;Click to return to &quot; + hotText.link(URL))\n\nThis example produces the same output as the following HTML:\n\n\nClick to return to &lt;A HREF=&quot;http:\/\/home.netscape.com&quot;&gt;Netscape&lt;\/A&gt;\n\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/strike","title":"String.strike","description":" Summary \nCauses a string to be displayed as struck-out text, as if it were in a STRIKE tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nstrike()\n\n\n Parameters \nNone.\n\n Description \nUse the strike method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.\n\n Examples \n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n Example: Using string methods to change the formatting of a string \nThe following example uses string methods to change the formatting of a string:\n\n\nvar worldString=&quot;Hello, world&quot;\n\ndocument.write(worldString.blink())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.bold())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.italics())\ndocument.write(&quot;&lt;P&gt;&quot; + worldString.strike())\n\nThis example produces the same output as the following HTML:\n\n\n&lt;BLINK&gt;Hello, world&lt;\/BLINK&gt;\n&lt;P&gt;&lt;B&gt;Hello, world&lt;\/B&gt;\n&lt;P&gt;&lt;I&gt;Hello, world&lt;\/I&gt;\n&lt;P&gt;&lt;STRIKE&gt;Hello, world&lt;\/STRIKE&gt;\n\n See Also \nblink,\nbold,\nitalics\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sup","title":"String.sup","description":" Summary \nCauses a string to be displayed as a superscript, as if it were in a SUP tag.\n\n   Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none  \n  Syntax \n\nsup()\n\n\n Parameters \nNone.\n\n Description \nUse the sup method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.\n\n Examples \n Example: Using sub and sup methods to format a string \nThe following example uses the sub and sup methods to format a string:\n\n\nvar superText=&quot;superscript&quot;\nvar subText=&quot;subscript&quot;\n\ndocument.write(&quot;This is what a &quot; + superText.sup() + &quot; looks like.&quot;)\ndocument.write(&quot;&lt;P&gt;This is what a &quot; + subText.sub() + &quot; looks like.&quot;)\n\nThis example produces the same output as the following HTML:\n\n\nThis is what a &lt;SUP&gt;superscript&lt;\/SUP&gt; looks like.\n&lt;P&gt;This is what a &lt;SUB&gt;subscript&lt;\/SUB&gt; looks like.\n\n Example: Using sub and sup methods to format a string \nThe following example uses the sub and sup methods to format a string:\n\n\nvar superText=&quot;superscript&quot;\nvar subText=&quot;subscript&quot;\n\ndocument.write(&quot;This is what a &quot; + superText.sup() + &quot; looks like.&quot;)\ndocument.write(&quot;&lt;P&gt;This is what a &quot; + subText.sub() + &quot; looks like.&quot;)\n\nThis example produces the same output as the following HTML:\n\n\nThis is what a &lt;SUP&gt;superscript&lt;\/SUP&gt; looks like.\n&lt;P&gt;This is what a &lt;SUB&gt;subscript&lt;\/SUB&gt; looks like.\n\n See Also \nsub\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBufferView","title":"ArrayBufferView","description":"&nbsp;Attributes\n   Attribute Type Description   buffer ArrayBuffer The buffer this view references. Read only.   byteLength  unsigned long  The length, in bytes, of the view. Read only.   byteOffset  unsigned long  The offset, in bytes, to the first byte of the view within the ArrayBuffer.  \n\nTyped array subclasses\nThe following subclasses provide buffer views allowing access to the data in specific data types:\n   Type Size Description Equivalent C type   Int8Array 1 8-bit twos complement signed integer signed char   Uint8Array  1 8-bit unsigned integer unsigned char    Int16Array  2 16-bit twos complement signed integer short    Uint16Array  2 16-bit unsigned integer unsigned short    Int32Array  4 32-bit twos complement signed integer int    Uint32Array  4 32-bit unsigned integer unsigned int    Float32Array  4 32-bit IEEE&nbsp;floating point number float    Float64Array  8 64-bit IEEE floating point number double   \nSee also\n DataView Typed Array Specification JavaScript typed arrays\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/prototype","title":"Error.prototype","description":"Summary\nRepresents the prototype for the Error constructor.\nDescription\n&nbsp;\nAll Error instances and instances of non-generic errors inherit from Error.prototype. As with all constructor functions, you can use the prototype of the constructor to add properties or methods to all instances created with that constructor.\n&nbsp;\nProperties\nStandard properties\n constructor Specifies the function that created an instance's prototype. message Error message. name Error name.\n\nVendor-specific extensions\n\n\nNon-standard\nMicrosoft\n description Error description. Similar to message. number Error number.\n\nMozilla\n fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.\n\nStandard properties\n constructor Specifies the function that created an instance's prototype. message Error message. name Error name.\n\nVendor-specific extensions\n\n\nNon-standard\nMicrosoft\n description Error description. Similar to message. number Error number.\n\nMozilla\n fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.\n\nMicrosoft\n description Error description. Similar to message. number Error number.\n\nMozilla\n fileName Path to file that raised this error. lineNumber Line number in file that raised this error. stack Stack trace.\n\nMethods\n toSource Non-standard      Returns a string containing the source of the specified Error object; you can use this value to create a new object. Overrides the Object.toSource method. toString Returns a string representing the specified object. Overrides the Object.toString method.\n\n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error Object.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/message","title":"Error.message","description":"Summary\nA human-readable description of the error.\n   Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition  \n\nDescription\nThis property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString method to create a string representation of the Error.\nBy default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor.\nExamples\nExample: Throwing a custom error\n\nvar e = new Error(&quot;Could not parse input&quot;); \/\/ e.message is &quot;Could not parse input&quot;\nthrow e;\n\nExample: Throwing a custom error\n\nvar e = new Error(&quot;Could not parse input&quot;); \/\/ e.message is &quot;Could not parse input&quot;\nthrow e;\n\nSee also\n name toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/name","title":"Error.name","description":"Summary\nA name for the type of error.\n   Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition  \nDescription\nBy default, Error instances are given the name &quot;Error&quot;. The name property, in addition to the message property, is used by the Error.prototype.toString method to create a string representation of the error.\nExamples\nExample: Throwing a custom error\n\nvar e = new Error(&quot;Malformed input&quot;); \/\/ e.name is &quot;Error&quot;\ne.name = &quot;ParseError&quot;;                \/\/ e.toString() would return\nthrow e;                              \/\/ &quot;ParseError: Malformed input&quot;\n\nExample: Throwing a custom error\n\nvar e = new Error(&quot;Malformed input&quot;); \/\/ e.name is &quot;Error&quot;\ne.name = &quot;ParseError&quot;;                \/\/ e.toString() would return\nthrow e;                              \/\/ &quot;ParseError: Malformed input&quot;\n\nSee also\n message toString\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/Stack","title":"Error.Stack","description":"Description\nThis non-standard property of Error objects offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.\nEach step will be separated by a newline, with the first part of the line being the function name (if not a call from the global scope), followed by the argument values converted to string in parentheses, then by an at (@) sign, the file location (except when the function is the error constructor as the error is being thrown), a colon, and, if there is a file location, the line number. (Note the Error object also possesses the fileName and lineNumber properties for retrieving these from the error thrown (but only the error, and not its trace).)\nWhile an object (or array, etc.) will appear in the converted form &quot;[object Object]&quot;, and as such cannot be evaluated back into the actual objects, scalar values can be retrieved (though it may be easier to use arguments.callee.caller.arguments, as could the function name be retrieved by arguments.callee.caller.name). &quot;undefined&quot; is listed as &quot;(void 0)&quot;. Note that if string arguments are passed in with values such as &quot;@&quot;, &quot;(&quot;, &quot;)&quot; (or if in file names), you cannot easily rely on these for breaking the line into its component parts.\nExample\nThe following HTML markup demonstrates the use of stack property.\n\r\n          &lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.01\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/html4\/strict.dtd&quot;&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text\/html; charset=windows-1251&quot;&gt;\n&lt;meta http-equiv=&quot;Content-Script-Type&quot; content=&quot;text\/javascript&quot;&gt;\n&lt;title&gt;Stack Trace Example&lt;\/title&gt;\n&lt;body&gt;\n    &lt;script type=&quot;text\/javascript&quot;&gt;\n        function trace() {\n            try {\n                throw new Error(&quot;myError&quot;);\n            }\n            catch(e) {\n                alert(e.stack);\n            }\n        }\n        function b() {\n            trace();\n        }\n        function a() {\n            b(3, 4, &quot;\\n\\n&quot;, undefined, {});\n        }\n        a(&quot;first call, firstarg&quot;);\n    &lt;\/script&gt;\r\n        \nAssuming the above markup is saved as C:\\example.html on a Windows file system and is open in a browser it produces an alert message box with the following text:\n\nError(&quot;myError&quot;)@:0\ntrace()@file:\/\/\/C:\/example.html:9\nb(3,4,&quot;\\n\\n&quot;,(void 0),[object Object])@file:\/\/\/C:\/example.html:16\na(&quot;first call, firstarg&quot;)@file:\/\/\/C:\/example.html:19\n@file:\/\/\/C:\/example.html:21\n\nSee also\nComponents.stack"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toSource","title":"Error.toSource","description":"Summary\nReturns code that could eval to the same error.\n   Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition none  \n Syntax \nerror.toSource()\n\n Parameters \nNone.\n\n Description \nCalling the toString method of an Error instance (including NativeErrors) will return a string containing the source code of the error. This string can be evaluated to create an (approximately) equal object. Naturally, the string containing the source follows the structure of the Error constructor. For example:\n\n(new name(message, fileName, lineNumber))\n\nwhere these attributes correspond to the respective properties of the error instance.\n\nBe aware that the properties used by the toSource method in the creation of this string are mutable and may not accurately reflect the function used to create an error instance or the filename or line number where the actual error occurred.\n See also \n fileName\n lineNumber\n message\n name\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError\/prototype","title":"EvalError.prototype","description":"Summary\nRepresents the prototype the EvalError constructor.\nDescription\nAll EvalError instances inherit from EvalError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote:&nbsp;Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the EvalError prototype object does not contain any methods of its own, EvalError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toString","title":"Error.toString","description":"Summary\nReturns a string representing the specified Error object.\n   Method of Error     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \nSyntax\nerror.toString()\nParameters\nNone.\nDescription\nThe Error object overrides the Object.prototype.toString method inherited by all objects. According to ECMA-262, implementations are free to decide the behavior of this method. SpiderMonkey joins string representations of the name and message properties with a colon and a space separating the two. If the string representation of either of these two properties is an empty string, this method simply returns the string representation of the property that has a non-zero length. If both properties' string representations are empty strings, this method returns an empty string.\nNote that when creating a string representation of the name and message properties, this method does not invoke those properties' toString methods. If the value in either of these properties is not already a string, this method will behave as if that property contained an empty string.\nExample\n\nvar e = new Error(&quot;fatal error&quot;);\ne.toString(); \/\/ returns &quot;Error: fatal error&quot;\n\ne.name = undefined;\ne.toString(); \/\/ returns &quot;fatal error&quot;\n\ne.message = undefined;\ne.toString(); \/\/ returns &quot;&quot;\n\ne.name = &quot;Error&quot;;\ne.toString(); \/\/ returns &quot;Error&quot;\n\nSee also\ntoSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError\/prototype","title":"RangeError.prototype","description":"Summary\nRepresents the prototype the RangeError constructor.\nDescription\nAll RangeError instances inherit from RangeError.prototype. You can use the prototype to add properties or methods to all instances.Properties\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nAlthough ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/prototype","title":"ReferenceError.prototype","description":"Summary\nRepresents the prototype for the ReferenceError constructor.\nDescription\nAll ReferenceError instances inherit from ReferenceError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/name","title":"ReferenceError.name","description":"Summary\nA name for the type of error. \nDescription\nBy default, ReferenceError instances are given the name &quot;ReferenceError&quot;.\nSee also\n message toString\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError\/prototype","title":"SyntaxError.prototype","description":"Summary\nRepresents the prototype for the SyntaxError constructor.\nDescription\nAll&nbsp;SyntaxError&nbsp;instances inherit from&nbsp;SyntaxError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n constructor Specifies the function that created an instance's prototype. name Error name.\n\nNote: Although ECMA-262&nbsp; specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\nSee also\n Error.prototype Function.prototype\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError\/prototype","title":"TypeError.prototype","description":"Summary\nRepresents the prototype for the TypeError constructor.\nDescription\nAll TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError\/prototype","title":"URIError.prototype","description":"Summary\nRepresents the prototype for the URIError constructor.\nDescription\nAll URIError instances inherit from URIError.prototype. You can use the prototype to add properties or methods to all instances.\nProperties\n constructor Specifies the function that created an instance's prototype.\n\n name Error name.\n\nNote: Although ECMA-262&nbsp;specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.\n\n\n\nProperties inherited from Error.prototype\n\nfileName, lineNumber, message, name, number, stack\n\n \nMethods\nAlthough the URIError prototype object does not contain any methods of its own, URIError instances do inherit some methods through the prototype chain.\n\n\n\nMethods inherited from Error.prototype\n\ntoSource, toString\n\n \n\n\n\nMethods inherited from Object.prototype\n\n__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch\n\n \nSee also\n Error.prototype Function.prototype\n\n\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Constructor","title":"Object.Constructor","description":"Summary\nReturns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, &quot;read-only&quot;).\n   Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition  \n Description\nAll objects inherit a constructor property from their prototype:\n\no = new Object \/\/ or o = {} in JavaScript 1.2\no.constructor == Object\na = new Array \/\/ or a = [] in JavaScript 1.2\na.constructor == Array\nn = new Number(3)\nn.constructor == Number\n\nEven though you cannot construct most HTML objects, you can do comparisons. For example,\n\ndocument.constructor == Document\ndocument.form3.constructor == Form\n\nExamples\nExample: Displaying the constructor of an object\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\nfunction Tree(name) {\n   this.name = name;\n}\ntheTree = new Tree(&quot;Redwood&quot;);\nconsole.log(&quot;theTree.constructor is &quot; + theTree.constructor);\n\nThis example displays the following output:\n\ntheTree.constructor is function Tree(name) {\n    this.name = name;\n}\n\nExample: Changing the constructor of an object\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and &quot;test&quot; variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.\n\nfunction Type(){};\nvar\ttypes = [\n\tnew Array,\t[],\n\tnew Boolean,\ttrue,\n\tnew Date,\n\tnew Error,\n\tnew Function,\tfunction(){},\n\tMath,\t\n\tnew Number,\t1,\n\tnew Object,\t{},\n\tnew RegExp,\t\/(?:)\/,\n\tnew String,\t&quot;test&quot;\n];\nfor(var i = 0; i &lt; types.length; i++){\n\ttypes[i].constructor = Type;\n\ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n};\nalert(types.join(&quot;\\n&quot;));\n\nExample: Displaying the constructor of an object\nThe following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.\n\nfunction Tree(name) {\n   this.name = name;\n}\ntheTree = new Tree(&quot;Redwood&quot;);\nconsole.log(&quot;theTree.constructor is &quot; + theTree.constructor);\n\nThis example displays the following output:\n\ntheTree.constructor is function Tree(name) {\n    this.name = name;\n}\n\nExample: Changing the constructor of an object\nThe following example shows how to modify constructor value of generic objects. Only true, 1 and &quot;test&quot; variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.\n\nfunction Type(){};\nvar\ttypes = [\n\tnew Array,\t[],\n\tnew Boolean,\ttrue,\n\tnew Date,\n\tnew Error,\n\tnew Function,\tfunction(){},\n\tMath,\t\n\tnew Number,\t1,\n\tnew Object,\t{},\n\tnew RegExp,\t\/(?:)\/,\n\tnew String,\t&quot;test&quot;\n];\nfor(var i = 0; i &lt; types.length; i++){\n\ttypes[i].constructor = Type;\n\ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n};\nalert(types.join(&quot;\\n&quot;));\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/parse","title":"JSON.parse","description":"Summary\nParse a string as JSON, optionally transforming the value produced by parsing.\n   Method of JSON     Implemented in JavaScript 1.7   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nJSON.parse(text[, reviver])\nParameters\n text&nbsp; The string to parse as JSON. &nbsp;See the JSON object for a description of JSON syntax.\n\n reviver&nbsp; If a function, prescribes how the value originally produced by parsing is transformed, before being returned.\n\nDescription\nJSON.parse parses a string as JSON and returns the parsed value.\n\r\n          JSON.parse('{}'); \/\/ {}\nJSON.parse('true'); \/\/ true\nJSON.parse('&quot;foo&quot;'); \/\/ &quot;foo&quot;\nJSON.parse('[1, 5, &quot;false&quot;]'); \/\/ [1, 5, &quot;false&quot;]\nJSON.parse('null'); \/\/ null\r\n        \nIf a reviver is specified, the value computed by parsing is transformed before being returned. Specifically, the computed value, and all its properties (beginning with the most nested properties and proceeding to the original value itself), are individually run through the reviver, which is called with the object containing the property being processed as this and with the property name as a string and the property value as arguments. If the reviver function returns undefined&nbsp;(or returns no value, e.g. if execution falls off the end of the function), the property is deleted from the object. Otherwise the property is redefined to be the return value.\nThe reviver is ultimately called with the empty string and the topmost value to permit transformation of the topmost value. &nbsp;Be certain to handle this case properly, usually by returning the provided value, or&nbsp;JSON.parse&nbsp;will return undefined.\n\r\n          var transformed =\n  JSON.parse('{&quot;p&quot;: 5}', function(k, v) { if (k === &quot;&quot;) return v; return v * 2; });\n\/\/ transformed is { p: 10 }\r\n        \nIf the string to parse is not valid JSON, a SyntaxError exception is thrown."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/stringify","title":"JSON.stringify","description":"Summary\nConvert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.\n   Method of JSON     Implemented in JavaScript 1.7   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nJSON.stringify(value[, replacer [, space]])\nParameters\n value The value to convert to a JSON string. replacer If a function, transforms values and properties encountered while stringifying; if an array, specifies the set of properties included in objects in the final string. A detailed description of the replacer function is provided in Using native JSON#The_replacer_parameter. space Causes the resulting string to be pretty-printed.\n\nDescription\nJSON.stringify converts an object to JSON notation representing it.\n\r\n          assert(JSON.stringify({}) === '{}');\nassert(JSON.stringify(true) === 'true');\nassert(JSON.stringify(&quot;foo&quot;) === '&quot;foo&quot;');\nassert(JSON.stringify([1, &quot;false&quot;, false]) === '[1,&quot;false&quot;,false]');\nassert(JSON.stringify({ x: 5 }) === '{&quot;x&quot;:5}');\nJSON.stringify({x: 5, y: 6}); \/\/ '{&quot;x&quot;:5,&quot;y&quot;:6}' or '{&quot;y&quot;:6,&quot;x&quot;:5}'\r\n        \nProperties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.\nBoolean, Number, and String objects are converted to the corresponding primitive values during stringification, in accord with the traditional conversion semantics.\nIf undefined, a function, or an XML value is encountered during conversion it is either omitted (when it is found in an object) or censored to null (when it is found in an array).\nspace argument\nThe space argument may be used to control spacing in the final string. If it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10). If it is a string, successive levels will indented by this string (or the first ten characters of it).\n\r\n          JSON.stringify({ a: 2 }, null, &quot; &quot;);   \/\/ '{\\n &quot;a&quot;: 2\\n}'\r\n        \nUsing a tab character mimics standard pretty-print appearance:\n\r\n          JSON.stringify({ uno: 1, dos : 2 }, null, '\\t')\n\/\/ returns the string:\n\/\/ '{            \\\n\/\/     &quot;uno&quot;: 1, \\\n\/\/     &quot;dos&quot;: 2  \\\n\/\/ }'\r\n        \n&nbsp;\ntoJSON behavior\nIf an object being stringified has a property named toJSON whose value is a function, then the toJSON method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON method when called will be serialized. For example:\n\r\n          var x = {\n  foo: 'foo',\n  toJSON: function () {\n    return 'bar';\n  }\n};\nvar json = JSON.stringify({x: x});\r\n        \njson will be the string '{&quot;x&quot;:&quot;bar&quot;}'.space argument\nThe space argument may be used to control spacing in the final string. If it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10). If it is a string, successive levels will indented by this string (or the first ten characters of it).\n\r\n          JSON.stringify({ a: 2 }, null, &quot; &quot;);   \/\/ '{\\n &quot;a&quot;: 2\\n}'\r\n        \nUsing a tab character mimics standard pretty-print appearance:\n\r\n          JSON.stringify({ uno: 1, dos : 2 }, null, '\\t')\n\/\/ returns the string:\n\/\/ '{            \\\n\/\/     &quot;uno&quot;: 1, \\\n\/\/     &quot;dos&quot;: 2  \\\n\/\/ }'\r\n        \n&nbsp;\ntoJSON behavior\nIf an object being stringified has a property named toJSON whose value is a function, then the toJSON method customizes JSON stringification behavior: instead of the object being serialized, the value returned by the toJSON method when called will be serialized. For example:\n\r\n          var x = {\n  foo: 'foo',\n  toJSON: function () {\n    return 'bar';\n  }\n};\nvar json = JSON.stringify({x: x});\r\n        \njson will be the string '{&quot;x&quot;:&quot;bar&quot;}'."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN2","title":"Math.LN2","description":" Summary \nThe natural logarithm of 2, approximately 0.693.\n\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nBecause LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created.\n\n Examples \n Example: Using Math.LN2 \nThe following function returns the natural log of 2:\n\n\nfunction getNatLog2() {\n   return Math.LN2\n}\n  Example: Using Math.LN2 \nThe following function returns the natural log of 2:\n\n\nfunction getNatLog2() {\n   return Math.LN2\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/E","title":"Math.E","description":"Summary\nThe base of natural logarithms, e, approximately 2.718.\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Description\nBecause E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created.\nExamples\nExample: Using Math.E\nThe following function returns e:\n\nfunction getNapier() {\n   return Math.E\n}\n Example: Using Math.E\nThe following function returns e:\n\nfunction getNapier() {\n   return Math.E\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN10","title":"Math.LN10","description":" Summary \nThe natural logarithm of 10, approximately 2.302.\n\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nBecause LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created.\n\n Examples \n Example: Using Math.LN10 \nThe following function returns the natural log of 10:\n\n\nfunction getNatLog10() {\n   return Math.LN10\n}\n  Example: Using Math.LN10 \nThe following function returns the natural log of 10:\n\n\nfunction getNatLog10() {\n   return Math.LN10\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG2E","title":"Math.LOG2E","description":"Summary\nThe base 2 logarithm of E (approximately 1.442).\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Description \nBecause LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created.\n\n Examples \n Example: Using Math.LOG2E \nThe following function returns the base 2 logarithm of E:\n\n\nfunction getLog2e() {\n   return Math.LOG2E\n}\n\n\n  Example: Using Math.LOG2E \nThe following function returns the base 2 logarithm of E:\n\n\nfunction getLog2e() {\n   return Math.LOG2E\n}\n\n\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG10E","title":"Math.LOG10E","description":" Summary \nThe base 10 logarithm of E (approximately 0.434).\n\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nBecause LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created.\n\n Examples \n Example: Using Math.LOG10E \nThe following function returns the base 10 logarithm of E:\n\n\nfunction getLog10e() {\n   return Math.LOG10E\n} \n  Example: Using Math.LOG10E \nThe following function returns the base 10 logarithm of E:\n\n\nfunction getLog10e() {\n   return Math.LOG10E\n} \n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/PI","title":"Math.PI","description":" Summary \nThe ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nBecause PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created.\n\n Examples \n Example: Using PI \nThe following function returns the value of pi:\n\n\nfunction getPi() {\n   return Math.PI\n}\n  Example: Using PI \nThe following function returns the value of pi:\n\n\nfunction getPi() {\n   return Math.PI\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT1_2","title":"Math.SQRT1_2","description":"Summary\nThe square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Description\nBecause SQRT1_2 is a static property of Math, you always use it as Math.SQRT1_2, rather than as a property of a Math object you created.\nExamples\nExample: Using SQRT1_2\nThe following function returns 1 over the square root of 2:\n\nfunction getRoot1_2() {\n   return Math.SQRT1_2\n}\n Example: Using SQRT1_2\nThe following function returns 1 over the square root of 2:\n\nfunction getRoot1_2() {\n   return Math.SQRT1_2\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT2","title":"Math.SQRT2","description":" Summary \nThe square root of 2, approximately 1.414.\n\n   Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Description \nBecause SQRT2 is a static property of Math, you always use it as Math.SQRT2, rather than as a property of a Math object you created.\n\n Examples \n Example: Using Math.SQRT2 \nThe following function returns the square root of 2:\n\n\nfunction getRoot2() {\n   return Math.SQRT2\n}\n  Example: Using Math.SQRT2 \nThe following function returns the square root of 2:\n\n\nfunction getRoot2() {\n   return Math.SQRT2\n}\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/abs","title":"Math.abs","description":" Summary \nReturns the absolute value of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \nvar abs = Math.abs(x);\n\n Parameters \n x&nbsp; A number.\n\n Description \nabs is a static method of Math, so you always use it as Math.abs(), rather than as a method of a Math object you created.\n\n Examples \n Example: Math.abs behavior \nPassing a non-numeric string or undefined\/empty variable returns NaN. Passing null returns 0.\n\nMath.abs('-1');     \/\/ 1\nMath.abs(-2);       \/\/ 2\nMath.abs(null);     \/\/ 0\nMath.abs(&quot;string&quot;); \/\/ NaN\nMath.abs();         \/\/ NaN\n  Example: Math.abs behavior \nPassing a non-numeric string or undefined\/empty variable returns NaN. Passing null returns 0.\n\nMath.abs('-1');     \/\/ 1\nMath.abs(-2);       \/\/ 2\nMath.abs(null);     \/\/ 0\nMath.abs(&quot;string&quot;); \/\/ NaN\nMath.abs();         \/\/ NaN\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/acos","title":"Math.acos","description":" Summary \nReturns the arccosine (in radians) of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.acos(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nThe acos method returns a numeric value between 0 and pi radians for x between -1 and 1. If the value of number is outside this range, it returns NaN.\nacos is a static method of Math, so you always use it as Math.acos(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.acos \nThe following function returns the arccosine of the variable x:\n\n\nfunction getAcos(x) {\n   return Math.acos(x)\n}\n\nIf you pass -1 to getAcos, it returns 3.141592653589793; if you pass 2, it returns NaN because 2 is out of range.\n\n Example: Using Math.acos \nThe following function returns the arccosine of the variable x:\n\n\nfunction getAcos(x) {\n   return Math.acos(x)\n}\n\nIf you pass -1 to getAcos, it returns 3.141592653589793; if you pass 2, it returns NaN because 2 is out of range.\n\n See Also \nasin,\natan,\natan2,\ncos,\nsin,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/asin","title":"Math.asin","description":" Summary \nReturns the arcsine (in radians) of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.asin(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nThe asin method returns a numeric value between -pi\/2 and pi\/2 radians for x between -1 and 1. If the value of number is outside this range, it returns NaN.\nasin is a static method of Math, so you always use it as Math.asin(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.asin \nThe following function returns the arcsine of the variable x:\n\n\nfunction getAsin(x) {\n   return Math.asin(x)\n}\n\nIf you pass getAsin the value 1, it returns 1.570796326794897 (pi\/2); if you pass it the value 2, it returns NaN because 2 is out of range.\n\n Example: Using Math.asin \nThe following function returns the arcsine of the variable x:\n\n\nfunction getAsin(x) {\n   return Math.asin(x)\n}\n\nIf you pass getAsin the value 1, it returns 1.570796326794897 (pi\/2); if you pass it the value 2, it returns NaN because 2 is out of range.\n\n See Also \nacos,\natan,\natan2,\ncos,\nsin,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan","title":"Math.atan","description":" Summary \nReturns the arctangent (in radians) of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.atan(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nThe atan method returns a numeric value between -pi\/2 and pi\/2 radians.\natan is a static method of Math, so you always use it as Math.atan(), rather than as a method of a Math object you created. \n Examples \n Example: Using Math.atan \nThe following function returns the arctangent of the variable x:\n\n\nfunction getAtan(x) {\n   return Math.atan(x)\n}\n\nIf you pass getAtan the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061. \n Example: Using Math.atan \nThe following function returns the arctangent of the variable x:\n\n\nfunction getAtan(x) {\n   return Math.atan(x)\n}\n\nIf you pass getAtan the value 1, it returns 0.7853981633974483; if you pass it the value .5, it returns 0.4636476090008061. \n See Also \nacos,\nasin,\natan2,\ncos,\nsin,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan2","title":"Math.atan2","description":" Summary \nReturns the arctangent of the quotient of its arguments.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.atan2(y, x)\n\n\n Parameters \n y, x&nbsp; Numbers.\n\n Description \nThe atan2 method returns a numeric value between -pi and pi representing the angle theta of an (x,y) point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point (x,y). Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.\natan2 is passed separate x and y arguments, and atan is passed the ratio of those two arguments.\nBecause atan2 is a static method of Math, you always use it as Math.atan2(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.atan2 \nThe following function returns the angle of the polar coordinate:\n\n\nfunction getAtan2(y,x) {\n   return Math.atan2(y,x)\n}\n\nIf you pass getAtan2 the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683.\nMath.atan2( &plusmn;0, -0 ) returns &plusmn;PI.\nMath.atan2( &plusmn;0, +0 ) returns &plusmn;0.\nMath.atan2( &plusmn;0, -x ) returns &plusmn;PI for x &lt; 0.\nMath.atan2( &plusmn;0, x ) returns &plusmn;0 for x &gt; 0.\nMath.atan2( y, &plusmn;0 ) returns -PI\/2 for y &gt; 0.\nMath.atan2( &plusmn;y, -Infinity ) returns &plusmn;PI for finite y &gt; 0.\nMath.atan2( &plusmn;y, +Infinity ) returns &plusmn;0 for finite y &gt; 0.\nMath.atan2( &plusmn;Infinity, +x ) returns &plusmn;PI\/2 for finite x.\nMath.atan2( &plusmn;Infinity, -Infinity ) returns &plusmn;3*PI\/4.\nMath.atan2( &plusmn;Infinity, +Infinity ) returns &plusmn;PI\/4.\n\n Example: Using Math.atan2 \nThe following function returns the angle of the polar coordinate:\n\n\nfunction getAtan2(y,x) {\n   return Math.atan2(y,x)\n}\n\nIf you pass getAtan2 the values (90,15), it returns 1.4056476493802699; if you pass it the values (15,90), it returns 0.16514867741462683.\nMath.atan2( &plusmn;0, -0 ) returns &plusmn;PI.\nMath.atan2( &plusmn;0, +0 ) returns &plusmn;0.\nMath.atan2( &plusmn;0, -x ) returns &plusmn;PI for x &lt; 0.\nMath.atan2( &plusmn;0, x ) returns &plusmn;0 for x &gt; 0.\nMath.atan2( y, &plusmn;0 ) returns -PI\/2 for y &gt; 0.\nMath.atan2( &plusmn;y, -Infinity ) returns &plusmn;PI for finite y &gt; 0.\nMath.atan2( &plusmn;y, +Infinity ) returns &plusmn;0 for finite y &gt; 0.\nMath.atan2( &plusmn;Infinity, +x ) returns &plusmn;PI\/2 for finite x.\nMath.atan2( &plusmn;Infinity, -Infinity ) returns &plusmn;3*PI\/4.\nMath.atan2( &plusmn;Infinity, +Infinity ) returns &plusmn;PI\/4.\n\n See Also \nacos,\nasin,\natan,\ncos,\nsin,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/ceil","title":"Math.ceil","description":" Summary \nReturns the smallest integer greater than or equal to a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.ceil(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nBecause ceil is a static method of Math, you always use it as Math.ceil(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.ceil \nThe following function returns the ceil value of the variable x:\n\n\nfunction getCeil(x) {\n   return Math.ceil(x)\n}\n\nIf you pass 45.95 to getCeil, it returns 46; if you pass -45.95, it returns -45.\n\n Example: Using Math.ceil \nThe following function returns the ceil value of the variable x:\n\n\nfunction getCeil(x) {\n   return Math.ceil(x)\n}\n\nIf you pass 45.95 to getCeil, it returns 46; if you pass -45.95, it returns -45.\n\nSee Also\nfloor, round "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/cos","title":"Math.cos","description":" Summary \nReturns the cosine of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.cos(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nThe cos method returns a numeric value between -1 and 1, which represents the cosine of the angle.\nBecause cos is a static method of Math, you always use it as Math.cos(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.cos \nThe following function returns the cosine of the variable x:\n\n\nfunction getCos(x) {\n   return Math.cos(x)\n}\n\nIf x equals 2*Math.PI, getCos returns 1; if x equals Math.PI, the getCos method returns -1. \n Example: Using Math.cos \nThe following function returns the cosine of the variable x:\n\n\nfunction getCos(x) {\n   return Math.cos(x)\n}\n\nIf x equals 2*Math.PI, getCos returns 1; if x equals Math.PI, the getCos method returns -1. \n See Also \nacos,\nasin,\natan,\natan2,\nsin,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/floor","title":"Math.floor","description":" Summary \nReturns the largest integer less than or equal to a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.floor(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nBecause floor is a static method of Math, you always use it as Math.floor(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.floor \nThe following function returns the floor value of the variable x:\n\n\nfunction getFloor(x) {\n   return Math.floor(x)\n}\n\nIf you pass 45.95 to getFloor, it returns 45; if you pass -45.95, it returns -46.\n\n Example: Using Math.floor \nThe following function returns the floor value of the variable x:\n\n\nfunction getFloor(x) {\n   return Math.floor(x)\n}\n\nIf you pass 45.95 to getFloor, it returns 45; if you pass -45.95, it returns -46.\n\nSee Also\nceil,&nbsp;round "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/log","title":"Math.log","description":" Summary \nReturns the natural logarithm (base E) of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.log(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nIf the value of number is negative, the return value is always NaN.\nBecause log is a static method of Math, you always use it as Math.log(), rather than as a method of a Math object you created. \n Examples \n Example: Using Math.log \nThe following function returns the natural log of the variable x:\n\n\nfunction getLog(x) {\n   return Math.log(x)\n}\n\nIf you pass getLog the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns -Infinity; if you pass it the value -1, it returns NaN because -1 is out of range.\n\n Example: Using Math.log \nThe following function returns the natural log of the variable x:\n\n\nfunction getLog(x) {\n   return Math.log(x)\n}\n\nIf you pass getLog the value 10, it returns 2.302585092994046; if you pass it the value 0, it returns -Infinity; if you pass it the value -1, it returns NaN because -1 is out of range.\n\n See Also \nexp,\npow\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/exp","title":"Math.exp","description":" Summary \nReturns Ex, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.exp(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nBecause exp is a static method of Math, you always use it as Math.exp(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.exp \nThe following function returns the exponential value of the variable x:\n\n\nfunction getExp(x) {\n   return Math.exp(x)\n}\n\nIf you pass getExp the value 1, it returns 2.718281828459045.\n\n Example: Using Math.exp \nThe following function returns the exponential value of the variable x:\n\n\nfunction getExp(x) {\n   return Math.exp(x)\n}\n\nIf you pass getExp the value 1, it returns 2.718281828459045.\n\n See Also \nE,\nlog,\npow\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/max","title":"Math.max","description":"Summary\nReturns the largest of zero or more numbers.\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n Math.max([value1[,value2[, ...]]]) \nParameters\n value1, value2, ...&nbsp; Numbers.\n\nDescription\nBecause max is a static method of Math, you always use it as Math.max(), rather than as a method of a Math object you created.\nIf no arguments are given, the results is -Infinity\nIf at least one of arguments cannot be converted to a number, the result is NaN.\nExamples\nExample: Using Math.max\nMath.max(10, 20) returns 20. Math.max(-10, -20) returns -10. Math.max(-10, 20) returns 20.\n\nfunction getMaxOfArray(numArray) {\n  return Math.max.apply(null, numArray);\n}\n\nThis function uses apply to find the maximum element in a numeric array. getMaxOfArray([1,2,3]) is equivalent to Math.max(1, 2, 3), but you can use getMaxOfArray on programmatically constructed arrays of any size.\nExample: Using Math.max\nMath.max(10, 20) returns 20. Math.max(-10, -20) returns -10. Math.max(-10, 20) returns 20.\n\nfunction getMaxOfArray(numArray) {\n  return Math.max.apply(null, numArray);\n}\n\nThis function uses apply to find the maximum element in a numeric array. getMaxOfArray([1,2,3]) is equivalent to Math.max(1, 2, 3), but you can use getMaxOfArray on programmatically constructed arrays of any size.\nSee also\nMath.min\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/pow","title":"Math.pow","description":" Summary \nReturns base to the exponent power, that is, baseexponent.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.pow(base,exponent)\n\n\n Parameters \n base&nbsp; The base number.\n\n exponents&nbsp; The exponent to which to raise base.\n\n Description \nBecause pow is a static method of Math, you always use it as Math.pow(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.pow \n\nfunction raisePower(x,y) {\n   return Math.pow(x,y)\n}\n\nIf x is 7 and y is 2, raisePower returns 49 (7 to the power of 2).\n\n Example: Using Math.pow \n\nfunction raisePower(x,y) {\n   return Math.pow(x,y)\n}\n\nIf x is 7 and y is 2, raisePower returns 49 (7 to the power of 2).\n\n See Also \nexp,\nlog\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/min","title":"Math.min","description":"Summary\nReturns the smallest of zero or more numbers.\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n\nSyntax\nMath.min([value1[,value2[, ...]]]) \nParameters\n value1, value2, ... Numbers.\n\nDescription\nBecause min is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created.\nIf no arguments are given, the result is Infinity.\nIf at least one of arguments cannot be converted to a number, the result is NaN.\nExamples\nExample: Using Math.min\nThis finds the min of x and y and assigns it to z:\nvar x = 10, y = -20;\nvar z = Math.min(x, y);\n\nExample: Clipping a value with Math.min\nMath.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this\nvar x = f(foo);\nif (x &gt; boundary)\n    x = boundary;\n\nmay be written as this\nvar x = Math.min(f(foo), boundary);\n\nMath.max can be used in a similar way to clip a value at the other end.\nExample: Using Math.min\nThis finds the min of x and y and assigns it to z:\nvar x = 10, y = -20;\nvar z = Math.min(x, y);\n\nExample: Clipping a value with Math.min\nMath.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this\nvar x = f(foo);\nif (x &gt; boundary)\n    x = boundary;\n\nmay be written as this\nvar x = Math.min(f(foo), boundary);\n\nMath.max can be used in a similar way to clip a value at the other end.\nExample: Clipping a value with Math.min\nMath.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this\nvar x = f(foo);\nif (x &gt; boundary)\n    x = boundary;\n\nmay be written as this\nvar x = Math.min(f(foo), boundary);\n\nMath.max can be used in a similar way to clip a value at the other end.\nSee Also\nMath.max\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/random","title":"Math.random","description":"Summary\nReturns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range.\nThe random number generator is seeded from the current time, as in Java.\n   Method of Math     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?  \n\nSyntax\nMath.random()\nParameters\nNone.\nExamples\nExample: Using Math.random\nNote that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for Math.random() itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 262) to calculate the usually-excluded upper bound.\n\r\n          \/\/ Returns a random number between 0 (inclusive) and 1 (exclusive)\nfunction getRandom()\n{\n  return Math.random();\n}\r\n        \n\r\n          \/\/ Returns a random number between min and max\nfunction getRandomArbitary(min, max)\n{\n  return Math.random() * (max - min) + min;\n}\r\n        \n\r\n          \/\/ Returns a random integer between min and max\n\/\/ Using Math.round() will give you a non-uniform distribution!\nfunction getRandomInt(min, max)\n{\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\r\n        \n&nbsp;\nExample: Using Math.random\nNote that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, these ranges, excluding the one for Math.random() itself, aren't exact, and depending on the bounds it's possible in extremely rare cases (on the order of 1 in 262) to calculate the usually-excluded upper bound.\n\r\n          \/\/ Returns a random number between 0 (inclusive) and 1 (exclusive)\nfunction getRandom()\n{\n  return Math.random();\n}\r\n        \n\r\n          \/\/ Returns a random number between min and max\nfunction getRandomArbitary(min, max)\n{\n  return Math.random() * (max - min) + min;\n}\r\n        \n\r\n          \/\/ Returns a random integer between min and max\n\/\/ Using Math.round() will give you a non-uniform distribution!\nfunction getRandomInt(min, max)\n{\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\r\n        \n&nbsp;\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sin","title":"Math.sin","description":" Summary \nReturns the sine of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.sin(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nThe sin method returns a numeric value between -1 and 1, which represents the sine of the argument.\nBecause sin is a static method of Math, you always use it as Math.sin(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.sin \nThe following function returns the sine of the variable x:\n\n\nfunction getSine(x) {\n   return Math.sin(x)\n}\n\nIf you pass getSine the value Math.PI\/2, it returns 1.\n\n Example: Using Math.sin \nThe following function returns the sine of the variable x:\n\n\nfunction getSine(x) {\n   return Math.sin(x)\n}\n\nIf you pass getSine the value Math.PI\/2, it returns 1.\n\n See Also \nacos,\nasin,\natan,\natan2,\ncos,\ntan\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/round","title":"Math.round","description":"Summary\nReturns the value of a number rounded to the nearest integer.\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n Syntax\n Math.round(x) \nParameters\n x&nbsp; A number.\n\nDescription\nIf the fractional portion of number is .5 or greater, the argument is rounded to the next higher integer. If the fractional portion of number is less than .5, the argument is rounded to the next lower integer.\nBecause round is a static method of Math, you always use it as Math.round(), rather than as a method of a Math object you created.\nExamples\nExample: Using Math.round\n\n\/\/Returns the value 20\nx=Math.round(20.49)\n\n\/\/Returns the value 21\nx=Math.round(20.5)\n\n\/\/Returns the value -20\nx=Math.round(-20.5)\n\n\/\/Returns the value -21\nx=Math.round(-20.51)\n\nExample: Using Math.round\n\n\/\/Returns the value 20\nx=Math.round(20.49)\n\n\/\/Returns the value 21\nx=Math.round(20.5)\n\n\/\/Returns the value -20\nx=Math.round(-20.5)\n\n\/\/Returns the value -21\nx=Math.round(-20.51)\n\nSee Also\nceil, floor\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sqrt","title":"Math.sqrt","description":" Summary \nReturns the square root of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.sqrt(x)\n\n\n Parameters \n x&nbsp; A number.\n\n Description \nIf the value of number is negative, sqrt returns NaN.\nBecause sqrt is a static method of Math, you always use it as Math.sqrt(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.sqrt \nThe following function returns the square root of the variable x:\n\n\nfunction getRoot(x) {\n   return Math.sqrt(x)\n}\n\nIf you pass getRoot the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095.\n  Example: Using Math.sqrt \nThe following function returns the square root of the variable x:\n\n\nfunction getRoot(x) {\n   return Math.sqrt(x)\n}\n\nIf you pass getRoot the value 9, it returns 3; if you pass it the value 2, it returns 1.414213562373095.\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/tan","title":"Math.tan","description":" Summary \nReturns the tangent of a number.\n\n   Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition  \n  Syntax \n\nMath.tan(x)\n\n\n Parameters \n x&nbsp; A number representing an angle in radians.\n\n Description \nThe tan method returns a numeric value that represents the tangent of the angle.\nBecause tan is a static method of Math, you always use it as Math.tan(), rather than as a method of a Math object you created.\n\n Examples \n Example: Using Math.tan \nThe following function returns the tangent of the variable x:\n\n\nfunction getTan(x) {\n   return Math.tan(x)\n}\n\nBecause the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.\n\n\nfunction getTanDeg(deg) {\n   var rad = deg * Math.PI\/180;\n   return Math.tan(rad)\n}\n\n Example: Using Math.tan \nThe following function returns the tangent of the variable x:\n\n\nfunction getTan(x) {\n   return Math.tan(x)\n}\n\nBecause the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.\n\n\nfunction getTanDeg(deg) {\n   var rad = deg * Math.PI\/180;\n   return Math.tan(rad)\n}\n\n See Also \nacos,\nasin,\natan,\natan2,\ncos,\nsin\n "},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getPrototypeOf","title":"Object.getPrototypeOf","description":"Summary\nReturns the prototype of the specified object.\n   Method of Object     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition  \n\nSyntax\nObject.getPrototypeOf(object)\nParameters\n object The object whose prototype is to be returned.\n\nDescription\nThrows a TypeError exception if the object parameter isn't an Object.\nCross-browser compatibility\nBased on Kangax's compat table.\n\n\n\n Desktop Mobile\n\n\n\n   Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 5 9 -- 5  \n\n\n\n   Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?  \n\n\nEven if Opera does not support Object.getPrototypeOf() yet, it does support the non-standard __proto__ property since Opera 10.50.See also\n isPrototypeOf&nbsp; John&nbsp;Resig's post on getPrototypeOf\n\n"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Proxy","title":"Proxy","description":"Introduction\nProxies are objects for which the programmer has to define the semantics in JavaScript. The default object semantics are implemented in the JavaScript engine, often written in lower-level languages like C++. Proxies let the programmer define most of the behavior of an object in JavaScript. They are said to provide a meta-programming API.\nTerminology\n catch-all mechanism (or &quot;intercession API&quot;) The technical term for this feature. handler The object that intercepts properties. proxy The object whose properties are being intercepted. proxy factory The object or method that creates intercessive proxies. traps The methods that provide property access. This is analogous to the concept of traps in operating systems.\n\nProxies can be either be trapping or fixed.\nProxy API\nCatch-alls can be defined only on distinct proxy objects, controlled by a handler object. There are two kinds of proxies:\nobject proxies\n\r\n          var proxy = Proxy.create(handler, proto);\r\n        \nand function proxies :\n\r\n          var proxy = Proxy.createFunction(handler, callTrap, constructTrap);\r\n        \nWhere:\n proto is an optional object representing the proxy&rsquo;s prototype (defaults to null if none is provided). callTrap is a variable-argument&nbsp;function(args) { return any; } that reifies &ldquo;proxy(args)&rdquo;. Note: The this-binding of the callTrap function is the this-binding of the call-site. constructTrap is an optional variable-argument&nbsp;function(args) { return any-object; } that reifies &ldquo;new proxy(args)&rdquo;. The this-binding of the constructTrap is either undefined (in strict mode) or the global object (in non-strict mode). If no constructTrap is provided, performing&nbsp;new proxy(...args) calls the proxy&rsquo;s callTrap with this bound to a new object delegating to the proxy's prototype. handler is an object that implements the handler API.\n\nHandler API\nThere are two kinds of traps: fundamental and derived traps. If one of the fundamental traps isn't implemented and the proxy is used in a way that expects the fundamental trap to be defined, then an error is thrown. If a derived trap is implemented, then that trap's code is called whenever the corresponding behavior happens on the proxy. If the derived trap is undefined, a default implementation using the fundamental traps is used. In other words: fundamental traps are required, derived traps are optional.\nFundamental traps\n   Emulated JavaScript code Handler method Description   Object.getOwnPropertyDescriptor(proxy, name) getOwnPropertyDescriptor: function(name) -&gt; PropertyDescriptor | undefined Should return a valid property descriptor object, or undefined to indicate that no property with name exists in the emulated object.   Object.getPropertyDescriptor(proxy, name) getPropertyDescriptor: function(name) -&gt; PropertyDescriptor | undefined This function doesn't exist in ECMAScript 5. Like getOwnPropertyDescriptor, but should also search the prototype chain.   Object.getOwnPropertyNames(proxy) getOwnPropertyNames: function() -&gt; Strings Array Return an array of all own (non-inherited) property names of the emulated object.   Object.getPropertyNames(proxy) getPropertyNames: function() -&gt; Strings Array This function doesn't exist in ECMAScript 5. Like getOwnPropertyNames, but should also return non-overridden inherited properties.   Object.defineProperty(proxy,name,pd) defineProperty: function(name, propertyDescriptor) -&gt; any Define a new property whose attributes are determined by the given propertyDescriptor. The return value of this method is ignored.   delete proxy.name delete: function(name) -&gt; boolean Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the name property was successfully deleted.    Object.freeze(proxy) Object.seal(proxy) Object.preventExtensions(proxy)  fix: function() -&gt; PropertyDescriptor map (indexed on property names) | undefined  Should return an object that maps property names to property descriptors. After a call to fix(), the proxy becomes a regular (non-proxy) object with the properties listed in the return value. The handler is no longer used. Moreover, the respective method (freeze(), seal(), or preventExtension()) is immediately called on the fixed object. Note: the fixed object has the same object identity as the proxy object. If fix() returns undefined, the call throws a TypeError exception.   \n\nDerived traps\nDefault implementation refers to the code that is called for that trap when the trap isn't explicitly defined. In these functions, this refers to the handler object.\n   Emulated JavaScript code Handler method Default implementation Description   name in proxy has: function(name) -&gt; boolean  \r\n          function(name) { \n  return !!this.getPropertyDescriptor(name);\n}\r\n          &nbsp;   Object.prototype.hasOwnProperty.call(proxy, name) hasOwn: function(name) -&gt; boolean  \r\n          function(name) { \n  return !!this.getOwnPropertyDescriptor(name); \n}\r\n          &nbsp;    proxy.name (in the context of &quot;getting the value&quot;) receiver.name (if receiver inherits from a proxy and does not override name)  get: function(receiver, name) -&gt; any  \r\n          function(receiver, name) {\n  var desc = this.getPropertyDescriptor(name);\n  if (desc === undefined) {\n    return undefined;\n  }\n  if ('value' in desc) {\n    return desc.value;\n  } else {\n    if (desc.get === undefined) {\n      return undefined;\n    }\n    return desc.get.call(receiver);\n  }\n}\r\n          &nbsp;receiver is either the proxy or an object that inherits from the proxy.    proxy.name = val (in the context of &quot;setting the value&quot;) receiver.name = val&nbsp;(if receiver inherits from a proxy and does not override&nbsp;name)  set: function(receiver, name, val) -&gt; boolean  \r\n          function(receiver, name, val) {\n  var desc = this.getOwnPropertyDescriptor(name);\n  if (desc) {\n    if ('writable' in desc) {\n      if (desc.writable) {\n        desc.value = val;\n        this.defineProperty(name, desc);\n        return true;\n      } else {\n        return false;\n      }\n    } else { \/\/ accessor\n      if (desc.set) {\n        desc.set.call(receiver, val);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  desc = this.getPropertyDescriptor(name);\n  if (desc) {\n    if ('writable' in desc) {\n      if (desc.writable) {\n        \/\/ fall through\n      } else {\n        return false;\n      }\n    } else { \/\/ accessor\n      if (desc.set) {\n        desc.set.call(receiver, val);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  this.defineProperty(name, {\n    value: val, \n    writable: true, \n    enumerable: true, \n    configurable: true});\n  return true;\n}\r\n          &nbsp;receiver&nbsp;is either the proxy or an object that inherits from the proxy.   for(prop in proxy){...} enumerate: function() -&gt; String Array  \r\n          function() {\n  return this.getPropertyNames().filter(\n    function (name) {\n      return this.getPropertyDescriptor(name).enumerable\n    }\n  );\n}\r\n          From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array.   Object.keys(proxy) keys: function() -&gt; String Array  \r\n          function() {\n  return this.getOwnPropertyNames().filter(\n    function (name) {\n      return this.getOwnPropertyDescriptor(name).enumerable\n    }\n  );\n}\r\n          &nbsp;  \n\nFundamental traps\n   Emulated JavaScript code Handler method Description   Object.getOwnPropertyDescriptor(proxy, name) getOwnPropertyDescriptor: function(name) -&gt; PropertyDescriptor | undefined Should return a valid property descriptor object, or undefined to indicate that no property with name exists in the emulated object.   Object.getPropertyDescriptor(proxy, name) getPropertyDescriptor: function(name) -&gt; PropertyDescriptor | undefined This function doesn't exist in ECMAScript 5. Like getOwnPropertyDescriptor, but should also search the prototype chain.   Object.getOwnPropertyNames(proxy) getOwnPropertyNames: function() -&gt; Strings Array Return an array of all own (non-inherited) property names of the emulated object.   Object.getPropertyNames(proxy) getPropertyNames: function() -&gt; Strings Array This function doesn't exist in ECMAScript 5. Like getOwnPropertyNames, but should also return non-overridden inherited properties.   Object.defineProperty(proxy,name,pd) defineProperty: function(name, propertyDescriptor) -&gt; any Define a new property whose attributes are determined by the given propertyDescriptor. The return value of this method is ignored.   delete proxy.name delete: function(name) -&gt; boolean Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the name property was successfully deleted.    Object.freeze(proxy) Object.seal(proxy) Object.preventExtensions(proxy)  fix: function() -&gt; PropertyDescriptor map (indexed on property names) | undefined  Should return an object that maps property names to property descriptors. After a call to fix(), the proxy becomes a regular (non-proxy) object with the properties listed in the return value. The handler is no longer used. Moreover, the respective method (freeze(), seal(), or preventExtension()) is immediately called on the fixed object. Note: the fixed object has the same object identity as the proxy object. If fix() returns undefined, the call throws a TypeError exception.   \n\nDerived traps\nDefault implementation refers to the code that is called for that trap when the trap isn't explicitly defined. In these functions, this refers to the handler object.\n   Emulated JavaScript code Handler method Default implementation Description   name in proxy has: function(name) -&gt; boolean  \r\n          function(name) { \n  return !!this.getPropertyDescriptor(name);\n}\r\n          &nbsp;   Object.prototype.hasOwnProperty.call(proxy, name) hasOwn: function(name) -&gt; boolean  \r\n          function(name) { \n  return !!this.getOwnPropertyDescriptor(name); \n}\r\n          &nbsp;    proxy.name (in the context of &quot;getting the value&quot;) receiver.name (if receiver inherits from a proxy and does not override name)  get: function(receiver, name) -&gt; any  \r\n          function(receiver, name) {\n  var desc = this.getPropertyDescriptor(name);\n  if (desc === undefined) {\n    return undefined;\n  }\n  if ('value' in desc) {\n    return desc.value;\n  } else {\n    if (desc.get === undefined) {\n      return undefined;\n    }\n    return desc.get.call(receiver);\n  }\n}\r\n          &nbsp;receiver is either the proxy or an object that inherits from the proxy.    proxy.name = val (in the context of &quot;setting the value&quot;) receiver.name = val&nbsp;(if receiver inherits from a proxy and does not override&nbsp;name)  set: function(receiver, name, val) -&gt; boolean  \r\n          function(receiver, name, val) {\n  var desc = this.getOwnPropertyDescriptor(name);\n  if (desc) {\n    if ('writable' in desc) {\n      if (desc.writable) {\n        desc.value = val;\n        this.defineProperty(name, desc);\n        return true;\n      } else {\n        return false;\n      }\n    } else { \/\/ accessor\n      if (desc.set) {\n        desc.set.call(receiver, val);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  desc = this.getPropertyDescriptor(name);\n  if (desc) {\n    if ('writable' in desc) {\n      if (desc.writable) {\n        \/\/ fall through\n      } else {\n        return false;\n      }\n    } else { \/\/ accessor\n      if (desc.set) {\n        desc.set.call(receiver, val);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  this.defineProperty(name, {\n    value: val, \n    writable: true, \n    enumerable: true, \n    configurable: true});\n  return true;\n}\r\n          &nbsp;receiver&nbsp;is either the proxy or an object that inherits from the proxy.   for(prop in proxy){...} enumerate: function() -&gt; String Array  \r\n          function() {\n  return this.getPropertyNames().filter(\n    function (name) {\n      return this.getPropertyDescriptor(name).enumerable\n    }\n  );\n}\r\n          From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array.   Object.keys(proxy) keys: function() -&gt; String Array  \r\n          function() {\n  return this.getOwnPropertyNames().filter(\n    function (name) {\n      return this.getOwnPropertyDescriptor(name).enumerable\n    }\n  );\n}\r\n          &nbsp;  \n\nInvariants\nEven though proxies provide a lot of power to users, some operations that are not trapped in order to keep the language consistency:\n The triple equal (===) operator isn't trapped. p1 === p2 if and only if p1 and p2 refer to the same proxy. Fixing a proxy does not alter its object identity (the object &ldquo;generated&rdquo; by the handler during fixing does not have its own object identity, it retains the object identity of the proxy, upholding the illusion that the proxy &ldquo;becomes&rdquo; the object). Object.getPrototypeOf(proxy) returns the prototype proxy has been initialized with for an object proxy and Function.prototype for a function proxy. typeof  typeof anObjectProxy === &ldquo;object&rdquo; typeof aFunctionProxy === &ldquo;function&rdquo;   instanceof  anObjectProxy instanceof C if and only if the prototype anObjectProxy has been initialized with equals or inherits from C.prototype aFunctionProxy instanceof Function === true  \n\nCommon mistakes and misunderstanding\nWhen starting using proxies, there are often a few beginners mistakes and misunderstandings:\n Not implementing all traps. Proxies are, by default, &quot;semanticless&quot; objects. If a trap isn't implemented, then if it's a derived trap, the default implementation is used. However if a fundamental trap is unimplemented, then a call to this trap will throw a TypeError. To make sure no error is thrown when your object is used, you have to implement at least all fundamental traps. Unwanted recursion. Be careful of how you use the receiver argument in 'get' and 'set' traps. \r\n          var p = Proxy.create({get: function(receiver, name) {\n  print(receiver); \/\/ looks for receiver's toString method. receiver turns out to be the proxy, so calling print results in calling the get trap.\n  return &quot;something&quot;;\n} });\n\nvar q = p.azerty; \/\/ infinite loop\r\n          The receiver argument in 'get' and 'set' traps may not be the proxy itself: \r\n          var proxy;\n\nvar handler = {\n    has: function (name) {\n        return name == 'foo';\n    },\n    get: function (rcvr, name) {\n        if (name != 'foo')\n            return undefined;\n        print(proxy !== rcvr);\n        return &quot;bye&quot;;\n    },\n};\n\nproxy = Proxy.create(handler);\n\nvar c = Object.create(proxy);\n\nprint(c.foo); \/\/ prints: 'true' (from &quot;proxy !== rcvr&quot;) and 'bye' (from &quot;c.foo&quot;).\n\/\/ In this example, the get trap rcvr argument is the c object while proxy is its prototype\r\n         \n\nExamples\nVery simple example\nA trap is called almost each time something happens to your proxy (that is used like an object). Here is an example:\n\r\n          var incompleteHandler = {get:function(myProxy, name){\n                               alert('Property ' + name + ' accessed.'); \n                               return 1;\n                             }\n                        };\nvar p = Proxy.create(incompleteHandler);\nvar q = p.blabla; \/\/ alerts 'Property blabla accessed' and 1 is assigned to q\np.azerty = &quot;Trying to set a property&quot;; \/\/ throws an error since neither the set trap or the fundamental trap used in the set trap are implemented\r\n        \nNo-op forwarding proxy\nIn this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.\n\r\n          function handlerMaker(obj) {\n  return {\n    \/\/ Fundamental traps\n    getOwnPropertyDescriptor: function(name) {\n      var desc = Object.getOwnPropertyDescriptor(obj, name);\n      \/\/ a trapping proxy's properties must always be configurable\n      if (desc !== undefined) { desc.configurable = true; }\n      return desc;\n    },\n    getPropertyDescriptor:  function(name) {\n      var desc = Object.getPropertyDescriptor(obj, name); \/\/ not in ES5\n      \/\/ a trapping proxy's properties must always be configurable\n      if (desc !== undefined) { desc.configurable = true; }\n      return desc;\n    },\n    getOwnPropertyNames: function() {\n      return Object.getOwnPropertyNames(obj);\n    },\n    getPropertyNames: function() {\n      return Object.getPropertyNames(obj);                \/\/ not in ES5\n    },\n    defineProperty: function(name, desc) {\n      Object.defineProperty(obj, name, desc);\n    },\n    delete:       function(name) { return delete obj[name]; },   \n    fix:          function() {\n      if (Object.isFrozen(obj)) {\n        return Object.getOwnPropertyNames(obj).map(function(name) {\n          return Object.getOwnPropertyDescriptor(obj, name);\n        });\n      }\n      \/\/ As long as obj is not frozen, the proxy won't allow itself to be fixed\n      return undefined; \/\/ will cause a TypeError to be thrown\n    },\n   \n    \/\/ derived traps\n    has:          function(name) { return name in obj; },\n    hasOwn:       function(name) { return Object.prototype.hasOwnProperty.call(obj, name); },\n    get:          function(receiver, name) { return obj[name]; },\n    set:          function(receiver, name, val) { obj[name] = val; return true; }, \/\/ bad behavior when set fails in non-strict mode\n    enumerate:    function() {\n      var result = [];\n      for (name in obj) { result.push(name); };\n      return result;\n    },\n    keys: function() { return Object.keys(obj) }\n  };\n}\n\n\/\/ ...\n\nvar o = Object.create({});\nvar proxy = Proxy.create(handlerMaker(o));\n\nproxy.blabla = 12; \/\/ Thanks to the forwarding, o now has a 'blabla' property which value is 12\no.blabla++; \/\/ just incrementing o.blabla\n\nalert(proxy.blabla); \/\/ alerts 13: the getting operation is forwarded to o which returns 13.\r\n        \nVery simple example\nA trap is called almost each time something happens to your proxy (that is used like an object). Here is an example:\n\r\n          var incompleteHandler = {get:function(myProxy, name){\n                               alert('Property ' + name + ' accessed.'); \n                               return 1;\n                             }\n                        };\nvar p = Proxy.create(incompleteHandler);\nvar q = p.blabla; \/\/ alerts 'Property blabla accessed' and 1 is assigned to q\np.azerty = &quot;Trying to set a property&quot;; \/\/ throws an error since neither the set trap or the fundamental trap used in the set trap are implemented\r\n        \nNo-op forwarding proxy\nIn this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.\n\r\n          function handlerMaker(obj) {\n  return {\n    \/\/ Fundamental traps\n    getOwnPropertyDescriptor: function(name) {\n      var desc = Object.getOwnPropertyDescriptor(obj, name);\n      \/\/ a trapping proxy's properties must always be configurable\n      if (desc !== undefined) { desc.configurable = true; }\n      return desc;\n    },\n    getPropertyDescriptor:  function(name) {\n      var desc = Object.getPropertyDescriptor(obj, name); \/\/ not in ES5\n      \/\/ a trapping proxy's properties must always be configurable\n      if (desc !== undefined) { desc.configurable = true; }\n      return desc;\n    },\n    getOwnPropertyNames: function() {\n      return Object.getOwnPropertyNames(obj);\n    },\n    getPropertyNames: function() {\n      return Object.getPropertyNames(obj);                \/\/ not in ES5\n    },\n    defineProperty: function(name, desc) {\n      Object.defineProperty(obj, name, desc);\n    },\n    delete:       function(name) { return delete obj[name]; },   \n    fix:          function() {\n      if (Object.isFrozen(obj)) {\n        return Object.getOwnPropertyNames(obj).map(function(name) {\n          return Object.getOwnPropertyDescriptor(obj, name);\n        });\n      }\n      \/\/ As long as obj is not frozen, the proxy won't allow itself to be fixed\n      return undefined; \/\/ will cause a TypeError to be thrown\n    },\n   \n    \/\/ derived traps\n    has:          function(name) { return name in obj; },\n    hasOwn:       function(name) { return Object.prototype.hasOwnProperty.call(obj, name); },\n    get:          function(receiver, name) { return obj[name]; },\n    set:          function(receiver, name, val) { obj[name] = val; return true; }, \/\/ bad behavior when set fails in non-strict mode\n    enumerate:    function() {\n      var result = [];\n      for (name in obj) { result.push(name); };\n      return result;\n    },\n    keys: function() { return Object.keys(obj) }\n  };\n}\n\n\/\/ ...\n\nvar o = Object.create({});\nvar proxy = Proxy.create(handlerMaker(o));\n\nproxy.blabla = 12; \/\/ Thanks to the forwarding, o now has a 'blabla' property which value is 12\no.blabla++; \/\/ just incrementing o.blabla\n\nalert(proxy.blabla); \/\/ alerts 13: the getting operation is forwarded to o which returns 13.\r\n        \nSee also\n &quot;Proxies are awesome&quot; Brendan Eich presentation at JSConf (slides) ECMAScript Harmony Proxy proposal page and ECMAScript Harmony proxy semantics page Tutorial on proxies\n\nLicensing note\nSome content (text, examples) in this page has been copied or adapted from the ECMAScript wiki which content is licensed CC 2.0 BY-NC-SA"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/DataView","title":"DataView","description":"Constructors\n   DataView DataView(ArrayBuffer buffer, optional unsigned long byteOffset, optional unsigned long byteLength);  \nMethod overview\nRead\n   byte getInt8(unsigned long byteOffset);   unsigned byte getUint8(unsigned long byteOffset);   short getInt16(unsigned long byteOffset, optional boolean littleEndian);   unsigned short getUint16(unsigned long byteOffset, optional boolean littleEndian);   long getInt32(unsigned long byteOffset, optional boolean littleEndian);   unsigned long getUint32(unsigned long byteOffset, optional boolean littleEndian);   float getFloat32(unsigned long byteOffset, optional boolean littleEndian);   double getFloat64(unsigned long byteOffset, optional boolean littleEndian);  \n\nWrite\n   void setInt8(unsigned long byteOffset, byte value);   void setUint8(unsigned long byteOffset, unsigned byte value);   void setInt16(unsigned long byteOffset, short value, optional boolean littleEndian);   void setUint16(unsigned long byteOffset, unsigned short value, optional boolean littleEndian);   void setInt32(unsigned long byteOffset, long value, optional boolean littleEndian);   void setUint32(unsigned long byteOffset, unsigned long value, optional boolean littleEndian);   void setFloat32(unsigned long byteOffset, float value, optional boolean littleEndian);   void setFloat64(unsigned long byteOffset, double value, optional boolean littleEndian);  \n\nRead\n   byte getInt8(unsigned long byteOffset);   unsigned byte getUint8(unsigned long byteOffset);   short getInt16(unsigned long byteOffset, optional boolean littleEndian);   unsigned short getUint16(unsigned long byteOffset, optional boolean littleEndian);   long getInt32(unsigned long byteOffset, optional boolean littleEndian);   unsigned long getUint32(unsigned long byteOffset, optional boolean littleEndian);   float getFloat32(unsigned long byteOffset, optional boolean littleEndian);   double getFloat64(unsigned long byteOffset, optional boolean littleEndian);  \n\nWrite\n   void setInt8(unsigned long byteOffset, byte value);   void setUint8(unsigned long byteOffset, unsigned byte value);   void setInt16(unsigned long byteOffset, short value, optional boolean littleEndian);   void setUint16(unsigned long byteOffset, unsigned short value, optional boolean littleEndian);   void setInt32(unsigned long byteOffset, long value, optional boolean littleEndian);   void setUint32(unsigned long byteOffset, unsigned long value, optional boolean littleEndian);   void setFloat32(unsigned long byteOffset, float value, optional boolean littleEndian);   void setFloat64(unsigned long byteOffset, double value, optional boolean littleEndian);  \n\nConstructor\nReturns a new DataView object using the passed ArrayBuffer for its storage.\n\nDataView DataView(\n&nbsp; ArrayBuffer buffer,\n&nbsp; optional unsigned long byteOffset,\n&nbsp; optional unsigned long byteLength\n);\n\nParameters\n buffer An existing ArrayBuffer to use as the storage for the new DataView object. byteOffset \nOptional\n The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte. byteLength \nOptional\n The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.\n\nReturn value\nA new DataView object representing the specified data buffer.\nExceptions thrown\n INDEX_SIZE_ERR The byteOffset and byteLength result in the specified view extending past the end of the buffer.\n\nParameters\n buffer An existing ArrayBuffer to use as the storage for the new DataView object. byteOffset \nOptional\n The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte. byteLength \nOptional\n The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.\n\nReturn value\nA new DataView object representing the specified data buffer.\nExceptions thrown\n INDEX_SIZE_ERR The byteOffset and byteLength result in the specified view extending past the end of the buffer.\n\nMethods\ngetInt8()\nGets a signed 8-bit integer at the specified byte offset from the start of the view.\n\nbyte getInt8(\n  unsigned long byteOffset\n);\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\nExceptions thrown\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\ngetUint8()\nGets an unsigned 8-bit integer at the specified byte offset from the start of the view.\n\nbyte getUint8(\n  unsigned long byteOffset\n);\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\ngetInt8()\nGets a signed 8-bit integer at the specified byte offset from the start of the view.\n\nbyte getInt8(\n  unsigned long byteOffset\n);\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\nExceptions thrown\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\nExceptions thrown\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\ngetUint8()\nGets an unsigned 8-bit integer at the specified byte offset from the start of the view.\n\nbyte getUint8(\n  unsigned long byteOffset\n);\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\nParameters\n offset The offset, in byte, from the start of the view where to read the data.\n\n INDEX_SIZE_ERR The byteOffset is set such as it would read beyond the end of the view\n\nSee also\n DataView Specification Typed Array Specification JavaScript typed arrays jDataView: a Javascript library that provides the DataView API to all browsers.\n"}]