[{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-import.php","title":"classkit_import","description":"\n \n  classkit_import\n  (PECL classkit &gt;= 0.3)classkit_import &mdash; Import new class method definitions from a file\n\n \n \n  Description\n  \n   array classkit_import\n    ( string $filename\n   )\n\n  Note: This function cannot\nbe used to manipulate the currently running (or chained) method.\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the class method definitions to import\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Associative array of imported methods\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_import() example\n    \n\n&lt;?php\/\/&nbsp;file:&nbsp;newclass.phpclass&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"bar!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n    \n\n&lt;?php\/\/&nbsp;requires&nbsp;newclass.php&nbsp;(see&nbsp;above)class&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}$e&nbsp;=&nbsp;new&nbsp;Example();\/\/&nbsp;output&nbsp;originalecho&nbsp;$e-&gt;foo();\/\/&nbsp;import&nbsp;replacement&nbsp;methodclasskit_import('newclass.php');\/\/&nbsp;output&nbsp;importedecho&nbsp;$e-&gt;foo();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfoo!\nbar!\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    classkit_method_add() - Dynamically adds a new method to a given class\n    classkit_method_copy() - Copies a method from class to another\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-add.php","title":"classkit_method_add","description":"\n \n  classkit_method_add\n  (PECL classkit &gt;= 0.1)classkit_method_add &mdash; Dynamically adds a new method to a given class\n\n \n \n  Description\n  \n   bool classkit_method_add\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = CLASSKIT_ACC_PUBLIC\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     classname\n     \n\n      \n       The class to which this method will be added\n      \n     \n\n    \n\n    \n\n     methodname\n     \n\n      \n       The name of the method to add\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n       Comma-delimited list of arguments for the newly-created method\n      \n     \n\n    \n\n    \n\n     code\n     \n\n      \n       The code to be evaluated when methodname\n       is called\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The type of method to create, can be\n       CLASSKIT_ACC_PUBLIC,\n       CLASSKIT_ACC_PROTECTED or\n       CLASSKIT_ACC_PRIVATE\n      \n      Note: \n       \n        This parameter is only used as of PHP 5, because, prior to this,\n        all methods were public.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_method_add() example\n    \n\n&lt;?phpclass&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;create&nbsp;an&nbsp;Example&nbsp;object$e&nbsp;=&nbsp;new&nbsp;Example();\/\/&nbsp;Add&nbsp;a&nbsp;new&nbsp;public&nbsp;methodclasskit_method_add(&nbsp;&nbsp;&nbsp;&nbsp;'Example',&nbsp;&nbsp;&nbsp;&nbsp;'add',&nbsp;&nbsp;&nbsp;&nbsp;'$num1,&nbsp;$num2',&nbsp;&nbsp;&nbsp;&nbsp;'return&nbsp;$num1&nbsp;+&nbsp;$num2;',&nbsp;&nbsp;&nbsp;&nbsp;CLASSKIT_ACC_PUBLIC);\/\/&nbsp;add&nbsp;12&nbsp;+&nbsp;4echo&nbsp;$e-&gt;add(12,&nbsp;4);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n16\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    classkit_method_copy() - Copies a method from class to another\n    classkit_method_redefine() - Dynamically changes the code of the given method\n    classkit_method_remove() - Dynamically removes the given method\n    classkit_method_rename() - Dynamically changes the name of the given method\n    create_function() - Create an anonymous (lambda-style) function\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-copy.php","title":"classkit_method_copy","description":"\n \n  classkit_method_copy\n  (PECL classkit &gt;= 0.2)classkit_method_copy &mdash; Copies a method from class to another\n\n \n \n  Description\n  \n   bool classkit_method_copy\n    ( string $dClass\n   , string $dMethod\n   , string $sClass\n   [, string $sMethod\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     dClass\n     \n\n      \n       Destination class for copied method\n      \n     \n\n    \n\n    \n\n     dMethod\n     \n\n      \n       Destination method name\n      \n     \n\n    \n\n    \n\n     sClass\n     \n\n      \n       Source class of the method to copy\n      \n     \n\n    \n\n    \n\n     sMethod\n     \n\n      \n       Name of the method to copy from the source class. If this parameter is\n       omitted, the value of dMethod is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_method_copy() example\n    \n\n&lt;?phpclass&nbsp;Foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;example()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}class&nbsp;Bar&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;initially,&nbsp;no&nbsp;methods}\/\/&nbsp;copy&nbsp;the&nbsp;example()&nbsp;method&nbsp;from&nbsp;the&nbsp;Foo&nbsp;class&nbsp;to&nbsp;the&nbsp;Bar&nbsp;class,&nbsp;as&nbsp;baz()classkit_method_copy('Bar',&nbsp;'baz',&nbsp;'Foo',&nbsp;'example');\/\/&nbsp;output&nbsp;copied&nbsp;functionecho&nbsp;Bar::baz();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfoo!\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    classkit_method_add() - Dynamically adds a new method to a given class\n    classkit_method_redefine() - Dynamically changes the code of the given method\n    classkit_method_remove() - Dynamically removes the given method\n    classkit_method_rename() - Dynamically changes the name of the given method\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-redefine.php","title":"classkit_method_redefine","description":"\n \n  classkit_method_redefine\n  (PECL classkit &gt;= 0.1)classkit_method_redefine &mdash; Dynamically changes the code of the given method\n\n \n \n  Description\n  \n   bool classkit_method_redefine\n    ( string $classname\n   , string $methodname\n   , string $args\n   , string $code\n   [, int $flags = CLASSKIT_ACC_PUBLIC\n  ] )\n\n  Note: This function cannot\nbe used to manipulate the currently running (or chained) method.\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     classname\n     \n\n      \n       The class in which to redefine the method\n      \n     \n\n    \n\n    \n\n     methodname\n     \n\n      \n       The name of the method to redefine\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n       Comma-delimited list of arguments for the redefined method\n      \n     \n\n    \n\n    \n\n     code\n     \n\n      \n       The new code to be evaluated when methodname\n       is called\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The redefined method can be\n       CLASSKIT_ACC_PUBLIC,\n       CLASSKIT_ACC_PROTECTED or\n       CLASSKIT_ACC_PRIVATE\n      \n      Note: \n       \n        This parameter is only used as of PHP 5, because, prior to this,\n        all methods were public.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_method_redefine() example\n    \n\n&lt;?phpclass&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;create&nbsp;an&nbsp;Example&nbsp;object$e&nbsp;=&nbsp;new&nbsp;Example();\/\/&nbsp;output&nbsp;Example::foo()&nbsp;(before&nbsp;redefine)echo&nbsp;\"Before:&nbsp;\"&nbsp;.&nbsp;$e-&gt;foo();\/\/&nbsp;Redefine&nbsp;the&nbsp;'foo'&nbsp;methodclasskit_method_redefine(&nbsp;&nbsp;&nbsp;&nbsp;'Example',&nbsp;&nbsp;&nbsp;&nbsp;'foo',&nbsp;&nbsp;&nbsp;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'return&nbsp;\"bar!\\n\";',&nbsp;&nbsp;&nbsp;&nbsp;CLASSKIT_ACC_PUBLIC);\/\/&nbsp;output&nbsp;Example::foo()&nbsp;(after&nbsp;redefine)echo&nbsp;\"After:&nbsp;\"&nbsp;.&nbsp;$e-&gt;foo();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nBefore: foo!\nAfter: bar!\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    classkit_method_add() - Dynamically adds a new method to a given class\n    classkit_method_copy() - Copies a method from class to another\n    classkit_method_remove() - Dynamically removes the given method\n    classkit_method_rename() - Dynamically changes the name of the given method\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-remove.php","title":"classkit_method_remove","description":"\n \n  classkit_method_remove\n  (PECL classkit &gt;= 0.1)classkit_method_remove &mdash; Dynamically removes the given method\n\n \n \n  Description\n  \n   bool classkit_method_remove\n    ( string $classname\n   , string $methodname\n   )\n\n  Note: This function cannot\nbe used to manipulate the currently running (or chained) method.\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     classname\n     \n\n      \n       The class in which to remove the method\n      \n     \n\n    \n\n    \n\n     methodname\n     \n\n      \n       The name of the method to remove\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_method_remove() example\n    \n\n&lt;?phpclass&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;bar()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"bar!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Remove&nbsp;the&nbsp;'foo'&nbsp;methodclasskit_method_remove(&nbsp;&nbsp;&nbsp;&nbsp;'Example',&nbsp;&nbsp;&nbsp;&nbsp;'foo');echo&nbsp;implode('&nbsp;',&nbsp;get_class_methods('Example'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbar\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    classkit_method_add() - Dynamically adds a new method to a given class\n    classkit_method_copy() - Copies a method from class to another\n    classkit_method_redefine() - Dynamically changes the code of the given method\n    classkit_method_rename() - Dynamically changes the name of the given method\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.classkit-method-rename.php","title":"classkit_method_rename","description":"\n \n  classkit_method_rename\n  (PECL classkit &gt;= 0.1)classkit_method_rename &mdash; Dynamically changes the name of the given method\n\n \n \n  Description\n  \n   bool classkit_method_rename\n    ( string $classname\n   , string $methodname\n   , string $newname\n   )\n\n  Note: This function cannot\nbe used to manipulate the currently running (or chained) method.\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     classname\n     \n\n      \n       The class in which to rename the method\n      \n     \n\n    \n\n    \n\n     methodname\n     \n\n      \n       The name of the method to rename\n      \n     \n\n    \n\n    \n\n     newname\n     \n\n      \n       The new name to give to the renamed method\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 classkit_method_rename() example\n    \n\n&lt;?phpclass&nbsp;Example&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"foo!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Rename&nbsp;the&nbsp;'foo'&nbsp;method&nbsp;to&nbsp;'bar'classkit_method_rename(&nbsp;&nbsp;&nbsp;&nbsp;'Example',&nbsp;&nbsp;&nbsp;&nbsp;'foo',&nbsp;&nbsp;&nbsp;&nbsp;'bar');\/\/&nbsp;output&nbsp;renamed&nbsp;functionecho&nbsp;Example::bar();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfoo!\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    classkit_method_add() - Dynamically adds a new method to a given class\n    classkit_method_copy() - Copies a method from class to another\n    classkit_method_redefine() - Dynamically changes the code of the given method\n    classkit_method_remove() - Dynamically removes the given method\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-from-jd.php","title":"cal_from_jd","description":"\n \n  cal_from_jd\n  (PHP 4 &gt;= 4.1.0, PHP 5)cal_from_jd &mdash; Converts from Julian Day Count to a supported calendar\n\n \n\n \n  Description\n  \n   array cal_from_jd\n    ( int $jd\n   , int $calendar\n   )\n\n  \n   cal_from_jd() converts the Julian day given in\n   jd into a date of the specified\n   calendar. Supported\n   calendar values are\n   CAL_GREGORIAN,\n   CAL_JULIAN,\n   CAL_JEWISH and\n   CAL_FRENCH.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     jd\n     \n\n      \n       Julian day as integer\n      \n     \n\n    \n\n    \n\n     calendar\n     \n\n      \n       Calendar to convert to\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing calendar information like month, day, year,\n   day of week, abbreviated and full names of weekday and month and the\n   date in string form &quot;month\/day\/year&quot;.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 cal_from_jd() example\n    \n\n&lt;?php$today&nbsp;=&nbsp;unixtojd(mktime(0,&nbsp;0,&nbsp;0,&nbsp;8,&nbsp;16,&nbsp;2003));print_r(cal_from_jd($today,&nbsp;CAL_GREGORIAN));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [date] =&gt; 8\/16\/2003\n    [month] =&gt; 8\n    [day] =&gt; 16\n    [year] =&gt; 2003\n    [dow] =&gt; 6\n    [abbrevdayname] =&gt; Sat\n    [dayname] =&gt; Saturday\n    [abbrevmonth] =&gt; Aug\n    [monthname] =&gt; August\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    cal_to_jd() - Converts from a supported calendar to Julian Day Count\n    jdtofrench() - Converts a Julian Day Count to the French Republican Calendar  \n    jdtogregorian() - Converts Julian Day Count to Gregorian date\n    jdtojewish() - Converts a Julian day count to a Jewish calendar date  \n    jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date\n    jdtounix() - Convert Julian Day to Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-info.php","title":"cal_info","description":"\n \n  cal_info\n  (PHP 4 &gt;= 4.1.0, PHP 5)cal_info &mdash; Returns information about a particular calendar\n\n \n\n \n  Description\n  \n   array cal_info\n    ([ int $calendar = -1\n  ] )\n\n  \n   cal_info() returns information on the\n   specified calendar.\n  \n  \n   Calendar information is returned as an array containing the\n   elements calname, calsymbol,\n   month, abbrevmonth and\n   maxdaysinmonth. The names of the different calendars \n   which can be used as calendar are as follows:\n   \n    \n     \n      0 or CAL_GREGORIAN - Gregorian Calendar\n     \n    \n    \n     \n      1 or CAL_JULIAN - Julian Calendar\n     \n    \n    \n     \n      2 or CAL_JEWISH - Jewish Calendar\n     \n    \n    \n     \n      3 or CAL_FRENCH - French Revolutionary Calendar\n     \n    \n   \n  \n  \n   If no calendar is specified information on all\n   supported calendars is returned as an array. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     calendar\n     \n\n      \n       Calendar to return information for. If no calendar is specified\n       information about all calendars is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The calendar parameter becomes optional\n        and defaults to &quot;all calendars&quot; if omitted.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 cal_info() example\n    \n\n&lt;?php$info&nbsp;=&nbsp;cal_info(0);print_r($info);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [months] =&gt; Array\n        (\n            [1] =&gt; January\n            [2] =&gt; February\n            [3] =&gt; March\n            [4] =&gt; April\n            [5] =&gt; May\n            [6] =&gt; June\n            [7] =&gt; July\n            [8] =&gt; August\n            [9] =&gt; September\n            [10] =&gt; October\n            [11] =&gt; November\n            [12] =&gt; December\n        )\n\n    [abbrevmonths] =&gt; Array\n        (\n            [1] =&gt; Jan\n            [2] =&gt; Feb\n            [3] =&gt; Mar\n            [4] =&gt; Apr\n            [5] =&gt; May\n            [6] =&gt; Jun\n            [7] =&gt; Jul\n            [8] =&gt; Aug\n            [9] =&gt; Sep\n            [10] =&gt; Oct\n            [11] =&gt; Nov\n            [12] =&gt; Dec\n        )\n\n    [maxdaysinmonth] =&gt; 31\n    [calname] =&gt; Gregorian\n    [calsymbol] =&gt; CAL_GREGORIAN\n)\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-to-jd.php","title":"cal_to_jd","description":"\n \n  cal_to_jd\n  (PHP 4 &gt;= 4.1.0, PHP 5)cal_to_jd &mdash; Converts from a supported calendar to Julian Day Count\n\n \n\n \n  Description\n  \n   int cal_to_jd\n    ( int $calendar\n   , int $month\n   , int $day\n   , int $year\n   )\n\n  \n   cal_to_jd() calculates the Julian day count\n   for a date in the specified calendar.\n   Supported calendars are\n   CAL_GREGORIAN,\n   CAL_JULIAN,\n   CAL_JEWISH and\n   CAL_FRENCH.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     calendar\n     \n\n      \n       Calendar to convert from, one of \n       CAL_GREGORIAN,\n       CAL_JULIAN,\n       CAL_JEWISH or\n       CAL_FRENCH.\n      \n     \n\n    \n\n    \n\n     month\n     \n\n      \n       The month as a number, the valid range depends \n       on the calendar\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day as a number, the valid range depends \n       on the calendar\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year as a number, the valid range depends \n       on the calendar\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   A Julian Day number.\n  \n \n\n\n \n  See Also\n  \n   \n    cal_from_jd() - Converts from Julian Day Count to a supported calendar\n    frenchtojd() - Converts a date from the French Republican Calendar to a Julian Day Count \n    gregoriantojd() - Converts a Gregorian date to Julian Day Count  \n    jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count  \n    juliantojd() - Converts a Julian Calendar date to Julian Day Count  \n    unixtojd() - Convert Unix timestamp to Julian Day\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cal-days-in-month.php","title":"cal_days_in_month","description":" \n \n  cal_days_in_month\n  (PHP 4 &gt;= 4.1.0, PHP 5)cal_days_in_month &mdash; Return the number of days in a month for a given year and calendar\n\n \n\n \n  Description\n  \n   int cal_days_in_month\n    ( int $calendar\n   , int $month\n   , int $year\n   )\n\n  \n   This function will return the number of days in the\n   month of year for\n   the specified calendar.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     calendar\n     \n\n      \n       Calendar to use for calculation\n      \n     \n\n    \n\n    \n\n     month\n     \n\n      \n       Month in the selected calendar\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       Year in the selected calendar\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The length in days of the selected month in the given calendar\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 cal_days_in_month() example\n    \n\n&lt;?php$num&nbsp;=&nbsp;cal_days_in_month(CAL_GREGORIAN,&nbsp;8,&nbsp;2003);&nbsp;\/\/&nbsp;31echo&nbsp;\"There&nbsp;was&nbsp;$num&nbsp;days&nbsp;in&nbsp;August&nbsp;2003\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.frenchtojd.php","title":"FrenchToJD","description":"\n \n  FrenchToJD\n  (PHP 4, PHP 5)FrenchToJD &mdash; Converts a date from the French Republican Calendar to a Julian Day Count\n\n \n\n \n  Description\n  \n   int frenchtojd\n    ( int $month\n   , int $day\n   , int $year\n   )\n\n  \n   Converts a date from the French Republican Calendar to a Julian\n   Day Count.\n  \n  \n   These routines only convert dates in years 1 through 14\n   (Gregorian dates 22 September 1792 through 22 September\n   1806). This more than covers the period when the calendar was in\n   use.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     month\n     \n\n      \n       The month as a number from 1 (for Vend\u00e9miaire) to 13 (for the period of 5-6 days at the end of each year)\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day as a number from 1 to 30\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year as a number between 1 and 14\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The julian day for the given french revolution date as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    jdtofrench() - Converts a Julian Day Count to the French Republican Calendar \n    cal_to_jd() - Converts from a supported calendar to Julian Day Count\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.easter-days.php","title":"easter_days","description":"\n \n  easter_days\n  (PHP 4, PHP 5)easter_days &mdash; Get number of days after March 21 on which Easter falls for a given year\n\n \n\n \n  Description\n  \n   int easter_days\n    ([ int $year\n   [, int $method = CAL_EASTER_DEFAULT\n  ]] )\n\n  \n   Returns the number of days after March 21 on which Easter falls\n   for a given year. If no year is specified, the current year is\n   assumed.\n  \n  \n   This function can be used instead of\n   easter_date() to calculate Easter for years\n   which fall outside the range of Unix timestamps (i.e. before 1970\n   or after 2037).\n  \n  \n   The date of Easter Day was defined by the Council of Nicaea in\n   AD325 as the Sunday after the first full moon which falls on or\n   after the Spring Equinox.  The Equinox is assumed to always fall\n   on 21st March, so the calculation reduces to determining the date\n   of the full moon and the date of the following Sunday.  The\n   algorithm used here was introduced around the year 532 by\n   Dionysius Exiguus.  Under the Julian Calendar (for years before\n   1753) a simple 19-year cycle is used to track the phases of the\n   Moon.  Under the Gregorian Calendar (for years after 1753 -\n   devised by Clavius and Lilius, and introduced by Pope Gregory\n   XIII in October 1582, and into Britain and its then colonies in\n   September 1752) two correction factors are added to make the\n   cycle more accurate.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     year\n     \n\n      \n       The year as a positive number\n      \n     \n\n    \n  \n    \n\n     method\n     \n\n      \n       Allows to calculate easter dates based\n       on the Gregorian calendar during the years 1582 - 1752 when set to\n       CAL_EASTER_ROMAN. See the calendar constants for more valid\n       constants.      \n       \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of days after March 21st that the Easter Sunday\n   is in the given year.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.3.0\n       \n        The year parameter is optional and defaults\n        to the current year according to the local time if omitted.\n       \n      \n\n      \n       Since 4.3.0\n       \n        The method parameter was introduced.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 easter_days() example\n    \n\n&lt;?phpecho&nbsp;easter_days(1999);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;14,&nbsp;i.e.&nbsp;April&nbsp;4echo&nbsp;easter_days(1492);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;32,&nbsp;i.e.&nbsp;April&nbsp;22echo&nbsp;easter_days(1913);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;&nbsp;2,&nbsp;i.e.&nbsp;March&nbsp;23?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    easter_date() - Get Unix timestamp for midnight on Easter of a given year\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gregoriantojd.php","title":"GregorianToJD","description":"\n \n  GregorianToJD \n  (PHP 4, PHP 5)GregorianToJD &mdash; Converts a Gregorian date to Julian Day Count\n\n \n\n \n  Description\n  \n   int gregoriantojd\n    ( int $month\n   , int $day\n   , int $year\n   )\n\n  \n   Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.\n  \n   Although this function can handle dates all the way back to 4714\n   B.C., such use may not be meaningful. The Gregorian calendar was\n   not instituted until October 15, 1582 (or October 5, 1582 in the\n   Julian calendar). Some countries did not accept it until much\n   later. For example, Britain converted in 1752, The USSR in 1918\n   and Greece in 1923. Most European countries used the Julian\n   calendar prior to the Gregorian.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     month\n     \n\n      \n       The month as a number from 1 (for January) to 12 (for December)\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day as a number from 1 to 31\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year as a number between -4714 and 9999\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The julian day for the given gregorian date as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Calendar functions\n    \n\n&lt;?php$jd&nbsp;=&nbsp;GregorianToJD(10,&nbsp;11,&nbsp;1970);echo&nbsp;\"$jd\\n\";$gregorian&nbsp;=&nbsp;JDToGregorian($jd);echo&nbsp;\"$gregorian\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    jdtogregorian() - Converts Julian Day Count to Gregorian date \n    cal_to_jd() - Converts from a supported calendar to Julian Day Count\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.easter-date.php","title":"easter_date","description":"\n \n  easter_date\n  (PHP 4, PHP 5)easter_date &mdash; Get Unix timestamp for midnight on Easter of a given year\n\n \n\n \n  Description\n  \n   int easter_date\n    ([ int $year\n  ] )\n\n  \n   Returns the Unix timestamp corresponding to midnight on Easter of\n   the given year.\n  \n  Warning\n   \n    This function will generate a warning if the year is outside\n    of the range for Unix timestamps (i.e. before 1970 or after 2037).\n   \n  \n  \n   The date of Easter Day was defined by the Council of Nicaea in\n   AD325 as the Sunday after the first full moon which falls on or\n   after the Spring Equinox.  The Equinox is assumed to always fall\n   on 21st March, so the calculation reduces to determining the date\n   of the full moon and the date of the following Sunday.  The\n   algorithm used here was introduced around the year 532 by\n   Dionysius Exiguus.  Under the Julian Calendar (for years before\n   1753) a simple 19-year cycle is used to track the phases of the\n   Moon.  Under the Gregorian Calendar (for years after 1753 -\n   devised by Clavius and Lilius, and introduced by Pope Gregory\n   XIII in October 1582, and into Britain and its then colonies in\n   September 1752) two correction factors are added to make the\n   cycle more accurate.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     year\n     \n\n      \n       The year as a number between 1970 an 2037\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The easter date as a unix timestamp.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.3.0\n       \n        The year parameter is optional and defaults\n        to the current year according to the local time if omitted.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 easter_date() example\n    \n\n&lt;?phpecho&nbsp;date(\"M-d-Y\",&nbsp;easter_date(1999));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Apr-04-1999echo&nbsp;date(\"M-d-Y\",&nbsp;easter_date(2000));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Apr-23-2000echo&nbsp;date(\"M-d-Y\",&nbsp;easter_date(2001));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Apr-15-2001?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    \n     easter_days() - Get number of days after March 21 on which Easter falls for a given year for calculating Easter \n     before 1970 or after 2037\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jddayofweek.php","title":"JDDayOfWeek","description":"\n \n  JDDayOfWeek\n  (PHP 4, PHP 5)JDDayOfWeek &mdash; Returns the day of the week\n\n \n\n \n  Description\n  \n   mixed jddayofweek\n    ( int $julianday\n   [, int $mode = CAL_DOW_DAYNO\n  ] )\n\n  \n   Returns the day of the week.  Can return a string or an integer\n   depending on the mode.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     julianday\n     \n\n      \n       A julian day number as integer\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Calendar week modes\n       \n        \n         \n          Mode\n          Meaning\n         \n\n        \n\n        \n         \n          0 (Default) \n          \n           Return the day number as an int (0=Sunday, 1=Monday, etc)\n          \n         \n\n         \n          1 \n          \n           Returns string containing the day of week\n           (English-Gregorian)\n          \n         \n\n         \n          2 \n          \n           Return a string containing the abbreviated day of week\n           (English-Gregorian)\n          \n         \n\n        \n       \n      \n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The gregorian weekday as either an integer or string.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdmonthname.php","title":"JDMonthName","description":"\n \n  JDMonthName\n  (PHP 4, PHP 5)JDMonthName &mdash; Returns a month name\n\n \n\n \n  Description\n  \n   string jdmonthname\n    ( int $julianday\n   , int $mode\n   )\n\n  \n   Returns a string containing a month name.\n   mode tells this function which calendar to\n   convert the Julian Day Count to, and what type of month names are\n   to be returned.\n   \n    Calendar modes\n    \n     \n      \n       Mode\n       Meaning\n       Values\n      \n\n     \n\n     \n      \n       0\n       Gregorian - abbreviated\n       Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\n      \n\n      \n       1\n       Gregorian\n       January, February, March, April, May, June, July, August, September, October, November, December\n      \n\n      \n       2\n       Julian - abbreviated\n       Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\n      \n\n      \n       3\n       Julian\n       January, February, March, April, May, June, July, August, September, October, November, December\n      \n\n      \n       4\n       Jewish\n       Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul\n      \n\n      \n       5\n       French Republican\n       Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     jday\n     \n\n      \n       The Julian Day to operate on\n      \n     \n\n    \n\n    \n\n     calendar\n     \n\n      \n       The calendar to take the month name from\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The month name for the given Julian Day and calendar.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtofrench.php","title":"JDToFrench","description":"\n \n  JDToFrench\n  (PHP 4, PHP 5)JDToFrench &mdash; Converts a Julian Day Count to the French Republican Calendar\n\n \n \n  Description\n  \n   string jdtofrench\n    ( int $juliandaycount\n   )\n\n  \n   Converts a Julian Day Count to the French Republican Calendar.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     julianday\n     \n\n      \n       A julian day number as integer\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The french revolution date as a string in the form &quot;month\/day\/year&quot;\n  \n \n\n\n \n  See Also\n  \n   \n    frenchtojd() - Converts a date from the French Republican Calendar to a Julian Day Count \n    cal_from_jd() - Converts from Julian Day Count to a supported calendar\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtojewish.php","title":"jdtojewish","description":"\n \n  jdtojewish\n  (PHP 4, PHP 5)jdtojewish &mdash; Converts a Julian day count to a Jewish calendar date\n\n \n \n  Description\n  \n   string jdtojewish\n    ( int $juliandaycount\n   [, bool $hebrew = false\n   [, int $fl = 0\n  ]] )\n\n  \n   Converts a Julian Day Count to the Jewish Calendar.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     julianday\n     \n\n      \n       A julian day number as integer\n      \n     \n\n    \n\n    \n\n     hebrew\n     \n\n      \n       If the hebrew parameter is set to TRUE, the\n       fl parameter is used for Hebrew, string based,\n       output format.  \n      \n     \n\n    \n\n    \n\n     fl\n     \n\n      \n       The available formats are:  \n       CAL_JEWISH_ADD_ALAFIM_GERESH,\n       CAL_JEWISH_ADD_ALAFIM,\n       CAL_JEWISH_ADD_GERESHAYIM.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The jewish date as a string in the form &quot;month\/day\/year&quot;\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The fl parameter was added.\n       \n      \n\n      \n       4.3.0\n       \n        The hebrew parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 jdtojewish() Example\n    \n\n&lt;?phpecho&nbsp;jdtojewish(gregoriantojd(10,&nbsp;8,&nbsp;2002),&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CAL_JEWISH_ADD_GERESHAYIM&nbsp;+&nbsp;CAL_JEWISH_ADD_ALAFIM&nbsp;+&nbsp;CAL_JEWISH_ADD_ALAFIM_GERESH);&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    jewishtojd() - Converts a date in the Jewish Calendar to Julian Day Count \n    cal_from_jd() - Converts from Julian Day Count to a supported calendar\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtojulian.php","title":"JDToJulian","description":"\n \n  JDToJulian \n  (PHP 4, PHP 5)JDToJulian &mdash; Converts a Julian Day Count to a Julian Calendar Date\n\n \n\n \n  Description\n  \n   string jdtojulian\n    ( int $julianday\n   )\n\n  \n   Converts Julian Day Count to a string containing the Julian\n   Calendar Date in the format of &quot;month\/day\/year&quot;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     julianday\n     \n\n      \n       A julian day number as integer\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The julian date as a string in the form &quot;month\/day\/year&quot;\n  \n \n\n\n \n  See Also\n  \n   \n    juliantojd() - Converts a Julian Calendar date to Julian Day Count \n    cal_from_jd() - Converts from Julian Day Count to a supported calendar\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtogregorian.php","title":"JDToGregorian","description":"\n \n  JDToGregorian\n  (PHP 4, PHP 5)JDToGregorian &mdash; Converts Julian Day Count to Gregorian date\n\n \n \n  Description\n  \n   string jdtogregorian\n    ( int $julianday\n   )\n\n  \n   Converts Julian Day Count to a string containing the Gregorian\n   date in the format of &quot;month\/day\/year&quot;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     julianday\n     \n\n      \n       A julian day number as integer\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The gregorian date as a string in the form &quot;month\/day\/year&quot;\n  \n \n\n\n \n  See Also\n  \n   \n    gregoriantojd() - Converts a Gregorian date to Julian Day Count \n    cal_from_jd() - Converts from Julian Day Count to a supported calendar\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.juliantojd.php","title":"JulianToJD","description":"\n \n  JulianToJD \n  (PHP 4, PHP 5)JulianToJD &mdash; Converts a Julian Calendar date to Julian Day Count\n\n \n \n  Description\n  \n   int juliantojd\n    ( int $month\n   , int $day\n   , int $year\n   )\n\n  \n   Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.\n  \n  \n   Although this function can handle dates all the way back to 4713\n   B.C., such use may not be meaningful. The calendar was created in\n   46 B.C., but the details did not stabilize until at least 8 A.D.,\n   and perhaps as late at the 4th century. Also, the beginning of a\n   year varied from one culture to another - not all accepted\n   January as the first month.\n  \n  Caution\n   \n    Remember, the current calendar system being used worldwide is the\n    Gregorian calendar.  gregoriantojd() can be used to\n    convert such dates to their Julian Day count.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     month\n     \n\n      \n       The month as a number from 1 (for January) to 12 (for December)\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day as a number from 1 to 31\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year as a number between -4713 and 9999\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The julian day for the given julian date as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    jdtojulian() - Converts a Julian Day Count to a Julian Calendar Date \n    cal_to_jd() - Converts from a supported calendar to Julian Day Count\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jewishtojd.php","title":"JewishToJD","description":"\n \n  JewishToJD \n  (PHP 4, PHP 5)JewishToJD &mdash; Converts a date in the Jewish Calendar to Julian Day Count\n\n \n \n  Description\n  \n   int jewishtojd\n    ( int $month\n   , int $day\n   , int $year\n   )\n\n  \n   Although this function can handle dates all the way back to the year 1\n   (3761 B.C.), such use may not be meaningful.  The Jewish calendar has\n   been in use for several thousand years, but in the early days there was\n   no formula to determine the start of a month. A new month was started\n   when the new moon was first observed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     month\n     \n\n      \n       The month as a number from 1 to 13\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day as a number from 1 to 30\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year as a number between 1 and 9999\n      \n     \n\n    \n  \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The julian day for the given jewish date as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    jdtojewish() - Converts a Julian day count to a Jewish calendar date \n    cal_to_jd() - Converts from a supported calendar to Julian Day Count\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.jdtounix.php","title":"jdtounix","description":" \n \n  jdtounix\n  (PHP 4, PHP 5)jdtounix &mdash; Convert Julian Day to Unix timestamp\n\n \n\n \n  Description\n  \n   int jdtounix\n    ( int $jday\n   )\n\n  \n   This function will return a Unix timestamp corresponding to the\n   Julian Day given in jday or FALSE if\n   jday is not inside the Unix epoch\n   (Gregorian years between 1970 and 2037 or 2440588 &lt;=\n   jday &lt;= 2465342 ). The time returned is\n   localtime (and not GMT).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     jday\n     \n\n      \n       A julian day number between 2440588 and 2465342.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The unix timestamp for the start of the given julian day.\n  \n \n\n\n \n  See Also\n  \n   \n    unixtojd() - Convert Unix timestamp to Julian Day \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unixtojd.php","title":"unixtojd","description":"\n \n  unixtojd\n  (PHP 4, PHP 5)unixtojd &mdash; Convert Unix timestamp to Julian Day\n\n \n\n \n  Description\n  \n   int unixtojd\n    ([ int $timestamp = time()\n  ] )\n\n  \n   Return the Julian Day for a Unix timestamp\n   (seconds since 1.1.1970), or for the current day if no\n   timestamp is given.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       A unix timestamp to convert.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A julian day number as integer.\n  \n \n\n\n \n  See Also\n  \n   \n    jdtounix() - Convert Julian Day to Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-child-terminate.php","title":"apache_child_terminate","description":"\n \n  apache_child_terminate\n  (PHP 4 &gt;= 4.0.5, PHP 5)apache_child_terminate &mdash; Terminate apache process after this request\n\n \n\n \n  Description\n  \n   bool apache_child_terminate\n    ( void\n   )\n\n  \n   apache_child_terminate() will register the\n   Apache process executing the current PHP request for termination\n   once execution of PHP code is completed. It may be used to\n   terminate a process after a script with high memory consumption has\n   been run as memory will usually only be freed internally but not\n   given back to the operating system. \n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if PHP is running as an Apache 1 module, the Apache version\n   is non-multithreaded, and the \n   child_terminate PHP directive is \n   enabled (disabled by default). If these conditions are not met, FALSE is \n   returned and an error of level E_WARNING is generated.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        This function became available under FastCGI. Previously, it was\n        supported only when PHP was installed as an Apache module.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n\n \n  See Also\n  \n   \n    exit() - Output a message and terminate the current script\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-get-modules.php","title":"apache_get_modules","description":"\n \n  apache_get_modules\n  (PHP 4 &gt;= 4.3.2, PHP 5)apache_get_modules &mdash; Get a list of loaded Apache modules\n\n \n\n \n  Description\n  \n   array apache_get_modules\n    ( void\n   )\n\n  \n   Get a list of loaded Apache modules.\n  \n \n\n \n \n  Return Values\n  \n   An array of loaded Apache modules.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Became available when using Apache 1, or the PHP  Apache 2 \n        filter API. Before this time, it was only \n        available when using the Apache 2 handler API.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 apache_get_modules() example\n    \n\n&lt;?phpprint_r(apache_get_modules());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; core\n    [1] =&gt; http_core\n    [2] =&gt; mod_so\n    [3] =&gt; sapi_apache2\n    [4] =&gt; mod_mime\n    [5] =&gt; mod_rewrite\n)\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-get-version.php","title":"apache_get_version","description":"\n \n  apache_get_version\n  (PHP 4 &gt;= 4.3.2, PHP 5)apache_get_version &mdash; Fetch Apache version\n\n \n\n \n  Description\n  \n   string apache_get_version\n    ( void\n   )\n\n  \n   Fetch the Apache version.\n  \n \n\n\n \n  Return Values\n  \n   Returns the Apache version on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.4\n       \n        Became available with Apache 1.\n       \n      \n\n      \n       5.0.0\n       \n        Became available with the Apache 2 filter API.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 apache_get_version() example\n    \n\n&lt;?php$version&nbsp;=&nbsp;apache_get_version();echo&nbsp;\"$version\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nApache\/1.3.29 (Unix) PHP\/4.3.4 \n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    phpinfo() - Outputs information about PHP's configuration\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-note.php","title":"apache_note","description":"\n \n  apache_note\n  (PHP 4, PHP 5)apache_note &mdash; Get and set apache request notes\n\n \n\n \n  Description\n  \n   string apache_note\n    ( string $note_name\n   [, string $note_value\n  ] )\n\n  \n   This function is a wrapper for Apache&#039;s table_get and\n   table_set. It edits the table of notes that exists\n   during a request. The table&#039;s purpose is to allow Apache modules to\n   communicate.\n  \n  \n   The main use for apache_note() is to pass information\n   from one module to another within the same request.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     note_name\n     \n\n      \n       The name of the note.\n      \n     \n\n    \n\n    \n\n     note_value\n     \n\n      \n       The value of the note.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If called with one argument, it returns the current value of note\n   note_name. If called with two arguments, it\n   sets the value of note note_name to\n   note_value and returns the previous value of\n   note note_name.\n   If the note cannot be retrieved, FALSE is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Passing information between PHP and Perl\n    \n\n&lt;?phpapache_note('name',&nbsp;'Fredrik&nbsp;Ekengren');\/\/&nbsp;Call&nbsp;perl&nbsp;scriptvirtual(\"\/perl\/some_script.pl\");$result&nbsp;=&nbsp;apache_note(\"resultdata\");?&gt;\n\n\n    \n\n    \n# Get Apache request object\nmy $r = Apache-&gt;request()-&gt;main();\n\n# Get passed data\nmy $name = $r-&gt;notes(&#039;name&#039;);\n\n# some processing\n\n# Pass result back to PHP\n$r-&gt;notes(&#039;resultdata&#039;, $result);\n\n    \n\n   \n  \n  \n   \n    Example #2 Logging values in access.log\n    \n\n&lt;?phpapache_note('sessionID',&nbsp;session_id());?&gt;\n\n\n    \n\n    \n# &quot;%{sessionID}n&quot; can be used in the LogFormat directive\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    virtual() - Perform an Apache sub-request\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-reset-timeout.php","title":"apache_reset_timeout","description":"\n \n  apache_reset_timeout\n  (PHP 5 &gt;= 5.1.0)apache_reset_timeout &mdash; Reset the Apache write timer\n\n \n\n \n  Description\n  \n   bool apache_reset_timeout\n    ( void\n   )\n\n  \n   apache_reset_timeout() resets the Apache write timer,\n   which defaults to 300 seconds. With set_time_limit(0);\n   ignore_user_abort(true) and periodic\n   apache_reset_timeout() calls, Apache can theoretically\n   run forever.\n  \n  \n   This function requires Apache 1.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: This function is disabled when PHP is running in safe mode.\n \n\n\n \n  See Also\n  \n   \n    set_time_limit() - Limits the maximum execution time\n    ignore_user_abort() - Set whether a client disconnect should abort script execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-getenv.php","title":"apache_getenv","description":"\n \n  apache_getenv\n  (PHP 4 &gt;= 4.3.0, PHP 5)apache_getenv &mdash; Get an Apache subprocess_env variable\n\n \n\n \n  Description\n  \n   string apache_getenv\n    ( string $variable\n   [, bool $walk_to_top\n  ] )\n\n  \n   Get an Apache environment variable as specified by \n   variable.\n  \n  \n   This function requires Apache 2 otherwise it&#039;s undefined.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     variable\n     \n\n      \n       The Apache environment variable\n      \n     \n\n    \n\n    \n\n     walk_to_top\n     \n\n      \n       Whether to get the top-level variable available to all Apache layers.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The value of the Apache environment variable on success, or FALSE on\n   failure\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 apache_getenv() example\n    \n     The example above shows how to retrieve the value of the Apache\n     environment variable SERVER_ADDR.\n    \n    \n\n&lt;?php$ret&nbsp;=&nbsp;apache_getenv(\"SERVER_ADDR\");echo&nbsp;$ret;?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n42.24.42.240\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_setenv() - Set an Apache subprocess_env variable\n    getenv() - Gets the value of an environment variable\n    Superglobals\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-lookup-uri.php","title":"apache_lookup_uri","description":"\n \n  apache_lookup_uri\n  (PHP 4, PHP 5)apache_lookup_uri &mdash; Perform a partial request for the specified URI and return all info about it\n\n \n\n \n  Description\n  \n   object apache_lookup_uri\n    ( string $filename\n   )\n\n  \n   This performs a partial request for a URI.  It goes just far\n   enough to obtain all the important information about the given\n   resource.\n  \n  This function is only supported when PHP\nis installed as an Apache module.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename (URI) that&#039;s being requested.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An object of related URI information. The properties of\n   this object are:\n  \n  \n   \n    status\n    the_request\n    status_line\n    method\n    content_type\n    handler\n    uri\n    filename\n    path_info\n    args\n    boundary\n    no_cache\n    no_local_copy\n    allowed\n    send_bodyct\n    bytes_sent\n    byterange\n    clength\n    unparsed_uri\n    mtime\n    request_time\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 apache_lookup_uri() example\n    \n\n&lt;?php$info&nbsp;=&nbsp;apache_lookup_uri('index.php?var=value');print_r($info);if&nbsp;(file_exists($info-&gt;filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'file&nbsp;exists!';}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstdClass Object\n(\n    [status] =&gt; 200\n    [the_request] =&gt; GET \/dir\/file.php HTTP\/1.1\n    [method] =&gt; GET\n    [mtime] =&gt; 0\n    [clength] =&gt; 0\n    [chunked] =&gt; 0\n    [content_type] =&gt; application\/x-httpd-php\n    [no_cache] =&gt; 0\n    [no_local_copy] =&gt; 1\n    [unparsed_uri] =&gt; \/dir\/index.php?var=value\n    [uri] =&gt; \/dir\/index.php\n    [filename] =&gt; \/home\/htdocs\/dir\/index.php\n    [args] =&gt; var=value\n    [allowed] =&gt; 0\n    [sent_bodyct] =&gt; 0\n    [bytes_sent] =&gt; 0\n    [request_time] =&gt; 1074282764\n)\nfile exists!\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-request-headers.php","title":"apache_request_headers","description":"\n \n  apache_request_headers\n  (PHP 4 &gt;= 4.3.0, PHP 5)apache_request_headers &mdash; Fetch all HTTP request headers\n\n \n\n \n  Description\n  \n   array apache_request_headers\n    ( void\n   )\n\n  \n   Fetches all HTTP request headers from the current request.\n  \n \n\n\n \n  Return Values\n  \n   An associative array of all the HTTP headers in the current request, or\n   FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        This function became available under FastCGI. Previously, it was\n        supported only when PHP was installed as an Apache module.\n       \n      \n\n      \n       4.3.3\n       \n        As of PHP 4.3.3 you can use this function with the\nNSAPI server module in Netscape\/iPlanet\/SunONE\nwebservers, too.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 apache_request_headers() example\n    \n\n&lt;?php$headers&nbsp;=&nbsp;apache_request_headers();foreach&nbsp;($headers&nbsp;as&nbsp;$header&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$header:&nbsp;$value&nbsp;&lt;br&nbsp;\/&gt;\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nAccept: *\/*\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla\/4.0\nHost: www.example.com\nConnection: Keep-Alive\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    You can also get at the value of the common CGI variables by\n    reading them from the environment, which works whether or not\n    you are using PHP as an Apache module. Use\n    phpinfo() to see a list of all of the available\n    environment variables.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_response_headers() - Fetch all HTTP response headers\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-setenv.php","title":"apache_setenv","description":"\n \n  apache_setenv\n  (PHP 4 &gt;= 4.2.0, PHP 5)apache_setenv &mdash; Set an Apache subprocess_env variable\n\n \n\n \n  Description\n  \n   bool apache_setenv\n    ( string $variable\n   , string $value\n   [, bool $walk_to_top = false\n  ] )\n\n  \n   apache_setenv() sets the value of the Apache\n   environment variable specified by\n   variable.\n  \n  Note: \n   \n    When setting an Apache environment variable, the corresponding \n    $_SERVER\n    variable is not changed.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     variable\n     \n\n      \n       The environment variable that&#039;s being set.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The new variable value.\n      \n     \n\n    \n\n    \n\n     walk_to_top\n     \n\n      \n       Whether to set the top-level variable available to all Apache layers.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n   Example #1 Setting an Apache environment variable using apache_setenv()\n   \n\n&lt;?phpapache_setenv(\"EXAMPLE_VAR\",&nbsp;\"Example&nbsp;Value\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    apache_setenv() can be paired up with\n    apache_getenv() across separate pages or for setting\n    variables to pass to Server Side Includes (.shtml) that have been\n    included in PHP scripts.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_getenv() - Get an Apache subprocess_env variable\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.apache-response-headers.php","title":"apache_response_headers","description":"\n \n  apache_response_headers\n  (PHP 4 &gt;= 4.3.0, PHP 5)apache_response_headers &mdash; Fetch all HTTP response headers\n\n \n\n \n  Description\n  \n   array apache_response_headers\n    ( void\n   )\n\n  \n   Fetch all HTTP response headers.\n  \n \n\n\n \n  Return Values\n  \n   An array of all Apache response headers on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        This function became available under FastCGI. Previously, it was\n        supported only when PHP was installed as an Apache module.\n       \n      \n\n      \n       4.3.3\n       \n        As of PHP 4.3.3 you can use this function with the\nNSAPI server module in Netscape\/iPlanet\/SunONE\nwebservers, too.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 apache_response_headers() example\n    \n\n&lt;?phpprint_r(apache_response_headers());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [Accept-Ranges] =&gt; bytes\n    [X-Powered-By] =&gt; PHP\/4.3.8\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_request_headers() - Fetch all HTTP request headers\n    headers_sent() - Checks if or where headers have been sent\n    headers_list() - Returns a list of response headers sent (or ready to send)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getallheaders.php","title":"getallheaders","description":"\n \n  getallheaders\n  (PHP 4, PHP 5)getallheaders &mdash; Fetch all HTTP request headers\n\n \n\n \n  Description\n  \n   array getallheaders\n    ( void\n   )\n\n  \n   Fetches all HTTP headers from the current request.\n  \n  \n   This function is an alias for apache_request_headers().\n   Please read the apache_request_headers()\n   documentation for more information on how this function works.\n  \n \n\n\n \n  Return Values\n  \n   An associative array of all the HTTP headers in the current request, or\n   FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        This function became available under FastCGI. Previously, it was\n        supported only when PHP was installed as an Apache module.\n       \n      \n\n      \n       4.3.3\n       \n        As of PHP 4.3.3 you can use this function with the\nNSAPI server module in Netscape\/iPlanet\/SunONE\nwebservers, too.\n       \n      \n\n      \n       4.3.0\n       \n        Became an alias for apache_request_headers().\n        Essentially, it was renamed.  This is because this function\n        only works with Apache.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 getallheaders() example\n    \n\n&lt;?phpforeach&nbsp;(getallheaders()&nbsp;as&nbsp;$name&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$name:&nbsp;$value\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_response_headers() - Fetch all HTTP response headers\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.virtual.php","title":"virtual","description":"\n \n  virtual\n  (PHP 4, PHP 5)virtual &mdash; Perform an Apache sub-request\n\n \n\n \n  Description\n  \n   bool virtual\n    ( string $filename\n   )\n\n  \n   virtual() is an Apache-specific function which\n   is similar to &lt;!--#include virtual...--&gt; in\n   mod_include.\n   It performs an Apache sub-request.  It is useful for including\n   CGI scripts or .shtml files, or anything else that you would\n   parse through Apache. Note that for a CGI script, the script\n   must generate valid CGI headers.  At the minimum that means it\n   must generate a Content-Type header.\n  \n  \n   To run the sub-request, all buffers are terminated and flushed to the\n   browser, pending headers are sent too.\n  \n  This function is only supported when PHP\nis installed as an Apache module.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file that the virtual command will be performed on.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Performs the virtual command on success, or returns FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        As of PHP 4.3.3 you can use this function with the\nNSAPI server module in Netscape\/iPlanet\/SunONE\nwebservers, too.\n       \n      \n\n      \n       4.0.6\n       \n        This function may be used on PHP files. However, it is typically\n        better to use include() or\n        require() for PHP files.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   See apache_note() for an example.\n  \n \n\n\n \n  Notes\n  Warning\n   \n    The query string can be passed to the included file but\n    $_GET is copied from the parent script and only\n    $_SERVER['QUERY_STRING'] is filled with the passed\n    query string. The query string may only be passed when using Apache 2.\n    The requested file will not be listed in the Apache access log.\n   \n  \n  Note: \n   \n    Environment variables set in the requested file are not visible to the\n    calling script.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    apache_note() - Get and set apache request notes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzclose.php","title":"bzclose","description":"\n \n  bzclose\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzclose &mdash; Close a bzip2 file\n\n \n \n  Description\n  \n   int bzclose\n    ( resource $bz\n   )\n\n  \n   Closes the given bzip2 file pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    bzopen() - Opens a bzip2 compressed file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerrno.php","title":"bzerrno","description":"\n \n  bzerrno\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzerrno &mdash; Returns a bzip2 error number\n\n \n \n  Description\n  \n   int bzerrno\n    ( resource $bz\n   )\n\n  \n   Returns the error number of any bzip2 error returned by the given file\n   pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the error number as an integer.\n  \n \n\n \n  See Also\n  \n   \n    bzerror() - Returns the bzip2 error number and error string in an array\n    bzerrstr() - Returns a bzip2 error string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzcompress.php","title":"bzcompress","description":"\n \n  bzcompress\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzcompress &mdash; Compress a string into bzip2 encoded data\n\n \n \n  Description\n  \n   mixed bzcompress\n    ( string $source\n   [, int $blocksize = 4\n   [, int $workfactor = 0\n  ]] )\n\n  \n   bzcompress() compresses the given string and returns\n   it as bzip2 encoded data.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     source\n     \n\n      \n       The string to compress.\n      \n     \n\n    \n\n    \n\n     blocksize\n     \n\n      \n       Specifies the blocksize used during compression and should be a number \n       from 1 to 9 with 9 giving the best compression, but using more \n       resources to do so.\n      \n     \n\n    \n\n    \n\n     workfactor\n     \n\n      \n       Controls how the compression phase behaves when presented with worst\n       case, highly repetitive, input data.  The value can be between 0 and\n       250 with 0 being a special case. \n      \n      \n       Regardless of the workfactor, the generated \n       output is the same.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The compressed string, or an error number if an error occurred.\n  \n \n\n \n  Examples\n  \n   Example #1 Compressing data\n   \n\n&lt;?php$str&nbsp;=&nbsp;\"sample&nbsp;data\";$bzstr&nbsp;=&nbsp;bzcompress($str,&nbsp;9);echo&nbsp;$bzstr;?&gt;\n\n\n   \n\n   \n \n\n \n  See Also\n  \n   \n    bzdecompress() - Decompresses bzip2 encoded data\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzdecompress.php","title":"bzdecompress","description":"\n \n  bzdecompress\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzdecompress &mdash; Decompresses bzip2 encoded data\n\n \n \n  Description\n  \n   mixed bzdecompress\n    ( string $source\n   [, int $small = 0\n  ] )\n\n  \n   bzdecompress() decompresses the given string containing\n   bzip2 encoded data.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     source\n     \n\n      \n       The string to decompress.\n      \n     \n\n    \n\n    \n\n     small\n     \n\n      \n       If TRUE, an alternative decompression algorithm will be used which\n       uses less memory (the maximum memory requirement drops to around 2300K) \n       but works at roughly half the speed.\n      \n      \n       See the &raquo;&nbsp;bzip2 documentation for more \n       information about this feature.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The decompressed string, or an error number if an error occurred.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Decompressing a String\n    \n\n&lt;?php$start_str&nbsp;=&nbsp;\"This&nbsp;is&nbsp;not&nbsp;an&nbsp;honest&nbsp;face?\";$bzstr&nbsp;=&nbsp;bzcompress($start_str);echo&nbsp;\"Compressed&nbsp;String:&nbsp;\";echo&nbsp;$bzstr;echo&nbsp;\"\\n&lt;br&nbsp;\/&gt;\\n\";$str&nbsp;=&nbsp;bzdecompress($bzstr);echo&nbsp;\"Decompressed&nbsp;String:&nbsp;\";echo&nbsp;$str;echo&nbsp;\"\\n&lt;br&nbsp;\/&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    bzcompress() - Compress a string into bzip2 encoded data\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerror.php","title":"bzerror","description":"\n \n  bzerror\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzerror &mdash; \n   Returns the bzip2 error number and error string in an array\n  \n\n \n \n  Description\n  \n   array bzerror\n    ( resource $bz\n   )\n\n  \n   Returns the error number and error string of any bzip2 error returned by \n   the given file pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an associative array, with the error code in the \n   errno entry, and the error message in the\n   errstr entry.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 bzerror() example\n    \n\n&lt;?php$error&nbsp;=&nbsp;bzerror($bz);echo&nbsp;$error[\"errno\"];echo&nbsp;$error[\"errstr\"];?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    bzerrno() - Returns a bzip2 error number\n    bzerrstr() - Returns a bzip2 error string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzerrstr.php","title":"bzerrstr","description":"\n \n  bzerrstr\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzerrstr &mdash; Returns a bzip2 error string\n\n \n \n  Description\n  \n   string bzerrstr\n    ( resource $bz\n   )\n\n  \n   Gets the error string of any bzip2 error returned by the given file\n   pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a string containing the error message.\n  \n \n\n \n  See Also\n  \n   \n    bzerrno() - Returns a bzip2 error number\n    bzerror() - Returns the bzip2 error number and error string in an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzflush.php","title":"bzflush","description":"\n \n  bzflush\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzflush &mdash; Force a write of all buffered data\n\n \n \n  Description\n  \n   int bzflush\n    ( resource $bz\n   )\n\n  \n   Forces a write of all buffered bzip2 data for the file pointer\n   bz.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    bzread() - Binary safe bzip2 file read\n    bzwrite() - Binary safe bzip2 file write\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzopen.php","title":"bzopen","description":"\n \n  bzopen\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzopen &mdash; Opens a bzip2 compressed file\n\n \n \n  Description\n  \n   resource bzopen\n    ( string $filename\n   , string $mode\n   )\n\n  \n   bzopen() opens a bzip2 (.bz2) file for reading or\n   writing.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The name of the file to open.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Similar to the fopen() function, only &#039;r&#039; (read)\n       and &#039;w&#039; (write) are supported. Everything else will cause bzopen\n       to return FALSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If the open fails, bzopen() returns FALSE, otherwise\n   it returns a pointer to the newly opened file.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 bzopen() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;\"\/tmp\/foo.bz2\";$bz&nbsp;=&nbsp;bzopen($file,&nbsp;\"r\")&nbsp;or&nbsp;die(\"Couldn't&nbsp;open&nbsp;$file&nbsp;for&nbsp;reading\");bzclose($bz);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    bzclose() - Close a bzip2 file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzwrite.php","title":"bzwrite","description":"\n \n  bzwrite\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzwrite &mdash; Binary safe bzip2 file write\n\n \n \n  Description\n  \n   int bzwrite\n    ( resource $bz\n   , string $data\n   [, int $length\n  ] )\n\n  \n   bzwrite() writes a string into the given bzip2 file \n   stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The written data.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If supplied, writing will stop after length \n       (uncompressed) bytes have been written or the end of \n       data is reached, whichever comes first.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of bytes written, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 bzwrite() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"uncompressed&nbsp;data\";$bz&nbsp;=&nbsp;bzopen(\"\/tmp\/foo.bz2\",&nbsp;\"w\");bzwrite($bz,&nbsp;$str,&nbsp;strlen($str));bzclose($bz);?&gt;\n\n\n    \n \n   \n  \n \n\n \n  See Also\n  \n   \n    bzread() - Binary safe bzip2 file read\n    bzopen() - Opens a bzip2 compressed file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bzread.php","title":"bzread","description":"\n \n  bzread\n  (PHP 4 &gt;= 4.0.4, PHP 5)bzread &mdash; Binary safe bzip2 file read\n\n \n \n  Description\n  \n   string bzread\n    ( resource $bz\n   [, int $length = 1024\n  ] )\n\n  \n   bzread() reads from the given bzip2 file pointer.\n  \n  \n   Reading stops when length (uncompressed) bytes have\n   been read or EOF is reached, whichever comes first.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bz\n     \n\n      \n       The file pointer. It must be valid and must point to a file \n       successfully opened by bzopen().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If not specified, bzread() will read 1024 \n       (uncompressed) bytes at a time. A maximum of 8192\n       uncompressed bytes will be read at a time.\n      \n     \n\n    \n\n   \n\n   \n \n\n \n  Return Values\n  \n   Returns the uncompressed data, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 bzread() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;\"\/tmp\/foo.bz2\";$bz&nbsp;=&nbsp;bzopen($file,&nbsp;\"r\")&nbsp;or&nbsp;die(\"Couldn't&nbsp;open&nbsp;$file\");$decompressed_file&nbsp;=&nbsp;'';while&nbsp;(!feof($bz))&nbsp;{&nbsp;&nbsp;$decompressed_file&nbsp;.=&nbsp;bzread($bz,&nbsp;4096);}bzclose($bz);echo&nbsp;\"The&nbsp;contents&nbsp;of&nbsp;$file&nbsp;are:&nbsp;&lt;br&nbsp;\/&gt;\\n\";echo&nbsp;$decompressed_file;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    bzwrite() - Binary safe bzip2 file write\n    feof() - Tests for end-of-file on a file pointer\n    bzopen() - Opens a bzip2 compressed file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-chunk.php","title":"array_chunk","description":"\n \n  array_chunk\n  (PHP 4 &gt;= 4.2.0, PHP 5)array_chunk &mdash; Split an array into chunks\n\n \n \n \n  Description\n  \n   array array_chunk\n    ( array $input\n   , int $size\n   [, bool $preserve_keys = false\n  ] )\n\n  \n   Chunks an array into size large chunks.\n   The last chunk may contain less than size elements.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     input\n     \n\n      \n       The array to work on\n      \n     \n\n    \n\n\n    \n\n     size\n     \n\n      \n       The size of each chunk\n      \n     \n\n    \n\n\n    \n\n     preserve_keys\n     \n\n      \n       When set to TRUE keys will be preserved.\n       Default is FALSE which will reindex the chunk numerically\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a multidimensional numerically indexed array, starting with zero,\n   with each dimension containing size elements.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   If size is less than 1\n   E_WARNING will be thrown and NULL returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_chunk() example\n    \n\n&lt;?php$input_array&nbsp;=&nbsp;array('a',&nbsp;'b',&nbsp;'c',&nbsp;'d',&nbsp;'e');print_r(array_chunk($input_array,&nbsp;2));print_r(array_chunk($input_array,&nbsp;2,&nbsp;true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; a\n            [1] =&gt; b\n        )\n\n    [1] =&gt; Array\n        (\n            [0] =&gt; c\n            [1] =&gt; d\n        )\n\n    [2] =&gt; Array\n        (\n            [0] =&gt; e\n        )\n\n)\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; a\n            [1] =&gt; b\n        )\n\n    [1] =&gt; Array\n        (\n            [2] =&gt; c\n            [3] =&gt; d\n        )\n\n    [2] =&gt; Array\n        (\n            [4] =&gt; e\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_slice() - Extract a slice of the array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-change-key-case.php","title":"array_change_key_case","description":"\n \n  array_change_key_case\n  (PHP 4 &gt;= 4.2.0, PHP 5)array_change_key_case &mdash; Changes all keys in an array\n\n \n \n \n  Description\n  \n   array array_change_key_case\n    ( array $input\n   [, int $case = CASE_LOWER\n  ] )\n\n  \n   Returns an array with all keys from input lowercased\n   or uppercased. Numbered indices are left as is.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     input\n     \n\n      \n       The array to work on\n      \n     \n\n    \n\n\n    \n\n     case\n     \n\n      \n       Either CASE_UPPER or\n       CASE_LOWER (default)\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with its keys lower or uppercased, or FALSE if\n   input is not an array.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws E_WARNING if input is\n   not an array.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_change_key_case() example\n    \n\n&lt;?php$input_array&nbsp;=&nbsp;array(\"FirSt\"&nbsp;=&gt;&nbsp;1,&nbsp;\"SecOnd\"&nbsp;=&gt;&nbsp;4);print_r(array_change_key_case($input_array,&nbsp;CASE_UPPER));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [FIRST] =&gt; 1\n    [SECOND] =&gt; 4\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If an array has indices that will be the same once run through this\n    function (e.g. &quot;keY&quot; and &quot;kEY&quot;), \n    the value that is later in the array will override other indices.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-combine.php","title":"array_combine","description":"\n \n  array_combine\n  (PHP 5)array_combine &mdash; Creates an array by using one array for keys and another for its values\n\n \n \n \n  Description\n  \n   array array_combine\n    ( array $keys\n   , array $values\n   )\n\n  \n   Creates an array by using the values from the\n   keys array as keys and the values from the\n   values array as the corresponding values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     keys\n     \n\n      \n       Array of keys to be used. Illegal values for key will be\n       converted to string.\n      \n     \n\n    \n\n\n    \n\n     values\n     \n\n      \n       Array of values to be used\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the combined array, FALSE if the number of elements\n   for each array isn&#039;t equal.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws E_WARNING if the number of elements in\n   keys and values does not\n   match.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        Previous versions issued E_WARNING and returned\n        FALSE for empty arrays.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 A simple array_combine() example\n    \n\n&lt;?php$a&nbsp;=&nbsp;array('green',&nbsp;'red',&nbsp;'yellow');$b&nbsp;=&nbsp;array('avocado',&nbsp;'apple',&nbsp;'banana');$c&nbsp;=&nbsp;array_combine($a,&nbsp;$b);print_r($c);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [green]  =&gt; avocado\n    [red]    =&gt; apple\n    [yellow] =&gt; banana\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_merge() - Merge one or more arrays\n    array_walk() - Apply a user function to every member of an array\n    array_values() - Return all the values of an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-count-values.php","title":"array_count_values","description":"\n \n  array_count_values\n  (PHP 4, PHP 5)array_count_values &mdash; Counts all the values of an array\n\n \n \n \n  Description\n  \n   array array_count_values\n    ( array $input\n   )\n\n  \n   array_count_values() returns an array using\n   the values of the input array as keys and\n   their frequency in input as values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     input\n     \n\n      \n       The array of values to count\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array of values from input as\n   keys and their count as value.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws E_WARNING for every element which is not\n   string or integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_count_values() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(1,&nbsp;\"hello\",&nbsp;1,&nbsp;\"world\",&nbsp;\"hello\");print_r(array_count_values($array));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [1] =&gt; 2\n    [hello] =&gt; 2\n    [world] =&gt; 1\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    count() - Count all elements in an array, or something in an object\n    array_unique() - Removes duplicate values from an array\n    array_values() - Return all the values of an array\n    count_chars() - Return information about characters used in a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-assoc.php","title":"array_diff_assoc","description":"\n \n  array_diff_assoc\n  (PHP 4 &gt;= 4.3.0, PHP 5)array_diff_assoc &mdash; Computes the difference of arrays with additional index check\n\n \n \n \n  Description\n  \n   array array_diff_assoc\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )\n\n  \n   Compares array1 against array2 and\n   returns the difference. Unlike array_diff() the array\n   keys are used in the comparison.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     array1\n     \n\n      \n       The array to compare from\n      \n     \n\n    \n\n\n    \n\n     array2\n     \n\n      \n       An array to compare against\n      \n     \n\n    \n\n\n    \n\n     ...\n     \n\n      \n       More arrays to compare against\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the values from\n   array1 that are not present in any of the other arrays.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 array_diff_assoc() example\n    \n     In this example you see the &quot;a&quot; =&gt; &quot;green&quot;\n     pair is present in both arrays and thus it is not in the output from the\n     function. Unlike this, the pair 0 =&gt; &quot;red&quot;\n     is in the output because in the second argument &quot;red&quot;\n     has key which is 1.\n    \n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"yellow\",&nbsp;\"red\");$result&nbsp;=&nbsp;array_diff_assoc($array1,&nbsp;$array2);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [b] =&gt; brown\n    [c] =&gt; blue\n    [0] =&gt; red\n)\n\n    \n   \n  \n  \n   \n    Example #2 array_diff_assoc() example\n    \n     Two values from key =&gt; value pairs are\n     considered equal only if (string) $elem1 === (string)\n     $elem2 . In other words a strict check takes place so\n     the string representations must be the same.\n    \n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(0,&nbsp;1,&nbsp;2);$array2&nbsp;=&nbsp;array(\"00\",&nbsp;\"01\",&nbsp;\"2\");$result&nbsp;=&nbsp;array_diff_assoc($array1,&nbsp;$array2);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; 0\n    [1] =&gt; 1\n    )\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using, for example,\n    array_diff_assoc($array1[0], $array2[0]);.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-uassoc.php","title":"array_diff_uassoc","description":"\n \n  array_diff_uassoc\n  (PHP 5)array_diff_uassoc &mdash; Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n\n \n \n \n  Description\n  \n   array array_diff_uassoc\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callback $key_compare_func\n   )\n\n  \n   Compares array1 against array2 and\n   returns the difference. Unlike array_diff() the array\n   keys are used in the comparison.\n  \n  \n   Unlike array_diff_assoc() an user supplied callback\n   function is used for the indices comparison, not internal function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     array1\n     \n\n      \n       The array to compare from\n      \n     \n\n    \n\n\n    \n\n     array2\n     \n\n      \n       An array to compare against\n      \n     \n\n    \n\n\n    \n\n     ...\n     \n\n      \n       More arrays to compare against\n      \n     \n\n    \n\n\n    \n\n     key_compare_func\n     \n\n      \n       callback function to use.\n       The callback function must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the second.\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 array_diff_uassoc() example\n    \n     The &quot;a&quot; =&gt; &quot;green&quot;\n     pair is present in both arrays and thus it is not in the output from the\n     function. Unlike this, the pair 0 =&gt; &quot;red&quot;\n     is in the output because in the second argument &quot;red&quot;\n     has key which is 1.\n    \n    \n\n&lt;?phpfunction&nbsp;key_compare_func($a,&nbsp;$b){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a&nbsp;===&nbsp;$b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a&nbsp;&gt;&nbsp;$b)?&nbsp;1:-1;}$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"yellow\",&nbsp;\"red\");$result&nbsp;=&nbsp;array_diff_uassoc($array1,&nbsp;$array2,&nbsp;\"key_compare_func\");print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [b] =&gt; brown\n    [c] =&gt; blue\n    [0] =&gt; red\n)\n\n    \n    \n     The equality of 2 indices is checked by the user supplied callback function.\n    \n   \n  \n \n \n\n \n  Notes\n  Note: \n   \n    This function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using, for example,\n    array_diff_uassoc($array1[0], $array2[0], &quot;key_compare_func&quot;);.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-key.php","title":"array_diff_key","description":"\n \n  array_diff_key\n  (PHP 5 &gt;= 5.1.0)array_diff_key &mdash; Computes the difference of arrays using keys for comparison\n\n \n \n \n  Description\n  \n   array array_diff_key\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )\n\n  \n   Compares the keys from array1 against the keys\n   from array2 and returns the difference.\n   This function is like array_diff() except the\n   comparison is done on the keys instead of the values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     array1\n     \n\n      \n       The array to compare from\n      \n     \n\n    \n\n\n    \n\n     array2\n     \n\n      \n       An array to compare against\n      \n     \n\n    \n\n\n    \n\n     ...\n     \n\n      \n       More arrays to compare against\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the entries from\n   array1 whose keys are not present in any of the\n   other arrays.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 array_diff_key() example\n    \n     The two keys from the key =&gt; value pairs are\n     considered equal only if\n     (string) $key1 === (string) $key2 . In other words\n     a strict type check is executed so the string representation must be\n     the same.\n    \n    \n\n&lt;?php$array1&nbsp;=&nbsp;array('blue'&nbsp;&nbsp;=&gt;&nbsp;1,&nbsp;'red'&nbsp;&nbsp;=&gt;&nbsp;2,&nbsp;'green'&nbsp;&nbsp;=&gt;&nbsp;3,&nbsp;'purple'&nbsp;=&gt;&nbsp;4);$array2&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;5,&nbsp;'blue'&nbsp;=&gt;&nbsp;6,&nbsp;'yellow'&nbsp;=&gt;&nbsp;7,&nbsp;'cyan'&nbsp;&nbsp;&nbsp;=&gt;&nbsp;8);var_dump(array_diff_key($array1,&nbsp;$array2));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [&quot;red&quot;]=&gt;\n  int(2)\n  [&quot;purple&quot;]=&gt;\n  int(4)\n}\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using\n    array_diff_key($array1[0], $array2[0]);.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_intersect_key() - Computes the intersection of arrays using keys for comparison\n    array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff-ukey.php","title":"array_diff_ukey","description":"\n \n  array_diff_ukey\n  (PHP 5 &gt;= 5.1.0)array_diff_ukey &mdash; Computes the difference of arrays using a callback function on the keys for comparison\n\n \n \n \n  Description\n  \n   array array_diff_ukey\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $key_compare_func\n   )\n\n  \n   Compares the keys from array1 against the keys\n   from array2 and returns the difference.\n   This function is like array_diff() except the\n   comparison is done on the keys instead of the values.\n  \n  \n   Unlike array_diff_key() an user supplied callback\n   function is used for the indices comparison, not internal function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     array1\n     \n\n      \n       The array to compare from\n      \n     \n\n    \n\n\n    \n\n     array2\n     \n\n      \n       An array to compare against\n      \n     \n\n    \n\n\n    \n\n     ...\n     \n\n      \n       More arrays to compare against\n      \n     \n\n    \n\n\n    \n\n     key_compare_func\n     \n\n      \n       callback function to use.\n       The callback function must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the second.\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.\n  \n \n\n\n\n \n \n  Examples\n  \n   \n    Example #1 array_diff_ukey() example\n    \n\n&lt;?phpfunction&nbsp;key_compare_func($key1,&nbsp;$key2){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($key1&nbsp;==&nbsp;$key2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;($key1&nbsp;&gt;&nbsp;$key2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;}$array1&nbsp;=&nbsp;array('blue'&nbsp;&nbsp;=&gt;&nbsp;1,&nbsp;'red'&nbsp;&nbsp;=&gt;&nbsp;2,&nbsp;'green'&nbsp;&nbsp;=&gt;&nbsp;3,&nbsp;'purple'&nbsp;=&gt;&nbsp;4);$array2&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;5,&nbsp;'blue'&nbsp;=&gt;&nbsp;6,&nbsp;'yellow'&nbsp;=&gt;&nbsp;7,&nbsp;'cyan'&nbsp;&nbsp;&nbsp;=&gt;&nbsp;8);var_dump(array_diff_ukey($array1,&nbsp;$array2,&nbsp;'key_compare_func'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [&quot;red&quot;]=&gt;\n  int(2)\n  [&quot;purple&quot;]=&gt;\n  int(4)\n}\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using\n    array_diff_ukey($array1[0], $array2[0], &#039;callback_func&#039;);.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_diff_key() - Computes the difference of arrays using keys for comparison\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_intersect_key() - Computes the intersection of arrays using keys for comparison\n    array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-fill-keys.php","title":"array_fill_keys","description":"\n \n  array_fill_keys\n  (PHP 5 &gt;= 5.2.0)array_fill_keys &mdash; Fill an array with values, specifying keys\n\n \n\n \n  Description\n  \n   array array_fill_keys\n    ( array $keys\n   , mixed $value\n   )\n\n  \n   Fills an array with the\n   value of the value parameter, using the\n   values of the keys array as keys.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     keys\n     \n\n      \n       Array of values that will be used as keys. Illegal values\n       for key will be converted to string.\n      \n     \n\n    \n\n\n    \n\n     value\n     \n\n      \n       Value to use for filling\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the filled array\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 array_fill_keys() example\n    \n\n&lt;?php$keys&nbsp;=&nbsp;array('foo',&nbsp;5,&nbsp;10,&nbsp;'bar');$a&nbsp;=&nbsp;array_fill_keys($keys,&nbsp;'banana');print_r($a);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [foo] =&gt; banana\n    [5] =&gt; banana\n    [10] =&gt; banana\n    [bar] =&gt; banana\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_fill() - Fill an array with values\n    array_combine() - Creates an array by using one array for keys and another for its values\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-diff.php","title":"array_diff","description":"\n \n  array_diff\n  (PHP 4 &gt;= 4.0.1, PHP 5)array_diff &mdash; Computes the difference of arrays\n\n \n\n \n  Description\n  \n   array array_diff\n    ( array $array1\n   , array $array2\n   [, array $...\n  ] )\n\n  \n   Compares array1 against array2 and\n   returns the difference.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The array to compare from\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       An array to compare against\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       More arrays to compare against\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the entries from\n   array1 that are not present in any of the other arrays.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_diff() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"red\",&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"b\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"yellow\",&nbsp;\"red\");$result&nbsp;=&nbsp;array_diff($array1,&nbsp;$array2);print_r($result);?&gt;\n\n\n    \n\n    \n     Multiple occurrences in $array1 are all\n     treated the same way. This will output :\n    \n    \n\nArray\n(\n    [1] =&gt; blue\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Two elements are considered equal if and only if\n    (string) $elem1 === (string) $elem2. In words:\n    when the string representation is the same.\n    \n   \n  \n  Note: \n   \n    This function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using\n    array_diff($array1[0], $array2[0]);.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-fill.php","title":"array_fill","description":"\n \n  array_fill\n  (PHP 4 &gt;= 4.2.0, PHP 5)array_fill &mdash; Fill an array with values\n\n \n \n \n  Description\n  \n   array array_fill\n    ( int $start_index\n   , int $num\n   , mixed $value\n   )\n\n  \n   Fills an array with\n   num entries of the value of the\n   value parameter, keys starting at the\n   start_index parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     start_index\n     \n\n      \n       The first index of the returned array.\n      \n      \n       If start_index is negative, \n       the first index of the returned array will be \n       start_index and the following \n       indices will start from zero \n       (see example).\n      \n     \n\n    \n\n\n    \n\n     num\n     \n\n      \n       Number of elements to insert.\n       Must be greater than zero.\n      \n     \n\n    \n\n\n    \n\n     value\n     \n\n      \n       Value to use for filling\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the filled array\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws a E_WARNING if num is\n   less than one.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_fill() example\n    \n\n&lt;?php$a&nbsp;=&nbsp;array_fill(5,&nbsp;6,&nbsp;'banana');$b&nbsp;=&nbsp;array_fill(-2,&nbsp;4,&nbsp;'pear');print_r($a);print_r($b);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [5]  =&gt; banana\n    [6]  =&gt; banana\n    [7]  =&gt; banana\n    [8]  =&gt; banana\n    [9]  =&gt; banana\n    [10] =&gt; banana\n)\nArray\n(\n    [-2] =&gt; pear\n    [0] =&gt; pear\n    [1] =&gt; pear\n    [2] =&gt; pear\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  \n   See also the Arrays \n   section of manual for a detailed explanation of negative keys.\n  \n \n\n \n \n  See Also\n  \n   \n    array_fill_keys() - Fill an array with values, specifying keys\n    str_repeat() - Repeat a string\n    range() - Create an array containing a range of elements\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-flip.php","title":"array_flip","description":"\n \n  array_flip\n  (PHP 4, PHP 5)array_flip &mdash; Exchanges all keys with their associated values in an array\n\n \n \n  Description\n  \n   array array_flip\n    ( array $trans\n   )\n\n  \n   array_flip() returns an array in flip\n   order, i.e. keys from trans become values and values\n   from trans become keys.\n  \n  \n   Note that the values of trans need to be valid\n   keys, i.e. they need to be either integer or\n   string. A warning will be emitted if a value has the wrong\n   type, and the key\/value pair in question will not be\n   flipped.\n  \n  \n   If a value has several occurrences, the latest key will be\n   used as its values, and all others will be lost.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     trans\n     \n\n      \n       An array of key\/value pairs to be flipped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the flipped array on success and NULL on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_flip() example\n    \n\n&lt;?php$trans&nbsp;=&nbsp;array_flip($trans);$original&nbsp;=&nbsp;strtr($str,&nbsp;$trans);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 array_flip() example : collision\n    \n\n&lt;?php$trans&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;1,&nbsp;\"b\"&nbsp;=&gt;&nbsp;1,&nbsp;\"c\"&nbsp;=&gt;&nbsp;2);$trans&nbsp;=&nbsp;array_flip($trans);print_r($trans);?&gt;\n\n\n    \n\n    \n     now $trans is:\n    \n    \n\nArray\n(\n    [1] =&gt; b\n    [2] =&gt; c\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_values() - Return all the values of an array\n    array_keys() - Return all the keys or a subset of the keys of an array\n    array_reverse() - Return an array with elements in reverse order\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-filter.php","title":"array_filter","description":"\n \n  array_filter\n  (PHP 4 &gt;= 4.0.6, PHP 5)array_filter &mdash; Filters elements of an array using a callback function\n\n \n \n \n  Description\n  \n   array array_filter\n    ( array $input\n   [, callback $callback\n  ] )\n\n  \n   Iterates over each value in\n   the input array passing them to the\n   callback function. If the \n   callback function returns true, the current\n   value from input is returned into the\n   result array. Array keys are preserved.\n  \n\n\n\n \n  Parameters\n  \n   \n\n\n    \n\n     input\n     \n\n      \n       The array to iterate over\n      \n     \n\n    \n\n\n    \n\n     callback\n     \n\n      \n       The callback function to use\n      \n      \n       If no callback is supplied, all entries of\n       input equal to FALSE (see\n       converting to\n        boolean) will be removed.\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the filtered array.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 array_filter() example\n    \n\n&lt;?phpfunction&nbsp;odd($var){&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;whether&nbsp;the&nbsp;input&nbsp;integer&nbsp;is&nbsp;odd&nbsp;&nbsp;&nbsp;&nbsp;return($var&nbsp;&amp;&nbsp;1);}function&nbsp;even($var){&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;whether&nbsp;the&nbsp;input&nbsp;integer&nbsp;is&nbsp;even&nbsp;&nbsp;&nbsp;&nbsp;return(!($var&nbsp;&amp;&nbsp;1));}$array1&nbsp;=&nbsp;array(\"a\"=&gt;1,&nbsp;\"b\"=&gt;2,&nbsp;\"c\"=&gt;3,&nbsp;\"d\"=&gt;4,&nbsp;\"e\"=&gt;5);$array2&nbsp;=&nbsp;array(6,&nbsp;7,&nbsp;8,&nbsp;9,&nbsp;10,&nbsp;11,&nbsp;12);echo&nbsp;\"Odd&nbsp;:\\n\";print_r(array_filter($array1,&nbsp;\"odd\"));echo&nbsp;\"Even:\\n\";print_r(array_filter($array2,&nbsp;\"even\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nOdd :\nArray\n(\n    [a] =&gt; 1\n    [c] =&gt; 3\n    [e] =&gt; 5\n)\nEven:\nArray\n(\n    [0] =&gt; 6\n    [2] =&gt; 8\n    [4] =&gt; 10\n    [6] =&gt; 12\n)\n\n    \n   \n   \n    Example #2 array_filter() without\n    callback\n    \n\n&lt;?php$entry&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;=&gt;&nbsp;'foo',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;=&gt;&nbsp;false,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;=&gt;&nbsp;-1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;=&gt;&nbsp;null,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;=&gt;&nbsp;''&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);print_r(array_filter($entry));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; foo\n    [2] =&gt; -1\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Caution\n   \n    If the array is changed from the callback function (e.g. element\n    added, deleted or unset) the behavior of this function is undefined.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    array_map() - Applies the callback to the elements of the given arrays\n    array_reduce() - Iteratively reduce the array to a single value using a callback function\n    array_walk() - Apply a user function to every member of an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-assoc.php","title":"array_intersect_assoc","description":"\n \n  array_intersect_assoc\n  (PHP 4 &gt;= 4.3.0, PHP 5)array_intersect_assoc &mdash; Computes the intersection of arrays with additional index check\n\n \n \n \n  Description\n  \n   array array_intersect_assoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n  ] )\n\n  \n   array_intersect_assoc() returns an array\n   containing all the values of array1\n   that are present in all the arguments. Note that the keys are used in\n   the comparison unlike in array_intersect().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The array with master values to check.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       An array to compare values against.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       A variable list of arrays to compare.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array containing all the values in \n   array1 that are present in all of the arguments.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_intersect_assoc() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"yellow\",&nbsp;\"blue\",&nbsp;\"red\");$result_array&nbsp;=&nbsp;array_intersect_assoc($array1,&nbsp;$array2);print_r($result_array);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n)\n\n    \n   \n  \n  \n   In our example you see that only the pair &quot;a&quot; =&gt;\n   &quot;green&quot; is present in both arrays and thus is returned.\n   The value &quot;red&quot; is not returned because in\n   $array1 its key is 0 while\n   the key of &quot;red&quot; in $array2 is\n   1, and the key &quot;b&quot; is not returned\n   because its values are different in each array.\n  \n  \n   The two values from the key =&gt; value pairs are\n   considered equal only if\n   (string) $elem1 === (string) $elem2 . In other words\n   a strict type check is executed so the string representation must be\n   the same.\n   \n  \n \n\n\n \n  See Also\n  \n   array_intersect() - Computes the intersection of arrays\n   array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n   array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n   array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   array_diff() - Computes the difference of arrays\n   array_diff_assoc() - Computes the difference of arrays with additional index check\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-uassoc.php","title":"array_intersect_uassoc","description":"\n \n  array_intersect_uassoc\n  (PHP 5)array_intersect_uassoc &mdash; Computes the intersection of arrays with additional index check, compares indexes by a callback function\n\n \n \n \n  Description\n  \n   array array_intersect_uassoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $key_compare_func\n   )\n\n  \n   array_intersect_uassoc() returns an array\n   containing all the values of array1\n   that are present in all the arguments. Note that the keys are used in\n   the comparison unlike in array_intersect().\n  \n  \n   The index comparison is done by a user supplied callback function.\n   It must return an integer less than, equal to, or greater than zero\n   if the first argument is considered to be respectively less than,\n   equal to, or greater than the second.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       Initial array for comparison of the arrays.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       First array to compare keys against.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       Variable list of array arguments to compare values against.\n      \n     \n\n    \n\n    \n\n     key_compare_func\n     \n\n      \n       User supplied callback function to do the comparison.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the values of array1 whose values exist\n   in all of the arguments.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_intersect_uassoc() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"GREEN\",&nbsp;\"B\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"yellow\",&nbsp;\"red\");print_r(array_intersect_uassoc($array1,&nbsp;$array2,&nbsp;\"strcasecmp\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [b] =&gt; brown\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n    array_intersect_key() - Computes the intersection of arrays using keys for comparison\n    array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-key.php","title":"array_intersect_key","description":"\n \n  array_intersect_key\n  (PHP 5 &gt;= 5.1.0)array_intersect_key &mdash; Computes the intersection of arrays using keys for comparison\n\n \n \n \n  Description\n  \n   array array_intersect_key\n    ( array $array1\n   , array $array2\n   [, array $ ...\n  ] )\n\n  \n   array_intersect_key() returns an array\n   containing all the entries of array1\n   which have keys that are present in all the arguments.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The array with master keys to check.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       An array to compare keys against.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       A variable list of arrays to compare.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array containing all the entries of \n   array1 which have keys that are present in all\n   arguments.\n        \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_intersect_key() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array('blue'&nbsp;&nbsp;=&gt;&nbsp;1,&nbsp;'red'&nbsp;&nbsp;=&gt;&nbsp;2,&nbsp;'green'&nbsp;&nbsp;=&gt;&nbsp;3,&nbsp;'purple'&nbsp;=&gt;&nbsp;4);$array2&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;5,&nbsp;'blue'&nbsp;=&gt;&nbsp;6,&nbsp;'yellow'&nbsp;=&gt;&nbsp;7,&nbsp;'cyan'&nbsp;&nbsp;&nbsp;=&gt;&nbsp;8);var_dump(array_intersect_key($array1,&nbsp;$array2));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [&quot;blue&quot;]=&gt;\n  int(1)\n  [&quot;green&quot;]=&gt;\n  int(3)\n}\n\n    \n   \n  \n  \n   In our example you see that only the keys &#039;blue&#039;\n   and &#039;green&#039; are present in both arrays and thus\n   returned. Also notice that the values for the keys\n   &#039;blue&#039; and &#039;green&#039; differ between\n   the two arrays. A match still occurs because only the keys are checked.\n   The values returned are those of array1.\n  \n  \n   The two keys from the key =&gt; value pairs are\n   considered equal only if\n   (string) $key1 === (string) $key2 . In other words\n   a strict type check is executed so the string representation must be\n   the same.\n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_diff_key() - Computes the difference of arrays using keys for comparison\n    array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_intersect_ukey() - Computes the intersection of arrays using a callback function on the keys for comparison\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect-ukey.php","title":"array_intersect_ukey","description":"\n \n  array_intersect_ukey\n  (PHP 5 &gt;= 5.1.0)array_intersect_ukey &mdash; Computes the intersection of arrays using a callback function on the keys for comparison\n\n \n \n  Description\n  \n   array array_intersect_ukey\n    ( array $array1\n   , array $array2\n   [, array $...\n   ], callback $key_compare_func\n   )\n\n  \n   array_intersect_ukey() returns an array\n   containing all the values of array1\n   which have matching keys that are present in all the arguments.\n  \n  \n   This comparison is done by a user supplied callback function.\n   It must return an integer less than, equal to, or greater than zero if the\n   first key is considered to be respectively less than, equal to, or\n   greater than the second.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       Initial array for comparison of the arrays.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       First array to compare keys against.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       Variable list of array arguments to compare keys against.\n      \n     \n\n    \n\n    \n\n     key_compare_func\n     \n\n      \n       User supplied callback function to do the comparison.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the values of array1 whose keys exist\n   in all the arguments.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_intersect_ukey() example\n    \n\n&lt;?phpfunction&nbsp;key_compare_func($key1,&nbsp;$key2){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($key1&nbsp;==&nbsp;$key2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;($key1&nbsp;&gt;&nbsp;$key2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;}$array1&nbsp;=&nbsp;array('blue'&nbsp;&nbsp;=&gt;&nbsp;1,&nbsp;'red'&nbsp;&nbsp;=&gt;&nbsp;2,&nbsp;'green'&nbsp;&nbsp;=&gt;&nbsp;3,&nbsp;'purple'&nbsp;=&gt;&nbsp;4);$array2&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;5,&nbsp;'blue'&nbsp;=&gt;&nbsp;6,&nbsp;'yellow'&nbsp;=&gt;&nbsp;7,&nbsp;'cyan'&nbsp;&nbsp;&nbsp;=&gt;&nbsp;8);var_dump(array_intersect_ukey($array1,&nbsp;$array2,&nbsp;'key_compare_func'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [&quot;blue&quot;]=&gt;\n  int(1)\n  [&quot;green&quot;]=&gt;\n  int(3)\n}\n\n    \n   \n  \n  \n   In our example you see that only the keys &#039;blue&#039;\n   and &#039;green&#039; are present in both arrays and thus\n   returned. Also notice that the values for the keys\n   &#039;blue&#039; and &#039;green&#039; differ between\n   the two arrays. A match still occurs because only the keys are checked.\n   The values returned are those of array1.\n  \n \n\n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_diff_key() - Computes the difference of arrays using keys for comparison\n    array_diff_ukey() - Computes the difference of arrays using a callback function on the keys for comparison\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_intersect_key() - Computes the intersection of arrays using keys for comparison\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-intersect.php","title":"array_intersect","description":"\n \n  array_intersect\n  (PHP 4 &gt;= 4.0.1, PHP 5)array_intersect &mdash; Computes the intersection of arrays\n\n \n \n \n  Description\n  \n   array array_intersect\n    ( array $array1\n   , array $array2\n   [, array $ ...\n  ] )\n\n  \n   array_intersect() returns an array\n   containing all the values of array1\n   that are present in all the arguments.\n   Note that keys are preserved.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The array with master values to check.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       An array to compare values against.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       A variable list of arrays to compare.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all of the values in \n   array1 whose values exist in all of the parameters.\n  \n \n \n\n \n  Examples\n  \n   \n    Example #1 array_intersect() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"red\",&nbsp;\"blue\");$array2&nbsp;=&nbsp;array(\"b\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"yellow\",&nbsp;\"red\");$result&nbsp;=&nbsp;array_intersect($array1,&nbsp;$array2);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n    [0] =&gt; red\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Two elements are considered equal if and only if\n    (string) $elem1 === (string) $elem2. In words:\n    when the string representation is the same.\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_diff() - Computes the difference of arrays\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-keys.php","title":"array_keys","description":"\n \n  array_keys\n  (PHP 4, PHP 5)array_keys &mdash; Return all the keys or a subset of the keys of an array\n\n \n \n \n  Description\n  \n   array array_keys\n    ( array $input\n   [, mixed $search_value\n   [, bool $strict = false\n  ]] )\n\n  \n   array_keys() returns the keys, numeric and\n   string, from the input array.\n  \n  \n   If the optional search_value is specified,\n   then only the keys for that value are returned. Otherwise, all\n   the keys from the input are returned.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       An array containing keys to return.\n      \n     \n\n    \n\n    \n\n     search_value\n     \n\n      \n       If specified, then only keys containing these values are returned.\n      \n     \n\n    \n\n    \n\n     strict\n     \n\n      \n       Determines if strict comparison (===) should be used during the search.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of all the keys in input.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Added the strict parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 array_keys() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(0&nbsp;=&gt;&nbsp;100,&nbsp;\"color\"&nbsp;=&gt;&nbsp;\"red\");print_r(array_keys($array));$array&nbsp;=&nbsp;array(\"blue\",&nbsp;\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"blue\");print_r(array_keys($array,&nbsp;\"blue\"));$array&nbsp;=&nbsp;array(\"color\"&nbsp;=&gt;&nbsp;array(\"blue\",&nbsp;\"red\",&nbsp;\"green\"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"size\"&nbsp;&nbsp;=&gt;&nbsp;array(\"small\",&nbsp;\"medium\",&nbsp;\"large\"));print_r(array_keys($array));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; 0\n    [1] =&gt; color\n)\nArray\n(\n    [0] =&gt; 0\n    [1] =&gt; 3\n    [2] =&gt; 4\n)\nArray\n(\n    [0] =&gt; color\n    [1] =&gt; size\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_values() - Return all the values of an array\n    array_key_exists() - Checks if the given key or index exists in the array\n    array_search() - Searches the array for a given value and returns the corresponding key if successful\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-key-exists.php","title":"array_key_exists","description":"\n \n  array_key_exists\n  (PHP 4 &gt;= 4.0.7, PHP 5)array_key_exists &mdash; Checks if the given key or index exists in the array\n\n \n \n \n  Description\n  \n   bool array_key_exists\n    ( mixed $key\n   , array $search\n   )\n\n  \n   array_key_exists() returns TRUE if the\n   given key is set in the array.\n   key can be any value possible\n   for an array index.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Value to check.\n      \n     \n\n    \n\n    \n\n     search\n     \n\n      \n       An array with keys to check.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function doesn&#039;t work with objects anymore, \n        property_exists() should be used in this case.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 array_key_exists() example\n    \n\n&lt;?php$search_array&nbsp;=&nbsp;array('first'&nbsp;=&gt;&nbsp;1,&nbsp;'second'&nbsp;=&gt;&nbsp;4);if&nbsp;(array_key_exists('first',&nbsp;$search_array))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;'first'&nbsp;element&nbsp;is&nbsp;in&nbsp;the&nbsp;array\";}?&gt;\n\n\n    \n\n   \n  \n  \n   Example #2 array_key_exists() vs isset()\n   \n    isset() does not return TRUE for array keys\n    that correspond to a NULL value, while\n    array_key_exists() does.\n   \n   \n\n&lt;?php$search_array&nbsp;=&nbsp;array('first'&nbsp;=&gt;&nbsp;null,&nbsp;'second'&nbsp;=&gt;&nbsp;4);\/\/&nbsp;returns&nbsp;falseisset($search_array['first']);\/\/&nbsp;returns&nbsp;truearray_key_exists('first',&nbsp;$search_array);?&gt;\n\n\n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    key_exists()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    isset() - Determine if a variable is set and is not NULL\n    array_keys() - Return all the keys or a subset of the keys of an array\n    in_array() - Checks if a value exists in an array\n    property_exists() - Checks if the object or class has a property\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-merge-recursive.php","title":"array_merge_recursive","description":"\n \n  array_merge_recursive\n  (PHP 4 &gt;= 4.0.1, PHP 5)array_merge_recursive &mdash; Merge two or more arrays recursively\n\n \n \n \n  Description\n  \n   array array_merge_recursive\n    ( array $array1\n   [, array $...\n  ] )\n\n  \n   array_merge_recursive() merges the elements of\n   one or more arrays together so that the values of one are appended\n   to the end of the previous one.  It returns the resulting array.\n  \n  \n   If the input arrays have the same string keys, then the values for\n   these keys are merged together into an array, and this is done\n   recursively, so that if one of the values is an array itself, the\n   function will merge it with a corresponding entry in another array\n   too. If, however, the arrays have the same numeric key, the later\n   value will not overwrite the original value, but will be appended.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       Initial array to merge.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Variable list of arrays to recursively merge.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of values resulted from merging the arguments together.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_merge_recursive() example\n    \n\n&lt;?php$ar1&nbsp;=&nbsp;array(\"color\"&nbsp;=&gt;&nbsp;array(\"favorite\"&nbsp;=&gt;&nbsp;\"red\"),&nbsp;5);$ar2&nbsp;=&nbsp;array(10,&nbsp;\"color\"&nbsp;=&gt;&nbsp;array(\"favorite\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"blue\"));$result&nbsp;=&nbsp;array_merge_recursive($ar1,&nbsp;$ar2);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [color] =&gt; Array\n        (\n            [favorite] =&gt; Array\n                (\n                    [0] =&gt; red\n                    [1] =&gt; green\n                )\n\n            [0] =&gt; blue\n        )\n\n    [0] =&gt; 5\n    [1] =&gt; 10\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_merge() - Merge one or more arrays\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-map.php","title":"array_map","description":"\n \n  array_map\n  (PHP 4 &gt;= 4.0.6, PHP 5)array_map &mdash; Applies the callback to the elements of the given arrays\n\n \n \n \n  Description\n  \n   array array_map\n    ( callback $callback\n   , array $arr1\n   [, array $...\n  ] )\n\n  \n   array_map() returns an array containing all\n   the elements of arr1 after applying the\n   callback function to each one.\n   The number of parameters that the callback\n   function accepts\n   should match the number of arrays\n   passed to the array_map()\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     callback\n     \n\n      \n       Callback function to run for each element in each array.\n      \n     \n\n    \n\n    \n\n     arr1\n     \n\n      \n       An array to run through the callback function.\n      \n     \n\n    \n\n    \n\n     array\n     \n\n      \n       Variable list of array arguments to run through the\n       callback function.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing all the elements of arr1\n   after applying the callback function to each one.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_map() example\n    \n\n&lt;?phpfunction&nbsp;cube($n){&nbsp;&nbsp;&nbsp;&nbsp;return($n&nbsp;*&nbsp;$n&nbsp;*&nbsp;$n);}$a&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5);$b&nbsp;=&nbsp;array_map(\"cube\",&nbsp;$a);print_r($b);?&gt;\n\n\n    \n\n    \n     This makes $b have:\n    \n    \n\nArray\n(\n    [0] =&gt; 1\n    [1] =&gt; 8\n    [2] =&gt; 27\n    [3] =&gt; 64\n    [4] =&gt; 125\n)\n\n    \n   \n  \n  \n   \n    Example #2 array_map() using a lambda function (as of PHP 5.3.0)\n    \n\n&lt;?php$func&nbsp;=&nbsp;function($value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$value&nbsp;*&nbsp;2;};print_r(array_map($func,&nbsp;range(1,&nbsp;5)));?&gt;\n\n\n    \n\n    \n\nArray\n(\n    [0] =&gt; 2\n    [1] =&gt; 4\n    [2] =&gt; 6\n    [3] =&gt; 8\n    [4] =&gt; 10\n)\n\n    \n   \n  \n  \n   \n    Example #3 array_map() - using more arrays\n    \n\n&lt;?phpfunction&nbsp;show_Spanish($n,&nbsp;$m){&nbsp;&nbsp;&nbsp;&nbsp;return(\"The&nbsp;number&nbsp;$n&nbsp;is&nbsp;called&nbsp;$m&nbsp;in&nbsp;Spanish\");}function&nbsp;map_Spanish($n,&nbsp;$m){&nbsp;&nbsp;&nbsp;&nbsp;return(array($n&nbsp;=&gt;&nbsp;$m));}$a&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5);$b&nbsp;=&nbsp;array(\"uno\",&nbsp;\"dos\",&nbsp;\"tres\",&nbsp;\"cuatro\",&nbsp;\"cinco\");$c&nbsp;=&nbsp;array_map(\"show_Spanish\",&nbsp;$a,&nbsp;$b);print_r($c);$d&nbsp;=&nbsp;array_map(\"map_Spanish\",&nbsp;$a&nbsp;,&nbsp;$b);print_r($d);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\/\/ printout of $c\nArray\n(\n    [0] =&gt; The number 1 is called uno in Spanish\n    [1] =&gt; The number 2 is called dos in Spanish\n    [2] =&gt; The number 3 is called tres in Spanish\n    [3] =&gt; The number 4 is called cuatro in Spanish\n    [4] =&gt; The number 5 is called cinco in Spanish\n)\n\n\/\/ printout of $d\nArray\n(\n    [0] =&gt; Array\n        (\n            [1] =&gt; uno\n        )\n\n    [1] =&gt; Array\n        (\n            [2] =&gt; dos\n        )\n\n    [2] =&gt; Array\n        (\n            [3] =&gt; tres\n        )\n\n    [3] =&gt; Array\n        (\n            [4] =&gt; cuatro\n        )\n\n    [4] =&gt; Array\n        (\n            [5] =&gt; cinco\n        )\n\n)\n\n    \n   \n  \n  \n   Usually when using two or more arrays, they should be of equal length\n   because the callback function is applied in parallel to the corresponding\n   elements.\n   If the arrays are of unequal length, the shortest one will be extended\n   with empty elements.\n  \n  \n   An interesting use of this function is to construct an array of arrays,\n   which can be easily performed by using NULL\n   as the name of the callback function\n  \n  \n   \n    Example #4 Creating an array of arrays\n    \n\n&lt;?php$a&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5);$b&nbsp;=&nbsp;array(\"one\",&nbsp;\"two\",&nbsp;\"three\",&nbsp;\"four\",&nbsp;\"five\");$c&nbsp;=&nbsp;array(\"uno\",&nbsp;\"dos\",&nbsp;\"tres\",&nbsp;\"cuatro\",&nbsp;\"cinco\");$d&nbsp;=&nbsp;array_map(null,&nbsp;$a,&nbsp;$b,&nbsp;$c);print_r($d);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; 1\n            [1] =&gt; one\n            [2] =&gt; uno\n        )\n\n    [1] =&gt; Array\n        (\n            [0] =&gt; 2\n            [1] =&gt; two\n            [2] =&gt; dos\n        )\n\n    [2] =&gt; Array\n        (\n            [0] =&gt; 3\n            [1] =&gt; three\n            [2] =&gt; tres\n        )\n\n    [3] =&gt; Array\n        (\n            [0] =&gt; 4\n            [1] =&gt; four\n            [2] =&gt; cuatro\n        )\n\n    [4] =&gt; Array\n        (\n            [0] =&gt; 5\n            [1] =&gt; five\n            [2] =&gt; cinco\n        )\n\n)\n\n    \n   \n  \n  \n   If the array argument contains string keys then the returned array\n   will contain string keys if and only if exactly one array is passed. If \n   more than one argument is passed then the returned array always has \n   integer keys.\n  \n  \n   \n    Example #5 array_map() - with string keys\n    \n\n&lt;?php$arr&nbsp;=&nbsp;array(\"stringkey\"&nbsp;=&gt;&nbsp;\"value\");function&nbsp;cb1($a)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;array&nbsp;($a);}function&nbsp;cb2($a,&nbsp;$b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;array&nbsp;($a,&nbsp;$b);}var_dump(array_map(\"cb1\",&nbsp;$arr));var_dump(array_map(\"cb2\",&nbsp;$arr,&nbsp;$arr));var_dump(array_map(null,&nbsp;&nbsp;$arr));var_dump(array_map(null,&nbsp;$arr,&nbsp;$arr));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(1) {\n  [&quot;stringkey&quot;]=&gt;\n  array(1) {\n    [0]=&gt;\n    string(5) &quot;value&quot;\n  }\n}\narray(1) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(5) &quot;value&quot;\n    [1]=&gt;\n    string(5) &quot;value&quot;\n  }\n}\narray(1) {\n  [&quot;stringkey&quot;]=&gt;\n  string(5) &quot;value&quot;\n}\narray(1) {\n  [0]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(5) &quot;value&quot;\n    [1]=&gt;\n    string(5) &quot;value&quot;\n  }\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_filter() - Filters elements of an array using a callback function\n    array_reduce() - Iteratively reduce the array to a single value using a callback function\n    array_walk() - Apply a user function to every member of an array\n    create_function() - Create an anonymous (lambda-style) function\n    information about the callback type\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-pad.php","title":"array_pad","description":"\n \n  array_pad\n  (PHP 4, PHP 5)array_pad &mdash; Pad array to the specified length with a value\n\n \n \n \n  Description\n  \n   array array_pad\n    ( array $input\n   , int $pad_size\n   , mixed $pad_value\n   )\n\n  \n   array_pad() returns a copy of the\n   input padded to size specified by\n   pad_size with value\n   pad_value. If\n   pad_size is positive then the array is\n   padded on the right, if it&#039;s negative then on the left. If the\n   absolute value of pad_size is less than or\n   equal to the length of the input then no\n   padding takes place.\n   It is possible to add most 1048576 elements at a time.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       Initial array of values to pad.\n      \n     \n\n    \n\n    \n\n     pad_size\n     \n\n      \n       New size of the array.\n      \n     \n\n    \n\n    \n\n     pad_value\n     \n\n      \n       Value to pad if input is less than\n       pad_size.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a copy of the input padded to size specified\n   by pad_size with value \n   pad_value. If pad_size is \n   positive then the array is padded on the right, if it&#039;s negative then \n   on the left. If the absolute value of pad_size is less\n   than or equal to the length of the input then no\n   padding takes place.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_pad() example\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(12,&nbsp;10,&nbsp;9);$result&nbsp;=&nbsp;array_pad($input,&nbsp;5,&nbsp;0);\/\/&nbsp;result&nbsp;is&nbsp;array(12,&nbsp;10,&nbsp;9,&nbsp;0,&nbsp;0)$result&nbsp;=&nbsp;array_pad($input,&nbsp;-7,&nbsp;-1);\/\/&nbsp;result&nbsp;is&nbsp;array(-1,&nbsp;-1,&nbsp;-1,&nbsp;-1,&nbsp;12,&nbsp;10,&nbsp;9)$result&nbsp;=&nbsp;array_pad($input,&nbsp;2,&nbsp;\"noop\");\/\/&nbsp;not&nbsp;padded?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    array_fill() - Fill an array with values\n    range() - Create an array containing a range of elements\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-multisort.php","title":"array_multisort","description":"\n \n  array_multisort\n  (PHP 4, PHP 5)array_multisort &mdash; Sort multiple or multi-dimensional arrays\n\n \n \n  Description\n  \n   bool array_multisort\n    ( array &$arr\n   [, mixed $arg = SORT_ASC\n   [, mixed $arg = SORT_REGULAR\n   [, mixed $...\n  ]]] )\n\n  \n   array_multisort() can be used to sort several\n   arrays at once, or a multi-dimensional array by one or more\n   dimensions.\n  \n  \n   Associative (string) keys will be maintained, but numeric\n   keys will be re-indexed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arr\n     \n\n      \n       An array being sorted.\n      \n     \n\n    \n\n    \n\n     arg\n     \n\n      \n       Optionally another array, or sort options for the\n       previous array argument: \n       SORT_ASC, \n       SORT_DESC, \n       SORT_REGULAR,\n       SORT_NUMERIC,\n       SORT_STRING.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Additional arg&#039;s. \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Sorting multiple arrays\n    \n\n&lt;?php$ar1&nbsp;=&nbsp;array(10,&nbsp;100,&nbsp;100,&nbsp;0);$ar2&nbsp;=&nbsp;array(1,&nbsp;3,&nbsp;2,&nbsp;4);array_multisort($ar1,&nbsp;$ar2);var_dump($ar1);var_dump($ar2);?&gt;\n\n\n    \n\n    \n     In this example, after sorting, the first array will contain 0,\n     10, 100, 100. The second array will contain 4, 1, 2, 3. The\n     entries in the second array corresponding to the identical\n     entries in the first array (100 and 100) were sorted as well.\n    \n    \n\narray(4) {\n  [0]=&gt; int(0)\n  [1]=&gt; int(10)\n  [2]=&gt; int(100)\n  [3]=&gt; int(100)\n}\narray(4) {\n  [0]=&gt; int(4)\n  [1]=&gt; int(1)\n  [2]=&gt; int(2)\n  [3]=&gt; int(3)\n}\n\n    \n   \n  \n  \n   \n    Example #2 Sorting multi-dimensional array\n    \n\n&lt;?php$ar&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(\"10\",&nbsp;11,&nbsp;100,&nbsp;100,&nbsp;\"a\"),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;1,&nbsp;&nbsp;2,&nbsp;\"2\",&nbsp;&nbsp;&nbsp;3,&nbsp;&nbsp;&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);array_multisort($ar[0],&nbsp;SORT_ASC,&nbsp;SORT_STRING,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ar[1],&nbsp;SORT_NUMERIC,&nbsp;SORT_DESC);var_dump($ar);?&gt;\n\n\n    \n\n    \n     In this example, after sorting, the first array will transform to\n     &quot;10&quot;, 100, 100, 11, &quot;a&quot; (it was sorted as strings in ascending\n     order). The second will contain 1, 3, &quot;2&quot;, 2, 1 (sorted as numbers,\n     in descending order).\n    \n    \n\narray(2) {\n  [0]=&gt; array(5) {\n    [0]=&gt; string(2) &quot;10&quot;\n    [1]=&gt; int(100)\n    [2]=&gt; int(100)\n    [3]=&gt; int(11)\n    [4]=&gt; string(1) &quot;a&quot;\n  }\n  [1]=&gt; array(5) {\n    [0]=&gt; int(1)\n    [1]=&gt; int(3)\n    [2]=&gt; string(1) &quot;2&quot;\n    [3]=&gt; int(2)\n    [4]=&gt; int(1)\n  }\n}\n\n    \n   \n  \n  \n   \n    Example #3 Sorting database results\n    \n     For this example, each element in the data\n     array represents one row in a table. This type of dataset is typical\n     of database records.\n    \n    \n     Example data:\n    \n    \n\nvolume | edition\n-------+--------\n    67 |       2\n    86 |       1\n    85 |       6\n    98 |       2\n    86 |       6\n    67 |       7\n\n    \n    \n     The data as an array, called data. This would usually,\n     for example, be obtained by looping with mysql_fetch_assoc().\n    \n    \n\n&lt;?php$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;67,&nbsp;'edition'&nbsp;=&gt;&nbsp;2);$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;86,&nbsp;'edition'&nbsp;=&gt;&nbsp;1);$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;85,&nbsp;'edition'&nbsp;=&gt;&nbsp;6);$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;98,&nbsp;'edition'&nbsp;=&gt;&nbsp;2);$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;86,&nbsp;'edition'&nbsp;=&gt;&nbsp;6);$data[]&nbsp;=&nbsp;array('volume'&nbsp;=&gt;&nbsp;67,&nbsp;'edition'&nbsp;=&gt;&nbsp;7);?&gt;\n\n\n    \n\n    \n     In this example, we will order by volume descending,\n     edition ascending.\n    \n    \n     We have an array of rows, but array_multisort()\n     requires an array of columns, so we use the below code to obtain the\n     columns, then perform the sorting.\n    \n    \n\n&lt;?php\/\/&nbsp;Obtain&nbsp;a&nbsp;list&nbsp;of&nbsp;columnsforeach&nbsp;($data&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$row)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$volume[$key]&nbsp;&nbsp;=&nbsp;$row['volume'];&nbsp;&nbsp;&nbsp;&nbsp;$edition[$key]&nbsp;=&nbsp;$row['edition'];}\/\/&nbsp;Sort&nbsp;the&nbsp;data&nbsp;with&nbsp;volume&nbsp;descending,&nbsp;edition&nbsp;ascending\/\/&nbsp;Add&nbsp;$data&nbsp;as&nbsp;the&nbsp;last&nbsp;parameter,&nbsp;to&nbsp;sort&nbsp;by&nbsp;the&nbsp;common&nbsp;keyarray_multisort($volume,&nbsp;SORT_DESC,&nbsp;$edition,&nbsp;SORT_ASC,&nbsp;$data);?&gt;\n\n\n    \n\n    \n     The dataset is now sorted, and will look like this:\n    \n    \n\nvolume | edition\n-------+--------\n    98 |       2\n    86 |       1\n    86 |       6\n    85 |       6\n    67 |       2\n    67 |       7\n\n    \n   \n  \n  \n   \n    Example #4 Case insensitive sorting\n    \n     Both SORT_STRING and\n     SORT_REGULAR are case sensitive, strings\n     starting with a capital letter will come before strings starting\n     with a lowercase letter.\n    \n    \n     To perform a case insensitive search, force the sorting order to be\n     determined by a lowercase copy of the original array.\n    \n    \n\n&lt;?php$array&nbsp;=&nbsp;array('Alpha',&nbsp;'atomic',&nbsp;'Beta',&nbsp;'bank');$array_lowercase&nbsp;=&nbsp;array_map('strtolower',&nbsp;$array);array_multisort($array_lowercase,&nbsp;SORT_ASC,&nbsp;SORT_STRING,&nbsp;$array);print_r($array);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Alpha\n    [1] =&gt; atomic\n    [2] =&gt; bank\n    [3] =&gt; Beta\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    usort() - Sort an array by values using a user-defined comparison function\n    The comparison of array sorting functions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-pop.php","title":"array_pop","description":"\n \n  array_pop\n  (PHP 4, PHP 5)array_pop &mdash; Pop the element off the end of array\n\n \n \n \n  Description\n  \n   mixed array_pop\n    ( array &$array\n   )\n\n  \n   array_pop() pops and returns the last value of\n   the array, shortening the\n   array by one element.\n   If array is empty (or is not an array),\n   NULL will be returned. Will additionally produce a\n   Warning\n   when called on a non-array.\n  \n  Note: This function will\nreset() the array pointer of the input array after\nuse.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array to get the value from.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the last value of array.\n   If array is empty (or is not an array),\n   NULL will be returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_pop() example\n    \n\n&lt;?php$stack&nbsp;=&nbsp;array(\"orange\",&nbsp;\"banana\",&nbsp;\"apple\",&nbsp;\"raspberry\");$fruit&nbsp;=&nbsp;array_pop($stack);print_r($stack);?&gt;\n\n\n    \n\n    \n     After this, $stack will have only 3 elements:\n    \n    \n\nArray\n(\n    [0] =&gt; orange\n    [1] =&gt; banana\n    [2] =&gt; apple\n)\n\n    \n    \n     and raspberry will be assigned to\n     $fruit.\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    array_push() - Push one or more elements onto the end of array\n    array_shift() - Shift an element off the beginning of array\n    array_unshift() - Prepend one or more elements to the beginning of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-product.php","title":"array_product","description":"\n \n  array_product\n  (PHP 5 &gt;= 5.1.0)array_product &mdash; Calculate the product of values in an array\n\n \n \n  Description\n  \n   number array_product\n    ( array $array\n   )\n\n  \n   array_product() returns the product of values\n   in an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the product as an integer or float.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_product() examples\n    \n\n&lt;?php$a&nbsp;=&nbsp;array(2,&nbsp;4,&nbsp;6,&nbsp;8);echo&nbsp;\"product(a)&nbsp;=&nbsp;\"&nbsp;.&nbsp;array_product($a)&nbsp;.&nbsp;\"\\n\";echo&nbsp;\"product(array())&nbsp;=&nbsp;\"&nbsp;.&nbsp;array_product(array())&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nproduct(a) = 384\nproduct(array()) = 1\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-merge.php","title":"array_merge","description":"\n \n  array_merge\n  (PHP 4, PHP 5)array_merge &mdash; Merge one or more arrays\n\n \n \n  Description\n  \n   array array_merge\n    ( array $array1\n   [, array $...\n  ] )\n\n  \n   Merges the elements of one or more arrays together so that the values of\n   one are appended to the end of the previous one. It returns the resulting\n   array.\n  \n  \n   If the input arrays have the same string keys, then the later value for\n   that key will overwrite the previous one.  If, however, the arrays\n   contain numeric keys, the later value will not overwrite the original value, but will be\n   appended.\n  \n  \n   Values in the input array with numeric keys will be renumbered with\n   incrementing keys starting from zero in the result array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       Initial array to merge.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Variable list of arrays to merge.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the resulting array.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Warning\n         \n          The behavior of array_merge() was modified in PHP 5. Unlike PHP 4, array_merge()\n          now only accepts parameters of type array. However, you can use typecasting\n          to merge other types. See the example below for details.\n         \n         \n          \n           Example #1 array_merge() PHP 5 example\n           \n\n&lt;?php$beginning&nbsp;=&nbsp;'foo';$end&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;'bar');$result&nbsp;=&nbsp;array_merge((array)$beginning,&nbsp;(array)$end);print_r($result);?&gt;\n\n\n           \n\n           The above example will output:\n           \n    \n    Array\n    (\n        [0] =&gt; foo\n        [1] =&gt; bar\n    )\n\n           \n          \n         \n        \n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #2 array_merge() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"color\"&nbsp;=&gt;&nbsp;\"red\",&nbsp;2,&nbsp;4);$array2&nbsp;=&nbsp;array(\"a\",&nbsp;\"b\",&nbsp;\"color\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"shape\"&nbsp;=&gt;&nbsp;\"trapezoid\",&nbsp;4);$result&nbsp;=&nbsp;array_merge($array1,&nbsp;$array2);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [color] =&gt; green\n    [0] =&gt; 2\n    [1] =&gt; 4\n    [2] =&gt; a\n    [3] =&gt; b\n    [shape] =&gt; trapezoid\n    [4] =&gt; 4\n)\n\n    \n   \n  \n  \n   \n    Example #3 Simple array_merge() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array();$array2&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;\"data\");$result&nbsp;=&nbsp;array_merge($array1,&nbsp;$array2);?&gt;\n\n\n    \n\n    \n     Don&#039;t forget that numeric keys will be renumbered!\n    \n    \n\nArray\n(\n    [0] =&gt; data\n)\n\n    \n    \n     If you want to append array elements from the second array to the\n     first array while not overwriting the elements from the first\n     array and not re-indexing, use the\n     + array union operator:\n    \n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(0&nbsp;=&gt;&nbsp;'zero_a',&nbsp;2&nbsp;=&gt;&nbsp;'two_a',&nbsp;3&nbsp;=&gt;&nbsp;'three_a');$array2&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;'one_b',&nbsp;3&nbsp;=&gt;&nbsp;'three_b',&nbsp;4&nbsp;=&gt;&nbsp;'four_b');$result&nbsp;=&nbsp;$array1&nbsp;+&nbsp;$array2;var_dump($result);?&gt;\n\n\n    \n\n    \n     The keys from the first array will be preserved. If an array key\n     exists in both arrays, then the element from the first array will\n     be used and the matching key&#039;s element from the second array will\n     be ignored.\n    \n    \n\narray(5) {\n  [0]=&gt;\n  string(6) &quot;zero_a&quot;\n  [2]=&gt;\n  string(5) &quot;two_a&quot;\n  [3]=&gt;\n  string(7) &quot;three_a&quot;\n  [1]=&gt;\n  string(5) &quot;one_b&quot;\n  [4]=&gt;\n  string(6) &quot;four_b&quot;\n}\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_merge_recursive() - Merge two or more arrays recursively\n    array_combine() - Creates an array by using one array for keys and another for its values\n    array operators\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-push.php","title":"array_push","description":"\n \n  array_push\n  (PHP 4, PHP 5)array_push &mdash; Push one or more elements onto the end of array\n\n \n \n  Description\n  \n   int array_push\n    ( array &$array\n   , mixed $var\n   [, mixed $...\n  ] )\n\n  \n   array_push() treats array as a\n   stack, and pushes the passed variables onto the end of\n   array. The length of array\n   increases by the number of variables pushed. Has the same effect as:\n   \n\n&lt;?php$array[]&nbsp;=&nbsp;$var;?&gt;\n\n\n   \n\n   repeated for each var.\n  \n  Note: \n   \n    If you use array_push() to add one element to the\n    array it&#039;s better to use $array[] =  because in that\n    way there is no overhead of calling a function.\n   \n  \n  Note: \n   \n    array_push() will raise a warning if the first\n    argument is not an array. This differs from the\n    $var[] behaviour where a new array is created.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     var\n     \n\n      \n       The pushed value.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the new number of elements in the array.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_push() example\n    \n\n&lt;?php$stack&nbsp;=&nbsp;array(\"orange\",&nbsp;\"banana\");array_push($stack,&nbsp;\"apple\",&nbsp;\"raspberry\");print_r($stack);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; orange\n    [1] =&gt; banana\n    [2] =&gt; apple\n    [3] =&gt; raspberry\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_pop() - Pop the element off the end of array\n    array_shift() - Shift an element off the beginning of array\n    array_unshift() - Prepend one or more elements to the beginning of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-reduce.php","title":"array_reduce","description":"\n \n  array_reduce\n  (PHP 4 &gt;= 4.0.5, PHP 5)array_reduce &mdash; Iteratively reduce the array to a single value using a callback function\n\n \n \n  Description\n  \n   mixed array_reduce\n    ( array $input\n   , callback $function\n   [, mixed $initial = NULL\n  ] )\n\n  \n   array_reduce() applies iteratively the\n   function function to the elements of the\n   array input, so as to reduce the array to\n   a single value.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     function\n     \n\n      \n       The callback function.\n      \n     \n\n    \n\n    \n\n     initial\n     \n\n      \n       If the optional initial is available, it will\n       be used at the beginning of the process, or as a final result in case\n       the array is empty.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the resulting value.\n  \n  \n   If the array is empty and initial is not passed,\n   array_reduce() returns NULL.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Changed initial to allow mixed, previously integer.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_reduce() example\n    \n\n&lt;?phpfunction&nbsp;rsum($v,&nbsp;$w){&nbsp;&nbsp;&nbsp;&nbsp;$v&nbsp;+=&nbsp;$w;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$v;}function&nbsp;rmul($v,&nbsp;$w){&nbsp;&nbsp;&nbsp;&nbsp;$v&nbsp;*=&nbsp;$w;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$v;}$a&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5);$x&nbsp;=&nbsp;array();$b&nbsp;=&nbsp;array_reduce($a,&nbsp;\"rsum\");$c&nbsp;=&nbsp;array_reduce($a,&nbsp;\"rmul\",&nbsp;10);$d&nbsp;=&nbsp;array_reduce($x,&nbsp;\"rsum\",&nbsp;\"No&nbsp;data&nbsp;to&nbsp;reduce\");?&gt;\n\n\n    \n\n    \n     This will result in $b containing\n     15, $c containing\n     1200 (= 10*1*2*3*4*5), and $d\n     containing No data to reduce.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_filter() - Filters elements of an array using a callback function\n    array_map() - Applies the callback to the elements of the given arrays\n    array_unique() - Removes duplicate values from an array\n    array_count_values() - Counts all the values of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-replace-recursive.php","title":"array_replace_recursive","description":"\n \n  array_replace_recursive\n  (PHP 5 &gt;= 5.3.0)array_replace_recursive &mdash; Replaces elements from passed arrays into the first array recursively\n\n \n \n  Description\n  \n   array array_replace_recursive\n    ( array &$array\n   , array &$array1\n   [, array &$...\n  ] )\n\n  \n   array_replace_recursive() replaces the values of the first\n   array with the same values from all the following\n   arrays. If a key from the first array exists in the second array, its value\n   will be replaced by the value from the second array. If the key exists in the\n   second array, and not the first, it will be created in the first array.\n   If a key only exists in the first array, it will be left as is. \n   If several arrays are passed for replacement, they will be processed\n   in order, the later array overwriting the previous values.\n  \n  \n   array_replace_recursive() is recursive : it will recurse into\n   arrays and apply the same process to the inner value.\n  \n  \n   When the value in array is scalar, it will be replaced\n   by the value in array1, may it be scalar or array.\n   When the value in array and array1\n   are both arrays, array_replace_recursive() will replace\n   their respective value recursively.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array in which elements are replaced.\n      \n     \n\n    \n\n    \n\n     array1\n     \n\n      \n       The array from which elements will be extracted.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Optional. More arrays from which elements will be extracted.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array, or NULL if an error occurs.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_replace_recursive() example\n    \n\n&lt;?php$base&nbsp;=&nbsp;array('citrus'&nbsp;=&gt;&nbsp;array(&nbsp;\"orange\")&nbsp;,&nbsp;'berries'&nbsp;=&gt;&nbsp;array(\"blackberry\",&nbsp;\"raspberry\"),&nbsp;);$replacements&nbsp;=&nbsp;array('citrus'&nbsp;=&gt;&nbsp;array('pineapple'),&nbsp;'berries'&nbsp;=&gt;&nbsp;array('blueberry'));$basket&nbsp;=&nbsp;array_replace_recursive($base,&nbsp;$replacements);print_r($basket);$basket&nbsp;=&nbsp;array_replace($base,&nbsp;$replacements);print_r($basket);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [citrus] =&gt; Array\n        (\n            [0] =&gt; pineapple\n        )\n\n    [berries] =&gt; Array\n        (\n            [0] =&gt; blueberry\n            [1] =&gt; raspberry\n        )\n\n)\nArray\n(\n    [citrus] =&gt; Array\n        (\n            [0] =&gt; pineapple\n        )\n\n    [berries] =&gt; Array\n        (\n            [0] =&gt; blueberry\n        )\n\n)\n\n\n    \n   \n   \n    Example #2 array_replace_recursive() and recursive behavior\n    \n\n&lt;?php$base&nbsp;=&nbsp;array('citrus'&nbsp;=&gt;&nbsp;array(\"orange\")&nbsp;,&nbsp;'berries'&nbsp;=&gt;&nbsp;array(\"blackberry\",&nbsp;\"raspberry\"),&nbsp;'others'&nbsp;=&gt;&nbsp;'banana'&nbsp;);$replacements&nbsp;=&nbsp;array('citrus'&nbsp;=&gt;&nbsp;'pineapple',&nbsp;'berries'&nbsp;=&gt;&nbsp;array('blueberry'),&nbsp;'others'&nbsp;=&gt;&nbsp;array('litchis'));$replacements2&nbsp;=&nbsp;array('citrus'&nbsp;=&gt;&nbsp;array('pineapple'),&nbsp;'berries'&nbsp;=&gt;&nbsp;array('blueberry'),&nbsp;'others'&nbsp;=&gt;&nbsp;'litchis');$basket&nbsp;=&nbsp;array_replace_recursive($base,&nbsp;$replacements,&nbsp;$replacements2);print_r($basket);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [citrus] =&gt; Array\n        (\n            [0] =&gt; pineapple\n        )\n\n    [berries] =&gt; Array\n        (\n            [0] =&gt; blueberry\n            [1] =&gt; raspberry\n        )\n\n    [others] =&gt; litchis\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_replace() - Replaces elements from passed arrays into the first array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-replace.php","title":"array_replace","description":"\n \n  array_replace\n  (PHP 5 &gt;= 5.3.0)array_replace &mdash; Replaces elements from passed arrays into the first array\n\n \n \n  Description\n  \n   array array_replace\n    ( array &$array\n   , array &$array1\n   [, array &$...\n  ] )\n\n  \n   array_replace() replaces the values of the first\n   array with the same values from all the following\n   arrays. If a key from the first array exists in the second array, its value\n   will be replaced by the value from the second array. If the key exists in the\n   second array, and not the first, it will be created in the first array.\n   If a key only exists in the first array, it will be left as is.\n   If several arrays are passed for replacement, they will be processed\n   in order, the later arrays overwriting the previous values.\n  \n  \n   array_replace() is not recursive : it will replace\n   values in the first array by whatever type is in the second array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array in which elements are replaced.\n      \n     \n\n    \n\n    \n\n     array1\n     \n\n      \n       The array from which elements will be extracted.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       More arrays from which elements will be extracted.\n       Values from later arrays overwrite the previous values.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array, or NULL if an error occurs.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_replace() example\n    \n\n&lt;?php$base&nbsp;=&nbsp;array(\"orange\",&nbsp;\"banana\",&nbsp;\"apple\",&nbsp;\"raspberry\");$replacements&nbsp;=&nbsp;array(0&nbsp;=&gt;&nbsp;\"pineapple\",&nbsp;4&nbsp;=&gt;&nbsp;\"cherry\");$replacements2&nbsp;=&nbsp;array(0&nbsp;=&gt;&nbsp;\"grape\");$basket&nbsp;=&nbsp;array_replace($base,&nbsp;$replacements,&nbsp;$replacements2);print_r($basket);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; grape\n    [1] =&gt; banana\n    [2] =&gt; apple\n    [3] =&gt; raspberry\n    [4] =&gt; cherry\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_replace_recursive() - Replaces elements from passed arrays into the first array recursively\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-rand.php","title":"array_rand","description":"\n \n  array_rand\n  (PHP 4, PHP 5)array_rand &mdash; Pick one or more random entries out of an array\n\n \n \n  Description\n  \n   mixed array_rand\n    ( array $input\n   [, int $num_req = 1\n  ] )\n\n  \n   Picks one or more random entries out of an array, and returns the\n   key (or keys) of the random entries.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     num_req\n     \n\n      \n       Specifies how many entries you want to pick. Trying to pick more\n       elements than there are in the array will result in an\n       E_WARNING level error.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If you are picking only one entry, array_rand()\n   returns the key for a random entry. Otherwise, it returns an array\n   of keys for the random entries. This is done so that you can pick\n   random keys as well as values out of the array.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.10\n       \n        The resulting array of keys is no longer shuffled.\n       \n      \n\n      4.2.0The random\nnumber generator is seeded automatically.\n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_rand() example\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(\"Neo\",&nbsp;\"Morpheus\",&nbsp;\"Trinity\",&nbsp;\"Cypher\",&nbsp;\"Tank\");$rand_keys&nbsp;=&nbsp;array_rand($input,&nbsp;2);echo&nbsp;$input[$rand_keys[0]]&nbsp;.&nbsp;\"\\n\";echo&nbsp;$input[$rand_keys[1]]&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    shuffle() - Shuffle an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-reverse.php","title":"array_reverse","description":"\n \n  array_reverse\n  (PHP 4, PHP 5)array_reverse &mdash; Return an array with elements in reverse order\n\n \n \n  Description\n  \n   array array_reverse\n    ( array $array\n   [, bool $preserve_keys = false\n  ] )\n\n  \n   Takes an input array and returns a new array with\n   the order of the elements reversed.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     preserve_keys\n     \n\n      \n       If set to TRUE numeric keys are preserved. \n       Non-numeric keys are not affected by this setting and will always be preserved.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the reversed array.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.3\n       \n        The preserve_keys parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_reverse() example\n    \n\n&lt;?php$input&nbsp;&nbsp;=&nbsp;array(\"php\",&nbsp;4.0,&nbsp;array(\"green\",&nbsp;\"red\"));$result&nbsp;=&nbsp;array_reverse($input);$result_keyed&nbsp;=&nbsp;array_reverse($input,&nbsp;true);?&gt;\n\n\n    \n\n    \n     This makes both $result and\n     $result_keyed have the same elements, but\n     note the difference between the keys. The printout of\n     $result and\n     $result_keyed will be:\n    \n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; green\n            [1] =&gt; red\n        )\n\n    [1] =&gt; 4\n    [2] =&gt; php\n)\nArray\n(\n    [2] =&gt; Array\n        (\n            [0] =&gt; green\n            [1] =&gt; red\n        )\n\n    [1] =&gt; 4\n    [0] =&gt; php\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_flip() - Exchanges all keys with their associated values in an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-shift.php","title":"array_shift","description":"\n \n  array_shift\n  (PHP 4, PHP 5)array_shift &mdash; Shift an element off the beginning of array\n\n \n \n  Description\n  \n   mixed array_shift\n    ( array &$array\n   )\n\n  \n   array_shift() shifts the first value of the\n   array off and returns it, shortening the\n   array by one element and moving everything\n   down. All numerical array keys will be modified to start counting from zero\n   while literal keys won&#039;t be touched.\n  \n  Note: This function will\nreset() the array pointer of the input array after\nuse.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the shifted value, or NULL if array is\n   empty or is not an array.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_shift() example\n    \n\n&lt;?php$stack&nbsp;=&nbsp;array(\"orange\",&nbsp;\"banana\",&nbsp;\"apple\",&nbsp;\"raspberry\");$fruit&nbsp;=&nbsp;array_shift($stack);print_r($stack);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; banana\n    [1] =&gt; apple\n    [2] =&gt; raspberry\n)\n\n    \n    \n     and orange will be assigned to\n     $fruit.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_unshift() - Prepend one or more elements to the beginning of an array\n    array_push() - Push one or more elements onto the end of array\n    array_pop() - Pop the element off the end of array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-slice.php","title":"array_slice","description":"\n \n  array_slice\n  (PHP 4, PHP 5)array_slice &mdash; Extract a slice of the array\n\n \n \n  Description\n  \n   array array_slice\n    ( array $array\n   , int $offset\n   [, int $length\n   [, bool $preserve_keys = false\n  ]] )\n\n  \n   array_slice() returns the sequence of elements\n   from the array array as specified by the\n   offset and length\n   parameters.\n  \n  Note: This function will\nreset() the array pointer of the input array after\nuse.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       If offset is non-negative, the sequence will\n       start at that offset in the array.  If\n       offset is negative, the sequence will\n       start that far from the end of the array.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If length is given and is positive, then\n       the sequence will have up to that many elements in it. If the array\n       is shorter than the length, then only the\n       available array elements will be present. If\n       length is given and is negative then the\n       sequence will stop that many elements from the end of the\n       array. If it is omitted, then the sequence will have everything\n       from offset up until the end of the\n       array.\n      \n     \n\n    \n\n    \n\n     preserve_keys\n     \n\n      \n       Note that array_slice() will reorder and reset the\n       array indices by default. You can change this behaviour by setting\n       preserve_keys to TRUE.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the slice.\n  \n \n\n  \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.2\n       \n        The optional preserve_keys parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_slice() examples\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(\"a\",&nbsp;\"b\",&nbsp;\"c\",&nbsp;\"d\",&nbsp;\"e\");$output&nbsp;=&nbsp;array_slice($input,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"c\",&nbsp;\"d\",&nbsp;and&nbsp;\"e\"$output&nbsp;=&nbsp;array_slice($input,&nbsp;-2,&nbsp;1);&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"d\"$output&nbsp;=&nbsp;array_slice($input,&nbsp;0,&nbsp;3);&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"a\",&nbsp;\"b\",&nbsp;and&nbsp;\"c\"\/\/&nbsp;note&nbsp;the&nbsp;differences&nbsp;in&nbsp;the&nbsp;array&nbsp;keysprint_r(array_slice($input,&nbsp;2,&nbsp;-1));print_r(array_slice($input,&nbsp;2,&nbsp;-1,&nbsp;true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; c\n    [1] =&gt; d\n)\nArray\n(\n    [2] =&gt; c\n    [3] =&gt; d\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_splice() - Remove a portion of the array and replace it with something else\n    unset() - Unset a given variable\n    array_chunk() - Split an array into chunks\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-search.php","title":"array_search","description":"\n \n  array_search\n  (PHP 4 &gt;= 4.0.5, PHP 5)array_search &mdash; Searches the array for a given value and returns the corresponding key if successful\n\n \n \n  Description\n  \n   mixed array_search\n    ( mixed $needle\n   , array $haystack\n   [, bool $strict = false\n  ] )\n\n  \n   Searches haystack for needle.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     needle\n     \n\n      \n       The searched value.\n      \n      Note: \n       \n        If needle is a string, the comparison is done\n        in a case-sensitive manner.\n       \n      \n     \n\n    \n\n    \n\n     haystack\n     \n\n      \n       The array.\n      \n     \n\n    \n\n    \n\n     strict\n     \n\n      \n       If the third parameter strict is set to TRUE\n       then the array_search() function will search for\n       identical elements in the\n       haystack. This means it will also check the\n       types of the\n       needle in the haystack,\n       and objects must be the same instance.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the key for needle if it is found in the\n   array, FALSE otherwise.\n  \n  \n   If needle is found in haystack\n   more than once, the first matching key is returned. To return the keys for\n   all matching values, use array_keys() with the optional\n   search_value parameter instead.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        Prior to PHP 4.2.0, array_search() returns NULL\n        on failure instead of FALSE.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_search() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(0&nbsp;=&gt;&nbsp;'blue',&nbsp;1&nbsp;=&gt;&nbsp;'red',&nbsp;2&nbsp;=&gt;&nbsp;'green',&nbsp;3&nbsp;=&gt;&nbsp;'red');$key&nbsp;=&nbsp;array_search('green',&nbsp;$array);&nbsp;\/\/&nbsp;$key&nbsp;=&nbsp;2;$key&nbsp;=&nbsp;array_search('red',&nbsp;$array);&nbsp;&nbsp;&nbsp;\/\/&nbsp;$key&nbsp;=&nbsp;1;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    array_keys() - Return all the keys or a subset of the keys of an array\n    array_values() - Return all the values of an array\n    array_key_exists() - Checks if the given key or index exists in the array\n    in_array() - Checks if a value exists in an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff-assoc.php","title":"array_udiff_assoc","description":"\n \n  array_udiff_assoc\n  (PHP 5)array_udiff_assoc &mdash; Computes the difference of arrays with additional index check, compares data by a callback function\n\n \n \n  Description\n  \n   array array_udiff_assoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   )\n\n  \n   Computes the difference of arrays with additional index check, compares\n   data by a callback function.\n  \n  Note: \n   \n    Please note that this function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using, for example,\n    array_udiff_assoc($array1[0], $array2[0], &quot;some_comparison_func&quot;);.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       The callback comparison function.\n      \n      \n       The user supplied callback function is used for comparison.\n       It must return an integer less than, equal to, or greater than zero if\n       the first argument is considered to be respectively less than, equal\n       to, or greater than the second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   array_udiff_assoc() returns an array\n   containing all the values from array1\n   that are not present in any of the other arguments.\n   Note that the keys are used in the comparison unlike\n   array_diff() and array_udiff().\n   The comparison of arrays&#039; data is performed by using an user-supplied\n   callback. In this aspect the behaviour is opposite to the behaviour of\n   array_diff_assoc() which uses internal function for\n   comparison.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_udiff_assoc() example\n    \n\n&lt;?phpclass&nbsp;cr&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$priv_member;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;cr($val)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;priv_member&nbsp;=&nbsp;$val;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;comp_func_cr($a,&nbsp;$b)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a-&gt;priv_member&nbsp;===&nbsp;$b-&gt;priv_member)&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a-&gt;priv_member&nbsp;&gt;&nbsp;$b-&gt;priv_member)?&nbsp;1:-1;&nbsp;&nbsp;&nbsp;&nbsp;}}$a&nbsp;=&nbsp;array(\"0.1\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(12),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(23),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$b&nbsp;=&nbsp;array(\"0.2\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(22),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(3),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$result&nbsp;=&nbsp;array_udiff_assoc($a,&nbsp;$b,&nbsp;array(\"cr\",&nbsp;\"comp_func_cr\"));print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0.1] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 9\n        )\n\n    [0.5] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 12\n        )\n\n    [0] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 23\n        )\n)\n\n    \n   \n  \n  \n   In our example above you see the &quot;1&quot; =&gt; new cr(4)\n   pair is present in both arrays and thus it is not in the output from the\n   function.\n  \n \n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-sum.php","title":"array_sum","description":"\n \n  array_sum\n  (PHP 4 &gt;= 4.0.4, PHP 5)array_sum &mdash; Calculate the sum of values in an array\n\n \n \n  Description\n  \n   number array_sum\n    ( array $array\n   )\n\n  \n   array_sum() returns the sum of values in an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the sum of values as an integer or float.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.1\n       \n        PHP versions prior to 4.2.1 modified the passed array itself and\n        converted strings to numbers (which most of the time converted them\n        to zero, depending on their value).\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_sum() examples\n    \n\n&lt;?php$a&nbsp;=&nbsp;array(2,&nbsp;4,&nbsp;6,&nbsp;8);echo&nbsp;\"sum(a)&nbsp;=&nbsp;\"&nbsp;.&nbsp;array_sum($a)&nbsp;.&nbsp;\"\\n\";$b&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;1.2,&nbsp;\"b\"&nbsp;=&gt;&nbsp;2.3,&nbsp;\"c\"&nbsp;=&gt;&nbsp;3.4);echo&nbsp;\"sum(b)&nbsp;=&nbsp;\"&nbsp;.&nbsp;array_sum($b)&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nsum(a) = 20\nsum(b) = 6.9\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-splice.php","title":"array_splice","description":"\n \n  array_splice\n  (PHP 4, PHP 5)array_splice &mdash; Remove a portion of the array and replace it with something else\n\n \n \n  Description\n  \n   array array_splice\n    ( array &$input\n   , int $offset\n   [, int $length = 0\n   [, mixed $replacement\n  ]] )\n\n  \n   Removes the elements designated by offset and\n   length from the input array,\n   and replaces them with the elements of the\n   replacement array, if supplied.\n  \n  \n   Note that numeric keys in input are not preserved.\n  \n  Note: \n   \n    If replacement is not an array, it will be\n    typecast\n    to one (i.e. (array) $parameter). This may result in unexpected\n    behavior when using an object or NULL replacement.\n   \n  \n \n\n  \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       If offset is positive then the start of removed\n       portion is at that offset from the beginning of the\n       input array.  If offset\n       is negative then it starts that far from the end of the\n       input array.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If length is omitted, removes everything\n       from offset to the end of the array.  If\n       length is specified and is positive, then\n       that many elements will be removed. If\n       length is specified and is negative then\n       the end of the removed portion will be that many elements from\n       the end of the array.  Tip: to remove everything from\n       offset to the end of the array when\n       replacement is also specified, use\n       count($input) for\n       length.\n      \n     \n\n    \n\n    \n\n     replacement\n     \n\n      \n       If replacement array is specified, then the\n       removed elements are replaced with elements from this array.\n      \n      \n       If offset and length\n       are such that nothing is removed, then the elements from the\n       replacement array are inserted in the place\n       specified by the offset. Note that keys in\n       replacement array are not preserved.\n      \n      \n       If replacement is just one element it is\n       not necessary to put array()\n       around it, unless the element is an array itself, an object or NULL.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the array consisting of the extracted elements.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_splice() examples\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"yellow\");array_splice($input,&nbsp;2);\/\/&nbsp;$input&nbsp;is&nbsp;now&nbsp;array(\"red\",&nbsp;\"green\")$input&nbsp;=&nbsp;array(\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"yellow\");array_splice($input,&nbsp;1,&nbsp;-1);\/\/&nbsp;$input&nbsp;is&nbsp;now&nbsp;array(\"red\",&nbsp;\"yellow\")$input&nbsp;=&nbsp;array(\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"yellow\");array_splice($input,&nbsp;1,&nbsp;count($input),&nbsp;\"orange\");\/\/&nbsp;$input&nbsp;is&nbsp;now&nbsp;array(\"red\",&nbsp;\"orange\")$input&nbsp;=&nbsp;array(\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"yellow\");array_splice($input,&nbsp;-1,&nbsp;1,&nbsp;array(\"black\",&nbsp;\"maroon\"));\/\/&nbsp;$input&nbsp;is&nbsp;now&nbsp;array(\"red\",&nbsp;\"green\",\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"blue\",&nbsp;\"black\",&nbsp;\"maroon\")$input&nbsp;=&nbsp;array(\"red\",&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"yellow\");array_splice($input,&nbsp;3,&nbsp;0,&nbsp;\"purple\");\/\/&nbsp;$input&nbsp;is&nbsp;now&nbsp;array(\"red\",&nbsp;\"green\",\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"blue\",&nbsp;\"purple\",&nbsp;\"yellow\");?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 array_splice() examples\n    \n     The following statements change the values of $input\n     the same way:\n    \n    \n\n&lt;?phparray_push($input,&nbsp;$x,&nbsp;$y);array_splice($input,&nbsp;count($input),&nbsp;0,&nbsp;array($x,&nbsp;$y));array_pop($input);array_splice($input,&nbsp;-1);array_shift($input);array_splice($input,&nbsp;0,&nbsp;1);array_unshift($input,&nbsp;$x,&nbsp;$y);array_splice($input,&nbsp;0,&nbsp;0,&nbsp;array($x,&nbsp;$y));$input[$x]&nbsp;=&nbsp;$y;&nbsp;\/\/&nbsp;for&nbsp;arrays&nbsp;where&nbsp;key&nbsp;equals&nbsp;offsetarray_splice($input,&nbsp;$x,&nbsp;1,&nbsp;$y);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    array_slice() - Extract a slice of the array\n    unset() - Unset a given variable\n    array_merge() - Merge one or more arrays\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff-uassoc.php","title":"array_udiff_uassoc","description":"\n \n  array_udiff_uassoc\n  (PHP 5)array_udiff_uassoc &mdash; Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n\n \n \n  Description\n  \n   array array_udiff_uassoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   , callback $key_compare_func\n   )\n\n  \n   Computes the difference of arrays with additional index check, compares\n   data and indexes by a callback function.\n  \n  \n   Note that the keys are used in the comparison unlike\n   array_diff() and array_udiff().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       The callback comparison function.\n      \n      \n       The user supplied callback function is used for comparison.\n       It must return an integer less than, equal to, or greater than zero if\n       the first argument is considered to be respectively less than, equal\n       to, or greater than the second.\n      \n      \n       The comparison of arrays&#039; data is performed by using an user-supplied\n       callback : data_compare_func. In this aspect\n       the behaviour is opposite to the behaviour of\n       array_diff_assoc() which uses internal function for\n       comparison.\n      \n     \n\n    \n\n    \n\n     key_compare_func\n     \n\n      \n       The comparison of keys (indices) is done also by the callback function\n       key_compare_func. This behaviour is unlike what\n       array_udiff_assoc() does, since the latter compares\n       the indices by using an internal function.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all the values from\n   array1 that are not present in any of the other\n   arguments.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_udiff_uassoc() example\n    \n\n&lt;?phpclass&nbsp;cr&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$priv_member;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;cr($val)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;priv_member&nbsp;=&nbsp;$val;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;comp_func_cr($a,&nbsp;$b)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a-&gt;priv_member&nbsp;===&nbsp;$b-&gt;priv_member)&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a-&gt;priv_member&nbsp;&gt;&nbsp;$b-&gt;priv_member)?&nbsp;1:-1;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;comp_func_key($a,&nbsp;$b)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a&nbsp;===&nbsp;$b)&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a&nbsp;&gt;&nbsp;$b)?&nbsp;1:-1;&nbsp;&nbsp;&nbsp;&nbsp;}}$a&nbsp;=&nbsp;array(\"0.1\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(12),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(23),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$b&nbsp;=&nbsp;array(\"0.2\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(22),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(3),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$result&nbsp;=&nbsp;array_udiff_uassoc($a,&nbsp;$b,&nbsp;array(\"cr\",&nbsp;\"comp_func_cr\"),&nbsp;array(\"cr\",&nbsp;\"comp_func_key\"));print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0.1] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 9\n        )\n\n    [0.5] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 12\n        )\n\n    [0] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 23\n        )\n)\n\n    \n   \n  \n  \n   In our example above you see the &quot;1&quot; =&gt; new cr(4)\n   pair is present in both arrays and thus it is not in the output from the\n   function. Keep in mind that you have to supply 2 callback functions.\n  \n \n\n \n  Notes\n  Note: \n   \n    Please note that this function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using, for example,\n    array_udiff_uassoc($array1[0], $array2[0], &quot;data_compare_func&quot;,\n    &quot;key_compare_func&quot;);.\n   \n  \n \n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_udiff() - Computes the difference of arrays by using a callback function for data comparison\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect-assoc.php","title":"array_uintersect_assoc","description":"\n \n  array_uintersect_assoc\n  (PHP 5)array_uintersect_assoc &mdash; Computes the intersection of arrays with additional index check, compares data by a callback function\n\n \n \n  Description\n  \n   array array_uintersect_assoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   )\n\n  \n   Computes the intersection of arrays with additional index check, compares\n   data by a callback function.\n  \n  \n   Note that the keys are used in the comparison unlike in\n   array_uintersect().\n   The data is compared by using a callback function.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       For comparison is used the user supplied callback function.\n       It must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the\n       second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all the values of\n   array1 that are present in all the arguments.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_uintersect_assoc() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"GREEN\",&nbsp;\"B\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"yellow\",&nbsp;\"red\");print_r(array_uintersect_assoc($array1,&nbsp;$array2,&nbsp;\"strcasecmp\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect-uassoc.php","title":"array_uintersect_uassoc","description":"\n \n  array_uintersect_uassoc\n  (PHP 5)array_uintersect_uassoc &mdash; Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n\n \n \n  Description\n  \n   array array_uintersect_uassoc\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   , callback $key_compare_func\n   )\n\n  \n   Computes the intersection of arrays with additional index check, compares\n   data and indexes by a callback functions Note that the keys are used in\n   the comparison unlike in array_uintersect().\n   Both the data and the indexes are compared by using separate callback functions.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       For comparison is used the user supplied callback function.\n       It must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the\n       second.\n      \n     \n\n    \n\n    \n\n     key_compare_func\n     \n\n      \n       Key comparison callback function.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all the values of\n   array1 that are present in all the arguments.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_uintersect_uassoc() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"GREEN\",&nbsp;\"B\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"yellow\",&nbsp;\"red\");print_r(array_uintersect_uassoc($array1,&nbsp;$array2,&nbsp;\"strcasecmp\",&nbsp;\"strcasecmp\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n    [b] =&gt; brown\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_intersect_uassoc() - Computes the intersection of arrays with additional index check, compares indexes by a callback function\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-uintersect.php","title":"array_uintersect","description":"\n \n  array_uintersect\n  (PHP 5)array_uintersect &mdash; Computes the intersection of arrays, compares data by a callback function\n\n \n \n  Description\n  \n   array array_uintersect\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   )\n\n  \n   Computes the intersection of arrays, compares data by a callback function.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       The callback comparison function.\n      \n      \n       The user supplied callback function is used for comparison.\n       It must return an integer less than, equal to, or greater than zero if\n       the first argument is considered to be respectively less than, equal\n       to, or greater than the second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all the values of array1\n   that are present in all the arguments.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_uintersect() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;\"red\");$array2&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"GREEN\",&nbsp;\"B\"&nbsp;=&gt;&nbsp;\"brown\",&nbsp;\"yellow\",&nbsp;\"red\");print_r(array_uintersect($array1,&nbsp;$array2,&nbsp;\"strcasecmp\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n    [b] =&gt; brown\n    [0] =&gt; red\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-udiff.php","title":"array_udiff","description":"\n \n  array_udiff\n  (PHP 5)array_udiff &mdash; Computes the difference of arrays by using a callback function for data comparison\n\n \n \n  Description\n  \n   array array_udiff\n    ( array $array1\n   , array $array2\n   [, array $ ...\n   ], callback $data_compare_func\n   )\n\n  \n   Computes the difference of arrays by using a callback function for data\n   comparison. This is unlike array_diff() which uses an\n   internal function for comparing the data.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array1\n     \n\n      \n       The first array.\n      \n     \n\n    \n\n    \n\n     array2\n     \n\n      \n       The second array.\n      \n     \n\n    \n\n    \n\n     data_compare_func\n     \n\n      \n       The callback comparison function.\n      \n      \n       The user supplied callback function is used for comparison.\n       It must return an integer less than, equal to, or greater than zero if\n       the first argument is considered to be respectively less than, equal\n       to, or greater than the second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all the values of array1\n   that are not present in any of the other arguments.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_udiff() example\n    \n\n&lt;?phpclass&nbsp;cr&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$priv_member;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;cr($val)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;priv_member&nbsp;=&nbsp;$val;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;comp_func_cr($a,&nbsp;$b)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a-&gt;priv_member&nbsp;===&nbsp;$b-&gt;priv_member)&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a-&gt;priv_member&nbsp;&gt;&nbsp;$b-&gt;priv_member)?&nbsp;1:-1;&nbsp;&nbsp;&nbsp;&nbsp;}}$a&nbsp;=&nbsp;array(\"0.1\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(12),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(23),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$b&nbsp;=&nbsp;array(\"0.2\"&nbsp;=&gt;&nbsp;new&nbsp;cr(9),&nbsp;\"0.5\"&nbsp;=&gt;&nbsp;new&nbsp;cr(22),&nbsp;0&nbsp;=&gt;&nbsp;new&nbsp;cr(3),&nbsp;1=&gt;&nbsp;new&nbsp;cr(4),&nbsp;2&nbsp;=&gt;&nbsp;new&nbsp;cr(-15),);$result&nbsp;=&nbsp;array_udiff($a,&nbsp;$b,&nbsp;array(\"cr\",&nbsp;\"comp_func_cr\"));print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0.5] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 12\n        )\n\n    [0] =&gt; cr Object\n        (\n            [priv_member:private] =&gt; 23\n        )\n\n)\n\n    \n   \n  \n \n\n \n  Notes\n  Note: \n   \n    Please note that this function only checks one dimension of a n-dimensional\n    array. Of course you can check deeper dimensions by using\n    array_udiff($array1[0], $array2[0], &quot;data_compare_func&quot;);.\n   \n  \n \n\n \n  See Also\n  \n   \n    array_diff() - Computes the difference of arrays\n    array_diff_assoc() - Computes the difference of arrays with additional index check\n    array_diff_uassoc() - Computes the difference of arrays with additional index check which is performed by a user supplied callback function\n    array_udiff_assoc() - Computes the difference of arrays with additional index check, compares data by a callback function\n    array_udiff_uassoc() - Computes the difference of arrays with additional index check, compares data and indexes by a callback function\n    array_intersect() - Computes the intersection of arrays\n    array_intersect_assoc() - Computes the intersection of arrays with additional index check\n    array_uintersect() - Computes the intersection of arrays, compares data by a callback function\n    array_uintersect_assoc() - Computes the intersection of arrays with additional index check, compares data by a callback function\n    array_uintersect_uassoc() - Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-unshift.php","title":"array_unshift","description":"\n \n  array_unshift\n  (PHP 4, PHP 5)array_unshift &mdash; Prepend one or more elements to the beginning of an array\n\n \n \n  Description\n  \n   int array_unshift\n    ( array &$array\n   , mixed $var\n   [, mixed $...\n  ] )\n\n  \n   array_unshift() prepends passed elements to the front\n   of the array. Note that the list of elements is\n   prepended as a whole, so that the prepended elements stay in the same\n   order.  All numerical array keys will be modified to start counting from\n   zero while literal keys won&#039;t be touched.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     var\n     \n\n      \n       The prepended variable.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the new number of elements in the array.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_unshift() example\n    \n\n&lt;?php$queue&nbsp;=&nbsp;array(\"orange\",&nbsp;\"banana\");array_unshift($queue,&nbsp;\"apple\",&nbsp;\"raspberry\");print_r($queue);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; apple\n    [1] =&gt; raspberry\n    [2] =&gt; orange\n    [3] =&gt; banana\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_shift() - Shift an element off the beginning of array\n    array_push() - Push one or more elements onto the end of array\n    array_pop() - Pop the element off the end of array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-unique.php","title":"array_unique","description":"\n \n  array_unique\n  (PHP 4 &gt;= 4.0.1, PHP 5)array_unique &mdash; Removes duplicate values from an array\n\n \n\n \n  Description\n  \n   array array_unique\n    ( array $array\n   [, int $sort_flags = SORT_STRING\n  ] )\n\n  \n   Takes an input array and returns a new array\n   without duplicate values.\n  \n  \n   Note that keys are preserved. array_unique() sorts\n   the values treated as string at first, then will keep the first key\n   encountered for every value, and ignore all following keys. It does not\n   mean that the key of the first related value from the unsorted\n   array will be kept.\n  \n  Note: \n   \n    Two elements are considered equal if and only if\n    (string) $elem1 === (string) $elem2. In words:\n    when the string representation is the same.\n   \n   \n    The first element will be used.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       The optional second parameter sort_flags\n       may be used to modify the sorting behavior using these values:\n      \n      \n       Sorting type flags:\n       \n        \n         SORT_REGULAR - compare items normally\n         (don&#039;t change types)\n        \n        \n         SORT_NUMERIC - compare items numerically\n        \n        \n         SORT_STRING - compare items as strings\n        \n        \n         SORT_LOCALE_STRING - compare items as\n          strings, based on the current locale.\n          \n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the filtered array.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.10\n       \n        Changed the default value of sort_flags back to\n        SORT_STRING.\n       \n      \n\n      \n       5.2.9\n       \n        Added the optional sort_flags defaulting\n        to SORT_REGULAR. Prior to 5.2.9, this function used to sort\n        the array with SORT_STRING internally.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 array_unique() example\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"red\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"green\",&nbsp;\"blue\",&nbsp;\"red\");$result&nbsp;=&nbsp;array_unique($input);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; green\n    [0] =&gt; red\n    [1] =&gt; blue\n)\n\n    \n   \n  \n  \n   \n    Example #2 array_unique() and types\n    \n\n&lt;?php$input&nbsp;=&nbsp;array(4,&nbsp;\"4\",&nbsp;\"3\",&nbsp;4,&nbsp;3,&nbsp;\"3\");$result&nbsp;=&nbsp;array_unique($input);var_dump($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [0] =&gt; int(4)\n  [2] =&gt; string(1) &quot;3&quot;\n}\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    array_count_values() - Counts all the values of an array\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Note that array_unique() is not intended to \n    work on multi dimensional arrays.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-values.php","title":"array_values","description":"\n \n  array_values\n  (PHP 4, PHP 5)array_values &mdash; Return all the values of an array\n\n \n \n  Description\n  \n   array array_values\n    ( array $input\n   )\n\n  \n   array_values() returns all the values from the\n   input array and indexes numerically the\n   array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an indexed array of values.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_values() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(\"size\"&nbsp;=&gt;&nbsp;\"XL\",&nbsp;\"color\"&nbsp;=&gt;&nbsp;\"gold\");print_r(array_values($array));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; XL\n    [1] =&gt; gold\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_keys() - Return all the keys or a subset of the keys of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-walk-recursive.php","title":"array_walk_recursive","description":"\n \n  array_walk_recursive\n  (PHP 5)array_walk_recursive &mdash; Apply a user function recursively to every member of an array\n\n \n \n  Description\n  \n   bool array_walk_recursive\n    ( array &$input\n   , callback $funcname\n   [, mixed $userdata\n  ] )\n\n  \n   Applies the user-defined function funcname to each\n   element of the input array. This function will recurse\n   into deeper arrays.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     funcname\n     \n\n      \n       Typically, funcname takes on two parameters.\n       The input parameter&#039;s value being the first, and\n       the key\/index second.\n      \n      Note: \n       \n        If funcname needs to be working with the\n        actual values of the array, specify the first parameter of\n        funcname as a\n        reference. Then,\n        any changes made to those elements will be made in the\n        original array itself.\n       \n      \n     \n\n    \n\n    \n\n     userdata\n     \n\n      \n       If the optional userdata parameter is supplied,\n       it will be passed as the third parameter to the callback\n       funcname.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_walk_recursive() example\n    \n\n&lt;?php$sweet&nbsp;=&nbsp;array('a'&nbsp;=&gt;&nbsp;'apple',&nbsp;'b'&nbsp;=&gt;&nbsp;'banana');$fruits&nbsp;=&nbsp;array('sweet'&nbsp;=&gt;&nbsp;$sweet,&nbsp;'sour'&nbsp;=&gt;&nbsp;'lemon');function&nbsp;test_print($item,&nbsp;$key){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;holds&nbsp;$item\\n\";}array_walk_recursive($fruits,&nbsp;'test_print');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\na holds apple\nb holds banana\nsour holds lemon\n\n    \n    \n     You may notice that the key &#039;sweet&#039; is never displayed. Any key that holds an\n     array will not be passed to the function.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_walk() - Apply a user function to every member of an array\n    information about the callback type\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array-walk.php","title":"array_walk","description":"\n \n  array_walk\n  (PHP 4, PHP 5)array_walk &mdash; Apply a user function to every member of an array\n\n \n \n  Description\n  \n   bool array_walk\n    ( array &$array\n   , callback $funcname\n   [, mixed $userdata\n  ] )\n\n  \n   Applies the user-defined function funcname to each\n   element of the array array.\n  \n  \n   array_walk() is not affected by the internal array\n   pointer of array.  array_walk()\n   will walk through the entire array regardless of pointer position.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     funcname\n     \n\n      \n       Typically, funcname takes on two parameters.\n       The array parameter&#039;s value being the first, and\n       the key\/index second.\n      \n      Note: \n       \n        If funcname needs to be working with the\n        actual values of the array, specify the first parameter of\n        funcname as a\n        reference. Then,\n        any changes made to those elements will be made in the\n        original array itself.\n       \n      \n      Note: \n        \n          Many internal functions (for example strtolower())\n          will throw a warning if more than the expected number of argument\n          are passed in and are not usable directly as\n          funcname.\n        \n      \n      \n       Only the values of the array may potentially be\n       changed; its structure cannot be altered, i.e., the programmer cannot\n       add, unset or reorder elements. If the callback does not respect this\n       requirement, the behavior of this function is undefined, and      \n       unpredictable.\n      \n     \n\n    \n\n    \n\n     userdata\n     \n\n      \n       If the optional userdata parameter is supplied,\n       it will be passed as the third parameter to the callback\n       funcname.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Errors\/Exceptions\n  \n   If function funcname requires more parameters than\n   given to it, an error of level \n   E_WARNING will be generated each time array_walk()\n   calls funcname. These warnings may be suppressed by\n   prepending the PHP error operator\n   @ to the\n   array_walk() call, or by using\n   error_reporting().\n  \n \n\n \n  Examples\n  \n   \n    Example #1 array_walk() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"d\"&nbsp;=&gt;&nbsp;\"lemon\",&nbsp;\"a\"&nbsp;=&gt;&nbsp;\"orange\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"banana\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"apple\");function&nbsp;test_alter(&amp;$item1,&nbsp;$key,&nbsp;$prefix){&nbsp;&nbsp;&nbsp;&nbsp;$item1&nbsp;=&nbsp;\"$prefix:&nbsp;$item1\";}function&nbsp;test_print($item2,&nbsp;$key){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key.&nbsp;$item2&lt;br&nbsp;\/&gt;\\n\";}echo&nbsp;\"Before&nbsp;...:\\n\";array_walk($fruits,&nbsp;'test_print');array_walk($fruits,&nbsp;'test_alter',&nbsp;'fruit');echo&nbsp;\"...&nbsp;and&nbsp;after:\\n\";array_walk($fruits,&nbsp;'test_print');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nBefore ...:\nd. lemon\na. orange\nb. banana\nc. apple\n... and after:\nd. fruit: lemon\na. fruit: orange\nb. fruit: banana\nc. fruit: apple\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_walk_recursive() - Apply a user function recursively to every member of an array\n    iterator_apply() - Call a function for every element in an iterator\n    create_function() - Create an anonymous (lambda-style) function\n    list() - Assign variables as if they were an array\n    each() - Return the current key and value pair from an array and advance the array cursor\n    call_user_func_array() - Call a user function given with an array of parameters\n    array_map() - Applies the callback to the elements of the given arrays\n    information about the callback type\n    foreach\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.arsort.php","title":"arsort","description":"\n \n  arsort\n  (PHP 4, PHP 5)arsort &mdash; Sort an array in reverse order and maintain index association\n\n \n \n  Description\n  \n   bool arsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   This function sorts an array such that array indices maintain their\n   correlation with the array elements they are associated with.\n  \n  \n   This is used mainly when sorting associative arrays where the actual\n   element order is significant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       You may modify the behavior of the sort using the optional parameter\n       sort_flags, for details see\n       sort().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 arsort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"d\"&nbsp;=&gt;&nbsp;\"lemon\",&nbsp;\"a\"&nbsp;=&gt;&nbsp;\"orange\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"banana\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"apple\");arsort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\na = orange\nd = lemon\nb = banana\nc = apple\n\n    \n    \n     The fruits have been sorted in reverse alphabetical order, and\n     the index associated with each element has been maintained.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    asort() - Sort an array and maintain index association\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.compact.php","title":"compact","description":"\n \n  compact\n  (PHP 4, PHP 5)compact &mdash; Create array containing variables and their values\n\n \n \n  Description\n  \n   array compact\n    ( mixed $varname\n   [, mixed $...\n  ] )\n\n  \n   Creates an array containing variables and their values.\n  \n  \n   For each of these, compact() looks for a\n   variable with that name in the current symbol table and adds it\n   to the output array such that the variable name becomes the key\n   and the contents of the variable become the value for that key.\n   In short, it does the opposite of extract().\n  \n  \n   Any strings that are not set will simply be skipped.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     varname\n     \n\n      \n       compact() takes a variable number of parameters.\n       Each parameter can be either a string containing the name of the\n       variable, or an array of variable names.  The array can contain other\n       arrays of variable names inside it; compact()\n       handles it recursively.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the output array with all the variables added to it.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 compact() example\n    \n\n&lt;?php$city&nbsp;&nbsp;=&nbsp;\"San&nbsp;Francisco\";$state&nbsp;=&nbsp;\"CA\";$event&nbsp;=&nbsp;\"SIGGRAPH\";$location_vars&nbsp;=&nbsp;array(\"city\",&nbsp;\"state\");$result&nbsp;=&nbsp;compact(\"event\",&nbsp;\"nothing_here\",&nbsp;$location_vars);print_r($result);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [event] =&gt; SIGGRAPH\n    [city] =&gt; San Francisco\n    [state] =&gt; CA\n)\n\n    \n   \n  \n \n\n \n  Notes\n  Note: \n   Gotcha\n   \n    Because variable\n    variables may not be used with PHP&#039;s\n    Superglobal\n    arrays within functions, the Superglobal arrays may not be passed\n    into compact().\n   \n  \n \n\n \n  See Also\n  \n   \n    extract() - Import variables into the current symbol table from an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.array.php","title":"array","description":"\n \n  array\n  (PHP 4, PHP 5)array &mdash; Create an array\n\n \n \n  Description\n  \n   array array\n    ([ mixed $...\n  ] )\n\n  \n   Creates an array. Read the section on the\n   array type for more information\n   on what an array is.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ...\n     \n\n      \n       Syntax &quot;index =&gt; values&quot;, separated by commas, define index\n       and values. index may be of type string or integer. When index is\n       omitted, an integer index is automatically generated, starting\n       at 0. If index is an integer, next generated index will\n       be the biggest integer index + 1. Note that when two identical\n       index are defined, the last overwrite the first.\n      \n      \n       Having a trailing comma after the last defined array entry, while\n       unusual, is a valid syntax.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of the parameters.  The parameters can be given\n   an index with the =&gt; operator.  Read the section\n   on the array type for more\n   information on what an array is.\n  \n \n\n \n  Examples\n  \n   The following example demonstrates how to create a\n   two-dimensional array, how to specify keys for associative\n   arrays, and how to skip-and-continue numeric indices in normal\n   arrays.\n   \n    Example #1 array() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;\"fruits\"&nbsp;&nbsp;=&gt;&nbsp;array(\"a\"&nbsp;=&gt;&nbsp;\"orange\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"banana\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"apple\"),&nbsp;&nbsp;&nbsp;&nbsp;\"numbers\"&nbsp;=&gt;&nbsp;array(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6),&nbsp;&nbsp;&nbsp;&nbsp;\"holes\"&nbsp;&nbsp;&nbsp;=&gt;&nbsp;array(\"first\",&nbsp;5&nbsp;=&gt;&nbsp;\"second\",&nbsp;\"third\"));?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Automatic index with array()\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(1,&nbsp;1,&nbsp;1,&nbsp;1,&nbsp;&nbsp;1,&nbsp;8&nbsp;=&gt;&nbsp;1,&nbsp;&nbsp;4&nbsp;=&gt;&nbsp;1,&nbsp;19,&nbsp;3&nbsp;=&gt;&nbsp;13);print_r($array);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; 1\n    [1] =&gt; 1\n    [2] =&gt; 1\n    [3] =&gt; 13\n    [4] =&gt; 1\n    [8] =&gt; 1\n    [9] =&gt; 19\n)\n\n    \n   \n  \n  \n   Note that index &#039;3&#039; is defined twice, and keep its final value of 13.\n   Index 4 is defined after index 8, and next generated index (value 19)\n   is 9, since biggest index was 8.\n  \n  \n   This example creates a 1-based array.\n   \n    Example #3 1-based index with array()\n    \n\n&lt;?php$firstquarter&nbsp;=&nbsp;array(1&nbsp;=&gt;&nbsp;'January',&nbsp;'February',&nbsp;'March');print_r($firstquarter);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [1] =&gt; January\n    [2] =&gt; February\n    [3] =&gt; March\n)\n\n    \n   \n  \n  \n   As in Perl, you can access a value from the array inside double quotes.\n   However, with PHP you&#039;ll need to enclose your array between curly braces.\n   \n    Example #4 Accessing an array inside double quotes\n    \n\n&lt;?php$foo&nbsp;=&nbsp;array('bar'&nbsp;=&gt;&nbsp;'baz');echo&nbsp;\"Hello&nbsp;{$foo['bar']}!\";&nbsp;\/\/&nbsp;Hello&nbsp;baz!?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  \n   Note: \n    \n     array() is a language construct used to\n     represent literal arrays, and not a regular function.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_pad() - Pad array to the specified length with a value\n    list() - Assign variables as if they were an array\n    count() - Count all elements in an array, or something in an object\n    range() - Create an array containing a range of elements\n    foreach\n    The array type\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asort.php","title":"asort","description":"\n \n  asort\n  (PHP 4, PHP 5)asort &mdash; Sort an array and maintain index association\n\n \n \n  Description\n  \n   bool asort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   This function sorts an array such that array indices maintain\n   their correlation with the array elements they are associated\n   with.  This is used mainly when sorting associative arrays where\n   the actual element order is significant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details\n       see sort().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 asort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"d\"&nbsp;=&gt;&nbsp;\"lemon\",&nbsp;\"a\"&nbsp;=&gt;&nbsp;\"orange\",&nbsp;\"b\"&nbsp;=&gt;&nbsp;\"banana\",&nbsp;\"c\"&nbsp;=&gt;&nbsp;\"apple\");asort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nc = apple\nb = banana\nd = lemon\na = orange\n\n    \n    \n     The fruits have been sorted in alphabetical order, and the index\n     associated with each element has been maintained.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    arsort() - Sort an array in reverse order and maintain index association\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.current.php","title":"current","description":"\n \n  current\n  (PHP 4, PHP 5)current &mdash; Return the current element in an array\n\n \n \n  Description\n  \n   mixed current\n    ( array &$array\n   )\n\n  \n   Every array has an internal pointer to its &quot;current&quot; element,\n   which is initialized to the first element inserted into the\n   array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The current() function simply returns the\n   value of the array element that&#039;s currently being pointed to by the\n   internal pointer.  It does not move the pointer in any way.  If the\n   internal pointer points beyond the end of the elements list or the array is \n   empty, current() returns FALSE.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n \n  Examples\n  \n   \n    Example #1 Example use of current() and friends\n    \n\n&lt;?php$transport&nbsp;=&nbsp;array('foot',&nbsp;'bike',&nbsp;'car',&nbsp;'plane');$mode&nbsp;=&nbsp;current($transport);&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'foot';$mode&nbsp;=&nbsp;next($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;current($transport);&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;prev($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'foot';$mode&nbsp;=&nbsp;end($transport);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'plane';$mode&nbsp;=&nbsp;current($transport);&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'plane';$arr&nbsp;=&nbsp;array();var_dump(current($arr));&nbsp;\/\/&nbsp;bool(false)$arr&nbsp;=&nbsp;array(array());var_dump(current($arr));&nbsp;\/\/&nbsp;array(0)&nbsp;{&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n   \n    You won&#039;t be able to distinguish the end of an array from a\n    boolean FALSE element. To properly traverse an array\n    which may contain FALSE elements, see the each()\n    function.\n   \n  \n \n\n \n  See Also\n  \n   \n    end() - Set the internal pointer of an array to its last element\n    key() - Fetch a key from an array\n    each() - Return the current key and value pair from an array and advance the array cursor\n    prev() - Rewind the internal array pointer\n    reset() - Set the internal pointer of an array to its first element\n    next() - Advance the internal array pointer of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.count.php","title":"count","description":"\n \n  count\n  (PHP 4, PHP 5)count &mdash; Count all elements in an array, or something in an object\n\n \n \n  Description\n  \n   int count\n    ( mixed $var\n   [, int $mode = COUNT_NORMAL\n  ] )\n\n  \n   Counts all elements in an array, or something in an object.\n  \n  \n   For objects, if you have\n   SPL installed, you can hook into\n   count() by implementing interface\n   Countable. The interface has exactly one method,\n    Countable::count(), which returns the return value for the\n   count() function.\n  \n  \n   Please see the Array\n   section of the manual for a detailed explanation of how arrays\n   are implemented and used in PHP.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The array or the object.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       If the optional mode parameter is set to\n       COUNT_RECURSIVE (or 1), count()\n       will recursively count the array.  This is particularly useful for\n       counting all the elements of a multidimensional array.\n       count() does not detect infinite recursion.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of elements in var.\n   If var is not an array or an object with\n   implemented Countable interface,\n   1 will be returned.\n   There is one exception, if var is NULL,\n   0 will be returned.\n  \n  Caution\n   \n    count() may return 0 for a variable that isn&#039;t set,\n    but it may also return 0 for a variable that has been initialized with an\n    empty array. Use isset() to test if a variable is set.\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The optional mode parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 count() example\n    \n\n&lt;?php$a[0]&nbsp;=&nbsp;1;$a[1]&nbsp;=&nbsp;3;$a[2]&nbsp;=&nbsp;5;$result&nbsp;=&nbsp;count($a);\/\/&nbsp;$result&nbsp;==&nbsp;3$b[0]&nbsp;&nbsp;=&nbsp;7;$b[5]&nbsp;&nbsp;=&nbsp;9;$b[10]&nbsp;=&nbsp;11;$result&nbsp;=&nbsp;count($b);\/\/&nbsp;$result&nbsp;==&nbsp;3$result&nbsp;=&nbsp;count(null);\/\/&nbsp;$result&nbsp;==&nbsp;0$result&nbsp;=&nbsp;count(false);\/\/&nbsp;$result&nbsp;==&nbsp;1?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Recursive count() example\n    \n\n&lt;?php$food&nbsp;=&nbsp;array('fruits'&nbsp;=&gt;&nbsp;array('orange',&nbsp;'banana',&nbsp;'apple'),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'veggie'&nbsp;=&gt;&nbsp;array('carrot',&nbsp;'collard',&nbsp;'pea'));\/\/&nbsp;recursive&nbsp;countecho&nbsp;count($food,&nbsp;COUNT_RECURSIVE);&nbsp;\/\/&nbsp;output&nbsp;8\/\/&nbsp;normal&nbsp;countecho&nbsp;count($food);&nbsp;\/\/&nbsp;output&nbsp;2?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    is_array() - Finds whether a variable is an array\n    isset() - Determine if a variable is set and is not NULL\n    strlen() - Get string length\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.end.php","title":"end","description":"\n \n  end\n  (PHP 4, PHP 5)end &mdash; Set the internal pointer of an array to its last element\n\n \n \n  Description\n  \n   mixed end\n    ( array &$array\n   )\n\n  \n   end() advances array&#039;s\n   internal pointer to the last element, and returns its value.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array.  This array is passed by reference because it is modified by\n       the function.  This means you must pass it a real variable and not\n       a function returning an array because only actual variables may be\n       passed by reference.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the value of the last element or FALSE for empty array.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 end() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array('apple',&nbsp;'banana',&nbsp;'cranberry');echo&nbsp;end($fruits);&nbsp;\/\/&nbsp;cranberry?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    current() - Return the current element in an array\n    each() - Return the current key and value pair from an array and advance the array cursor\n    prev() - Rewind the internal array pointer\n    reset() - Set the internal pointer of an array to its first element\n    next() - Advance the internal array pointer of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.each.php","title":"each","description":"\n \n  each\n  (PHP 4, PHP 5)each &mdash; Return the current key and value pair from an array and advance the array cursor\n\n \n \n  Description\n  \n   array each\n    ( array &$array\n   )\n\n  \n   Return the current key and value pair from an array and advance the array\n   cursor.\n  \n  \n   After each() has executed, the array cursor\n   will be left on the next element of the array, or past the last\n   element if it hits the end of the array. You have to use\n   reset() if you want to traverse the array\n   again using each.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the current key and value pair from the array\n   array. This pair is returned in a four-element\n   array, with the keys 0, 1,\n   key, and value. Elements\n   0 and key contain the key name of\n   the array element, and 1 and value\n   contain the data.\n  \n  \n   If the internal pointer for the array points past the end of the\n   array contents, each() returns\n   FALSE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 each() examples\n    \n\n&lt;?php$foo&nbsp;=&nbsp;array(\"bob\",&nbsp;\"fred\",&nbsp;\"jussi\",&nbsp;\"jouni\",&nbsp;\"egon\",&nbsp;\"marliese\");$bar&nbsp;=&nbsp;each($foo);print_r($bar);?&gt;\n\n\n    \n\n    \n     $bar now contains the following key\/value\n     pairs:\n    \n    \n\nArray\n(\n    [1] =&gt; bob\n    [value] =&gt; bob\n    [0] =&gt; 0\n    [key] =&gt; 0\n)\n\n    \n   \n  \n  \n   \n    \n\n&lt;?php$foo&nbsp;=&nbsp;array(\"Robert\"&nbsp;=&gt;&nbsp;\"Bob\",&nbsp;\"Seppo\"&nbsp;=&gt;&nbsp;\"Sepi\");$bar&nbsp;=&nbsp;each($foo);print_r($bar);?&gt;\n\n\n    \n\n    \n     $bar now contains the following key\/value\n     pairs:\n    \n    \n\nArray\n(\n    [1] =&gt; Bob\n    [value] =&gt; Bob\n    [0] =&gt; Robert\n    [key] =&gt; Robert\n)\n\n    \n   \n  \n  \n   each() is typically used in conjunction with\n   list() to traverse an array, here&#039;s an\n   example:\n   \n    Example #2 Traversing an array with each()\n    \n\n&lt;?php$fruit&nbsp;=&nbsp;array('a'&nbsp;=&gt;&nbsp;'apple',&nbsp;'b'&nbsp;=&gt;&nbsp;'banana',&nbsp;'c'&nbsp;=&gt;&nbsp;'cranberry');reset($fruit);while&nbsp;(list($key,&nbsp;$val)&nbsp;=&nbsp;each($fruit))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&gt;&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\na =&gt; apple\nb =&gt; banana\nc =&gt; cranberry\n\n    \n   \n  \n  Caution\n   \n    Because assigning an array to another variable resets the original\n    arrays pointer, our example above would cause an endless loop had we\n    assigned $fruit to another variable inside the\n    loop.\n   \n  \n  Warning\n   \n    each() will also accept objects, but may return unexpected \n    results. Its therefore not recommended to iterate though object properties \n    with each().\n   \n  \n \n\n \n  See Also\n  \n   \n    key() - Fetch a key from an array\n    list() - Assign variables as if they were an array\n    current() - Return the current element in an array\n    reset() - Set the internal pointer of an array to its first element\n    next() - Advance the internal array pointer of an array\n    prev() - Rewind the internal array pointer\n    foreach\n    Object Iteration\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.extract.php","title":"extract","description":"\n \n  extract\n  (PHP 4, PHP 5)extract &mdash; Import variables into the current symbol table from an array\n\n \n \n  Description\n  \n   int extract\n    ( array &$var_array\n   [, int $extract_type = EXTR_OVERWRITE\n   [, string $prefix\n  ]] )\n\n  \n   Import variables from an array into the current symbol table.\n  \n  \n   Checks each key to see whether it has a valid variable name. \n   It also checks for collisions with existing variables in\n   the symbol table.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var_array\n     \n\n      \n       An associative array. This function treats keys as variable names and\n       values as variable values.  For each key\/value pair it will create a\n       variable in the current symbol table, subject to\n       extract_type and\n       prefix parameters.\n      \n      \n       You must use an associative array; a numerically indexed array\n       will not produce results unless you use EXTR_PREFIX_ALL or\n       EXTR_PREFIX_INVALID.\n      \n     \n\n    \n\n    \n\n     extract_type\n     \n\n      \n       The way invalid\/numeric keys and collisions are treated is determined\n       by the extract_type. It can be one of the\n       following values:\n       \n\n        \n\n         EXTR_OVERWRITE\n         \n\n          \n           If there is a collision, overwrite the existing variable.\n          \n         \n\n        \n\n        \n\n         EXTR_SKIP\n         \n\n          \n           If there is a collision, don&#039;t overwrite the existing\n           variable.\n          \n         \n\n        \n\n        \n\n         EXTR_PREFIX_SAME\n         \n\n          If there is a collision, prefix the variable name with\n          prefix.\n          \n         \n\n        \n\n        \n\n         EXTR_PREFIX_ALL\n         \n\n          \n           Prefix all variable names with\n           prefix.\n          \n         \n\n        \n\n        \n\n         EXTR_PREFIX_INVALID\n         \n\n          \n           Only prefix invalid\/numeric variable names with\n           prefix.\n          \n         \n\n        \n\n        \n\n         EXTR_IF_EXISTS\n         \n\n          \n           Only overwrite the variable if it already exists in the\n           current symbol table, otherwise do nothing.  This is useful\n           for defining a list of valid variables and then extracting\n           only those variables you have defined out of\n           $_REQUEST, for example.\n          \n         \n\n        \n\n        \n\n         EXTR_PREFIX_IF_EXISTS\n         \n\n          \n           Only create prefixed variable names if the non-prefixed version\n           of the same variable exists in the current symbol table.\n          \n         \n\n        \n\n        \n\n         EXTR_REFS\n         \n\n          \n           Extracts variables as references. This effectively means that the\n           values of the imported variables are still referencing the values of\n           the var_array parameter. You can use this flag\n           on its own or combine it with any other flag by OR&#039;ing the\n           extract_type.\n          \n         \n\n        \n\n       \n\n      \n      \n       If extract_type is not specified, it is\n       assumed to be EXTR_OVERWRITE.\n      \n     \n\n    \n\n    \n\n     prefix\n     \n\n      \n       Note that prefix is only required if\n       extract_type is EXTR_PREFIX_SAME,\n       EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID\n       or EXTR_PREFIX_IF_EXISTS. If\n       the prefixed result is not a valid variable name, it is not\n       imported into the symbol table. Prefixes are automatically separated from\n       the array key by an underscore character.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of variables successfully imported into the symbol\n   table.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        EXTR_REFS was added.\n       \n      \n\n      \n       4.2.0\n       \n        EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS\n        were added.\n       \n      \n\n      \n       4.0.5\n       \n        This function now returns the number of variables extracted.\n        EXTR_PREFIX_INVALID was added.\n        EXTR_PREFIX_ALL includes numeric variables as well.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 extract() example\n    \n     A possible use for extract() is to import into the\n     symbol table variables contained in an associative array returned by\n     wddx_deserialize().\n    \n    \n\n&lt;?php\/*&nbsp;Suppose&nbsp;that&nbsp;$var_array&nbsp;is&nbsp;an&nbsp;array&nbsp;returned&nbsp;from&nbsp;&nbsp;&nbsp;wddx_deserialize&nbsp;*\/$size&nbsp;=&nbsp;\"large\";$var_array&nbsp;=&nbsp;array(\"color\"&nbsp;=&gt;&nbsp;\"blue\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"size\"&nbsp;&nbsp;=&gt;&nbsp;\"medium\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"shape\"&nbsp;=&gt;&nbsp;\"sphere\");extract($var_array,&nbsp;EXTR_PREFIX_SAME,&nbsp;\"wddx\");echo&nbsp;\"$color,&nbsp;$size,&nbsp;$shape,&nbsp;$wddx_size\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nblue, large, sphere, medium\n\n    \n    \n     The $size wasn&#039;t overwritten because we specified\n     EXTR_PREFIX_SAME, which resulted in\n     $wddx_size being created.  If EXTR_SKIP was\n     specified, then $wddx_size wouldn&#039;t even have been created.\n     EXTR_OVERWRITE would have caused $size to have\n     value &quot;medium&quot;, and EXTR_PREFIX_ALL would result in new variables\n     being named $wddx_color,\n     $wddx_size, and\n     $wddx_shape.\n    \n   \n  \n \n\n \n  Notes\n  Warning\n   \n    Do not use extract() on untrusted data, like\n    user input\n    (i.e. $_GET, $_FILES, etc.).\n    If you do, for example if you want to run old code that relies\n    on register_globals\n    temporarily, make sure you use one of the non-overwriting\n    extract_type values such as\n    EXTR_SKIP and be aware that you should extract\n    in the same order that&#039;s defined in\n    variables_order within the\n    php.ini.\n   \n  \n  Note: \n   \n    If you\n    have register_globals\n    turned on and you use extract()\n    on $_FILES and\n    specify EXTR_SKIP, you may be surprised at\n    the results.\n   \n   Warning\n    \n     This is not recommended practice and is only documented here for\n     completeness. The use\n     of register_globals is\n     deprecated and calling extract() on untrusted\n     data such as $_FILES is, as noted above, a\n     potential security risk. If you encounter this issue, it means\n     that you are using at least two poor coding practices.\n    \n   \n   \n\n&lt;?php\/*&nbsp;Suppose&nbsp;that&nbsp;$testfile&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;a&nbsp;file&nbsp;upload&nbsp;input&nbsp;&nbsp;&nbsp;and&nbsp;that&nbsp;register_globals&nbsp;is&nbsp;turned&nbsp;on.&nbsp;*\/var_dump($testfile);extract($_FILES,&nbsp;EXTR_SKIP);var_dump($testfile);var_dump($testfile['tmp_name']);?&gt;\n\n\n   \n\n   \n    You might expect to see something like the following:\n   \n   \n\nstring(14) &quot;\/tmp\/phpgCCPX8&quot;\narray(5) {\n  [&quot;name&quot;]=&gt;\n  string(10) &quot;somefile.txt&quot;\n  [&quot;type&quot;]=&gt;\n  string(24) &quot;application\/octet-stream&quot;\n  [&quot;tmp_name&quot;]=&gt;\n  string(14) &quot;\/tmp\/phpgCCPX8&quot;\n  [&quot;error&quot;]=&gt;\n  int(0)\n  [&quot;size&quot;]=&gt;\n  int(4208)\n}\nstring(14) &quot;\/tmp\/phpgCCPX8&quot;\n\n   \n   \n    However, you would instead see something like this:\n   \n   \n\nstring(14) &quot;\/tmp\/phpgCCPX8&quot;\nstring(14) &quot;\/tmp\/phpgCCPX8&quot;\nstring(1) &quot;\/&quot;\n\n   \n   \n    This is due to the fact that\n    since register_globals is\n    turned on, $testfile already exists in the\n    global scope when extract() is called. And\n    since EXTR_SKIP is\n    specified, $testfile is not overwritten with\n    the contents of the $_FILES array\n    so $testfile remains a string.\n    Because strings may\n    be accessed using array syntax and the non-numeric string\n    tmp_name is interpreted\n    as 0, PHP\n    sees $testfile['tmp_name']\n    as $testfile[0].\n   \n  \n \n\n \n  See Also\n  \n   \n    compact() - Create array containing variables and their values\n    list() - Assign variables as if they were an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.krsort.php","title":"krsort","description":"\n \n  krsort\n  (PHP 4, PHP 5)krsort &mdash; Sort an array by key in reverse order\n\n \n \n  Description\n  \n   bool krsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   Sorts an array by key in reverse order, maintaining key to data\n   correlations. This is useful mainly for associative arrays.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       You may modify the behavior of the sort using the optional parameter\n       sort_flags, for details see\n       sort().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 krsort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"d\"=&gt;\"lemon\",&nbsp;\"a\"=&gt;\"orange\",&nbsp;\"b\"=&gt;\"banana\",&nbsp;\"c\"=&gt;\"apple\");krsort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nd = lemon\nc = apple\nb = banana\na = orange\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    arsort() - Sort an array in reverse order and maintain index association\n    ksort() - Sort an array by key\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.key.php","title":"key","description":"\n \n  key\n  (PHP 4, PHP 5)key &mdash; Fetch a key from an array\n\n \n \n  Description\n  \n   mixed key\n    ( array &$array\n   )\n\n  \n   key() returns the index element of the current array\n   position.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The key() function simply returns the\n   key of the array element that&#039;s currently being pointed to by the\n   internal pointer.  It does not move the pointer in any way.  If the\n   internal pointer points beyond the end of the elements list or the array is \n   empty, key() returns NULL.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 key() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'fruit1'&nbsp;=&gt;&nbsp;'apple',&nbsp;&nbsp;&nbsp;&nbsp;'fruit2'&nbsp;=&gt;&nbsp;'orange',&nbsp;&nbsp;&nbsp;&nbsp;'fruit3'&nbsp;=&gt;&nbsp;'grape',&nbsp;&nbsp;&nbsp;&nbsp;'fruit4'&nbsp;=&gt;&nbsp;'apple',&nbsp;&nbsp;&nbsp;&nbsp;'fruit5'&nbsp;=&gt;&nbsp;'apple');\/\/&nbsp;this&nbsp;cycle&nbsp;echoes&nbsp;all&nbsp;associative&nbsp;array\/\/&nbsp;key&nbsp;where&nbsp;value&nbsp;equals&nbsp;\"apple\"while&nbsp;($fruit_name&nbsp;=&nbsp;current($array))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($fruit_name&nbsp;==&nbsp;'apple')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;key($array).'&lt;br&nbsp;\/&gt;';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;next($array);}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfruit1&lt;br \/&gt;\nfruit4&lt;br \/&gt;\nfruit5&lt;br \/&gt;\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    current() - Return the current element in an array\n    next() - Advance the internal array pointer of an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.in-array.php","title":"in_array","description":"\n \n  in_array\n  (PHP 4, PHP 5)in_array &mdash; Checks if a value exists in an array\n\n \n \n  Description\n  \n   bool in_array\n    ( mixed $needle\n   , array $haystack\n   [, bool $strict = FALSE\n  ] )\n\n  \n   Searches haystack for needle using loose comparison \n   unless strict is set.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     needle\n     \n\n      \n       The searched value.\n      \n      Note: \n       \n        If needle is a string, the comparison is done\n        in a case-sensitive manner.\n       \n      \n     \n\n    \n\n    \n\n     haystack\n     \n\n      \n       The array.\n      \n     \n\n    \n\n    \n\n     strict\n     \n\n      \n       If the third parameter strict is set to TRUE\n       then the in_array() function will also check the\n       types of the\n       needle in the haystack.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if needle is found in the array,\n   FALSE otherwise.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        needle may now be an array.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 in_array() example\n    \n\n&lt;?php$os&nbsp;=&nbsp;array(\"Mac\",&nbsp;\"NT\",&nbsp;\"Irix\",&nbsp;\"Linux\");if&nbsp;(in_array(\"Irix\",&nbsp;$os))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Got&nbsp;Irix\";}if&nbsp;(in_array(\"mac\",&nbsp;$os))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Got&nbsp;mac\";}?&gt;\n\n\n    \n\n    \n     The second condition fails because in_array()\n     is case-sensitive, so the program above will display:\n    \n    \n\nGot Irix\n\n    \n   \n  \n  \n   \n    Example #2 in_array() with strict example\n    \n\n&lt;?php$a&nbsp;=&nbsp;array('1.10',&nbsp;12.4,&nbsp;1.13);if&nbsp;(in_array('12.4',&nbsp;$a,&nbsp;true))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'12.4'&nbsp;found&nbsp;with&nbsp;strict&nbsp;check\\n\";}if&nbsp;(in_array(1.13,&nbsp;$a,&nbsp;true))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"1.13&nbsp;found&nbsp;with&nbsp;strict&nbsp;check\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1.13 found with strict check\n\n    \n   \n  \n  \n   \n    Example #3 in_array() with an array as needle\n    \n\n&lt;?php$a&nbsp;=&nbsp;array(array('p',&nbsp;'h'),&nbsp;array('p',&nbsp;'r'),&nbsp;'o');if&nbsp;(in_array(array('p',&nbsp;'h'),&nbsp;$a))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'ph'&nbsp;was&nbsp;found\\n\";}if&nbsp;(in_array(array('f',&nbsp;'i'),&nbsp;$a))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'fi'&nbsp;was&nbsp;found\\n\";}if&nbsp;(in_array('o',&nbsp;$a))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'o'&nbsp;was&nbsp;found\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n  &#039;ph&#039; was found\n  &#039;o&#039; was found\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    array_search() - Searches the array for a given value and returns the corresponding key if successful\n    isset() - Determine if a variable is set and is not NULL\n    array_key_exists() - Checks if the given key or index exists in the array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ksort.php","title":"ksort","description":"\n \n  ksort\n  (PHP 4, PHP 5)ksort &mdash; Sort an array by key\n\n \n \n  Description\n  \n   bool ksort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   Sorts an array by key, maintaining key to data correlations. This is\n   useful mainly for associative arrays.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details\n       see sort().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ksort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"d\"=&gt;\"lemon\",&nbsp;\"a\"=&gt;\"orange\",&nbsp;\"b\"=&gt;\"banana\",&nbsp;\"c\"=&gt;\"apple\");ksort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\na = orange\nb = banana\nc = apple\nd = lemon\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    asort() - Sort an array and maintain index association\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.list.php","title":"list","description":"\n \n  list\n  (PHP 4, PHP 5)list &mdash; Assign variables as if they were an array\n\n \n \n  Description\n  \n   array list\n    ( mixed $varname\n   [, mixed $...\n  ] )\n\n  \n   Like array(), this is not really a function,\n   but a language construct.  list() is used to\n   assign a list of variables in one operation.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     varname\n     \n\n      \n       A variable.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the assigned array.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 list() examples\n    \n\n&lt;?php$info&nbsp;=&nbsp;array('coffee',&nbsp;'brown',&nbsp;'caffeine');\/\/&nbsp;Listing&nbsp;all&nbsp;the&nbsp;variableslist($drink,&nbsp;$color,&nbsp;$power)&nbsp;=&nbsp;$info;echo&nbsp;\"$drink&nbsp;is&nbsp;$color&nbsp;and&nbsp;$power&nbsp;makes&nbsp;it&nbsp;special.\\n\";\/\/&nbsp;Listing&nbsp;some&nbsp;of&nbsp;themlist($drink,&nbsp;,&nbsp;$power)&nbsp;=&nbsp;$info;echo&nbsp;\"$drink&nbsp;has&nbsp;$power.\\n\";\/\/&nbsp;Or&nbsp;let's&nbsp;skip&nbsp;to&nbsp;only&nbsp;the&nbsp;third&nbsp;onelist(&nbsp;,&nbsp;,&nbsp;$power)&nbsp;=&nbsp;$info;echo&nbsp;\"I&nbsp;need&nbsp;$power!\\n\";\/\/&nbsp;list()&nbsp;doesn't&nbsp;work&nbsp;with&nbsp;stringslist($bar)&nbsp;=&nbsp;\"abcde\";var_dump($bar);&nbsp;\/\/&nbsp;NULL?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 An example use of list()\n    \n\n&lt;table&gt;&nbsp;&lt;tr&gt;&nbsp;&nbsp;&lt;th&gt;Employee&nbsp;name&lt;\/th&gt;&nbsp;&nbsp;&lt;th&gt;Salary&lt;\/th&gt;&nbsp;&lt;\/tr&gt;&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,&nbsp;name,&nbsp;salary&nbsp;FROM&nbsp;employees\",&nbsp;$conn);while&nbsp;(list($id,&nbsp;$name,&nbsp;$salary)&nbsp;=&nbsp;mysql_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&lt;tr&gt;\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;&nbsp;&lt;td&gt;&lt;a&nbsp;href=\\\"info.php?id=$id\\\"&gt;$name&lt;\/a&gt;&lt;\/td&gt;\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;&nbsp;&lt;td&gt;$salary&lt;\/td&gt;\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;&lt;\/tr&gt;\\n\";}?&gt;&lt;\/table&gt;\n\n    \n\n   \n  \n  \n   \n    Example #3 Using nested list()\n    \n\n&lt;?phplist($a,&nbsp;list($b,&nbsp;$c))&nbsp;=&nbsp;array(1,&nbsp;array(2,&nbsp;3));var_dump($a,&nbsp;$b,&nbsp;$c);?&gt;\n\n\n    \n\n    \n\nint(1)\nint(2)\nint(3)\n\n    \n   \n  \n  \n   \n    Example #4 Using list() with array indices\n    \n\n&lt;?php$info&nbsp;=&nbsp;array('coffee',&nbsp;'brown',&nbsp;'caffeine');list($a[0],&nbsp;$a[1],&nbsp;$a[2])&nbsp;=&nbsp;$info;var_dump($a);?&gt;\n\n\n    \n\n    \n     Gives the following output (note the order of the elements compared in\n     which order they were written in the list() syntax):\n    \n    \n\narray(3) {\n  [2]=&gt;\n  string(8) &quot;caffeine&quot;\n  [1]=&gt;\n  string(5) &quot;brown&quot;\n  [0]=&gt;\n  string(6) &quot;coffee&quot;\n}\n\n    \n   \n  \n \n\n \n  Notes\n  Warning\n   \n    list() assigns the values starting with the right-most\n    parameter. If you are using plain variables, you don&#039;t have to worry\n    about this. But if you are using arrays with indices you usually expect\n    the order of the indices in the array the same you wrote in the\n    list() from left to right; which it isn&#039;t. It&#039;s\n    assigned in the reverse order.\n   \n  \n  Warning\n   \n    Modification of the array during list() execution (e.g.\n    using list($a, $b) = $b) results in undefined behavior.\n   \n  \n  Note: \n   \n    list() only works on numerical arrays and assumes\n    the numerical indices start at 0.\n   \n  \n \n\n \n  See Also\n  \n   \n    each() - Return the current key and value pair from an array and advance the array cursor\n    array() - Create an array\n    extract() - Import variables into the current symbol table from an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.natcasesort.php","title":"natcasesort","description":"\n \n  natcasesort\n  (PHP 4, PHP 5)natcasesort &mdash; Sort an array using a case insensitive &quot;natural order&quot; algorithm\n\n \n \n  Description\n  \n   bool natcasesort\n    ( array &$array\n   )\n\n  \n   natcasesort() is a case insensitive version of\n   natsort().\n  \n  \n   This function implements a sort algorithm that orders\n   alphanumeric strings in the way a human being would while maintaining\n   key\/value associations.  This is described as a &quot;natural ordering&quot;.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 natcasesort() example\n    \n\n&lt;?php$array1&nbsp;=&nbsp;$array2&nbsp;=&nbsp;array('IMG0.png',&nbsp;'img12.png',&nbsp;'img10.png',&nbsp;'img2.png',&nbsp;'img1.png',&nbsp;'IMG3.png');sort($array1);echo&nbsp;\"Standard&nbsp;sorting\\n\";print_r($array1);natcasesort($array2);echo&nbsp;\"\\nNatural&nbsp;order&nbsp;sorting&nbsp;(case-insensitive)\\n\";print_r($array2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nStandard sorting\nArray\n(\n    [0] =&gt; IMG0.png\n    [1] =&gt; IMG3.png\n    [2] =&gt; img1.png\n    [3] =&gt; img10.png\n    [4] =&gt; img12.png\n    [5] =&gt; img2.png\n)\n\nNatural order sorting (case-insensitive)\nArray\n(\n    [0] =&gt; IMG0.png\n    [4] =&gt; img1.png\n    [3] =&gt; img2.png\n    [5] =&gt; IMG3.png\n    [2] =&gt; img10.png\n    [1] =&gt; img12.png\n)\n\n    \n    \n     For more information see: Martin Pool&#039;s &raquo;&nbsp;Natural Order String Comparison\n     page.\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    natsort() - Sort an array using a &quot;natural order&quot; algorithm\n    The comparison of array sorting functions\n    strnatcmp() - String comparisons using a &quot;natural order&quot; algorithm\n    strnatcasecmp() - Case insensitive string comparisons using a &quot;natural order&quot; algorithm\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pos.php","title":"pos","description":"\n \n  pos\n  (PHP 4, PHP 5)pos &mdash; Alias of current()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   current()\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.natsort.php","title":"natsort","description":"\n \n  natsort\n  (PHP 4, PHP 5)natsort &mdash; Sort an array using a &quot;natural order&quot; algorithm\n\n \n \n  Description\n  \n   bool natsort\n    ( array &$array\n   )\n\n  \n   This function implements a sort algorithm that orders alphanumeric strings\n   in the way a human being would while maintaining key\/value associations.\n   This is described as a &quot;natural ordering&quot;.  An example of the difference\n   between this algorithm and the regular computer string sorting algorithms\n   (used in sort()) can be seen in the example below.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      Version\n      Description\n     \n\n    \n\n    \n     \n      5.2.10\n      \n       Zero padded numeric strings (e.g., &#039;00005&#039;) now essentially ignore the 0 padding.\n      \n     \n\n    \n   \n  \n\n \n\n\n \n  Examples\n  \n   \n    Example #1 natsort() examples demonstrating basic usage\n    \n\n&lt;?php$array1&nbsp;=&nbsp;$array2&nbsp;=&nbsp;array(\"img12.png\",&nbsp;\"img10.png\",&nbsp;\"img2.png\",&nbsp;\"img1.png\");asort($array1);echo&nbsp;\"Standard&nbsp;sorting\\n\";print_r($array1);natsort($array2);echo&nbsp;\"\\nNatural&nbsp;order&nbsp;sorting\\n\";print_r($array2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nStandard sorting\nArray\n(\n    [3] =&gt; img1.png\n    [1] =&gt; img10.png\n    [0] =&gt; img12.png\n    [2] =&gt; img2.png\n)\n\nNatural order sorting\nArray\n(\n    [3] =&gt; img1.png\n    [2] =&gt; img2.png\n    [1] =&gt; img10.png\n    [0] =&gt; img12.png\n)\n\n    \n    \n     For more information see: Martin Pool&#039;s &raquo;&nbsp;Natural Order String Comparison\n     page.\n    \n   \n   \n    Example #2 natsort() examples demonstrating potential gotchas\n    \n\n&lt;?phpecho&nbsp;\"Negative&nbsp;numbers\\n\";$negative&nbsp;=&nbsp;array('-5','3','-2','0','-1000','9','1');print_r($negative);natsort($negative);print_r($negative);echo&nbsp;\"Zero&nbsp;padding\\n\";$zeros&nbsp;=&nbsp;array('09',&nbsp;'8',&nbsp;'10',&nbsp;'009',&nbsp;'011',&nbsp;'0');&nbsp;print_r($zeros);natsort($zeros);print_r($zeros);echo&nbsp;\"Other&nbsp;characters&nbsp;interfering\\n\";$images_oops&nbsp;=&nbsp;array('image_1.jpg','image_12.jpg',&nbsp;'image_21.jpg',&nbsp;'image_4.jpg');print_r($images_oops);natsort($images_oops);print_r($images_oops);echo&nbsp;\"Sort&nbsp;by&nbsp;keys\\n\";$smoothie&nbsp;=&nbsp;array('orange'&nbsp;=&gt;&nbsp;1,&nbsp;'apple'&nbsp;=&gt;&nbsp;1,&nbsp;'yogurt'&nbsp;=&gt;&nbsp;4,&nbsp;'banana'&nbsp;=&gt;&nbsp;4);print_r($smoothie);uksort(&nbsp;$smoothie,&nbsp;'strnatcmp');print_r($smoothie);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nNegative numbers\nArray\n(\n    [0] =&gt; -5\n    [1] =&gt; 3\n    [2] =&gt; -2\n    [3] =&gt; 0\n    [4] =&gt; -1000\n    [5] =&gt; 9\n    [6] =&gt; 1\n)\nArray\n(\n    [2] =&gt; -2\n    [0] =&gt; -5\n    [4] =&gt; -1000\n    [3] =&gt; 0\n    [6] =&gt; 1\n    [1] =&gt; 3\n    [5] =&gt; 9\n)\n\nZero padding\nArray\n(\n    [0] =&gt; 09\n    [1] =&gt; 8\n    [2] =&gt; 10\n    [3] =&gt; 009\n    [4] =&gt; 011\n    [5] =&gt; 0\n)\nArray\n(\n    [5] =&gt; 0\n    [1] =&gt; 8\n    [3] =&gt; 009\n    [0] =&gt; 09\n    [2] =&gt; 10\n    [4] =&gt; 011\n)\n\nOther characters interfering\nArray\n(\n    [0] =&gt; image_1.jpg\n    [1] =&gt; image_12.jpg\n    [2] =&gt; image_21.jpg\n    [3] =&gt; image_4.jpg\n)\nArray\n(\n    [0] =&gt; image_1.jpg\n    [3] =&gt; image_4.jpg\n    [1] =&gt; image_12.jpg\n    [2] =&gt; image_21.jpg\n)\n\nSort by keys\nArray\n(\n    [orange] =&gt; 1\n    [apple]  =&gt; 1\n    [yogurt] =&gt; 4\n    [banana] =&gt; 4\n)\nArray\n(\n    [apple]  =&gt; 1\n    [banana] =&gt; 4\n    [orange] =&gt; 1\n    [yogurt] =&gt; 4\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    natcasesort() - Sort an array using a case insensitive &quot;natural order&quot; algorithm\n    The comparison of array sorting functions\n    strnatcmp() - String comparisons using a &quot;natural order&quot; algorithm\n    strnatcasecmp() - Case insensitive string comparisons using a &quot;natural order&quot; algorithm\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.next.php","title":"next","description":"\n \n  next\n  (PHP 4, PHP 5)next &mdash; Advance the internal array pointer of an array\n\n \n \n  Description\n  \n   mixed next\n    ( array &$array\n   )\n\n  \n   next() behaves like\n   current(), with one difference.  It advances\n   the internal array pointer one place forward before returning the\n   element value.  That means it returns the next array value and\n   advances the internal array pointer by one.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array being affected.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the array value in the next place that&#039;s pointed to by the\n   internal array pointer, or FALSE if there are no more elements.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of next() and friends\n    \n\n&lt;?php$transport&nbsp;=&nbsp;array('foot',&nbsp;'bike',&nbsp;'car',&nbsp;'plane');$mode&nbsp;=&nbsp;current($transport);&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'foot';$mode&nbsp;=&nbsp;next($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;next($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'car';$mode&nbsp;=&nbsp;prev($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;end($transport);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'plane';?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    You won&#039;t be able to distinguish the end of an array from a\n    boolean FALSE element. To properly traverse an array\n    which may contain FALSE elements, see the each()\n    function.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    current() - Return the current element in an array\n    end() - Set the internal pointer of an array to its last element\n    prev() - Rewind the internal array pointer\n    reset() - Set the internal pointer of an array to its first element\n    each() - Return the current key and value pair from an array and advance the array cursor\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.prev.php","title":"prev","description":"\n \n  prev\n  (PHP 4, PHP 5)prev &mdash; Rewind the internal array pointer\n\n \n \n  Description\n  \n   mixed prev\n    ( array &$array\n   )\n\n  \n   Rewind the internal array pointer.\n  \n  \n   prev() behaves just like next(),\n   except it rewinds the internal array pointer one place instead of advancing it.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the array value in the previous place that&#039;s pointed to by\n   the internal array pointer, or FALSE if there are no more\n   elements.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Example use of prev() and friends\n    \n\n&lt;?php$transport&nbsp;=&nbsp;array('foot',&nbsp;'bike',&nbsp;'car',&nbsp;'plane');$mode&nbsp;=&nbsp;current($transport);&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'foot';$mode&nbsp;=&nbsp;next($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;next($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'car';$mode&nbsp;=&nbsp;prev($transport);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'bike';$mode&nbsp;=&nbsp;end($transport);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$mode&nbsp;=&nbsp;'plane';?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n  Note: \n   \n    You won&#039;t be able to distinguish the beginning of an array from a\n    boolean FALSE element. To properly traverse an array\n    which may contain FALSE elements, see the each()\n    function.\n   \n  \n \n\n \n  See Also\n  \n   \n    current() - Return the current element in an array\n    end() - Set the internal pointer of an array to its last element\n    next() - Advance the internal array pointer of an array\n    reset() - Set the internal pointer of an array to its first element\n    each() - Return the current key and value pair from an array and advance the array cursor\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.reset.php","title":"reset","description":"\n \n  reset\n  (PHP 4, PHP 5)reset &mdash; Set the internal pointer of an array to its first element\n\n \n \n  Description\n  \n   mixed reset\n    ( array &$array\n   )\n\n  \n   reset() rewinds array&#039;s internal\n   pointer to the first element and returns the value of the first array\n   element.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the value of the first array element, or FALSE if the array is\n   empty.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 reset() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array('step&nbsp;one',&nbsp;'step&nbsp;two',&nbsp;'step&nbsp;three',&nbsp;'step&nbsp;four');\/\/&nbsp;by&nbsp;default,&nbsp;the&nbsp;pointer&nbsp;is&nbsp;on&nbsp;the&nbsp;first&nbsp;elementecho&nbsp;current($array)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;\/\/&nbsp;\"step&nbsp;one\"\/\/&nbsp;skip&nbsp;two&nbsp;stepsnext($array);next($array);echo&nbsp;current($array)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;\/\/&nbsp;\"step&nbsp;three\"\/\/&nbsp;reset&nbsp;pointer,&nbsp;start&nbsp;again&nbsp;on&nbsp;step&nbsp;onereset($array);echo&nbsp;current($array)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;\/\/&nbsp;\"step&nbsp;one\"?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    current() - Return the current element in an array\n    each() - Return the current key and value pair from an array and advance the array cursor\n    end() - Set the internal pointer of an array to its last element\n    next() - Advance the internal array pointer of an array\n    prev() - Rewind the internal array pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.range.php","title":"range","description":"\n \n  range\n  (PHP 4, PHP 5)range &mdash; Create an array containing a range of elements\n\n \n \n  Description\n  \n   array range\n    ( mixed $start\n   , mixed $limit\n   [, number $step = 1\n  ] )\n\n  \n   Create an array containing a range of elements.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     start\n     \n\n      \n       First value of the sequence.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       The sequence is ended upon reaching the\n       limit value.\n      \n     \n\n    \n\n    \n\n     step\n     \n\n      \n       If a step value is given, it will be used as the\n       increment between elements in the sequence.  step\n       should be given as a positive number.  If not specified,\n       step will default to 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of elements from start to\n   limit, inclusive.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The optional step parameter was added.\n       \n      \n\n      \n       4.1.0 to 4.3.2\n       \n        In PHP versions 4.1.0 through 4.3.2, range() sees\n        numeric strings as strings and not integers.  Instead, they will be\n        used for character sequences.  For example, &quot;4242&quot;\n        is treated as &quot;4&quot;.\n       \n      \n\n      \n       4.1.0\n       \n        Prior to PHP 4.1.0, range() only generated\n        incrementing integer arrays.  Support for character sequences and\n        decrementing arrays was added in 4.1.0.  Character sequence values\n        are limited to a length of one.  If a length greater than one is\n        entered, only the first character is used.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 range() examples\n    \n\n&lt;?php\/\/&nbsp;array(0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9,&nbsp;10,&nbsp;11,&nbsp;12)foreach&nbsp;(range(0,&nbsp;12)&nbsp;as&nbsp;$number)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$number;}\/\/&nbsp;The&nbsp;step&nbsp;parameter&nbsp;was&nbsp;introduced&nbsp;in&nbsp;5.0.0\/\/&nbsp;array(0,&nbsp;10,&nbsp;20,&nbsp;30,&nbsp;40,&nbsp;50,&nbsp;60,&nbsp;70,&nbsp;80,&nbsp;90,&nbsp;100)foreach&nbsp;(range(0,&nbsp;100,&nbsp;10)&nbsp;as&nbsp;$number)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$number;}\/\/&nbsp;Use&nbsp;of&nbsp;character&nbsp;sequences&nbsp;introduced&nbsp;in&nbsp;4.1.0\/\/&nbsp;array('a',&nbsp;'b',&nbsp;'c',&nbsp;'d',&nbsp;'e',&nbsp;'f',&nbsp;'g',&nbsp;'h',&nbsp;'i');foreach&nbsp;(range('a',&nbsp;'i')&nbsp;as&nbsp;$letter)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$letter;}\/\/&nbsp;array('c',&nbsp;'b',&nbsp;'a');foreach&nbsp;(range('c',&nbsp;'a')&nbsp;as&nbsp;$letter)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$letter;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    shuffle() - Shuffle an array\n    array_fill() - Fill an array with values\n    foreach\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sizeof.php","title":"sizeof","description":"\n \n  sizeof\n  (PHP 4, PHP 5)sizeof &mdash; Alias of count()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   count().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rsort.php","title":"rsort","description":"\n \n  rsort\n  (PHP 4, PHP 5)rsort &mdash; Sort an array in reverse order\n\n \n \n  Description\n  \n   bool rsort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   This function sorts an array in reverse order (highest to lowest).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       You may modify the behavior of the sort using the optional\n       parameter sort_flags, for details see\n       sort().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 rsort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"lemon\",&nbsp;\"orange\",&nbsp;\"banana\",&nbsp;\"apple\");rsort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key&nbsp;=&nbsp;$val\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n0 = orange\n1 = lemon\n2 = banana\n3 = apple\n\n    \n    \n     The fruits have been sorted in reverse alphabetical order.\n    \n   \n  \n \n\n \n  Notes\n  Note: This function\nassigns new keys to the elements in array.\nIt will remove any existing keys that may have been assigned, rather\nthan just reordering the keys.\n \n\n \n  See Also\n  \n   \n    arsort() - Sort an array in reverse order and maintain index association\n    krsort() - Sort an array by key in reverse order\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.shuffle.php","title":"shuffle","description":"\n \n  shuffle\n  (PHP 4, PHP 5)shuffle &mdash; Shuffle an array\n\n \n \n  Description\n  \n   bool shuffle\n    ( array &$array\n   )\n\n  \n   This function shuffles (randomizes the order of the elements in) an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The array.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 shuffle() example\n    \n\n&lt;?php$numbers&nbsp;=&nbsp;range(1,&nbsp;20);shuffle($numbers);foreach&nbsp;($numbers&nbsp;as&nbsp;$number)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$number&nbsp;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      4.2.0The random\nnumber generator is seeded automatically.\n\n     \n    \n   \n\n  \n \n\n \n  Notes\n  Note: This function\nassigns new keys to the elements in array.\nIt will remove any existing keys that may have been assigned, rather\nthan just reordering the keys.\n \n\n \n  See Also\n  \n   \n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.uasort.php","title":"uasort","description":"\n \n  uasort\n  (PHP 4, PHP 5)uasort &mdash; Sort an array with a user-defined comparison function and maintain index association\n\n \n\n \n  Description\n  \n   bool uasort\n    ( array &$array\n   , callback $cmp_function\n   )\n\n  \n   This function sorts an array such that array indices maintain their\n   correlation with the array elements they are associated with, using a\n   user-defined comparison function.\n  \n  \n   This is used mainly when sorting associative arrays where the actual\n   element order is significant.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     cmp_function\n     \n\n      \n       See usort() and uksort() for\n       examples of user-defined comparison functions.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Basic uasort() example\n    \n\n&lt;?php\/\/&nbsp;Comparison&nbsp;functionfunction&nbsp;cmp($a,&nbsp;$b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a&nbsp;==&nbsp;$b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a&nbsp;&lt;&nbsp;$b)&nbsp;?&nbsp;-1&nbsp;:&nbsp;1;}\/\/&nbsp;Array&nbsp;to&nbsp;be&nbsp;sorted$array&nbsp;=&nbsp;array('a'&nbsp;=&gt;&nbsp;4,&nbsp;'b'&nbsp;=&gt;&nbsp;8,&nbsp;'c'&nbsp;=&gt;&nbsp;-1,&nbsp;'d'&nbsp;=&gt;&nbsp;-9,&nbsp;'e'&nbsp;=&gt;&nbsp;2,&nbsp;'f'&nbsp;=&gt;&nbsp;5,&nbsp;'g'&nbsp;=&gt;&nbsp;3,&nbsp;'h'&nbsp;=&gt;&nbsp;-4);print_r($array);\/\/&nbsp;Sort&nbsp;and&nbsp;print&nbsp;the&nbsp;resulting&nbsp;arrayuasort($array,&nbsp;'cmp');print_r($array);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [a] =&gt; 4\n    [b] =&gt; 8\n    [c] =&gt; -1\n    [d] =&gt; -9\n    [e] =&gt; 2\n    [f] =&gt; 5\n    [g] =&gt; 3\n    [h] =&gt; -4\n)\nArray\n(\n    [d] =&gt; -9\n    [h] =&gt; -4\n    [c] =&gt; -1\n    [e] =&gt; 2\n    [g] =&gt; 3\n    [a] =&gt; 4\n    [f] =&gt; 5\n    [b] =&gt; 8\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    usort() - Sort an array by values using a user-defined comparison function\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sort.php","title":"sort","description":"\n \n  sort\n  (PHP 4, PHP 5)sort &mdash; Sort an array\n\n \n \n  Description\n  \n   bool sort\n    ( array &$array\n   [, int $sort_flags = SORT_REGULAR\n  ] )\n\n  \n   This function sorts an array.  Elements will be arranged from\n   lowest to highest when this function has completed.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     sort_flags\n     \n\n      \n       The optional second parameter sort_flags\n       may be used to modify the sorting behavior using these values:\n      \n      \n       Sorting type flags:\n       \n        \n         SORT_REGULAR - compare items normally\n         (don&#039;t change types)\n        \n        \n         SORT_NUMERIC - compare items numerically\n        \n        \n         SORT_STRING - compare items as strings\n        \n        \n         SORT_LOCALE_STRING - compare items as\n          strings, based on the current locale. Added in PHP 4.4.0 and 5.0.2, it\n          uses the locale, which can be changed using setlocale().\n          \n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 sort() example\n    \n\n&lt;?php$fruits&nbsp;=&nbsp;array(\"lemon\",&nbsp;\"orange\",&nbsp;\"banana\",&nbsp;\"apple\");sort($fruits);foreach&nbsp;($fruits&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"fruits[\"&nbsp;.&nbsp;$key&nbsp;.&nbsp;\"]&nbsp;=&nbsp;\"&nbsp;.&nbsp;$val&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfruits[0] = apple\nfruits[1] = banana\nfruits[2] = lemon\nfruits[3] = orange\n\n    \n   \n  \n  \n   The fruits have been sorted in alphabetical order.\n  \n \n\n \n  Notes\n  Note: This function\nassigns new keys to the elements in array.\nIt will remove any existing keys that may have been assigned, rather\nthan just reordering the keys.\n  Note: \n   \n    Like most PHP sorting functions, sort() uses an\n    implementation of &raquo;&nbsp;Quicksort.\n   \n  \n  Warning\n   \n    Be careful when sorting arrays with mixed types values because\n    sort() can produce unpredictable results.\n   \n  \n \n\n \n  See Also\n  \n   \n    asort() - Sort an array and maintain index association\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.uksort.php","title":"uksort","description":"\n \n  uksort\n  (PHP 4, PHP 5)uksort &mdash; Sort an array by keys using a user-defined comparison function\n\n \n \n  Description\n  \n   bool uksort\n    ( array &$array\n   , callback $cmp_function\n   )\n\n  \n   uksort() will sort the keys of an array using a\n   user-supplied comparison function.  If the array you wish to sort\n   needs to be sorted by some non-trivial criteria, you should use\n   this function.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     cmp_function\n     \n\n      \n       The callback comparison function.\n      \n      \n       Function cmp_function should accept two\n       parameters which will be filled by pairs of array keys.\n       The comparison function must return an integer less than, equal\n       to, or greater than zero if the first argument is considered to\n       be respectively less than, equal to, or greater than the\n       second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 uksort() example\n    \n\n&lt;?phpfunction&nbsp;cmp($a,&nbsp;$b){&nbsp;&nbsp;&nbsp;&nbsp;$a&nbsp;=&nbsp;preg_replace('@^(a|an|the)&nbsp;@',&nbsp;'',&nbsp;$a);&nbsp;&nbsp;&nbsp;&nbsp;$b&nbsp;=&nbsp;preg_replace('@^(a|an|the)&nbsp;@',&nbsp;'',&nbsp;$b);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;strcasecmp($a,&nbsp;$b);}$a&nbsp;=&nbsp;array(\"John\"&nbsp;=&gt;&nbsp;1,&nbsp;\"the&nbsp;Earth\"&nbsp;=&gt;&nbsp;2,&nbsp;\"an&nbsp;apple\"&nbsp;=&gt;&nbsp;3,&nbsp;\"a&nbsp;banana\"&nbsp;=&gt;&nbsp;4);uksort($a,&nbsp;\"cmp\");foreach&nbsp;($a&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key:&nbsp;$value\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nan apple: 3\na banana: 4\nthe Earth: 2\nJohn: 1\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    usort() - Sort an array by values using a user-defined comparison function\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-close.php","title":"dba_close","description":"\n \n  dba_close\n  (PHP 4, PHP 5)dba_close &mdash; Close a DBA database\n\n \n \n  Description\n  \n   void dba_close\n    ( resource $handle\n   )\n\n  \n   dba_close() closes the established database and frees\n   all resources of the specified database handle.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  See Also\n  \n   \n    dba_open() - Open database\n    dba_popen() - Open database persistently\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-delete.php","title":"dba_delete","description":"\n \n  dba_delete\n  (PHP 4, PHP 5)dba_delete &mdash; Delete DBA entry specified by key\n\n \n \n  Description\n  \n   bool dba_delete\n    ( string $key\n   , resource $handle\n   )\n\n  \n   dba_delete() deletes the specified entry from the database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key of the entry which is deleted.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_exists() - Check whether key exists\n    dba_fetch() - Fetch data specified by key\n    dba_insert() - Insert entry\n    dba_replace() - Replace or insert entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.usort.php","title":"usort","description":"\n \n  usort\n  (PHP 4, PHP 5)usort &mdash; Sort an array by values using a user-defined comparison function\n\n \n \n  Description\n  \n   bool usort\n    ( array &$array\n   , callback $cmp_function\n   )\n\n  \n   This function will sort an array by its values using a user-supplied\n   comparison function.  If the array you wish to sort needs to be sorted by\n   some non-trivial criteria, you should use this function.\n  \n  Note: \n   \n    If two members compare as equal, their order in the sorted array is undefined.\n   \n  \n  Note: This function\nassigns new keys to the elements in array.\nIt will remove any existing keys that may have been assigned, rather\nthan just reordering the keys.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     array\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     cmp_function\n     \n\n      \n       The comparison function must return an integer less than, equal to, or\n       greater than zero if the first argument is considered to be\n       respectively less than, equal to, or greater than the second.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        A new sort algorithm was introduced. The cmp_function\n        doesn&#039;t keep the original order for elements comparing as equal.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 usort() example\n    \n\n&lt;?phpfunction&nbsp;cmp($a,&nbsp;$b){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($a&nbsp;==&nbsp;$b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($a&nbsp;&lt;&nbsp;$b)&nbsp;?&nbsp;-1&nbsp;:&nbsp;1;}$a&nbsp;=&nbsp;array(3,&nbsp;2,&nbsp;5,&nbsp;6,&nbsp;1);usort($a,&nbsp;\"cmp\");foreach&nbsp;($a&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key:&nbsp;$value\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n0: 1\n1: 2\n2: 3\n3: 5\n4: 6\n\n    \n   \n  \n  Note: \n   \n    Obviously in this trivial case the sort()\n    function would be more appropriate.\n   \n  \n  \n   \n    Example #2 \n     usort() example using multi-dimensional array\n    \n    \n\n&lt;?phpfunction&nbsp;cmp($a,&nbsp;$b){&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;strcmp($a[\"fruit\"],&nbsp;$b[\"fruit\"]);}$fruits[0][\"fruit\"]&nbsp;=&nbsp;\"lemons\";$fruits[1][\"fruit\"]&nbsp;=&nbsp;\"apples\";$fruits[2][\"fruit\"]&nbsp;=&nbsp;\"grapes\";usort($fruits,&nbsp;\"cmp\");while&nbsp;(list($key,&nbsp;$value)&nbsp;=&nbsp;each($fruits))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\$fruits[$key]:&nbsp;\"&nbsp;.&nbsp;$value[\"fruit\"]&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    \n     When sorting a multi-dimensional array, $a and\n    $b contain references to the first index of the array.\n    \n    The above example will output:\n    \n\n$fruits[0]: apples\n$fruits[1]: grapes\n$fruits[2]: lemons\n\n    \n   \n  \n  \n   \n    Example #3 \n     usort() example using a member function of an object\n    \n    \n\n&lt;?phpclass&nbsp;TestObj&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;$name;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;TestObj($name)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;This&nbsp;is&nbsp;the&nbsp;static&nbsp;comparing&nbsp;function:&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;cmp_obj($a,&nbsp;$b)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$al&nbsp;=&nbsp;strtolower($a-&gt;name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bl&nbsp;=&nbsp;strtolower($b-&gt;name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($al&nbsp;==&nbsp;$bl)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;($al&nbsp;&gt;&nbsp;$bl)&nbsp;?&nbsp;+1&nbsp;:&nbsp;-1;&nbsp;&nbsp;&nbsp;&nbsp;}}$a[]&nbsp;=&nbsp;new&nbsp;TestObj(\"c\");$a[]&nbsp;=&nbsp;new&nbsp;TestObj(\"b\");$a[]&nbsp;=&nbsp;new&nbsp;TestObj(\"d\");usort($a,&nbsp;array(\"TestObj\",&nbsp;\"cmp_obj\"));foreach&nbsp;($a&nbsp;as&nbsp;$item)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$item-&gt;name&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nb\nc\nd\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    uasort() - Sort an array with a user-defined comparison function and maintain index association\n    The comparison of array sorting functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-exists.php","title":"dba_exists","description":"\n \n  dba_exists\n  (PHP 4, PHP 5)dba_exists &mdash; Check whether key exists\n\n \n \n  Description\n  \n   bool dba_exists\n    ( string $key\n   , resource $handle\n   )\n\n  \n   dba_exists() checks whether the specified\n   key exists in the database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key the check is performed for.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the key exists, FALSE otherwise.\n  \n \n\n \n  See Also\n  \n   \n    dba_delete() - Delete DBA entry specified by key\n    dba_fetch() - Fetch data specified by key\n    dba_insert() - Insert entry\n    dba_replace() - Replace or insert entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-fetch.php","title":"dba_fetch","description":"\n \n  dba_fetch\n  (PHP 4, PHP 5)dba_fetch &mdash; Fetch data specified by key\n\n \n \n  Description\n  \n   string dba_fetch\n    ( string $key\n   , resource $handle\n   )\n\n   \n    string dba_fetch\n     ( string $key\n    , int $skip\n    , resource $handle\n    )\n\n  \n   dba_fetch() fetches the data specified by\n   key from the database specified with\n   handle.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key the data is specified by.\n      \n      Note: \n       \n        When working with inifiles this function accepts arrays as keys\n        where index 0 is the group and index 1 is the value name. See:\n        dba_key_split().\n       \n      \n     \n\n    \n\n    \n\n     skip\n     \n\n      \n       The number of key-value pairs to ignore when using cdb databases. \n       This value is ignored for all other databases which do not support\n       multiple keys with the same name.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the associated string if the key\/data pair is found, FALSE \n   otherwise.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The skip parameter is available to support \n        cdb&#039;s capability of multiple keys having the same name.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    dba_exists() - Check whether key exists\n    dba_delete() - Delete DBA entry specified by key\n    dba_insert() - Insert entry\n    dba_replace() - Replace or insert entry\n    dba_key_split() - Splits a key in string representation into array representation\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-handlers.php","title":"dba_handlers","description":"\n \n  dba_handlers\n  (PHP 4 &gt;= 4.3.0, PHP 5)dba_handlers &mdash; List all the handlers available\n\n \n \n  Description\n  \n   array dba_handlers\n    ([ bool $full_info = false\n  ] )\n\n  \n   dba_handlers() list all the handlers supported by this\n   extension.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     full_info\n     \n\n      \n       Turns on\/off full information display in the result.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of database handlers. If full_info\n   is set to TRUE, the array will be associative with the handlers names as\n   keys, and their version information as value. Otherwise, the result will be\n   an indexed array of handlers names.  \n  \n  Note: \n   \n    When the internal cdb library is used you will see \n    cdb and cdb_make.\n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 dba_handlers() Example\n    \n\n&lt;?phpecho&nbsp;\"Available&nbsp;DBA&nbsp;handlers:\\n\";foreach&nbsp;(dba_handlers(true)&nbsp;as&nbsp;$handler_name&nbsp;=&gt;&nbsp;$handler_version)&nbsp;{&nbsp;&nbsp;\/\/&nbsp;clean&nbsp;the&nbsp;versions&nbsp;&nbsp;$handler_version&nbsp;=&nbsp;str_replace('$',&nbsp;'',&nbsp;$handler_version);&nbsp;&nbsp;echo&nbsp;\"&nbsp;-&nbsp;$handler_name:&nbsp;$handler_version\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nAvailable DBA handlers:\n - cdb: 0.75, Revision: 1.3.2.3 \n - cdb_make: 0.75, Revision: 1.2.2.4 \n - db2: Sleepycat Software: Berkeley DB 2.7.7: (08\/20\/99)\n - inifile: 1.0, Revision: 1.6.2.3 \n - flatfile: 1.0, Revision: 1.5.2.4 \n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-firstkey.php","title":"dba_firstkey","description":"\n \n  dba_firstkey\n  (PHP 4, PHP 5)dba_firstkey &mdash; Fetch first key\n\n \n \n  Description\n  \n   string dba_firstkey\n    ( resource $handle\n   )\n\n  \n   dba_firstkey() returns the first key of the database\n   and resets the internal key pointer. This permits a linear search through\n   the whole database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the key on success or FALSE on failure. \n  \n \n\n \n  See Also\n  \n   \n    dba_nextkey() - Fetch next key\n    dba_key_split() - Splits a key in string representation into array representation\n    Example 2 in the DBA examples\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-key-split.php","title":"dba_key_split","description":"\n \n  dba_key_split\n  (PHP 5)dba_key_split &mdash; \n   Splits a key in string representation into array representation\n  \n\n \n \n  Description\n  \n   mixed dba_key_split\n    ( mixed $key\n   )\n\n  \n   dba_key_split() splits a key (string representation)\n   into an array representation.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key in string representation.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of the form array(0 =&gt; group, 1 =&gt; \n   value_name). This function will return FALSE if \n   key is NULL or FALSE.\n  \n \n\n \n  See Also\n  \n   \n    dba_firstkey() - Fetch first key\n    dba_nextkey() - Fetch next key\n    dba_fetch() - Fetch data specified by key\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-insert.php","title":"dba_insert","description":"\n \n  dba_insert\n  (PHP 4, PHP 5)dba_insert &mdash; Insert entry\n\n \n \n  Description\n  \n   bool dba_insert\n    ( string $key\n   , string $value\n   , resource $handle\n   )\n\n  \n   dba_insert() inserts the entry described with\n   key and value into the\n   database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key of the entry to be inserted. If this key already exist in the \n       database, this function will fail. Use dba_replace()\n       if you need to replace an existent key.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The value to be inserted.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_exists() - Check whether key exists\n    dba_delete() - Delete DBA entry specified by key\n    dba_fetch() - Fetch data specified by key\n    dba_replace() - Replace or insert entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-list.php","title":"dba_list","description":"\n \n  dba_list\n  (PHP 4 &gt;= 4.3.0, PHP 5)dba_list &mdash; List all open database files\n\n \n \n  Description\n  \n   array dba_list\n    ( void\n   )\n\n  \n   dba_list() list all open database files.\n  \n \n\n \n  Return Values\n  \n   An associative array, in the form resourceid =&gt; filename.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-nextkey.php","title":"dba_nextkey","description":"\n \n  dba_nextkey\n  (PHP 4, PHP 5)dba_nextkey &mdash; Fetch next key\n\n \n \n  Description\n  \n   string dba_nextkey\n    ( resource $handle\n   )\n\n  \n   dba_nextkey() returns the next key of the database\n   and advances the internal key pointer.\n   \n \n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the key on success or FALSE on failure. \n  \n \n\n \n  See Also\n  \n   \n    dba_firstkey() - Fetch first key\n    dba_key_split() - Splits a key in string representation into array representation\n    Example 2 in the DBA examples\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-open.php","title":"dba_open","description":"\n \n  dba_open\n  (PHP 4, PHP 5)dba_open &mdash; Open database\n\n \n \n  Description\n  \n   resource dba_open\n    ( string $path\n   , string $mode\n   [, string $handler\n   [, mixed $...\n  ]] )\n\n  \n   dba_open() establishes a database instance for\n   path with mode using\n   handler.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       Commonly a regular path in your filesystem.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       It is r for read access, w for\n       read\/write access to an already existing database, c\n       for read\/write access and database creation if it doesn&#039;t currently exist,\n       and n for create, truncate and read\/write access.\n       The database is created in BTree mode, other modes (like Hash or Queue)\n       are not supported.\n      \n      \n       Additionally you can set the database lock method with the next char. \n       Use l to lock the database with a .lck\n       file or d to lock the databasefile itself. It is \n       important that all of your applications do this consistently.\n      \n      \n       If you want to test the access and do not want to wait for the lock \n       you can add t as third character. When you are \n       absolutely sure that you do not require database locking you can do \n       so by using - instead of l or\n       d. When none of d, \n       l or - is used, dba will lock\n       on the database file as it would with d.\n      \n      Note: \n       \n        There can only be one writer for one database file. When you use dba on \n        a web server and more than one request requires write operations they can\n        only be done one after another. Also read during write is not allowed.\n        The dba extension uses locks to prevent this. See the following table:\n        \n         DBA locking\n         \n          \n           \n            already open\n            mode = &quot;rl&quot;\n            mode = &quot;rlt&quot;\n            mode = &quot;wl&quot;\n            mode = &quot;wlt&quot;\n            mode = &quot;rd&quot;\n            mode = &quot;rdt&quot;\n            mode = &quot;wd&quot;\n            mode = &quot;wdt&quot;\n           \n\n          \n\n          \n           \n            not open\n            ok\n            ok\n            ok\n            ok\n            ok\n            ok\n            ok\n            ok\n           \n\n           \n            mode = &quot;rl&quot;\n            ok\n            ok\n            wait\n            false\n            illegal\n            illegal\n            illegal\n            illegal\n           \n\n           \n            mode = &quot;wl&quot;\n            wait\n            false\n            wait\n            false\n            illegal\n            illegal\n            illegal\n            illegal\n           \n\n           \n            mode = &quot;rd&quot;\n            illegal\n            illegal\n            illegal\n            illegal\n            ok\n            ok\n            wait\n            false\n           \n\n           \n            mode = &quot;wd&quot;\n            illegal\n            illegal\n            illegal\n            illegal\n            wait\n            false\n            wait\n            false\n           \n\n          \n         \n        \n\n        \n         ok: the second call will be successfull.\n         wait: the second call waits until dba_close() is called for the first.\n         false: the second call returns false.\n         illegal: you must not mix &quot;l&quot; and &quot;d&quot; modifiers for mode parameter.\n        \n       \n      \n     \n\n    \n\n    \n\n     handler\n     \n\n      \n       The name of the handler which\n       shall be used for accessing path. It is passed \n       all optional parameters given to dba_open() and \n       can act on behalf of them.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a positive handle on success or FALSE on failure.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        It&#039;s possible to open database files over network connection. However\n        in cases a socket connection will be used (as with http or ftp) the\n        connection will be locked instead of the resource itself. This is important \n        to know since in such cases locking is simply ignored on the resource \n        and other solutions have to be found.\n       \n      \n\n      \n       4.3.0\n       \n        Locking and the mode modifiers &quot;l&quot;, &quot;d&quot;, &quot;-&quot;\n        and &quot;t&quot; were added.\n        In previous PHP versions, you must use semaphores to guard against\n        simultaneous database access for any database handler with the exception \n        of GDBM. See System V semaphore support.\n       \n      \n\n      \n       before 4.3.5\n       \n        open mode &#039;c&#039; is broken for several internal handlers and truncates\n        the database instead of appending data to an existent database. \n        Also dbm and ndbm fail on mode &#039;c&#039; in typical configurations (this \n        cannot be fixed).\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    dba_popen() - Open database persistently\n    dba_close() - Close a DBA database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-optimize.php","title":"dba_optimize","description":"\n \n  dba_optimize\n  (PHP 4, PHP 5)dba_optimize &mdash; Optimize database\n\n \n \n  Description\n  \n   bool dba_optimize\n    ( resource $handle\n   )\n\n  \n   dba_optimize() optimizes the underlying database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_sync() - Synchronize database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-popen.php","title":"dba_popen","description":"\n \n  dba_popen\n  (PHP 4, PHP 5)dba_popen &mdash; Open database persistently\n\n \n \n  Description\n  \n   resource dba_popen\n    ( string $path\n   , string $mode\n   [, string $handler\n   [, mixed $...\n  ]] )\n\n  \n   dba_popen() establishes a persistent database instance\n   for path with mode using\n   handler.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       Commonly a regular path in your filesystem.\n     \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       It is r for read access, w for\n       read\/write access to an already existing database, c\n       for read\/write access and database creation if it doesn&#039;t currently exist,\n       and n for create, truncate and read\/write access.\n      \n     \n\n    \n\n    \n\n     handler\n     \n\n      \n       The name of the handler which\n       shall be used for accessing path. It is passed \n       all optional parameters given to dba_popen() and \n       can act on behalf of them.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a positive handle on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_open() - Open database\n    dba_close() - Close a DBA database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-replace.php","title":"dba_replace","description":"\n \n  dba_replace\n  (PHP 4, PHP 5)dba_replace &mdash; Replace or insert entry\n\n \n \n  Description\n  \n   bool dba_replace\n    ( string $key\n   , string $value\n   , resource $handle\n   )\n\n  \n   dba_replace() replaces or inserts the entry described\n   with key and value into the\n   database specified by handle.\n   \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key of the entry to be replaced.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The value to be replaced.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_exists() - Check whether key exists\n    dba_delete() - Delete DBA entry specified by key\n    dba_fetch() - Fetch data specified by key\n    dba_insert() - Insert entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dba-sync.php","title":"dba_sync","description":"\n \n  dba_sync\n  (PHP 4, PHP 5)dba_sync &mdash; Synchronize database\n\n \n \n  Description\n  \n   bool dba_sync\n    ( resource $handle\n   )\n\n  \n   dba_sync() synchronizes the database. This will probably \n   trigger a physical write to the disk, if supported.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The database handler, returned by dba_open() or\n       dba_popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    dba_optimize() - Optimize database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-addref.php","title":"com_addref","description":"\n \n  com_addref\n  (PHP 4 &gt;= 4.1.0)com_addref &mdash; Increases the components reference counter [deprecated]\n\n \n \n  Description\n  \n    void com_addref\n     ( void\n   )\n\n  \n   Increases the components reference counter.\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Notes\n  Warning\n   \n    You should never need to use this function.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-create-guid.php","title":"com_create_guid","description":"\n \n  com_create_guid\n  (PHP 5)com_create_guid &mdash; Generate a globally unique identifier (GUID)\n\n \n \n  Description\n  \n   string com_create_guid\n    ( void\n   )\n\n  \n   Generates a Globally Unique Identifier (GUID).\n  \n  \n   A GUID is generated in the same way as DCE UUID&#039;s, except that the\n   Microsoft convention is to enclose a GUID in curly braces.\n  \n \n\n \n  Return Values\n  \n   Returns the GUID as a string.\n  \n \n\n \n  See Also\n  \n   \n    uuid_create() in the PECL uuid extension\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-get-active-object.php","title":"com_get_active_object","description":"\n \n  com_get_active_object\n  (PHP 5)com_get_active_object &mdash; Returns a handle to an already running instance of a COM object\n\n \n \n  Description\n  \n   variant com_get_active_object\n    ( string $progid\n   [, int $code_page\n  ] )\n\n  \n   com_get_active_object() is similar to creating a new\n   instance of a COM object, except that it will\n   only return an object to your script if the object is already running.\n   OLE applications use something known as the Running Object Table to\n   allow well-known applications to be launched only once; this function\n   exposes the COM library function GetActiveObject() to get a handle on a\n   running instance.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     progid\n     \n\n      \n       progid must be either the ProgID or CLSID for\n       the object that you want to access (for example\n       Word.Application).\n      \n     \n\n    \n\n    \n\n     code_page\n     \n\n      \n       Acts in precisely the same way that it does for the COM class.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If the requested object is running, it will be returned to your script\n   just like any other COM object.\n  \n \n\n \n  Errors\/Exceptions\n  \n   There are a variety of reasons why this function might fail, the most\n   common being that the object is not already running.  In that situation,\n   the exception error code will be MK_E_UNAVAILABLE;\n   you can use the getCode method of the exception object\n   to check the exception code.\n  \n \n\n \n  Notes\n  Warning\n   \n    Using com_get_active_object() in a web server context\n    is not always a smart idea.  Most COM\/OLE applications are not designed\n    to handle more than one client concurrently, even (or especially!)\n    Microsoft Office.  You should read &raquo;&nbsp;Considerations for Server-Side\n    Automation of Office for more information on the general issues\n    involved.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-event-sink.php","title":"com_event_sink","description":"\n \n  com_event_sink\n  (PHP 4 &gt;= 4.2.0, PHP 5)com_event_sink &mdash; Connect events from a COM object to a PHP object\n\n \n \n  Description\n  \n   bool com_event_sink\n    ( variant $comobject\n   , object $sinkobject\n   [, mixed $sinkinterface\n  ] )\n\n  \n   Instructs COM to sink events generated by\n   comobject into the PHP object\n   sinkobject.\n  \n  \n   Be careful how you use this feature; if you are doing something similar\n   to the example below, then it doesn&#039;t really make sense to run it in a\n   web server context.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     comobject\n     \n\n      \n      \n     \n\n    \n\n    \n\n     sinkobject\n     \n\n      \n       sinkobject should be an instance of a class with\n       methods named after those of the desired dispinterface; you may use\n       com_print_typeinfo() to help generate a template class\n       for this purpose.\n      \n     \n\n    \n\n    \n\n     sinkinterface\n     \n\n      \n       PHP will attempt to use the default dispinterface type specified by\n       the typelibrary associated with comobject, but\n       you may override this choice by setting\n       sinkinterface to the name of the dispinterface\n       that you want to use.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 COM event sink example\n    \n\n&lt;?phpclass&nbsp;IEEventSinker&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;$terminated&nbsp;=&nbsp;false;&nbsp;&nbsp;&nbsp;function&nbsp;ProgressChange($progress,&nbsp;$progressmax)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Download&nbsp;progress:&nbsp;$progress&nbsp;\/&nbsp;$progressmax\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;DocumentComplete(&amp;$dom,&nbsp;$url)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Document&nbsp;$url&nbsp;complete\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;OnQuit()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Quit!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;terminated&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;}}$ie&nbsp;=&nbsp;new&nbsp;COM(\"InternetExplorer.Application\");\/\/&nbsp;note&nbsp;that&nbsp;you&nbsp;don't&nbsp;need&nbsp;the&nbsp;&amp;&nbsp;for&nbsp;PHP&nbsp;5!$sink&nbsp;=&nbsp;new&nbsp;IEEventSinker();com_event_sink($ie,&nbsp;$sink,&nbsp;\"DWebBrowserEvents2\");$ie-&gt;Visible&nbsp;=&nbsp;true;$ie-&gt;Navigate(\"http:\/\/www.example.org\");while(!$sink-&gt;terminated)&nbsp;{&nbsp;&nbsp;com_message_pump(4000);}$ie&nbsp;=&nbsp;null;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    com_print_typeinfo() - Print out a PHP class definition for a dispatchable interface\n    com_message_pump() - Process COM messages, sleeping for up to timeoutms milliseconds\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-get.php","title":"com_get","description":"\n \n  com_get\n  (PHP 4)com_get &mdash; Gets the value of a COM Component&#039;s property [deprecated]\n\n \n \n  Description\n  \n   Deprecated, use the OO syntax instead.\n  \n  \n   \n    Example #1 OO syntax\n    \n\n&lt;?php\/\/&nbsp;do&nbsp;this$var&nbsp;=&nbsp;$obj-&gt;property;\/\/&nbsp;instead&nbsp;of&nbsp;this:$var&nbsp;=&nbsp;com_get($obj,&nbsp;'property');?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-invoke.php","title":"com_invoke","description":"\n \n  com_invoke\n  (PHP 4)com_invoke &mdash; Calls a COM component&#039;s method [deprecated]\n\n \n \n  Description\n  \n   mixed com_invoke\n    ( resource $com_object\n   , string $function_name\n   [, mixed $function_parameters\n  ] )\n\n  \n   com_invoke() invokes the method\n   named function_name of the COM\n   component referenced by com_object.\n   com_invoke() returns FALSE on error,\n   returns the function_name&#039;s return\n   value on success. All the extra parameters\n   function_parameters are passed to\n   the method function_name.\n  \n  \n   \n    Example #1 Don&#039;t use com_invoke(), use OO syntax instead\n    \n\n&lt;?php\/\/&nbsp;do&nbsp;this$val&nbsp;=&nbsp;$obj-&gt;method($one,&nbsp;$two);\/\/&nbsp;instead&nbsp;of&nbsp;this:$val&nbsp;=&nbsp;com_invoke($obj,&nbsp;'method',&nbsp;$one,&nbsp;$two);?&gt;\n\n\n    \n\n   \n  \n\n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-isenum.php","title":"com_isenum","description":"\n \n  com_isenum\n  (PHP 4 &gt;= 4.1.0)com_isenum &mdash; Indicates if a COM object has an IEnumVariant interface for iteration [deprecated]\n\n \n \n  Description\n  \n   bool com_isenum\n    ( variant $com_module\n   )\n\n  \n   Checks to see if a COM object can be enumerated using the\n   Next()  method hack.\n   See COM class for more details on these\n   methods.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     com_module\n     \n\n      \n       The COM object.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the object can be enumerated, FALSE otherwise.\n  \n \n\n \n  Notes\n  Note: \n   \n    This function does not exist in PHP 5; use the more natural\n    foreach statement to iterate over the contents of COM objects.\n    See For Each for more details.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propget.php","title":"com_propget","description":"\n \n  com_propget\n  (PHP 4)com_propget &mdash; Alias of com_get()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   com_get().\n  \n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-message-pump.php","title":"com_message_pump","description":"\n \n  com_message_pump\n  (PHP 4 &gt;= 4.2.0, PHP 5)com_message_pump &mdash; Process COM messages, sleeping for up to timeoutms milliseconds\n\n \n \n  Description\n  \n   bool com_message_pump\n    ([ int $timeoutms = 0\n  ] )\n\n  \n   This function will sleep for up to timeoutms\n   milliseconds, or until a message arrives in the queue.\n  \n  \n   The purpose of this function is to route COM calls between apartments and\n   handle various synchronization issues.  This allows your script to wait\n   efficiently for events to be triggered, while still handling other events\n   or running other code in the background.  You should use it in a loop, as\n   demonstrated by the example in the com_event_sink()\n   function, until you are finished using event bound COM objects.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timeoutms\n     \n\n      \n       The timeout, in milliseconds.\n      \n      \n       If you do not specify a value for timeoutms,\n       then 0 will be assumed.  A 0 value means that no waiting will be\n       performed; if there are messages pending they will be dispatched as\n       before; if there are no messages pending, the function will return\n       FALSE immediately without sleeping.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If a message or messages arrives before the timeout, they will be\n   dispatched, and the function will return TRUE. If the timeout occurs and\n   no messages were processed, the return value will be FALSE.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-load.php","title":"com_load","description":"\n \n  com_load\n  (PHP 4)com_load &mdash; Creates a new reference to a COM component [deprecated]\n\n \n \n  Description\n  \n   Deprecated, use the OO syntax instead.\n  \n  \n   \n    Example #1 OO syntax\n    \n\n&lt;?php\/\/&nbsp;do&nbsp;this$obj&nbsp;=&nbsp;new&nbsp;COM($module);\/\/&nbsp;instead&nbsp;of&nbsp;this:$obj&nbsp;=&nbsp;com_load($module);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-print-typeinfo.php","title":"com_print_typeinfo","description":"\n \n  com_print_typeinfo\n  (PHP 4 &gt;= 4.2.0, PHP 5)com_print_typeinfo &mdash; Print out a PHP class definition for a dispatchable interface\n\n \n \n  Description\n  \n   bool com_print_typeinfo\n    ( object $comobject\n   [, string $dispinterface\n   [, bool $wantsink = false\n  ]] )\n\n  \n   The purpose of this function is to help generate a skeleton class for use\n   as an event sink.  You may also use it to generate a dump of any COM\n   object, provided that it supports enough of the introspection interfaces,\n   and that you know the name of the interface you want to display.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     comobject\n     \n\n      \n       comobject should be either an instance of a COM\n       object, or be the name of a typelibrary (which will be resolved according\n       to the rules set out in com_load_typelib()).\n      \n     \n\n    \n\n    \n\n     dispinterface\n     \n\n      \n       The name of an IDispatch descendant interface that you want to display.\n      \n     \n\n    \n\n    \n\n     wantsink\n     \n\n      \n       If set to TRUE, the corresponding sink interface will be displayed\n       instead.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    com_event_sink() - Connect events from a COM object to a PHP object\n    com_load_typelib() - Loads a Typelib\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-load-typelib.php","title":"com_load_typelib","description":"\n \n  com_load_typelib\n  (PHP 4 &gt;= 4.1.0, PHP 5)com_load_typelib &mdash; Loads a Typelib\n\n \n \n  Description\n  \n   bool com_load_typelib\n    ( string $typelib_name\n   [, bool $case_insensitive = true\n  ] )\n\n  \n   Loads a type-library and registers its constants in the engine, as though\n   they were defined using define().\n  \n  \n   Note that it is much more efficient to use the  configuration setting to pre-load and\n   register the constants, although not so flexible.\n  \n  \n   If you have turned on , then\n   PHP will attempt to automatically register the constants associated with a\n   COM object when you instantiate it.  This depends on the interfaces\n   provided by the COM object itself, and may not always be possible.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     typelib_name\n     \n\n      \n       typelib_name can be one of the following:\n       \n        \n         \n          The filename of a .tlb file or the executable module\n          that contains the type library.\n         \n        \n        \n         \n          The type library GUID, followed by its version number, for example\n          {00000200-0000-0010-8000-00AA006D2EA4},2,0.\n         \n        \n        \n         \n          The type library name, e.g. Microsoft OLE DB ActiveX Data\n          Objects 1.0 Library.\n         \n        \n       \n       PHP will attempt to resolve the type library in this order, as the\n       process gets more and more expensive as you progress down the list;\n       searching for the type library by name is handled by physically\n       enumerating the registry until we find a match.\n      \n     \n\n    \n\n    \n\n     case_insensitive\n     \n\n      \n       The case_insensitive behaves in the same way as\n       the parameter with the same name in the define()\n       function.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propput.php","title":"com_propput","description":"\n \n  com_propput\n  (PHP 4)com_propput &mdash; Alias of com_set()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   com_set().    \n  \n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-propset.php","title":"com_propset","description":"\n \n  com_propset\n  (PHP 4)com_propset &mdash; Alias of com_set()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   com_set().\n  \n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-release.php","title":"com_release","description":"\n \n  com_release\n  (PHP 4 &gt;= 4.1.0)com_release &mdash; Decreases the components reference counter [deprecated]\n\n \n \n  Description\n  \n   void com_release\n    ( void\n   )\n\n  \n   Decreases the components reference counter.\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        This function was removed.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Notes\n  Warning\n   \n    You should never need to use this function.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.com-set.php","title":"com_set","description":"\n \n  com_set\n  (PHP 4)com_set &mdash; Assigns a value to a COM component&#039;s property\n\n \n \n  Description\n  \n   Deprecated, use the OO syntax instead.\n  \n  \n   \n    Example #1 OO syntax\n    \n\n&lt;?php\/\/&nbsp;do&nbsp;this$obj-&gt;property&nbsp;=&nbsp;$value;\/\/&nbsp;instead&nbsp;of&nbsp;this:com_set($obj,&nbsp;'property',&nbsp;$value);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n \n  This function does not exist in PHP 5; instead, you should use the regular\n  and more natural OO syntax to access properties or call methods.\n \n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-abs.php","title":"variant_abs","description":"\n \n  variant_abs\n  (PHP 5)variant_abs &mdash; Returns the absolute value of a variant\n\n \n \n  Description\n  \n   mixed variant_abs\n    ( mixed $val\n   )\n\n  \n   Returns the absolute value of a variant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     val\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   Returns the absolute value of val.\n  \n \n\n \n  See Also\n  \n   \n    abs() - Absolute value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-and.php","title":"variant_and","description":"\n \n  variant_and\n  (PHP 5)variant_and &mdash; Performs a bitwise AND operation between two variants\n\n \n \n  Description\n  \n   mixed variant_and\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Performs a bitwise AND operation.\n   Note that this is slightly different from a regular AND operation.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant AND Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUETRUE\n\n      TRUEFALSEFALSE\n\n      TRUENULLNULL\n\n      FALSETRUEFALSE\n\n      FALSEFALSEFALSE\n\n      FALSENULLFALSE\n\n      NULLTRUENULL\n\n      NULLFALSEFALSE\n\n      NULLNULLNULL\n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_or() - Performs a logical disjunction on two variants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-add.php","title":"variant_add","description":"\n \n  variant_add\n  (PHP 5)variant_add &mdash; &quot;Adds&quot; two variant values together and returns the result\n\n \n \n  Description\n  \n   mixed variant_add\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Adds left to right using\n   the following rules (taken from the MSDN library), which correspond to\n   those of Visual Basic:\n   \n    Variant Addition Rules\n    \n    \n     \n      If\n      Then\n     \n\n    \n\n    \n     \n      Both expressions are of the string type\n      Concatenation\n     \n\n     \n      One expression is a string type and the other a\n      character\n      Addition\n     \n\n     \n      One expression is numeric and the other is a string\n      Addition\n     \n\n     \n      Both expressions are numeric\n      Addition\n     \n\n     \n      Either expression is NULL\n      NULL is returned\n     \n\n     \n      Both expressions are empty\n      Integer subtype is returned\n     \n\n    \n   \n  \n\n \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   Returns the result.\n  \n \n\n \n  See Also\n  \n   \n    variant_sub() - Subtracts the value of the right variant from the left variant value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cast.php","title":"variant_cast","description":"\n \n  variant_cast\n  (PHP 5)variant_cast &mdash; Convert a variant into a new variant object of another type\n\n \n \n  Description\n  \n   variant variant_cast\n    ( variant $variant\n   , int $type\n   )\n\n  \n   This function makes a copy of variant and then\n   performs a variant cast operation to force the copy to have the type\n   given by type.\n  \n  \n   This function wraps VariantChangeType() in the COM library; consult MSDN\n   for more information.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       type should be one of the\n       VT_XXX constants.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a VT_DATE variant.\n  \n \n\n \n  See Also\n  \n   \n    variant_set_type() - Convert a variant into another type &quot;in-place&quot;\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cat.php","title":"variant_cat","description":"\n \n  variant_cat\n  (PHP 5)variant_cat &mdash; concatenates two variant values together and returns the result\n\n \n \n  Description\n  \n   mixed variant_cat\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Concatenates left with\n   right and returns the result.\n  \n  \n   This function is notionally equivalent to\n   $left . $right.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the result of the concatenation.\n  \n \n\n \n  See Also\n  \n   \n    String Operators for the string\n   concatenation operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-cmp.php","title":"variant_cmp","description":"\n \n  variant_cmp\n  (PHP 5)variant_cmp &mdash; Compares two variants\n\n \n \n  Description\n  \n   int variant_cmp\n    ( mixed $left\n   , mixed $right\n   [, int $lcid\n   [, int $flags\n  ]] )\n\n  \n   Compares left with right.\n  \n  \n   This function will only compare scalar values, not arrays or variant records.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n    \n\n     lcid\n     \n\n      \n       A valid Locale Identifier to use when comparing strings (this affects\n       string collation).\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be one or more of the following values\n       OR&#039;d together, and affects string comparisons:\n       \n        Variant Comparision Flags\n        \n         \n          \n           value\n           meaning\n          \n\n         \n\n         \n          \n           NORM_IGNORECASE\n           Compare case insensitively\n          \n\n          \n           NORM_IGNORENONSPACE\n           Ignore nonspacing characters\n          \n\n          \n           NORM_IGNORESYMBOLS\n           Ignore symbols\n          \n\n          \n           NORM_IGNOREWIDTH\n           Ignore string width\n          \n\n          \n           NORM_IGNOREKANATYPE\n           Ignore Kana type\n          \n\n          \n           NORM_IGNOREKASHIDA\n           Ignore Arabic kashida characters\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns one of the following:\n   \n    Variant Comparision Results\n    \n     \n      \n       value\n       meaning\n      \n\n     \n\n     \n      \n       VARCMP_LT\n       left is less than\n        right\n       \n      \n\n      \n       VARCMP_EQ\n       left is equal to\n        right\n       \n      \n\n      \n       VARCMP_GT\n       left is greater than\n        right\n       \n      \n\n      \n       VARCMP_NULL\n       Either left,\n        right or both are NULL\n       \n      \n\n     \n    \n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-date-from-timestamp.php","title":"variant_date_from_timestamp","description":"\n \n  variant_date_from_timestamp\n  (PHP 5)variant_date_from_timestamp &mdash; Returns a variant date representation of a Unix timestamp\n\n \n \n  Description\n  \n   variant variant_date_from_timestamp\n    ( int $timestamp\n   )\n\n  \n   Converts timestamp from a unix timestamp value\n   into a variant of type VT_DATE.  This allows easier\n   interopability between the unix-ish parts of PHP and COM.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       A unix timestamp.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a VT_DATE variant.\n  \n \n\n \n  See Also\n  \n   \n    variant_date_to_timestamp() - Converts a variant date\/time value to Unix timestamp\n    mktime() - Get Unix timestamp for a date\n    time() - Return current Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-div.php","title":"variant_div","description":"\n \n  variant_div\n  (PHP 5)variant_div &mdash; Returns the result from dividing two variants\n\n \n \n  Description\n  \n   mixed variant_div\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Divides left by right and\n   returns the result.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant Division Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Double is returned\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Division and a double is returned\n      \n\n      \n       One expression is numeric and the other is a string\n       Division and a double is returned.\n      \n\n      \n       Both expressions are numeric\n       Division and a double is returned\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       right is empty and\n       left is anything but empty\n       A com_exception with code DISP_E_DIVBYZERO\n       is thrown\n      \n\n      \n       left is empty and\n       right is anything but empty.\n       0 as type double is returned\n      \n\n      \n       Both expressions are empty\n       A com_exception with code DISP_E_OVERFLOW\n       is thrown\n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_idiv() - Converts variants to integers and then returns the result from dividing them\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-date-to-timestamp.php","title":"variant_date_to_timestamp","description":"\n \n  variant_date_to_timestamp\n  (PHP 5)variant_date_to_timestamp &mdash; Converts a variant date\/time value to Unix timestamp\n\n \n \n  Description\n  \n   int variant_date_to_timestamp\n    ( variant $variant\n   )\n\n  \n   Converts variant from a VT_DATE\n   (or similar) value into a Unix timestamp.  This allows easier\n   interopability between the Unix-ish parts of PHP and COM.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a unix timestamp.\n  \n \n\n \n  See Also\n  \n   \n    variant_date_from_timestamp() - Returns a variant date representation of a Unix timestamp\n    date() - Format a local time\/date\n    strftime() - Format a local time\/date according to locale settings\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-eqv.php","title":"variant_eqv","description":"\n \n  variant_eqv\n  (PHP 5)variant_eqv &mdash; Performs a bitwise equivalence on two variants\n\n \n \n  Description\n  \n   mixed variant_eqv\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Performs a bitwise equivalence on two variants.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   If each bit in left is equal to the corresponding\n   bit in right then TRUE is returned, otherwise\n   FALSE is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-fix.php","title":"variant_fix","description":"\n \n  variant_fix\n  (PHP 5)variant_fix &mdash; Returns the integer portion of a variant\n\n \n \n  Description\n  \n   mixed variant_fix\n    ( mixed $variant\n   )\n\n  \n   Gets the integer portion of a variant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   If variant is negative, then the first negative\n   integer greater than or equal to the variant is returned, otherwise\n   returns the integer portion of the value of\n   variant.\n  \n \n\n \n  Notes\n  Warning\n   \n    This documentation is based on the MSDN documentation; it appears\n    that this function is either the same as\n    variant_int(), or that there is an error in the MSDN\n    documentation.\n   \n  \n \n\n \n  See Also\n  \n   \n    variant_int() - Returns the integer portion of a variant\n    variant_round() - Rounds a variant to the specified number of decimal places\n    floor() - Round fractions down\n    ceil() - Round fractions up\n    round() - Rounds a float\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-get-type.php","title":"variant_get_type","description":"\n \n  variant_get_type\n  (PHP 5)variant_get_type &mdash; Returns the type of a variant object\n\n \n \n  Description\n  \n   int variant_get_type\n    ( variant $variant\n   )\n\n  \n   Returns the type of a variant object.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant object.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   This function returns an integer value that indicates the type of\n   variant, which can be an instance of\n   COM, DOTNET or\n   VARIANT classes.  The return value can be compared\n   to one of the VT_XXX constants.\n  \n  \n   The return value for COM and DOTNET objects will usually be\n   VT_DISPATCH; the only reason this function works for\n   those classes is because COM and DOTNET are descendants of VARIANT.\n  \n  \n   In PHP versions prior to 5, you could obtain this information from\n   instances of the VARIANT class ONLY, by reading a fake\n   type property.  See the VARIANT class for more information on\n   this.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-idiv.php","title":"variant_idiv","description":"\n \n  variant_idiv\n  (PHP 5)variant_idiv &mdash; Converts variants to integers and then returns the result from dividing them\n\n \n \n  Description\n  \n   mixed variant_idiv\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Converts left and right to\n   integer values, and then performs integer division.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant Integer Division Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Division and integer is returned\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Division\n      \n\n      \n       One expression is numeric and the other is a string\n       Division\n      \n\n      \n       Both expressions are numeric\n       Division\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       A com_exception with code DISP_E_DIVBYZERO\n       is thrown\n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_div() - Returns the result from dividing two variants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-int.php","title":"variant_int","description":"\n \n  variant_int\n  (PHP 5)variant_int &mdash; Returns the integer portion of a variant\n\n \n \n  Description\n  \n   mixed variant_int\n    ( mixed $variant\n   )\n\n  \n   Gets the integer portion of a variant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   If variant is negative, then the first negative\n   integer greater than or equal to the variant is returned, otherwise\n   returns the integer portion of the value of\n   variant.\n  \n \n\n \n  See Also\n  \n   \n    variant_fix() - Returns the integer portion of a variant\n    variant_round() - Rounds a variant to the specified number of decimal places\n    floor() - Round fractions down\n    ceil() - Round fractions up\n    round() - Rounds a float\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-imp.php","title":"variant_imp","description":"\n \n  variant_imp\n  (PHP 5)variant_imp &mdash; Performs a bitwise implication on two variants\n\n \n \n  Description\n  \n   mixed variant_imp\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Performs a bitwise implication operation.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant Implication Table\n    \n    \n     \n      If left is\n      If right is\n      then the result is\n     \n\n    \n\n    \n     TRUETRUETRUE\n\n     TRUEFALSETRUE\n\n     TRUENULLTRUE\n\n     FALSETRUETRUE\n\n     FALSEFALSETRUE\n\n     FALSENULLTRUE\n\n     NULLTRUETRUE\n\n     NULLFALSENULL\n\n     NULLNULLNULL\n\n    \n   \n  \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-mod.php","title":"variant_mod","description":"\n \n  variant_mod\n  (PHP 5)variant_mod &mdash; Divides two variants and returns only the remainder\n\n \n \n  Description\n  \n   mixed variant_mod\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Divides left by right and\n   returns the remainder.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the remainder of the division.\n  \n \n\n \n  See Also\n  \n   \n    variant_div() - Returns the result from dividing two variants\n    variant_idiv() - Converts variants to integers and then returns the result from dividing them\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-mul.php","title":"variant_mul","description":"\n \n  variant_mul\n  (PHP 5)variant_mul &mdash; Multiplies the values of the two variants\n\n \n \n  Description\n  \n   mixed variant_mul\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Multiplies left by right.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Boolean values are converted to -1 for FALSE and 0 for TRUE.\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant Multiplication Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string, date, character, boolean type\n       Multiplication\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Multiplication\n      \n\n      \n       One expression is numeric and the other is a string\n       Multiplication\n      \n\n      \n       Both expressions are numeric\n       Multiplication\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       Empty string is returned\n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_div() - Returns the result from dividing two variants\n    variant_idiv() - Converts variants to integers and then returns the result from dividing them\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-neg.php","title":"variant_neg","description":"\n \n  variant_neg\n  (PHP 5)variant_neg &mdash; Performs logical negation on a variant\n\n \n \n  Description\n  \n   mixed variant_neg\n    ( mixed $variant\n   )\n\n  \n   Performs logical negation of variant.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the result of the logical negation.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-or.php","title":"variant_or","description":"\n \n  variant_or\n  (PHP 5)variant_or &mdash; Performs a logical disjunction on two variants\n\n \n \n  Description\n  \n   mixed variant_or\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Performs a bitwise OR operation.\n   Note that this is slightly different from a regular OR operation.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant OR Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUETRUE\n\n      TRUEFALSETRUE\n\n      TRUENULLTRUE\n\n      FALSETRUETRUE\n\n      FALSEFALSEFALSE\n\n      FALSENULLNULL\n\n      NULLTRUETRUE\n\n      NULLFALSENULL\n\n      NULLNULLNULL\n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_and() - Performs a bitwise AND operation between two variants\n    variant_xor() - Performs a logical exclusion on two variants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-not.php","title":"variant_not","description":"\n \n  variant_not\n  (PHP 5)variant_not &mdash; Performs bitwise not negation on a variant\n\n \n \n  Description\n  \n   mixed variant_not\n    ( mixed $variant\n   )\n\n  \n   Performs bitwise not negation on variant and\n   returns the result.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the bitwise not negation. If variant is\n   NULL, the result will also be NULL.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-pow.php","title":"variant_pow","description":"\n \n  variant_pow\n  (PHP 5)variant_pow &mdash; Returns the result of performing the power function with two variants\n\n \n \n  Description\n  \n   mixed variant_pow\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Returns the result of left to the power of\n   right.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the result of left to the power of\n   right.\n  \n \n\n \n  See Also\n  \n   \n    pow() - Exponential expression\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-round.php","title":"variant_round","description":"\n \n  variant_round\n  (PHP 5)variant_round &mdash; Rounds a variant to the specified number of decimal places\n\n \n \n  Description\n  \n   mixed variant_round\n    ( mixed $variant\n   , int $decimals\n   )\n\n  \n   Returns the value of variant rounded to\n   decimals decimal places.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n    \n\n     decimals\n     \n\n      \n       Number of decimal places.\n      \n     \n\n    \n\n   \n\n  \n  Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n \n\n \n  Return Values\n  \n   Returns the rounded value.\n  \n \n\n \n  See Also\n  \n   \n    round() - Rounds a float\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-set-type.php","title":"variant_set_type","description":"\n \n  variant_set_type\n  (PHP 5)variant_set_type &mdash; Convert a variant into another type &quot;in-place&quot;\n\n \n \n  Description\n  \n   void variant_set_type\n    ( variant $variant\n   , int $type\n   )\n\n  \n   This function is similar to variant_cast() except that\n   the variant is modified &quot;in-place&quot;; no new variant is created. The\n   parameters for this function have identical meaning to those of\n   variant_cast().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  See Also\n  \n   \n    variant_cast() - Convert a variant into a new variant object of another type\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-sub.php","title":"variant_sub","description":"\n \n  variant_sub\n  (PHP 5)variant_sub &mdash; Subtracts the value of the right variant from the left variant value\n\n \n \n  Description\n  \n   mixed variant_sub\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Subtracts right from left.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant Subtraction Rules\n    \n     \n      \n       If\n       Then\n      \n\n     \n\n     \n      \n       Both expressions are of the string type\n       Subtraction\n      \n\n      \n       One expression is a string type and the other a\n       character\n       Subtraction\n      \n\n      \n       One expression is numeric and the other is a string\n       Subtraction.\n      \n\n      \n       Both expressions are numeric\n       Subtraction\n      \n\n      \n       Either expression is NULL\n       NULL is returned\n      \n\n      \n       Both expressions are empty\n       Empty string is returned\n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_add() - &quot;Adds&quot; two variant values together and returns the result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-set.php","title":"variant_set","description":"\n \n  variant_set\n  (PHP 5)variant_set &mdash; Assigns a new value for a variant object\n\n \n \n  Description\n  \n   void variant_set\n    ( variant $variant\n   , mixed $value\n   )\n\n  \n   Converts value to a variant and assigns it to the\n   variant object; no new variant object is created,\n   and the old value of variant is freed\/released.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variant\n     \n\n      \n       The variant.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.variant-xor.php","title":"variant_xor","description":"\n \n  variant_xor\n  (PHP 5)variant_xor &mdash; Performs a logical exclusion on two variants\n\n \n \n  Description\n  \n   mixed variant_xor\n    ( mixed $left\n   , mixed $right\n   )\n\n  \n   Performs a logical exclusion.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     left\n     \n\n      \n       The left operand.\n      \n     \n\n    \n\n    \n\n     right\n     \n\n      \n       The right operand.\n      \n     \n\n    \n\n   \n\n   Note: \n\n As with all the variant arithmetic functions, the parameters for this function\n can be either a PHP native type (integer, string, floating point, boolean or\n NULL), or an instance of a COM, VARIANT or DOTNET class.  PHP native types\n will be converted to variants using the same rules as found in the constructor\n for the VARIANT class.  COM and DOTNET objects\n will have the value of their default property taken and used as the variant value.\n\n\n The variant arithmetic functions are wrappers around the similarly named\n functions in the COM library; for more information on these functions, consult\n the MSDN library.  The PHP functions are named slightly differently; for example\n variant_add() in PHP corresponds to VarAdd()\n  in the MSDN documentation.\n\n\n\n  \n \n\n \n  Return Values\n  \n   \n    Variant XOR Rules\n    \n     \n      \n       If left is\n       If right is\n       then the result is\n      \n\n     \n\n     \n      TRUETRUEFALSE\n\n      TRUEFALSETRUE\n\n      FALSETRUETRUE\n\n      FALSEFALSEFALSE\n\n      NULLNULLNULL\n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    variant_or() - Performs a logical disjunction on two variants\n    variant_and() - Performs a bitwise AND operation between two variants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-create-from-format.php","title":"date_create_from_format","description":"\n \n  date_create_from_format\n  (PHP 5 &gt;= 5.3.0)date_create_from_format &mdash; Alias of  DateTime::createFromFormat()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::createFromFormat()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-add.php","title":"date_add","description":"\n \n  date_add\n  (PHP 5 &gt;= 5.3.0)date_add &mdash; Alias of  DateTime::add()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::add()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-create.php","title":"date_create","description":"\n \n  date_create\n  (PHP 5 &gt;= 5.2.0)date_create &mdash; Alias of  DateTime::__construct()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::__construct()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.checkdate.php","title":"checkdate","description":"\n \n  checkdate\n  (PHP 4, PHP 5)checkdate &mdash; Validate a Gregorian date\n\n \n\n \n  Description\n  \n   bool checkdate\n    ( int $month\n   , int $day\n   , int $year\n   )\n\n  \n   Checks the validity of the date formed by the arguments. A date\n   is considered valid if each parameter is properly defined.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     month\n     \n\n      \n       The month is between 1 and 12 inclusive.\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The day is within the allowed number of days for the given \n       month.  Leap years \n       are taken into consideration.\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year is between 1 and 32767 inclusive.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the date given is valid; otherwise returns FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 checkdate() example\n    \n\n&lt;?phpvar_dump(checkdate(12,&nbsp;31,&nbsp;2000));var_dump(checkdate(2,&nbsp;29,&nbsp;2001));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\nbool(false)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mktime() - Get Unix timestamp for a date\n    strtotime() - Parse about any English textual datetime description into a Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-date-set.php","title":"date_date_set","description":"\n \n  date_date_set\n  (PHP 5 &gt;= 5.2.0)date_date_set &mdash; Alias of  DateTime::setDate()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::setDate()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-default-timezone-get.php","title":"date_default_timezone_get","description":"\n \n  date_default_timezone_get\n  (PHP 5 &gt;= 5.1.0)date_default_timezone_get &mdash; \n   Gets the default timezone used by all date\/time functions in a script\n  \n\n \n \n  Description\n  \n   string date_default_timezone_get\n    ( void\n   )\n\n  \n   In order of preference, this function returns the default timezone by:\n   \n    \n     \n      Reading the timezone set using the\n      date_default_timezone_set() function (if any)\n     \n    \n    \n     \n      Prior to PHP 5.4.0 only: Reading the TZ\n      environment variable (if non empty)\n     \n    \n    \n     \n      Reading the value of the date.timezone ini option\n      (if set)\n     \n    \n    \n     \n      Prior to PHP 5.4.0 only: Querying the host operating system (if supported\n      and allowed by the OS). This uses an algorithm\n      that has to guess the timezone. This is by no means going to work correctly for \n      every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed\n      correctly, and set date.timezone to the correct timezone\n      instead.\n     \n    \n   \n  \n  \n   If none of the above succeed,  date_default_timezone_get()\n   will return a default timezone of UTC.\n  \n \n\n\n \n  Return Values\n  \n   Returns a string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The TZ environment variable is no longer used to\n        guess the timezone.\n       \n      \n\n      \n       5.4.0\n       \n        The timezone is no longer guessed from information available through the\n        operating system as the guessed timezone can not be relied on.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Getting the default timezone\n    \n\n&lt;?phpdate_default_timezone_set('Europe\/London');if&nbsp;(date_default_timezone_get())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'date_default_timezone_set:&nbsp;'&nbsp;.&nbsp;date_default_timezone_get()&nbsp;.&nbsp;'&lt;br&nbsp;\/&gt;';}if&nbsp;(ini_get('date.timezone'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'date.timezone:&nbsp;'&nbsp;.&nbsp;ini_get('date.timezone');}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\ndate_default_timezone_set: Europe\/London\ndate.timezone: Europe\/London\n\n    \n   \n  \n  \n   \n    Example #2 Getting the abbreviation of a timezone\n    \n\n&lt;?phpdate_default_timezone_set('America\/Los_Angeles');echo&nbsp;date_default_timezone_get()&nbsp;.&nbsp;'&nbsp;=&gt;&nbsp;'&nbsp;.&nbsp;date('e')&nbsp;.&nbsp;'&nbsp;=&gt;&nbsp;'&nbsp;.&nbsp;date('T');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nAmerica\/Los_Angeles =&gt; America\/Los_Angeles =&gt; PST\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    date_default_timezone_set() - Sets the default timezone used by all date\/time functions in a script\n    List of Supported Timezones\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-default-timezone-set.php","title":"date_default_timezone_set","description":"\n \n  date_default_timezone_set\n  (PHP 5 &gt;= 5.1.0)date_default_timezone_set &mdash; \n   Sets the default timezone used by all date\/time functions in a script\n  \n\n \n \n  Description\n  \n   bool date_default_timezone_set\n    ( string $timezone_identifier\n   )\n\n  \n   date_default_timezone_set() sets the default timezone\n   used by all date\/time functions.\n  \n  Note: \n   \n    Since PHP 5.1.0 (when the date\/time functions were rewritten), every call\n    to a date\/time function will generate a E_NOTICE if\n    the timezone isn&#039;t valid, and\/or a E_WARNING message\n    if using the system settings or the TZ environment\n    variable.\n   \n  \n  \n   Instead of using this function to set the default timezone in your script,\n   you can also use the INI setting date.timezone to set the default\n   timezone.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     timezone_identifier\n     \n\n      \n       The timezone identifier, like UTC or\n       Europe\/Lisbon. The list of valid identifiers is\n       available in the List of Supported Timezones.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns FALSE if the\n   timezone_identifier isn&#039;t valid, or TRUE\n   otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Getting the default timezone\n    \n\n&lt;?phpdate_default_timezone_set('America\/Los_Angeles');$script_tz&nbsp;=&nbsp;date_default_timezone_get();if&nbsp;(strcmp($script_tz,&nbsp;ini_get('date.timezone'))){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Script&nbsp;timezone&nbsp;differs&nbsp;from&nbsp;ini-set&nbsp;timezone.';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Script&nbsp;timezone&nbsp;and&nbsp;ini-set&nbsp;timezone&nbsp;match.';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Now throws E_WARNING rather than\n        E_STRICT.\n       \n      \n\n      \n       5.1.2\n       \n        The function started to validate the\n        timezone_identifier parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    date_default_timezone_get() - Gets the default timezone used by all date\/time functions in a script\n    List of Supported Timezones\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-diff.php","title":"date_diff","description":"\n \n  date_diff\n  (PHP 5 &gt;= 5.3.0)date_diff &mdash; Alias of  DateTime::diff()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::diff()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-format.php","title":"date_format","description":"\n \n  date_format\n  (PHP 5 &gt;= 5.2.0)date_format &mdash; Alias of  DateTime::format()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::format()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-get-last-errors.php","title":"date_get_last_errors","description":"\n \n  date_get_last_errors\n  (PHP 5 &gt;= 5.3.0)date_get_last_errors &mdash; Alias of  DateTime::getLastErrors()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::getLastErrors()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-interval-create-from-date-string.php","title":"date_interval_create_from_date_string","description":"\n \n  date_interval_create_from_date_string\n  (PHP 5 &gt;= 5.3.0)date_interval_create_from_date_string &mdash; Alias of  DateInterval::createFromDateString()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateInterval::createFromDateString()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-interval-format.php","title":"date_interval_format","description":"\n \n  date_interval_format\n  (PHP 5 &gt;= 5.3.0)date_interval_format &mdash; Alias of  DateInterval::format()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateInterval::format()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-isodate-set.php","title":"date_isodate_set","description":"\n \n  date_isodate_set\n  (PHP 5 &gt;= 5.2.0)date_isodate_set &mdash; Alias of  DateTime::setISODate()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::setISODate()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-offset-get.php","title":"date_offset_get","description":"\n \n  date_offset_get\n  (PHP 5 &gt;= 5.2.0)date_offset_get &mdash; Alias of  DateTime::getOffset()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::getOffset()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-modify.php","title":"date_modify","description":"\n \n  date_modify\n  (PHP 5 &gt;= 5.2.0)date_modify &mdash; Alias of  DateTime::modify()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::modify()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-parse-from-format.php","title":"date_parse_from_format","description":"\n \n  date_parse_from_format\n  (PHP 5 &gt;= 5.3.0)date_parse_from_format &mdash; Get info about given date formatted according to the specified format\n\n \n\n \n  Description\n  \n   array date_parse_from_format\n    ( string $format\n   , string $date\n   )\n\n  \n   Returns associative array with detailed info about given date.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       Format accepted by DateTime::createFromFormat().\n      \n     \n\n    \n\n    \n\n     date\n     \n\n      \n       String representing the date.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n   Returns associative array with detailed info about given date.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 date_parse_from_format() example\n    \n\n&lt;?php$date&nbsp;=&nbsp;\"6.1.2009&nbsp;13:00+01:00\";print_r(date_parse_from_format(\"j.n.Y&nbsp;H:iP\",&nbsp;$date));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [year] =&gt; 2009\n    [month] =&gt; 1\n    [day] =&gt; 6\n    [hour] =&gt; 13\n    [minute] =&gt; 0\n    [second] =&gt; 0\n    [fraction] =&gt; \n    [warning_count] =&gt; 0\n    [warnings] =&gt; Array\n        (\n        )\n\n    [error_count] =&gt; 0\n    [errors] =&gt; Array\n        (\n        )\n\n    [is_localtime] =&gt; 1\n    [zone_type] =&gt; 1\n    [zone] =&gt; -60\n    [is_dst] =&gt; \n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format\n    checkdate() - Validate a Gregorian date\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-parse.php","title":"date_parse","description":"\n \n  date_parse\n  (PHP 5 &gt;= 5.2.0)date_parse &mdash; Returns associative array with detailed info about given date\n\n \n \n  Description\n  \n   array date_parse\n    ( string $date\n   )\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     date\n     \n\n      \n       Date in format accepted by strtotime().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns array with information about the parsed date\n   on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   In case the date format has an error, the element &#039;errors&#039; will \n   contains the error messages.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 A date_parse() example\n    \n\n&lt;?phpprint_r(date_parse(\"2006-12-12&nbsp;10:00:00.5\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [year] =&gt; 2006\n    [month] =&gt; 12\n    [day] =&gt; 12\n    [hour] =&gt; 10\n    [minute] =&gt; 0\n    [second] =&gt; 0\n    [fraction] =&gt; 0.5\n    [warning_count] =&gt; 0\n    [warnings] =&gt; Array()\n    [error_count] =&gt; 0\n    [errors] =&gt; Array()\n    [is_localtime] =&gt; \n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    checkdate() - Validate a Gregorian date\n    getdate() - Get date\/time information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sub.php","title":"date_sub","description":"\n \n  date_sub\n  (PHP 5 &gt;= 5.3.0)date_sub &mdash; Alias of  DateTime::sub()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::sub()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sun-info.php","title":"date_sun_info","description":"\n \n  date_sun_info\n  (PHP 5 &gt;= 5.1.2)date_sun_info &mdash; Returns an array with information about sunset\/sunrise and twilight begin\/end\n\n \n \n  Description\n  \n   array date_sun_info\n    ( int $time\n   , float $latitude\n   , float $longitude\n   )\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     time\n     \n\n      \n       Timestamp.\n      \n     \n\n    \n\n    \n\n     latitude\n     \n\n      \n       Latitude in degrees.\n      \n     \n\n    \n\n    \n\n     longitude\n     \n\n      \n       Longitude in degrees.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns array on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A date_sun_info() example\n    \n\n&lt;?php$sun_info&nbsp;=&nbsp;date_sun_info(strtotime(\"2006-12-12\"),&nbsp;31.7667,&nbsp;35.2333);foreach&nbsp;($sun_info&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$key:&nbsp;\"&nbsp;.&nbsp;date(\"H:i:s\",&nbsp;$val)&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nsunrise: 05:52:11\nsunset: 15:41:21\ntransit: 10:46:46\ncivil_twilight_begin: 05:24:08\ncivil_twilight_end: 16:09:24\nnautical_twilight_begin: 04:52:25\nnautical_twilight_end: 16:41:06\nastronomical_twilight_begin: 04:21:32\nastronomical_twilight_end: 17:12:00\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    date_sunrise() - Returns time of sunrise for a given day and location\n    date_sunset() - Returns time of sunset for a given day and location\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sunrise.php","title":"date_sunrise","description":"\n \n  date_sunrise\n  (PHP 5)date_sunrise &mdash; Returns time of sunrise for a given day and location\n\n \n\n \n  Description\n  \n   mixed date_sunrise\n    ( int $timestamp\n   [, int $format = SUNFUNCS_RET_STRING\n   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)\n   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)\n   [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;)\n   [, float $gmt_offset = 0\n  ]]]]] )\n\n  \n   date_sunrise() returns the sunrise time for a given\n   day (specified as a timestamp) and location.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       The timestamp of the day from which the sunrise\n       time is taken.\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       \n        format constants\n        \n         \n          \n           constant\n           description\n           example\n          \n\n         \n\n         \n          \n           SUNFUNCS_RET_STRING\n           returns the result as string\n           16:46\n          \n\n          \n           SUNFUNCS_RET_DOUBLE\n           returns the result as float\n           16.78243132\n          \n\n          \n           SUNFUNCS_RET_TIMESTAMP\n           returns the result as integer (timestamp)\n           1095034606\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     latitude\n     \n\n      \n       Defaults to North, pass in a negative value for South.\n       See also: date.default_latitude\n      \n     \n\n    \n\n    \n\n     longitude\n     \n\n      \n       Defaults to East, pass in a negative value for West.\n       See also: date.default_longitude\n      \n     \n\n    \n\n    \n\n     zenith\n     \n\n      \n       Default: date.sunrise_zenith\n      \n     \n\n    \n\n    \n\n     gmtoffset\n     \n\n      \n       Specified in hours.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the sunrise time in a specified format on\n   success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n     \n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 date_sunrise() example\n    \n\n&lt;?php\/*&nbsp;calculate&nbsp;the&nbsp;sunrise&nbsp;time&nbsp;for&nbsp;Lisbon,&nbsp;PortugalLatitude:&nbsp;38.4&nbsp;NorthLongitude:&nbsp;9&nbsp;WestZenith&nbsp;~=&nbsp;90offset:&nbsp;+1&nbsp;GMT*\/echo&nbsp;date(\"D&nbsp;M&nbsp;d&nbsp;Y\").&nbsp;',&nbsp;sunrise&nbsp;time&nbsp;:&nbsp;'&nbsp;.date_sunrise(time(),&nbsp;SUNFUNCS_RET_STRING,&nbsp;38.4,&nbsp;-9,&nbsp;90,&nbsp;1);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMon Dec 20 2004, sunrise time : 08:54\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    date_sunset() - Returns time of sunset for a given day and location\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-time-set.php","title":"date_time_set","description":"\n \n  date_time_set\n  (PHP 5 &gt;= 5.2.0)date_time_set &mdash; Alias of  DateTime::setTime()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::setTime()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-sunset.php","title":"date_sunset","description":"\n \n  date_sunset\n  (PHP 5)date_sunset &mdash; \n   Returns time of sunset for a given day and location\n  \n\n \n\n \n  Description\n  \n   mixed date_sunset\n    ( int $timestamp\n   [, int $format = SUNFUNCS_RET_STRING\n   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)\n   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)\n   [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;)\n   [, float $gmt_offset = 0\n   ]]]]] )\n\n   \n    date_sunset() returns the sunset time for a given\n    day (specified as a timestamp) and location.\n   \n  \n\n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       The timestamp of the day from which the sunset\n       time is taken.\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       \n        format constants\n        \n         \n          \n           constant\n           description\n           example\n          \n\n         \n\n         \n          \n           SUNFUNCS_RET_STRING\n           returns the result as string\n           16:46\n          \n\n          \n           SUNFUNCS_RET_DOUBLE\n           returns the result as float\n           16.78243132\n          \n\n          \n           SUNFUNCS_RET_TIMESTAMP\n           returns the result as integer (timestamp)\n           1095034606\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     latitude\n     \n\n      \n       Defaults to North, pass in a negative value for South.\n       See also: date.default_latitude\n      \n     \n\n    \n\n    \n\n     longitude\n     \n\n      \n       Defaults to East, pass in a negative value for West.\n       See also: date.default_longitude\n      \n     \n\n    \n\n    \n\n     zenith\n     \n\n      \n       Default: date.sunset_zenith\n      \n     \n\n    \n\n    \n\n     gmtoffset\n     \n\n      \n       Specified in hours.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n     \n     \n    \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the sunset time in a specified format on\n   success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 date_sunset() example\n    \n\n&lt;?php\/*&nbsp;calculate&nbsp;the&nbsp;sunset&nbsp;time&nbsp;for&nbsp;Lisbon,&nbsp;PortugalLatitude:&nbsp;38.4&nbsp;NorthLongitude:&nbsp;9&nbsp;WestZenith&nbsp;~=&nbsp;90offset:&nbsp;+1&nbsp;GMT*\/echo&nbsp;date(\"D&nbsp;M&nbsp;d&nbsp;Y\").&nbsp;',&nbsp;sunset&nbsp;time&nbsp;:&nbsp;'&nbsp;.date_sunset(time(),&nbsp;SUNFUNCS_RET_STRING,&nbsp;38.4,&nbsp;-9,&nbsp;90,&nbsp;1);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMon Dec 20 2004, sunset time : 18:13\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    date_sunrise() - Returns time of sunrise for a given day and location\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timestamp-get.php","title":"date_timestamp_get","description":"\n \n  date_timestamp_get\n  (PHP 5 &gt;= 5.3.0)date_timestamp_get &mdash; Alias of  DateTime::getTimestamp()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::getTimestamp()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timestamp-set.php","title":"date_timestamp_set","description":"\n \n  date_timestamp_set\n  (PHP 5 &gt;= 5.3.0)date_timestamp_set &mdash; Alias of  DateTime::setTimestamp()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::setTimestamp()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timezone-get.php","title":"date_timezone_get","description":"\n \n  date_timezone_get\n  (PHP 5 &gt;= 5.2.0)date_timezone_get &mdash; Alias of  DateTime::getTimezone()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::getTimezone()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date-timezone-set.php","title":"date_timezone_set","description":"\n \n  date_timezone_set\n  (PHP 5 &gt;= 5.2.0)date_timezone_set &mdash; Alias of  DateTime::setTimezone()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTime::setTimezone()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gettimeofday.php","title":"gettimeofday","description":"\n \n  gettimeofday\n  (PHP 4, PHP 5)gettimeofday &mdash; Get current time\n\n \n\n \n  Description\n  \n   mixed gettimeofday\n    ([ bool $return_float = false\n  ] )\n\n  \n   This is an interface to gettimeofday(2). It returns an\n   associative array containing the data returned from the system\n   call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     return_float\n     \n\n      \n       When set to TRUE, a float instead of an array is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   By default an array is returned. If return_float\n   is set, then a float is returned.\n  \n  \n   Array keys:\n   \n    \n     \n      &quot;sec&quot; - seconds since the Unix Epoch\n     \n    \n    \n     \n      &quot;usec&quot; - microseconds\n     \n    \n    \n     \n      &quot;minuteswest&quot; - minutes west of Greenwich\n     \n    \n    \n     \n      &quot;dsttime&quot; - type of dst correction\n     \n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The return_float parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 gettimeofday() example\n    \n\n&lt;?phpprint_r(gettimeofday());echo&nbsp;gettimeofday(true);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [sec] =&gt; 1073504408\n    [usec] =&gt; 238215\n    [minuteswest] =&gt; 0\n    [dsttime] =&gt; 1\n)\n\n1073504408.23910\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getdate.php","title":"getdate","description":"\n \n  getdate\n  (PHP 4, PHP 5)getdate &mdash; Get date\/time information\n\n \n\n \n  Description\n  \n   array getdate\n    ([ int $timestamp = time()\n  ] )\n\n  \n   Returns an associative array containing the date\n   information of the timestamp, or the current\n   local time if no timestamp is given.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n   \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array of information related to\n   the timestamp. Elements from the returned \n   associative array are as follows:\n  \n  \n   \n    Key elements of the returned associative array\n    \n     \n      \n       Key\n       Description\n       Example returned values\n      \n\n     \n\n     \n      \n       &quot;seconds&quot;\n       Numeric representation of seconds\n       0 to 59\n      \n\n      \n       &quot;minutes&quot;\n       Numeric representation of minutes\n       0 to 59\n      \n\n      \n       &quot;hours&quot;\n       Numeric representation of hours\n       0 to 23\n      \n\n      \n       &quot;mday&quot;\n       Numeric representation of the day of the month\n       1 to 31\n      \n\n      \n       &quot;wday&quot;\n       Numeric representation of the day of the week\n       0 (for Sunday) through 6 (for Saturday)\n      \n\n      \n       &quot;mon&quot;\n       Numeric representation of a month\n       1 through 12\n      \n\n      \n       &quot;year&quot;\n       A full numeric representation of a year, 4 digits\n       Examples: 1999 or 2003\n      \n\n      \n       &quot;yday&quot;\n       Numeric representation of the day of the year\n       0 through 365\n      \n\n      \n       &quot;weekday&quot;\n       A full textual representation of the day of the week\n       Sunday through Saturday\n      \n\n      \n       &quot;month&quot;\n       A full textual representation of a month, such as January or March\n       January through December\n      \n\n      \n       0\n       \n        Seconds since the Unix Epoch, similar to the values returned by\n        time() and used by date().\n       \n       \n        System Dependent, typically -2147483648 through\n        2147483647.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 getdate() example\n    \n\n&lt;?php$today&nbsp;=&nbsp;getdate();print_r($today);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [seconds] =&gt; 40\n    [minutes] =&gt; 58\n    [hours]   =&gt; 21\n    [mday]    =&gt; 17\n    [wday]    =&gt; 2\n    [mon]     =&gt; 6\n    [year]    =&gt; 2003\n    [yday]    =&gt; 167\n    [weekday] =&gt; Tuesday\n    [month]   =&gt; June\n    [0]       =&gt; 1055901520\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    date() - Format a local time\/date\n    idate() - Format a local time\/date as integer\n    localtime() - Get the local time\n    time() - Return current Unix timestamp\n    setlocale() - Set locale information\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmdate.php","title":"gmdate","description":"\n \n  gmdate\n  (PHP 4, PHP 5)gmdate &mdash; Format a GMT\/UTC date\/time\n\n \n\n \n  Description\n  \n   string gmdate\n    ( string $format\n   [, int $timestamp = time()\n  ] )\n\n  \n   Identical to the date() function except that\n   the time returned is Greenwich Mean Time (GMT). \n  \n \n \n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       The format of the outputted date string. See the formatting\n       options for the date() function.\n      \n     \n\n    \n\n    \n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n   \n   \n\n  \n \n   \n\n \n  Return Values\n  \n   Returns a formatted date string. If a non-numeric value is used for \n   timestamp, FALSE is returned and an \n   E_WARNING level error is emitted.\n  \n \n   \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The valid range of a timestamp is typically from Fri, 13 Dec\n        1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are\n        the dates that correspond to the minimum and maximum values for\n        a 32-bit signed integer). However, before PHP 5.1.0 this range was limited\n        from 01-01-1970 to 19-01-2038 on some systems (e.g. Windows).\n       \n      \n\n      \n       5.1.1\n       \n        There are useful constants \n        of standard date\/time formats that can be used to specify the \n        format parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 gmdate() example\n    \n     When run in Finland (GMT +0200), the first line below prints &quot;Jan 01\n     1998 00:00:00&quot;, while the second prints &quot;Dec 31 1997 22:00:00&quot;.\n    \n    \n\n&lt;?phpecho&nbsp;date(\"M&nbsp;d&nbsp;Y&nbsp;H:i:s\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;1998));echo&nbsp;gmdate(\"M&nbsp;d&nbsp;Y&nbsp;H:i:s\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;1998));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    date() - Format a local time\/date\n    mktime() - Get Unix timestamp for a date\n    gmmktime() - Get Unix timestamp for a GMT date\n    strftime() - Format a local time\/date according to locale settings\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmstrftime.php","title":"gmstrftime","description":"\n \n  gmstrftime\n  (PHP 4, PHP 5)gmstrftime &mdash; Format a GMT\/UTC time\/date according to locale settings\n\n \n\n \n  Description\n  \n   string gmstrftime\n    ( string $format\n   [, int $timestamp = time()\n  ] )\n\n  \n   Behaves the same as strftime() except that the\n   time returned is Greenwich Mean Time (GMT). For example, when run\n   in Eastern Standard Time (GMT -0500), the first line below prints\n   &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999\n   01:00:00&quot;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       See description in strftime().\n      \n     \n\n    \n\n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string formatted according to the given format string\n   using the given timestamp or the current\n   local time if no timestamp is given.  Month and weekday names and\n   other language dependent strings respect the current locale set\n   with setlocale().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 gmstrftime() example\n    \n\n&lt;?phpsetlocale(LC_TIME,&nbsp;'en_US');echo&nbsp;strftime(\"%b&nbsp;%d&nbsp;%Y&nbsp;%H:%M:%S\",&nbsp;mktime(20,&nbsp;0,&nbsp;0,&nbsp;12,&nbsp;31,&nbsp;98))&nbsp;.&nbsp;\"\\n\";echo&nbsp;gmstrftime(\"%b&nbsp;%d&nbsp;%Y&nbsp;%H:%M:%S\",&nbsp;mktime(20,&nbsp;0,&nbsp;0,&nbsp;12,&nbsp;31,&nbsp;98))&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    strftime() - Format a local time\/date according to locale settings\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.idate.php","title":"idate","description":"\n \n  idate\n  (PHP 5)idate &mdash; Format a local time\/date as integer\n\n \n\n \n  Description\n  \n   int idate\n    ( string $format\n   [, int $timestamp = time()\n  ] )\n\n  \n   Returns a number formatted according to the given format string using the\n   given integer timestamp or the current local time\n   if no timestamp is given. In other words, timestamp\n   is optional and defaults to the value of time().\n  \n  \n   Unlike the function date(), idate()\n   accepts just one char in the format parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       \n        The following characters are recognized in the\n        format parameter string\n        \n         \n          \n           format character\n           Description\n          \n\n         \n\n         \n          \n           B\n           Swatch Beat\/Internet Time\n          \n\n          \n           d\n           Day of the month\n          \n\n          \n           h\n           Hour (12 hour format)\n          \n\n          \n           H\n           Hour (24 hour format)\n          \n\n          \n           i\n           Minutes\n          \n\n          \n           I (uppercase i)\n           returns 1 if DST is activated,\n            0 otherwise\n          \n\n          \n           L (uppercase l)\n           returns 1 for leap year,\n            0 otherwise\n          \n\n          \n           m\n           Month number\n          \n\n          \n           s\n           Seconds\n          \n\n          \n           t\n           Days in current month\n          \n\n          \n           U\n           Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC -\n            this is the same as time()\n          \n\n          \n           w\n           Day of the week (0 on Sunday)\n          \n\n          \n           W\n           ISO-8601 week number of year, weeks starting on\n            Monday\n          \n\n          \n           y\n           Year (1 or 2 digits - check note below)\n          \n\n          \n           Y\n           Year (4 digits)\n          \n\n          \n           z\n           Day of the year\n          \n\n          \n           Z\n           Timezone offset in seconds\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n      \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an integer.\n  \n  \n   As idate() always returns an integer and\n   as they can&#039;t start with a &quot;0&quot;, idate() may return\n   fewer digits than you would expect. See the example below.\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n     \n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 idate() example\n    \n\n&lt;?php$timestamp&nbsp;=&nbsp;strtotime('1st&nbsp;January&nbsp;2004');&nbsp;\/\/1072915200\/\/&nbsp;this&nbsp;prints&nbsp;the&nbsp;year&nbsp;in&nbsp;a&nbsp;two&nbsp;digit&nbsp;format\/\/&nbsp;however,&nbsp;as&nbsp;this&nbsp;would&nbsp;start&nbsp;with&nbsp;a&nbsp;\"0\",&nbsp;it\/\/&nbsp;only&nbsp;prints&nbsp;\"4\"echo&nbsp;idate('y',&nbsp;$timestamp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    date() - Format a local time\/date\n    getdate() - Get date\/time information\n    time() - Return current Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.date.php","title":"date","description":"\n \n  date\n  (PHP 4, PHP 5)date &mdash; Format a local time\/date\n\n \n  \n \n  Description\n  \n   string date\n    ( string $format\n   [, int $timestamp = time()\n  ] )\n\n  \n   Returns a string formatted according to the given format string using the\n   given integer timestamp or the current time\n   if no timestamp is given.  In other words, timestamp\n   is optional and defaults to the value of time().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       The format of the outputted date string. See the formatting\n       options below. There are also several\n       predefined date constants\n       that may be used instead, so for example DATE_RSS\n       contains the format string &#039;D, d M Y H:i:s&#039;.\n      \n      \n       \n        The following characters are recognized in the\n        format parameter string\n        \n         \n          \n           format character\n           Description\n           Example returned values\n          \n\n         \n\n         \n          \n           Day\n           ---\n           ---\n          \n\n          \n           d\n           Day of the month, 2 digits with leading zeros\n           01 to 31\n          \n\n          \n           D\n           A textual representation of a day, three letters\n           Mon through Sun\n          \n\n          \n           j\n           Day of the month without leading zeros\n           1 to 31\n          \n\n          \n           l (lowercase &#039;L&#039;)\n           A full textual representation of the day of the week\n           Sunday through Saturday\n          \n\n          \n           N\n           ISO-8601 numeric representation of the day of the week (added in\n           PHP 5.1.0)\n           1 (for Monday) through 7 (for Sunday)\n          \n\n          \n           S\n           English ordinal suffix for the day of the month, 2 characters\n           \n            st, nd, rd or\n            th.  Works well with j\n           \n          \n\n          \n           w\n           Numeric representation of the day of the week\n           0 (for Sunday) through 6 (for Saturday)\n          \n\n          \n           z\n           The day of the year (starting from 0)\n           0 through 365\n          \n\n          \n           Week\n           ---\n           ---\n          \n\n          \n           W\n           ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)\n           Example: 42 (the 42nd week in the year)\n          \n\n          \n           Month\n           ---\n           ---\n          \n\n          \n           F\n           A full textual representation of a month, such as January or March\n           January through December\n          \n\n          \n           m\n           Numeric representation of a month, with leading zeros\n           01 through 12\n          \n\n          \n           M\n           A short textual representation of a month, three letters\n           Jan through Dec\n          \n\n          \n           n\n           Numeric representation of a month, without leading zeros\n           1 through 12\n          \n\n          \n           t\n           Number of days in the given month\n           28 through 31\n          \n\n          \n           Year\n           ---\n           ---\n          \n\n          \n           L\n           Whether it&#039;s a leap year\n           1 if it is a leap year, 0 otherwise.\n          \n\n          \n           o\n           ISO-8601 year number. This has the same value as\n            Y, except that if the ISO week number\n            (W) belongs to the previous or next year, that year\n            is used instead. (added in PHP 5.1.0)\n           Examples: 1999 or 2003\n          \n\n          \n           Y\n           A full numeric representation of a year, 4 digits\n           Examples: 1999 or 2003\n          \n\n          \n           y\n           A two digit representation of a year\n           Examples: 99 or 03\n          \n\n          \n           Time\n           ---\n           ---\n          \n\n          \n           a\n           Lowercase Ante meridiem and Post meridiem\n           am or pm\n          \n\n          \n           A\n           Uppercase Ante meridiem and Post meridiem\n           AM or PM\n          \n\n          \n           B\n           Swatch Internet time\n           000 through 999\n          \n\n          \n           g\n           12-hour format of an hour without leading zeros\n           1 through 12\n          \n\n          \n           G\n           24-hour format of an hour without leading zeros\n           0 through 23\n          \n\n          \n           h\n           12-hour format of an hour with leading zeros\n           01 through 12\n          \n\n          \n           H\n           24-hour format of an hour with leading zeros\n           00 through 23\n          \n\n          \n           i\n           Minutes with leading zeros\n           00 to 59\n          \n\n          \n           s\n           Seconds, with leading zeros\n           00 through 59\n          \n\n          \n           u\n           Microseconds (added in PHP 5.2.2)\n           Example: 654321\n          \n\n          \n           Timezone\n           ---\n           ---\n          \n\n          \n           e\n           Timezone identifier (added in PHP 5.1.0)\n           Examples: UTC, GMT, Atlantic\/Azores\n          \n\n          \n           I (capital i)\n           Whether or not the date is in daylight saving time\n           1 if Daylight Saving Time, 0 otherwise.\n          \n\n          \n           O\n           Difference to Greenwich time (GMT) in hours\n           Example: +0200\n          \n\n          \n           P\n           Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)\n           Example: +02:00\n          \n\n          \n           T\n           Timezone abbreviation\n           Examples: EST, MDT ...\n          \n\n          \n           Z\n           Timezone offset in seconds. The offset for timezones west of UTC is always\n           negative, and for those east of UTC is always positive.\n           -43200 through 50400\n          \n\n          \n           Full Date\/Time\n           ---\n           ---\n          \n\n          \n           c\n           ISO 8601 date (added in PHP 5)\n           2004-02-12T15:19:21+00:00\n          \n\n          \n           r\n           &raquo;&nbsp;RFC 2822 formatted date\n           Example: Thu, 21 Dec 2000 16:01:07 +0200\n          \n\n          \n           U\n           Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\n           See also time()\n          \n\n         \n        \n       \n\n      \n      \n       Unrecognized characters in the format string will be printed\n       as-is.  The Z format will always return\n       0 when using gmdate().\n             \n      Note: \n       \n        Since this function only accepts integer timestamps the\n        u format character is only useful when using the\n        date_format() function with user based timestamps\n        created with date_create().\n       \n      \n     \n\n    \n\n    \n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n   \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a formatted date string. If a non-numeric value is used for \n   timestamp, FALSE is returned and an \n   E_WARNING level error is emitted.\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The valid range of a timestamp is typically from Fri, 13 Dec\n        1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are\n        the dates that correspond to the minimum and maximum values for\n        a 32-bit signed integer). However, before PHP 5.1.0 this range was limited\n        from 01-01-1970 to 19-01-2038 on some systems (e.g. Windows).\n       \n      \n\n      \n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n\n      \n       5.1.1\n       \n        There are useful constants \n        of standard date\/time formats that can be used to specify the \n        format parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 date() examples\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;the&nbsp;default&nbsp;timezone&nbsp;to&nbsp;use.&nbsp;Available&nbsp;since&nbsp;PHP&nbsp;5.1date_default_timezone_set('UTC');\/\/&nbsp;Prints&nbsp;something&nbsp;like:&nbsp;Mondayecho&nbsp;date(\"l\");\/\/&nbsp;Prints&nbsp;something&nbsp;like:&nbsp;Monday&nbsp;8th&nbsp;of&nbsp;August&nbsp;2005&nbsp;03:12:46&nbsp;PMecho&nbsp;date('l&nbsp;jS&nbsp;\\of&nbsp;F&nbsp;Y&nbsp;h:i:s&nbsp;A');\/\/&nbsp;Prints:&nbsp;July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;Saturdayecho&nbsp;\"July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;\"&nbsp;.&nbsp;date(\"l\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;7,&nbsp;1,&nbsp;2000));\/*&nbsp;use&nbsp;the&nbsp;constants&nbsp;in&nbsp;the&nbsp;format&nbsp;parameter&nbsp;*\/\/\/&nbsp;prints&nbsp;something&nbsp;like:&nbsp;Mon,&nbsp;15&nbsp;Aug&nbsp;2005&nbsp;15:12:46&nbsp;UTCecho&nbsp;date(DATE_RFC822);\/\/&nbsp;prints&nbsp;something&nbsp;like:&nbsp;2000-07-01T00:00:00+00:00echo&nbsp;date(DATE_ATOM,&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;7,&nbsp;1,&nbsp;2000));?&gt;\n\n\n    \n\n   \n  \n  \n   You can prevent a recognized character in the format string from being\n   expanded by escaping it with a preceding backslash. If the character with\n   a backslash is already a special sequence, you may need to also escape\n   the backslash.\n   \n    Example #2 Escaping characters in date()\n    \n\n&lt;?php\/\/&nbsp;prints&nbsp;something&nbsp;like:&nbsp;Wednesday&nbsp;the&nbsp;15thecho&nbsp;date('l&nbsp;\\t\\h\\e&nbsp;jS');?&gt;\n\n\n    \n\n   \n  \n  \n   It is possible to use date() and\n   mktime() together to find dates in the future\n   or the past.\n   \n    Example #3 date() and mktime() example\n    \n\n&lt;?php$tomorrow&nbsp;&nbsp;=&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;date(\"m\")&nbsp;&nbsp;,&nbsp;date(\"d\")+1,&nbsp;date(\"Y\"));$lastmonth&nbsp;=&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;date(\"m\")-1,&nbsp;date(\"d\"),&nbsp;&nbsp;&nbsp;date(\"Y\"));$nextyear&nbsp;&nbsp;=&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;date(\"m\"),&nbsp;&nbsp;&nbsp;date(\"d\"),&nbsp;&nbsp;&nbsp;date(\"Y\")+1);?&gt;\n\n\n    \n\n   \n   Note: \n    \n     This can be more reliable than simply adding or subtracting the number\n     of seconds in a day or month to a timestamp because of daylight saving\n     time.\n    \n   \n  \n  \n   Some examples of date() formatting. Note that\n   you should escape any other characters, as any which currently\n   have a special meaning will produce undesirable results, and\n   other characters may be assigned meaning in future PHP versions.\n   When escaping, be sure to use single quotes to prevent characters\n   like \\n from becoming newlines.\n   \n    Example #4 date() Formatting\n    \n\n&lt;?php\/\/&nbsp;Assuming&nbsp;today&nbsp;is&nbsp;March&nbsp;10th,&nbsp;2001,&nbsp;5:16:18&nbsp;pm,&nbsp;and&nbsp;that&nbsp;we&nbsp;are&nbsp;in&nbsp;the\/\/&nbsp;Mountain&nbsp;Standard&nbsp;Time&nbsp;(MST)&nbsp;Time&nbsp;Zone$today&nbsp;=&nbsp;date(\"F&nbsp;j,&nbsp;Y,&nbsp;g:i&nbsp;a\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;March&nbsp;10,&nbsp;2001,&nbsp;5:16&nbsp;pm$today&nbsp;=&nbsp;date(\"m.d.y\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;03.10.01$today&nbsp;=&nbsp;date(\"j,&nbsp;n,&nbsp;Y\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;10,&nbsp;3,&nbsp;2001$today&nbsp;=&nbsp;date(\"Ymd\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;20010310$today&nbsp;=&nbsp;date('h-i-s,&nbsp;j-m-y,&nbsp;it&nbsp;is&nbsp;w&nbsp;Day');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;05-16-18,&nbsp;10-03-01,&nbsp;1631&nbsp;1618&nbsp;6&nbsp;Satpm01$today&nbsp;=&nbsp;date('\\i\\t&nbsp;\\i\\s&nbsp;\\t\\h\\e&nbsp;jS&nbsp;\\d\\a\\y.');&nbsp;&nbsp;&nbsp;\/\/&nbsp;it&nbsp;is&nbsp;the&nbsp;10th&nbsp;day.$today&nbsp;=&nbsp;date(\"D&nbsp;M&nbsp;j&nbsp;G:i:s&nbsp;T&nbsp;Y\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Sat&nbsp;Mar&nbsp;10&nbsp;17:16:18&nbsp;MST&nbsp;2001$today&nbsp;=&nbsp;date('H:m:s&nbsp;\\m&nbsp;\\i\\s\\&nbsp;\\m\\o\\n\\t\\h');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;17:03:18&nbsp;m&nbsp;is&nbsp;month$today&nbsp;=&nbsp;date(\"H:i:s\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;17:16:18?&gt;\n\n\n    \n\n   \n  \n  \n   To format dates in other languages, you should use the\n   setlocale() and strftime()\n   functions instead of date().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    To generate a timestamp from a string representation of the date, you\n    may be able to use strtotime(). Additionally, some\n    databases have functions to convert their date formats into timestamps\n    (such as MySQL&#039;s &raquo;&nbsp;UNIX_TIMESTAMP\n    function).\n   \n  \n  Tip\n   \n    Timestamp of the start of the request is available in\n    $_SERVER['REQUEST_TIME'] since PHP 5.1.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gmdate() - Format a GMT\/UTC date\/time\n    idate() - Format a local time\/date as integer\n    getdate() - Get date\/time information\n    getlastmod() - Gets time of last page modification\n    mktime() - Get Unix timestamp for a date\n    strftime() - Format a local time\/date according to locale settings\n    time() - Return current Unix timestamp\n    strtotime() - Parse about any English textual datetime description into a Unix timestamp\n    Predefined DateTime Constants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gmmktime.php","title":"gmmktime","description":"\n \n  gmmktime\n  (PHP 4, PHP 5)gmmktime &mdash; Get Unix timestamp for a GMT date\n\n \n\n \n  Description\n  \n   int gmmktime\n    ([ int $hour = gmdate(&quot;H&quot;)\n   [, int $minute = gmdate(&quot;i&quot;)\n   [, int $second = gmdate(&quot;s&quot;)\n   [, int $month = gmdate(&quot;n&quot;)\n   [, int $day = gmdate(&quot;j&quot;)\n   [, int $year = gmdate(&quot;Y&quot;)\n   [, int $is_dst = -1\n  ]]]]]]] )\n\n  \n   Identical to mktime() except the passed parameters represents a \n   GMT date. gmmktime() internally uses mktime()\n   so only times valid in derived local time can be used.\n  \n  \n   Like mktime(), arguments may be left out in order\n   from right to left, with any omitted arguments being set to the\n   current corresponding GMT value.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hour\n     \n\n      \n       The number of the hour relevant to the start of the day determined by\n       month, day and year.\n       Negative values reference the hour before midnight of the day in question.\n       Values greater than 23 reference the appropriate hour in the following day(s).\n      \n     \n\n    \n\n    \n\n     minute\n     \n\n      \n       The number of the minute relevant to the start of the hour.\n       Negative values reference the minute in the previous hour.\n       Values greater than 59 reference the appropriate minute in the following hour(s).\n      \n     \n\n    \n\n    \n\n     second\n     \n\n      \n       The number of seconds relevant to the start of the minute.\n       Negative values reference the second in the previous minute.\n       Values greater than 59 reference the appropriate second in the following minute(s).\n      \n     \n\n    \n\n    \n\n     month\n     \n\n      \n       The number of the month relevant to the end of the previous year.\n       Values 1 to 12 reference the normal calendar months of the year in question.\n       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.\n       Values greater than 12 reference the appropriate month in the following year(s).\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The number of the day relevant to the end of the previous month.\n       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.\n       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.\n       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The year\n      \n     \n\n    \n\n    \n\n     is_dst\n     \n\n      \n       Parameters always represent a GMT date so is_dst\n       doesn&#039;t influence the result.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a integer Unix timestamp.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        As of PHP 5.1.0, the is_dst parameter became\n        deprecated. As a result, the new timezone handling features should be used\n        instead.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 gmmktime() basic example\n    \n\n&lt;?php\/\/&nbsp;Prints:&nbsp;July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;Fridayecho&nbsp;\"July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;\"&nbsp;.&nbsp;date(\"l\",&nbsp;gmmktime(0,&nbsp;0,&nbsp;0,&nbsp;7,&nbsp;1,&nbsp;2000));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mktime() - Get Unix timestamp for a date\n    date() - Format a local time\/date\n    time() - Return current Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.localtime.php","title":"localtime","description":"\n \n  localtime\n  (PHP 4, PHP 5)localtime &mdash; Get the local time\n\n \n\n \n  Description\n  \n   array localtime\n    ([ int $timestamp = time()\n   [, bool $is_associative = false\n  ]] )\n\n  \n   The localtime() function returns an array\n   identical to that of the structure returned by the C function\n   call.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n   \n    \n\n     is_associative\n     \n\n      \n       If set to FALSE or not supplied then the array is returned as a regular, \n       numerically indexed array.  If the argument is set to TRUE then\n       localtime() returns an associative array containing\n       all the different elements of the structure returned by the C\n       function call to localtime.  The names of the different keys of\n       the associative array are as follows:\n      \n      \n       \n        \n         \n          &quot;tm_sec&quot; - seconds, 0 to 59\n         \n        \n        \n         \n          &quot;tm_min&quot; - minutes, 0 to 59\n         \n        \n        \n         \n          &quot;tm_hour&quot; - hours, 0 to 23\n         \n        \n        \n         \n          &quot;tm_mday&quot; - day of the month, 1 to 31\n         \n        \n        \n         \n          &quot;tm_mon&quot; - month of the year, 0 (Jan) to 11 (Dec)\n         \n        \n        \n         \n          &quot;tm_year&quot; - years since 1900\n         \n        \n        \n         \n          &quot;tm_wday&quot; - day of the week, 0 (Sun) to 6 (Sat)\n         \n        \n        \n         \n          &quot;tm_yday&quot; - day of the year, 0 to 365\n         \n        \n        \n         \n          &quot;tm_isdst&quot; - is daylight savings time in effect? \n         \n         \n          Positive if yes, 0 if not, negative if unknown.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n     \n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 localtime() example\n    \n\n&lt;?php$localtime&nbsp;=&nbsp;localtime();$localtime_assoc&nbsp;=&nbsp;localtime(time(),&nbsp;true);print_r($localtime);print_r($localtime_assoc);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; 24\n    [1] =&gt; 3\n    [2] =&gt; 19\n    [3] =&gt; 3\n    [4] =&gt; 3\n    [5] =&gt; 105\n    [6] =&gt; 0\n    [7] =&gt; 92\n    [8] =&gt; 1\n)\n\nArray\n(\n    [tm_sec] =&gt; 24\n    [tm_min] =&gt; 3\n    [tm_hour] =&gt; 19\n    [tm_mday] =&gt; 3\n    [tm_mon] =&gt; 3\n    [tm_year] =&gt; 105\n    [tm_wday] =&gt; 0\n    [tm_yday] =&gt; 92\n    [tm_isdst] =&gt; 1\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    getdate() - Get date\/time information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.microtime.php","title":"microtime","description":"\n \n  microtime\n  (PHP 4, PHP 5)microtime &mdash; Return current Unix timestamp with microseconds\n\n \n\n \n  Description\n  \n   mixed microtime\n    ([ bool $get_as_float = false\n  ] )\n\n  \n   microtime() returns the current Unix timestamp with\n   microseconds. This function is only available on operating systems that\n   support the gettimeofday() system call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     get_as_float\n     \n\n      \n       If used and set to TRUE, microtime() will return a\n       float instead of a string, as described in\n       the return values section below.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   By default, microtime() returns a string in\n   the form &quot;msec sec&quot;, where sec is the current time\n   measured in the number of seconds since the Unix epoch (0:00:00 January 1,\n   1970 GMT), and msec is the number of microseconds that\n   have elapsed since sec expressed in seconds.\n  \n  \n   If get_as_float is set to TRUE, then\n   microtime() returns a float, which\n   represents the current time in seconds since the Unix epoch accurate to the\n   nearest microsecond.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The get_as_float parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Timing script execution with microtime()\n    \n\n&lt;?php\/**&nbsp;*&nbsp;Simple&nbsp;function&nbsp;to&nbsp;replicate&nbsp;PHP&nbsp;5&nbsp;behaviour&nbsp;*\/function&nbsp;microtime_float(){&nbsp;&nbsp;&nbsp;&nbsp;list($usec,&nbsp;$sec)&nbsp;=&nbsp;explode(\"&nbsp;\",&nbsp;microtime());&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((float)$usec&nbsp;+&nbsp;(float)$sec);}$time_start&nbsp;=&nbsp;microtime_float();\/\/&nbsp;Sleep&nbsp;for&nbsp;a&nbsp;whileusleep(100);$time_end&nbsp;=&nbsp;microtime_float();$time&nbsp;=&nbsp;$time_end&nbsp;-&nbsp;$time_start;echo&nbsp;\"Did&nbsp;nothing&nbsp;in&nbsp;$time&nbsp;seconds\\n\";?&gt;\n\n\n    \n\n   \n   \n    Example #2 Timing script execution in PHP 5\n    \n\n&lt;?php$time_start&nbsp;=&nbsp;microtime(true);\/\/&nbsp;Sleep&nbsp;for&nbsp;a&nbsp;whileusleep(100);$time_end&nbsp;=&nbsp;microtime(true);$time&nbsp;=&nbsp;$time_end&nbsp;-&nbsp;$time_start;echo&nbsp;\"Did&nbsp;nothing&nbsp;in&nbsp;$time&nbsp;seconds\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    time() - Return current Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mktime.php","title":"mktime","description":"\n \n  mktime\n  (PHP 4, PHP 5)mktime &mdash; Get Unix timestamp for a date\n\n \n\n \n  Description\n  \n   int mktime\n    ([ int $hour = date(&quot;H&quot;)\n   [, int $minute = date(&quot;i&quot;)\n   [, int $second = date(&quot;s&quot;)\n   [, int $month = date(&quot;n&quot;)\n   [, int $day = date(&quot;j&quot;)\n   [, int $year = date(&quot;Y&quot;)\n   [, int $is_dst = -1\n  ]]]]]]] )\n\n  \n   Returns the Unix timestamp corresponding to the arguments\n   given. This timestamp is a long integer containing the number of\n   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time\n   specified.\n  \n  \n   Arguments may be left out in order from right to left; any\n   arguments thus omitted will be set to the current value according\n   to the local date and time.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    As of PHP 5.1, when called with no arguments, mktime()\n    throws an E_STRICT notice: use the \n    time() function instead.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hour\n     \n\n      \n       The number of the hour relevant to the start of the day determined by\n       month, day and year.\n       Negative values reference the hour before midnight of the day in question.\n       Values greater than 23 reference the appropriate hour in the following day(s).\n      \n     \n\n    \n\n    \n\n     minute\n     \n\n      \n       The number of the minute relevant to the start of the hour.\n       Negative values reference the minute in the previous hour.\n       Values greater than 59 reference the appropriate minute in the following hour(s).\n      \n     \n\n    \n\n    \n\n     second\n     \n\n      \n       The number of seconds relevant to the start of the minute.\n       Negative values reference the second in the previous minute.\n       Values greater than 59 reference the appropriate second in the following minute(s).\n      \n     \n\n    \n\n    \n\n     month\n     \n\n      \n       The number of the month relevant to the end of the previous year.\n       Values 1 to 12 reference the normal calendar months of the year in question.\n       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.\n       Values greater than 12 reference the appropriate month in the following year(s).\n      \n     \n\n    \n\n    \n\n     day\n     \n\n      \n       The number of the day relevant to the end of the previous month.\n       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.\n       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.\n       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).\n      \n     \n\n    \n\n    \n\n     year\n     \n\n      \n       The number of the year, may be a two or four digit value,\n       with values between 0-69 mapping to 2000-2069 and 70-100 to\n       1970-2000. On systems where time_t is a 32bit signed integer, as\n       most common today, the valid range for year \n       is somewhere between 1901 and 2038. However, before PHP 5.1.0 this\n       range was limited from 1970 to 2038 on some systems (e.g. Windows).\n      \n     \n\n    \n\n    \n\n     is_dst\n     \n\n      \n       This parameter can be set to 1 if the time is during daylight savings time (DST), \n       0 if it is not, or -1 (the default) if it is unknown whether the time is within \n       daylight savings time or not. If it&#039;s unknown, PHP tries to figure it out itself.\n       This can cause unexpected (but not incorrect) results.\n       Some times are invalid if DST is enabled on the system PHP is running on or \n       is_dst is set to 1. If DST is enabled in e.g. 2:00, all times \n       between 2:00 and 3:00 are invalid and mktime() returns an undefined \n       (usually negative) value. \n       Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST \n       is enabled is evaluated as 23:30 of the previous day.\n      \n      Note: \n       \n        As of PHP 5.1.0, this parameter became deprecated. As a result, the\n        new timezone handling features should be used instead.\n       \n      \n     \n\n    \n\n   \n\n  \n \n                                                                                                            \n   \n  \n \n  Return Values \n  \n   mktime() returns the Unix timestamp of the arguments\n   given.\n   If the arguments are invalid, the function returns FALSE (before PHP 5.1\n   it returned -1).\n  \n \n\n\n \n  Errors\/Exceptions\n  \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        mktime() now throws E_DEPRECATED notice \n        if the is_dst parameter is used.\n       \n      \n\n      \n       5.1.0\n       \n        The is_dst parameter became deprecated.\n        Made the function return FALSE on error, instead of\n        -1.\n        Fixed the function to accept the year, month and day to be all passed\n        as zero.\n       \n      \n\n      \n       5.1.0\n       \n        When called with no arguments, mktime() throws \n        E_STRICT notice. Use the \n        time() function instead.\n       \n      \n\n\n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mktime() basic example\n    \n\n&lt;?php\/\/&nbsp;Set&nbsp;the&nbsp;default&nbsp;timezone&nbsp;to&nbsp;use.&nbsp;Available&nbsp;as&nbsp;of&nbsp;PHP&nbsp;5.1date_default_timezone_set('UTC');\/\/&nbsp;Prints:&nbsp;July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;Saturdayecho&nbsp;\"July&nbsp;1,&nbsp;2000&nbsp;is&nbsp;on&nbsp;a&nbsp;\"&nbsp;.&nbsp;date(\"l\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;7,&nbsp;1,&nbsp;2000));\/\/&nbsp;Prints&nbsp;something&nbsp;like:&nbsp;2006-04-05T01:02:03+00:00echo&nbsp;date('c',&nbsp;mktime(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;2006));?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 mktime() example\n    \n     mktime() is useful for doing date arithmetic\n     and validation, as it will automatically calculate the correct\n     value for out-of-range input. For example, each of the following\n     lines produces the string &quot;Jan-01-1998&quot;.\n    \n    \n\n&lt;?phpecho&nbsp;date(\"M-d-Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;12,&nbsp;32,&nbsp;1997));echo&nbsp;date(\"M-d-Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;13,&nbsp;1,&nbsp;1997));echo&nbsp;date(\"M-d-Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;1998));echo&nbsp;date(\"M-d-Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;98));?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Last day of a month\n    \n     The last day of any given month can be expressed as the &quot;0&quot; day\n     of the next month, not the -1 day. Both of the following examples\n     will produce the string &quot;The last day in Feb 2000 is: 29&quot;.\n    \n    \n\n&lt;?php$lastday&nbsp;=&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;3,&nbsp;0,&nbsp;2000);echo&nbsp;strftime(\"Last&nbsp;day&nbsp;in&nbsp;Feb&nbsp;2000&nbsp;is:&nbsp;%d\",&nbsp;$lastday);$lastday&nbsp;=&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;4,&nbsp;-31,&nbsp;2000);echo&nbsp;strftime(\"Last&nbsp;day&nbsp;in&nbsp;Feb&nbsp;2000&nbsp;is:&nbsp;%d\",&nbsp;$lastday);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Caution\n   \n    Before PHP 5.1.0, negative timestamps were not supported under any known\n    version of Windows and some other systems as well. Therefore the range of\n    valid years was limited to 1970 through 2038.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    checkdate() - Validate a Gregorian date\n    gmmktime() - Get Unix timestamp for a GMT date\n    date() - Format a local time\/date \n    time() - Return current Unix timestamp\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strptime.php","title":"strptime","description":"\n   \n    strptime\n    (PHP 5 &gt;= 5.1.0)strptime &mdash; \n     Parse a time\/date generated with strftime()\n    \n\n   \n   \n    Description\n    \n     array strptime\n      ( string $date\n     , string $format\n     )\n\n    \n     strptime() returns an array with the\n     date parsed, or FALSE on error.\n    \n    \n     Month and weekday names and other language dependent strings respect the\n     current locale set with setlocale() (LC_TIME).\n    \n   \n\n\n   \n   Parameters\n   \n    \n\n     \n\n      date (string)\n      \n\n       \n        The string to parse (e.g. returned from strftime()).\n       \n      \n\n     \n\n     \n\n      format (string)\n      \n\n       \n        The format used in date (e.g. the same as\n        used in strftime()). Note that some of the format\n        options available to strftime() may not have any\n        effect within strptime(); the exact subset that are\n        supported will vary based on the operating system and C library in\n        use.\n       \n       \n        For more information about the format options, read the\n        strftime() page.\n       \n      \n\n     \n\n    \n\n   \n  \n\n\n  \n   Return Values\n   \n    Returns an array or FALSE on failure.\n   \n\n    \n     \n      The following parameters are returned in the array\n      \n       \n        \n         parameters\n         Description\n        \n\n       \n\n       \n        \n         &quot;tm_sec&quot;\n         Seconds after the minute (0-61)\n        \n\n        \n         &quot;tm_min&quot;\n         Minutes after the hour (0-59)\n        \n\n        \n         &quot;tm_hour&quot;\n         Hour since midnight (0-23)\n        \n\n        \n         &quot;tm_mday&quot;\n         Day of the month (1-31)\n        \n\n        \n         &quot;tm_mon&quot;\n         Months since January (0-11)\n        \n\n        \n         &quot;tm_year&quot;\n         Years since 1900\n        \n\n        \n         &quot;tm_wday&quot;\n         Days since Sunday (0-6)\n        \n\n        \n         &quot;tm_yday&quot;\n         Days since January 1 (0-365)\n        \n\n        \n         &quot;unparsed&quot;\n         the date part which was not\n          recognized using the specified format\n        \n\n       \n      \n     \n\n    \n\n  \n\n\n  \n   Examples\n   \n   \n    Example #1 strptime() example\n    \n\n&lt;?php$format&nbsp;=&nbsp;'%d\/%m\/%Y&nbsp;%H:%M:%S';$strf&nbsp;=&nbsp;strftime($format);echo&nbsp;\"$strf\\n\";print_r(strptime($strf,&nbsp;$format));?&gt;\n\n\n      \n\n      The above example will output\nsomething similar to:\n      \n\n03\/10\/2004 15:54:19\n\nArray\n(\n    [tm_sec] =&gt; 19\n    [tm_min] =&gt; 54\n    [tm_hour] =&gt; 15\n    [tm_mday] =&gt; 3\n    [tm_mon] =&gt; 9\n    [tm_year] =&gt; 104\n    [tm_wday] =&gt; 0\n    [tm_yday] =&gt; 276\n    [unparsed] =&gt;\n)\n\n      \n      \n     \n    \n\n\n    \n     Notes\n     Note: This function is not\nimplemented on Windows platforms.\n     Note: \n      \n       Internally, this function calls the strptime()\n       function provided by the system&#039;s C library. This function can exhibit\n       noticeably different behaviour across different operating systems. The\n       use of date_parse_from_format(), which does not\n       suffer from these issues, is recommended on PHP 5.3.0 and later.\n      \n     \n     Note: \n      \n       &quot;tm_sec&quot; includes any leap seconds (currently upto 2\n       a year). For more information on leap seconds, see the &raquo;&nbsp;Wikipedia article\n       on leap seconds.\n      \n     \n     Note: \n      \n       Prior to PHP 5.2.0, this function could return undefined behaviour. Notably,\n       the &quot;tm_sec&quot;, &quot;tm_min&quot; and &quot;tm_hour&quot; \n       entries would return undefined values.\n      \n     \n    \n\n\n    \n    See Also\n    \n     \n      checkdate() - Validate a Gregorian date\n      strftime() - Format a local time\/date according to locale settings\n      date_parse_from_format() - Get info about given date formatted according to the specified format\n      DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format\n     \n    \n   \n\n  "},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-abbreviations-list.php","title":"timezone_abbreviations_list","description":"\n \n  timezone_abbreviations_list\n  (PHP 5 &gt;= 5.2.0)timezone_abbreviations_list &mdash; Alias of  DateTimeZone::listAbbreviations()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::listAbbreviations()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strftime.php","title":"strftime","description":"\n \n  strftime\n  (PHP 4, PHP 5)strftime &mdash; Format a local time\/date according to locale settings\n\n \n\n \n  Description\n  \n   string strftime\n    ( string $format\n   [, int $timestamp = time()\n  ] )\n\n  \n   Format the time and\/or date according to locale settings. Month and weekday\n   names and other language-dependent strings respect the current locale set\n   with setlocale().\n  \n  \n   Not all conversion specifiers may be supported by your C library, in which\n   case they will not be supported by PHP&#039;s strftime().\n   Additionally, not all platforms support negative timestamps, so your\n   date range may be limited to no earlier than the Unix epoch. This means that\n   %e, %T, %R and, %D (and possibly others) - as well as dates prior to\n   Jan 1, 1970 - will not work on Windows, some Linux\n   distributions, and a few other operating systems. For Windows systems, a\n   complete overview of supported conversion specifiers can be found at\n   &raquo;&nbsp;MSDN.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       \n        The following characters are recognized in the\n        format parameter string\n        \n         \n          \n           format\n           Description\n           Example returned values\n          \n\n         \n\n         \n          \n           Day\n           ---\n           ---\n          \n\n          \n           %a\n           An abbreviated textual representation of the day\n           Sun through Sat\n          \n\n          \n           %A\n           A full textual representation of the day\n           Sunday through Saturday\n          \n\n          \n           %d\n           Two-digit day of the month (with leading zeros)\n           01 to 31\n          \n\n          \n           %e\n           \n            Day of the month, with a space preceding single digits. Not \n            implemented as described on Windows. See below for more information.\n           \n            1 to 31\n          \n\n          \n           %j\n           Day of the year, 3 digits with leading zeros\n           001 to 366\n          \n\n          \n           %u\n           ISO-8601 numeric representation of the day of the week\n           1 (for Monday) though 7 (for Sunday)\n          \n\n          \n           %w\n           Numeric representation of the day of the week\n           0 (for Sunday) through 6 (for Saturday)\n          \n\n          \n           Week\n           ---\n           ---\n          \n\n          \n           %U\n           Week number of the given year, starting with the first\n           Sunday as the first week\n           13 (for the 13th full week of the year)\n          \n\n          \n           %V\n           ISO-8601:1988 week number of the given year, starting with\n           the first week of the year with at least 4 weekdays, with Monday\n           being the start of the week\n           01 through 53 (where 53\n           accounts for an overlapping week)\n          \n\n          \n           %W\n           A numeric representation of the week of the year, starting\n           with the first Monday as the first week\n           46 (for the 46th week of the year beginning\n           with a Monday)\n          \n\n          \n           Month\n           ---\n           ---\n          \n\n          \n           %b\n           Abbreviated month name, based on the locale\n           Jan through Dec\n          \n\n          \n           %B\n           Full month name, based on the locale\n           January through December\n          \n\n          \n           %h\n           Abbreviated month name, based on the locale (an alias of %b)\n           Jan through Dec\n          \n\n          \n           %m\n           Two digit representation of the month\n           01 (for January) through 12 (for December)\n          \n\n          \n           Year\n           ---\n           ---\n          \n\n          \n           %C\n           Two digit representation of the century (year divided by 100, truncated to an integer)\n           19 for the 20th Century\n          \n\n          \n           %g\n           Two digit representation of the year going by ISO-8601:1988 standards (see %V)\n           Example: 09 for the week of January 6, 2009\n          \n\n          \n           %G\n           The full four-digit version of %g\n           Example: 2008 for the week of January 3, 2009\n          \n\n          \n           %y\n           Two digit representation of the year\n           Example: 09 for 2009, 79 for 1979\n          \n\n          \n           %Y\n           Four digit representation for the year\n           Example: 2038\n          \n\n          \n           Time\n           ---\n           ---\n          \n\n          \n           %H\n           Two digit representation of the hour in 24-hour format\n           00 through 23\n          \n\n          \n           %I\n           Two digit representation of the hour in 12-hour format\n           01 through 12\n          \n\n          \n           %l (lower-case &#039;L&#039;)\n           Hour in 12-hour format, with a space preceeding single digits\n            1 through 12\n          \n\n          \n           %M\n           Two digit representation of the minute\n           00 through 59\n          \n\n          \n           %p\n           UPPER-CASE &#039;AM&#039; or &#039;PM&#039; based on the given time\n           Example: AM for 00:31, PM for 22:23\n          \n\n          \n           %P\n           lower-case &#039;am&#039; or &#039;pm&#039; based on the given time\n           Example: am for 00:31, pm for 22:23\n          \n\n          \n           %r\n           Same as &quot;%I:%M:%S %p&quot;\n           Example: 09:34:17 PM for 21:34:17\n          \n\n          \n           %R\n           Same as &quot;%H:%M&quot;\n           Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM\n          \n\n          \n           %S\n           Two digit representation of the second\n           00 through 59\n          \n\n          \n           %T\n           Same as &quot;%H:%M:%S&quot;\n           Example: 21:34:17 for 09:34:17 PM\n          \n\n          \n           %X\n           Preferred time representation based on locale, without the date\n           Example: 03:59:16 or 15:59:16\n          \n\n          \n           %z\n           Either the time zone offset from UTC or the abbreviation (depends\n           on operating system)\n           Example: -0500 or EST for Eastern Time\n          \n\n          \n           %Z\n           The time zone offset\/abbreviation option NOT given by %z (depends\n           on operating system)\n           Example: -0500 or EST for Eastern Time\n          \n\n          \n           Time and Date Stamps\n           ---\n           ---\n          \n\n          \n           %c\n           Preferred date and time stamp based on local\n           Example: Tue Feb  5 00:45:10 2009 for\n           February 5, 2009 at 12:45:10 AM\n          \n\n          \n           %D\n           Same as &quot;%m\/%d\/%y&quot;\n           Example: 02\/05\/09 for February 5, 2009\n          \n\n          \n           %F\n           Same as &quot;%Y-%m-%d&quot; (commonly used in database datestamps)\n           Example: 2009-02-05 for February 5, 2009\n          \n\n          \n           %s\n           Unix Epoch Time timestamp (same as the time()\n           function)\n           Example: 305815200 for September 10, 1979 08:40:00 AM\n          \n\n          \n           %x\n           Preferred date representation based on locale, without the time\n           Example: 02\/05\/09 for February 5, 2009\n          \n\n          \n           Miscellaneous\n           ---\n           ---\n          \n\n          \n           %n\n           A newline character (&quot;\\n&quot;)\n           ---\n          \n\n          \n           %t\n           A Tab character (&quot;\\t&quot;)\n           ---\n          \n\n          \n           \n           A literal percentage character (&quot;%&quot;)\n           ---\n          \n\n         \n        \n       \n\n      \n      \n       Maximum length of this parameter is 1023 characters.\n      \n      Warning\n       \n        Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1.\n        As a result, %u may not function as described in this manual.\n       \n      \n      Warning\n       \n        Windows only: The %e modifier \n        is not supported in the Windows implementation of this function. To achieve \n        this value, the %#d modifier can be used instead. The \n        example below illustrates how to write a cross platform compatible function.\n       \n      \n      Warning\n       \n        Mac OS X only: The %P modifier \n        is not supported in the Mac OS X implementation of this function.\n       \n      \n     \n\n    \n\n\n    \n\ntimestamp\n\nThe optional timestamp parameter is an\ninteger Unix timestamp that defaults to the current\nlocal time if a timestamp is not given. In other\nwords, it defaults to the value of time().\n\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string formatted according format\n   using the given timestamp or the current\n   local time if no timestamp is given.  Month and weekday names and\n   other language-dependent strings respect the current locale set\n   with setlocale().\n  \n \n\n\n \n  Errors\/Exceptions\n  \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n  \n   As the output is dependent upon the underlying C library, some conversion\n   specifiers are not supported. On Windows, supplying unknown conversion\n   specifiers will result in 5 E_WARNING messages and\n   return FALSE. On other operating systems you may not get any\n   E_WARNING messages and the output may contain the\n   conversion specifiers unconverted.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n\n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   This example will work if you have the respective locales installed\n   in your system.\n   \n    Example #1 strftime() locale examples\n    \n\n&lt;?phpsetlocale(LC_TIME,&nbsp;\"C\");echo&nbsp;strftime(\"%A\");setlocale(LC_TIME,&nbsp;\"fi_FI\");echo&nbsp;strftime(\"&nbsp;in&nbsp;Finnish&nbsp;is&nbsp;%A,\");setlocale(LC_TIME,&nbsp;\"fr_FR\");echo&nbsp;strftime(\"&nbsp;in&nbsp;French&nbsp;%A&nbsp;and\");setlocale(LC_TIME,&nbsp;\"de_DE\");echo&nbsp;strftime(\"&nbsp;in&nbsp;German&nbsp;%A.\\n\");?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 ISO 8601:1988 week number example\n    \n\n&lt;?php\/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;December&nbsp;2002&nbsp;\/&nbsp;January&nbsp;2003ISOWk&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;Tu&nbsp;&nbsp;W&nbsp;&nbsp;&nbsp;Thu&nbsp;F&nbsp;&nbsp;&nbsp;Sa&nbsp;&nbsp;Su-----&nbsp;----------------------------51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;21&nbsp;&nbsp;2252&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;27&nbsp;&nbsp;28&nbsp;&nbsp;291&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10&nbsp;&nbsp;11&nbsp;&nbsp;123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;*\/\/\/&nbsp;Outputs:&nbsp;12\/28\/2002&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;52,2002,2002echo&nbsp;\"12\/28\/2002&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",&nbsp;strtotime(\"12\/28\/2002\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;12\/30\/2002&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;1,2003,2002echo&nbsp;\"12\/30\/2002&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",&nbsp;strtotime(\"12\/30\/2002\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;1\/3\/2003&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;1,2003,2003echo&nbsp;\"1\/3\/2003&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2003\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;1\/10\/2003&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;2,2003,2003echo&nbsp;\"1\/10\/2003&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"1\/10\/2003\"))&nbsp;.&nbsp;\"\\n\";\/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;December&nbsp;2004&nbsp;\/&nbsp;January&nbsp;2005ISOWk&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;Tu&nbsp;&nbsp;W&nbsp;&nbsp;&nbsp;Thu&nbsp;F&nbsp;&nbsp;&nbsp;Sa&nbsp;&nbsp;Su-----&nbsp;----------------------------51&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;1952&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;21&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;2653&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;28&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;*\/\/\/&nbsp;Outputs:&nbsp;12\/23\/2004&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;52,2004,2004echo&nbsp;\"12\/23\/2004&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"12\/23\/2004\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;12\/31\/2004&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;53,2004,2004echo&nbsp;\"12\/31\/2004&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"12\/31\/2004\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;1\/2\/2005&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;53,2004,2005echo&nbsp;\"1\/2\/2005&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"1\/2\/2005\"))&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Outputs:&nbsp;1\/3\/2005&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;1,2005,2005echo&nbsp;\"1\/3\/2005&nbsp;-&nbsp;%V,%G,%Y&nbsp;=&nbsp;\"&nbsp;.&nbsp;strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2005\"))&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Cross platform compatible example using the %e modifier\n    \n\n&lt;?php\/\/&nbsp;Jan&nbsp;1:&nbsp;results&nbsp;in:&nbsp;'%e%1%'&nbsp;(%%,&nbsp;e,&nbsp;%%,&nbsp;%e,&nbsp;%%)$format&nbsp;=&nbsp;'%%e%%%e%%';\/\/&nbsp;Check&nbsp;for&nbsp;Windows&nbsp;to&nbsp;find&nbsp;and&nbsp;replace&nbsp;the&nbsp;%e&nbsp;\/\/&nbsp;modifier&nbsp;correctlyif&nbsp;(strtoupper(substr(PHP_OS,&nbsp;0,&nbsp;3))&nbsp;==&nbsp;'WIN')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$format&nbsp;=&nbsp;preg_replace('#(?&lt;!%)((?:%%)*)%e#',&nbsp;'\\1%#d',&nbsp;$format);}echo&nbsp;strftime($format);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #4 Display all known and unknown formats.\n    \n\n&lt;?php\/\/&nbsp;Describe&nbsp;the&nbsp;formats.$strftimeFormats&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'A'&nbsp;=&gt;&nbsp;'A&nbsp;full&nbsp;textual&nbsp;representation&nbsp;of&nbsp;the&nbsp;day',&nbsp;&nbsp;&nbsp;&nbsp;'B'&nbsp;=&gt;&nbsp;'Full&nbsp;month&nbsp;name,&nbsp;based&nbsp;on&nbsp;the&nbsp;locale',&nbsp;&nbsp;&nbsp;&nbsp;'C'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;century&nbsp;(year&nbsp;divided&nbsp;by&nbsp;100,&nbsp;truncated&nbsp;to&nbsp;an&nbsp;integer)',&nbsp;&nbsp;&nbsp;&nbsp;'D'&nbsp;=&gt;&nbsp;'Same&nbsp;as&nbsp;\"%m\/%d\/%y\"',&nbsp;&nbsp;&nbsp;&nbsp;'E'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'F'&nbsp;=&gt;&nbsp;'Same&nbsp;as&nbsp;\"%Y-%m-%d\"',&nbsp;&nbsp;&nbsp;&nbsp;'G'&nbsp;=&gt;&nbsp;'The&nbsp;full&nbsp;four-digit&nbsp;version&nbsp;of&nbsp;%g',&nbsp;&nbsp;&nbsp;&nbsp;'H'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;hour&nbsp;in&nbsp;24-hour&nbsp;format',&nbsp;&nbsp;&nbsp;&nbsp;'I'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;hour&nbsp;in&nbsp;12-hour&nbsp;format',&nbsp;&nbsp;&nbsp;&nbsp;'J'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'K'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'L'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'M'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;minute',&nbsp;&nbsp;&nbsp;&nbsp;'N'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'O'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'P'&nbsp;=&gt;&nbsp;'lower-case&nbsp;\"am\"&nbsp;or&nbsp;\"pm\"&nbsp;based&nbsp;on&nbsp;the&nbsp;given&nbsp;time',&nbsp;&nbsp;&nbsp;&nbsp;'Q'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'R'&nbsp;=&gt;&nbsp;'Same&nbsp;as&nbsp;\"%H:%M\"',&nbsp;&nbsp;&nbsp;&nbsp;'S'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;second',&nbsp;&nbsp;&nbsp;&nbsp;'T'&nbsp;=&gt;&nbsp;'Same&nbsp;as&nbsp;\"%H:%M:%S\"',&nbsp;&nbsp;&nbsp;&nbsp;'U'&nbsp;=&gt;&nbsp;'Week&nbsp;number&nbsp;of&nbsp;the&nbsp;given&nbsp;year,&nbsp;starting&nbsp;with&nbsp;the&nbsp;first&nbsp;Sunday&nbsp;as&nbsp;the&nbsp;first&nbsp;week',&nbsp;&nbsp;&nbsp;&nbsp;'V'&nbsp;=&gt;&nbsp;'ISO-8601:1988&nbsp;week&nbsp;number&nbsp;of&nbsp;the&nbsp;given&nbsp;year,&nbsp;starting&nbsp;with&nbsp;the&nbsp;first&nbsp;week&nbsp;of&nbsp;the&nbsp;year&nbsp;with&nbsp;at&nbsp;least&nbsp;4&nbsp;weekdays,&nbsp;with&nbsp;Monday&nbsp;being&nbsp;the&nbsp;start&nbsp;of&nbsp;the&nbsp;week',&nbsp;&nbsp;&nbsp;&nbsp;'W'&nbsp;=&gt;&nbsp;'A&nbsp;numeric&nbsp;representation&nbsp;of&nbsp;the&nbsp;week&nbsp;of&nbsp;the&nbsp;year,&nbsp;starting&nbsp;with&nbsp;the&nbsp;first&nbsp;Monday&nbsp;as&nbsp;the&nbsp;first&nbsp;week',&nbsp;&nbsp;&nbsp;&nbsp;'X'&nbsp;=&gt;&nbsp;'Preferred&nbsp;time&nbsp;representation&nbsp;based&nbsp;on&nbsp;locale,&nbsp;without&nbsp;the&nbsp;date',&nbsp;&nbsp;&nbsp;&nbsp;'Y'&nbsp;=&gt;&nbsp;'Four&nbsp;digit&nbsp;representation&nbsp;for&nbsp;the&nbsp;year',&nbsp;&nbsp;&nbsp;&nbsp;'Z'&nbsp;=&gt;&nbsp;'The&nbsp;time&nbsp;zone&nbsp;offset\/abbreviation&nbsp;option&nbsp;NOT&nbsp;given&nbsp;by&nbsp;%z&nbsp;(depends&nbsp;on&nbsp;operating&nbsp;system)',&nbsp;&nbsp;&nbsp;&nbsp;'a'&nbsp;=&gt;&nbsp;'An&nbsp;abbreviated&nbsp;textual&nbsp;representation&nbsp;of&nbsp;the&nbsp;day',&nbsp;&nbsp;&nbsp;&nbsp;'b'&nbsp;=&gt;&nbsp;'Abbreviated&nbsp;month&nbsp;name,&nbsp;based&nbsp;on&nbsp;the&nbsp;locale',&nbsp;&nbsp;&nbsp;&nbsp;'c'&nbsp;=&gt;&nbsp;'Preferred&nbsp;date&nbsp;and&nbsp;time&nbsp;stamp&nbsp;based&nbsp;on&nbsp;local',&nbsp;&nbsp;&nbsp;&nbsp;'d'&nbsp;=&gt;&nbsp;'Two-digit&nbsp;day&nbsp;of&nbsp;the&nbsp;month&nbsp;(with&nbsp;leading&nbsp;zeros)',&nbsp;&nbsp;&nbsp;&nbsp;'e'&nbsp;=&gt;&nbsp;'Day&nbsp;of&nbsp;the&nbsp;month,&nbsp;with&nbsp;a&nbsp;space&nbsp;preceding&nbsp;single&nbsp;digits',&nbsp;&nbsp;&nbsp;&nbsp;'f'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'g'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;year&nbsp;going&nbsp;by&nbsp;ISO-8601:1988&nbsp;standards&nbsp;(see&nbsp;%V)',&nbsp;&nbsp;&nbsp;&nbsp;'h'&nbsp;=&gt;&nbsp;'Abbreviated&nbsp;month&nbsp;name,&nbsp;based&nbsp;on&nbsp;the&nbsp;locale&nbsp;(an&nbsp;alias&nbsp;of&nbsp;%b)',&nbsp;&nbsp;&nbsp;&nbsp;'i'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'j'&nbsp;=&gt;&nbsp;'Day&nbsp;of&nbsp;the&nbsp;year,&nbsp;3&nbsp;digits&nbsp;with&nbsp;leading&nbsp;zeros',&nbsp;&nbsp;&nbsp;&nbsp;'k'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'l'&nbsp;=&gt;&nbsp;'Hour&nbsp;in&nbsp;12-hour&nbsp;format,&nbsp;with&nbsp;a&nbsp;space&nbsp;preceeding&nbsp;single&nbsp;digits',&nbsp;&nbsp;&nbsp;&nbsp;'m'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;month',&nbsp;&nbsp;&nbsp;&nbsp;'n'&nbsp;=&gt;&nbsp;'A&nbsp;newline&nbsp;character&nbsp;(\"\\n\")',&nbsp;&nbsp;&nbsp;&nbsp;'o'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'p'&nbsp;=&gt;&nbsp;'UPPER-CASE&nbsp;\"AM\"&nbsp;or&nbsp;\"PM\"&nbsp;based&nbsp;on&nbsp;the&nbsp;given&nbsp;time',&nbsp;&nbsp;&nbsp;&nbsp;'q'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'r'&nbsp;=&gt;&nbsp;'Same&nbsp;as&nbsp;\"%I:%M:%S&nbsp;%p\"',&nbsp;&nbsp;&nbsp;&nbsp;'s'&nbsp;=&gt;&nbsp;'Unix&nbsp;Epoch&nbsp;Time&nbsp;timestamp',&nbsp;&nbsp;&nbsp;&nbsp;'t'&nbsp;=&gt;&nbsp;'A&nbsp;Tab&nbsp;character&nbsp;(\"\\t\")',&nbsp;&nbsp;&nbsp;&nbsp;'u'&nbsp;=&gt;&nbsp;'ISO-8601&nbsp;numeric&nbsp;representation&nbsp;of&nbsp;the&nbsp;day&nbsp;of&nbsp;the&nbsp;week',&nbsp;&nbsp;&nbsp;&nbsp;'v'&nbsp;=&gt;&nbsp;'',&nbsp;&nbsp;&nbsp;&nbsp;'w'&nbsp;=&gt;&nbsp;'Numeric&nbsp;representation&nbsp;of&nbsp;the&nbsp;day&nbsp;of&nbsp;the&nbsp;week',&nbsp;&nbsp;&nbsp;&nbsp;'x'&nbsp;=&gt;&nbsp;'Preferred&nbsp;date&nbsp;representation&nbsp;based&nbsp;on&nbsp;locale,&nbsp;without&nbsp;the&nbsp;time',&nbsp;&nbsp;&nbsp;&nbsp;'y'&nbsp;=&gt;&nbsp;'Two&nbsp;digit&nbsp;representation&nbsp;of&nbsp;the&nbsp;year',&nbsp;&nbsp;&nbsp;&nbsp;'z'&nbsp;=&gt;&nbsp;'Either&nbsp;the&nbsp;time&nbsp;zone&nbsp;offset&nbsp;from&nbsp;UTC&nbsp;or&nbsp;the&nbsp;abbreviation&nbsp;(depends&nbsp;on&nbsp;operating&nbsp;system)',&nbsp;&nbsp;&nbsp;&nbsp;'%'&nbsp;=&gt;&nbsp;'A&nbsp;literal&nbsp;percentage&nbsp;character&nbsp;(\"%\")',);\/\/&nbsp;Results.$strftimeValues&nbsp;=&nbsp;array();\/\/&nbsp;Evaluate&nbsp;the&nbsp;formats&nbsp;whilst&nbsp;suppressing&nbsp;any&nbsp;errors.foreach($strftimeFormats&nbsp;as&nbsp;$format&nbsp;=&gt;&nbsp;$description){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(False&nbsp;!==&nbsp;($value&nbsp;=&nbsp;@strftime(\"%{$format}\"))){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$strftimeValues[$format]&nbsp;=&nbsp;$value;&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Find&nbsp;the&nbsp;longest&nbsp;value.$maxValueLength&nbsp;=&nbsp;2&nbsp;+&nbsp;max(array_map('strlen',&nbsp;$strftimeValues));\/\/&nbsp;Report&nbsp;known&nbsp;formats.foreach($strftimeValues&nbsp;as&nbsp;$format&nbsp;=&gt;&nbsp;$value){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Known&nbsp;format&nbsp;&nbsp;&nbsp;:&nbsp;'{$format}'&nbsp;=&nbsp;\",&nbsp;str_pad(\"'{$value}'\",&nbsp;$maxValueLength),&nbsp;\"&nbsp;(&nbsp;{$strftimeFormats[$format]}&nbsp;)\\n\";}\/\/&nbsp;Report&nbsp;unknown&nbsp;formats.foreach(array_diff_key($strftimeFormats,&nbsp;$strftimeValues)&nbsp;as&nbsp;$format&nbsp;=&gt;&nbsp;$description){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unknown&nbsp;format&nbsp;:&nbsp;'{$format}'&nbsp;&nbsp;&nbsp;\",&nbsp;str_pad('&nbsp;',&nbsp;$maxValueLength),&nbsp;($description&nbsp;?&nbsp;\"&nbsp;(&nbsp;{$description}&nbsp;)\"&nbsp;:&nbsp;''),&nbsp;\"\\n\";}\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nKnown format   : &#039;A&#039; = &#039;Friday&#039;            ( A full textual representation of the day )\nKnown format   : &#039;B&#039; = &#039;December&#039;          ( Full month name, based on the locale )\nKnown format   : &#039;H&#039; = &#039;11&#039;                ( Two digit representation of the hour in 24-hour format )\nKnown format   : &#039;I&#039; = &#039;11&#039;                ( Two digit representation of the hour in 12-hour format )\nKnown format   : &#039;M&#039; = &#039;24&#039;                ( Two digit representation of the minute )\nKnown format   : &#039;S&#039; = &#039;44&#039;                ( Two digit representation of the second )\nKnown format   : &#039;U&#039; = &#039;48&#039;                ( Week number of the given year, starting with the first Sunday as the first week )\nKnown format   : &#039;W&#039; = &#039;48&#039;                ( A numeric representation of the week of the year, starting with the first Monday as the first week )\nKnown format   : &#039;X&#039; = &#039;11:24:44&#039;          ( Preferred time representation based on locale, without the date )\nKnown format   : &#039;Y&#039; = &#039;2010&#039;              ( Four digit representation for the year )\nKnown format   : &#039;Z&#039; = &#039;GMT Standard Time&#039; ( The time zone offset\/abbreviation option NOT given by %z (depends on operating system) )\nKnown format   : &#039;a&#039; = &#039;Fri&#039;               ( An abbreviated textual representation of the day )\nKnown format   : &#039;b&#039; = &#039;Dec&#039;               ( Abbreviated month name, based on the locale )\nKnown format   : &#039;c&#039; = &#039;12\/03\/10 11:24:44&#039; ( Preferred date and time stamp based on local )\nKnown format   : &#039;d&#039; = &#039;03&#039;                ( Two-digit day of the month (with leading zeros) )\nKnown format   : &#039;j&#039; = &#039;337&#039;               ( Day of the year, 3 digits with leading zeros )\nKnown format   : &#039;m&#039; = &#039;12&#039;                ( Two digit representation of the month )\nKnown format   : &#039;p&#039; = &#039;AM&#039;                ( UPPER-CASE &quot;AM&quot; or &quot;PM&quot; based on the given time )\nKnown format   : &#039;w&#039; = &#039;5&#039;                 ( Numeric representation of the day of the week )\nKnown format   : &#039;x&#039; = &#039;12\/03\/10&#039;          ( Preferred date representation based on locale, without the time )\nKnown format   : &#039;y&#039; = &#039;10&#039;                ( Two digit representation of the year )\nKnown format   : &#039;z&#039; = &#039;GMT Standard Time&#039; ( Either the time zone offset from UTC or the abbreviation (depends on operating system) )\nKnown format   : &#039;%&#039; = &#039;%&#039;                 ( A literal percentage character (&quot;%&quot;) )\nUnknown format : &#039;C&#039;                       ( Two digit representation of the century (year divided by 100, truncated to an integer) )\nUnknown format : &#039;D&#039;                       ( Same as &quot;%m\/%d\/%y&quot; )\nUnknown format : &#039;E&#039;\nUnknown format : &#039;F&#039;                       ( Same as &quot;%Y-%m-%d&quot; )\nUnknown format : &#039;G&#039;                       ( The full four-digit version of %g )\nUnknown format : &#039;J&#039;\nUnknown format : &#039;K&#039;\nUnknown format : &#039;L&#039;\nUnknown format : &#039;N&#039;\nUnknown format : &#039;O&#039;\nUnknown format : &#039;P&#039;                       ( lower-case &quot;am&quot; or &quot;pm&quot; based on the given time )\nUnknown format : &#039;Q&#039;\nUnknown format : &#039;R&#039;                       ( Same as &quot;%H:%M&quot; )\nUnknown format : &#039;T&#039;                       ( Same as &quot;%H:%M:%S&quot; )\nUnknown format : &#039;V&#039;                       ( ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week )\nUnknown format : &#039;e&#039;                       ( Day of the month, with a space preceding single digits )\nUnknown format : &#039;f&#039;\nUnknown format : &#039;g&#039;                       ( Two digit representation of the year going by ISO-8601:1988 standards (see %V) )\nUnknown format : &#039;h&#039;                       ( Abbreviated month name, based on the locale (an alias of %b) )\nUnknown format : &#039;i&#039;\nUnknown format : &#039;k&#039;\nUnknown format : &#039;l&#039;                       ( Hour in 12-hour format, with a space preceeding single digits )\nUnknown format : &#039;n&#039;                       ( A newline character (&quot;\\n&quot;) )\nUnknown format : &#039;o&#039;\nUnknown format : &#039;q&#039;\nUnknown format : &#039;r&#039;                       ( Same as &quot;%I:%M:%S %p&quot; )\nUnknown format : &#039;s&#039;                       ( Unix Epoch Time timestamp )\nUnknown format : &#039;t&#039;                       ( A Tab character (&quot;\\t&quot;) )\nUnknown format : &#039;u&#039;                       ( ISO-8601 numeric representation of the day of the week )\nUnknown format : &#039;v&#039;\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    %G and %V, which are based on ISO 8601:1988 week numbers can\n    give unexpected (albeit correct) results if the numbering system\n    is not thoroughly understood.  See %V examples in this manual page.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    &raquo;&nbsp;Online strftime() format design tool\n    setlocale() - Set locale information\n    mktime() - Get Unix timestamp for a date\n    strptime() - Parse a time\/date generated with strftime\n    gmstrftime() - Format a GMT\/UTC time\/date according to locale settings\n    &raquo;&nbsp;Open Group specification of strftime()\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.time.php","title":"time","description":"\n \n  time\n  (PHP 4, PHP 5)time &mdash; Return current Unix timestamp\n\n \n\n \n  Description\n  \n   int time\n    ( void\n   )\n\n  \n   Returns the current time measured in the number of seconds since\n   the Unix Epoch (January 1 1970 00:00:00 GMT).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 time() example\n    \n\n&lt;?php$nextWeek&nbsp;=&nbsp;time()&nbsp;+&nbsp;(7&nbsp;*&nbsp;24&nbsp;*&nbsp;60&nbsp;*&nbsp;60);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;7&nbsp;days;&nbsp;24&nbsp;hours;&nbsp;60&nbsp;mins;&nbsp;60secsecho&nbsp;'Now:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.&nbsp;date('Y-m-d')&nbsp;.\"\\n\";echo&nbsp;'Next&nbsp;Week:&nbsp;'.&nbsp;date('Y-m-d',&nbsp;$nextWeek)&nbsp;.\"\\n\";\/\/&nbsp;or&nbsp;using&nbsp;strtotime():echo&nbsp;'Next&nbsp;Week:&nbsp;'.&nbsp;date('Y-m-d',&nbsp;strtotime('+1&nbsp;week'))&nbsp;.\"\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nNow:       2005-03-30\nNext Week: 2005-04-06\nNext Week: 2005-04-06\n\n    \n   \n  \n \n\n\n \n  Notes\n  Tip\n   \n    Timestamp of the start of the request is available in\n    $_SERVER['REQUEST_TIME'] since PHP 5.1.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    date() - Format a local time\/date\n    microtime() - Return current Unix timestamp with microseconds\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtotime.php","title":"strtotime","description":"\n \n  strtotime\n  (PHP 4, PHP 5)strtotime &mdash; Parse about any English textual datetime description into a Unix timestamp\n\n \n \n  Description\n  \n   int strtotime\n    ( string $time\n   [, int $now = time()\n  ] )\n\n  \n   The function expects to be given a string containing an English date format\n   and will try to parse that format into a Unix timestamp (the number of\n   seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given\n   in now, or the current time if\n   now is not supplied.\n  \n  \n   Each parameter of this function uses the default time zone unless a\n   time zone is specified in that parameter.  Be careful not to use\n   different time zones in each parameter unless that is intended.\n   See date_default_timezone_get() on the various\n   ways to define the default time zone.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     time\n     \n\n      A date\/time string. Valid formats are explained in Date and Time Formats.\n     \n\n    \n\n    \n\n     now\n     \n\n      \n       The timestamp which is used as a base for the calculation of relative\n       dates.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0,\n   this function would return -1 on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n   \n   \nEvery call to a date\/time function will generate a E_NOTICE\nif the time zone is not valid, and\/or a E_STRICT\nor E_WARNING message\nif using the system settings or the TZ environment\nvariable. See also date_default_timezone_set()\n \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Prior to PHP 5.3.0, 24:00 was not a valid format and\n        strtotime() returned FALSE.\n       \n      \n\n      \n       5.2.7\n       \n        In PHP 5 prior to 5.2.7, requesting a given occurrence of a\n        given weekday in a month where that weekday was the first day\n        of the month would incorrectly add one week to the returned\n        timestamp. This has been corrected in 5.2.7 and later\n        versions.\n       \n      \n\n      \n       5.1.0\n       \n        Now returns FALSE on failure, instead\n        of -1.\n       \n      \n\n\n      5.1.0\nNow issues the E_STRICT and E_NOTICE\ntime zone errors.\n\n\n      \n       5.0.2\n       \n        In PHP 5 up to 5.0.2, &quot;now&quot; and other\n        relative times are wrongly computed from today&#039;s\n        midnight. This differs from other versions where it is\n        correctly computed from current time.\n       \n      \n\n      \n       5.0.0\n       \n        Microseconds began to be allowed, but they are ignored.\n       \n      \n\n      \n       4.4.0\n       \n        In PHP versions prior to 4.4.0, &quot;next&quot; is incorrectly\n        computed as +2. A typical solution to this is to use\n        &quot;+1&quot;.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A strtotime() example\n    \n\n&lt;?phpecho&nbsp;strtotime(\"now\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"10&nbsp;September&nbsp;2000\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"+1&nbsp;day\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"+1&nbsp;week\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"+1&nbsp;week&nbsp;2&nbsp;days&nbsp;4&nbsp;hours&nbsp;2&nbsp;seconds\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"next&nbsp;Thursday\"),&nbsp;\"\\n\";echo&nbsp;strtotime(\"last&nbsp;Monday\"),&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Checking for failure\n    \n\n&lt;?php$str&nbsp;=&nbsp;'Not&nbsp;Good';\/\/&nbsp;previous&nbsp;to&nbsp;PHP&nbsp;5.1.0&nbsp;you&nbsp;would&nbsp;compare&nbsp;with&nbsp;-1,&nbsp;instead&nbsp;of&nbsp;falseif&nbsp;(($timestamp&nbsp;=&nbsp;strtotime($str))&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;($str)&nbsp;is&nbsp;bogus\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$str&nbsp;==&nbsp;\"&nbsp;.&nbsp;date('l&nbsp;dS&nbsp;\\o\\f&nbsp;F&nbsp;Y&nbsp;h:i:s&nbsp;A',&nbsp;$timestamp);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If the number of the year is specified in a two digit format, the values\n    between 00-69 are mapped to 2000-2069 and 70-99 to 1970-1999. See the notes\n    below for possible differences on 32bit systems (possible dates might end on \n    2038-01-19 03:14:07).\n   \n  \n  Note: \n   \n    The valid range of a timestamp is typically from Fri, 13 Dec\n    1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are\n    the dates that correspond to the minimum and maximum values for\n    a 32-bit signed integer.)\n    Additionally, not all platforms support negative timestamps, therefore\n    your date range may be limited to no earlier than the Unix epoch. This\n    means that e.g. dates prior to Jan 1, 1970 will not work on Windows,\n    some Linux distributions, and a few other operating systems. PHP 5.1.0 and\n    newer versions overcome this limitation though.\n   \n   \n    For 64-bit versions of PHP, the valid range of a timestamp is effectively\n    infinite, as 64 bits can represent approximately 293 billion years in either\n    direction.\n   \n  \n  Note: \n   \n    Dates in the m\/d\/y or d-m-y formats\n    are disambiguated by looking at the separator between the various\n    components: if the separator is a slash (\/), then the\n    American m\/d\/y is assumed; whereas if the separator is a\n    dash (-) or a dot (.), then the\n    European d-m-y format is assumed.\n   \n   \n    To avoid potential ambiguity, it&#039;s best to use ISO 8601\n    (YYYY-MM-DD) dates or\n     DateTime::createFromFormat() when possible.\n   \n  \n  Note: \n   \n    Using this function for mathematical operations is not advisable.\n    It is better to use  DateTime::add() and\n     DateTime::sub() in PHP 5.3 and later, or\n     DateTime::modify() in PHP 5.2.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    Date and Time Formats\n     DateTime::createFromFormat() - Returns new DateTime object formatted according to the specified format\n    checkdate() - Validate a Gregorian date\n    strptime() - Parse a time\/date generated with strftime\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-identifiers-list.php","title":"timezone_identifiers_list","description":"\n \n  timezone_identifiers_list\n  (PHP 5 &gt;= 5.2.0)timezone_identifiers_list &mdash; Alias of  DateTimeZone::listIdentifiers()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::listIdentifiers()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-location-get.php","title":"timezone_location_get","description":"\n \n  timezone_location_get\n  (PHP 5 &gt;= 5.3.0)timezone_location_get &mdash; Alias of  DateTimeZone::getLocation()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::getLocation()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-name-from-abbr.php","title":"timezone_name_from_abbr","description":"\n \n  timezone_name_from_abbr\n  (PHP 5 &gt;= 5.1.3)timezone_name_from_abbr &mdash; Returns the timezone name from abbreviation\n\n \n \n  Description\n  \n   string timezone_name_from_abbr\n    ( string $abbr\n   [, int $gmtOffset = -1\n   [, int $isdst = -1\n  ]] )\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     abbr\n     \n\n      \n       Time zone abbreviation.\n      \n     \n\n    \n\n    \n\n     gmtOffset\n     \n\n      \n       Offset from GMT in seconds. Defaults to -1 which means that first found\n       time zone corresponding to abbr is returned.\n       Otherwise exact offset is searched and only if not found then the first\n       time zone with any offset is returned.\n      \n     \n\n    \n\n    \n\n     isdst\n     \n\n      \n       Daylight saving time indicator. Defaults to -1, which means that\n       whether the time zone has daylight saving or not is not taken into\n       consideration when searching. If this is set to 1, then the\n       gmtOffset is assumed to be an offset with\n       daylight saving in effect; if 0, then gmtOffset\n       is assumed to be an offset without daylight saving in effect. If\n       abbr doesn&#039;t exist then the time zone is\n       searched solely by the gmtOffset and\n       isdst.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns time zone name on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A timezone_name_from_abbr() example\n    \n\n&lt;?phpecho&nbsp;timezone_name_from_abbr(\"CET\")&nbsp;.&nbsp;\"\\n\";echo&nbsp;timezone_name_from_abbr(\"\",&nbsp;3600,&nbsp;0)&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nEurope\/Berlin\nEurope\/Paris\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    timezone_abbreviations_list() - Alias of DateTimeZone::listAbbreviations\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-name-get.php","title":"timezone_name_get","description":"\n \n  timezone_name_get\n  (PHP 5 &gt;= 5.2.0)timezone_name_get &mdash; Alias of  DateTimeZone::getName()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::getName()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-open.php","title":"timezone_open","description":"\n \n  timezone_open\n  (PHP 5 &gt;= 5.2.0)timezone_open &mdash; Alias of  DateTimeZone::__construct()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::__construct()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-transitions-get.php","title":"timezone_transitions_get","description":"\n \n  timezone_transitions_get\n  (PHP 5 &gt;= 5.2.0)timezone_transitions_get &mdash; Alias of  DateTimeZone::getTransitions()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::getTransitions()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-offset-get.php","title":"timezone_offset_get","description":"\n \n  timezone_offset_get\n  (PHP 5 &gt;= 5.2.0)timezone_offset_get &mdash; Alias of  DateTimeZone::getOffset()\n\n \n\n \n  Description\n  \n   This function is an alias of:   DateTimeZone::getOffset()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.timezone-version-get.php","title":"timezone_version_get","description":"\n \n  timezone_version_get\n  (PHP 5 &gt;= 5.3.0)timezone_version_get &mdash; \n   Gets the version of the timezonedb\n  \n\n \n \n  Description\n  \n   string timezone_version_get\n    ( void\n   )\n\n  \n   Returns the current version of the timezonedb.\n  \n \n\n\n \n  Return Values\n  \n   Returns a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Getting the timezonedb version\n    \n\n&lt;?phpecho&nbsp;timezone_version_get();?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n2009.7\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    List of Supported Timezones\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-add.php","title":"dbplus_add","description":"\n \n  dbplus_add\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_add &mdash; Add a tuple to a relation\n\n \n \n \n  Description\n  \n  \n   int dbplus_add\n    ( resource $relation\n   , array $tuple\n   )\n\n  \n   Adds a tuple to a relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n       An array of attribute\/value pairs to be inserted into the given\n       relation.\n      \n      \n       After successful execution this array will contain the complete data\n       of the newly created tuple, including all implicitly set domain fields\n       like sequences.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The function will return DBPLUS_ERR_NOERR on success\n   or a db++ error code on failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_errcode() - Get error string for given errorcode or last error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-chdir.php","title":"dbplus_chdir","description":"\n \n  dbplus_chdir\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_chdir &mdash; Get\/Set database virtual current directory\n\n \n \n \n  Description\n  \n   string dbplus_chdir\n    ([ string $newdir\n  ] )\n\n  \n   Changes the virtual current directory where relation files will be looked\n   for by dbplus_open().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     newdir\n     \n\n      \n       The new directory for relation files. You can omit this parameter to\n       query the current working directory.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the absolute path of the current directory. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-aql.php","title":"dbplus_aql","description":"\n \n  dbplus_aql\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_aql &mdash; Perform AQL query\n\n \n \n \n  Description\n  \n   resource dbplus_aql\n    ( string $query\n   [, string $server\n   [, string $dbpath\n  ]] )\n\n  \n   Executes an AQL query on the given\n   server and dbpath.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n       The AQL query to be executed. Further information on the AQL (Algebraic\n       Query Language) is provided in the original db++ manual.\n      \n     \n\n    \n\n    \n\n     server\n     \n\n      \n      \n     \n\n    \n\n    \n\n     dbpath\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a relation handle on success. The result data may be fetched from\n   this relation by calling dbplus_next() and\n   dbplus_curr(). Other relation access functions will\n   not work on a result relation.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-close.php","title":"dbplus_close","description":"\n \n  dbplus_close\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_close &mdash; Close a relation\n\n \n \n \n  Description\n  \n   mixed dbplus_close\n    ( resource $relation\n   )\n\n  \n   Closes a relation previously opened by dbplus_open().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or DBPLUS_ERR_UNKNOWN on\n   failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-curr.php","title":"dbplus_curr","description":"\n \n  dbplus_curr\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_curr &mdash; Get current tuple from relation\n\n \n \n \n  Description\n  \n   int dbplus_curr\n    ( resource $relation\n   , array &$tuple\n   )\n\n  \n   Reads the data for the current tuple for the given\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n       The data will be passed back in this parameter, as an associative\n       array.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The function will return zero (aka. DBPLUS_ERR_NOERR) on success\n   or a db++ error code on failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_first() - Get first tuple from relation\n    dbplus_prev() - Get previous tuple from relation\n    dbplus_next() - Get next tuple from relation\n    dbplus_last() - Get last tuple from relation\n    dbplus_errcode() - Get error string for given errorcode or last error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-errcode.php","title":"dbplus_errcode","description":"\n \n  dbplus_errcode\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_errcode &mdash; Get error string for given errorcode or last error\n\n \n \n \n  Description\n  \n   string dbplus_errcode\n    ([ int $errno\n  ] )\n\n  \n   Returns a clear error string for the given error code.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     errno\n     \n\n      \n       The error code. If not provided, the result code of the last db++\n       operation is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error message.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-errno.php","title":"dbplus_errno","description":"\n \n  dbplus_errno\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_errno &mdash; Get error code for last operation\n\n \n \n \n  Description\n  \n   int dbplus_errno\n    ( void\n   )\n\n  \n   Returns the error code returned by the last db++ operation.\n  \n \n\n\n \n  Return Values\n  \n   Returns the error code, as an integer.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_errcode() - Get error string for given errorcode or last error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-find.php","title":"dbplus_find","description":"\n \n  dbplus_find\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_find &mdash; Set a constraint on a relation\n\n \n \n \n  Description\n  \n   int dbplus_find\n    ( resource $relation\n   , array $constraints\n   , mixed $tuple\n   )\n\n  \n   Places a constraint on the given relation.\n  \n  \n   Further calls to functions like dbplus_curr() or\n   dbplus_next() will only return tuples matching the\n   given constraints.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     constraints\n     \n\n      \n       Constraints are triplets of strings containing of a domain name,\n       a comparison operator and a comparison value. The\n       constraints parameter array may consist of\n       a collection of string arrays, each of which contains a domain, an\n       operator and a value, or of a single string array containing a\n       multiple of three elements.\n      \n      \n       The comparison operator may be one of the following strings:\n       &#039;==&#039;, &#039;&gt;&#039;, &#039;&gt;=&#039;, &#039;&lt;&#039;, &#039;&lt;=&#039;, &#039;!=&#039;, &#039;~&#039; for a regular\n       expression match and &#039;BAND&#039; or &#039;BOR&#039; for bitwise operations.\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_unselect() - Remove a constraint from relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-first.php","title":"dbplus_first","description":"\n \n  dbplus_first\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_first &mdash; Get first tuple from relation\n\n \n \n \n  Description\n  \n   int dbplus_first\n    ( resource $relation\n   , array &$tuple\n   )\n\n  \n   Reads the data for the first tuple for the given\n   relation, makes it the current tuple and pass it\n   back as an associative array in tuple.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_curr() - Get current tuple from relation\n    dbplus_prev() - Get previous tuple from relation\n    dbplus_next() - Get next tuple from relation\n    dbplus_last() - Get last tuple from relation\n    dbplus_errcode() - Get error string for given errorcode or last error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-flush.php","title":"dbplus_flush","description":"\n \n  dbplus_flush\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_flush &mdash; Flush all changes made on a relation\n\n \n \n \n  Description\n  \n   int dbplus_flush\n    ( resource $relation\n   )\n\n  \n   Writes all changes applied to relation since the\n   last flush to disk.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_errcode() - Get error string for given errorcode or last error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freealllocks.php","title":"dbplus_freealllocks","description":"\n \n  dbplus_freealllocks\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_freealllocks &mdash; Free all locks held by this client\n\n \n \n \n  Description\n  \n   int dbplus_freealllocks\n    ( void\n   )\n\n  \n   Frees all tuple locks held by this client.\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_getlock() - Get a write lock on a tuple\n    dbplus_freelock() - Release write lock on tuple\n    dbplus_freerlocks() - Free all tuple locks on given relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freelock.php","title":"dbplus_freelock","description":"\n \n  dbplus_freelock\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_freelock &mdash; Release write lock on tuple\n\n \n \n \n  Description\n  \n   int dbplus_freelock\n    ( resource $relation\n   , string $tuple\n   )\n\n  \n   Releases a write lock on the given tuple previously\n   obtained by dbplus_getlock().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_getlock() - Get a write lock on a tuple\n    dbplus_freerlocks() - Free all tuple locks on given relation\n    dbplus_freealllocks() - Free all locks held by this client\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-freerlocks.php","title":"dbplus_freerlocks","description":"\n \n  dbplus_freerlocks\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_freerlocks &mdash; Free all tuple locks on given relation\n\n \n \n \n  Description\n  \n   int dbplus_freerlocks\n    ( resource $relation\n   )\n\n  \n   Frees all tuple locks held on the given relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_getlock() - Get a write lock on a tuple\n    dbplus_freelock() - Release write lock on tuple\n    dbplus_freealllocks() - Free all locks held by this client\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-getlock.php","title":"dbplus_getlock","description":"\n \n  dbplus_getlock\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_getlock &mdash; Get a write lock on a tuple\n\n \n \n \n  Description\n  \n   int dbplus_getlock\n    ( resource $relation\n   , string $tuple\n   )\n\n  \n   Requests a write lock on the specified tuple. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns zero on success or a non-zero error code, especially \n   DBPLUS_ERR_WLOCKED on failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_freelock() - Release write lock on tuple\n    dbplus_freerlocks() - Free all tuple locks on given relation\n    dbplus_freealllocks() - Free all locks held by this client\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-getunique.php","title":"dbplus_getunique","description":"\n \n  dbplus_getunique\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_getunique &mdash; Get an id number unique to a relation\n\n \n \n \n  Description\n  \n   int dbplus_getunique\n    ( resource $relation\n   , int $uniqueid\n   )\n\n  \n   Obtains a number guaranteed to be unique for the given\n   relation and will pass it back in the variable\n   given as uniqueid.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     uniqueid\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-info.php","title":"dbplus_info","description":"\n \n  dbplus_info\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_info &mdash; Get information about a relation\n\n \n \n \n  Description\n  \n   int dbplus_info\n    ( resource $relation\n   , string $key\n   , array &$result\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n      \n     \n\n    \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-last.php","title":"dbplus_last","description":"\n \n  dbplus_last\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_last &mdash; Get last tuple from relation\n\n \n \n \n  Description\n  \n   int dbplus_last\n    ( resource $relation\n   , array &$tuple\n   )\n\n  \n   Reads the data for the last tuple for the given\n   relation, makes it the current tuple and pass it\n   back as an associative array in tuple.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_first() - Get first tuple from relation\n    dbplus_curr() - Get current tuple from relation\n    dbplus_prev() - Get previous tuple from relation\n    dbplus_next() - Get next tuple from relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-lockrel.php","title":"dbplus_lockrel","description":"\n \n  dbplus_lockrel\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_lockrel &mdash; Request write lock on relation\n\n \n \n \n  Description\n  \n   int dbplus_lockrel\n    ( resource $relation\n   )\n\n  \n   Requests a write lock on the given relation.\n  \n  \n   Other clients may still query the relation, but can&#039;t alter it while it is\n   locked.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-next.php","title":"dbplus_next","description":"\n \n  dbplus_next\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_next &mdash; Get next tuple from relation\n\n \n \n \n  Description\n  \n   int dbplus_next\n    ( resource $relation\n   , array &$tuple\n   )\n\n  \n   Reads the data for the next tuple for the given\n   relation, makes it the current tuple and will pass\n   it back as an associative array in tuple.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_first() - Get first tuple from relation\n    dbplus_curr() - Get current tuple from relation\n    dbplus_prev() - Get previous tuple from relation\n    dbplus_last() - Get last tuple from relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-open.php","title":"dbplus_open","description":"\n \n  dbplus_open\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_open &mdash; Open relation file\n\n \n \n \n  Description\n  \n   resource dbplus_open\n    ( string $name\n   )\n\n  \n   Opens the given relation file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Can be either a file name or a relative or absolute path name. This\n       will be mapped in any case to an absolute relation file path on a\n       specific host machine and server.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success a relation file resource (cursor) is returned which must\n   be used in any subsequent commands referencing the relation.\n   Failure leads to a zero return value, the actual error code may\n   be asked for by calling dbplus_errno().\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-prev.php","title":"dbplus_prev","description":"\n \n  dbplus_prev\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_prev &mdash; Get previous tuple from relation\n\n \n \n \n  Description\n  \n   int dbplus_prev\n    ( resource $relation\n   , array &$tuple\n   )\n\n  \n   Reads the data for the previous tuple for the given\n   relation, makes it the current tuple and will pass\n   it back as an associative array in tuple.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns DBPLUS_ERR_NOERR on success or a db++ error\n   code on failure. \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_first() - Get first tuple from relation\n    dbplus_curr() - Get current tuple from relation\n    dbplus_next() - Get next tuple from relation\n    dbplus_last() - Get last tuple from relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rchperm.php","title":"dbplus_rchperm","description":"\n \n  dbplus_rchperm\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rchperm &mdash; Change relation permissions\n\n \n \n \n  Description\n  \n   int dbplus_rchperm\n    ( resource $relation\n   , int $mask\n   , string $user\n   , string $group\n   )\n\n  \n   Changes access permissions as specified by mask,\n   user and group. The\n   values for these are operating system specific.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     mask\n     \n\n      \n      \n     \n\n    \n\n    \n\n     user\n     \n\n      \n      \n     \n\n    \n\n    \n\n     group\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-resolve.php","title":"dbplus_resolve","description":"\n \n  dbplus_resolve\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_resolve &mdash; Resolve host information for relation\n\n \n \n \n  Description\n  \n   array dbplus_resolve\n    ( string $relation_name\n   )\n\n  \n   dbplus_resolve() will try to resolve the given\n   relation_name and find out internal server\n   id, real hostname and the database path on this host. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation_name\n     \n\n      \n       The relation name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing these values under the keys\n   sid, host and\n   host_path or FALSE on error.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_tcl() - Execute TCL code on server side\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-restorepos.php","title":"dbplus_restorepos","description":"\n \n  dbplus_restorepos\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_restorepos &mdash; Restore position\n\n \n \n \n  Description\n  \n   int dbplus_restorepos\n    ( resource $relation\n   , array $tuple\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcreate.php","title":"dbplus_rcreate","description":"\n \n  dbplus_rcreate\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rcreate &mdash; Creates a new DB++ relation\n\n \n \n \n  Description\n  \n   resource dbplus_rcreate\n    ( string $name\n   , mixed $domlist\n   [, bool $overwrite\n  ] )\n\n  \n   Creates a new relation. Any existing relation sharing the same\n   name will be overwritten if the relation is\n   currently not in use and overwrite is set to TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n      \n     \n\n    \n\n    \n\n     domlist\n     \n\n      \n       A combination of domains. May be passed as a single domain name string\n       or as an array of domain names.\n      \n      \n       This parameter should contain the domain specification for the new\n       relation within an array of domain description strings. A domain\n       description string consists of a domain name unique to this\n       relation, a slash and a type specification character. See the\n       db++ documentation, especially the dbcreate(1) manpage, for a\n       description of available type specifiers and their meanings.\n      \n      Note: \n       \n        This function will also accept a string with space delimited domain\n        description strings, but it is recommended to use an array\n       \n      \n     \n\n    \n\n    \n\n     overwrite\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcrtlike.php","title":"dbplus_rcrtlike","description":"\n \n  dbplus_rcrtlike\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rcrtlike &mdash; Creates an empty copy of a relation with default indices\n\n \n \n \n  Description\n  \n   mixed dbplus_rcrtlike\n    ( string $name\n   , resource $relation\n   [, int $overwrite\n  ] )\n\n  \n   dbplus_rcrtexact() will create an  empty copy\n   of the given relation under a new\n   name, but with default indices.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n      \n     \n\n    \n\n    \n\n     relation\n     \n\n      \n       The copied relation, opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     overwrite\n     \n\n      \n       An existing relation by the same name will only\n       be overwritten if this parameter is set to TRUE and no other process\n       is currently using the relation.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rcrtexact.php","title":"dbplus_rcrtexact","description":"\n \n  dbplus_rcrtexact\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rcrtexact &mdash; Creates an exact but empty copy of a relation including indices\n\n \n \n \n  Description\n  \n   mixed dbplus_rcrtexact\n    ( string $name\n   , resource $relation\n   [, bool $overwrite\n  ] )\n\n  \n   dbplus_rcrtexact() will create an exact but\n   empty copy of the given relation under a\n   new name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n      \n     \n\n    \n\n    \n\n     relation\n     \n\n      \n       The copied relation, opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     overwrite\n     \n\n      \n       An existing relation by the same name will only\n       be overwritten if this parameter is set to TRUE and no other process\n       is currently using the relation.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rkeys.php","title":"dbplus_rkeys","description":"\n \n  dbplus_rkeys\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rkeys &mdash; Specify new primary key for a relation\n\n \n \n \n  Description\n  \n   mixed dbplus_rkeys\n    ( resource $relation\n   , mixed $domlist\n   )\n\n  \n   dbplus_rkeys() will replace the current\n   primary key for relation with the\n   combination of domains specified by domlist.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     domlist\n     \n\n      \n        A combination of domains. May be passed as a single domain name\n        string or as an array of domain names.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-ropen.php","title":"dbplus_ropen","description":"\n \n  dbplus_ropen\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_ropen &mdash; Open relation file local\n\n \n \n \n  Description\n  \n   resource dbplus_ropen\n    ( string $name\n   )\n\n  \n   dbplus_ropen() will open the relation\n   file locally for quick access without any\n   client\/server overhead. Access is read only and only\n   dbplus_curr() and\n   dbplus_next() may be applied to the returned\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rsecindex.php","title":"dbplus_rsecindex","description":"\n \n  dbplus_rsecindex\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rsecindex &mdash; Create a new secondary index for a relation\n\n \n \n \n  Description\n  \n   mixed dbplus_rsecindex\n    ( resource $relation\n   , mixed $domlist\n   , int $type\n   )\n\n  \n   dbplus_rsecindex() will create a new secondary\n   index for relation with consists of the\n   domains specified by domlist and is of\n   type type\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     domlist\n     \n\n      \n       A combination of domains. May be passed as a single domain name\n       string or as an array of domain names.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns resource on success or DBPLUS_ERR_UNKNOWN on\n   failure.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rquery.php","title":"dbplus_rquery","description":"\n \n  dbplus_rquery\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rquery &mdash; Perform local (raw) AQL query\n\n \n \n \n  Description\n  \n   resource dbplus_rquery\n    ( string $query\n   [, string $dbpath\n  ] )\n\n  \n   dbplus_rquery() performs a local (raw) AQL\n   query using an AQL interpreter embedded into the db++ client\n   library. dbplus_rquery() is faster than\n   dbplus_aql() but will work on local data only.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n      \n     \n\n    \n\n    \n\n     dbpath\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rrename.php","title":"dbplus_rrename","description":"\n \n  dbplus_rrename\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rrename &mdash; Rename a relation\n\n \n \n \n  Description\n  \n   int dbplus_rrename\n    ( resource $relation\n   , string $name\n   )\n\n  \n   dbplus_rrename() will change the name of\n   relation to name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     name\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-runlink.php","title":"dbplus_runlink","description":"\n \n  dbplus_runlink\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_runlink &mdash; Remove relation from filesystem\n\n \n \n \n  Description\n  \n   int dbplus_runlink\n    ( resource $relation\n   )\n\n  \n   dbplus_runlink() will close and remove the\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-rzap.php","title":"dbplus_rzap","description":"\n \n  dbplus_rzap\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_rzap &mdash; Remove all tuples from relation\n\n \n \n \n  Description\n  \n   int dbplus_rzap\n    ( resource $relation\n   )\n\n  \n   dbplus_rzap() will remove all tuples from\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-setindexbynumber.php","title":"dbplus_setindexbynumber","description":"\n \n  dbplus_setindexbynumber\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_setindexbynumber &mdash; Set index by number\n\n \n \n \n  Description\n  \n   int dbplus_setindexbynumber\n    ( resource $relation\n   , int $idx_number\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     idx_number\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-savepos.php","title":"dbplus_savepos","description":"\n \n  dbplus_savepos\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_savepos &mdash; Save position\n\n \n \n \n  Description\n  \n   int dbplus_savepos\n    ( resource $relation\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-setindex.php","title":"dbplus_setindex","description":"\n \n  dbplus_setindex\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_setindex &mdash; Set index\n\n \n \n \n  Description\n  \n   int dbplus_setindex\n    ( resource $relation\n   , string $idx_name\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     idx_name\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-sql.php","title":"dbplus_sql","description":"\n \n  dbplus_sql\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_sql &mdash; Perform SQL query\n\n \n \n \n  Description\n  \n   resource dbplus_sql\n    ( string $query\n   [, string $server\n   [, string $dbpath\n  ]] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n      \n     \n\n    \n\n    \n\n     server\n     \n\n      \n      \n     \n\n    \n\n    \n\n     dbpath\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-tcl.php","title":"dbplus_tcl","description":"\n \n  dbplus_tcl\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_tcl &mdash; Execute TCL code on server side\n\n \n \n \n  Description\n  \n   string dbplus_tcl\n    ( int $sid\n   , string $script\n   )\n\n  \n   A db++ server will prepare a TCL interpreter for each client\n   connection. This interpreter will enable the server to execute\n   TCL code provided by the client as a sort of stored procedures to\n   improve the performance of database operations by avoiding\n   client\/server data transfers and context switches.\n  \n  \n   dbplus_tcl() needs to pass the client\n   connection id the TCL script code should\n   be executed by. dbplus_resolve() will provide\n   this connection id. The function will return whatever the TCL\n   code returns or a TCL error message if the TCL code fails.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sid\n     \n\n      \n      \n     \n\n    \n\n    \n\n     script\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_resolve() - Resolve host information for relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-tremove.php","title":"dbplus_tremove","description":"\n \n  dbplus_tremove\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_tremove &mdash; Remove tuple and return new current tuple\n\n \n \n \n  Description\n  \n   int dbplus_tremove\n    ( resource $relation\n   , array $tuple\n   [, array &$current\n  ] )\n\n  \n   dbplus_tremove() removes\n   tuple from relation\n   if it perfectly matches a tuple within the\n   relation. current, if given, will contain\n   the data of the new current tuple after calling\n   dbplus_tremove().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     tuple\n     \n\n      \n      \n     \n\n    \n\n    \n\n     current\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-undo.php","title":"dbplus_undo","description":"\n \n  dbplus_undo\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_undo &mdash; Undo\n\n \n \n \n  Description\n  \n   int dbplus_undo\n    ( resource $relation\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-undoprepare.php","title":"dbplus_undoprepare","description":"\n \n  dbplus_undoprepare\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_undoprepare &mdash; Prepare undo\n\n \n \n \n  Description\n  \n   int dbplus_undoprepare\n    ( resource $relation\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-unlockrel.php","title":"dbplus_unlockrel","description":"\n \n  dbplus_unlockrel\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_unlockrel &mdash; Give up write lock on relation\n\n \n \n \n  Description\n  \n   int dbplus_unlockrel\n    ( resource $relation\n   )\n\n  \n   Release a write lock previously obtained by\n   dbplus_lockrel().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-unselect.php","title":"dbplus_unselect","description":"\n \n  dbplus_unselect\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_unselect &mdash; Remove a constraint from relation\n\n \n \n \n  Description\n  \n   int dbplus_unselect\n    ( resource $relation\n   )\n\n  \n   Calling dbplus_unselect() will remove a\n   constraint previously set by dbplus_find() on\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-update.php","title":"dbplus_update","description":"\n \n  dbplus_update\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_update &mdash; Update specified tuple in relation\n\n \n \n \n  Description\n  \n   int dbplus_update\n    ( resource $relation\n   , array $old\n   , array $new\n   )\n\n  \n   dbplus_update() replaces the old\n   tuple with the data from the new one, only if the\n   old completely matches a tuple within\n   relation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n    \n\n     old\n     \n\n      \n       The old tuple.\n      \n     \n\n    \n\n    \n\n     new\n     \n\n      \n       The new tuple.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-xunlockrel.php","title":"dbplus_xunlockrel","description":"\n \n  dbplus_xunlockrel\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_xunlockrel &mdash; Free exclusive lock on relation\n\n \n \n \n  Description\n  \n   int dbplus_xunlockrel\n    ( resource $relation\n   )\n\n  \n   Releases an exclusive lock previously obtained by\n   dbplus_xlockrel().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dbplus-xlockrel.php","title":"dbplus_xlockrel","description":"\n \n  dbplus_xlockrel\n  (PHP 4 &lt;= 4.1.0, PECL dbplus &gt;= 0.9)dbplus_xlockrel &mdash; Request exclusive lock on relation\n\n \n \n \n  Description\n  \n   int dbplus_xlockrel\n    ( resource $relation\n   )\n\n  \n   Request an exclusive lock on relation preventing\n   even read access from other clients.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     relation\n     \n\n      \n       A relation opened by dbplus_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    dbplus_xunlockrel() - Free exclusive lock on relation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-close.php","title":"curl_close","description":"\n \n  curl_close\n  (PHP 4 &gt;= 4.0.2, PHP 5)curl_close &mdash; Close a cURL session\n\n \n \n \n  Description\n  \n   void curl_close\n    ( resource $ch\n   )\n\n  \n   Closes a cURL session and frees all resources.  The cURL handle,\n   ch, is also deleted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Initializing a new cURL session and fetching a web page\n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/&nbsp;grab&nbsp;URL&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch);\/\/&nbsp;close&nbsp;cURL&nbsp;resource,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    curl_init() - Initialize a cURL session\n    curl_multi_close() - Close a set of cURL handles\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-error.php","title":"curl_error","description":"\n \n  curl_error\n  (PHP 4 &gt;= 4.0.3, PHP 5)curl_error &mdash; Return a string containing the last error for the current session\n\n \n \n \n  Description\n  \n   string curl_error\n    ( resource $ch\n   )\n\n  \n   Returns a clear text error message for the last cURL operation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error message or &#039;&#039; (the empty string) if no\n   error occurred.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 curl_error() example\n    \n\n&lt;?php\/\/&nbsp;Create&nbsp;a&nbsp;curl&nbsp;handle&nbsp;to&nbsp;a&nbsp;non-existing&nbsp;location$ch&nbsp;=&nbsp;curl_init('http:\/\/404.php.net\/');curl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;true);if(curl_exec($ch)&nbsp;===&nbsp;false){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Curl&nbsp;error:&nbsp;'&nbsp;.&nbsp;curl_error($ch);}else{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Operation&nbsp;completed&nbsp;without&nbsp;any&nbsp;errors';}\/\/&nbsp;Close&nbsp;handlecurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_errno() - Return the last error number\n    &raquo;&nbsp;Curl error codes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-copy-handle.php","title":"curl_copy_handle","description":"\n \n  curl_copy_handle\n  (PHP 5)curl_copy_handle &mdash; Copy a cURL handle along with all of its preferences\n\n \n \n \n  Description\n  \n   resource curl_copy_handle\n    ( resource $ch\n   )\n\n  \n   Copies a cURL handle keeping the same preferences.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a new cURL handle.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Copying a cURL handle\n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;'http:\/\/www.example.com\/');curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/&nbsp;copy&nbsp;the&nbsp;handle$ch2&nbsp;=&nbsp;curl_copy_handle($ch);\/\/&nbsp;grab&nbsp;URL&nbsp;(http:\/\/www.example.com\/)&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch2);\/\/&nbsp;close&nbsp;cURL&nbsp;resources,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch2);curl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-errno.php","title":"curl_errno","description":"\n \n  curl_errno\n  (PHP 4 &gt;= 4.0.3, PHP 5)curl_errno &mdash; Return the last error number\n\n \n \n \n  Description\n  \n   int curl_errno\n    ( resource $ch\n   )\n\n  \n   Returns the error number for the last cURL operation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error number or 0 (zero) if no error\n   occurred.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 curl_errno() example\n    \n\n&lt;?php\/\/&nbsp;Create&nbsp;a&nbsp;curl&nbsp;handle&nbsp;to&nbsp;a&nbsp;non-existing&nbsp;location$ch&nbsp;=&nbsp;curl_init('http:\/\/404.php.net\/');\/\/&nbsp;Executecurl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;true);curl_exec($ch);\/\/&nbsp;Check&nbsp;if&nbsp;any&nbsp;error&nbsp;occuredif(curl_errno($ch)){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Curl&nbsp;error:&nbsp;'&nbsp;.&nbsp;curl_error($ch);}\/\/&nbsp;Close&nbsp;handlecurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_error() - Return a string containing the last error for the current session\n    &raquo;&nbsp;Curl error codes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-add-handle.php","title":"curl_multi_add_handle","description":"\n \n  curl_multi_add_handle\n  (PHP 5)curl_multi_add_handle &mdash; Add a normal cURL handle to a cURL multi handle\n\n \n \n \n  Description\n  \n   int curl_multi_add_handle\n    ( resource $mh\n   , resource $ch\n   )\n\n  \n   Adds the ch handle to the multi handle \n   mh\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 0 on success, or one of the CURLM_XXX errors\n   code.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 curl_multi_add_handle() example\n    \n     This example will create two cURL handles, add them to a multi\n     handle, and then run them in parallel.\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;both&nbsp;cURL&nbsp;resources$ch1&nbsp;=&nbsp;curl_init();$ch2&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch1,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch1,&nbsp;CURLOPT_HEADER,&nbsp;0);curl_setopt($ch2,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.php.net\/\");curl_setopt($ch2,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/create&nbsp;the&nbsp;multiple&nbsp;cURL&nbsp;handle$mh&nbsp;=&nbsp;curl_multi_init();\/\/add&nbsp;the&nbsp;two&nbsp;handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$running=null;\/\/execute&nbsp;the&nbsp;handlesdo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;curl_multi_exec($mh,$running);}&nbsp;while($running&nbsp;&gt;&nbsp;0);\/\/close&nbsp;all&nbsp;the&nbsp;handlescurl_multi_remove_handle($mh,&nbsp;$ch1);curl_multi_remove_handle($mh,&nbsp;$ch2);curl_multi_close($mh);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_multi_remove_handle() - Remove a multi handle from a set of cURL handles\n    curl_multi_init() - Returns a new cURL multi handle\n    curl_init() - Initialize a cURL session\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-init.php","title":"curl_init","description":"\n \n  curl_init\n  (PHP 4 &gt;= 4.0.2, PHP 5)curl_init &mdash; Initialize a cURL session\n\n \n \n \n  Description\n  \n   resource curl_init\n    ([ string $url = NULL\n  ] )\n\n  \n   Initializes a new session and return a cURL handle for use with the\n   curl_setopt(), curl_exec(),\n   and curl_close() functions.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       If provided, the CURLOPT_URL option will be set\n       to its value. You can manually set this using the \n       curl_setopt() function.\n      \n      Note: \n       \n        The file protocol is disabled by cURL if\n        open_basedir is set.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a cURL handle on success, FALSE on errors.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 \n     Initializing a new cURL session and fetching a web page\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/&nbsp;grab&nbsp;URL&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch);\/\/&nbsp;close&nbsp;cURL&nbsp;resource,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    curl_close() - Close a cURL session\n    curl_multi_init() - Returns a new cURL multi handle\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-getinfo.php","title":"curl_getinfo","description":"\n \n  curl_getinfo\n  (PHP 4 &gt;= 4.0.4, PHP 5)curl_getinfo &mdash; Get information regarding a specific transfer\n\n \n \n \n  Description\n  \n   mixed curl_getinfo\n    ( resource $ch\n   [, int $opt = 0\n  ] )\n\n  \n   Gets information about the last transfer. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n    \n\n     opt\n     \n\n      \n       This may be one of the following constants:\n       \n        \n         \n          CURLINFO_EFFECTIVE_URL - Last effective URL\n         \n        \n        \n         \n          CURLINFO_HTTP_CODE - Last received HTTP code\n         \n        \n        \n         \n          CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown\n         \n        \n        \n         \n          CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer\n         \n        \n        \n         \n          CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete\n         \n        \n        \n         \n          CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection\n         \n        \n        \n         \n          CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins\n         \n        \n        \n         \n          CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred\n         \n        \n        \n         \n          CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started\n         \n        \n        \n         \n          CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded\n         \n        \n        \n         \n          CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded\n         \n        \n        \n         \n          CURLINFO_SPEED_DOWNLOAD - Average download speed\n         \n        \n        \n         \n          CURLINFO_SPEED_UPLOAD - Average upload speed\n         \n        \n        \n         \n          CURLINFO_HEADER_SIZE - Total size of all headers received\n         \n        \n        \n         \n          CURLINFO_HEADER_OUT - The request string sent. For this to \n          work, add the CURLINFO_HEADER_OUT option to the handle by calling \n          curl_setopt()\n         \n        \n        \n         \n        CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests\n         \n        \n        \n         \n          CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER\n         \n        \n        \n         \n          CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field\n         \n        \n        \n         \n          CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload\n         \n        \n        \n         \n          CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If opt is given, returns its value as a string.\n   Otherwise, returns an associative array with the following elements \n   (which correspond to opt), or FALSE on failure:\n   \n    \n     \n      &quot;url&quot;\n     \n    \n    \n     \n      &quot;content_type&quot;\n     \n    \n    \n     \n      &quot;http_code&quot;\n     \n    \n    \n     \n      &quot;header_size&quot;\n     \n    \n    \n     \n      &quot;request_size&quot;\n     \n    \n    \n     \n      &quot;filetime&quot;\n     \n    \n    \n     \n      &quot;ssl_verify_result&quot;\n     \n    \n    \n     \n      &quot;redirect_count&quot;\n     \n    \n    \n     \n      &quot;total_time&quot;\n     \n    \n    \n     \n      &quot;namelookup_time&quot;\n     \n    \n    \n     \n      &quot;connect_time&quot;\n     \n    \n    \n     \n      &quot;pretransfer_time&quot;\n     \n    \n    \n     \n      &quot;size_upload&quot;\n     \n    \n    \n     \n      &quot;size_download&quot;\n     \n    \n    \n     \n      &quot;speed_download&quot;\n     \n    \n    \n     \n      &quot;speed_upload&quot;\n     \n    \n    \n     \n      &quot;download_content_length&quot;\n     \n    \n    \n     \n      &quot;upload_content_length&quot;\n     \n    \n    \n     \n      &quot;starttransfer_time&quot;\n     \n    \n    \n     \n      &quot;redirect_time&quot;\n     \n    \n    \n     \n      &quot;certinfo&quot;\n     \n    \n    \n     \n      &quot;request_header&quot; (This is only set if the CURLINFO_HEADER_OUT \n      is set by a previous call to curl_setopt())\n     \n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.3\n       \n        Introduced CURLINFO_HEADER_OUT.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 curl_getinfo() example\n    \n\n&lt;?php\/\/&nbsp;Create&nbsp;a&nbsp;curl&nbsp;handle$ch&nbsp;=&nbsp;curl_init('http:\/\/www.yahoo.com\/');\/\/&nbsp;Executecurl_exec($ch);\/\/&nbsp;Check&nbsp;if&nbsp;any&nbsp;error&nbsp;occuredif(!curl_errno($ch)){&nbsp;$info&nbsp;=&nbsp;curl_getinfo($ch);&nbsp;echo&nbsp;'Took&nbsp;'&nbsp;.&nbsp;$info['total_time']&nbsp;.&nbsp;'&nbsp;seconds&nbsp;to&nbsp;send&nbsp;a&nbsp;request&nbsp;to&nbsp;'&nbsp;.&nbsp;$info['url'];}\/\/&nbsp;Close&nbsp;handlecurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    Information gathered by this function is kept if the handle is re-used. This means \n    that unless a statistic is overridden internally by this function, the previous info \n    is returned.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-close.php","title":"curl_multi_close","description":"\n \n  curl_multi_close\n  (PHP 5)curl_multi_close &mdash; Close a set of cURL handles\n\n \n \n \n  Description\n  \n   void curl_multi_close\n    ( resource $mh\n   )\n\n  \n   Closes a set of cURL handles.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 curl_multi_close() example\n    \n     This example will create two cURL handles, add them to a multi\n     handle, and then run them in parallel.\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;both&nbsp;cURL&nbsp;resources$ch1&nbsp;=&nbsp;curl_init();$ch2&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch1,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch1,&nbsp;CURLOPT_HEADER,&nbsp;0);curl_setopt($ch2,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.php.net\/\");curl_setopt($ch2,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/create&nbsp;the&nbsp;multiple&nbsp;cURL&nbsp;handle$mh&nbsp;=&nbsp;curl_multi_init();\/\/add&nbsp;the&nbsp;two&nbsp;handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$running=null;\/\/execute&nbsp;the&nbsp;handlesdo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;curl_multi_exec($mh,$running);}&nbsp;while&nbsp;($running&nbsp;&gt;&nbsp;0);\/\/close&nbsp;the&nbsp;handlescurl_multi_remove_handle($mh,&nbsp;$ch1);curl_multi_remove_handle($mh,&nbsp;$ch2);curl_multi_close($mh);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_multi_init() - Returns a new cURL multi handle\n    curl_close() - Close a cURL session\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-exec.php","title":"curl_exec","description":"\n \n  curl_exec\n  (PHP 4 &gt;= 4.0.2, PHP 5)curl_exec &mdash; Perform a cURL session\n\n \n\n \n  Description\n  \n   mixed curl_exec\n    ( resource $ch\n   )\n\n  \n   Execute the given cURL session.\n  \n  \n   This function should be called after initializing a cURL session and all\n   the options for the session are set. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure. However, if the CURLOPT_RETURNTRANSFER\n   option is set, it will return\n   the result on success, FALSE on failure.\n  \n \n\n   \n \n  Examples\n  \n   \n    Example #1 Fetching a web page\n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/&nbsp;grab&nbsp;URL&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch);\/\/&nbsp;close&nbsp;cURL&nbsp;resource,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_multi_exec() - Run the sub-connections of the current cURL handle\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-getcontent.php","title":"curl_multi_getcontent","description":"\n \n  curl_multi_getcontent\n  (PHP 5)curl_multi_getcontent &mdash; Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set\n\n \n \n \n  Description\n  \n   string curl_multi_getcontent\n    ( resource $ch\n   )\n\n  \n   If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, \n   then this function will return the content of that cURL handle in the form\n   of a string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.\n  \n \n\n\n \n  See Also\n  \n   \n    curl_multi_init() - Returns a new cURL multi handle\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-exec.php","title":"curl_multi_exec","description":"\n \n  curl_multi_exec\n  (PHP 5)curl_multi_exec &mdash; Run the sub-connections of the current cURL handle\n\n \n \n \n  Description\n  \n   int curl_multi_exec\n    ( resource $mh\n   , int &$still_running\n   )\n\n  \n   Processes each of the handles in the stack.  This method can be called whether or not a handle\n   needs to read or write data.\n   \n \n\n\n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n    \n\n     still_running\n     \n\n      \n       A reference to a flag to tell whether the operations are still running.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A cURL code defined in the cURL Predefined Constants.\n  \n  Note: \n   \n    This only returns errors regarding the whole multi stack. There might still have \n    occurred problems on individual transfers even when this function returns \n    CURLM_OK.\n   \n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 curl_multi_exec() example\n    \n     This example will create two cURL handles, add them to a multi\n     handle, and then run them in parallel.\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;both&nbsp;cURL&nbsp;resources$ch1&nbsp;=&nbsp;curl_init();$ch2&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch1,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/lxr.php.net\/\");curl_setopt($ch1,&nbsp;CURLOPT_HEADER,&nbsp;0);curl_setopt($ch2,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.php.net\/\");curl_setopt($ch2,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/create&nbsp;the&nbsp;multiple&nbsp;cURL&nbsp;handle$mh&nbsp;=&nbsp;curl_multi_init();\/\/add&nbsp;the&nbsp;two&nbsp;handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$active&nbsp;=&nbsp;null;\/\/execute&nbsp;the&nbsp;handlesdo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$mrc&nbsp;=&nbsp;curl_multi_exec($mh,&nbsp;$active);}&nbsp;while&nbsp;($mrc&nbsp;==&nbsp;CURLM_CALL_MULTI_PERFORM);while&nbsp;($active&nbsp;&amp;&amp;&nbsp;$mrc&nbsp;==&nbsp;CURLM_OK)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(curl_multi_select($mh)&nbsp;!=&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$mrc&nbsp;=&nbsp;curl_multi_exec($mh,&nbsp;$active);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;while&nbsp;($mrc&nbsp;==&nbsp;CURLM_CALL_MULTI_PERFORM);&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/close&nbsp;the&nbsp;handlescurl_multi_remove_handle($mh,&nbsp;$ch1);curl_multi_remove_handle($mh,&nbsp;$ch2);curl_multi_close($mh);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_multi_init() - Returns a new cURL multi handle\n    curl_multi_select() - Wait for activity on any curl_multi connection\n    curl_exec() - Perform a cURL session\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-init.php","title":"curl_multi_init","description":"\n \n  curl_multi_init\n  (PHP 5)curl_multi_init &mdash; Returns a new cURL multi handle\n\n \n \n \n  Description\n  \n   resource curl_multi_init\n    ( void\n   )\n\n  \n   Allows the processing of multiple cURL handles in parallel.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns a cURL multi handle resource on success, FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 curl_multi_init() example\n    \n     This example will create two cURL handles, add them to a multi\n     handle, and then run them in parallel.\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;both&nbsp;cURL&nbsp;resources$ch1&nbsp;=&nbsp;curl_init();$ch2&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch1,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/lxr.php.net\/\");curl_setopt($ch1,&nbsp;CURLOPT_HEADER,&nbsp;0);curl_setopt($ch2,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.php.net\/\");curl_setopt($ch2,&nbsp;CURLOPT_HEADER,&nbsp;0);\/\/create&nbsp;the&nbsp;multiple&nbsp;cURL&nbsp;handle$mh&nbsp;=&nbsp;curl_multi_init();\/\/add&nbsp;the&nbsp;two&nbsp;handlescurl_multi_add_handle($mh,$ch1);curl_multi_add_handle($mh,$ch2);$active&nbsp;=&nbsp;null;\/\/execute&nbsp;the&nbsp;handlesdo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$mrc&nbsp;=&nbsp;curl_multi_exec($mh,&nbsp;$active);}&nbsp;while&nbsp;($mrc&nbsp;==&nbsp;CURLM_CALL_MULTI_PERFORM);while&nbsp;($active&nbsp;&amp;&amp;&nbsp;$mrc&nbsp;==&nbsp;CURLM_OK)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(curl_multi_select($mh)&nbsp;!=&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$mrc&nbsp;=&nbsp;curl_multi_exec($mh,&nbsp;$active);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;while&nbsp;($mrc&nbsp;==&nbsp;CURLM_CALL_MULTI_PERFORM);&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/close&nbsp;the&nbsp;handlescurl_multi_remove_handle($mh,&nbsp;$ch1);curl_multi_remove_handle($mh,&nbsp;$ch2);curl_multi_close($mh);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_init() - Initialize a cURL session\n    curl_multi_close() - Close a set of cURL handles\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-info-read.php","title":"curl_multi_info_read","description":"\n \n  curl_multi_info_read\n  (PHP 5)curl_multi_info_read &mdash; Get information about the current transfers\n\n \n \n \n  Description\n  \n   array curl_multi_info_read\n    ( resource $mh\n   [, int &$msgs_in_queue = NULL\n  ] )\n\n  \n   Ask the multi handle if there are any messages or information from the individual transfers. \n   Messages may include information such as an error code from the transfer or just the fact \n   that a transfer is completed.\n  \n     \n   Repeated calls to this function will return a new result each time, until a FALSE is returned \n   as a signal that there is no more to get at this point. The integer pointed to with \n   msgs_in_queue will contain the number of remaining messages after this \n   function was called.\n  \n  Warning\n   \n    The data the returned resource points to will not survive calling \n    curl_multi_remove_handle().\n   \n  \n \n\n \n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n    \n\n     msgs_in_queue\n     \n\n      \n       Number of messages that are still in the queue\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   On success, returns an associative array for the message, FALSE on failure.\n  \n  \n   \n    Contents of the returned array\n    \n     \n      \n       Key:\n       Value:\n      \n\n     \n\n     \n      \n       msg\n       The CURLMSG_DONE constant. Other return values\n       are currently not available.\n      \n\n      \n       result\n       One of the CURLE_* constants. If everything is\n       OK, the CURLE_OK will be the result.\n      \n\n      \n       handle\n       Resource of type curl indicates the handle which it concerns.\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A curl_multi_info_read() example\n    \n\n&lt;?php$urls&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;\"http:\/\/www.cnn.com\/\",&nbsp;&nbsp;&nbsp;\"http:\/\/www.bbc.co.uk\/\",&nbsp;&nbsp;&nbsp;\"http:\/\/www.yahoo.com\/\");$mh&nbsp;=&nbsp;curl_multi_init();foreach&nbsp;($urls&nbsp;as&nbsp;$i&nbsp;=&gt;&nbsp;$url)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$conn[$i]&nbsp;=&nbsp;curl_init($url);&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($conn[$i],&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;curl_multi_add_handle($mh,&nbsp;$conn[$i]);}do&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$status&nbsp;=&nbsp;curl_multi_exec($mh,&nbsp;$active);&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;curl_multi_info_read($mh);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(false&nbsp;!==&nbsp;$info)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($info);&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;while&nbsp;($status&nbsp;===&nbsp;CURLM_CALL_MULTI_PERFORM&nbsp;||&nbsp;$active);foreach&nbsp;($urls&nbsp;as&nbsp;$i&nbsp;=&gt;&nbsp;$url)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$res[$i]&nbsp;=&nbsp;curl_multi_getcontent($conn[$i]);&nbsp;&nbsp;&nbsp;&nbsp;curl_close($conn[$i]);}var_dump(curl_multi_info_read($mh));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(3) {\n  [&quot;msg&quot;]=&gt;\n  int(1)\n  [&quot;result&quot;]=&gt;\n  int(0)\n  [&quot;handle&quot;]=&gt;\n  resource(5) of type (curl)\n}\narray(3) {\n  [&quot;msg&quot;]=&gt;\n  int(1)\n  [&quot;result&quot;]=&gt;\n  int(0)\n  [&quot;handle&quot;]=&gt;\n  resource(7) of type (curl)\n}\narray(3) {\n  [&quot;msg&quot;]=&gt;\n  int(1)\n  [&quot;result&quot;]=&gt;\n  int(0)\n  [&quot;handle&quot;]=&gt;\n  resource(6) of type (curl)\n}\nbool(false)\n\n    \n   \n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        msgs_in_queue was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  See Also\n  \n   \n    curl_multi_init() - Returns a new cURL multi handle\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-remove-handle.php","title":"curl_multi_remove_handle","description":"\n \n  curl_multi_remove_handle\n  (PHP 5)curl_multi_remove_handle &mdash; Remove a multi handle from a set of cURL handles\n\n \n \n \n  Description\n  \n   int curl_multi_remove_handle\n    ( resource $mh\n   , resource $ch\n   )\n\n  \n   Removes a given ch handle from the given mh\n   handle. When the ch handle has been removed, it is again perfectly \n   legal to run curl_exec() on this handle.  Removing the ch handle while being \n   used, will effectively halt the transfer in progress involving that handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns 0 on success, or one of the CURLM_XXX error\n   codes.\n  \n \n\n\n \n  See Also\n  \n   \n    curl_init() - Initialize a cURL session\n    curl_multi_init() - Returns a new cURL multi handle\n    curl_multi_add_handle() - Add a normal cURL handle to a cURL multi handle\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-version.php","title":"curl_version","description":"\n \n  curl_version\n  (PHP 4 &gt;= 4.0.2, PHP 5)curl_version &mdash; Gets cURL version information\n\n \n \n \n  Description\n  \n   array curl_version\n    ([ int $age = CURLVERSION_NOW\n  ] )\n\n  \n   Returns information about the cURL version.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     age\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array with the following elements: \n   \n    \n     \n      \n       Indice\n       Value description\n      \n\n     \n\n     \n      \n       version_number\n       cURL 24 bit version number\n      \n\n      \n       version\n       cURL version number, as a string\n      \n\n      \n       ssl_version_number\n       OpenSSL 24 bit version number\n      \n\n      \n       ssl_version\n       OpenSSL version number, as a string\n      \n\n      \n       libz_version\n       zlib version number, as a string\n      \n\n      \n       host\n       Information about the host where cURL was built\n      \n\n      \n       age\n       &nbsp;\n      \n\n      \n       features\n       A bitmask of the CURL_VERSION_XXX constants\n      \n\n      \n       protocols\n       An array of protocols names supported by cURL\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 curl_version() example\n    \n     This example will check which features that&#039;s available \n     in cURL build by using the &#039;features&#039; bitmask returned \n     by curl_version().\n    \n    \n\n&lt;?php\/\/&nbsp;Get&nbsp;curl&nbsp;version&nbsp;array$version&nbsp;=&nbsp;curl_version();\/\/&nbsp;These&nbsp;are&nbsp;the&nbsp;bitfields&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;\/\/&nbsp;to&nbsp;check&nbsp;for&nbsp;features&nbsp;in&nbsp;the&nbsp;curl&nbsp;build$bitfields&nbsp;=&nbsp;Array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'CURL_VERSION_IPV6',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'CURL_VERSION_KERBEROS4',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'CURL_VERSION_SSL',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'CURL_VERSION_LIBZ'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);foreach($bitfields&nbsp;as&nbsp;$feature){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$feature&nbsp;.&nbsp;($version['features']&nbsp;&amp;&nbsp;constant($feature)&nbsp;?&nbsp;'&nbsp;matches'&nbsp;:&nbsp;'&nbsp;does&nbsp;not&nbsp;match');&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;PHP_EOL;}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-setopt-array.php","title":"curl_setopt_array","description":"\n \n  curl_setopt_array\n  (PHP 5 &gt;= 5.1.3)curl_setopt_array &mdash; Set multiple options for a cURL transfer\n\n \n \n  Description\n  \n   bool curl_setopt_array\n    ( resource $ch\n   , array $options\n   )\n\n  \n   Sets multiple options for a cURL session. This function is\n   useful for setting a large amount of cURL options without repetitively\n   calling curl_setopt().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n    \n\n     options\n     \n\n      \n       An array specifying which options to set and their values.\n       The keys should be valid curl_setopt() constants or\n       their integer equivalents.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if all options were successfully set. If an option could\n   not be successfully set, FALSE is immediately returned, ignoring any\n   future options in the options array.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Initializing a new cURL session and fetching a web page\n    \n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;options$options&nbsp;=&nbsp;array(CURLOPT_URL&nbsp;=&gt;&nbsp;'http:\/\/www.example.com\/',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CURLOPT_HEADER&nbsp;=&gt;&nbsp;false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);curl_setopt_array($ch,&nbsp;$options);\/\/&nbsp;grab&nbsp;URL&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch);\/\/&nbsp;close&nbsp;cURL&nbsp;resource,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n  \n   Prior to PHP 5.1.3 this function can be simulated with:\n  \n  \n   \n    Example #2 Our own implementation of curl_setopt_array()\n    \n\n&lt;?phpif&nbsp;(!function_exists('curl_setopt_array'))&nbsp;{&nbsp;&nbsp;&nbsp;function&nbsp;curl_setopt_array(&amp;$ch,&nbsp;$curl_options)&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($curl_options&nbsp;as&nbsp;$option&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!curl_setopt($ch,&nbsp;$option,&nbsp;$value))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    As with curl_setopt(), passing an array to \n    CURLOPT_POST will encode the data as \n    multipart\/form-data, while passing a \n    URL-encoded string will encode the data as \n    application\/x-www-form-urlencoded.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    curl_setopt() - Set an option for a cURL transfer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-multi-select.php","title":"curl_multi_select","description":"\n \n  curl_multi_select\n  (PHP 5)curl_multi_select &mdash; Wait for activity on any curl_multi connection\n\n \n \n \n  Description\n  \n   int curl_multi_select\n    ( resource $mh\n   [, float $timeout = 1.0\n  ] )\n\n  \n    Blocks until there is activity on any of the curl_multi connections.\n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \nmh\n\nA cURL multi handle returned by\ncurl_multi_init().\n\n\n    \n\n     timeout\n     \n\n      \n       Time, in seconds, to wait for a response.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   On success, returns the number of descriptors contained in \n   the descriptor sets.  On failure, this function will return -1 on a select failure or timeout (from the underlying select system call).\n  \n \n\n\n \n  See Also\n  \n   \n    curl_multi_init() - Returns a new cURL multi handle\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-fcntl.php","title":"dio_fcntl","description":"\n \n  dio_fcntl\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_fcntl &mdash; Performs a c library fcntl on fd\n\n \n \n  Description\n  \n   mixed dio_fcntl\n    ( resource $fd\n   , int $cmd\n   [, mixed $args\n  ] )\n\n  \n   The dio_fcntl() function performs the\n   operation specified by cmd on the file\n   descriptor fd. Some commands require\n   additional arguments args to be supplied.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     cmd\n     \n\n      \n       Can be one of the following operations:\n       \n        \n         \n          F_SETLK - Lock is set or cleared. If the lock\n          is held by someone else dio_fcntl() returns\n          -1.\n         \n        \n        \n         \n          F_SETLKW - like F_SETLK,\n          but in case the lock is held by someone else, \n          dio_fcntl() waits until the lock is released.\n         \n        \n        \n         \n          F_GETLK - dio_fcntl() \n          returns an associative array (as described above) if someone else\n          prevents lock. If there is no obstruction key &quot;type&quot; will set\n          to F_UNLCK.\n         \n        \n        \n         \n          F_DUPFD - finds the lowest numbered available\n          file descriptor greater than or equal to args\n          and returns them.\n         \n        \n        \n         \n          F_SETFL - Sets the file descriptors flags to \n          the value specified by args, which can be\n          O_APPEND, O_NONBLOCK or \n          O_ASYNC. To use O_ASYNC \n          you will need to use the PCNTL \n          extension.\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n       args is an associative array, when\n       cmd is F_SETLK or\n       F_SETLLW, with the following keys:\n       \n        \n         \n          &quot;start&quot; - offset where lock begins\n         \n        \n        \n         \n          &quot;length&quot; - size of locked area. zero means to end of file\n         \n        \n        \n         \n          &quot;wenth&quot; - Where l_start is relative to: can be \n          SEEK_SET,\n          SEEK_END and SEEK_CUR\n         \n        \n        \n         \n          &quot;type&quot; - type of lock: can be F_RDLCK (read\n          lock), F_WRLCK (write lock) or \n          F_UNLCK (unlock)\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the result of the C call.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Setting and clearing a lock\n    \n\n&lt;?php$fd&nbsp;=&nbsp;dio_open('\/dev\/ttyS0',&nbsp;O_RDWR);if&nbsp;(dio_fcntl($fd,&nbsp;F_SETLK,&nbsp;Array(\"type\"=&gt;F_WRLCK))&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;\/\/&nbsp;the&nbsp;file&nbsp;descriptor&nbsp;appears&nbsp;locked&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;lock&nbsp;can&nbsp;not&nbsp;be&nbsp;cleared.&nbsp;It&nbsp;is&nbsp;held&nbsp;by&nbsp;someone&nbsp;else.\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"Lock&nbsp;succesfully&nbsp;set\/cleared\";}dio_close($fd);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-close.php","title":"dio_close","description":"\n \n  dio_close\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_close &mdash; Closes the file descriptor given by fd\n\n \n \n  Description\n  \n   void dio_close\n    ( resource $fd\n   )\n\n  \n   The function dio_close() closes the file descriptor\n   fd.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Closing an open file descriptor\n    \n\n&lt;?php$fd&nbsp;=&nbsp;dio_open('\/dev\/ttyS0',&nbsp;O_RDWR);dio_close($fd);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    dio_open() - Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-open.php","title":"dio_open","description":"\n \n  dio_open\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_open &mdash; \n   Opens a file (creating it if necessary) at a lower level than the\n   C library input\/ouput stream functions allow.\n  \n\n \n \n  Description\n  \n   resource dio_open\n    ( string $filename\n   , int $flags\n   [, int $mode = 0\n   ] )\n\n  \n   dio_open() opens a file and returns a new file\n   descriptor for it.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The pathname of the file to open.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The flags parameter is a bitwise-ORed\n       value comprising flags from the following list. This value\n       must include one of\n       O_RDONLY, O_WRONLY,\n       or O_RDWR. Additionally, it may include\n       any combination of the other flags from this list.\n       \n        \n         \n          O_RDONLY - opens the file for read access.\n         \n        \n        \n         \n          O_WRONLY - opens the file for write access.\n         \n        \n        \n         \n          O_RDWR - opens the file for both reading and\n          writing.\n         \n        \n        \n         \n          O_CREAT - creates the file, if it doesn&#039;t\n          already exist.\n         \n         \n        \n         \n          O_EXCL - if both O_CREAT\n          and O_EXCL are set and the file already\n          exists, causes dio_open() to fail.\n         \n         \n        \n         \n          O_TRUNC - if the file exists and is opened \n          for write access, the file will be truncated to zero length.\n         \n        \n        \n         \n          O_APPEND - write operations write data at the\n          end of the file.\n         \n        \n        \n         \n          O_NONBLOCK - sets non blocking mode.\n         \n        \n        \n         \n          O_NOCTTY - prevent the OS from\n          assigning the opened file as the process&#039;s controlling\n          terminal when opening a TTY device file.\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       If flags contains\n       O_CREAT, mode will\n       set the permissions of the file (creation\n       permissions). Mode is required for\n       correct operation when O_CREAT is\n       specified in mode and is ignored\n       otherwise.\n      \n      \n       The actual permissions assigned to the created file will be\n       affected by the process&#039;s umask setting as\n       per usual.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   A file descriptor or FALSE on error.\n  \n \n\n \n  Examples\n  \n   Example #1 Opening a file descriptor\n   \n\n&lt;?php$fd&nbsp;=&nbsp;dio_open('\/dev\/ttyS0',&nbsp;O_RDWR&nbsp;|&nbsp;O_NOCTTY&nbsp;|&nbsp;O_NONBLOCK);dio_close($fd);?&gt;\n\n\n   \n\n      \n \n\n \n  See Also\n  \n   \n    dio_close() - Closes the file descriptor given by fd\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-read.php","title":"dio_read","description":"\n \n  dio_read\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_read &mdash; Reads bytes from a file descriptor\n\n \n \n  Description\n  \n   string dio_read\n    ( resource $fd\n   [, int $len = 1024\n  ] )\n\n  \n   The function dio_read() reads and returns\n   len bytes from file with descriptor\n   fd. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       The number of bytes to read. If not specified,\n       dio_read() reads 1K sized block.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The bytes read from fd.\n  \n \n\n \n  See Also\n  \n   \n    dio_write() - Writes data to fd with optional truncation at length\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.curl-setopt.php","title":"curl_setopt","description":"\n \n  curl_setopt\n  (PHP 4 &gt;= 4.0.2, PHP 5)curl_setopt &mdash; Set an option for a cURL transfer\n\n \n \n \n  Description\n  \n   bool curl_setopt\n    ( resource $ch\n   , int $option\n   , mixed $value\n   )\n\n  \n   Sets an option on the given cURL session handle.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \nch\n\nA cURL handle returned by\ncurl_init().\n\n\n    \n\n     option\n     \n\n      \n       The CURLOPT_XXX option to set.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The value to be set on option.\n      \n      \n       value should be a bool for the\n       following values of the option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n           Notes\n          \n\n         \n\n         \n          \n           CURLOPT_AUTOREFERER\n           \n            TRUE to automatically set the Referer: field in\n            requests where it follows a Location: redirect.\n           \n           \n           \n          \n\n          \n           CURLOPT_BINARYTRANSFER\n           \n            TRUE to return the raw output when\n            CURLOPT_RETURNTRANSFER is used.\n           \n           \n           \n          \n\n          \n           CURLOPT_COOKIESESSION\n           \n            TRUE to mark this as a new cookie &quot;session&quot;. It will force libcurl\n            to ignore all cookies it is about to load that are &quot;session cookies&quot;\n            from the previous session. By default, libcurl always stores and\n            loads all cookies, independent if they are session cookies or not.\n            Session cookies are cookies without expiry date and they are meant\n            to be alive and existing for this &quot;session&quot; only.\n           \n           \n           \n          \n\n          \n           CURLOPT_CERTINFO\n           \n            TRUE to output SSL certification information to STDERR\n            on secure transfers.\n           \n           \n            Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be \n            on to have an effect.\n           \n          \n\n          \n           CURLOPT_CRLF\n           \n            TRUE to convert Unix newlines to CRLF newlines\n            on transfers.\n           \n           \n           \n          \n\n          \n           CURLOPT_DNS_USE_GLOBAL_CACHE\n           \n            TRUE to use a global DNS cache. This option is\n            not thread-safe and is enabled by default.\n           \n           \n           \n          \n\n          \n           CURLOPT_FAILONERROR\n           \n            TRUE to fail silently if the HTTP code returned\n            is greater than or equal to 400. The default behavior is to return\n            the page normally, ignoring the code.\n           \n           \n           \n          \n\n          \n           CURLOPT_FILETIME\n           \n            TRUE to attempt to retrieve the modification\n            date of the remote document. This value can be retrieved using\n            the CURLINFO_FILETIME option with\n            curl_getinfo().\n           \n           \n           \n          \n\n          \n           CURLOPT_FOLLOWLOCATION\n           \n            TRUE to follow any\n            &quot;Location: &quot; header that the server sends as\n            part of the HTTP header (note this is recursive, PHP will follow as\n            many &quot;Location: &quot; headers that it is sent,\n            unless CURLOPT_MAXREDIRS is set).\n           \n           \n           \n          \n\n          \n           CURLOPT_FORBID_REUSE\n           \n            TRUE to force the connection to explicitly\n            close when it has finished processing, and not be pooled for reuse.\n           \n           \n           \n          \n\n          \n           CURLOPT_FRESH_CONNECT\n           \n            TRUE to force the use of a new connection\n            instead of a cached one.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTP_USE_EPRT\n           \n            TRUE to use EPRT (and LPRT) when doing active\n            FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT\n            only.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTP_USE_EPSV\n           \n            TRUE to first try an EPSV command for FTP\n            transfers before reverting back to PASV. Set to FALSE\n            to disable EPSV.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTPAPPEND\n           \n            TRUE to append to the remote file instead of\n            overwriting it.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTPASCII\n           \n            An alias of\n            CURLOPT_TRANSFERTEXT. Use that instead.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTPLISTONLY\n           \n            TRUE to only list the names of an FTP\n            directory.\n           \n           \n           \n          \n\n          \n           CURLOPT_HEADER\n           \n            TRUE to include the header in the output.\n           \n           \n           \n          \n\n          \n           CURLINFO_HEADER_OUT\n           \n            TRUE to track the handle&#039;s request string.\n           \n           \n            Available since PHP 5.1.3. The CURLINFO_\n            prefix is intentional.\n           \n          \n\n          \n           CURLOPT_HTTPGET\n           \n            TRUE to reset the HTTP request method to GET.\n            Since GET is the default, this is only necessary if the request\n            method has been changed.\n           \n           \n           \n          \n\n          \n           CURLOPT_HTTPPROXYTUNNEL\n           \n            TRUE to tunnel through a given HTTP proxy.\n           \n           \n           \n          \n\n          \n           CURLOPT_MUTE\n           \n            TRUE to be completely silent with regards to\n            the cURL functions.\n           \n           \n           \n          \n\n          \n           CURLOPT_NETRC\n           \n            TRUE to scan the ~\/.netrc\n            file to find a username and password for the remote site that\n            a connection is being established with.\n           \n           \n           \n          \n\n          \n           CURLOPT_NOBODY\n           \n            TRUE to exclude the body from the output.\n            Request method is then set to HEAD. Changing this to FALSE does\n            not change it to GET.\n           \n           \n           \n          \n\n          \n           CURLOPT_NOPROGRESS\n           \n            TRUE to disable the progress meter for cURL transfers.\n            Note: \n             \n              PHP automatically sets this option to TRUE, this should only be\n              changed for debugging purposes.\n             \n            \n            \n           \n           \n          \n\n          \n           CURLOPT_NOSIGNAL\n           \n            TRUE to ignore any cURL function that causes a\n            signal to be sent to the PHP process. This is turned on by default\n            in multi-threaded SAPIs so timeout options can still be used.\n           \n           \n            Added in cURL 7.10.\n           \n          \n\n          \n           CURLOPT_POST\n           \n            TRUE to do a regular HTTP POST. This POST is the\n            normal application\/x-www-form-urlencoded kind,\n            most commonly used by HTML forms.\n           \n           \n           \n          \n\n          \n           CURLOPT_PUT\n           \n            TRUE to HTTP PUT a file. The file to PUT must\n            be set with CURLOPT_INFILE and\n            CURLOPT_INFILESIZE.\n           \n           \n           \n          \n\n          \n           CURLOPT_RETURNTRANSFER\n           \n            TRUE to return the transfer as a string of the\n            return value of curl_exec() instead of outputting\n            it out directly.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSL_VERIFYPEER\n           \n            FALSE to stop cURL from verifying the peer&#039;s\n            certificate. Alternate certificates to verify against can be\n            specified with the CURLOPT_CAINFO option\n            or a certificate directory can be specified with the\n            CURLOPT_CAPATH option.\n           \n           \n            TRUE by default as of cURL 7.10. Default bundle installed as of\n            cURL 7.10.\n           \n          \n\n          \n           CURLOPT_TRANSFERTEXT\n           \n            TRUE to use ASCII mode for FTP transfers.\n            For LDAP, it retrieves data in plain text instead of HTML. On\n            Windows systems, it will not set STDOUT to binary\n            mode.\n           \n           \n           \n          \n\n          \n           CURLOPT_UNRESTRICTED_AUTH\n           \n            TRUE to keep sending the username and password\n            when following locations (using\n            CURLOPT_FOLLOWLOCATION), even when the\n            hostname has changed.\n           \n           \n           \n          \n\n          \n           CURLOPT_UPLOAD\n           \n            TRUE to prepare for an upload.\n           \n           \n           \n          \n\n          \n           CURLOPT_VERBOSE\n           \n            TRUE to output verbose information. Writes\n            output to STDERR, or the file specified using\n            CURLOPT_STDERR.\n           \n           \n           \n          \n\n         \n        \n       \n\n      \n      \n       value should be an integer for the\n       following values of the option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n           Notes\n          \n\n         \n\n         \n          \n           CURLOPT_BUFFERSIZE\n           \n            The size of the buffer to use for each read. There is no guarantee\n            this request will be fulfilled, however.\n           \n           \n            Added in cURL 7.10.\n           \n          \n\n          \n           CURLOPT_CLOSEPOLICY\n           \n            Either\n            CURLCLOSEPOLICY_LEAST_RECENTLY_USED or\n            CURLCLOSEPOLICY_OLDEST.\n            There are three other CURLCLOSEPOLICY_\n            constants, but cURL does not support them yet.\n           \n           \n           \n          \n\n          \n           CURLOPT_CONNECTTIMEOUT\n           \n            The number of seconds to wait while trying to connect. Use 0 to\n            wait indefinitely.\n           \n           \n           \n          \n\n          \n           CURLOPT_CONNECTTIMEOUT_MS\n           \n            The number of milliseconds to wait while trying to connect. Use 0 to\n            wait indefinitely.\n            \n            If libcurl is built to use the standard system name resolver, that\n            portion of the connect will still use full-second resolution for\n            timeouts with a minimum timeout allowed of one second.\n           \n           \n            Added in cURL 7.16.2. Available since PHP 5.2.3.\n           \n          \n\n          \n           CURLOPT_DNS_CACHE_TIMEOUT\n           \n            The number of seconds to keep DNS entries in memory. This\n            option is set to 120 (2 minutes) by default.\n           \n           \n           \n          \n\n          \n           CURLOPT_FTPSSLAUTH\n           \n            The FTP authentication method (when is activated):\n            CURLFTPAUTH_SSL (try SSL first),\n            CURLFTPAUTH_TLS (try TLS first), or\n            CURLFTPAUTH_DEFAULT (let cURL decide).\n           \n           \n            Added in cURL 7.12.2.\n           \n          \n\n          \n           CURLOPT_HTTP_VERSION\n           \n            CURL_HTTP_VERSION_NONE (default, lets CURL\n            decide which version to use),\n            CURL_HTTP_VERSION_1_0 (forces HTTP\/1.0),\n            or CURL_HTTP_VERSION_1_1 (forces HTTP\/1.1).\n           \n           \n           \n          \n\n          \n           CURLOPT_HTTPAUTH\n           \n            \n             The HTTP authentication method(s) to use. The options are:\n             CURLAUTH_BASIC,\n             CURLAUTH_DIGEST,\n             CURLAUTH_GSSNEGOTIATE,\n             CURLAUTH_NTLM,\n             CURLAUTH_ANY, and\n             CURLAUTH_ANYSAFE.\n            \n            \n             The bitwise | (or) operator can be used to combine\n             more than one method. If this is done, cURL will poll the server to see\n             what methods it supports and pick the best one.\n            \n            \n             CURLAUTH_ANY is an alias for\n             CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.\n            \n            \n             CURLAUTH_ANYSAFE is an alias for\n             CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.\n            \n           \n           \n           \n          \n\n          \n           CURLOPT_INFILESIZE\n           \n            The expected size, in bytes, of the file when uploading a file to\n            a remote site. Note that using this option will not stop libcurl\n            from sending more data, as exactly what is sent depends on\n            CURLOPT_READFUNCTION.\n           \n           \n           \n          \n\n          \n           CURLOPT_LOW_SPEED_LIMIT\n           \n            The transfer speed, in bytes per second, that the transfer should be\n            below during the count of CURLOPT_LOW_SPEED_TIME\n            seconds before PHP considers the transfer too slow and aborts.\n           \n           \n           \n          \n\n          \n           CURLOPT_LOW_SPEED_TIME\n           \n            The number of seconds the transfer speed should be below\n            CURLOPT_LOW_SPEED_LIMIT before PHP considers\n            the transfer too slow and aborts.\n           \n           \n           \n          \n\n          \n           CURLOPT_MAXCONNECTS\n           \n            The maximum amount of persistent connections that are allowed.\n            When the limit is reached,\n            CURLOPT_CLOSEPOLICY is used to determine\n            which connection to close.\n           \n           \n           \n          \n\n          \n           CURLOPT_MAXREDIRS\n           \n            The maximum amount of HTTP redirections to follow. Use this option\n            alongside CURLOPT_FOLLOWLOCATION.\n           \n           \n           \n          \n\n          \n           CURLOPT_PORT\n           \n            An alternative port number to connect to.\n           \n           \n           \n          \n\n          \n           CURLOPT_PROTOCOLS\n           \n            \n             Bitmask of CURLPROTO_* values. If used, this bitmask \n             limits what protocols libcurl may use in the transfer. This allows you to have\n             a libcurl built to support a wide range of protocols but still limit specific\n             transfers to only be allowed to use a subset of them. By default libcurl will\n             accept all protocols it supports. \n             See also CURLOPT_REDIR_PROTOCOLS.\n            \n            \n             Valid protocol options are: \n             CURLPROTO_HTTP,\n             CURLPROTO_HTTPS,\n             CURLPROTO_FTP,\n             CURLPROTO_FTPS,\n             CURLPROTO_SCP,\n             CURLPROTO_SFTP,\n             CURLPROTO_TELNET,\n             CURLPROTO_LDAP,\n             CURLPROTO_LDAPS,\n             CURLPROTO_DICT,\n             CURLPROTO_FILE,\n             CURLPROTO_TFTP,\n             CURLPROTO_ALL\n            \n           \n           \n            Added in cURL 7.19.4.\n           \n          \n\n          \n           CURLOPT_PROXYAUTH\n           \n            The HTTP authentication method(s) to use for the proxy connection.\n            Use the same bitmasks as described in\n            CURLOPT_HTTPAUTH. For proxy authentication,\n            only CURLAUTH_BASIC and\n            CURLAUTH_NTLM are currently supported.\n           \n           \n            Added in cURL 7.10.7.\n           \n          \n\n          \n           CURLOPT_PROXYPORT\n           \n            The port number of the proxy to connect to. This port number can\n            also be set in CURLOPT_PROXY.\n           \n           \n           \n          \n\n          \n           CURLOPT_PROXYTYPE\n           \n            Either CURLPROXY_HTTP (default) or\n            CURLPROXY_SOCKS5.\n           \n           \n            Added in cURL 7.10.\n           \n          \n\n          \n           CURLOPT_REDIR_PROTOCOLS\n           \n            Bitmask of CURLPROTO_* values. If used, this bitmask\n            limits what protocols libcurl may use in a transfer that it follows to in\n            a redirect when CURLOPT_FOLLOWLOCATION is enabled.\n            This allows you to limit specific transfers to only be allowed to use a subset\n            of protocols in redirections. By default libcurl will allow all protocols\n            except for FILE and SCP. This is a difference compared to pre-7.19.4 versions\n            which unconditionally would follow to all protocols supported. \n            See also CURLOPT_PROTOCOLS for protocol constant values.\n           \n           \n            Added in cURL 7.19.4.\n           \n          \n\n          \n           CURLOPT_RESUME_FROM\n           \n            The offset, in bytes, to resume a transfer from.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSL_VERIFYHOST\n           \n            1 to check the existence of a common name in the\n            SSL peer certificate. 2 to check the existence of\n            a common name and also verify that it matches the hostname\n            provided. In production environments the value of this option\n            should be kept at 2 (default value).\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLVERSION\n           \n            The SSL version (2 or 3) to use. By default PHP will try to determine\n            this itself, although in some cases this must be set manually.\n           \n           \n           \n          \n\n          \n           CURLOPT_TIMECONDITION\n           \n            How CURLOPT_TIMEVALUE is treated.\n            Use CURL_TIMECOND_IFMODSINCE to return the\n            page only if it has been modified since the time specified in\n            CURLOPT_TIMEVALUE. If it hasn&#039;t been modified,\n            a &quot;304 Not Modified&quot; header will be returned\n            assuming CURLOPT_HEADER is TRUE.\n            Use CURL_TIMECOND_IFUNMODSINCE for the reverse\n            effect. CURL_TIMECOND_IFMODSINCE is the\n            default.\n           \n           \n           \n          \n\n          \n           CURLOPT_TIMEOUT\n           \n            The maximum number of seconds to allow cURL functions to execute.\n           \n           \n           \n          \n\n          \n           CURLOPT_TIMEOUT_MS\n           \n            The maximum number of milliseconds to allow cURL functions to\n            execute.\n            \n            If libcurl is built to use the standard system name resolver, that\n            portion of the connect will still use full-second resolution for\n            timeouts with a minimum timeout allowed of one second.\n           \n           \n            Added in cURL 7.16.2. Available since PHP 5.2.3.\n           \n          \n\n          \n           CURLOPT_TIMEVALUE\n           \n            The time in seconds since January 1st, 1970. The time will be used\n            by CURLOPT_TIMECONDITION. By default,\n            CURL_TIMECOND_IFMODSINCE is used.\n           \n           \n           \n          \n\n          \n           CURLOPT_MAX_RECV_SPEED_LARGE\n           \n            If a download exceeds this speed (counted in bytes per second) on\n            cumulative average during the transfer, the transfer will pause to\n            keep the average rate less than or equal to the parameter value.\n            Defaults to unlimited speed.\n           \n           \n            Added in cURL 7.15.5. Available since PHP 5.4.0.\n           \n          \n\n          \n           CURLOPT_MAX_SEND_SPEED_LARGE\n           \n            If an upload exceeds this speed (counted in bytes per second) on\n            cumulative average during the transfer, the transfer will pause to\n            keep the average rate less than or equal to the parameter value.\n            Defaults to unlimited speed.\n           \n           \n            Added in cURL 7.15.5. Available since PHP 5.4.0.\n           \n          \n\n         \n        \n       \n\n      \n      \n       value should be a string for the\n       following values of the option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n           Notes\n          \n\n         \n\n         \n          \n           CURLOPT_CAINFO\n           \n            The name of a file holding one or more certificates to verify the\n            peer with. This only makes sense when used in combination with\n            CURLOPT_SSL_VERIFYPEER.\n           \n           \n            Requires absolute path.\n           \n          \n\n          \n           CURLOPT_CAPATH\n           \n            A directory that holds multiple CA certificates. Use this option\n            alongside CURLOPT_SSL_VERIFYPEER.\n           \n           \n           \n          \n\n          \n           CURLOPT_COOKIE\n           \n            The contents of the &quot;Cookie: &quot; header to be\n            used in the HTTP request.\n            Note that multiple cookies are separated with a semicolon followed\n            by a space (e.g., &quot;fruit=apple; colour=red&quot;)\n           \n           \n           \n          \n\n          \n           CURLOPT_COOKIEFILE\n           \n            The name of the file containing the cookie data. The cookie file can\n            be in Netscape format, or just plain HTTP-style headers dumped into\n            a file.\n            If the name is an empty string, no cookies are loaded, but cookie\n            handling is still enabled.\n           \n           \n           \n          \n\n          \n           CURLOPT_COOKIEJAR\n           \n            The name of a file to save all internal cookies to when the handle is closed, \n            e.g. after a call to curl_close.\n           \n           \n           \n          \n\n          \n           CURLOPT_CUSTOMREQUEST\n           \n            A custom request method to use instead of\n            &quot;GET&quot; or &quot;HEAD&quot; when doing\n            a HTTP request. This is useful for doing\n            &quot;DELETE&quot; or other, more obscure HTTP requests.\n            Valid values are things like &quot;GET&quot;,\n            &quot;POST&quot;, &quot;CONNECT&quot; and so on;\n            i.e. Do not enter a whole HTTP request line here. For instance,\n            entering &quot;GET \/index.html HTTP\/1.0\\r\\n\\r\\n&quot;\n            would be incorrect.\n            Note: \n             \n              Don&#039;t do this without making sure the server supports the custom\n              request method first.\n             \n            \n            \n           \n           \n          \n\n          \n           CURLOPT_EGDSOCKET\n           \n            Like CURLOPT_RANDOM_FILE, except a filename\n            to an Entropy Gathering Daemon socket.\n           \n           \n           \n          \n\n          \n           CURLOPT_ENCODING\n           \n            The contents of the &quot;Accept-Encoding: &quot; header.\n            This enables decoding of the response. Supported encodings are\n            &quot;identity&quot;, &quot;deflate&quot;, and\n            &quot;gzip&quot;. If an empty string, &quot;&quot;,\n            is set, a header containing all supported encoding types is sent.\n           \n           \n            Added in cURL 7.10.\n           \n          \n\n          \n           CURLOPT_FTPPORT\n           \n            The value which will be used to get the IP address to use\n            for the FTP &quot;POST&quot; instruction. The &quot;POST&quot; instruction tells\n            the remote server to connect to our specified IP address.  The\n            string may be a plain IP address, a hostname, a network\n            interface name (under Unix), or just a plain &#039;-&#039; to use the\n            systems default IP address.\n           \n           \n           \n          \n\n          \n           CURLOPT_INTERFACE\n           \n            The name of the outgoing network interface to use. This can be an\n            interface name, an IP address or a host name.\n           \n           \n           \n          \n\n          \n           CURLOPT_KRB4LEVEL\n           \n            The KRB4 (Kerberos 4) security level. Any of the following values\n            (in order from least to most powerful) are valid:\n            &quot;clear&quot;,\n            &quot;safe&quot;,\n            &quot;confidential&quot;,\n            &quot;private&quot;..\n            If the string does not match one of these,\n            &quot;private&quot; is used. Setting this option to NULL\n            will disable KRB4 security. Currently KRB4 security only works\n            with FTP transactions.\n           \n           \n           \n          \n\n          \n           CURLOPT_POSTFIELDS\n           \n            \n             The full data to post in a HTTP &quot;POST&quot; operation.\n             To post a file, prepend a filename with @ and\n             use the full path. The filetype can be explicitly specified by\n             following the filename with the type in the format\n             &#039;;type=mimetype&#039;. This parameter can either be\n             passed as a urlencoded string like &#039;para1=val1&amp;para2=val2&amp;...&#039; \n             or as an array with the field name as key and field data as value.\n             If value is an array, the\n             Content-Type header will be set to\n             multipart\/form-data.\n            \n            \n             As of PHP 5.2.0, value must be an array if\n             files are passed to this option with the @ prefix.\n            \n           \n           \n           \n          \n\n          \n           CURLOPT_PROXY\n           \n            The HTTP proxy to tunnel requests through.\n           \n           \n           \n          \n\n          \n           CURLOPT_PROXYUSERPWD\n           \n            A username and password formatted as\n            &quot;[username]:[password]&quot; to use for the\n            connection to the proxy.\n           \n           \n           \n          \n\n          \n           CURLOPT_RANDOM_FILE\n           \n            A filename to be used to seed the random number generator for SSL.\n           \n           \n           \n          \n\n          \n           CURLOPT_RANGE\n           \n            Range(s) of data to retrieve in the format\n            &quot;X-Y&quot; where X or Y are optional. HTTP transfers\n            also support several intervals, separated with commas in the format\n            &quot;X-Y,N-M&quot;.\n           \n           \n           \n          \n\n          \n           CURLOPT_REFERER\n           \n            The contents of the &quot;Referer: &quot; header to be used\n            in a HTTP request.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSL_CIPHER_LIST\n           \n            A list of ciphers to use for SSL. For example,\n            RC4-SHA and TLSv1 are valid\n            cipher lists.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLCERT\n           \n            The name of a file containing a PEM formatted certificate.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLCERTPASSWD\n           \n            The password required to use the\n            CURLOPT_SSLCERT certificate.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLCERTTYPE\n           \n            The format of the certificate. Supported formats are\n            &quot;PEM&quot; (default), &quot;DER&quot;,\n            and &quot;ENG&quot;.\n           \n           \n            Added in cURL 7.9.3.\n           \n          \n\n          \n           CURLOPT_SSLENGINE\n           \n            The identifier for the crypto engine of the private SSL key\n            specified in CURLOPT_SSLKEY.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLENGINE_DEFAULT\n           \n            The identifier for the crypto engine used for asymmetric crypto\n            operations.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLKEY\n           \n            The name of a file containing a private SSL key.\n           \n           \n           \n          \n\n          \n           CURLOPT_SSLKEYPASSWD\n           \n            The secret password needed to use the private SSL key specified in\n            CURLOPT_SSLKEY.\n            Note: \n             \n              Since this option contains a sensitive password, remember to keep\n              the PHP script it is contained within safe.\n             \n            \n            \n           \n           \n          \n\n          \n           CURLOPT_SSLKEYTYPE\n           \n            The key type of the private SSL key specified in\n            CURLOPT_SSLKEY. Supported key types are\n            &quot;PEM&quot; (default), &quot;DER&quot;,\n            and &quot;ENG&quot;.\n           \n           \n           \n          \n\n          \n           CURLOPT_URL\n           \n            The URL to fetch. This can also be set when initializing a\n            session with curl_init().\n           \n           \n           \n          \n\n          \n           CURLOPT_USERAGENT\n           \n            The contents of the &quot;User-Agent: &quot; header to be\n            used in a HTTP request.\n           \n           \n           \n          \n\n          \n           CURLOPT_USERPWD\n           \n            A username and password formatted as\n            &quot;[username]:[password]&quot; to use for the\n            connection.\n           \n           \n           \n          \n\n         \n        \n       \n\n      \n      \n       value should be an array for the\n       following values of the option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n           Notes\n          \n\n         \n\n         \n          \n           CURLOPT_HTTP200ALIASES\n           \n            An array of HTTP 200 responses that will be treated as valid\n            responses and not as errors.\n           \n           \n            Added in cURL 7.10.3.\n           \n          \n\n          \n           CURLOPT_HTTPHEADER\n           \n            An array of HTTP header fields to set, in the format\n            \n             array(&#039;Content-type: text\/plain&#039;, &#039;Content-length: 100&#039;)\n            \n           \n           \n           \n          \n\n          \n           CURLOPT_POSTQUOTE\n           \n            An array of FTP commands to execute on the server after the FTP\n            request has been performed.\n           \n           \n           \n          \n\n          \n           CURLOPT_QUOTE\n           \n            An array of FTP commands to execute on the server prior to the FTP\n            request.\n           \n           \n           \n          \n\n         \n        \n       \n\n      \n      \n       value should be a stream resource (using\n       fopen(), for example) for the following values of the\n       option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n          \n\n         \n\n         \n          \n           CURLOPT_FILE\n           \n            The file that the transfer should be written to. The default\n            is STDOUT (the browser window).\n           \n          \n\n          \n           CURLOPT_INFILE\n           \n            The file that the transfer should be read from when uploading.\n           \n          \n\n          \n           CURLOPT_STDERR\n           \n            An alternative location to output errors to instead of\n            STDERR.\n           \n          \n\n          \n           CURLOPT_WRITEHEADER\n           \n            The file that the header part of the transfer is written to.\n           \n          \n\n         \n        \n       \n\n      \n      \n       value should be a string that is the name of a valid\n       callback function for the following values of the\n       option parameter:\n       \n        \n         \n          \n           Option\n           Set value to\n          \n\n         \n\n         \n          \n           CURLOPT_HEADERFUNCTION\n           \n            The name of a callback function where the callback function takes\n            two parameters. The first is the cURL resource, the second is a\n            string with the header data to be written. The header data must\n            be written when using this callback function. Return the number of \n            bytes written.\n           \n          \n\n          \n           CURLOPT_PASSWDFUNCTION\n           \n            The name of a callback function where the callback function takes\n            three parameters. The first is the cURL resource, the second is a\n            string containing a password prompt, and the third is the maximum\n            password length. Return the string containing the password.\n           \n          \n\n          \n           CURLOPT_PROGRESSFUNCTION\n           \n            The name of a callback function where the callback function takes\n            three parameters. The first is the cURL resource, the second is a\n            file-descriptor resource, and the third is length. Return the\n            string containing the data.\n           \n          \n\n          \n           CURLOPT_READFUNCTION\n           \n            The name of a callback function where the callback function takes\n            three parameters. The first is the cURL resource, the second is a\n            stream resource provided to cURL through the option\n            CURLOPT_INFILE, and the third is the maximum\n            amount of data to be read. The callback function must return a string\n            with a length equal or smaller than the amount of data requested,\n            typically by reading it from the passed stream resource. It should\n            return an empty string to signal EOF.\n           \n          \n\n          \n           CURLOPT_WRITEFUNCTION\n           \n            The name of a callback function where the callback function takes\n            two parameters. The first is the cURL resource, and the second is a\n            string with the data to be written. The data must be saved by using\n            this callback function. It must return the exact number of bytes written \n            or the transfer will be aborted with an error.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.10\n       \n        Introduced CURLOPT_PROTOCOLS, and\n        CURLOPT_REDIR_PROTOCOLS.\n       \n      \n\n      \n       5.1.0\n       \n        Introduced CURLOPT_AUTOREFERER,\n        CURLOPT_BINARYTRANSFER,\n        CURLOPT_FTPSSLAUTH,\n        CURLOPT_PROXYAUTH, and\n        CURLOPT_TIMECONDITION.\n       \n      \n\n      \n       5.0.0\n       \n        Introduced CURLOPT_FTP_USE_EPRT,\n        CURLOPT_NOSIGNAL,\n        CURLOPT_UNRESTRICTED_AUTH,\n        CURLOPT_BUFFERSIZE,\n        CURLOPT_HTTPAUTH,\n        CURLOPT_PROXYPORT,\n        CURLOPT_PROXYTYPE,\n        CURLOPT_SSLCERTTYPE, and\n        CURLOPT_HTTP200ALIASES.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Initializing a new cURL session and fetching a web page\n    \n\n&lt;?php\/\/&nbsp;create&nbsp;a&nbsp;new&nbsp;cURL&nbsp;resource$ch&nbsp;=&nbsp;curl_init();\/\/&nbsp;set&nbsp;URL&nbsp;and&nbsp;other&nbsp;appropriate&nbsp;optionscurl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;\"http:\/\/www.example.com\/\");curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;false);\/\/&nbsp;grab&nbsp;URL&nbsp;and&nbsp;pass&nbsp;it&nbsp;to&nbsp;the&nbsp;browsercurl_exec($ch);\/\/&nbsp;close&nbsp;cURL&nbsp;resource,&nbsp;and&nbsp;free&nbsp;up&nbsp;system&nbsp;resourcescurl_close($ch);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Uploading file\n    \n\n&lt;?php\/*&nbsp;http:\/\/localhost\/upload.php:print_r($_POST);print_r($_FILES);*\/$ch&nbsp;=&nbsp;curl_init();$data&nbsp;=&nbsp;array('name'&nbsp;=&gt;&nbsp;'Foo',&nbsp;'file'&nbsp;=&gt;&nbsp;'@\/home\/user\/test.png');curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;'http:\/\/localhost\/upload.php');curl_setopt($ch,&nbsp;CURLOPT_POST,&nbsp;1);curl_setopt($ch,&nbsp;CURLOPT_POSTFIELDS,&nbsp;$data);curl_exec($ch);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [name] =&gt; Foo\n)\nArray\n(\n    [file] =&gt; Array\n        (\n            [name] =&gt; test.png\n            [type] =&gt; image\/png\n            [tmp_name] =&gt; \/tmp\/phpcpjNeQ\n            [error] =&gt; 0\n            [size] =&gt; 279\n        )\n\n)\n\n\n    \n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    Passing an array to CURLOPT_POSTFIELDS will \n    encode the data as multipart\/form-data,\n    while passing a URL-encoded string will encode the data as\n    application\/x-www-form-urlencoded.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    curl_setopt_array() - Set multiple options for a cURL transfer\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-stat.php","title":"dio_stat","description":"\n \n  dio_stat\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_stat &mdash; \n   Gets stat information about the file descriptor fd\n  \n\n \n \n  Description\n  \n   array dio_stat\n    ( resource $fd\n   )\n\n  \n   dio_stat() returns information about the given file\n   descriptor.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an associative array with the following keys:\n   \n    \n     \n      &quot;device&quot; - device\n     \n    \n    \n     \n      &quot;inode&quot; - inode\n     \n    \n    \n     \n      &quot;mode&quot; - mode\n     \n    \n    \n     \n      &quot;nlink&quot; - number of hard links\n     \n    \n    \n     \n      &quot;uid&quot; - user id\n     \n    \n    \n     \n      &quot;gid&quot; - group id\n     \n    \n    \n     \n      &quot;device_type&quot; - device type (if inode device)\n     \n    \n    \n     \n      &quot;size&quot; - total size in bytes\n     \n    \n    \n     \n      &quot;blocksize&quot; - blocksize\n     \n    \n    \n     \n      &quot;blocks&quot; - number of blocks allocated\n     \n    \n    \n     \n      &quot;atime&quot; - time of last access\n     \n    \n    \n     \n      &quot;mtime&quot; - time of last modification\n     \n    \n    \n     \n      &quot;ctime&quot; - time of last change\n     \n    \n   \n   On error dio_stat() returns NULL.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-seek.php","title":"dio_seek","description":"\n \n  dio_seek\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_seek &mdash; Seeks to pos on fd from whence\n\n \n \n  Description\n  \n   int dio_seek\n    ( resource $fd\n   , int $pos\n   [, int $whence = SEEK_SET\n  ] )\n\n  \n   The function dio_seek() is used to change the\n   file position of the given file descriptor.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     pos\n     \n\n      \n       The new position.\n      \n     \n\n    \n\n    \n\n     whence\n     \n\n      \n       Specifies how the position pos should be \n       interpreted:\n       \n        \n         \n          SEEK_SET (default) - specifies that \n          pos is specified from the beginning of the \n          file.\n         \n        \n        \n         \n          SEEK_CUR - Specifies that \n          pos is a count of characters from the current\n          file position. This count may be positive or negative.\n         \n        \n        \n         \n          SEEK_END - Specifies that \n          pos is a count of characters from the end of\n          the file. A negative count specifies a position within the current \n          extent of the file; a positive count specifies a position past the \n          current end. If you set the position past the current end, and \n          actually write data, you will extend the file with zeros up to that\n          position.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n  \n \n\n \n  Examples\n  \n   \n    Example #1 Positioning in a file\n    \n\n&lt;?php$fd&nbsp;=&nbsp;dio_open('\/dev\/ttyS0',&nbsp;O_RDWR);dio_seek($fd,&nbsp;10,&nbsp;SEEK_SET);\/\/&nbsp;position&nbsp;is&nbsp;now&nbsp;at&nbsp;10&nbsp;characters&nbsp;from&nbsp;the&nbsp;start&nbsp;of&nbsp;the&nbsp;filedio_seek($fd,&nbsp;-2,&nbsp;SEEK_CUR);\/\/&nbsp;position&nbsp;is&nbsp;now&nbsp;at&nbsp;8&nbsp;characters&nbsp;from&nbsp;the&nbsp;start&nbsp;of&nbsp;the&nbsp;filedio_seek($fd,&nbsp;-5,&nbsp;SEEK_END);\/\/&nbsp;position&nbsp;is&nbsp;now&nbsp;at&nbsp;5&nbsp;characters&nbsp;from&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;filedio_seek($fd,&nbsp;10,&nbsp;SEEK_END);\/\/&nbsp;position&nbsp;is&nbsp;now&nbsp;at&nbsp;10&nbsp;characters&nbsp;past&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file.&nbsp;\/\/&nbsp;The&nbsp;10&nbsp;characters&nbsp;between&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file&nbsp;and&nbsp;the&nbsp;current\/\/&nbsp;position&nbsp;are&nbsp;filled&nbsp;with&nbsp;zeros.dio_close($fd);?&gt;\n\n\n    \n\n        \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-truncate.php","title":"dio_truncate","description":"\n \n  dio_truncate\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_truncate &mdash; \n   Truncates file descriptor fd to offset bytes \n  \n\n \n \n  Description\n  \n   bool dio_truncate\n    ( resource $fd\n   , int $offset\n   )\n\n  \n   dio_truncate() truncates a file to at most \n   offset bytes in size.\n  \n  \n   If the file previously was larger than this size, the extra data is \n   lost. If the file previously was shorter, it is unspecified whether the\n   file is left unchanged or is extended. In the latter case the extended \n   part reads as zero bytes.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The offset in bytes.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-tcsetattr.php","title":"dio_tcsetattr","description":"\n \n  dio_tcsetattr\n  (PHP 4 &gt;= 4.3.0, PHP 5 &lt;= 5.0.5)dio_tcsetattr &mdash; \n   Sets terminal attributes and baud rate for a serial port\n  \n\n \n \n  Description\n  \n   bool dio_tcsetattr\n    ( resource $fd\n   , array $options\n   )\n\n  \n   dio_tcsetattr() sets the terminal attributes and baud\n   rate of the open fd.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The currently available options are: \n       \n        \n         \n          &#039;baud&#039; - baud rate of the port - can be 38400,19200,9600,4800,2400,1800,\n          1200,600,300,200,150,134,110,75 or 50, default value is 9600.\n         \n        \n        \n         \n          &#039;bits&#039; - data bits - can be 8,7,6 or 5. Default value is 8.\n         \n        \n        \n         \n          &#039;stop&#039; - stop bits - can be 1 or 2. Default value is 1.\n         \n        \n        \n         \n          &#039;parity&#039; - can be 0,1 or 2. Default value is 0.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Setting the baud rate on a serial port\n    \n\n&lt;?php$fd&nbsp;=&nbsp;dio_open('\/dev\/ttyS0',&nbsp;O_RDWR&nbsp;|&nbsp;O_NOCTTY&nbsp;|&nbsp;O_NONBLOCK);dio_fcntl($fd,&nbsp;F_SETFL,&nbsp;O_SYNC);dio_tcsetattr($fd,&nbsp;array(&nbsp;&nbsp;'baud'&nbsp;=&gt;&nbsp;9600,&nbsp;&nbsp;'bits'&nbsp;=&gt;&nbsp;8,&nbsp;&nbsp;'stop'&nbsp;&nbsp;=&gt;&nbsp;1,&nbsp;&nbsp;'parity'&nbsp;=&gt;&nbsp;0));&nbsp;while&nbsp;(1)&nbsp;{&nbsp;&nbsp;$data&nbsp;=&nbsp;dio_read($fd,&nbsp;256);&nbsp;&nbsp;if&nbsp;($data)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$data;&nbsp;&nbsp;}}&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dio-write.php","title":"dio_write","description":"\n \n  dio_write\n  (PHP 4 &gt;= 4.2.0, PHP 5 &lt;= 5.0.5)dio_write &mdash; \n   Writes data to fd with optional truncation at length \n  \n\n \n \n  Description\n  \n   int dio_write\n    ( resource $fd\n   , string $data\n   [, int $len = 0\n  ] )\n\n  \n   dio_write() writes up to len \n   bytes from data to file fd. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor returned by dio_open().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The written data.\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       The length of data to write in bytes. If not specified, the \n       function writes all the data to the specified file.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of bytes written to fd.\n  \n \n\n \n  See Also\n  \n   \n    dio_read() - Reads bytes from a file descriptor\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chdir.php","title":"chdir","description":"\n \n  chdir\n  (PHP 4, PHP 5)chdir &mdash; Change directory\n\n \n\n \n  Description\n  \n   bool chdir\n    ( string $directory\n   )\n\n  \n   Changes PHP&#039;s current directory to \n   directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     directory\n     \n\n      \n       The new current directory\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws an error of level E_WARNING on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 chdir() example\n    \n\n&lt;?php\/\/&nbsp;current&nbsp;directoryecho&nbsp;getcwd()&nbsp;.&nbsp;\"\\n\";chdir('public_html');\/\/&nbsp;current&nbsp;directoryecho&nbsp;getcwd()&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n\/home\/vincent\n\/home\/vincent\/public_html\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: When safe mode is enabled, PHP checks whether\nthe directory in which the script is operating has the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    getcwd() - Gets the current working directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chroot.php","title":"chroot","description":"\n \n  chroot\n  (PHP 4 &gt;= 4.0.5, PHP 5)chroot &mdash; Change the root directory\n\n \n\n \n  Description\n  \n   bool chroot\n    ( string $directory\n   )\n\n  \n   Changes the root directory of the current process to\n   directory, and changes the current\n   working directory to &quot;\/&quot;.\n  \n  \n   This function is only available to GNU and BSD systems, and\n   only when using the CLI, CGI or Embed SAPI. Also, this function\n   requires root privileges.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     directory\n     \n\n      \n       The path to change the root directory to.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   \n \n\n\n \n  Examples\n  \n   Example #1 chroot() example\n    \n\n&lt;?phpchroot(\"\/path\/to\/your\/chroot\/\");echo&nbsp;getcwd();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\/\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.closedir.php","title":"closedir","description":"\n \n  closedir\n  (PHP 4, PHP 5)closedir &mdash; Close directory handle\n\n \n\n \n  Description\n  \n   void closedir\n    ([ resource $dir_handle\n  ] )\n\n  \n   Closes the directory stream indicated by\n   dir_handle. The stream must have previously\n   been opened by opendir().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dir_handle\n     \n\n      \n       The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 closedir() example\n    \n\n&lt;?php$dir&nbsp;=&nbsp;\"\/etc\/php5\/\";\/\/&nbsp;Open&nbsp;a&nbsp;known&nbsp;directory,&nbsp;read&nbsp;directory&nbsp;into&nbsp;variable&nbsp;and&nbsp;then&nbsp;closeif&nbsp;(is_dir($dir))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($dh&nbsp;=&nbsp;opendir($dir))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$directory&nbsp;=&nbsp;readdir($dh);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closedir($dh);&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rewinddir.php","title":"rewinddir","description":"\n \n  rewinddir\n  (PHP 4, PHP 5)rewinddir &mdash; Rewind directory handle\n\n \n\n \n  Description\n  \n   void rewinddir\n    ([ resource $dir_handle\n  ] )\n\n  \n   Resets the directory stream indicated by\n   dir_handle to the beginning of the\n   directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dir_handle\n     \n\n      \n       The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getcwd.php","title":"getcwd","description":"\n \n  getcwd\n  (PHP 4, PHP 5)getcwd &mdash; Gets the current working directory\n\n \n\n \n  Description\n  \n   string getcwd\n    ( void\n   )\n\n  \n   Gets the current working directory.\n  \n \n\n\n \n  Return Values\n  \n   Returns the current working directory on success, or FALSE on\n   failure.\n   \n  \n   On some Unix variants, getcwd() will return\n   FALSE if any one of the parent directories does not have the\n   readable or search mode set, even if the current directory\n   does. See chmod() for more information on\n   modes and permissions.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 getcwd() example\n     \n\n&lt;?php\/\/&nbsp;current&nbsp;directoryecho&nbsp;getcwd()&nbsp;.&nbsp;\"\\n\";chdir('cvs');\/\/&nbsp;current&nbsp;directoryecho&nbsp;getcwd()&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n     \n\n     The above example will output\nsomething similar to:\n     \n\n\/home\/didou\n\/home\/didou\/cvs\n\n     \n   \n  \n \n\n\n \n  See Also\n  \n   \n    chdir() - Change directory\n    chmod() - Changes file mode\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readdir.php","title":"readdir","description":"\n \n  readdir\n  (PHP 4, PHP 5)readdir &mdash; Read entry from directory handle\n\n \n\n \n  Description\n  \n   string readdir\n    ([ resource $dir_handle\n  ] )\n\n  \n   Returns the name of the next entry in the directory. The\n   entries are returned in the order in which they are stored by\n   the filesystem.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dir_handle\n     \n\n      \n       The directory handle resource previously opened\n       with opendir(). If the directory handle is \n       not specified, the last link opened by opendir() \n       is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the entry name on success or FALSE on failure.\n   \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 List all entries in a directory\n    \n     Please note the fashion in which readdir()&#039;s\n     return value is checked in the examples below. We are explicitly\n     testing whether the return value is identical to (equal to and of\n     the same type as--see Comparison\n     Operators for more information) FALSE since otherwise,\n     any directory entry whose name evaluates to FALSE will stop the\n     loop (e.g. a directory named &quot;0&quot;).\n    \n    \n\n&lt;?phpif&nbsp;($handle&nbsp;=&nbsp;opendir('\/path\/to\/files'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Directory&nbsp;handle:&nbsp;$handle\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Entries:\\n\";&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;This&nbsp;is&nbsp;the&nbsp;correct&nbsp;way&nbsp;to&nbsp;loop&nbsp;over&nbsp;the&nbsp;directory.&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(false&nbsp;!==&nbsp;($entry&nbsp;=&nbsp;readdir($handle)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$entry\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;This&nbsp;is&nbsp;the&nbsp;WRONG&nbsp;way&nbsp;to&nbsp;loop&nbsp;over&nbsp;the&nbsp;directory.&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;($entry&nbsp;=&nbsp;readdir($handle))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$entry\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;closedir($handle);}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 \n     List all entries in the current directory and strip out .\n     and ..\n    \n    \n\n&lt;?phpif&nbsp;($handle&nbsp;=&nbsp;opendir('.'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(false&nbsp;!==&nbsp;($entry&nbsp;=&nbsp;readdir($handle)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($entry&nbsp;!=&nbsp;\".\"&nbsp;&amp;&amp;&nbsp;$entry&nbsp;!=&nbsp;\"..\")&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$entry\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;closedir($handle);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    glob() - Find pathnames matching a pattern\n    opendir() - Open directory handle\n    scandir() - List files and directories inside the specified path\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dotnet-load.php","title":"dotnet_load","description":"\n \n  dotnet_load\n  (PHP 4)dotnet_load &mdash; Loads a DOTNET module\n\n \n \n  Description\n  \n   int dotnet_load\n    ( string $assembly_name\n   [, string $datatype_name\n   [, int $codepage\n  ]] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The codepage parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.opendir.php","title":"opendir","description":"\n \n  opendir\n  (PHP 4, PHP 5)opendir &mdash; Open directory handle\n\n \n\n \n  Description\n  \n   resource opendir\n    ( string $path\n   [, resource $context\n  ] )\n\n  \n   Opens up a directory handle to be used in subsequent\n   closedir(), readdir(), and\n   rewinddir() calls.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       The directory path that is to be opened\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       For a description of the context parameter, \n       refer to the streams section of\n       the manual.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a directory handle resource on success, or\n   FALSE on failure.\n   \n  \n   If path is not a valid directory or the\n   directory can not be opened due to permission restrictions or\n   filesystem errors, opendir() returns FALSE and\n   generates a PHP error of level \n   E_WARNING.  You can suppress the error output of\n   opendir() by prepending\n   &#039;@&#039; to the\n   front of the function name.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        path supports the ftp:\/\/ \n        URL wrapper.\n       \n      \n\n      \n       4.3.0\n       \n        path can also be any URL which supports \n        directory listing, however only the file:\/\/\n        URL wrapper supports this in PHP 4\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 opendir() example\n    \n\n&lt;?php$dir&nbsp;=&nbsp;\"\/etc\/php5\/\";\/\/&nbsp;Open&nbsp;a&nbsp;known&nbsp;directory,&nbsp;and&nbsp;proceed&nbsp;to&nbsp;read&nbsp;its&nbsp;contentsif&nbsp;(is_dir($dir))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($dh&nbsp;=&nbsp;opendir($dir))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(($file&nbsp;=&nbsp;readdir($dh))&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"filename:&nbsp;$file&nbsp;:&nbsp;filetype:&nbsp;\"&nbsp;.&nbsp;filetype($dir&nbsp;.&nbsp;$file)&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closedir($dh);&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nfilename: . : filetype: dir\nfilename: .. : filetype: dir\nfilename: apache : filetype: dir\nfilename: cgi : filetype: dir\nfilename: cli : filetype: dir\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    readdir() - Read entry from directory handle\n    Dir\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.scandir.php","title":"scandir","description":"\n \n  scandir\n  (PHP 5)scandir &mdash; List files and directories inside the specified path\n\n \n\n \n  Description\n  \n   array scandir\n    ( string $directory\n   [, int $sorting_order = SCANDIR_SORT_ASCENDING\n   [, resource $context\n  ]] )\n\n  \n   Returns an array of files and directories from the\n   directory.\n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     directory\n     \n\n      \n       The directory that will be scanned.\n      \n     \n\n    \n\n    \n\n     sorting_order\n     \n\n      \n       By default, the sorted order is alphabetical in ascending order.  If\n       the optional sorting_order is set to\n       SCANDIR_SORT_DESCENDING, then the sort order is\n       alphabetical in descending order. If it is set to\n       SCANDIR_SORT_NONE then the result is unsorted.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       For a description of the context parameter, \n       refer to the streams section of\n       the manual.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of filenames on success, or FALSE on \n   failure. If directory is not a directory, then \n   boolean FALSE is returned, and an error of level \n   E_WARNING is generated.\n   \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        sorting_order now accepts constants. Any\n        nonzero value caused descending order in previous versions.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple scandir() example\n    \n\n&lt;?php$dir&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'\/tmp';$files1&nbsp;=&nbsp;scandir($dir);$files2&nbsp;=&nbsp;scandir($dir,&nbsp;1);print_r($files1);print_r($files2);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; .\n    [1] =&gt; ..\n    [2] =&gt; bar.php\n    [3] =&gt; foo.txt\n    [4] =&gt; somedir\n)\nArray\n(\n    [0] =&gt; somedir\n    [1] =&gt; foo.txt\n    [2] =&gt; bar.php\n    [3] =&gt; ..\n    [4] =&gt; .\n)\n\n    \n   \n  \n  \n   \n    Example #2 PHP 4 alternatives to scandir()\n    \n\n&lt;?php$dir&nbsp;=&nbsp;\"\/tmp\";$dh&nbsp;&nbsp;=&nbsp;opendir($dir);while&nbsp;(false&nbsp;!==&nbsp;($filename&nbsp;=&nbsp;readdir($dh)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$files[]&nbsp;=&nbsp;$filename;}sort($files);print_r($files);rsort($files);print_r($files);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; .\n    [1] =&gt; ..\n    [2] =&gt; bar.php\n    [3] =&gt; foo.txt\n    [4] =&gt; somedir\n)\nArray\n(\n    [0] =&gt; somedir\n    [1] =&gt; foo.txt\n    [2] =&gt; bar.php\n    [3] =&gt; ..\n    [4] =&gt; .\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  TipA URL can be used as a\nfilename with this function if the fopen wrappers have been enabled.\nSee fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage,\nand information on any predefined variables they may\nprovide.\n \n\n\n \n  See Also\n  \n   \n    opendir() - Open directory handle\n    readdir() - Read entry from directory handle\n    glob() - Find pathnames matching a pattern\n    is_dir() - Tells whether the filename is a directory\n    sort() - Sort an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-print-backtrace.php","title":"debug_print_backtrace","description":"\n   \n    debug_print_backtrace\n    (PHP 5)debug_print_backtrace &mdash; \n     Prints a backtrace\n    \n\n   \n  \n   \n    Description\n    \n     void debug_print_backtrace\n      ([ int $options = 0\n     [, int $limit = 0\n    ]] )\n\n    \n     debug_print_backtrace() prints a PHP backtrace. It\n     prints the function calls, included\/required files and\n     eval()ed stuff.\n    \n   \n\n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       As of 5.3.6, this parameter is a bitmask for the following options:\n       \n        debug_print_backtrace() options\n        \n         \n          \n           DEBUG_BACKTRACE_IGNORE_ARGS\n           \n            Whether or not to omit the &quot;args&quot; index, and thus all the function\/method arguments,\n            to save memory.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       As of 5.4.0, this parameter can be used to limit the number of stack frames printed.\n       By default (limit=0) it prints all stack frames.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n   \n    Return Values\n    \n     No value is returned.\n    \n   \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        Added the optional parameter limit.\n       \n      \n\n      \n       5.3.6\n       \n        Added the optional parameter options.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n   \n    Examples\n    \n     \n      Example #1 debug_print_backtrace() example\n      \n\n&lt;?php\/\/&nbsp;include.php&nbsp;filefunction&nbsp;a()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;b();}function&nbsp;b()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;c();}function&nbsp;c(){&nbsp;&nbsp;&nbsp;&nbsp;debug_print_backtrace();}a();?&gt;\n\n\n      \n\n      \n\n&lt;?php\/\/&nbsp;test.php&nbsp;file\/\/&nbsp;this&nbsp;is&nbsp;the&nbsp;file&nbsp;you&nbsp;should&nbsp;runinclude&nbsp;'include.php';?&gt;\n\n\n     \n\n     The above example will output\nsomething similar to:\n     \n\n#0  c() called at [\/tmp\/include.php:10]\n#1  b() called at [\/tmp\/include.php:6]\n#2  a() called at [\/tmp\/include.php:17]\n#3  include(\/tmp\/include.php) called at [\/tmp\/test.php:3]\n\n     \n    \n   \n  \n\n\n  \n   See Also\n   \n    \n     debug_backtrace() - Generates a backtrace\n    \n   \n  \n\n "},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-get-last.php","title":"error_get_last","description":"\n \n  error_get_last\n  (PHP 5 &gt;= 5.2.0)error_get_last &mdash; Get the last occurred error\n\n \n \n  Description\n  \n   array error_get_last\n    ( void\n   )\n\n  \n   Gets information about the last error that occurred.\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array describing the last error with keys &quot;type&quot;,\n   &quot;message&quot;, &quot;file&quot; and &quot;line&quot;. If the error has been caused by a PHP\n   internal function then the &quot;message&quot; begins with its name.\n   Returns NULL if there hasn&#039;t been an error yet.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 An error_get_last() example\n    \n\n&lt;?phpecho&nbsp;$a;print_r(error_get_last());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [type] =&gt; 8\n    [message] =&gt; Undefined variable: a\n    [file] =&gt; C:\\WWW\\index.php\n    [line] =&gt; 2\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    Error constants\n    Variable $php_errormsg\n    Directive display_errors\n    Directive html_errors\n    Directive xmlrpc_errors\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-backtrace.php","title":"debug_backtrace","description":"\n \n  debug_backtrace\n  (PHP 4 &gt;= 4.3.0, PHP 5)debug_backtrace &mdash; Generates a backtrace\n\n \n \n \n  Description\n  \n   array debug_backtrace\n    ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT\n   [, int $limit = 0\n  ]] )\n\n  \n   debug_backtrace() generates a PHP backtrace.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       As of 5.3.6, this parameter is a bitmask for the following options:\n       \n        debug_backtrace() options\n        \n         \n          \n           DEBUG_BACKTRACE_PROVIDE_OBJECT\n           \n            Whether or not to populate the &quot;object&quot; index.\n           \n          \n\n          \n           DEBUG_BACKTRACE_IGNORE_ARGS\n           \n            Whether or not to omit the &quot;args&quot; index, and thus all the function\/method arguments,\n            to save memory.\n           \n          \n\n         \n        \n       \n\n       Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as \n       setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       As of 5.4.0, this parameter can be used to limit the number of stack frames returned.\n       By default (limit=0) it returns all stack frames.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an array of associative arrays. The possible returned elements\n   are as follows:\n  \n  \n   \n    Possible returned elements from debug_backtrace()\n    \n     \n      \n       Name\n       Type\n       Description\n      \n\n     \n\n     \n      \n       function\n       string\n       \n        The current function name.  See also\n        __FUNCTION__.\n       \n      \n\n      \n       line\n       integer\n       \n        The current line number.  See also\n        __LINE__.\n       \n      \n\n      \n       file\n       string\n       \n        The current file name.  See also\n        __FILE__.\n       \n      \n\n      \n       class\n       string\n       \n        The current class name.  See also\n        __CLASS__\n       \n      \n\n      \n       object\n       object\n       \n        The current object.\n       \n      \n\n      \n       type\n       string\n       \n        The current call type. If a method call, &quot;-&gt;&quot; is returned. If a static\n        method call, &quot;::&quot; is returned. If a function call, nothing is returned.\n       \n      \n\n      \n       args\n       array\n       \n        If inside a function, this lists the functions arguments.  If\n        inside an included file, this lists the included file name(s).\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        Added the optional parameter limit.\n       \n      \n\n      \n       5.3.6\n       \n        The parameter provide_object changed to options and additional option\n        DEBUG_BACKTRACE_IGNORE_ARGS is added.\n       \n      \n\n      \n       5.2.5\n       \n        Added the optional parameter provide_object.\n       \n      \n\n      \n       5.1.1\n       \n        Added the current object as a possible return element.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 debug_backtrace() example\n    \n\n&lt;?php\/\/&nbsp;filename:&nbsp;\/tmp\/a.phpfunction&nbsp;a_test($str){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\nHi:&nbsp;$str\";&nbsp;&nbsp;&nbsp;&nbsp;var_dump(debug_backtrace());}a_test('friend');?&gt;&lt;?php\/\/&nbsp;filename:&nbsp;\/tmp\/b.phpinclude_once&nbsp;'\/tmp\/a.php';?&gt;\n\n\n    \n\n    \n     Results similar to the following when executing\n     \/tmp\/b.php:\n    \n    \n\nHi: friend\narray(2) {\n[0]=&gt;\narray(4) {\n    [&quot;file&quot;] =&gt; string(10) &quot;\/tmp\/a.php&quot;\n    [&quot;line&quot;] =&gt; int(10)\n    [&quot;function&quot;] =&gt; string(6) &quot;a_test&quot;\n    [&quot;args&quot;]=&gt;\n    array(1) {\n      [0] =&gt; &amp;string(6) &quot;friend&quot;\n    }\n}\n[1]=&gt;\narray(4) {\n    [&quot;file&quot;] =&gt; string(10) &quot;\/tmp\/b.php&quot;\n    [&quot;line&quot;] =&gt; int(2)\n    [&quot;args&quot;] =&gt;\n    array(1) {\n      [0] =&gt; string(10) &quot;\/tmp\/a.php&quot;\n    }\n    [&quot;function&quot;] =&gt; string(12) &quot;include_once&quot;\n  }\n}\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    trigger_error() - Generates a user-level error\/warning\/notice message\n    debug_print_backtrace() - Prints a backtrace\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-log.php","title":"error_log","description":"\n \n  error_log\n  (PHP 4, PHP 5)error_log &mdash; Send an error message somewhere\n\n \n\n \n  Description\n  \n   bool error_log\n    ( string $message\n   [, int $message_type = 0\n   [, string $destination\n   [, string $extra_headers\n  ]]] )\n\n  \n   Sends an error message to the web server&#039;s error log or to a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     message\n     \n\n      \n       The error message that should be logged.\n      \n     \n\n    \n\n    \n\n     message_type\n     \n\n      \n       Says where the error should go. The possible message types are as \n       follows:\n      \n      \n       \n        error_log() log types\n        \n         \n          \n           0\n           \n            message is sent to PHP&#039;s system logger, using\n            the Operating System&#039;s system logging mechanism or a file, depending\n            on what the error_log\n            configuration directive is set to.  This is the default option.\n           \n          \n\n          \n           1\n           \n            message is sent by email to the address in\n            the destination parameter.  This is the only\n            message type where the fourth parameter,\n            extra_headers is used.\n           \n          \n\n          \n           2\n           \n            No longer an option.\n           \n          \n\n          \n           3\n           \n            message is appended to the file\n            destination. A newline is not automatically \n            added to the end of the message string.\n           \n          \n\n          \n           4\n           \n           message is sent directly to the SAPI logging\n           handler.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     destination\n     \n\n      \n       The destination. Its meaning depends on the \n       message_type parameter as described above.\n      \n     \n\n    \n\n    \n\n     extra_headers\n     \n\n      \n       The extra headers. It&#039;s used when the message_type\n       parameter is set to 1.\n       This message type uses the same internal function as \n       mail() does.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n     \n       5.2.7\n       \n        The possible value of 4 was added to message_type.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 error_log() examples\n    \n\n&lt;?php\/\/&nbsp;Send&nbsp;notification&nbsp;through&nbsp;the&nbsp;server&nbsp;log&nbsp;if&nbsp;we&nbsp;can&nbsp;not\/\/&nbsp;connect&nbsp;to&nbsp;the&nbsp;database.if&nbsp;(!Ora_Logon($username,&nbsp;$password))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;error_log(\"Oracle&nbsp;database&nbsp;not&nbsp;available!\",&nbsp;0);}\/\/&nbsp;Notify&nbsp;administrator&nbsp;by&nbsp;email&nbsp;if&nbsp;we&nbsp;run&nbsp;out&nbsp;of&nbsp;FOOif&nbsp;(!($foo&nbsp;=&nbsp;allocate_new_foo()))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;error_log(\"Big&nbsp;trouble,&nbsp;we're&nbsp;all&nbsp;out&nbsp;of&nbsp;FOOs!\",&nbsp;1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"operator@example.com\");}\/\/&nbsp;another&nbsp;way&nbsp;to&nbsp;call&nbsp;error_log():error_log(\"You&nbsp;messed&nbsp;up!\",&nbsp;3,&nbsp;\"\/var\/tmp\/my-errors.log\");?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.restore-error-handler.php","title":"restore_error_handler","description":"\n \n  restore_error_handler\n  (PHP 4 &gt;= 4.0.1, PHP 5)restore_error_handler &mdash; Restores the previous error handler function\n\n \n\n \n  Description\n  \n   bool restore_error_handler\n    ( void\n   )\n\n  \n   Used after changing the error handler function using\n   set_error_handler(), to revert to the previous error\n   handler (which could be the built-in or a user defined function). \n  \n \n\n\n \n  Return Values\n  \n   This function always returns TRUE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 restore_error_handler() example\n    \n     Decide if unserialize() caused an error, then\n     restore the original error handler.\n    \n    \n\n&lt;?phpfunction&nbsp;unserialize_handler($errno,&nbsp;$errstr){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Invalid&nbsp;serialized&nbsp;value.\\n\";}$serialized&nbsp;=&nbsp;'foo';set_error_handler('unserialize_handler');$original&nbsp;=&nbsp;unserialize($serialized);restore_error_handler();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nInvalid serialized value.\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Calling restore_error_handler() from the\n    error_handler function is ignored.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    error_reporting() - Sets which PHP errors are reported\n    set_error_handler() - Sets a user-defined error handler function\n    restore_exception_handler() - Restores the previously defined exception handler function\n    trigger_error() - Generates a user-level error\/warning\/notice message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.error-reporting.php","title":"error_reporting","description":"\n \n  error_reporting\n  (PHP 4, PHP 5)error_reporting &mdash; Sets which PHP errors are reported\n\n \n\n \n  Description\n  \n   int error_reporting\n    ([ int $level\n  ] )\n\n  \n   The error_reporting() function sets the\n   error_reporting\n   directive at runtime.  PHP has many levels of errors, using\n   this function sets that level for the duration (runtime) of\n   your script. If the optional level is\n   not set, error_reporting() will just return\n   the current error reporting level.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     level\n     \n\n      \n       The new error_reporting\n       level. It takes on either a bitmask, or named constants. Using named \n       constants is strongly encouraged to ensure compatibility for future \n       versions. As error levels are added, the range of integers increases, \n       so older integer-based error levels will not always behave as expected.\n      \n      \n       The available error level constants and the actual\n       meanings of these error levels are described in the\n       predefined constants.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the old error_reporting\n   level or the current level if no level parameter is\n   given.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       E_STRICT became part of E_ALL.\n      \n\n      \n       5.3.0\n       E_DEPRECATED and E_USER_DEPRECATED introduced.\n      \n\n      \n       5.2.0\n       E_RECOVERABLE_ERROR introduced.\n      \n\n      \n       5.0.0\n       E_STRICT introduced (not part of E_ALL).\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 error_reporting() examples\n    \n\n&lt;?php\/\/&nbsp;Turn&nbsp;off&nbsp;all&nbsp;error&nbsp;reportingerror_reporting(0);\/\/&nbsp;Report&nbsp;simple&nbsp;running&nbsp;errorserror_reporting(E_ERROR&nbsp;|&nbsp;E_WARNING&nbsp;|&nbsp;E_PARSE);\/\/&nbsp;Reporting&nbsp;E_NOTICE&nbsp;can&nbsp;be&nbsp;good&nbsp;too&nbsp;(to&nbsp;report&nbsp;uninitialized\/\/&nbsp;variables&nbsp;or&nbsp;catch&nbsp;variable&nbsp;name&nbsp;misspellings&nbsp;...)error_reporting(E_ERROR&nbsp;|&nbsp;E_WARNING&nbsp;|&nbsp;E_PARSE&nbsp;|&nbsp;E_NOTICE);\/\/&nbsp;Report&nbsp;all&nbsp;errors&nbsp;except&nbsp;E_NOTICE\/\/&nbsp;This&nbsp;is&nbsp;the&nbsp;default&nbsp;value&nbsp;set&nbsp;in&nbsp;php.inierror_reporting(E_ALL&nbsp;^&nbsp;E_NOTICE);\/\/&nbsp;Report&nbsp;all&nbsp;PHP&nbsp;errors&nbsp;(see&nbsp;changelog)error_reporting(E_ALL);\/\/&nbsp;Report&nbsp;all&nbsp;PHP&nbsp;errorserror_reporting(-1);\/\/&nbsp;Same&nbsp;as&nbsp;error_reporting(E_ALL);ini_set('error_reporting',&nbsp;E_ALL);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    Most of E_STRICT errors are evaluated at the\n    compile time thus such errors are not reported in the file where\n    error_reporting is enhanced\n    to include E_STRICT errors (and vice versa).\n   \n  \n  Tip\n   \n    Passing in the value -1 will show every possible error,\n    even when new levels and constants are added in future PHP versions. The\n    E_ALL constant also behaves this way as of PHP 5.4.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    The display_errors directive\n    The html_errors directive\n    The xmlrpc_errors directive\n    ini_set() - Sets the value of a configuration option\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.restore-exception-handler.php","title":"restore_exception_handler","description":"\n \n  restore_exception_handler\n  (PHP 5)restore_exception_handler &mdash; \n   Restores the previously defined exception handler function\n  \n\n \n\n \n  Description\n  \n   bool restore_exception_handler\n    ( void\n   )\n\n  \n   Used after changing the exception handler function using\n   set_exception_handler(), to revert to the previous\n   exception handler (which could be the built-in or a user defined\n   function).\n  \n \n\n\n \n  Return Values\n  \n   This function always returns TRUE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 restore_exception_handler() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;exception_handler_1(Exception&nbsp;$e)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'['&nbsp;.&nbsp;__FUNCTION__&nbsp;.&nbsp;']&nbsp;'&nbsp;.&nbsp;$e-&gt;getMessage();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;exception_handler_2(Exception&nbsp;$e)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'['&nbsp;.&nbsp;__FUNCTION__&nbsp;.&nbsp;']&nbsp;'&nbsp;.&nbsp;$e-&gt;getMessage();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;set_exception_handler('exception_handler_1');&nbsp;&nbsp;&nbsp;&nbsp;set_exception_handler('exception_handler_2');&nbsp;&nbsp;&nbsp;&nbsp;restore_exception_handler();&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Exception('This&nbsp;triggers&nbsp;the&nbsp;first&nbsp;exception&nbsp;handler...');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n[exception_handler_1] This triggers the first exception handler...\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    set_exception_handler() - Sets a user-defined exception handler function\n    set_error_handler() - Sets a user-defined error handler function\n    restore_error_handler() - Restores the previous error handler function\n    error_reporting() - Sets which PHP errors are reported\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.user-error.php","title":"user_error","description":"\n \n  user_error\n  (PHP 4, PHP 5)user_error &mdash; Alias of trigger_error()\n\n \n\n \n  Description\n  \n   This function is an alias of:  trigger_error().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-error-handler.php","title":"set_error_handler","description":"\n \n  set_error_handler\n  (PHP 4 &gt;= 4.0.1, PHP 5)set_error_handler &mdash; Sets a user-defined error handler function\n\n \n\n \n  Description\n  \n   mixed set_error_handler\n    ( callback $error_handler\n   [, int $error_types = E_ALL | E_STRICT\n  ] )\n\n  \n   Sets a user function (error_handler) to handle\n   errors in a script.\n  \n  \n   This function can be used for defining your own way of handling errors\n   during runtime, for example in applications in which you need to do\n   cleanup of data\/files when a critical error happens, or when you need\n   to trigger an error under certain conditions (using\n   trigger_error()).\n  \n  \n   It is important to remember that the standard PHP error handler is completely\n   bypassed for the error types specified by error_types \n   unless the callback function returns FALSE.\n   error_reporting() settings will have no effect and your\n   error handler will be called regardless - however you are still able to read \n   the current value of \n   error_reporting and act\n   appropriately. Of particular note is that this value will be 0 if the\n   statement that caused the error was prepended by the\n   @ error-control\n   operator.\n  \n  \n   Also note that it is your responsibility to die() if\n   necessary. If the error-handler function returns, script execution\n   will continue with the next statement after the one that caused an error.\n  \n  \n   The following error types cannot be handled with a user defined\n   function: E_ERROR, E_PARSE,\n   E_CORE_ERROR, E_CORE_WARNING,\n   E_COMPILE_ERROR,\n   E_COMPILE_WARNING, and\n   most of E_STRICT raised in the file where\n   set_error_handler() is called.\n  \n  \n   If errors occur before the script is executed (e.g. on file uploads) the \n   custom error handler cannot be called since it is not registered at that \n   time.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     error_handler\n     \n\n      \n       The user function needs to accept two parameters: the error code, and a\n       string describing the error. Then there are three optional parameters \n       that may be supplied: the filename in which the error occurred, the\n       line number in which the error occurred, and the context in which the\n       error occurred (an array that points to the active symbol table at the\n       point the error occurred).  The function can be shown as:\n      \n      \n       \n         handler\n         ( int $errno\n        , string $errstr\n        [, string $errfile\n        [, int $errline\n        [, array $errcontext\n       ]]] )\n\n       \n\n        \n\n         errno\n         \n\n          \n           The first parameter, errno, contains the\n           level of the error raised, as an integer.\n          \n         \n\n        \n\n        \n\n         errstr\n         \n\n          \n           The second parameter, errstr, contains the\n           error message, as a string.\n          \n         \n\n        \n\n        \n\n         errfile\n         \n\n          \n           The third parameter is optional, errfile,\n           which contains the filename that the error was raised in, as a string.\n          \n         \n\n        \n\n        \n\n         errline\n         \n\n          \n           The fourth parameter is optional, errline,\n           which contains the line number the error was raised at, as an integer.\n          \n         \n\n        \n\n        \n\n         errcontext\n         \n\n          \n           The fifth parameter is optional, errcontext,\n           which is an array that points to the active symbol table at the point\n           the error occurred.  In other words, errcontext\n           will contain an array of every variable that existed in the scope the\n           error was triggered in.\n           User error handler must not modify error context.\n          \n         \n\n        \n\n       \n\n      \n      \n       If the function returns FALSE then the normal error handler continues.\n      \n     \n\n    \n\n    \n\n     error_types\n     \n\n      \n       Can be used to mask the triggering of the\n       error_handler function just like the error_reporting ini setting \n       controls which errors are shown. Without this mask set the\n       error_handler will be called for every error\n       regardless to the setting of the error_reporting setting.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the previously defined error handler (if any). If\n   the built-in error handler is used NULL is returned. NULL is also returned\n   in case of an error such as an invalid callback. If the previous error handler\n   was a class method, this function will return an indexed array with the class\n   and the method name.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        The error handler must return FALSE to populate\n        $php_errormsg.\n       \n      \n\n      \n       5.0.0\n       \n        The error_types parameter was introduced.\n       \n      \n\n      \n       4.3.0\n       \n        Instead of a function name, an array containing an object reference \n        and a method name can also be supplied as the\n        error_handler.\n       \n      \n\n      \n       4.0.2\n       \n        Three optional parameters for the error_handler\n        user function was introduced. These are the filename, the line number, \n        and the context.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Error handling with set_error_handler() and trigger_error()\n    \n     The example below shows the handling of internal exceptions by\n     triggering errors and handling them with a user defined function:\n    \n    \n\n&lt;?php\/\/&nbsp;error&nbsp;handler&nbsp;functionfunction&nbsp;myErrorHandler($errno,&nbsp;$errstr,&nbsp;$errfile,&nbsp;$errline){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(error_reporting()&nbsp;&amp;&nbsp;$errno))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;This&nbsp;error&nbsp;code&nbsp;is&nbsp;not&nbsp;included&nbsp;in&nbsp;error_reporting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;($errno)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;E_USER_ERROR:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;b&gt;My&nbsp;ERROR&lt;\/b&gt;&nbsp;[$errno]&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&nbsp;Fatal&nbsp;error&nbsp;on&nbsp;line&nbsp;$errline&nbsp;in&nbsp;file&nbsp;$errfile\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\",&nbsp;PHP&nbsp;\"&nbsp;.&nbsp;PHP_VERSION&nbsp;.&nbsp;\"&nbsp;(\"&nbsp;.&nbsp;PHP_OS&nbsp;.&nbsp;\")&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Aborting...&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;E_USER_WARNING:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;b&gt;My&nbsp;WARNING&lt;\/b&gt;&nbsp;[$errno]&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;E_USER_NOTICE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;b&gt;My&nbsp;NOTICE&lt;\/b&gt;&nbsp;[$errno]&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unknown&nbsp;error&nbsp;type:&nbsp;[$errno]&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Don't&nbsp;execute&nbsp;PHP&nbsp;internal&nbsp;error&nbsp;handler&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;}\/\/&nbsp;function&nbsp;to&nbsp;test&nbsp;the&nbsp;error&nbsp;handlingfunction&nbsp;scale_by_log($vect,&nbsp;$scale){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is_numeric($scale)&nbsp;||&nbsp;$scale&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"log(x)&nbsp;for&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;is&nbsp;undefined,&nbsp;you&nbsp;used:&nbsp;scale&nbsp;=&nbsp;$scale\",&nbsp;E_USER_ERROR);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is_array($vect))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"Incorrect&nbsp;input&nbsp;vector,&nbsp;array&nbsp;of&nbsp;values&nbsp;expected\",&nbsp;E_USER_WARNING);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$temp&nbsp;=&nbsp;array();&nbsp;&nbsp;&nbsp;&nbsp;foreach($vect&nbsp;as&nbsp;$pos&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is_numeric($value))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"Value&nbsp;at&nbsp;position&nbsp;$pos&nbsp;is&nbsp;not&nbsp;a&nbsp;number,&nbsp;using&nbsp;0&nbsp;(zero)\",&nbsp;E_USER_NOTICE);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$temp[$pos]&nbsp;=&nbsp;log($scale)&nbsp;*&nbsp;$value;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$temp;}\/\/&nbsp;set&nbsp;to&nbsp;the&nbsp;user&nbsp;defined&nbsp;error&nbsp;handler$old_error_handler&nbsp;=&nbsp;set_error_handler(\"myErrorHandler\");\/\/&nbsp;trigger&nbsp;some&nbsp;errors,&nbsp;first&nbsp;define&nbsp;a&nbsp;mixed&nbsp;array&nbsp;with&nbsp;a&nbsp;non-numeric&nbsp;itemecho&nbsp;\"vector&nbsp;a\\n\";$a&nbsp;=&nbsp;array(2,&nbsp;3,&nbsp;\"foo\",&nbsp;5.5,&nbsp;43.3,&nbsp;21.11);print_r($a);\/\/&nbsp;now&nbsp;generate&nbsp;second&nbsp;arrayecho&nbsp;\"----\\nvector&nbsp;b&nbsp;-&nbsp;a&nbsp;notice&nbsp;(b&nbsp;=&nbsp;log(PI)&nbsp;*&nbsp;a)\\n\";\/*&nbsp;Value&nbsp;at&nbsp;position&nbsp;$pos&nbsp;is&nbsp;not&nbsp;a&nbsp;number,&nbsp;using&nbsp;0&nbsp;(zero)&nbsp;*\/$b&nbsp;=&nbsp;scale_by_log($a,&nbsp;M_PI);print_r($b);\/\/&nbsp;this&nbsp;is&nbsp;trouble,&nbsp;we&nbsp;pass&nbsp;a&nbsp;string&nbsp;instead&nbsp;of&nbsp;an&nbsp;arrayecho&nbsp;\"----\\nvector&nbsp;c&nbsp;-&nbsp;a&nbsp;warning\\n\";\/*&nbsp;Incorrect&nbsp;input&nbsp;vector,&nbsp;array&nbsp;of&nbsp;values&nbsp;expected&nbsp;*\/$c&nbsp;=&nbsp;scale_by_log(\"not&nbsp;array\",&nbsp;2.3);var_dump($c);&nbsp;\/\/&nbsp;NULL\/\/&nbsp;this&nbsp;is&nbsp;a&nbsp;critical&nbsp;error,&nbsp;log&nbsp;of&nbsp;zero&nbsp;or&nbsp;negative&nbsp;number&nbsp;is&nbsp;undefinedecho&nbsp;\"----\\nvector&nbsp;d&nbsp;-&nbsp;fatal&nbsp;error\\n\";\/*&nbsp;log(x)&nbsp;for&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;is&nbsp;undefined,&nbsp;you&nbsp;used:&nbsp;scale&nbsp;=&nbsp;$scale\"&nbsp;*\/$d&nbsp;=&nbsp;scale_by_log($a,&nbsp;-2.5);var_dump($d);&nbsp;\/\/&nbsp;Never&nbsp;reached?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nvector a\nArray\n(\n    [0] =&gt; 2\n    [1] =&gt; 3\n    [2] =&gt; foo\n    [3] =&gt; 5.5\n    [4] =&gt; 43.3\n    [5] =&gt; 21.11\n)\n----\nvector b - a notice (b = log(PI) * a)\n&lt;b&gt;My NOTICE&lt;\/b&gt; [1024] Value at position 2 is not a number, using 0 (zero)&lt;br \/&gt;\nArray\n(\n    [0] =&gt; 2.2894597716988\n    [1] =&gt; 3.4341896575482\n    [2] =&gt; 0\n    [3] =&gt; 6.2960143721717\n    [4] =&gt; 49.566804057279\n    [5] =&gt; 24.165247890281\n)\n----\nvector c - a warning\n&lt;b&gt;My WARNING&lt;\/b&gt; [512] Incorrect input vector, array of values expected&lt;br \/&gt;\nNULL\n----\nvector d - fatal error\n&lt;b&gt;My ERROR&lt;\/b&gt; [256] log(x) for x &lt;= 0 is undefined, you used: scale = -2.5&lt;br \/&gt;\n  Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)&lt;br \/&gt;\nAborting...&lt;br \/&gt;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ErrorException\n    error_reporting() - Sets which PHP errors are reported\n    restore_error_handler() - Restores the previous error handler function\n    trigger_error() - Generates a user-level error\/warning\/notice message\n    error level constants\n    information about the callback type\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.trigger-error.php","title":"trigger_error","description":"\n \n  trigger_error\n  (PHP 4 &gt;= 4.0.1, PHP 5)trigger_error &mdash; Generates a user-level error\/warning\/notice message\n\n \n\n \n  Description\n  \n   bool trigger_error\n    ( string $error_msg\n   [, int $error_type = E_USER_NOTICE\n  ] )\n\n  \n   Used to trigger a user error condition, it can be used by in conjunction\n   with the built-in error handler, or with a user defined function that has\n   been set as the new error handler\n   (set_error_handler()). \n  \n  \n   This function is useful when you need to generate a particular response to\n   an exception at runtime.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     error_msg\n     \n\n      \n       The designated error message for this error. It&#039;s limited to 1024 \n       characters in length. Any additional characters beyond 1024 will be \n       truncated.\n      \n     \n\n    \n\n    \n\n     error_type\n     \n\n      \n       The designated error type for this error. It only works with the E_USER\n       family of constants, and will default to E_USER_NOTICE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns FALSE if wrong error_type is\n   specified, TRUE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 trigger_error() example\n    \n     See set_error_handler() for a more extensive example.\n    \n    \n\n&lt;?phpif&nbsp;($divisor&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"Cannot&nbsp;divide&nbsp;by&nbsp;zero\",&nbsp;E_USER_ERROR);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n     HTML entities in error_msg are not\n     escaped. Use htmlentities() on the message if\n     the error is to be displayed in a browser.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    error_reporting() - Sets which PHP errors are reported\n    set_error_handler() - Sets a user-defined error handler function\n    restore_error_handler() - Restores the previous error handler function\n    The error level constants\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-exception-handler.php","title":"set_exception_handler","description":"\n \n  set_exception_handler\n  (PHP 5)set_exception_handler &mdash; \n   Sets a user-defined exception handler function \n  \n\n \n\n \n  Description\n  \n   callback set_exception_handler\n    ( callback $exception_handler\n   )\n\n  \n   Sets the default exception handler if an exception is not caught within a\n   try\/catch block. Execution will stop after the\n   exception_handler is called.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     exception_handler\n     \n\n      \n       Name of the function to be called when an uncaught exception occurs.\n       This function must be defined before calling\n       set_exception_handler(). This handler function\n       needs to accept one parameter, which will be the exception object that\n       was thrown.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the name of the previously defined exception handler, or NULL on error. If\n   no previous handler was defined, NULL is also returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 set_exception_handler() example\n    \n\n&lt;?phpfunction&nbsp;exception_handler($exception)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Uncaught&nbsp;exception:&nbsp;\"&nbsp;,&nbsp;$exception-&gt;getMessage(),&nbsp;\"\\n\";}set_exception_handler('exception_handler');throw&nbsp;new&nbsp;Exception('Uncaught&nbsp;Exception');echo&nbsp;\"Not&nbsp;Executed\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    restore_exception_handler() - Restores the previously defined exception handler function\n    restore_error_handler() - Restores the previous error handler function\n    error_reporting() - Sets which PHP errors are reported\n    information about the callback type\n    PHP 5 Exceptions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-busy.php","title":"eio_busy","description":"\n \n  eio_busy\n  (PECL eio &gt;= 0.0.1dev)eio_busy &mdash; Artificially increase load. Could be useful in tests,\n  benchmarking.\n\n \n\n \n  Description\n  \n   resource eio_busy\n    ( int $delay\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_busy() artificially increases load taking\n  delay seconds to execute. May be used for debugging,\n  or benchmarking.\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    delay\n    \n\n     \n     Delay in seconds\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n    \n    This callback is called when all the group requests are done.\n    \n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n Return Values\n  \n   eio_busy() returns request resource on success or FALSE on error.\n  \n \n\n\n  See Also\n  \n   eio_nop\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-chmod.php","title":"eio_chmod","description":"\n \n  eio_chmod\n  (PECL eio &gt;= 0.0.1dev)eio_chmod &mdash; Change file\/direcrory permissions.\n\n \n\n \n  Description\n  \n   resource eio_chmod\n    ( string $path\n   , mixed $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_chmod() changes file, or direcrory permissions. The\n  new permissions are specified by mode.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path to the target file or directory\n     WarningAvoid relative\npaths\n\n     \n    \n\n   \n\n   \n\n    mode\n    \n\n     \n     The new permissions. E.g. 0644.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_chmod() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_chown\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-chown.php","title":"eio_chown","description":"\n \n  eio_chown\n  (PECL eio &gt;= 0.0.1dev)eio_chown &mdash; Change file\/direcrory permissions.\n\n \n\n \n  Description\n  \n   resource eio_chown\n    ( string $path\n   , int $uid\n   [, int $gid = -1\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )\n\n  \n  Changes file, or directory permissions.\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path to file or directory.\n     WarningAvoid relative\npaths\n\n     \n    \n\n   \n\n   \n\n    uid\n    \n\n     \n     User ID. Is ignored when equal to -1.\n     \n    \n\n   \n\n   \n\n    gid\n    \n\n     \n     Group ID. Is ignored when equal to -1.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_chown() returns request resource on success or FALSE on error.\n  \n \n\n\n\n \n  See Also\n  \n   eio_chmod\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-cancel.php","title":"eio_cancel","description":"\n \n  eio_cancel\n  (PECL eio &gt;= 0.0.1dev)eio_cancel &mdash; Cancels a request\n\n \n\n \n  Description\n  \n   void eio_cancel\n    ( resource $req\n   )\n\n  \n   eio_cancel() cancels a request specified by\n   req\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    req\n    \n\n     \n     The request resource\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_cancel() example\n   \n\n&lt;?php&nbsp;\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_nop()&nbsp;finished&nbsp;*\/&nbsp;function&nbsp;my_nop_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"my_nop&nbsp;\",&nbsp;$data,&nbsp;\"\\n\";&nbsp;}\/\/&nbsp;This&nbsp;eio_nop()&nbsp;call&nbsp;will&nbsp;be&nbsp;cancelled$req&nbsp;=&nbsp;eio_nop(EIO_PRI_DEFAULT,&nbsp;\"my_nop_cb\",&nbsp;\"1\");var_dump($req);eio_cancel($req);\/\/&nbsp;This&nbsp;time&nbsp;eio_nop()&nbsp;will&nbsp;be&nbsp;processedeio_nop(EIO_PRI_DEFAULT,&nbsp;\"my_nop_cb\",&nbsp;\"2\");\/\/&nbsp;Process&nbsp;requestseio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nresource(4) of type (EIO Request Descriptor)\nmy_nop 2\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_grp_cancel\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-close.php","title":"eio_close","description":"\n \n  eio_close\n  (PECL eio &gt;= 0.0.1dev)eio_close &mdash; Close file\n\n \n\n \n  Description\n  \n   resource eio_close\n    ( int $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_close() closes file specified by\n  fd.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n      The file descriptor\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_close() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_open\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-custom.php","title":"eio_custom","description":"\n \n  eio_custom\n  (PECL eio &gt;= 0.0.1dev)eio_custom &mdash; Execute custom request like any other eio_* call.\n\n \n\n \n  Description\n  \n   resource eio_custom\n    ( mixed $execute\n   , int $pri\n   , mixed $callback\n   [, mixed $data = NULL\n  ] )\n\n  \n   eio_custom() executes custom function specified by\n   execute processing it just like any other eio_* call.\n  \n\n\n \n\n\n \n  Parameters\n  \n\n   \n\n    execute\n    \n\n     \n      Specifies the request function that should match the following prototype:\n\n      \nmixed&nbsp;execute(mixed&nbsp;data);\n\n\n      callback is event completion callback that should match the following\n      prototype:\n      \nvoid&nbsp;callback(mixed&nbsp;data,&nbsp;mixed&nbsp;result);\n\n\n\n     data is the data passed to\n     execute via data argument\n      without modifications\n      result value returned by execute\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_custom() returns request resource on success or FALSE on error.\n  \n \n\n\n\n\n \n  Examples\n  \n   Example #1 eio_custom() example\n \n \n&lt;?php\/*&nbsp;Callback&nbsp;for&nbsp;the&nbsp;custom&nbsp;callback&nbsp;*\/function&nbsp;my_custom_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump(count($result));&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result['data_modified']);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result['result']);}\/*&nbsp;The&nbsp;custom&nbsp;request&nbsp;*\/function&nbsp;my_custom($data)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;$result&nbsp;&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'result'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;1001,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'data_modified'&nbsp;=&gt;&nbsp;\"my&nbsp;custom&nbsp;data\",&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$result;}$data&nbsp;=&nbsp;\"my_custom_data\";$req&nbsp;=&nbsp;eio_custom(\"my_custom\",&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_custom_callback\",&nbsp;$data);var_dump($req);eio_event_loop();?&gt;\n\n\n\n\nThe above example will output\nsomething similar to:\n\n \nresource(4) of type (EIO Request Descriptor)\nstring(14) &quot;my_custom_data&quot;\nstring(14) &quot;my_custom_data&quot;\nint(2)\nstring(14) &quot;my custom data&quot;\nint(1001)\n \n \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-dup2.php","title":"eio_dup2","description":"\n \n  eio_dup2\n  (PECL eio &gt;= 0.0.1dev)eio_dup2 &mdash; Duplicate a file descriptor\n\n \n\n \n  Description\n  \n   resource eio_dup2\n    ( int $fd\n   , int $fd2\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )\n\n  \n  eio_dup2() duplicates file descriptor.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     Source file descriptor\n     \n    \n\n   \n\n   \n\n    fd2\n    \n\n     \n     Target file descriptor\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_dup2() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-event-loop.php","title":"eio_event_loop","description":"\n \n  eio_event_loop\n  (PECL eio &gt;= 0.0.1dev)eio_event_loop &mdash; Polls libeio until all requests proceeded\n\n \n\n \n  Description\n  \n   bool eio_event_loop\n    ( void\n   )\n\n  \n  eio_event_loop() polls libeio until all requests proceeded.\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_event_loop() returns TRUE on success or FALSE on error.\n  \n \n\n\n \n  Examples\n \n Example #1 eio_event_loop() example\n \n \n&lt;?php$temp_filename&nbsp;=&nbsp;\"eio-temp-file.tmp\";touch($temp_filename);\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_chmod()&nbsp;finished&nbsp;*\/function&nbsp;my_chmod_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$temp_filename;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;==&nbsp;0&nbsp;&amp;&amp;&nbsp;!is_readable($temp_filename)&nbsp;&amp;&amp;&nbsp;is_writable($temp_filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"eio_chmod_ok\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@unlink($temp_filename);}eio_chmod($temp_filename,&nbsp;0200,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_chmod_callback\");eio_event_loop();?&gt;\n\n\n\n\nThe above example will output\nsomething similar to:\n\n \neio_chmod_ok\n \n \n \n\n \n\n\n\n \n  See Also\n  \n   eio_poll\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fallocate.php","title":"eio_fallocate","description":"\n \n  eio_fallocate\n  (PECL eio &gt;= 0.0.1dev)eio_fallocate &mdash; Allows the caller to directly manipulate the allocated disk\n  space for a file\n\n \n\n \n  Description\n  \n   resource eio_fallocate\n    ( int $fd\n   , int $mode\n   , int $offset\n   , int $length\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )\n\n\n  \n  eio_fallocate() allows the caller to directly manipulate the allocated disk space for the\n  file specified by fd file descriptor for the byte\n  range starting at offset and continuing for\n  length bytes.\n  \n\n  Note: \n  File should be opened for writing\n  EIO_O_CREAT should be logically\n      OR&#039;d with EIO_O_WRONLY, or\n      EIO_O_RDWR\n  \n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor, e.g. returned by eio_open().\n     \n    \n\n   \n\n   \n\n    mode\n    \n\n     Currently only one flag is supported for mode:\n     EIO_FALLOC_FL_KEEP_SIZE (the same as POSIX constant\n       FALLOC_FL_KEEP_SIZE).\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Specifies start of the byte range.\n     \n    \n\n   \n\n   \n\n    length\n    \n\n     \n     Specifies length the byte range.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_fallocate() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fchmod.php","title":"eio_fchmod","description":"\n \n  eio_fchmod\n  (PECL eio &gt;= 0.0.1dev)eio_fchmod &mdash; Change file permissions.\n\n \n\n \n  Description\n  \n   resource eio_fchmod\n    ( int $fd\n   , int $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_fchmod() changes permissions for the file specified\n  by fd file descriptor.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor, e.g. returned by eio_open().\n     \n    \n\n   \n\n   \n\n    mode\n    \n\n     \n     The new permissions. E.g. 0644.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_fchmod() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_fchown\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fchown.php","title":"eio_fchown","description":"\n \n  eio_fchown\n  (PECL eio &gt;= 0.0.1dev)eio_fchown &mdash; Change file ownership\n\n \n\n \n  Description\n  \n   resource eio_fchown\n    ( int $fd\n   , int $uid\n   [, int $gid\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]]] )\n\n  \n   eio_fchown() changes ownership of the file specified by\n   fd file descriptor.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor.\n     \n    \n\n   \n\n   \n\n    uid\n    \n\n     \n     User ID. Is ignored when equal to -1.\n     \n    \n\n   \n\n   \n\n    gid\n    \n\n     \n     Group ID. Is ignored when equal to -1.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  See Also\n  \n   eio_fchmod\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fdatasync.php","title":"eio_fdatasync","description":"\n \n  eio_fdatasync\n  (PECL eio &gt;= 0.0.1dev)eio_fdatasync &mdash; Synchronize a file&#039;s in-core state with storage device.\n\n \n\n \n  Description\n  \n   resource eio_fdatasync\n    ( int $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_fdatasync() synchronizes a file&#039;s in-core state with storage device.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor, e.g. returned by eio_open().\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_fdatasync() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fstatvfs.php","title":"eio_fstatvfs","description":"\n \n  eio_fstatvfs\n  (PECL eio &gt;= 0.0.1dev)eio_fstatvfs &mdash; Get file system statistics\n\n \n\n \n  Description\n  \n   resource eio_fstatvfs\n    ( int $fd\n   , int $pri\n   , mixed $callback\n   [, mixed $data\n  ] )\n\n  \n  eio_fstatvfs() returns file system statistics in\n  result of callback.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     A file descriptor of a file within the mounted file system.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_fstatvfs() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_statvfs\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fstat.php","title":"eio_fstat","description":"\n \n  eio_fstat\n   (PECL eio &gt;= 0.0.1dev)eio_fstat &mdash; Get file status\n\n \n\n \n  Description\n  \n   resource eio_fstat\n    ( int $fd\n   , int $pri\n   , mixed $callback\n   [, mixed $data\n  ] )\n\n  \n   eio_fstat() returns file status information in\n   result argument of callback\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_busy() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_lstat() example\n   \n\n&lt;?php\/\/&nbsp;Create&nbsp;temporary&nbsp;file$tmp_filename&nbsp;=&nbsp;dirname(__FILE__)&nbsp;.\"\/eio-file.tmp\";touch($tmp_filename);\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_fstat()&nbsp;done&nbsp;*\/function&nbsp;my_res_cb($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;Should&nbsp;output&nbsp;array&nbsp;with&nbsp;stat&nbsp;info&nbsp;var_dump($result);&nbsp;if&nbsp;($data['fd'])&nbsp;{&nbsp;&nbsp;\/\/&nbsp;Close&nbsp;temporary&nbsp;file&nbsp;&nbsp;eio_close($data['fd']);&nbsp;&nbsp;eio_event_loop();&nbsp;}&nbsp;\/\/&nbsp;Remove&nbsp;temporary&nbsp;file&nbsp;@unlink($data['file']);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_open()&nbsp;done&nbsp;*\/function&nbsp;my_open_cb($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;Prepare&nbsp;data&nbsp;for&nbsp;callback&nbsp;$d&nbsp;=&nbsp;array(&nbsp;&nbsp;'fd'&nbsp;&nbsp;=&gt;&nbsp;$result,&nbsp;&nbsp;'file'=&gt;&nbsp;$data&nbsp;);&nbsp;\/\/&nbsp;Request&nbsp;stat&nbsp;info&nbsp;eio_fstat($result,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_res_cb\",&nbsp;$d);&nbsp;\/\/&nbsp;Process&nbsp;request(s)&nbsp;eio_event_loop();}\/\/&nbsp;Open&nbsp;temporary&nbsp;fileeio_open($tmp_filename,&nbsp;EIO_O_RDONLY,&nbsp;NULL,&nbsp;EIO_PRI_DEFAULT,&nbsp;&nbsp;\"my_open_cb\",&nbsp;$tmp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\narray(12) {\n [&quot;st_dev&quot;]=&gt;\n  int(2050)\n  [&quot;st_ino&quot;]=&gt;\n  int(2489159)\n  [&quot;st_mode&quot;]=&gt;\n  int(33188)\n  [&quot;st_nlink&quot;]=&gt;\n  int(1)\n  [&quot;st_uid&quot;]=&gt;\n  int(1000)\n  [&quot;st_gid&quot;]=&gt;\n  int(100)\n  [&quot;st_rdev&quot;]=&gt;\n  int(0)\n  [&quot;st_blksize&quot;]=&gt;\n  int(4096)\n  [&quot;st_blocks&quot;]=&gt;\n  int(0)\n  [&quot;st_atime&quot;]=&gt;\n  int(1318239506)\n  [&quot;st_mtime&quot;]=&gt;\n  int(1318239506)\n  [&quot;st_ctime&quot;]=&gt;\n  int(1318239506)\n}\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_lstat\n   eio_stat\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-fsync.php","title":"eio_fsync","description":"\n \n  eio_fsync\n  (PECL eio &gt;= 0.0.1dev)eio_fsync &mdash; Synchronize a file&#039;s in-core state with storage device\n\n \n\n \n  Description\n  \n   resource eio_fsync\n    ( int $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  Synchronize a file&#039;s in-core state with storage device\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_fsync() returns request resource on success or FALSE on error.\n  \n \n\n\n\n \n  See Also\n  \n   eio_sync\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-ftruncate.php","title":"eio_ftruncate","description":"\n \n  eio_ftruncate\n  (PECL eio &gt;= 0.0.1dev)eio_ftruncate &mdash; Truncate a file\n\n \n\n \n  Description\n  \n   resource eio_ftruncate\n    ( int $fd\n   , int $offset\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_ftruncate() causes a regular file referenced by\n  fd file descriptor to be truncated to precisely\n  length bytes.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor.\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Offset from beginning of the file\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_ftruncate() returns request resource on success or FALSE on error.\n  \n \n\n\n\n \n  See Also\n  \n   eio_truncate\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-futime.php","title":"eio_futime","description":"\n \n  eio_futime\n  (PECL eio &gt;= 0.0.1dev)eio_futime &mdash; Change file last access and modification times\n\n \n\n \n  Description\n  \n   resource eio_futime\n    ( int $fd\n   , int $atime\n   , int $mtime\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )\n\n  \n   eio_futime() changes file last access and modification\n   times.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor, e.g. returned by eio_open()\n     \n    \n\n   \n\n   \n\n    atime\n    \n\n     \n     Access time\n     \n    \n\n   \n\n   \n\n    mtime\n    \n\n     \n     Modification time\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_futime() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_utime\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-cancel.php","title":"eio_grp_cancel","description":"\n \n  eio_grp_cancel\n  (PECL eio &gt;= 0.0.1dev)eio_grp_cancel &mdash; Cancels a request group\n\n \n\n \n  Description\n  \n   void eio_grp_cancel\n    ( resource $grp\n   )\n\n  \n  eio_grp_cancel() cancels a group request specified by\n  grp request group resource.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    grp\n    \n\n     \n     The request group resource returned by eio_grp().\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n \n  See Also\n  \n   eio_grp\n   eio_grp_add\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-add.php","title":"eio_grp_add","description":"\n \n  eio_grp_add\n  (PECL eio &gt;= 0.0.1dev)eio_grp_add &mdash; Adds a request to the request group.\n\n \n\n \n  Description\n  \n   void eio_grp_add\n    ( resource $grp\n   , resource $req\n   )\n\n  \n  eio_grp_add() adds a request to the request group.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    grp\n    \n\n     \n     The request group resource returned by eio_grp()\n     \n    \n\n   \n\n   \n\n    req\n    \n\n     \n     The request resource\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  eio_grp_add() doesn&#039;t return a value.\n  \n \n\n\n \n  Examples\n  \n  Example #1 Grouping requests\n  \n&lt;?php\/*&nbsp;*&nbsp;Create&nbsp;a&nbsp;group&nbsp;request&nbsp;to&nbsp;open,&nbsp;read&nbsp;and&nbsp;close&nbsp;a&nbsp;file&nbsp;*\/\/\/&nbsp;Create&nbsp;temporary&nbsp;file&nbsp;and&nbsp;write&nbsp;some&nbsp;bytes&nbsp;to&nbsp;it$temp_filename&nbsp;=&nbsp;dirname(__FILE__)&nbsp;.\"\/eio-file.tmp\";$fp&nbsp;=&nbsp;fopen($temp_filename,&nbsp;\"w\");fwrite($fp,&nbsp;\"some&nbsp;data\");fclose($fp);\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;the&nbsp;group&nbsp;requests&nbsp;are&nbsp;done&nbsp;*\/function&nbsp;my_grp_done($data,&nbsp;$result)&nbsp;{&nbsp;var_dump($result&nbsp;==&nbsp;0);&nbsp;@unlink($data);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_open()&nbsp;done&nbsp;*\/function&nbsp;my_grp_file_opened_callback($data,&nbsp;$result)&nbsp;{&nbsp;global&nbsp;$grp;&nbsp;\/\/&nbsp;$result&nbsp;should&nbsp;contain&nbsp;the&nbsp;file&nbsp;descriptor&nbsp;var_dump($result&nbsp;&gt;&nbsp;0);&nbsp;\/\/&nbsp;Create&nbsp;eio_read()&nbsp;request&nbsp;and&nbsp;add&nbsp;it&nbsp;to&nbsp;the&nbsp;group&nbsp;\/\/&nbsp;Pass&nbsp;file&nbsp;descriptor&nbsp;to&nbsp;the&nbsp;callback&nbsp;$req&nbsp;=&nbsp;eio_read($result,&nbsp;4,&nbsp;0,&nbsp;&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_grp_file_read_callback\",&nbsp;$result);&nbsp;eio_grp_add($grp,&nbsp;$req);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_read()&nbsp;done&nbsp;*\/function&nbsp;my_grp_file_read_callback($data,&nbsp;$result)&nbsp;{&nbsp;global&nbsp;$grp;&nbsp;\/\/&nbsp;Read&nbsp;bytes&nbsp;var_dump($result);&nbsp;\/\/&nbsp;Create&nbsp;eio_close()&nbsp;request&nbsp;and&nbsp;add&nbsp;it&nbsp;to&nbsp;the&nbsp;group&nbsp;\/\/&nbsp;$data&nbsp;should&nbsp;contain&nbsp;the&nbsp;file&nbsp;descriptor&nbsp;$req&nbsp;=&nbsp;eio_close($data);&nbsp;eio_grp_add($grp,&nbsp;$req);}\/\/&nbsp;Create&nbsp;request&nbsp;group$grp&nbsp;=&nbsp;eio_grp(\"my_grp_done\",&nbsp;$temp_filename);var_dump($grp);\/\/&nbsp;Create&nbsp;eio_open()&nbsp;request&nbsp;and&nbsp;add&nbsp;it&nbsp;to&nbsp;the&nbsp;group$req&nbsp;=&nbsp;eio_open($temp_filename,&nbsp;EIO_O_RDWR&nbsp;|&nbsp;EIO_O_APPEND&nbsp;,&nbsp;NULL,&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_grp_file_opened_callback\",&nbsp;NULL);eio_grp_add($grp,&nbsp;$req);\/\/&nbsp;Process&nbsp;requestseio_event_loop();?&gt;\n\n\n\n  The above example will output\nsomething similar to:\n \nresource(6) of type (EIO Group Descriptor)\nbool(true)\nstring(4) &quot;some&quot;\nbool(true)\n\n \n \n\n\n \n  See Also\n  \n   eio_grp\n   eio_grp_cancel\n   eio_grp_limit\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp-limit.php","title":"eio_grp_limit","description":"\n \n  eio_grp_limit\n  (PECL eio &gt;= 0.0.1dev)eio_grp_limit &mdash; Set group limit\n\n \n\n \n  Description\n  \n   void eio_grp_limit\n    ( resource $grp\n   , int $limit\n   )\n\n  \n  Limit number of requests in the request group.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    grp\n    \n\n     \n     The request group resource.\n     \n    \n\n   \n\n   \n\n    limit\n    \n\n     \n     Number of requests in the group.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n \n  See Also\n  \n   eio_grp_add\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-get-eventfd.php","title":"eio_get_event_stream","description":"\n \n  eio_get_event_stream\n  (PECL eio &gt;= 0.3.1b)eio_get_event_stream &mdash; Get stream representing a variable used in internal communications with libeio.\n\n \n\n \n  Description\n  \n   mixed eio_get_event_stream\n    ( void\n   )\n\n  \n   eio_get_event_stream() acquires stream representing a\n   variable used in internal communications with libeio. Could be used to bind\n   with some event loop provided by other PECL extension, for example\n   libevent.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_get_event_stream() returns stream on success;\n   otherwise, NULL\n  \n \n\n\n \n  Examples\n  \n   Example #1 Using eio with libevent\n   \n\n&lt;?phpfunction&nbsp;my_eio_poll($fd,&nbsp;$events,&nbsp;$arg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Some&nbsp;libevent&nbsp;regulation&nbsp;might&nbsp;go&nbsp;here&nbsp;..&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(eio_nreqs())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eio_poll();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;..&nbsp;and&nbsp;here&nbsp;*\/}function&nbsp;my_res_cb($d,&nbsp;$r)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($r);&nbsp;var_dump($d);}$base&nbsp;=&nbsp;event_base_new();$event&nbsp;=&nbsp;event_new();$fd&nbsp;=&nbsp;eio_get_event_stream();var_dump($fd);eio_nop(EIO_PRI_DEFAULT,&nbsp;\"my_res_cb\",&nbsp;\"nop&nbsp;data\");eio_mkdir(\"\/tmp\/abc-eio-temp\",&nbsp;0750,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_res_cb\",&nbsp;\"mkdir&nbsp;data\");\/*&nbsp;some&nbsp;other&nbsp;eio_*&nbsp;calls&nbsp;here&nbsp;...&nbsp;*\/\/\/&nbsp;set&nbsp;event&nbsp;flagsevent_set($event,&nbsp;$fd,&nbsp;EV_READ&nbsp;\/*|&nbsp;EV_PERSIST*\/,&nbsp;\"my_eio_poll\",&nbsp;array($event,&nbsp;$base));\/\/&nbsp;set&nbsp;event&nbsp;base&nbsp;event_base_set($event,&nbsp;$base);\/\/&nbsp;enable&nbsp;eventevent_add($event);\/\/&nbsp;start&nbsp;event&nbsp;loopevent_base_loop($base);\/*&nbsp;The&nbsp;same&nbsp;will&nbsp;be&nbsp;available&nbsp;via&nbsp;buffered&nbsp;libevent&nbsp;interface&nbsp;*\/?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nint(3)\nint(0)\nstring(8) &quot;nop data&quot;\nint(0)\nstring(10) &quot;mkdir data&quot;\n\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-grp.php","title":"eio_grp","description":"\n \n  eio_grp\n  (PECL eio &gt;= 0.0.1dev)eio_grp &mdash; Createsa request group.\n\n \n\n \n  Description\n  \n   resource eio_grp\n    ( string $callback\n   [, string $data = NULL\n  ] )\n\n  \n   eio_grp() creates a request group.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_grp() returns request group resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_grp() example\n   \n\n&lt;?php$temp_filename&nbsp;=&nbsp;dirname(__FILE__)&nbsp;.\"\/eio-file.tmp\";$fp&nbsp;=&nbsp;fopen($temp_filename,&nbsp;\"w\");fwrite($fp,&nbsp;\"some&nbsp;data\");fclose($fp);$my_file_fd&nbsp;=&nbsp;NULL;\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;the&nbsp;group&nbsp;requests&nbsp;are&nbsp;done&nbsp;*\/function&nbsp;my_grp_done($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;Remove&nbsp;the&nbsp;file,&nbsp;if&nbsp;it&nbsp;still&nbsp;exists&nbsp;@unlink($data);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;the&nbsp;temporary&nbsp;file&nbsp;is&nbsp;opened&nbsp;*\/function&nbsp;my_grp_file_opened_callback($data,&nbsp;$result)&nbsp;{&nbsp;global&nbsp;$my_file_fd,&nbsp;$grp;&nbsp;$my_file_fd&nbsp;=&nbsp;$result;&nbsp;$req&nbsp;=&nbsp;eio_read($my_file_fd,&nbsp;4,&nbsp;0,&nbsp;&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_grp_file_read_callback\");&nbsp;eio_grp_add($grp,&nbsp;$req);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;the&nbsp;file&nbsp;is&nbsp;read&nbsp;*\/function&nbsp;my_grp_file_read_callback($data,&nbsp;$result)&nbsp;{&nbsp;global&nbsp;$my_file_fd,&nbsp;$grp;&nbsp;var_dump($result);&nbsp;\/\/&nbsp;Create&nbsp;request&nbsp;to&nbsp;close&nbsp;the&nbsp;file&nbsp;$req&nbsp;=&nbsp;eio_close($my_file_fd);&nbsp;\/\/&nbsp;Add&nbsp;request&nbsp;to&nbsp;the&nbsp;group&nbsp;eio_grp_add($grp,&nbsp;$req);}\/\/&nbsp;Create&nbsp;request&nbsp;group$grp&nbsp;=&nbsp;eio_grp(\"my_grp_done\",&nbsp;$temp_filename);\/\/&nbsp;Create&nbsp;request$req&nbsp;=&nbsp;eio_open($temp_filename,&nbsp;EIO_O_RDWR&nbsp;|&nbsp;EIO_O_APPEND&nbsp;,&nbsp;NULL,&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_grp_file_opened_callback\",&nbsp;NULL);\/\/&nbsp;Add&nbsp;request&nbsp;to&nbsp;the&nbsp;groupeio_grp_add($grp,&nbsp;$req);\/\/&nbsp;Process&nbsp;requestseio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(4) &quot;some&quot;\n\n   \n  \n \n\n\n \n  See Also\n  \n   eio_grp_cancel\n   eio_grp_add\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-link.php","title":"eio_link","description":"\n \n  eio_link\n  (PECL eio &gt;= 0.0.1dev)eio_link &mdash; Create a hardlink for file\n\n \n\n \n  Description\n  \n   resource eio_link\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_link() creates a hardlink\n  new_path for a file specified by\n  path.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Source file path.\n     \n    \n\n   \n\n   \n\n    new_path\n    \n\n     \n     Target file path.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_link() example\n   \n\n&lt;?php$filename&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.link\";$hardlink&nbsp;=&nbsp;dirname(__FILE__).\"\/hardlink.link\";function&nbsp;my_hardlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$link,&nbsp;$filename;&nbsp;&nbsp;&nbsp;&nbsp;var_dump(file_exists($data)&nbsp;&amp;&amp;&nbsp;!is_link($data));&nbsp;&nbsp;&nbsp;&nbsp;@unlink($data);&nbsp;&nbsp;&nbsp;&nbsp;eio_symlink($filename,&nbsp;$link,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_symlink_cb\",&nbsp;$link);}function&nbsp;my_symlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$link,&nbsp;$filename;&nbsp;&nbsp;&nbsp;&nbsp;var_dump(file_exists($data)&nbsp;&amp;&amp;&nbsp;is_link($data));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!eio_readlink($data,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_readlink_cb\",&nbsp;NULL))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);&nbsp;&nbsp;&nbsp;&nbsp;}}function&nbsp;my_readlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$filename,&nbsp;$link;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);}eio_link($filename,&nbsp;$hardlink,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_hardlink_cb\",&nbsp;$hardlink);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nbool(true)\nbool(true)\nstring(%d) &quot;%ssymlink.dat&quot;\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_symlink\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-mkdir.php","title":"eio_mkdir","description":"\n \n  eio_mkdir\n  (PECL eio &gt;= 0.0.1dev)eio_mkdir &mdash; Create directory\n\n \n\n \n  Description\n  \n   resource eio_mkdir\n    ( string $path\n   , int $mode\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_mkdir() creates directory with specified access\n  mode.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path for the new directory.\n     \n    \n\n   \n\n   \n\n    mode\n    \n\n     \n     Access mode, e.g. 0755\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_mkdir() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_mkdir() example\n   \n\n&lt;?php$temp_dirname&nbsp;=&nbsp;\"eio-temp-dir\";\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_mkdir()&nbsp;finishes&nbsp;*\/function&nbsp;my_mkdir_callback($data,&nbsp;$result)&nbsp;{&nbsp;if&nbsp;($result&nbsp;==&nbsp;0&nbsp;&amp;&amp;&nbsp;is_dir($temp_dirname)&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;!is_readable($temp_dirname)&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;is_writable($temp_dirname))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"eio_mkdir_ok\";&nbsp;}&nbsp;\/\/&nbsp;Remove&nbsp;directory&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file_exists($data))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmdir($temp_dirname);}\/\/&nbsp;Create&nbsp;directory&nbsp;with&nbsp;access&nbsp;mode&nbsp;0300eio_mkdir($temp_dirname,&nbsp;0300,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_mkdir_callback\",&nbsp;$temp_dirname);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\neio_mkdir_ok\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_rmdir\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-lstat.php","title":"eio_lstat","description":"\n \n  eio_lstat\n  (PECL eio &gt;= 0.0.1dev)eio_lstat &mdash; Get file status\n\n \n\n \n  Description\n  \n   resource eio_lstat\n    ( string $path\n   , int $pri\n   , mixed $callback\n   [, mixed $data = NULL\n  ] )\n\n  \n   eio_lstat() returns file status information in\n   result argument of callback\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     The file path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_lstat() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_lstat() example\n   \n\n&lt;?php$tmp_filename&nbsp;=&nbsp;dirname(__FILE__).&nbsp;\"\/eio-file.tmp\";touch($tmp_filename);function&nbsp;my_res_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);}function&nbsp;my_open_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;eio_close($result);&nbsp;&nbsp;&nbsp;&nbsp;eio_event_loop();&nbsp;&nbsp;&nbsp;&nbsp;@unlink($data);}eio_lstat($tmp_filename,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_res_cb\",&nbsp;\"eio_lstat\");eio_open($tmp_filename,&nbsp;EIO_O_RDONLY,&nbsp;NULL,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_open_cb\",&nbsp;$tmp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(9) &quot;eio_lstat&quot;\narray(12) {\n [&quot;st_dev&quot;]=&gt;\n  int(2050)\n  [&quot;st_ino&quot;]=&gt;\n  int(2099197)\n  [&quot;st_mode&quot;]=&gt;\n  int(33188)\n  [&quot;st_nlink&quot;]=&gt;\n  int(1)\n  [&quot;st_uid&quot;]=&gt;\n  int(1000)\n  [&quot;st_gid&quot;]=&gt;\n  int(100)\n  [&quot;st_rdev&quot;]=&gt;\n  int(0)\n  [&quot;st_blksize&quot;]=&gt;\n  int(4096)\n  [&quot;st_blocks&quot;]=&gt;\n  int(0)\n  [&quot;st_atime&quot;]=&gt;\n  int(1318235777)\n  [&quot;st_mtime&quot;]=&gt;\n  int(1318235777)\n  [&quot;st_ctime&quot;]=&gt;\n  int(1318235777)\n}\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_stat\n   eio_fstat\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nop.php","title":"eio_nop","description":"\n \n  eio_nop\n  (PECL eio &gt;= 0.0.1dev)eio_nop &mdash; Does nothing, except go through the whole request cycle.\n\n \n\n \n  Description\n  \n   resource eio_nop\n    ([ int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n   eio_nop() does nothing, except go through the whole\n   request cycle. Could be useful in debugging.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_nop() returns request resource on success or FALSE on error.\n  \n \n\n\n\n \n  See Also\n  \n   eio_busy\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-mknod.php","title":"eio_mknod","description":"\n \n  eio_mknod\n  (PECL eio &gt;= 0.0.1dev)eio_mknod &mdash; Create a special or ordinary file.\n\n \n\n \n  Description\n  \n   resource eio_mknod\n    ( string $path\n   , int $mode\n   , int $dev\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )\n\n  \n  eio_mknod() creates ordinary or special(often) file.\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path for the new node(file).\n     \n    \n\n   \n\n   \n\n    mode\n    \n\n     \n      Specifies both the permissions to use and the type of node to be\n      created. It should be a combination (using bitwise OR) of one of the\n      file types listed below and the permissions for the new node(e.g. 0640).\n\n      Possible file types are: EIO_S_IFREG(regular file),\n      EIO_S_IFCHR(character file),\n      EIO_S_IFBLK(block special file),\n      EIO_S_IFIFO(FIFO - named pipe) and\n      EIO_S_IFSOCK(UNIX domain socket).\n\n      To specify permissions EIO_S_I* constants could be\n      used.\n     \n    \n\n   \n\n   \n\n    dev\n    \n\n     \n     If  the  file type is EIO_S_IFCHR or\n     EIO_S_IFBLK then dev specifies the major and minor\n     numbers of the newly created device special file. Otherwise\n     dev ignored. See mknod(2) man page for\n     details.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_mknod() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_mknod() example\n   \n\n&lt;?php\/\/&nbsp;FIFO&nbsp;name$temp_filename&nbsp;=&nbsp;\"\/tmp\/eio-temp-fifo\";\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_mknod()&nbsp;finishes&nbsp;*\/function&nbsp;my_mknod_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$s&nbsp;=&nbsp;stat($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($s);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"eio_mknod_ok\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@unlink($data);}eio_mknod($temp_filename,&nbsp;EIO_S_IFIFO,&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_mknod_callback\",&nbsp;$temp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\narray(26) {\n  [0]=&gt;\n  int(17)\n  [1]=&gt;\n  int(2337608)\n  [2]=&gt;\n  int(4096)\n  [3]=&gt;\n  int(1)\n  [4]=&gt;\n  int(1000)\n  [5]=&gt;\n  int(100)\n  [6]=&gt;\n  int(0)\n  [7]=&gt;\n  int(0)\n  [8]=&gt;\n  int(1318241261)\n  [9]=&gt;\n  int(1318241261)\n  [10]=&gt;\n  int(1318241261)\n  [11]=&gt;\n  int(4096)\n  [12]=&gt;\n  int(0)\n  [&quot;dev&quot;]=&gt;\n  int(17)\n  [&quot;ino&quot;]=&gt;\n  int(2337608)\n  [&quot;mode&quot;]=&gt;\n  int(4096)\n  [&quot;nlink&quot;]=&gt;\n  int(1)\n  [&quot;uid&quot;]=&gt;\n  int(1000)\n  [&quot;gid&quot;]=&gt;\n  int(100)\n  [&quot;rdev&quot;]=&gt;\n  int(0)\n  [&quot;size&quot;]=&gt;\n  int(0)\n  [&quot;atime&quot;]=&gt;\n  int(1318241261)\n  [&quot;mtime&quot;]=&gt;\n  int(1318241261)\n  [&quot;ctime&quot;]=&gt;\n  int(1318241261)\n  [&quot;blksize&quot;]=&gt;\n  int(4096)\n  [&quot;blocks&quot;]=&gt;\n  int(0)\n}\neio_mknod_ok\n\n   \n  \n \n\n\n \n  See Also\n  \n   eio_open\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nready.php","title":"eio_nready","description":"\n \n  eio_nready\n  (PECL eio &gt;= 0.0.1dev)eio_nready &mdash; Returns number of not-yet handled requests\n\n \n\n \n  Description\n  \n   int eio_nready\n    ( void\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_nready() returns number of not-yet handled requests\n  \n \n\n\n\n \n  See Also\n  \n   eio_nreqs\n   eio_nready\n   eio_nthreads\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-npending.php","title":"eio_npending","description":"\n \n  eio_npending\n  (PECL eio &gt;= 0.0.1dev)eio_npending &mdash; Returns number of finished, but unhandled requests\n\n \n\n \n  Description\n  \n   int eio_npending\n    ( void\n   )\n\n  \n  eio_npending() returns number of finished, but unhandled requests\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_npending() returns number of finished, but unhandled\n   requests.\n  \n \n\n\n\n \n  See Also\n  \n   eio_nreqs\n   eio_nready\n   eio_nthreads\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nreqs.php","title":"eio_nreqs","description":"\n \n  eio_nreqs\n  (PECL eio &gt;= 0.0.1dev)eio_nreqs &mdash; Returns number of requests to be processed\n\n \n\n \n  Description\n  \n   ReturnType eio_nreqs\n    ( void\n   )\n\n  \n   eio_nreqs() could be called in a custom loop calling\n   eio_poll().\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_nreqs() returns number of requests to be processed.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_nreqs() example\n   \n\n&lt;?phpfunction&nbsp;res_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);}eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"1\");eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"2\");eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"3\");while&nbsp;(eio_nreqs())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;eio_poll();}?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(1) &quot;1&quot;\nint(0)\nstring(1) &quot;3&quot;\nint(0)\nstring(1) &quot;2&quot;\nint(0)\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_poll\n   eio_nready\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-nthreads.php","title":"eio_nthreads","description":"\n \n  eio_nthreads\n  (PECL eio &gt;= 0.0.1dev)eio_nthreads &mdash; Returns number of threads currently in use\n\n \n\n \n  Description\n  \n   int eio_nthreads\n    ( void\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_nthreads() returns number of threads currently in\n   use.\n  \n \n\n\n\n \n  See Also\n  \n   eio_npending\n   eio_nready\n   eio_nreqs\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-open.php","title":"eio_open","description":"\n \n  eio_open\n  (PECL eio &gt;= 0.0.1dev)eio_open &mdash; Opens a file\n\n \n\n \n  Description\n  \n   resource eio_open\n    ( string $path\n   , int $flags\n   , int $mode\n   , int $pri\n   , mixed $callback\n   [, mixed $data = NULL\n  ] )\n\n  \n  eio_open() opens file specified by\n  path in access mode mode with\n  \n\n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path of the file to be opened.\n     Warning\n     In some SAPIs(e.g. PHP-FPM) it could fail, if you\n     don&#039;t specify full path.\n     \n     \n    \n\n   \n\n   \n\n    flags\n    \n\n    One of EIO_O_* constants, or their\n    combinations. EIO_O_* constants have the same\n    meaning, as their corresponding O_* counterparts\n    defined in fnctl.h C header file. Default is\n    EIO_O_RDWR.\n    \n    \n\n   \n\n   \n\n    mode\n    \n\n    One of EIO_S_I* constants, or their combination\n    (via bitwise OR operator). The constants have the same meaning as their\n    S_I* counterparts defined in &raquo;&nbsp;sys\/stat.h\n    C header file. Required, if a file is created. Otherwise ignored.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n      Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_open() returns file descriptor in\n   result argument of callback\n   on success; otherwise, result is equal to -1.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_open() example\n   \n\n&lt;?php$temp_filename&nbsp;=&nbsp;\"eio-temp-file.tmp\";\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_close()&nbsp;finishes&nbsp;*\/function&nbsp;my_close_cb($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;Zero&nbsp;indicates&nbsp;success&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result&nbsp;==&nbsp;0);&nbsp;@unlink($data);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_open()&nbsp;finishes&nbsp;*\/function&nbsp;my_file_opened_callback($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;$result&nbsp;should&nbsp;contain&nbsp;the&nbsp;file&nbsp;descriptor&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result&nbsp;&gt;&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;\/\/&nbsp;Close&nbsp;the&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eio_close($result,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_close_cb\",&nbsp;$data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eio_event_loop();&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Create&nbsp;new&nbsp;file&nbsp;for&nbsp;reading&nbsp;and&nbsp;writing\/\/&nbsp;Deny&nbsp;group&nbsp;and&nbsp;others&nbsp;to&nbsp;do&nbsp;anything&nbsp;with&nbsp;that&nbsp;fileeio_open($temp_filename,&nbsp;EIO_O_CREAT&nbsp;|&nbsp;EIO_O_RDWR,&nbsp;EIO_S_IRUSR&nbsp;|&nbsp;EIO_S_IWUSR,&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_file_opened_callback\",&nbsp;$temp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nbool(true)\nbool(true)\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_mknod\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-poll.php","title":"eio_poll","description":"\n \n  eio_poll\n  (PECL eio &gt;= 0.0.1dev)eio_poll &mdash; Can be to be called whenever there are pending requests that need finishing.\n\n \n\n \n  Description\n  \n   int eio_poll\n    ( void\n   )\n\n  \n  eio_poll() can be used to implement special event loop.\n  For this eio_nreqs() could be used to test if there are\n  unprocessed requests.\n  \n\n  Note: Applicable only when implementing userspace event loop.\n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n  If any request invocation returns a non-zero value, returns that value.\n  Otherwise, it returns 0.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_poll() example\n   \n\n&lt;?phpfunction&nbsp;res_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);}eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"1\");eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"2\");eio_nop(EIO_PRI_DEFAULT,&nbsp;\"res_cb\",&nbsp;\"3\");while&nbsp;(eio_nreqs())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Some&nbsp;specific&nbsp;IPC&nbsp;or&nbsp;so&nbsp;&nbsp;&nbsp;&nbsp;eio_poll();}?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(1) &quot;1&quot;\nint(0)\nstring(1) &quot;3&quot;\nint(0)\nstring(1) &quot;2&quot;\nint(0)\n\n   \n  \n \n\n\n \n  See Also\n  \n   eio_nreqs\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readahead.php","title":"eio_readahead","description":"\n \n  eio_readahead\n  (PECL eio &gt;= 0.0.1dev)eio_readahead &mdash; Perform file readahead into page cache\n\n \n\n \n  Description\n  \n   resource eio_readahead\n    ( int $fd\n   , int $offset\n   , int $length\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_readahead() populates the page cache with data from a file so that subsequent reads from\n  that file will not block on disk I\/O. See READAHEAD(2) man page for details.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Starting point from which data is to be read.\n     \n    \n\n   \n\n   \n\n    length\n    \n\n     \n     Number of bytes to be read.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_readahead() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readlink.php","title":"eio_readlink","description":"\n \n  eio_readlink\n  (PECL eio &gt;= 0.0.1dev)eio_readlink &mdash; Read value of a symbolic link.\n\n \n\n \n  Description\n  \n   resource eio_readlink\n    ( string $path\n   , int $pri\n   , mixed $callback\n   [, string $data = NULL\n  ] )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Source symbolic link path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_readlink() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_readlink() example\n   \n\n&lt;?php$filename&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.link\";$hardlink&nbsp;=&nbsp;dirname(__FILE__).\"\/hardlink.link\";function&nbsp;my_hardlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$link,&nbsp;$filename;&nbsp;&nbsp;&nbsp;&nbsp;var_dump(file_exists($data)&nbsp;&amp;&amp;&nbsp;!is_link($data));&nbsp;&nbsp;&nbsp;&nbsp;@unlink($data);&nbsp;&nbsp;&nbsp;&nbsp;eio_symlink($filename,&nbsp;$link,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_symlink_cb\",&nbsp;$link);}function&nbsp;my_symlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$link,&nbsp;$filename;&nbsp;&nbsp;&nbsp;&nbsp;var_dump(file_exists($data)&nbsp;&amp;&amp;&nbsp;is_link($data));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!eio_readlink($data,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_readlink_cb\",&nbsp;NULL))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);&nbsp;&nbsp;&nbsp;&nbsp;}}function&nbsp;my_readlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$filename,&nbsp;$link;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);}eio_link($filename,&nbsp;$hardlink,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_hardlink_cb\",&nbsp;$hardlink);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nbool(true)\nbool(true)\nstring(16) &quot;\/tmp\/symlink.dat&quot;\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_symlink\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-readdir.php","title":"eio_readdir","description":"\n \n  eio_readdir\n  (PECL eio &gt;= 0.0.1dev)eio_readdir &mdash; Reads through a whole directory\n\n \n\n \n  Description\n  \n   resource eio_readdir\n    ( string $path\n   , int $flags\n   , int $pri\n   , mixed $callback\n   [, string $data = NULL\n  ] )\n\n  \n   Reads through a whole directory(via the opendir, readdir and\n   closedir system calls) and returns either the names or an array in\n   result argument of callback\n   function, depending on the flags argument.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n      Directory path.\n     \n    \n\n   \n\n   \n\n    flags\n    \n\n     \n      Combination of EIO_READDIR_* constants.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n      \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n      Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_readdir() returns request resource on success, or\n   FALSE on error. Sets result argument of\n   callback function according to\n   flags:\n  \n\n  \n   \n\n\n    \n    \n\n     \n      EIO_READDIR_DENTS\n      (integer)\n     \n     \n\n      \n       eio_readdir() flag. If specified, the result argument of the callback\n       becomes an array with the following keys:\n       &#039;names&#039; - array of directory names\n       &#039;dents&#039; - array of struct\n       eio_dirent-like arrays having the following keys each:\n       &#039;name&#039; - the directory name;\n       &#039;type&#039; - one of EIO_DT_*\n       constants;\n       &#039;inode&#039; - the inode number, if available, otherwise\n       unspecified;\n      \n     \n\n    \n\n    \n\n     \n      EIO_READDIR_DIRS_FIRST\n      (integer)\n     \n     \n\n      \n      When this flag is specified, the names will be returned in an order\n      where likely directories come first, in optimal stat order.\n      \n     \n\n    \n\n    \n\n     \n      EIO_READDIR_STAT_ORDER\n      (integer)\n     \n     \n\n      \n      When this flag is specified, then the names will be returned in an order\n      suitable for stat&#039;ing each one. When planning to\n      stat() all files in the given directory, the\n      returned order will likely be\n      fastest.\n      \n     \n\n    \n\n    \n\n     \n      EIO_READDIR_FOUND_UNKNOWN\n      (integer)\n     \n     \n\n      \n\n      \n     \n\n    \n\n\n\n   \n\n  \n\n  Node types:\n   \n\n\n\n    \n\n     \n      EIO_DT_UNKNOWN\n      (integer)\n     \n     \n\n      \n      Unknown node type(very common). Further stat() needed.\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_FIFO\n      (integer)\n     \n     \n\n      \n      FIFO node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_CHR\n      (integer)\n     \n     \n\n      \n      Node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_MPC\n      (integer)\n     \n     \n\n      \n      Multiplexed char device (v7+coherent) node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_DIR\n      (integer)\n     \n     \n\n      \n      Directory node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_NAM\n      (integer)\n     \n     \n\n      \n      Xenix special named file node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_BLK\n      (integer)\n     \n     \n\n      \n      Node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_MPB\n      (integer)\n     \n     \n\n      \n      Multiplexed block device (v7+coherent)\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_REG\n      (integer)\n     \n     \n\n      \n      Node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_NWK\n      (integer)\n     \n     \n\n      \n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_CMP\n      (integer)\n     \n     \n\n      \n      HP-UX network special node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_LNK\n      (integer)\n     \n     \n\n      \n      Link node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_SOCK\n      (integer)\n     \n     \n\n      \n      Socket node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_DOOR\n      (integer)\n     \n     \n\n      \n      Solaris door node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_WHT\n      (integer)\n     \n     \n\n      \n      Node type\n      \n     \n\n    \n\n    \n\n     \n      EIO_DT_MAX\n      (integer)\n     \n     \n\n      \n      Highest node type value\n      \n     \n\n    \n\n \n \n \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_readdir() example\n   \n\n&lt;?php\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_readdir()&nbsp;finishes&nbsp;*\/function&nbsp;my_readdir_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;__FUNCTION__,&nbsp;\"&nbsp;called\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"data:&nbsp;\";&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"result:&nbsp;\";&nbsp;var_dump($result);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\n\";}eio_readdir(\"\/var\/spool\/news\",&nbsp;EIO_READDIR_STAT_ORDER&nbsp;|&nbsp;EIO_READDIR_DIRS_FIRST,&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_readdir_callback\");eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nmy_readdir_callback called\ndata: NULL\nresult: array(2) {\n [&quot;names&quot;]=&gt;\n  array(7) {\n   [0]=&gt;\n    string(7) &quot;archive&quot;\n    [1]=&gt;\n    string(8) &quot;articles&quot;\n    [2]=&gt;\n    string(8) &quot;incoming&quot;\n    [3]=&gt;\n    string(7) &quot;innfeed&quot;\n    [4]=&gt;\n    string(8) &quot;outgoing&quot;\n    [5]=&gt;\n    string(8) &quot;overview&quot;\n    [6]=&gt;\n    string(3) &quot;tmp&quot;\n  }\n [&quot;dents&quot;]=&gt;\n  array(7) {\n   [0]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(7)\n      &quot;archive&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393265)\n    }\n   [1]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(8)\n      &quot;articles&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393266)\n    }\n   [2]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(8)\n      &quot;incoming&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393267)\n    }\n   [3]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(7)\n      &quot;innfeed&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393269)\n    }\n   [4]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(8)\n      &quot;outgoing&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393270)\n    }\n   [5]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(8)\n      &quot;overview&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393271)\n    }\n   [6]=&gt;\n    array(3)\n    {\n     [&quot;name&quot;]=&gt;\n      string(3)\n      &quot;tmp&quot;\n      [&quot;type&quot;]=&gt;\n      int(4)\n      [&quot;inode&quot;]=&gt;\n      int(393272)\n    }\n  }\n}\n\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-read.php","title":"eio_read","description":"\n \n  eio_read\n  (PECL eio &gt;= 0.0.1dev)eio_read &mdash; Read from a file descriptor at given offset.\n\n \n\n \n  Description\n  \n   resource eio_read\n    ( int $fd\n   , int $length\n   , int $offset\n   , int $pri\n   , mixed $callback\n   [, mixed $data = NULL\n  ] )\n\n  \n   eio_read() reads up to length\n   bytes from fd file descriptor at\n   offset. The read bytes are stored in\n   result argument of callback.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor\n     \n    \n\n   \n\n   \n\n    length\n    \n\n     \n     Maximum number of bytes to read.\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Offset within the file.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  eio_read() stores read bytes in\n  result argument of callback\n  function.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_read() example\n   \n\n&lt;?php\/\/&nbsp;Open&nbsp;a&nbsp;temporary&nbsp;file&nbsp;and&nbsp;write&nbsp;some&nbsp;bytes&nbsp;there$temp_filename&nbsp;=&nbsp;\"eio-temp-file.tmp\";$fp&nbsp;=&nbsp;fopen($temp_filename,&nbsp;\"w\");fwrite($fp,&nbsp;\"1234567890\");fclose($fp);\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_read()&nbsp;is&nbsp;done&nbsp;*\/function&nbsp;my_read_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$temp_filename;&nbsp;\/\/&nbsp;Output&nbsp;read&nbsp;bytes&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);&nbsp;\/\/&nbsp;Close&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;eio_close($data);&nbsp;&nbsp;&nbsp;&nbsp;eio_event_loop();&nbsp;\/\/&nbsp;Remove&nbsp;temporary&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;@unlink($temp_filename);}\/*&nbsp;Is&nbsp;called&nbsp;when&nbsp;eio_open()&nbsp;is&nbsp;done&nbsp;*\/function&nbsp;my_file_opened_callback($data,&nbsp;$result)&nbsp;{&nbsp;\/\/&nbsp;$result&nbsp;should&nbsp;contain&nbsp;the&nbsp;file&nbsp;descriptor&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;\/\/&nbsp;Read&nbsp;5&nbsp;bytes&nbsp;starting&nbsp;from&nbsp;third&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eio_read($result,&nbsp;5,&nbsp;2,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_read_cb\",&nbsp;$result);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eio_event_loop();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;\/\/&nbsp;eio_open()&nbsp;failed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink($data);&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Open&nbsp;the&nbsp;file&nbsp;for&nbsp;reading&nbsp;and&nbsp;writingeio_open($temp_filename,&nbsp;EIO_O_RDWR,&nbsp;NULL,&nbsp;&nbsp;&nbsp;&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_file_opened_callback\",&nbsp;$temp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(5) &quot;34567&quot;\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_open\n   eio_write\n   eio_close\n   eio_event_loop\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-realpath.php","title":"eio_realpath","description":"\n \n  eio_realpath\n  (PECL eio &gt;= 0.0.1dev)eio_realpath &mdash; Get the canonicalized absolute pathname.\n\n \n\n \n  Description\n  \n   resource eio_realpath\n    ( string $path\n   , int $pri\n   , mixed $callback\n   [, string $data = NULL\n  ] )\n\n  \n  eio_realpath() returns the canonicalized absolute\n  pathname in result argument of\n  callback function.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Short pathname\n\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     \n\n     \n    \n\n   \n\n   \n\n    callback\n    \n\n     \n\n     \n    \n\n   \n\n   \n\n    data\n    \n\n     \n\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_realpath() example\n   \n\n&lt;?phpvar_dump(getcwd());function&nbsp;my_realpath_allback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);}eio_realpath(\"..\/\",&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_realpath_allback\");eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(12) &quot;\/home\/ruslan&quot;\nstring(5) &quot;\/home&quot;\n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-rmdir.php","title":"eio_rmdir","description":"\n \n  eio_rmdir\n  (PECL eio &gt;= 0.0.1dev)eio_rmdir &mdash; Remove a directory\n\n \n\n \n  Description\n  \n   ReturnType eio_rmdir\n    ( string $path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n   eio_rmdir() removes a directory.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Directory path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_rmdir() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_rmdir() example\n   \n\n&lt;?php$temp_dirname&nbsp;=&nbsp;\"eio-temp-dir\";mkdir($temp_dirname);function&nbsp;my_rmdir_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;==&nbsp;0&nbsp;&amp;&amp;&nbsp;!file_exists($data))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"eio_rmdir_ok\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(file_exists($data))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmdir($data);&nbsp;&nbsp;&nbsp;&nbsp;}}eio_rmdir($temp_dirname,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_rmdir_callback\",&nbsp;$temp_dirname);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\neio_rmdir_ok\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_mkdir\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-rename.php","title":"eio_rename","description":"\n \n  eio_rename\n  (PECL eio &gt;= 0.0.1dev)eio_rename &mdash; Change the name or location of a file.\n\n \n\n \n  Description\n  \n   resource eio_rename\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n   eio_rename() renames or moves a file to new location.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Source path\n     \n    \n\n   \n\n   \n\n    new_path\n    \n\n     \n     Target path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_rename() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_rename() example\n   \n\n&lt;?php$filename&nbsp;=&nbsp;dirname(__FILE__).\"\/eio-temp-file.dat\";touch($filename);$new_filename&nbsp;=&nbsp;dirname(__FILE__).\"\/eio-temp-file-new.dat\";function&nbsp;my_rename_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$filename,&nbsp;$new_filename;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($result&nbsp;==&nbsp;0&nbsp;&amp;&amp;&nbsp;!file_exists($filename)&nbsp;&amp;&amp;&nbsp;file_exists($new_filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($new_filename);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"eio_rename_ok\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);&nbsp;&nbsp;&nbsp;&nbsp;}}eio_rename($filename,&nbsp;$new_filename,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_rename_cb\",&nbsp;$filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\neio_rename_ok\n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-idle.php","title":"eio_set_max_idle","description":"\n \n  eio_set_max_idle\n  (PECL eio &gt;= 0.0.1dev)eio_set_max_idle &mdash; Set maximum number of idle threads.\n\n \n\n \n  Description\n  \n   void eio_set_max_idle\n    ( int $nthreads\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    nthreads\n    \n\n     \n     Number of idle threads.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n \n  See Also\n  \n   eio_set_min_parallel\n   eio_set_max_parallel\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sendfile.php","title":"eio_sendfile","description":"\n \n  eio_sendfile\n  (PECL eio &gt;= 0.0.1dev)eio_sendfile &mdash; Transfer data between file descriptors\n\n \n\n \n  Description\n  \n   ReturnType eio_sendfile\n    ( string $out_fd\n   , string $in_fd\n   , string $offset\n   , string $length\n   [, string $pri\n   [, string $callback\n   [, string $data\n  ]]] )\n\n  \n   eio_sendfile() copies  data between one file descriptor\n   and another. See SENDFILE(2) man page for details.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    out_fd\n    \n\n     \n     Output file descriptor. Should be opened for writing.\n     \n    \n\n   \n\n   \n\n    in_fd\n    \n\n     \n     Input file descriptor. Should be opened for reading.\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Offset within the source file.\n     \n    \n\n   \n\n   \n\n    length\n    \n\n     \n     Number of bytes to copy.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_sendfile() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-parallel.php","title":"eio_set_max_parallel","description":"\n \n  eio_set_max_parallel\n  (PECL eio &gt;= 0.0.1dev)eio_set_max_parallel &mdash; Set maximum parallel threads\n\n \n\n \n  Description\n  \n   void eio_set_max_parallel\n    ( int $nthreads\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    nthreads\n    \n\n     \n     Number of parallel threads\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n \n  See Also\n  \n   eio_set_min_parallel\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-poll-time.php","title":"eio_set_max_poll_time","description":"\n \n  eio_set_max_poll_time\n  (PECL eio &gt;= 0.0.1dev)eio_set_max_poll_time &mdash; Set maximum poll time\n\n \n\n \n  Description\n  \n   void eio_set_max_poll_time\n    ( double $nseconds\n   )\n\n  \n  Polling stops, if poll took longer than nseconds\n  seconds.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    nseconds\n    \n\n     \n     Number of seconds\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-max-poll-reqs.php","title":"eio_set_max_poll_reqs","description":"\n \n  eio_set_max_poll_reqs\n  (PECL eio &gt;= 0.0.1dev)eio_set_max_poll_reqs &mdash; Set maximum number of requests processed in a poll.\n\n \n\n \n  Description\n  \n   void eio_set_max_poll_reqs\n    ( int $nreqs\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    nreqs\n    \n\n     \n     Number of requests\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-set-min-parallel.php","title":"eio_set_min_parallel","description":"\n \n  eio_set_min_parallel\n  (PECL eio &gt;= 0.0.1dev)eio_set_min_parallel &mdash; Set minimum parallel thread number\n\n \n\n \n  Description\n  \n   void eio_set_min_parallel\n    ( string $nthreads\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    nthreads\n    \n\n     \n     Number of parallel threads.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  No value is returned.\n  \n \n\n\n\n \n  See Also\n  \n   eio_set_max_parallel\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-stat.php","title":"eio_stat","description":"\n \n  eio_stat\n  (PECL eio &gt;= 0.0.1dev)eio_stat &mdash; Get file status\n\n \n\n \n  Description\n  \n   resource eio_stat\n    ( string $path\n   , int $pri\n   , mixed $callback\n   [, mixed $data = NULL\n  ] )\n\n  \n   eio_stat() returns file status information in\n   result argument of callback\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     The file path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_stat() returns request resource on success or\n   FALSE on error. On success assigns result argument of\n   callback to an array.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_stat() example\n   \n\n&lt;?php$tmp_filename&nbsp;=&nbsp;\"eio-file.tmp\";touch($tmp_filename);function&nbsp;my_res_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);}function&nbsp;my_open_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;eio_close($result);&nbsp;&nbsp;&nbsp;&nbsp;eio_event_loop();&nbsp;&nbsp;&nbsp;&nbsp;@unlink($data);}eio_stat($tmp_filename,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_res_cb\",&nbsp;\"eio_stat\");eio_open($tmp_filename,&nbsp;EIO_O_RDONLY,&nbsp;NULL,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_open_cb\",&nbsp;$tmp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(8) &quot;eio_stat&quot;\narray(12) {\n  [&quot;st_dev&quot;]=&gt;\n  int(2050)\n  [&quot;st_ino&quot;]=&gt;\n  int(2489173)\n  [&quot;st_mode&quot;]=&gt;\n  int(33188)\n  [&quot;st_nlink&quot;]=&gt;\n  int(1)\n  [&quot;st_uid&quot;]=&gt;\n  int(1000)\n  [&quot;st_gid&quot;]=&gt;\n  int(100)\n  [&quot;st_rdev&quot;]=&gt;\n  int(0)\n  [&quot;st_blksize&quot;]=&gt;\n  int(4096)\n  [&quot;st_blocks&quot;]=&gt;\n  int(0)\n  [&quot;st_atime&quot;]=&gt;\n  int(1318250380)\n  [&quot;st_mtime&quot;]=&gt;\n  int(1318250380)\n  [&quot;st_ctime&quot;]=&gt;\n  int(1318250380)\n}\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_lstat\n   eio_fstat\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-statvfs.php","title":"eio_statvfs","description":"\n \n  eio_statvfs\n  (PECL eio &gt;= 0.0.1dev)eio_statvfs &mdash; Get file system statistics\n\n \n\n \n  Description\n  \n   resource eio_statvfs\n    ( string $path\n   , int $pri\n   , mixed $callback\n   [, mixed $data\n  ] )\n\n  \n  eio_statvfs() returns file system statistics information in\n  result argument of callback\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Pathname of any file within the mounted file system\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n     The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n  eio_statvfs() returns request resource on success or\n  FALSE on error. On success assigns result argument of\n  callback to an array.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_statvfs() example\n   \n\n&lt;?php$tmp_filename&nbsp;=&nbsp;'\/tmp\/eio-file.tmp';touch($tmp_filename);function&nbsp;my_statvfs_callback($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($data);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);&nbsp;@unlink($data);}eio_statvfs($tmp_filename,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_statvfs_callback\",&nbsp;$tmp_filename);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nstring(17) &quot;\/tmp\/eio-file.tmp&quot;\narray(11) {\n  [&quot;f_bsize&quot;]=&gt;\n  int(4096)\n  [&quot;f_frsize&quot;]=&gt;\n  int(4096)\n  [&quot;f_blocks&quot;]=&gt;\n  int(262144)\n  [&quot;f_bfree&quot;]=&gt;\n  int(262111)\n  [&quot;f_bavail&quot;]=&gt;\n  int(262111)\n  [&quot;f_files&quot;]=&gt;\n  int(1540815)\n  [&quot;f_ffree&quot;]=&gt;\n  int(1540743)\n  [&quot;f_favail&quot;]=&gt;\n  int(1540743)\n  [&quot;f_fsid&quot;]=&gt;\n  int(0)\n  [&quot;f_flag&quot;]=&gt;\n  int(4102)\n  [&quot;f_namemax&quot;]=&gt;\n  int(255)\n}\n\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-syncfs.php","title":"eio_syncfs","description":"\n \n  eio_syncfs\n  (PECL eio &gt;= 0.0.1dev)eio_syncfs &mdash; Calls Linux&#039; syncfs syscall, if available\n\n \n\n \n  Description\n  \n   resource eio_syncfs\n    ( string $fd\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     File descriptor\n\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_syncfs() returns request resource on success or FALSE on error.\n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sync.php","title":"eio_sync","description":"\n \n  eio_sync\n  (PECL eio &gt;= 0.0.1dev)eio_sync &mdash; Commit buffer cache to disk\n\n \n\n \n  Description\n  \n   resource eio_sync\n    ( void\n   )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   eio_sync() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-sync-file-range.php","title":"eio_sync_file_range","description":"\n \n  eio_sync_file_range\n  (PECL eio &gt;= 0.0.1dev)eio_sync_file_range &mdash; Sync a file segment with disk\n\n \n\n \n  Description\n  \n   resource eio_sync_file_range\n    ( int $fd\n   , int $offset\n   , int $nbytes\n   , int $flags\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n   eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file\n descriptor fd with disk.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     File descriptor\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     The starting byte of the file range to be synchronized\n     \n    \n\n   \n\n   \n\n    nbytes\n    \n\n     \n     Specifies the length of the range to be synchronized, in bytes. If\n     nbytes is zero, then all bytes from offset through\n     to the end of file are synchronized.\n     \n    \n\n   \n\n   \n\n    flags\n    \n\n     \n     A bit-mask. Can include any of the following values:\n     EIO_SYNC_FILE_RANGE_WAIT_BEFORE,\n     EIO_SYNC_FILE_RANGE_WRITE,\n     EIO_SYNC_FILE_RANGE_WAIT_AFTER. These flags have\n     the same meaning as their SYNC_FILE_RANGE_*\n     counterparts(see SYNC_FILE_RANGE(2) man page).\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_sync_file_range() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-symlink.php","title":"eio_symlink","description":"\n \n  eio_symlink\n  (PECL eio &gt;= 0.0.1dev)eio_symlink &mdash; Create a symbolic link\n\n \n\n \n  Description\n  \n   ReturnType eio_symlink\n    ( string $path\n   , string $new_path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n\n  ]]] )\n\n  \n  eio_symlink() creates a symbolic link\n  new_path to path.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Source path\n     \n    \n\n   \n\n   \n\n    new_path\n    \n\n     \n     Target path\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_symlink() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   Example #1 eio_symlink() example\n   \n\n&lt;?php$filename&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.dat\";touch($filename);$link&nbsp;=&nbsp;dirname(__FILE__).\"\/symlink.link\";function&nbsp;my_symlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$link,&nbsp;$filename;&nbsp;&nbsp;&nbsp;&nbsp;var_dump(file_exists($data)&nbsp;&amp;&amp;&nbsp;is_link($data));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!eio_readlink($data,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_readlink_cb\",&nbsp;NULL))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);&nbsp;&nbsp;&nbsp;&nbsp;}}function&nbsp;my_readlink_cb($data,&nbsp;$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$filename,&nbsp;$link;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($result);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($link);&nbsp;&nbsp;&nbsp;&nbsp;@unlink($filename);}eio_symlink($filename,&nbsp;$link,&nbsp;EIO_PRI_DEFAULT,&nbsp;\"my_symlink_cb\",&nbsp;$link);eio_event_loop();?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nbool(true)\nstring(16) &quot;\/tmp\/symlink.dat&quot;\n\n   \n  \n \n\n\n\n \n  See Also\n  \n   eio_link\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-truncate.php","title":"eio_truncate","description":"\n \n  eio_truncate\n  (PECL eio &gt;= 0.0.1dev)eio_truncate &mdash; Truncate a file\n\n \n\n \n  Description\n  \n   resource eio_truncate\n    ( string $path\n   , int $offset\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_truncate() causes the regular file named by path to be truncated to\n  a size of precisely length bytes\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     File path\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Offset from beginning of the file.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_busy() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_ftruncate\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-unlink.php","title":"eio_unlink","description":"\n \n  eio_unlink\n  (PECL eio &gt;= 0.0.1dev)eio_unlink &mdash; Delete a name and possibly the file it refers to\n\n \n\n \n  Description\n  \n   ReturnType eio_unlink\n    ( string $path\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n  eio_unlink() deletes  a  name from the file system.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path to file\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_unlink() returns request resource on success or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-utime.php","title":"eio_utime","description":"\n \n  eio_utime\n  (PECL eio &gt;= 0.0.1dev)eio_utime &mdash; Change file last access and modification times.\n\n \n\n \n  Description\n  \n   resource eio_utime\n    ( string $path\n   , int $atime\n   , int $mtime\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]] )\n\n  \n\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    path\n    \n\n     \n     Path to the file.\n     \n    \n\n   \n\n   \n\n    atime\n    \n\n     \n     Access time\n     \n    \n\n   \n\n   \n\n    mtime\n    \n\n     \n     Modification time\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_utime() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_futime\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eio-write.php","title":"eio_write","description":"\n \n  eio_write\n  (PECL eio &gt;= 0.0.1dev)eio_write &mdash; Write to file\n\n \n\n \n  Description\n  \n   resource eio_write\n    ( int $fd\n   , string &$str\n   [, int $length\n   [, int $offset\n   [, int $pri = EIO_PRI_DEFAULT\n   [, mixed $callback = NULL\n   [, mixed $data = NULL\n  ]]]]] )\n\n  \n  eio_write() writes up to length\n  bytes from str at offset\n  offset from the beginning of the file.\n  \n\n \n\n\n \n  Parameters\n  \n\n   \n\n    fd\n    \n\n     \n     The file descriptor, e.g. returned by eio_open()\n     \n    \n\n   \n\n   \n\n    str\n    \n\n     \n     Source string\n     \n    \n\n   \n\n   \n\n    length\n    \n\n     \n     Maximum number of bytes to write.\n     \n    \n\n   \n\n   \n\n    offset\n    \n\n     \n     Offset from the beginning of file.\n     \n    \n\n   \n\n   \n\n    pri\n    \n\n    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.\nIf NULL passed, pri internally is set to\nEIO_PRI_DEFAULT.\n\n\n    \n\n   \n\n   \n\n    callback\n    \n\n     \ncallback function is called when the request is done. \nIt should match the following prototype: \nvoid&nbsp;callback($data,&nbsp;$result);\n\n\n$data is custom\ndata passed to the request.\n$result contains\nrequest-specific result value; basically, the value returned by corresponding\nsystem call.\n\n\n    \n\n   \n\n   \n\n    data\n    \n\n     \n     Arbitrary variable passed to callback.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   eio_write() returns request resource on success or FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   eio_open\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.escapeshellcmd.php","title":"escapeshellcmd","description":"\n \n  escapeshellcmd\n  (PHP 4, PHP 5)escapeshellcmd &mdash; Escape shell metacharacters\n\n \n\n \n  Description\n  \n   string escapeshellcmd\n    ( string $command\n   )\n\n  \n   escapeshellcmd() escapes any characters in a\n   string that might be used to trick a shell command into executing\n   arbitrary commands.  This function should be used to make sure\n   that any data coming from user input is escaped before this data\n   is passed to the exec() or\n   system() functions, or to the backtick\n   operator.\n  \n  \n   Following characters are preceded by a backslash:\n   #&amp;;`|*?~&lt;&gt;^()[]{}$\\, \\x0A\n   and \\xFF. &#039; and &quot;\n   are escaped only if they are not paired. In Windows, all these characters\n   plus  are replaced by a space instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     command\n     \n\n      \n       The command that will be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The escaped string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 escapeshellcmd() example\n    \n\n&lt;?php\/\/&nbsp;We&nbsp;allow&nbsp;arbitrary&nbsp;number&nbsp;of&nbsp;arguments&nbsp;intentionaly&nbsp;here.$command&nbsp;=&nbsp;'.\/configure&nbsp;'.$_POST['configure_options'];$escaped_command&nbsp;=&nbsp;escapeshellcmd($command);&nbsp;system($escaped_command);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n   Warning\n    \n     escapeshellcmd() should be used on the whole\n     command string, and it still allows the attacker to pass\n     arbitrary number of arguments. For escaping a single argument \n     escapeshellarg() should be used instead.\n    \n   \n \n\n\n \n  See Also\n  \n   \n    escapeshellarg() - Escape a string to be used as a shell argument\n    exec() - Execute an external program\n    popen() - Opens process file pointer\n    system() - Execute an external program and display the output\n    backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.escapeshellarg.php","title":"escapeshellarg","description":"\n \n  escapeshellarg\n  (PHP 4 &gt;= 4.0.3, PHP 5)escapeshellarg &mdash; Escape a string to be used as a shell argument\n\n \n\n \n  Description\n  \n   string escapeshellarg\n    ( string $arg\n   )\n\n  \n   escapeshellarg() adds single quotes around a string\n   and quotes\/escapes any existing single quotes allowing you to pass a\n   string directly to a shell function and having it be treated as a single\n   safe argument.  This function should be used to escape individual\n   arguments to shell functions coming from user input.  The shell functions\n   include exec(), system() and the\n   backtick operator.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument that will be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The escaped string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 escapeshellarg() example\n    \n\n&lt;?phpsystem('ls&nbsp;'.escapeshellarg($dir));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    escapeshellcmd() - Escape shell metacharacters\n    exec() - Execute an external program\n    popen() - Opens process file pointer\n    system() - Execute an external program and display the output\n    backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.passthru.php","title":"passthru","description":"\n \n  passthru\n  (PHP 4, PHP 5)passthru &mdash; Execute an external program and display raw output\n\n \n\n \n  Description\n  \n   void passthru\n    ( string $command\n   [, int &$return_var\n  ] )\n\n  \n   The passthru() function is similar to the\n   exec() function in that it executes a\n   command. This function\n   should be used in place of exec() or\n   system() when the output from the Unix command\n   is binary data which needs to be passed directly back to the\n   browser.  A common use for this is to execute something like the\n   pbmplus utilities that can output an image stream directly.  By\n   setting the Content-type to image\/gif and\n   then calling a pbmplus program to output a gif, you can create\n   PHP scripts that output images directly.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     command\n     \n\n      \n       The command that will be executed.\n      \n     \n\n    \n\n    \n\n     return_var\n     \n\n      \n       If the return_var argument is present, the \n       return status of the Unix command will be placed here.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  WarningWhen allowing user-supplied data to be\npassed to this function, use\nescapeshellarg() or escapeshellcmd()\nto ensure that users cannot trick the system into executing arbitrary\ncommands.\n  Note: If a program is started with this function,\nin order for it to continue running in the background, the output of the\nprogram must be redirected to a file or another output stream. Failing to do so\nwill cause PHP to hang until the execution of the program ends.\n  Note: When\nsafe mode is enabled, you can only\nexecute files within the safe_mode_exec_dir.\nFor practical reasons, it is currently not allowed to have ..\ncomponents in the path to the executable.\n  WarningWith safe mode enabled,\nthe command string is escaped with escapeshellcmd(). Thus,\necho y | echo x becomes echo y \\| echo x.\n \n\n\n \n  See Also\n  \n   \n    exec() - Execute an external program\n    system() - Execute an external program and display the output\n    popen() - Opens process file pointer\n    escapeshellcmd() - Escape shell metacharacters\n    backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.exec.php","title":"exec","description":"\n \n  exec\n  (PHP 4, PHP 5)exec &mdash; Execute an external program\n\n \n\n \n  Description\n  \n   string exec\n    ( string $command\n   [, array &$output\n   [, int &$return_var\n  ]] )\n\n  \n   exec() executes the given\n   command.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     command\n     \n\n      \n       The command that will be executed.\n      \n     \n\n    \n\n    \n\n     output\n     \n\n      \n       If the output argument is present, then the\n       specified array will be filled with every line of output from the\n       command.  Trailing whitespace, such as \\n, is not\n       included in this array.  Note that if the array already contains some\n       elements, exec() will append to the end of the array.\n       If you do not want the function to append elements, call\n       unset() on the array before passing it to\n       exec().\n      \n     \n\n    \n\n    \n\n     return_var\n     \n\n      \n       If the return_var argument is present\n       along with the output argument, then the\n       return status of the executed command will be written to this\n       variable.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The last line from the result of the command.  If you need to execute a \n   command and have all the data from the command passed directly back without \n   any interference, use the passthru() function.\n  \n  \n   To get the output of the executed command, be sure to set and use the\n   output parameter.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 An exec() example\n    \n\n&lt;?php\/\/&nbsp;outputs&nbsp;the&nbsp;username&nbsp;that&nbsp;owns&nbsp;the&nbsp;running&nbsp;php\/httpd&nbsp;process\/\/&nbsp;(on&nbsp;a&nbsp;system&nbsp;with&nbsp;the&nbsp;\"whoami\"&nbsp;executable&nbsp;in&nbsp;the&nbsp;path)echo&nbsp;exec('whoami');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  WarningWhen allowing user-supplied data to be\npassed to this function, use\nescapeshellarg() or escapeshellcmd()\nto ensure that users cannot trick the system into executing arbitrary\ncommands.\n  Note: If a program is started with this function,\nin order for it to continue running in the background, the output of the\nprogram must be redirected to a file or another output stream. Failing to do so\nwill cause PHP to hang until the execution of the program ends.\n  Note: When\nsafe mode is enabled, you can only\nexecute files within the safe_mode_exec_dir.\nFor practical reasons, it is currently not allowed to have ..\ncomponents in the path to the executable.\n  WarningWith safe mode enabled,\nthe command string is escaped with escapeshellcmd(). Thus,\necho y | echo x becomes echo y \\| echo x.\n \n\n\n \n  See Also\n  \n   \n    system() - Execute an external program and display the output\n    passthru() - Execute an external program and display raw output\n    escapeshellcmd() - Escape shell metacharacters\n    pcntl_exec() - Executes specified program in current process space\n    backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-close.php","title":"proc_close","description":"\n \n  proc_close\n  (PHP 4 &gt;= 4.3.0, PHP 5)proc_close &mdash; Close a process opened by proc_open() and return the exit code of that process\n\n \n\n \n  Description\n  \n   int proc_close\n    ( resource $process\n   )\n\n  \n   proc_close() is similar to pclose()\n   except that it only works on processes opened by\n   proc_open().\n   proc_close() waits for the process to terminate, and\n   returns its exit code.  If you have open pipes to that process, you\n   should fclose() them prior to calling this function in\n   order to avoid a deadlock - the child process may not be able to exit\n   while the pipes are open.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     process\n     \n\n      \n       The proc_open() resource that will\n       be closed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the termination status of the process that was run. In case of \n   an error then -1 is returned.\n  \n \n\n\n \n  Notes\n  Note: \n   Unix Only:\n   \n    proc_close() is internally implemented using the \n    waitpid(3) system call. To obtain the real exit \n    status code the pcntl_wexitstatus() function \n    should be used.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-nice.php","title":"proc_nice","description":"\n \n  proc_nice\n  (PHP 5)proc_nice &mdash; Change the priority of the current process\n\n \n\n \n  Description\n  \n   bool proc_nice\n    ( int $increment\n   )\n\n  \n   proc_nice() changes the priority of the current\n   process by the amount specified in increment. A\n   positive increment will lower the priority of the\n   current process, whereas a negative increment\n   will raise the priority.\n  \n  \n   proc_nice() is not related to\n   proc_open() and its associated functions in any way.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     increment\n     \n\n      \n       The increment value of the priority change.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   If an error occurs, like the user lacks permission to change the priority, \n   an error of level E_WARNING is also generated.\n  \n \n\n\n \n  Notes\n  Note: \n   Availability\n   \n    proc_nice() will only exist if your system has &#039;nice&#039;\n    capabilities. &#039;nice&#039; conforms to: SVr4, SVID EXT, AT&amp;T, X\/OPEN, BSD\n    4.3. This means that proc_nice() is not available\n    on Windows.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-get-status.php","title":"proc_get_status","description":"\n \n  proc_get_status\n  (PHP 5)proc_get_status &mdash; Get information about a process opened by proc_open()\n\n \n\n \n  Description\n  \n   array proc_get_status\n    ( resource $process\n   )\n\n  \n   proc_get_status() fetches data about a\n   process opened using proc_open().\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     process\n     \n\n      \n       The proc_open() resource that will\n       be evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of collected information on success, and FALSE\n   on failure. The returned array contains the following elements:\n  \n  \n  \n   \n    \n     elementtypedescription\n\n    \n\n    \n     \n      command\n      string\n      \n       The command string that was passed to proc_open().\n      \n     \n\n     \n      pid\n      int\n      process id\n     \n\n     \n      running\n      bool\n      \n       TRUE if the process is still running, FALSE if it has\n       terminated.\n      \n     \n\n     \n      signaled\n      bool\n      \n       TRUE if the child process has been terminated by\n       an uncaught signal. Always set to FALSE on Windows.\n      \n     \n\n     \n      stopped\n      bool\n      \n       TRUE if the child process has been stopped by a\n       signal. Always set to FALSE on Windows.\n      \n     \n\n     \n      exitcode\n      int\n      \n       The exit code returned by the process (which is only\n       meaningful if running is FALSE).\n       Only first call of this function return real value, next calls return\n       -1.\n      \n     \n\n     \n      termsig\n      int\n      \n       The number of the signal that caused the child process to terminate\n       its execution (only meaningful if signaled is TRUE).\n      \n     \n\n     \n      stopsig\n      int\n      \n       The number of the signal that caused the child process to stop its\n       execution (only meaningful if stopped is TRUE).\n      \n     \n\n    \n   \n  \n\n  \n \n\n\n \n  See Also\n  \n   \n    proc_open() - Execute a command and open file pointers for input\/output\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-terminate.php","title":"proc_terminate","description":"\n \n  proc_terminate\n  (PHP 5)proc_terminate &mdash; Kills a process opened by proc_open\n\n \n\n \n  Description\n  \n   bool proc_terminate\n    ( resource $process\n   [, int $signal = 15\n  ] )\n\n  \n   Signals a process (created using\n   proc_open()) that it should terminate.\n   proc_terminate() returns immediately and does not wait\n   for the process to terminate.\n  \n  \n   proc_terminate() allows you terminate the process and\n   continue with other tasks.  You may poll the process (to see if it has\n   stopped yet) by using the proc_get_status() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     process\n     \n\n      \n       The proc_open() resource that will\n       be closed.\n      \n     \n\n    \n\n    \n\n     signal\n     \n\n      \n       This optional parameter is only useful on POSIX\n       operating systems; you may specify a signal to send to the process\n       using the kill(2) system call.  The default is\n       SIGTERM.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the termination status of the process that was run.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.2\n       \n        Previous versions used to destroy the given process\n        resource.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    proc_open() - Execute a command and open file pointers for input\/output\n    proc_close() - Close a process opened by proc_open and return the exit code of that process\n    proc_get_status() - Get information about a process opened by proc_open\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.proc-open.php","title":"proc_open","description":"\n   \n    proc_open\n    (PHP 4 &gt;= 4.3.0, PHP 5)proc_open &mdash; \n     Execute a command and open file pointers for input\/output\n    \n\n   \n   \n    Description\n     \n      resource proc_open\n       ( string $cmd\n      , array $descriptorspec\n      , array &$pipes\n      [, string $cwd\n      [, array $env\n      [, array $other_options\n     ]]] )\n\n    \n     proc_open() is similar to popen()\n     but provides a much greater degree of control over the program execution.\n    \n\n\n\n   \n\n\n \n  Parameters\n  \n   \n\n    \n\n     cmd\n     \n\n      \n       The command to execute\n      \n     \n\n    \n\n    \n\n     descriptorspec\n     \n\n      \n       An indexed array where the key represents the descriptor number and the\n       value represents how PHP will pass that descriptor to the child\n       process. 0 is stdin, 1 is stdout, while 2 is stderr.\n      \n      \n       Each element can be:\n       \n        An array describing the pipe to pass to the process. The first\n         element is the descriptor type and the second element is an option for\n         the given type. Valid types are pipe (the second\n         element is either r to pass the read end of the pipe\n         to the process, or w to pass the write end) and\n         file (the second element is a filename).\n        \n        \n         A stream resource representing a real file descriptor (e.g. opened file,\n         a socket, STDIN).\n        \n       \n      \n      \n       The file descriptor numbers are not limited to 0, 1 and 2 - you may\n       specify any valid file descriptor number and it will be passed to the\n       child process. This allows your script to interoperate with other\n       scripts that run as &quot;co-processes&quot;. In particular, this is useful for\n       passing passphrases to programs like PGP, GPG and openssl in a more\n       secure manner. It is also useful for reading status information\n       provided by those programs on auxiliary file descriptors.\n      \n     \n\n    \n\n    \n\n     pipes\n     \n\n      \n       Will be set to an indexed array of file pointers that correspond to\n       PHP&#039;s end of any pipes that are created.\n      \n     \n\n    \n\n    \n\n     cwd\n     \n\n      \n       The initial working dir for the command. This must be an\n       absolute directory path, or NULL\n       if you want to use the default value (the working dir of the current\n       PHP process)\n      \n     \n\n    \n\n    \n\n     env\n     \n\n      \n       An array with the environment variables for the command that will be\n       run, or NULL to use the same environment as the current PHP process\n      \n     \n\n    \n\n    \n\n     other_options\n     \n\n      \n       Allows you to specify additional options. Currently supported options\n       include:\n       \n        \n         suppress_errors (windows only): suppresses errors\n         generated by this function when it&#039;s set to TRUE\n        \n        \n         bypass_shell (windows only): bypass\n         cmd.exe shell when set to TRUE\n        \n        \n         context: stream context used when opening files\n         (created with stream_context_create())\n        \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource representing the process, which should be freed using\n   proc_close() when you are finished with it. On failure\n   returns FALSE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      \n       5.2.1\n       \n        Added the bypass_shell option to the\n        other_options parameter.\n       \n      \n\n      \n       5.0.0\n       \n        Added the cwd, env and\n        other_options parameters.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A proc_open() example\n    \n\n&lt;?php$descriptorspec&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;0&nbsp;=&gt;&nbsp;array(\"pipe\",&nbsp;\"r\"),&nbsp;&nbsp;\/\/&nbsp;stdin&nbsp;is&nbsp;a&nbsp;pipe&nbsp;that&nbsp;the&nbsp;child&nbsp;will&nbsp;read&nbsp;from&nbsp;&nbsp;&nbsp;1&nbsp;=&gt;&nbsp;array(\"pipe\",&nbsp;\"w\"),&nbsp;&nbsp;\/\/&nbsp;stdout&nbsp;is&nbsp;a&nbsp;pipe&nbsp;that&nbsp;the&nbsp;child&nbsp;will&nbsp;write&nbsp;to&nbsp;&nbsp;&nbsp;2&nbsp;=&gt;&nbsp;array(\"file\",&nbsp;\"\/tmp\/error-output.txt\",&nbsp;\"a\")&nbsp;\/\/&nbsp;stderr&nbsp;is&nbsp;a&nbsp;file&nbsp;to&nbsp;write&nbsp;to);$cwd&nbsp;=&nbsp;'\/tmp';$env&nbsp;=&nbsp;array('some_option'&nbsp;=&gt;&nbsp;'aeiou');$process&nbsp;=&nbsp;proc_open('php',&nbsp;$descriptorspec,&nbsp;$pipes,&nbsp;$cwd,&nbsp;$env);if&nbsp;(is_resource($process))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;$pipes&nbsp;now&nbsp;looks&nbsp;like&nbsp;this:&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;0&nbsp;=&gt;&nbsp;writeable&nbsp;handle&nbsp;connected&nbsp;to&nbsp;child&nbsp;stdin&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;1&nbsp;=&gt;&nbsp;readable&nbsp;handle&nbsp;connected&nbsp;to&nbsp;child&nbsp;stdout&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Any&nbsp;error&nbsp;output&nbsp;will&nbsp;be&nbsp;appended&nbsp;to&nbsp;\/tmp\/error-output.txt&nbsp;&nbsp;&nbsp;&nbsp;fwrite($pipes[0],&nbsp;'&lt;?php&nbsp;print_r($_ENV);&nbsp;?&gt;');&nbsp;&nbsp;&nbsp;&nbsp;fclose($pipes[0]);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;stream_get_contents($pipes[1]);&nbsp;&nbsp;&nbsp;&nbsp;fclose($pipes[1]);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;It&nbsp;is&nbsp;important&nbsp;that&nbsp;you&nbsp;close&nbsp;any&nbsp;pipes&nbsp;before&nbsp;calling&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;proc_close&nbsp;in&nbsp;order&nbsp;to&nbsp;avoid&nbsp;a&nbsp;deadlock&nbsp;&nbsp;&nbsp;&nbsp;$return_value&nbsp;=&nbsp;proc_close($process);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"command&nbsp;returned&nbsp;$return_value\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [some_option] =&gt; aeiou\n    [PWD] =&gt; \/tmp\n    [SHLVL] =&gt; 1\n    [_] =&gt; \/usr\/local\/bin\/php\n)\ncommand returned 0\n\n    \n   \n  \n\n\n\n \n\n\n \n  Notes\n  Note: \n   \n    Windows compatibility: Descriptors beyond 2 (stderr) are made available to\n    the child process as inheritable handles, but since the Windows\n    architecture does not associate file descriptor numbers with low-level\n    handles, the child process does not (yet) have a means of accessing those\n    handles. Stdin, stdout and stderr work as expected.\n   \n  \n  Note: \n   \n   If you only need a uni-directional (one-way) process pipe, use\n   popen() instead, as it is much easier to use.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    popen() - Opens process file pointer\n    exec() - Execute an external program\n    system() - Execute an external program and display the output\n    passthru() - Execute an external program and display raw output\n    stream_select() - Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec\n    The backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.shell-exec.php","title":"shell_exec","description":"\n \n  shell_exec\n  (PHP 4, PHP 5)shell_exec &mdash; Execute command via shell and return the complete output as a string\n\n \n\n \n  Description\n  \n   string shell_exec\n    ( string $cmd\n   )\n\n  \n   This function is identical to the backtick operator.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     cmd\n     \n\n      \n       The command that will be executed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The output from the executed command.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A shell_exec() example\n    \n\n&lt;?php$output&nbsp;=&nbsp;shell_exec('ls&nbsp;-lart');echo&nbsp;\"&lt;pre&gt;$output&lt;\/pre&gt;\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function is disabled when PHP is running in safe mode.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    exec() - Execute an external program\n    escapeshellcmd() - Escape shell metacharacters\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.system.php","title":"system","description":"\n \n  system\n  (PHP 4, PHP 5)system &mdash; Execute an external program and display the output\n\n \n\n \n  Description\n  \n   string system\n    ( string $command\n   [, int &$return_var\n  ] )\n\n  \n   system() is just like the C version of the\n   function in that it executes the given\n   command and outputs the result.\n  \n  \n   The system() call also tries to automatically\n   flush the web server&#039;s output buffer after each line of output if\n   PHP is running as a server module.\n  \n  \n   If you need to execute a command and have all the data from the\n   command passed directly back without any interference, use the\n   passthru() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     command\n     \n\n      \n       The command that will be executed.\n      \n     \n\n    \n\n    \n\n     return_var\n     \n\n      \n       If the return_var argument is present, then the\n       return status of the executed command will be written to this\n       variable.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the last line of the command output on success, and FALSE\n   on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 system() example\n    \n\n&lt;?phpecho&nbsp;'&lt;pre&gt;';\/\/&nbsp;Outputs&nbsp;all&nbsp;the&nbsp;result&nbsp;of&nbsp;shellcommand&nbsp;\"ls\",&nbsp;and&nbsp;returns\/\/&nbsp;the&nbsp;last&nbsp;output&nbsp;line&nbsp;into&nbsp;$last_line.&nbsp;Stores&nbsp;the&nbsp;return&nbsp;value\/\/&nbsp;of&nbsp;the&nbsp;shell&nbsp;command&nbsp;in&nbsp;$retval.$last_line&nbsp;=&nbsp;system('ls',&nbsp;$retval);\/\/&nbsp;Printing&nbsp;additional&nbsp;infoecho&nbsp;'&lt;\/pre&gt;&lt;hr&nbsp;\/&gt;Last&nbsp;line&nbsp;of&nbsp;the&nbsp;output:&nbsp;'&nbsp;.&nbsp;$last_line&nbsp;.&nbsp;'&lt;hr&nbsp;\/&gt;Return&nbsp;value:&nbsp;'&nbsp;.&nbsp;$retval;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  WarningWhen allowing user-supplied data to be\npassed to this function, use\nescapeshellarg() or escapeshellcmd()\nto ensure that users cannot trick the system into executing arbitrary\ncommands.\n  Note: If a program is started with this function,\nin order for it to continue running in the background, the output of the\nprogram must be redirected to a file or another output stream. Failing to do so\nwill cause PHP to hang until the execution of the program ends.\n  Note: When\nsafe mode is enabled, you can only\nexecute files within the safe_mode_exec_dir.\nFor practical reasons, it is currently not allowed to have ..\ncomponents in the path to the executable.\n  WarningWith safe mode enabled,\nthe command string is escaped with escapeshellcmd(). Thus,\necho y | echo x becomes echo y \\| echo x.\n \n\n\n \n  See Also\n  \n   \n    exec() - Execute an external program\n    passthru() - Execute an external program and display raw output\n    popen() - Opens process file pointer\n    escapeshellcmd() - Escape shell metacharacters\n    pcntl_exec() - Executes specified program in current process space\n    backtick operator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chgrp.php","title":"chgrp","description":"\n \n  chgrp\n  (PHP 4, PHP 5)chgrp &mdash; Changes file group\n\n \n \n \n  Description\n  \n   bool chgrp\n    ( string $filename\n   , mixed $group\n   )\n\n  \n   Attempts to change the group of the file filename\n   to group.\n  \n  \n   Only the superuser may change the group of a file arbitrarily; other users\n   may change the group of a file to any group of which that user is a member.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     group\n     \n\n      \n       A group name or number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Changing a file&#039;s group\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'shared_file.txt';$format&nbsp;=&nbsp;\"%s's&nbsp;Group&nbsp;ID&nbsp;@&nbsp;%s:&nbsp;%d\\n\";printf($format,&nbsp;$filename,&nbsp;date('r'),&nbsp;filegroup($filename));chgrp($filename,&nbsp;8);clearstatcache();&nbsp;\/\/&nbsp;do&nbsp;not&nbsp;cache&nbsp;filegroup()&nbsp;resultsprintf($format,&nbsp;$filename,&nbsp;date('r'),&nbsp;filegroup($filename));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    chown() - Changes file owner\n    chmod() - Changes file mode\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.basename.php","title":"basename","description":"\n \n  basename\n  (PHP 4, PHP 5)basename &mdash; Returns trailing name component of path\n\n \n \n \n  Description\n  \n   string basename\n    ( string $path\n   [, string $suffix\n  ] )\n\n  \n   Given a string containing the path to a file or directory, this function\n   will return the trailing name component.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       A path.\n      \n      \n       On Windows, both slash (\/) and backslash\n       (\\) are used as directory separator character. In\n       other environments, it is the forward slash (\/).\n      \n     \n\n    \n\n    \n\n     suffix\n     \n\n      \n       If the name component ends in suffix this will also\n       be cut off.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the base name of the given path.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The suffix parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 basename() example\n    \n\n&lt;?phpecho&nbsp;\"1)&nbsp;\".basename(\"\/etc\/sudoers.d\",&nbsp;\".d\").PHP_EOL;echo&nbsp;\"2)&nbsp;\".basename(\"\/etc\/passwd\").PHP_EOL;echo&nbsp;\"3)&nbsp;\".basename(\"\/etc\/\").PHP_EOL;echo&nbsp;\"4)&nbsp;\".basename(\".\").PHP_EOL;echo&nbsp;\"5)&nbsp;\".basename(\"\/\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1) sudoers\n2) passwd\n3) etc\n4) .\n5) \n\n    \n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    basename() operates naively on the input string,\n    and is not aware of the actual filesystem, or path components such\n    as &quot;..&quot;.\n   \n  \n  Note: \n   \n    basename() is locale aware, so for it to see the \n    correct basename with multibyte character paths, the matching locale must \n    be set using the setlocale() function.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    dirname() - Returns parent directory's path\n    pathinfo() - Returns information about a file path\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chown.php","title":"chown","description":"\n \n  chown\n  (PHP 4, PHP 5)chown &mdash; Changes file owner\n\n \n \n \n  Description\n  \n   bool chown\n    ( string $filename\n   , mixed $user\n   )\n\n  \n   Attempts to change the owner of the file filename\n   to user user. Only the superuser may change the\n   owner of a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     user\n     \n\n      \n       A user name or number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Simple chown() usage\n    \n\n&lt;?php\/\/&nbsp;File&nbsp;name&nbsp;and&nbsp;username&nbsp;to&nbsp;use$file_name=&nbsp;\"foo.php\";$path&nbsp;=&nbsp;\"\/home\/sites\/php.net\/public_html\/sandbox\/\"&nbsp;.&nbsp;$file_name&nbsp;;$user_name&nbsp;=&nbsp;\"root\";\/\/&nbsp;Set&nbsp;the&nbsp;userchown($path,&nbsp;$user_name);\/\/&nbsp;Check&nbsp;the&nbsp;result$stat&nbsp;=&nbsp;stat($path);print_r(posix_getpwuid($stat['uid']));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [name] =&gt; root\n    [passwd] =&gt; x\n    [uid] =&gt; 0\n    [gid] =&gt; 0\n    [gecos] =&gt; root\n    [dir] =&gt; \/root\n    [shell] =&gt; \/bin\/bash\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    chmod() - Changes file mode\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.clearstatcache.php","title":"clearstatcache","description":"\n \n  clearstatcache\n  (PHP 4, PHP 5)clearstatcache &mdash; Clears file status cache\n\n \n \n \n  Description\n  \n   void clearstatcache\n    ([ bool $clear_realpath_cache = false\n   [, string $filename\n  ]] )\n\n  \n   When you use stat(), lstat(), or\n   any of the other functions listed in the affected functions list (below),\n   PHP caches the information those functions return in order to provide\n   faster performance. However, in certain cases, you may want to clear the\n   cached information. For instance, if the same file is being checked\n   multiple times within a single script, and that file is in danger of\n   being removed or changed during that script&#039;s operation, you may elect to\n   clear the status cache.  In these cases, you can use the\n   clearstatcache() function to clear the information\n   that PHP caches about a file.\n  \n  \n   You should also note that PHP doesn&#039;t cache information about non-existent\n   files. So, if you call file_exists() on a file that\n   doesn&#039;t exist, it will return FALSE until you create the file. If you\n   create the file, it will return TRUE even if you then delete the file.\n   However unlink() clears the cache automatically.\n  \n  Note: \n   \n    This function caches information about specific filenames, so you only\n    need to call clearstatcache() if you are performing\n    multiple operations on the same filename and require the information\n    about that particular file to not be cached.\n   \n  \n  \n   Affected functions include stat(),\n   lstat(),\n   file_exists(),\n   is_writable(),\n   is_readable(),\n   is_executable(),\n   is_file(),\n   is_dir(),\n   is_link(),\n   filectime(),\n   fileatime(),\n   filemtime(),\n   fileinode(),\n   filegroup(),\n   fileowner(),\n   filesize(),\n   filetype(), and\n   fileperms().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     clear_realpath_cache\n     \n\n      \n       Whether to clear the realpath cache or not.\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       Clear the realpath cache for a specific filename; only used if\n       clear_realpath_cache is TRUE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Added optional clear_realpath_cache \n        and filename parameters.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 clearstatcache() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'output_log.txt';function&nbsp;get_owner($file){&nbsp;&nbsp;&nbsp;&nbsp;$stat&nbsp;=&nbsp;stat($file);&nbsp;&nbsp;&nbsp;&nbsp;$user&nbsp;=&nbsp;posix_getpwuid($stat['uid']);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$user['name'];}$format&nbsp;=&nbsp;\"UID&nbsp;@&nbsp;%s:&nbsp;%s\\n\";printf($format,&nbsp;date('r'),&nbsp;get_owner($file));chown($file,&nbsp;'ross');printf($format,&nbsp;date('r'),&nbsp;get_owner($file));clearstatcache();printf($format,&nbsp;date('r'),&nbsp;get_owner($file));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nUID @ Sun, 12 Oct 2008 20:48:28 +0100: root\nUID @ Sun, 12 Oct 2008 20:48:28 +0100: root\nUID @ Sun, 12 Oct 2008 20:48:28 +0100: ross\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chmod.php","title":"chmod","description":"\n \n  chmod\n  (PHP 4, PHP 5)chmod &mdash; Changes file mode\n\n \n \n \n  Description\n  \n   bool chmod\n    ( string $filename\n   , int $mode\n   )\n\n  \n   Attempts to change the mode of the specified file to that given in\n   mode.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Note that mode is not automatically\n       assumed to be an octal value, so strings (such as &quot;g+w&quot;) will\n       not work properly. To ensure the expected operation,\n       you need to prefix mode with a zero (0):\n      \n      \n       \n        \n\n&lt;?phpchmod(\"\/somedir\/somefile\",&nbsp;755);&nbsp;&nbsp;&nbsp;\/\/&nbsp;decimal;&nbsp;probably&nbsp;incorrectchmod(\"\/somedir\/somefile\",&nbsp;\"u+rwx,go+rx\");&nbsp;\/\/&nbsp;string;&nbsp;incorrectchmod(\"\/somedir\/somefile\",&nbsp;0755);&nbsp;&nbsp;\/\/&nbsp;octal;&nbsp;correct&nbsp;value&nbsp;of&nbsp;mode?&gt;\n\n\n        \n\n       \n      \n      \n       The mode parameter consists of three octal\n       number components specifying access restrictions for the owner,\n       the user group in which the owner is in, and to everybody else in\n       this order. One component can be computed by adding up the needed\n       permissions for that target user base. Number 1 means that you\n       grant execute rights, number 2 means that you make the file\n       writeable, number 4 means that you make the file readable. Add\n       up these numbers to specify needed rights. You can also read more\n       about modes on Unix systems with &#039;man 1 chmod&#039;\n       and &#039;man 2 chmod&#039;.\n      \n      \n       \n        \n\n&lt;?php\/\/&nbsp;Read&nbsp;and&nbsp;write&nbsp;for&nbsp;owner,&nbsp;nothing&nbsp;for&nbsp;everybody&nbsp;elsechmod(\"\/somedir\/somefile\",&nbsp;0600);\/\/&nbsp;Read&nbsp;and&nbsp;write&nbsp;for&nbsp;owner,&nbsp;read&nbsp;for&nbsp;everybody&nbsp;elsechmod(\"\/somedir\/somefile\",&nbsp;0644);\/\/&nbsp;Everything&nbsp;for&nbsp;owner,&nbsp;read&nbsp;and&nbsp;execute&nbsp;for&nbsp;otherschmod(\"\/somedir\/somefile\",&nbsp;0755);\/\/&nbsp;Everything&nbsp;for&nbsp;owner,&nbsp;read&nbsp;and&nbsp;execute&nbsp;for&nbsp;owner's&nbsp;groupchmod(\"\/somedir\/somefile\",&nbsp;0750);?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    The current user is the user under which PHP runs. It is probably not the\n    same user you use for normal shell or FTP access. The mode can be changed\n    only by user who owns the file on most systems.\n   \n  \n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: \n   \n    When safe mode is enabled, PHP checks whether the files or directories\n    you are about to operate on have the same UID (owner) as the script that\n    is being executed. In addition, you cannot set the SUID, SGID and sticky\n    bits.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    chown() - Changes file owner\n    chgrp() - Changes file group\n    fileperms() - Gets file permissions\n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.delete.php","title":"delete","description":"\n \n  delete\n  delete &mdash; See unlink() or unset()\n\n \n \n \n  Description\n  \n   void delete\n    ( void\n   )\n\n  \n   This is a dummy manual entry to satisfy those people who are looking for\n   unlink() or unset() in the wrong\n   place.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    unlink() - Deletes a file\n    unset() - Unset a given variable\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.copy.php","title":"copy","description":"\n \n  copy\n  (PHP 4, PHP 5)copy &mdash; Copies file\n\n \n \n \n  Description\n  \n   bool copy\n    ( string $source\n   , string $dest\n   [, resource $context\n  ] )\n\n  \n   Makes a copy of the file source to\n   dest.\n  \n  \n   If you wish to move a file, use the rename() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     source\n     \n\n      \n       Path to the source file.\n      \n     \n\n    \n\n    \n\n     dest\n     \n\n      \n       The destination path. If dest is a URL, the\n       copy operation may fail if the wrapper does not support overwriting of\n       existing files.\n      \n      Warning\n       \n        If the destination file already exists, it will be overwritten.\n       \n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A valid context resource created with \n       stream_context_create().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Added context support.\n       \n      \n\n      \n       4.3.0\n       \n        Both source and dest\n        may now be URLs if the &quot;fopen wrappers&quot; have been enabled.\n        See fopen() for more details.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 copy() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'example.txt';$newfile&nbsp;=&nbsp;'example.txt.bak';if&nbsp;(!copy($file,&nbsp;$newfile))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"failed&nbsp;to&nbsp;copy&nbsp;$file...\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    move_uploaded_file() - Moves an uploaded file to a new location\n    rename() - Renames a file or directory\n    The section of the manual about handling file uploads\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.diskfreespace.php","title":"diskfreespace","description":"\n \n  diskfreespace\n  (PHP 4, PHP 5)diskfreespace &mdash; Alias of disk_free_space()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   disk_free_space().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.disk-free-space.php","title":"disk_free_space","description":"\n \n  disk_free_space\n  (PHP 4 &gt;= 4.1.0, PHP 5)disk_free_space &mdash; Returns available space on filesystem or disk partition\n\n \n \n \n  Description\n  \n   float disk_free_space\n    ( string $directory\n   )\n\n  \n   Given a string containing a directory, this function will return the\n   number of bytes available on the corresponding filesystem or disk\n   partition.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     directory\n     \n\n      \n       A directory of the filesystem or disk partition.\n      \n      Note: \n       \n        Given a file name instead of a directory, the behaviour of the\n        function is unspecified and may differ between operating systems and\n        PHP versions.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of available bytes as a float\n    or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 disk_free_space() example\n    \n\n&lt;?php\/\/&nbsp;$df&nbsp;contains&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;available&nbsp;on&nbsp;\"\/\"$df&nbsp;=&nbsp;disk_free_space(\"\/\");\/\/&nbsp;On&nbsp;Windows:$df_c&nbsp;=&nbsp;disk_free_space(\"C:\");$df_d&nbsp;=&nbsp;disk_free_space(\"D:\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n \n\n\n \n  See Also\n  \n   \n    disk_total_space() - Returns the total size of a filesystem or disk partition\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dirname.php","title":"dirname","description":"\n \n  dirname\n  (PHP 4, PHP 5)dirname &mdash; Returns parent directory&#039;s path\n\n \n \n \n  Description\n  \n   string dirname\n    ( string $path\n   )\n\n  \n   Given a string containing the path of a file or directory,\n   this function will return the parent directory&#039;s path.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       A path.\n      \n      \n       On Windows, both slash (\/) and backslash\n       (\\) are used as directory separator character. In\n       other environments, it is the forward slash (\/).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the path of the parent directory. If there are no slashes in\n   path, a dot (&#039;.&#039;) is returned,\n   indicating the current directory. Otherwise, the returned string is\n   path with any trailing\n   \/component removed.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        dirname() is now binary safe\n       \n      \n\n      \n       4.0.3\n       \n        dirname() was fixed to be POSIX-compliant.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 dirname() example\n    \n\n&lt;?phpecho&nbsp;\"1)&nbsp;\"&nbsp;.&nbsp;dirname(\"\/etc\/passwd\")&nbsp;.&nbsp;PHP_EOL;&nbsp;\/\/&nbsp;1)&nbsp;\/etcecho&nbsp;\"2)&nbsp;\"&nbsp;.&nbsp;dirname(\"\/etc\/\")&nbsp;.&nbsp;PHP_EOL;&nbsp;\/\/&nbsp;2)&nbsp;\/&nbsp;(or&nbsp;\\&nbsp;on&nbsp;Windows)echo&nbsp;\"3)&nbsp;\"&nbsp;.&nbsp;dirname(\".\");&nbsp;\/\/&nbsp;3)&nbsp;.?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    dirname() operates naively on the input string,\n    and is not aware of the actual filesystem, or path components such\n    as &quot;..&quot;.\n   \n  \n  Note: \n   \n    dirname() is locale aware, so for it to see the \n    correct directory name with multibyte character paths, the matching locale must \n    be set using the setlocale() function.\n   \n  \n  Note: \n   \n    Since PHP 4.3.0, you will often get a slash or a dot back from\n    dirname() in situations where the older\n    functionality would have given you the empty string.\n   \n  \n  \n   Check the following change example:\n   \n    \n\n&lt;?php\/\/before&nbsp;PHP&nbsp;4.3.0dirname('c:\/');&nbsp;\/\/&nbsp;returned&nbsp;'.'\/\/after&nbsp;PHP&nbsp;4.3.0dirname('c:\/x');&nbsp;\/\/&nbsp;returns&nbsp;'c:\\'dirname('c:\/Temp\/x');&nbsp;\/\/&nbsp;returns&nbsp;'c:\/Temp'dirname('\/x');&nbsp;\/\/&nbsp;returns&nbsp;'\\'?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    basename() - Returns trailing name component of path\n    pathinfo() - Returns information about a file path\n    realpath() - Returns canonicalized absolute pathname\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.disk-total-space.php","title":"disk_total_space","description":"\n \n  disk_total_space\n  (PHP 4 &gt;= 4.1.0, PHP 5)disk_total_space &mdash; Returns the total size of a filesystem or disk partition\n\n \n \n \n  Description\n  \n   float disk_total_space\n    ( string $directory\n   )\n\n  \n   Given a string containing a directory, this function will return the total\n   number of bytes on the corresponding filesystem or disk partition.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     directory\n     \n\n      \n       A directory of the filesystem or disk partition.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the total number of bytes as a float\n    or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 disk_total_space() example\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;contains&nbsp;the&nbsp;total&nbsp;number&nbsp;of&nbsp;bytes&nbsp;available&nbsp;on&nbsp;\"\/\"$ds&nbsp;=&nbsp;disk_total_space(\"\/\");\/\/&nbsp;On&nbsp;Windows:$ds&nbsp;=&nbsp;disk_total_space(\"C:\");$ds&nbsp;=&nbsp;disk_total_space(\"D:\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n \n\n\n \n  See Also\n  \n   \n    disk_free_space() - Returns available space on filesystem or disk partition\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fclose.php","title":"fclose","description":"\n \n  fclose\n  (PHP 4, PHP 5)fclose &mdash; Closes an open file pointer\n\n \n \n \n  Description\n  \n   bool fclose\n    ( resource $handle\n   )\n\n  \n   The file pointed to by handle is closed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The file pointer must be valid, and must point to a file successfully\n       opened by fopen() or fsockopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple fclose() example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;fopen('somefile.txt',&nbsp;'r');fclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fopen() - Opens file or URL\n    fsockopen() - Open Internet or Unix domain socket connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fflush.php","title":"fflush","description":"\n \n  fflush\n  (PHP 4 &gt;= 4.0.1, PHP 5)fflush &mdash; Flushes the output to a file\n\n \n \n \n  Description\n  \n   bool fflush\n    ( resource $handle\n   )\n\n  \n   This function forces a write of all buffered output to the resource\n   pointed to by the file handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 File write example using fflush()\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'bar.txt';$file&nbsp;=&nbsp;fopen($filename,&nbsp;'r+');rewind($file);fwrite($file,&nbsp;'Foo');fflush($file);ftruncate($file,&nbsp;ftell($file));fclose($file);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    clearstatcache() - Clears file status cache\n    fwrite() - Binary-safe file write\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.feof.php","title":"feof","description":"\n \n  feof\n  (PHP 4, PHP 5)feof &mdash; Tests for end-of-file on a file pointer\n\n \n \n \n  Description\n  \n   bool feof\n    ( resource $handle\n   )\n\n  \n   Tests for end-of-file on a file pointer.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the file pointer is at EOF or an error occurs\n   (including socket timeout); otherwise returns FALSE.\n  \n \n\n \n \n  Notes\n  Warning\n   \n    If a connection opened by fsockopen() wasn&#039;t closed\n    by the server, feof() will hang. To workaround this, see \n    below example:\n    \n     Example #1 Handling timeouts with feof()\n     \n\n&lt;?phpfunction&nbsp;safe_feof($fp,&nbsp;&amp;$start&nbsp;=&nbsp;NULL)&nbsp;{&nbsp;$start&nbsp;=&nbsp;microtime(true);&nbsp;return&nbsp;feof($fp);}\/*&nbsp;Assuming&nbsp;$fp&nbsp;is&nbsp;previously&nbsp;opened&nbsp;by&nbsp;fsockopen()&nbsp;*\/$start&nbsp;=&nbsp;NULL;$timeout&nbsp;=&nbsp;ini_get('default_socket_timeout');while(!safe_feof($fp,&nbsp;$start)&nbsp;&amp;&amp;&nbsp;(microtime(true)&nbsp;-&nbsp;$start)&nbsp;&lt;&nbsp;$timeout){&nbsp;\/*&nbsp;Handle&nbsp;*\/}?&gt;\n\n\n     \n\n    \n   \n  \n  Warning\n   \n    If the passed file pointer is not valid you may get an infinite loop, because\n    feof() fails to return TRUE.\n    \n     Example #2 feof() example with an invalid file pointer\n     \n\n&lt;?php\/\/&nbsp;if&nbsp;file&nbsp;can&nbsp;not&nbsp;be&nbsp;read&nbsp;or&nbsp;doesn't&nbsp;exist&nbsp;fopen&nbsp;function&nbsp;returns&nbsp;FALSE$file&nbsp;=&nbsp;@fopen(\"no_such_file\",&nbsp;\"r\");\/\/&nbsp;FALSE&nbsp;from&nbsp;fopen&nbsp;will&nbsp;issue&nbsp;warning&nbsp;and&nbsp;result&nbsp;in&nbsp;infinite&nbsp;loop&nbsp;herewhile&nbsp;(!feof($file))&nbsp;{}fclose($file);?&gt;\n\n\n     \n\n    \n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetc.php","title":"fgetc","description":"\n \n  fgetc\n  (PHP 4, PHP 5)fgetc &mdash; Gets character from file pointer\n\n \n \n \n  Description\n  \n   string fgetc\n    ( resource $handle\n   )\n\n  \n   Gets a character from the given file pointer.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing a single character read from the file pointed\n   to by handle. Returns FALSE on EOF.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 A fgetc() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('somefile.txt',&nbsp;'r');if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;open&nbsp;file&nbsp;somefile.txt';}while&nbsp;(false&nbsp;!==&nbsp;($char&nbsp;=&nbsp;fgetc($fp)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$char\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    fread() - Binary-safe file read\n    fopen() - Opens file or URL\n    popen() - Opens process file pointer\n    fsockopen() - Open Internet or Unix domain socket connection\n    fgets() - Gets line from file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetss.php","title":"fgetss","description":"\n \n  fgetss\n  (PHP 4, PHP 5)fgetss &mdash; Gets line from file pointer and strip HTML tags\n\n \n \n \n  Description\n  \n   string fgetss\n    ( resource $handle\n   [, int $length\n   [, string $allowable_tags\n  ]] )\n\n  \n   Identical to fgets(), except that\n   fgetss() attempts to strip any NUL bytes, HTML and PHP tags from\n   the text it reads.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n    \n\n     length\n     \n\n      \n       Length of the data to be retrieved.\n      \n     \n\n    \n\n    \n\n     allowable_tags\n     \n\n      \n       You can use the optional third parameter to specify tags which should\n       not be stripped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string of up to length - 1 bytes read from\n   the file pointed to by handle, with all HTML and PHP\n   code stripped.\n  \n  \n   If an error occurs, returns FALSE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The length parameter is optional\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  \n   \n    Example #1 Reading a PHP file line-by-line\n    \n\n&lt;?php$str&nbsp;=&nbsp;&lt;&lt;&lt;EOD&lt;html&gt;&lt;body&gt;&nbsp;&lt;p&gt;Welcome!&nbsp;Today&nbsp;is&nbsp;the&nbsp;&lt;?php&nbsp;echo(date('jS'));&nbsp;?&gt;&nbsp;of&nbsp;&lt;?=&nbsp;date('F');&nbsp;?&gt;.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;Text&nbsp;outside&nbsp;of&nbsp;the&nbsp;HTML&nbsp;block.EOD;file_put_contents('sample.php',&nbsp;$str);$handle&nbsp;=&nbsp;@fopen(\"sample.php\",&nbsp;\"r\");if&nbsp;($handle)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(!feof($handle))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$buffer&nbsp;=&nbsp;fgetss($handle,&nbsp;4096);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$buffer;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($handle);}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n Welcome! Today is the  of .\n\nText outside of the HTML block.\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: If PHP is not properly recognizing\nthe line endings when reading files either on or created by a Macintosh\ncomputer, enabling the\nauto_detect_line_endings\nrun-time configuration option may help resolve the problem.\n \n\n\n \n  See Also\n  \n   \n    fgets() - Gets line from file pointer\n    fopen() - Opens file or URL\n    popen() - Opens process file pointer\n    fsockopen() - Open Internet or Unix domain socket connection\n    strip_tags() - Strip HTML and PHP tags from a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgets.php","title":"fgets","description":"\n \n  fgets\n  (PHP 4, PHP 5)fgets &mdash; Gets line from file pointer\n\n \n \n \n  Description\n  \n   string fgets\n    ( resource $handle\n   [, int $length\n  ] )\n\n  \n   Gets a line from file pointer.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n    \n\n     length\n     \n\n      \n       Reading ends when length - 1 bytes have been\n       read, on a newline (which is included in the return value), or on EOF\n       (whichever comes first). If no length is specified, it will keep\n       reading from the stream until it reaches the end of the line.\n      \n      Note: \n       \n        Until PHP 4.3.0, omitting it would assume 1024 as the line length.\n        If the majority of the lines in the file are all larger than 8KB,\n        it is more resource efficient for your script to specify the maximum\n        line length.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string of up to length - 1 bytes read from\n   the file pointed to by handle. If there is no more data \n   to read in the file pointer, then FALSE is returned.\n  \n  \n   If an error occurs, FALSE is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        fgets() is now binary safe\n       \n      \n\n      \n       4.2.0\n       \n        The length parameter became optional\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Reading a file line by line\n    \n\n&lt;?php$handle&nbsp;=&nbsp;@fopen(\"\/tmp\/inputfile.txt\",&nbsp;\"r\");if&nbsp;($handle)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(($buffer&nbsp;=&nbsp;fgets($handle,&nbsp;4096))&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$buffer;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!feof($handle))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error:&nbsp;unexpected&nbsp;fgets()&nbsp;fail\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($handle);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: If PHP is not properly recognizing\nthe line endings when reading files either on or created by a Macintosh\ncomputer, enabling the\nauto_detect_line_endings\nrun-time configuration option may help resolve the problem.\n  Note: \n   \n    People used to the &#039;C&#039; semantics of fgets()\n    should note the difference in how EOF is returned.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fgetss() - Gets line from file pointer and strip HTML tags\n    fread() - Binary-safe file read\n    fgetc() - Gets character from file pointer\n    stream_get_line() - Gets line from stream resource up to a given delimiter\n    fopen() - Opens file or URL\n    popen() - Opens process file pointer\n    fsockopen() - Open Internet or Unix domain socket connection\n    stream_set_timeout() - Set timeout period on a stream\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-put-contents.php","title":"file_put_contents","description":"\n \n  file_put_contents \n  (PHP 5)file_put_contents &mdash; Write a string to a file\n\n \n\n \n  Description\n  \n   int file_put_contents\n    ( string $filename\n   , mixed $data\n   [, int $flags = 0\n   [, resource $context\n  ]] )\n\n   \n   This function is identical to calling fopen(), \n   fwrite() and fclose() successively\n   to write data to a file.\n  \n  \n   If filename does not exist, the file is created.\n   Otherwise, the existing file is overwritten, unless the \n   FILE_APPEND flag is set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file where to write the data.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The data to write. Can be either a string, an\n       array or a stream resource.\n      \n      \n       If data is a stream resource, the\n       remaining buffer of that stream will be copied to the specified file.\n       This is similar with using stream_copy_to_stream().\n      \n      \n       You can also specify the data parameter as a single\n       dimension array. This is equivalent to\n       file_put_contents($filename, implode(&#039;&#039;, $array)).\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The value of flags can be any combination of \n       the following flags, joined with the binary OR (|)\n       operator.\n      \n      \n       \n        Available flags\n        \n         \n          \n           Flag\n           Description\n          \n\n         \n\n         \n          \n           \n            FILE_USE_INCLUDE_PATH\n           \n           \n            Search for filename in the include directory.\n            See include_path for more\n            information.\n           \n          \n\n          \n           \n            FILE_APPEND\n           \n           \n            If file filename already exists, append \n            the data to the file instead of overwriting it.\n           \n          \n\n          \n           \n            LOCK_EX\n           \n           \n            Acquire an exclusive lock on the file while proceeding to the \n            writing.\n           \n          \n\n          \n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A valid context resource created with \n       stream_context_create().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The function returns the number of bytes that were written to the file, or\n   FALSE on failure.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Simple usage example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'people.txt';\/\/&nbsp;Open&nbsp;the&nbsp;file&nbsp;to&nbsp;get&nbsp;existing&nbsp;content$current&nbsp;=&nbsp;file_get_contents($file);\/\/&nbsp;Append&nbsp;a&nbsp;new&nbsp;person&nbsp;to&nbsp;the&nbsp;file$current&nbsp;.=&nbsp;\"John&nbsp;Smith\\n\";\/\/&nbsp;Write&nbsp;the&nbsp;contents&nbsp;back&nbsp;to&nbsp;the&nbsp;filefile_put_contents($file,&nbsp;$current);?&gt;\n\n\n    \n\n   \n   \n    Example #2 Using flags\n    \n\n&lt;?php$file&nbsp;=&nbsp;'people.txt';\/\/&nbsp;The&nbsp;new&nbsp;person&nbsp;to&nbsp;add&nbsp;to&nbsp;the&nbsp;file$person&nbsp;=&nbsp;\"John&nbsp;Smith\\n\";\/\/&nbsp;Write&nbsp;the&nbsp;contents&nbsp;to&nbsp;the&nbsp;file,&nbsp;\/\/&nbsp;using&nbsp;the&nbsp;FILE_APPEND&nbsp;flag&nbsp;to&nbsp;append&nbsp;the&nbsp;content&nbsp;to&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;file\/\/&nbsp;and&nbsp;the&nbsp;LOCK_EX&nbsp;flag&nbsp;to&nbsp;prevent&nbsp;anyone&nbsp;else&nbsp;writing&nbsp;to&nbsp;the&nbsp;file&nbsp;at&nbsp;the&nbsp;same&nbsp;timefile_put_contents($file,&nbsp;$person,&nbsp;FILE_APPEND&nbsp;|&nbsp;LOCK_EX);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Added context support\n       \n      \n\n      \n       5.1.0\n       \n        Added support for LOCK_EX and the ability to pass\n        a stream resource to the data parameter\n       \n      \n\n      \n     \n    \n   \n\n  \n \n\n  \n \n  Notes\n  Note: This function is\nbinary-safe.\n  TipA URL can be used as a\nfilename with this function if the fopen wrappers have been enabled.\nSee fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage,\nand information on any predefined variables they may\nprovide.\n \n\n\n \n  See Also\n  \n   \n    fopen() - Opens file or URL\n    fwrite() - Binary-safe file write\n    file_get_contents() - Reads entire file into a string\n    stream_context_create() - Create a streams context\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-get-contents.php","title":"file_get_contents","description":"\n \n  file_get_contents \n  (PHP 4 &gt;= 4.3.0, PHP 5)file_get_contents &mdash; Reads entire file into a string\n\n \n\n \n  Description\n  \n   string file_get_contents\n    ( string $filename\n   [, bool $use_include_path = false\n   [, resource $context\n   [, int $offset = -1\n   [, int $maxlen\n  ]]]] )\n\n   \n   This function is similar to file(), except that\n   file_get_contents() returns the file in a \n   string, starting at the specified offset \n   up to maxlen bytes. On failure, \n   file_get_contents() will return FALSE.\n  \n  \n   file_get_contents() is the preferred way to read the\n   contents of a file into a string.  It will use memory mapping techniques if\n   supported by your OS to enhance performance.\n  \n  Note: \n   \n    If you&#039;re opening a URI with special characters, such as spaces, you\n    need to encode the URI with urlencode().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Name of the file to read.\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      Note: \n       \n        As of PHP 5 the FILE_USE_INCLUDE_PATH can be used\n        to trigger include path\n        search.\n       \n      \n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A valid context resource created with \n       stream_context_create(). If you don&#039;t need to use a\n       custom context, you can skip this parameter by NULL.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The offset where the reading starts on the original stream.\n      \n      \n       Seeking (offset) is not supported with remote files.\n       Attempting to seek on non-local files may work with small offsets, but this\n       is unpredictable because it works on the buffered stream.\n      \n     \n\n    \n\n    \n\n     maxlen\n     \n\n      \n       Maximum length of data read. The default is to read until end\n       of file is reached. Note that this parameter is applied to the \n       stream processed by the filters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The function returns the read data or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   An E_WARNING level error is generated if either maxlength\n   is less than zero, or if offset exceeds the length of the stream.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Get and output the source of the homepage of a website\n    \n\n&lt;?php$homepage&nbsp;=&nbsp;file_get_contents('http:\/\/www.example.com\/');echo&nbsp;$homepage;?&gt;\n\n\n    \n\n   \n   \n    Example #2 Searching within the include_path\n    \n\n&lt;?php\/\/&nbsp;&lt;=&nbsp;PHP&nbsp;5$file&nbsp;=&nbsp;file_get_contents('.\/people.txt',&nbsp;true);\/\/&nbsp;&gt;&nbsp;PHP&nbsp;5$file&nbsp;=&nbsp;file_get_contents('.\/people.txt',&nbsp;FILE_USE_INCLUDE_PATH);?&gt;\n\n\n    \n\n   \n   \n    Example #3 Reading a section of a file\n    \n\n&lt;?php\/\/&nbsp;Read&nbsp;14&nbsp;characters&nbsp;starting&nbsp;from&nbsp;the&nbsp;21st&nbsp;character$section&nbsp;=&nbsp;file_get_contents('.\/people.txt',&nbsp;NULL,&nbsp;NULL,&nbsp;20,&nbsp;14);var_dump($section);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(14) &quot;lle Bjori Ro&quot; \n\n    \n   \n   \n    Example #4 Using stream contexts\n    \n\n&lt;?php\/\/&nbsp;Create&nbsp;a&nbsp;stream$opts&nbsp;=&nbsp;array(&nbsp;&nbsp;'http'=&gt;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'=&gt;\"GET\",&nbsp;&nbsp;&nbsp;&nbsp;'header'=&gt;\"Accept-language:&nbsp;en\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cookie:&nbsp;foo=bar\\r\\n\"&nbsp;&nbsp;));$context&nbsp;=&nbsp;stream_context_create($opts);\/\/&nbsp;Open&nbsp;the&nbsp;file&nbsp;using&nbsp;the&nbsp;HTTP&nbsp;headers&nbsp;set&nbsp;above$file&nbsp;=&nbsp;file_get_contents('http:\/\/www.example.com\/',&nbsp;false,&nbsp;$context);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      \n       5.1.0\n       \n        Added the offset and\n        maxlen parameters.\n       \n      \n\n      \n       5.0.0\n       \n        Added context support.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n  TipA URL can be used as a\nfilename with this function if the fopen wrappers have been enabled.\nSee fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage,\nand information on any predefined variables they may\nprovide.\n  WarningWhen using SSL, Microsoft IIS\nwill violate the protocol by closing the connection without sending a\nclose_notify indicator. PHP will report this as &quot;SSL: Fatal\nProtocol Error&quot; when you reach the end of the data. To work around this, the\nvalue of error_reporting should be\nlowered to a level that does not include warnings.\nPHP 4.3.7 and higher can detect buggy IIS server software when you open\nthe stream using the https:\/\/ wrapper and will suppress the\nwarning. When using fsockopen() to create an\nssl:\/\/ socket, the developer is responsible for detecting\nand suppressing this warning.\n \n\n\n \n  See Also\n  \n   \n    file() - Reads entire file into an array\n    fgets() - Gets line from file pointer\n    fread() - Binary-safe file read\n    readfile() - Outputs a file\n    file_put_contents() - Write a string to a file\n    stream_get_contents() - Reads remainder of a stream into a string\n    stream_context_create() - Create a streams context\n    $http_response_header\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file-exists.php","title":"file_exists","description":"\n \n  file_exists\n  (PHP 4, PHP 5)file_exists &mdash; Checks whether a file or directory exists\n\n \n \n \n  Description\n  \n   bool file_exists\n    ( string $filename\n   )\n\n  \n   Checks whether a file or directory exists.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file or directory.\n      \n      \n       On windows, use \/\/computername\/share\/filename or\n       \\\\computername\\share\\filename to check files on\n       network shares.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the file or directory specified by\n   filename exists; FALSE otherwise.\n  \n  Note: \n   \n    This function will return FALSE for symlinks pointing to non-existing\n    files.\n   \n  \n  Warning\n   \n    This function returns FALSE for files inaccessible due to safe mode restrictions. However these\n    files still can be included if\n    they are located in safe_mode_include_dir.\n   \n  \n  Note: \n   \n    The check is done using the real UID\/GID instead of the effective one.\n   \n  \n  Note: \n    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,\n    some filesystem functions may return unexpected results for files which\n    are larger than 2GB.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 Testing whether a file exists\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'\/path\/to\/foo.txt';if&nbsp;(file_exists($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;file&nbsp;$filename&nbsp;exists\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;file&nbsp;$filename&nbsp;does&nbsp;not&nbsp;exist\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    is_readable() - Tells whether a file exists and is readable\n    is_writable() - Tells whether the filename is writable\n    is_file() - Tells whether the filename is a regular file\n    file() - Reads entire file into an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.file.php","title":"file","description":"\n \n  file\n  (PHP 4, PHP 5)file &mdash; Reads entire file into an array\n\n \n \n \n  Description\n  \n   array file\n    ( string $filename\n   [, int $flags = 0\n   [, resource $context\n  ]] )\n\n  \n   Reads an entire file into an array.\n  \n  Note: \n   \n    You can use file_get_contents() to return the contents\n    of a file as a string.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n      TipA URL can be used as a\nfilename with this function if the fopen wrappers have been enabled.\nSee fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage,\nand information on any predefined variables they may\nprovide.\n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The optional parameter flags can be one, or\n       more, of the following constants:\n       \n\n        \n\n         \n          FILE_USE_INCLUDE_PATH\n         \n         \n\n          \n           Search for the file in the include_path.\n          \n         \n\n        \n\n        \n\n         \n          FILE_IGNORE_NEW_LINES\n         \n         \n\n          \n           Do not add newline at the end of each array element\n          \n         \n\n        \n\n        \n\n         \n          FILE_SKIP_EMPTY_LINES\n         \n         \n\n          \n           Skip empty lines\n          \n         \n\n        \n\n        \n       \n\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A context resource created with the \n       stream_context_create() function.\n      \n      \n       Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the file in an array. Each element of the array corresponds to a\n   line in the file, with the newline still attached. Upon failure,\n   file() returns FALSE.\n  \n  Note: \n   \n    Each line in the resulting array will include the line ending, unless\n    FILE_IGNORE_NEW_LINES is used, so you still need to\n    use rtrim() if you do not want the line ending\n    present.\n   \n  \n  Note: If PHP is not properly recognizing\nthe line endings when reading files either on or created by a Macintosh\ncomputer, enabling the\nauto_detect_line_endings\nrun-time configuration option may help resolve the problem.\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      \n       5.0.0\n       \n        The context parameter was added\n       \n      \n\n      \n       5.0.0\n       \n        Prior to PHP 5.0.0 the flags parameter only\n        covered include_path and was\n        enabled with 1\n       \n      \n\n      \n       4.3.0\n       \n        file() became binary safe\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 file() example\n    \n\n&lt;?php\/\/&nbsp;Get&nbsp;a&nbsp;file&nbsp;into&nbsp;an&nbsp;array.&nbsp;&nbsp;In&nbsp;this&nbsp;example&nbsp;we'll&nbsp;go&nbsp;through&nbsp;HTTP&nbsp;to&nbsp;get\/\/&nbsp;the&nbsp;HTML&nbsp;source&nbsp;of&nbsp;a&nbsp;URL.$lines&nbsp;=&nbsp;file('http:\/\/www.example.com\/');\/\/&nbsp;Loop&nbsp;through&nbsp;our&nbsp;array,&nbsp;show&nbsp;HTML&nbsp;source&nbsp;as&nbsp;HTML&nbsp;source;&nbsp;and&nbsp;line&nbsp;numbers&nbsp;too.foreach&nbsp;($lines&nbsp;as&nbsp;$line_num&nbsp;=&gt;&nbsp;$line)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Line&nbsp;#&lt;b&gt;{$line_num}&lt;\/b&gt;&nbsp;:&nbsp;\"&nbsp;.&nbsp;htmlspecialchars($line)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}\/\/&nbsp;Another&nbsp;example,&nbsp;let's&nbsp;get&nbsp;a&nbsp;web&nbsp;page&nbsp;into&nbsp;a&nbsp;string.&nbsp;&nbsp;See&nbsp;also&nbsp;file_get_contents().$html&nbsp;=&nbsp;implode('',&nbsp;file('http:\/\/www.example.com\/'));\/\/&nbsp;Using&nbsp;the&nbsp;optional&nbsp;flags&nbsp;parameter&nbsp;since&nbsp;PHP&nbsp;5$trimmed&nbsp;=&nbsp;file('somefile.txt',&nbsp;FILE_IGNORE_NEW_LINES&nbsp;|&nbsp;FILE_SKIP_EMPTY_LINES);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  WarningWhen using SSL, Microsoft IIS\nwill violate the protocol by closing the connection without sending a\nclose_notify indicator. PHP will report this as &quot;SSL: Fatal\nProtocol Error&quot; when you reach the end of the data. To work around this, the\nvalue of error_reporting should be\nlowered to a level that does not include warnings.\nPHP 4.3.7 and higher can detect buggy IIS server software when you open\nthe stream using the https:\/\/ wrapper and will suppress the\nwarning. When using fsockopen() to create an\nssl:\/\/ socket, the developer is responsible for detecting\nand suppressing this warning.\n \n\n\n \n  See Also\n  \n   \n    readfile() - Outputs a file\n    fopen() - Opens file or URL\n    fsockopen() - Open Internet or Unix domain socket connection\n    popen() - Opens process file pointer\n    file_get_contents() - Reads entire file into a string\n    include() - include\n    stream_context_create() - Create a streams context\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fgetcsv.php","title":"fgetcsv","description":"\n \n  fgetcsv\n  (PHP 4, PHP 5)fgetcsv &mdash; Gets line from file pointer and parse for CSV fields\n\n \n \n \n  Description\n  \n   array fgetcsv\n    ( resource $handle\n   [, int $length = 0\n   [, string $delimiter = &#039;,&#039;\n   [, string $enclosure = &#039;&quot;&#039;\n   [, string $escape = &#039;\\\\&#039;\n  ]]]] )\n\n  \n   Similar to fgets() except that\n   fgetcsv() parses the line it reads for fields in\n   CSV format and returns an array containing the fields\n   read.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       A valid file pointer to a file successfully opened by\n       fopen(), popen(), or\n       fsockopen().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       Must be greater than the longest line (in characters) to be found in\n       the CSV file (allowing for trailing line-end characters). It became\n       optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP\n       5.0.4 and later) the maximum line length is not limited, which is\n       slightly slower.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       Set the field delimiter (one character only).\n      \n     \n\n    \n\n    \n\n     enclosure\n     \n\n      \n       Set the field enclosure character (one character only).\n      \n     \n\n    \n\n    \n\n     escape\n     \n\n      \n       Set the escape character (one character only). Defaults as a backslash.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed array containing the fields read.\n  \n  Note: \n   \n    A blank line in a CSV file will be returned as an array\n    comprising a single null field, and will not be treated\n    as an error.\n   \n  \n  Note: If PHP is not properly recognizing\nthe line endings when reading files either on or created by a Macintosh\ncomputer, enabling the\nauto_detect_line_endings\nrun-time configuration option may help resolve the problem.\n  \n   fgetcsv() returns NULL if an invalid\n   handle is supplied or FALSE on other errors,\n   including end of file.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The escape parameter was added\n       \n      \n\n      \n       4.3.5\n       \n        fgetcsv() is now binary safe\n       \n      \n\n      \n       4.3.0\n       \n        The enclosure parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Read and print the entire contents of a CSV file\n    \n\n&lt;?php$row&nbsp;=&nbsp;1;if&nbsp;(($handle&nbsp;=&nbsp;fopen(\"test.csv\",&nbsp;\"r\"))&nbsp;!==&nbsp;FALSE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(($data&nbsp;=&nbsp;fgetcsv($handle,&nbsp;1000,&nbsp;\",\"))&nbsp;!==&nbsp;FALSE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$num&nbsp;=&nbsp;count($data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;p&gt;&nbsp;$num&nbsp;fields&nbsp;in&nbsp;line&nbsp;$row:&nbsp;&lt;br&nbsp;\/&gt;&lt;\/p&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$row++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;($c=0;&nbsp;$c&nbsp;&lt;&nbsp;$num;&nbsp;$c++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$data[$c]&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($handle);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Locale setting is taken into account by this function. If\n    LANG is e.g. en_US.UTF-8, files in\n    one-byte encoding are read wrong by this function.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    str_getcsv() - Parse a CSV string into an array\n    explode() - Split a string by string\n    file() - Reads entire file into an array\n    pack() - Pack data into binary string\n    fputcsv() - Format line as CSV and write to file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileatime.php","title":"fileatime","description":"\n \n  fileatime\n  (PHP 4, PHP 5)fileatime &mdash; Gets last access time of file\n\n \n \n \n  Description\n  \n   int fileatime\n    ( string $filename\n   )\n\n  \n   Gets the last access time of the given file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the time the file was last accessed,  or FALSE on failure.\n   The time is returned as a Unix timestamp.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fileatime() example\n    \n\n&lt;?php\/\/&nbsp;outputs&nbsp;e.g.&nbsp;&nbsp;somefile.txt&nbsp;was&nbsp;last&nbsp;accessed:&nbsp;December&nbsp;29&nbsp;2002&nbsp;22:16:23.$filename&nbsp;=&nbsp;'somefile.txt';if&nbsp;(file_exists($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$filename&nbsp;was&nbsp;last&nbsp;accessed:&nbsp;\"&nbsp;.&nbsp;date(\"F&nbsp;d&nbsp;Y&nbsp;H:i:s.\",&nbsp;fileatime($filename));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: \n   \n    The atime of a file is supposed to change whenever the data blocks of a\n    file are being read. This can be costly performance-wise when an\n    application regularly accesses a very large number of files or\n    directories.\n   \n   \n    Some Unix filesystems can be mounted with atime updates disabled to\n    increase the performance of such applications; USENET news spools are a\n    common example. On such filesystems this function will be useless.\n   \n  \n  Note: Note that time resolution may differ\nfrom one file system to another.\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    filemtime() - Gets file modification time\n    fileinode() - Gets file inode\n    date() - Format a local time\/date\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filegroup.php","title":"filegroup","description":"\n \n  filegroup\n  (PHP 4, PHP 5)filegroup &mdash; Gets file group\n\n \n \n \n  Description\n  \n   int filegroup\n    ( string $filename\n   )\n\n  \n   Gets the file group. The group ID is returned in numerical format, use\n   posix_getgrgid() to resolve it to a group name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the group ID of the file, or FALSE if\n   an error occurs. The group ID is returned in numerical format, use\n   posix_getgrgid() to resolve it to a group name.\n   Upon failure, FALSE is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Finding the group of a file\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'index.php';print_r(posix_getgrgid(filegroup($filename)));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Upon failure, an E_WARNING is emitted.\n  \n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    fileowner() - Gets file owner\n    posix_getgrgid() - Return info about a group by group id\n    safe_mode_gid\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileinode.php","title":"fileinode","description":"\n \n  fileinode\n  (PHP 4, PHP 5)fileinode &mdash; Gets file inode\n\n \n \n \n  Description\n  \n   int fileinode\n    ( string $filename\n   )\n\n  \n   Gets the file inode.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the inode number of the file,  or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Comparing the inode of a file with the current file\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'index.php';if&nbsp;(getmyinode()&nbsp;==&nbsp;fileinode($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'You&nbsp;are&nbsp;checking&nbsp;the&nbsp;current&nbsp;file.';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    getmyinode() - Gets the inode of the current script\n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filectime.php","title":"filectime","description":"\n \n  filectime\n  (PHP 4, PHP 5)filectime &mdash; Gets inode change time of file\n\n \n \n \n  Description\n  \n   int filectime\n    ( string $filename\n   )\n\n  \n   Gets the inode change time of a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the time the file was last changed,  or FALSE on failure.\n   The time is returned as a Unix timestamp.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A filectime() example\n    \n\n&lt;?php\/\/&nbsp;outputs&nbsp;e.g.&nbsp;&nbsp;somefile.txt&nbsp;was&nbsp;last&nbsp;changed:&nbsp;December&nbsp;29&nbsp;2002&nbsp;22:16:23.$filename&nbsp;=&nbsp;'somefile.txt';if&nbsp;(file_exists($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$filename&nbsp;was&nbsp;last&nbsp;changed:&nbsp;\"&nbsp;.&nbsp;date(\"F&nbsp;d&nbsp;Y&nbsp;H:i:s.\",&nbsp;filectime($filename));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: \n   \n    Note: In most Unix filesystems, a file is considered changed when its\n    inode data is changed; that is, when the permissions, owner, group, or\n    other metadata from the inode is updated. See also\n    filemtime() (which is what you want to use when you\n    want to create &quot;Last Modified&quot; footers on web pages) and\n    fileatime().\n   \n  \n  Note: \n   \n    Note also that in some Unix texts the ctime of a file is referred to as\n    being the creation time of the file. This is wrong. There is no creation\n    time for Unix files in most Unix filesystems.\n   \n  \n  Note: Note that time resolution may differ\nfrom one file system to another.\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    filemtime() - Gets file modification time\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileowner.php","title":"fileowner","description":"\n \n  fileowner\n  (PHP 4, PHP 5)fileowner &mdash; Gets file owner\n\n \n \n \n  Description\n  \n   int fileowner\n    ( string $filename\n   )\n\n  \n   Gets the file owner.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the user ID of the owner of the file,  or FALSE on failure.\n   The user ID is returned in numerical format, use\n   posix_getpwuid() to resolve it to a username.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Finding the owner of a file\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'index.php';print_r(posix_getpwuid(fileowner($filename)));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    filegroup() - Gets file group\n    stat() - Gives information about a file\n    posix_getpwuid() - Return info about a user by user id\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filetype.php","title":"filetype","description":"\n \n  filetype\n  (PHP 4, PHP 5)filetype &mdash; Gets file type\n\n \n \n \n  Description\n  \n   string filetype\n    ( string $filename\n   )\n\n  \n   Returns the type of the given file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the type of the file. Possible values are fifo, char,\n   dir, block, link, file, socket and unknown.\n  \n  \n   Returns FALSE if an error occurs. filetype() will also\n   produce an E_NOTICE message if the stat call fails\n   or if the file type is unknown.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 filetype() example\n    \n\n&lt;?phpecho&nbsp;filetype('\/etc\/passwd');&nbsp;&nbsp;\/\/&nbsp;fileecho&nbsp;filetype('\/etc\/');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;dir?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    is_file() - Tells whether the filename is a regular file\n    is_link() - Tells whether the filename is a symbolic link\n    file_exists() - Checks whether a file or directory exists\n    stat() - Gives information about a file\n    mime_content_type() - Detect MIME Content-type for a file (deprecated)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filemtime.php","title":"filemtime","description":"\n \n  filemtime\n  (PHP 4, PHP 5)filemtime &mdash; Gets file modification time\n\n \n \n \n  Description\n  \n   int filemtime\n    ( string $filename\n   )\n\n  \n   This function returns the time when the data blocks of a file were being\n   written to, that is, the time when the content of the file was changed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the time the file was last modified,  or FALSE on failure.\n   The time is returned as a Unix timestamp, which is\n   suitable for the date() function.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 filemtime() example\n    \n\n&lt;?php\/\/&nbsp;outputs&nbsp;e.g.&nbsp;&nbsp;somefile.txt&nbsp;was&nbsp;last&nbsp;modified:&nbsp;December&nbsp;29&nbsp;2002&nbsp;22:16:23.$filename&nbsp;=&nbsp;'somefile.txt';if&nbsp;(file_exists($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$filename&nbsp;was&nbsp;last&nbsp;modified:&nbsp;\"&nbsp;.&nbsp;date&nbsp;(\"F&nbsp;d&nbsp;Y&nbsp;H:i:s.\",&nbsp;filemtime($filename));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: Note that time resolution may differ\nfrom one file system to another.\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    filectime() - Gets inode change time of file\n    stat() - Gives information about a file\n    touch() - Sets access and modification time of file\n    getlastmod() - Gets time of last page modification\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fileperms.php","title":"fileperms","description":"\n \n  fileperms\n  (PHP 4, PHP 5)fileperms &mdash; Gets file permissions\n\n \n \n \n  Description\n  \n   int fileperms\n    ( string $filename\n   )\n\n  \n   Gets permissions for the given file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the file&#039;s permissions as a numeric mode of the same format as that\n   expected by chmod(),  or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Display permissions as an octal value\n    \n\n&lt;?phpecho&nbsp;substr(sprintf('%o',&nbsp;fileperms('\/tmp')),&nbsp;-4);echo&nbsp;substr(sprintf('%o',&nbsp;fileperms('\/etc\/passwd')),&nbsp;-4);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1777\n0644\n\n    \n   \n   \n    Example #2 Display full permissions\n    \n\n&lt;?php$perms&nbsp;=&nbsp;fileperms('\/etc\/passwd');if&nbsp;(($perms&nbsp;&amp;&nbsp;0xC000)&nbsp;==&nbsp;0xC000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Socket&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'s';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0xA000)&nbsp;==&nbsp;0xA000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Symbolic&nbsp;Link&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'l';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0x8000)&nbsp;==&nbsp;0x8000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Regular&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'-';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0x6000)&nbsp;==&nbsp;0x6000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Block&nbsp;special&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'b';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0x4000)&nbsp;==&nbsp;0x4000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Directory&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'d';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0x2000)&nbsp;==&nbsp;0x2000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Character&nbsp;special&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'c';}&nbsp;elseif&nbsp;(($perms&nbsp;&amp;&nbsp;0x1000)&nbsp;==&nbsp;0x1000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;FIFO&nbsp;pipe&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'p';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Unknown&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;'u';}\/\/&nbsp;Owner$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0100)&nbsp;?&nbsp;'r'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0080)&nbsp;?&nbsp;'w'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0040)&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0800)&nbsp;?&nbsp;'s'&nbsp;:&nbsp;'x'&nbsp;)&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0800)&nbsp;?&nbsp;'S'&nbsp;:&nbsp;'-'));\/\/&nbsp;Group$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0020)&nbsp;?&nbsp;'r'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0010)&nbsp;?&nbsp;'w'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0008)&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0400)&nbsp;?&nbsp;'s'&nbsp;:&nbsp;'x'&nbsp;)&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0400)&nbsp;?&nbsp;'S'&nbsp;:&nbsp;'-'));\/\/&nbsp;World$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0004)&nbsp;?&nbsp;'r'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0002)&nbsp;?&nbsp;'w'&nbsp;:&nbsp;'-');$info&nbsp;.=&nbsp;(($perms&nbsp;&amp;&nbsp;0x0001)&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0200)&nbsp;?&nbsp;'t'&nbsp;:&nbsp;'x'&nbsp;)&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(($perms&nbsp;&amp;&nbsp;0x0200)&nbsp;?&nbsp;'T'&nbsp;:&nbsp;'-'));echo&nbsp;$info;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n-rw-r--r--\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    chmod() - Changes file mode\n    is_readable() - Tells whether a file exists and is readable\n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.filesize.php","title":"filesize","description":"\n \n  filesize\n  (PHP 4, PHP 5)filesize &mdash; Gets file size\n\n \n \n \n  Description\n  \n   int filesize\n    ( string $filename\n   )\n\n  \n   Gets the size for the given file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the size of the file in bytes, or FALSE (and generates an error\n   of level E_WARNING) in case of an error.\n  \n  Note: \n    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,\n    some filesystem functions may return unexpected results for files which\n    are larger than 2GB.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 filesize() example\n    \n\n&lt;?php\/\/&nbsp;outputs&nbsp;e.g.&nbsp;&nbsp;somefile.txt:&nbsp;1024&nbsp;bytes$filename&nbsp;=&nbsp;'somefile.txt';echo&nbsp;$filename&nbsp;.&nbsp;':&nbsp;'&nbsp;.&nbsp;filesize($filename)&nbsp;.&nbsp;'&nbsp;bytes';?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    file_exists() - Checks whether a file or directory exists\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fnmatch.php","title":"fnmatch","description":"\n \n  fnmatch\n  (PHP 4 &gt;= 4.3.0, PHP 5)fnmatch &mdash; Match filename against a pattern\n\n \n \n \n  Description\n  \n   bool fnmatch\n    ( string $pattern\n   , string $string\n   [, int $flags = 0\n  ] )\n\n  \n   fnmatch() checks if the passed string would\n   match the given shell wildcard pattern.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The shell wildcard pattern.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The tested string. This function is especially useful for filenames,\n       but may also be used on regular strings.\n      \n      \n       The average user may be used to shell patterns or at least in their\n       simplest form to &#039;?&#039; and &#039;*&#039;\n       wildcards so using fnmatch() instead of\n       preg_match() for\n       frontend search expression input may be way more convenient for\n       non-programming users.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The value of flags can be any combination of \n       the following flags, joined with the\n       binary OR (|) operator.\n       \n        \n         A list of possible flags for fnmatch()\n        \n        \n         \n          \n           Flag\n           Description\n          \n\n         \n\n         \n          \n           FNM_NOESCAPE\n           \n            Disable backslash escaping.\n           \n          \n\n          \n           FNM_PATHNAME\n           \n            Slash in string only matches slash in the given pattern.\n           \n          \n\n          \n           FNM_PERIOD\n           \n            Leading period in string must be exactly matched by period in the given pattern.\n           \n          \n\n          \n           FNM_CASEFOLD\n           \n            Caseless match. Part of the GNU extension.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if there is a match, FALSE otherwise.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Checking a color name against a shell wildcard pattern\n    \n\n&lt;?phpif&nbsp;(fnmatch(\"*gr[ae]y\",&nbsp;$color))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"some&nbsp;form&nbsp;of&nbsp;gray&nbsp;...\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    For now this function is not available on non-POSIX compliant systems.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    glob() - Find pathnames matching a pattern\n    preg_match() - Perform a regular expression match\n    sscanf() - Parses input from a string according to a format\n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.flock.php","title":"flock","description":"\n \n  flock\n  (PHP 4, PHP 5)flock &mdash; Portable advisory file locking\n\n \n \n \n  Description\n  \n   bool flock\n    ( resource $handle\n   , int $operation\n   [, int &$wouldblock\n  ] )\n\n  \n   flock() allows you to perform a simple reader\/writer\n   model which can be used on virtually every platform (including most Unix\n   derivatives and even Windows).\n  \n  \n   On versions of PHP before 5.3.2, the lock is released also by\n   fclose() (which is also called automatically when script\n   finished).\n  \n  \n   PHP supports a portable way of locking complete files in an advisory way\n   (which means all accessing programs have to use the same way of locking\n   or it will not work). By default, this function will block until the\n   requested lock is acquired; this may be controlled (on non-Windows\n   platforms) with the LOCK_NB option documented below.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     operation\n     \n\n      \n       operation is one of the following:\n       \n        \n         \n          LOCK_SH to acquire a shared lock (reader).\n         \n        \n        \n         \n          LOCK_EX to acquire an exclusive lock (writer).\n         \n        \n        \n         \n          LOCK_UN to release a lock (shared or exclusive).\n         \n        \n       \n      \n      \n       It is also possible to add LOCK_NB as a bitmask to one \n       of the above operations if you don&#039;t want flock() to \n       block while locking. (not supported on Windows)\n      \n     \n\n    \n\n    \n\n     wouldblock\n     \n\n      \n       The optional third argument is set to TRUE if the lock would block\n       (EWOULDBLOCK errno condition). (not supported on Windows)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.2\n       \n        The automatic unlocking when the file&#039;s resource handle is closed was\n        removed. Unlocking now always has to be done manually.\n       \n      \n\n      \n       4.0.1\n       \n        The LOCK_XXX constants were added. Prior to that\n        you must use 1 for LOCK_SH, 2 for\n        LOCK_EX, 3 for LOCK_UN and\n        4 for LOCK_NB\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 flock() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen(\"\/tmp\/lock.txt\",&nbsp;\"r+\");if&nbsp;(flock($fp,&nbsp;LOCK_EX))&nbsp;{&nbsp;\/\/&nbsp;do&nbsp;an&nbsp;exclusive&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;ftruncate($fp,&nbsp;0);&nbsp;\/\/&nbsp;truncate&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"Write&nbsp;something&nbsp;here\\n\");&nbsp;&nbsp;&nbsp;&nbsp;flock($fp,&nbsp;LOCK_UN);&nbsp;\/\/&nbsp;release&nbsp;the&nbsp;lock}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;get&nbsp;the&nbsp;lock!\";}fclose($fp);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 flock() using the LOCK_NB option\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('\/tmp\/lock.txt',&nbsp;'r+');\/*&nbsp;Activate&nbsp;the&nbsp;LOCK_NB&nbsp;option&nbsp;on&nbsp;an&nbsp;LOCK_EX&nbsp;operation&nbsp;*\/if(!flock($fp,&nbsp;LOCK_EX&nbsp;|&nbsp;LOCK_NB))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Unable&nbsp;to&nbsp;obtain&nbsp;lock';&nbsp;&nbsp;&nbsp;&nbsp;exit(-1);}\/*&nbsp;...&nbsp;*\/fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    flock() uses mandatory locking instead of advisory\n    locking on Windows. Mandatory locking is also supported on Linux and\n    System V based operating systems via the usual mechanism supported by the\n    fcntl() system call: that is, if the file in question has the setgid\n    permission bit set and the group execution bit cleared. On Linux, the file\n    system will also need to be mounted with the mand option for this to work.\n   \n  \n  Note: \n   \n    Because flock() requires a file pointer, you may have\n    to use a special lock file to protect access to a file that you intend\n    to truncate by opening it in write mode (with a &quot;w&quot; or &quot;w+&quot; argument to\n    fopen()).\n   \n  \n  Note: \n   \n    May only be used on file pointers returned by fopen()\n    for local files, or file pointers pointing to userspace streams that\n    implement the streamWrapper::stream_lock() method.\n   \n  \n  Warning\n   \n    Assigning another value to handle argument in\n    subsequent code will release the lock.\n   \n  \n  Warning\n   \n    On some operating systems flock() is implemented at\n    the process level. When using a multithreaded server API like ISAPI you\n    may not be able to rely on flock() to protect files\n    against other PHP scripts running in parallel threads of the same server\n    instance!\n   \n   \n    flock() is not supported on antiquated filesystems like\n    FAT and its derivates and will therefore always\n    return FALSE under this environments (this is especially true for\n    Windows 98 users).\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fputs.php","title":"fputs","description":"\n \n  fputs\n  (PHP 4, PHP 5)fputs &mdash; Alias of fwrite()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   fwrite().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fpassthru.php","title":"fpassthru","description":"\n \n  fpassthru\n  (PHP 4, PHP 5)fpassthru &mdash; Output all remaining data on a file pointer\n\n \n \n \n  Description\n  \n   int fpassthru\n    ( resource $handle\n   )\n\n  \n   Reads to EOF on the given file pointer from the current position and\n   writes the results to the output buffer.\n  \n  \n   You may need to call rewind() to reset the file\n   pointer to the beginning of the file if you have already written data\n   to the file.\n  \n  \n   If you just want to dump the contents of a file to the output buffer,\n   without first modifying it or seeking to a particular offset, you may\n   want to use the readfile(), which saves you\n   the fopen() call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If an error occurs, fpassthru() returns\n   FALSE.  Otherwise, fpassthru() returns\n   the number of characters read from handle\n   and passed through to the output.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using fpassthru() with binary files\n    \n\n&lt;?php\/\/&nbsp;open&nbsp;the&nbsp;file&nbsp;in&nbsp;a&nbsp;binary&nbsp;mode$name&nbsp;=&nbsp;'.\/img\/ok.png';$fp&nbsp;=&nbsp;fopen($name,&nbsp;'rb');\/\/&nbsp;send&nbsp;the&nbsp;right&nbsp;headersheader(\"Content-Type:&nbsp;image\/png\");header(\"Content-Length:&nbsp;\"&nbsp;.&nbsp;filesize($name));\/\/&nbsp;dump&nbsp;the&nbsp;picture&nbsp;and&nbsp;stop&nbsp;the&nbsp;scriptfpassthru($fp);exit;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    When using fpassthru() on a binary file on Windows\n    systems, you should make sure to open the file in binary mode by\n    appending a b to the mode used in the call to\n    fopen().\n   \n   \n    You are encouraged to use the b flag when dealing\n    with binary files, even if your system does not require it, so that\n    your scripts will be more portable.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    readfile() - Outputs a file\n    fopen() - Opens file or URL\n    popen() - Opens process file pointer\n    fsockopen() - Open Internet or Unix domain socket connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fopen.php","title":"fopen","description":"\n \n  fopen\n  (PHP 4, PHP 5)fopen &mdash; Opens file or URL\n\n \n \n \n  Description\n  \n   resource fopen\n    ( string $filename\n   , string $mode\n   [, bool $use_include_path = false\n   [, resource $context\n  ]] )\n\n  \n   fopen() binds a named resource, specified by\n   filename, to a stream. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       If filename is of the form &quot;scheme:\/\/...&quot;, it\n       is assumed to be a URL and PHP will search for a protocol handler\n       (also known as a wrapper) for that scheme. If no wrappers for that\n       protocol are registered, PHP will emit a notice to help you track\n       potential problems in your script and then continue as though\n       filename specifies a regular file.\n      \n      \n       If PHP has decided that filename specifies\n       a local file, then it will try to open a stream on that file.\n       The file must be accessible to PHP, so you need to ensure that\n       the file access permissions allow this access.\n       If you have enabled safe mode,\n       or open_basedir further\n       restrictions may apply.\n      \n      \n       If PHP has decided that filename specifies\n       a registered protocol, and that protocol is registered as a\n       network URL, PHP will check to make sure that\n       allow_url_fopen is\n       enabled. If it is switched off, PHP will emit a warning and\n       the fopen call will fail.\n      \n      Note: \n       \n        The list of supported protocols can be found in Supported Protocols and Wrappers. Some protocols (also referred to as\n        wrappers) support context\n        and\/or php.ini options. Refer to the specific page for the\n        protocol in use for a list of options which can be set. (e.g.\n        php.ini value user_agent used by the\n        http wrapper).\n       \n      \n      \n       On the Windows platform, be careful to escape any backslashes\n       used in the path to the file, or use forward slashes.\n       \n        \n\n&lt;?php$handle&nbsp;=&nbsp;fopen(\"c:\\\\folder\\\\resource.txt\",&nbsp;\"r\");?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode parameter specifies the type of access\n       you require to the stream.  It may be any of the following:\n       \n        \n         A list of possible modes for fopen()\n         using mode\n        \n        \n         \n          \n           mode\n           Description\n          \n\n         \n\n         \n          \n           &#039;r&#039;\n           \n            Open for reading only; place the file pointer at the\n            beginning of the file.\n           \n          \n\n          \n           &#039;r+&#039;\n           \n            Open for reading and writing; place the file pointer at\n            the beginning of the file.\n           \n          \n\n          \n           &#039;w&#039;\n           \n            Open for writing only; place the file pointer at the\n            beginning of the file and truncate the file to zero length.\n            If the file does not exist, attempt to create it.\n           \n          \n\n          \n           &#039;w+&#039;\n           \n            Open for reading and writing; place the file pointer at\n            the beginning of the file and truncate the file to zero\n            length.  If the file does not exist, attempt to create it.\n           \n          \n\n          \n           &#039;a&#039;\n           \n            Open for writing only; place the file pointer at the end of\n            the file. If the file does not exist, attempt to create it.\n           \n          \n\n          \n           &#039;a+&#039;\n           \n            Open for reading and writing; place the file pointer at\n            the end of the file. If the file does not exist, attempt to\n            create it.\n           \n          \n\n          \n           &#039;x&#039;\n           \n            Create and open for writing only; place the file pointer at the\n            beginning of the file.  If the file already exists, the\n            fopen() call will fail by returning FALSE and\n            generating an error of level E_WARNING.  If\n            the file does not exist, attempt to create it.  This is equivalent\n            to specifying O_EXCL|O_CREAT flags for the\n            underlying open(2) system call. \n           \n          \n\n          \n           &#039;x+&#039;\n           \n            Create and open for reading and writing; otherwise it has the\n            same behavior as &#039;x&#039;.\n           \n          \n\n          \n           &#039;c&#039;\n           \n            Open the file for writing only. If the file does not exist, it is\n            created. If it exists, it is neither truncated (as opposed to\n            &#039;w&#039;), nor the call to this function fails (as is\n            the case with &#039;x&#039;). The file pointer is\n            positioned on the beginning of the file. This may be useful if it&#039;s\n            desired to get an advisory lock (see flock())\n            before attempting to modify the file, as using\n            &#039;w&#039; could truncate the file before the lock\n            was obtained (if truncation is desired,\n            ftruncate() can be used after the lock is\n            requested).\n           \n          \n\n          \n           &#039;c+&#039;\n           \n            Open the file for reading and writing; otherwise it has the same\n            behavior as &#039;c&#039;.\n           \n          \n\n         \n        \n       \n\n      \n      Note: \n       \n        Different operating system families have different line-ending\n        conventions.  When you write a text file and want to insert a line\n        break, you need to use the correct line-ending character(s) for your\n        operating system.  Unix based systems use \\n as the\n        line ending character, Windows based systems use \\r\\n\n        as the line ending characters and Macintosh based systems use\n        \\r as the line ending character.\n       \n       \n        If you use the wrong line ending characters when writing your files, you\n        might find that other applications that open those files will &quot;look\n        funny&quot;.\n       \n       \n        Windows offers a text-mode translation flag (&#039;t&#039;)\n        which will transparently translate \\n to\n        \\r\\n when working with the file.  In contrast, you\n        can also use &#039;b&#039; to force binary mode, which will not\n        translate your data.  To use these flags, specify either\n        &#039;b&#039; or &#039;t&#039; as the last character\n        of the mode parameter.\n       \n       \n        The default translation mode depends on the SAPI and version of PHP that\n        you are using, so you are encouraged to always specify the appropriate\n        flag for portability reasons.  You should use the &#039;t&#039;\n        mode if you are working with plain-text files and you use\n        \\n to delimit your line endings in your script, but\n        expect your files to be readable with applications such as notepad.  You\n        should use the &#039;b&#039; in all other cases.\n       \n       \n        If you do not specify the &#039;b&#039; flag when working with binary files, you\n        may experience strange problems with your data, including broken image\n        files and strange problems with \\r\\n characters.\n       \n      \n      Note: \n       \n        For portability, it is strongly recommended that you always\n        use the &#039;b&#039; flag when opening files with fopen().\n       \n      \n      Note: \n       \n        Again, for portability, it is also strongly recommended that\n        you re-write code that uses or relies upon the &#039;t&#039;\n        mode so that it uses the correct line endings and\n        &#039;b&#039; mode instead.\n       \n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       The optional third use_include_path parameter\n       can be set to &#039;1&#039; or TRUE if you want to search for the file in the\n       include_path, too.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a file pointer resource on success, or FALSE on error.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   If the open fails, an error of level\n   E_WARNING is generated.  You may use @ to suppress this\n   warning.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.2\n       \n        As of PHP 4.3.2, the default mode is set to binary for all platforms\n        that distinguish between binary and text mode.  If you are having\n        problems with your scripts after upgrading, try using the\n        &#039;t&#039; flag as a workaround until you have made your\n        script more portable as mentioned before\n       \n      \n\n      \n       4.3.2\n       \n        The &#039;x&#039; and &#039;x+&#039; options were\n        added\n       \n      \n\n      \n       5.2.6\n       \n        The &#039;c&#039; and &#039;c+&#039; options were\n        added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fopen() examples\n    \n\n&lt;?php$handle&nbsp;=&nbsp;fopen(\"\/home\/rasmus\/file.txt\",&nbsp;\"r\");$handle&nbsp;=&nbsp;fopen(\"\/home\/rasmus\/file.gif\",&nbsp;\"wb\");$handle&nbsp;=&nbsp;fopen(\"http:\/\/www.example.com\/\",&nbsp;\"r\");$handle&nbsp;=&nbsp;fopen(\"ftp:\/\/user:password@example.com\/somefile.txt\",&nbsp;\"w\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  WarningWhen using SSL, Microsoft IIS\nwill violate the protocol by closing the connection without sending a\nclose_notify indicator. PHP will report this as &quot;SSL: Fatal\nProtocol Error&quot; when you reach the end of the data. To work around this, the\nvalue of error_reporting should be\nlowered to a level that does not include warnings.\nPHP 4.3.7 and higher can detect buggy IIS server software when you open\nthe stream using the https:\/\/ wrapper and will suppress the\nwarning. When using fsockopen() to create an\nssl:\/\/ socket, the developer is responsible for detecting\nand suppressing this warning.\n  Note: When safe mode is enabled, PHP checks whether\nthe directory in which the script is operating has the same UID (owner) as the\nscript that is being executed.\n  \n   If you are experiencing problems with reading and writing to files and\n   you&#039;re using the server module version of PHP, remember to make sure that\n   the files and directories you&#039;re using are accessible to the server\n   process.\n  \n \n\n\n \n  See Also\n  \n   \n    Supported Protocols and Wrappers\n    fclose() - Closes an open file pointer\n    fgets() - Gets line from file pointer\n    fread() - Binary-safe file read\n    fwrite() - Binary-safe file write\n    fsockopen() - Open Internet or Unix domain socket connection\n    file() - Reads entire file into an array\n    file_exists() - Checks whether a file or directory exists\n    is_readable() - Tells whether a file exists and is readable\n    stream_set_timeout() - Set timeout period on a stream\n    popen() - Opens process file pointer\n    stream_context_create() - Create a streams context\n    umask() - Changes the current umask\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fscanf.php","title":"fscanf","description":"\n \n  fscanf\n  (PHP 4 &gt;= 4.0.1, PHP 5)fscanf &mdash; Parses input from a file according to a format\n\n \n \n \n  Description\n  \n   mixed fscanf\n    ( resource $handle\n   , string $format\n   [, mixed &$...\n  ] )\n\n  \n   The function fscanf() is similar to\n   sscanf(), but it takes its input from a file\n   associated with handle and interprets the\n   input according to the specified format, which is\n   described in the documentation for sprintf(). \n  \n  \n   Any whitespace in the format string matches any whitespace in the input\n   stream. This means that even a tab \\t in the format\n   string can match a single space character in the input stream.\n  \n  \n   Each call to fscanf() reads one line from the file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     format\n     \n\n      \n       The specified format as described in the \n       sprintf() documentation.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       The optional assigned values.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If only two parameters were passed to this function, the values parsed will be\n   returned as an array. Otherwise, if optional parameters are passed, the\n   function will return the number of assigned values. The optional\n   parameters must be passed by reference. \n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        Before this time, the maximum number of characters read from\n        the file was 512 (or up to the first \\n, whichever came first).\n        But now, arbitrarily long lines will be read and scanned.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fscanf() Example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;fopen(\"users.txt\",&nbsp;\"r\");while&nbsp;($userinfo&nbsp;=&nbsp;fscanf($handle,&nbsp;\"%s\\t%s\\t%s\\n\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;($name,&nbsp;$profession,&nbsp;$countrycode)&nbsp;=&nbsp;$userinfo;&nbsp;&nbsp;&nbsp;&nbsp;\/\/...&nbsp;do&nbsp;something&nbsp;with&nbsp;the&nbsp;values}fclose($handle);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Contents of users.txt\n    \njavier  argonaut        pe\nhiroshi sculptor        jp\nrobert  slacker us\nluigi   florist it\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fread() - Binary-safe file read\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    sscanf() - Parses input from a string according to a format\n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fputcsv.php","title":"fputcsv","description":"\n \n  fputcsv\n  (PHP 5 &gt;= 5.1.0)fputcsv &mdash; Format line as CSV and write to file pointer\n\n \n \n \n  Description\n  \n   int fputcsv\n    ( resource $handle\n   , array $fields\n   [, string $delimiter = &#039;,&#039;\n   [, string $enclosure = &#039;&quot;&#039;\n  ]] )\n\n  \n   fputcsv() formats a line (passed as a\n   fields array) as CSV and write it (terminated by a\n   newline) to the specified file handle. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      The file pointer must be valid, and must point to\na file successfully opened by fopen() or\nfsockopen() (and not yet closed by\nfclose()).\n     \n\n    \n\n    \n\n     fields\n     \n\n      \n       An array of values.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       The optional delimiter parameter sets the field\n       delimiter (one character only).\n      \n     \n\n    \n\n    \n\n     enclosure\n     \n\n      \n       The optional enclosure parameter sets the field\n       enclosure (one character only).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the written string or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fputcsv() example\n    \n\n&lt;?php$list&nbsp;=&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;array('aaa',&nbsp;'bbb',&nbsp;'ccc',&nbsp;'dddd'),&nbsp;&nbsp;&nbsp;&nbsp;array('123',&nbsp;'456',&nbsp;'789'),&nbsp;&nbsp;&nbsp;&nbsp;array('\"aaa\"',&nbsp;'\"bbb\"'));$fp&nbsp;=&nbsp;fopen('file.csv',&nbsp;'w');foreach&nbsp;($list&nbsp;as&nbsp;$fields)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fputcsv($fp,&nbsp;$fields);}fclose($fp);?&gt;\n\n\n    \n\n    The above example will write the following to file.csv:\n    \n\naaa,bbb,ccc,dddd\n123,456,789\n&quot;&quot;&quot;aaa&quot;&quot;&quot;,&quot;&quot;&quot;bbb&quot;&quot;&quot;\n\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: If PHP is not properly recognizing\nthe line endings when reading files either on or created by a Macintosh\ncomputer, enabling the\nauto_detect_line_endings\nrun-time configuration option may help resolve the problem.\n \n\n\n \n  See Also\n  \n   \n    fgetcsv() - Gets line from file pointer and parse for CSV fields\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fseek.php","title":"fseek","description":"\n \n  fseek\n  (PHP 4, PHP 5)fseek &mdash; Seeks on a file pointer\n\n \n \n \n  Description\n  \n   int fseek\n    ( resource $handle\n   , int $offset\n   [, int $whence = SEEK_SET\n  ] )\n\n  \n   Sets the file position indicator for the file referenced by\n   handle. The new position, measured in bytes\n   from the beginning of the file, is obtained by adding\n   offset to the position specified by\n   whence.\n  \n  \n   In general, it is allowed to seek past the end-of-file; if data is then\n   written, reads in any unwritten region between the end-of-file and the\n   sought position will yield bytes with value 0. However, certain streams\n   may not support this behavior, especially when they have an underlying\n   fixed size storage.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The offset.\n      \n      \n       To move to a position before the end-of-file, you need to pass\n       a negative value in offset and\n       set whence\n       to SEEK_END.\n      \n     \n\n    \n\n    \n\n     whence\n     \n\n      \n       whence values are:\n       \n        SEEK_SET - Set position equal to offset bytes.\n        SEEK_CUR - Set position to current location plus offset.\n        SEEK_END - Set position to end-of-file plus offset.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Upon success, returns 0; otherwise, returns -1.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fseek() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('somefile.txt',&nbsp;'r');\/\/&nbsp;read&nbsp;some&nbsp;data$data&nbsp;=&nbsp;fgets($fp,&nbsp;4096);\/\/&nbsp;move&nbsp;back&nbsp;to&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;file\/\/&nbsp;same&nbsp;as&nbsp;rewind($fp);fseek($fp,&nbsp;0);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If you have opened the file in append (a or\n    a+) mode, any data you write to the file will always be\n    appended, regardless of the file position, and the result of calling\n    fseek() will be undefined.\n   \n  \n  Note: \n   \n    Not all streams support seeking. For those that do not support seeking,\n    forward seeking from the current position is accomplished by reading\n    and discarding data; other forms of seeking will fail.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ftell() - Returns the current position of the file read\/write pointer\n    rewind() - Rewind the position of a file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fstat.php","title":"fstat","description":"\n \n  fstat\n  (PHP 4, PHP 5)fstat &mdash; Gets information about a file using an open file pointer\n\n \n \n \n  Description\n  \n   array fstat\n    ( resource $handle\n   )\n\n  \n   Gathers the statistics of the file opened by the file\n   pointer handle. This function is similar to the\n   stat() function except that it operates\n   on an open file pointer instead of a filename.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with the statistics of the file; the format of the array\n   is described in detail on the stat() manual page.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fstat() example\n    \n\n&lt;?php\/\/&nbsp;open&nbsp;a&nbsp;file$fp&nbsp;=&nbsp;fopen(\"\/etc\/passwd\",&nbsp;\"r\");\/\/&nbsp;gather&nbsp;statistics$fstat&nbsp;=&nbsp;fstat($fp);\/\/&nbsp;close&nbsp;the&nbsp;filefclose($fp);\/\/&nbsp;print&nbsp;only&nbsp;the&nbsp;associative&nbsp;partprint_r(array_slice($fstat,&nbsp;13));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [dev] =&gt; 771\n    [ino] =&gt; 488704\n    [mode] =&gt; 33188\n    [nlink] =&gt; 1\n    [uid] =&gt; 0\n    [gid] =&gt; 0\n    [rdev] =&gt; 0\n    [size] =&gt; 1114\n    [atime] =&gt; 1061067181\n    [mtime] =&gt; 1056136526\n    [ctime] =&gt; 1056136526\n    [blksize] =&gt; 4096\n    [blocks] =&gt; 8\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftell.php","title":"ftell","description":"\n \n  ftell\n  (PHP 4, PHP 5)ftell &mdash; Returns the current position of the file read\/write pointer\n\n \n \n \n  Description\n  \n   int ftell\n    ( resource $handle\n   )\n\n  \n   Returns the position of the file pointer referenced by handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The file pointer must be valid, and must point to a file successfully\n       opened by fopen() or popen().\n       ftell() gives undefined results for append-only streams\n       (opened with &quot;a&quot; flag).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the position of the file pointer referenced by\n   handle as an integer; i.e., its offset into the file stream.\n  \n  \n   If an error occurs, returns FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ftell() example\n    \n\n&lt;?php\/\/&nbsp;opens&nbsp;a&nbsp;file&nbsp;and&nbsp;read&nbsp;some&nbsp;data$fp&nbsp;=&nbsp;fopen(\"\/etc\/passwd\",&nbsp;\"r\");$data&nbsp;=&nbsp;fgets($fp,&nbsp;12);\/\/&nbsp;where&nbsp;are&nbsp;we&nbsp;?echo&nbsp;ftell($fp);&nbsp;\/\/&nbsp;11fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fopen() - Opens file or URL\n    popen() - Opens process file pointer\n    fseek() - Seeks on a file pointer\n    rewind() - Rewind the position of a file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftruncate.php","title":"ftruncate","description":"\n \n  ftruncate\n  (PHP 4, PHP 5)ftruncate &mdash; Truncates a file to a given length\n\n \n\n \n  Description\n  \n   bool ftruncate\n    ( resource $handle\n   , int $size\n   )\n\n  \n   Takes the filepointer, handle, and truncates the file to\n   length, size.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The file pointer.\n      \n      Note: \n       \n        The handle must be open for writing.\n       \n      \n     \n\n    \n\n    \n\n     size\n     \n\n      \n       The size to truncate to.\n      \n      Note: \n       \n        If size is larger than the file then the file\n        is extended with null bytes.\n       \n       \n        If size is smaller than the file then the file\n        is truncated to that size.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       PHP 4.3.3\n       \n        Prior to this release ftruncate() returned an\n        integer value of 1 on success, instead of\n        boolean TRUE.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 File truncation example\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'lorem_ipsum.txt';$handle&nbsp;=&nbsp;fopen($filename,&nbsp;'r+');ftruncate($handle,&nbsp;rand(1,&nbsp;filesize($filename)));rewind($handle);echo&nbsp;fread($handle,&nbsp;filesize($filename));fclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    The file pointer is not changed.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    fopen() - Opens file or URL\n    fseek() - Seeks on a file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fread.php","title":"fread","description":"\n \n  fread\n  (PHP 4, PHP 5)fread &mdash; Binary-safe file read\n\n \n \n \n  Description\n  \n   string fread\n    ( resource $handle\n   , int $length\n   )\n\n  \n   fread() reads up to\n   length bytes from the file pointer\n   referenced by handle. Reading stops as soon as one\n   of the following conditions is met:\n   \n    \n     \n      length bytes have been read\n     \n    \n    \n     \n      EOF (end of file) is reached\n     \n    \n    \n     \n      a packet becomes available or the \n      socket timeout occurs (for network streams)\n     \n    \n    \n     \n      if the stream is read buffered and it does not represent a plain file, at\n      most one read of up to a number of bytes equal to the chunk size (usually\n      8192) is made; depending on the previously buffered data, the size of the\n      returned data may be larger than the chunk size.\n     \n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     length\n     \n\n      \n       Up to length number of bytes read.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the read string  or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple fread() example\n    \n\n&lt;?php\/\/&nbsp;get&nbsp;contents&nbsp;of&nbsp;a&nbsp;file&nbsp;into&nbsp;a&nbsp;string$filename&nbsp;=&nbsp;\"\/usr\/local\/something.txt\";$handle&nbsp;=&nbsp;fopen($filename,&nbsp;\"r\");$contents&nbsp;=&nbsp;fread($handle,&nbsp;filesize($filename));fclose($handle);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Binary fread() example\n    Warning\n     \n      On systems which differentiate between binary and text files\n      (i.e. Windows) the file must be opened with &#039;b&#039; included in\n      fopen() mode parameter.\n     \n    \n    \n\n&lt;?php$filename&nbsp;=&nbsp;\"c:\\\\files\\\\somepic.gif\";$handle&nbsp;=&nbsp;fopen($filename,&nbsp;\"rb\");$contents&nbsp;=&nbsp;fread($handle,&nbsp;filesize($filename));fclose($handle);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Remote fread() examples\n    Warning\n     \n      When reading from anything that is not a regular local file, such as\n      streams returned when\n      reading remote files or from\n      popen() and fsockopen(), reading\n      will stop after a packet is available.  This means that you should\n      collect the data together in chunks as shown in the examples below.\n     \n    \n    \n\n&lt;?php\/\/&nbsp;For&nbsp;PHP&nbsp;5&nbsp;and&nbsp;up$handle&nbsp;=&nbsp;fopen(\"http:\/\/www.example.com\/\",&nbsp;\"rb\");$contents&nbsp;=&nbsp;stream_get_contents($handle);fclose($handle);?&gt;\n\n\n    \n\n    \n\n&lt;?php$handle&nbsp;=&nbsp;fopen(\"http:\/\/www.example.com\/\",&nbsp;\"rb\");$contents&nbsp;=&nbsp;'';while&nbsp;(!feof($handle))&nbsp;{&nbsp;&nbsp;$contents&nbsp;.=&nbsp;fread($handle,&nbsp;8192);}fclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n  Notes\n  Note: \n   \n    If you just want to get the contents of a file into a string, use\n    file_get_contents() as it has much better performance\n    than the code above.\n   \n  \n  Note: \n   \n    Note that fread() reads from the current position of \n    the file pointer. Use ftell() to find the current \n    position of the pointer and rewind() to rewind the \n    pointer position.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fwrite() - Binary-safe file write\n    fopen() - Opens file or URL\n    fsockopen() - Open Internet or Unix domain socket connection\n    popen() - Opens process file pointer\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    fscanf() - Parses input from a file according to a format\n    file() - Reads entire file into an array\n    fpassthru() - Output all remaining data on a file pointer\n    ftell() - Returns the current position of the file read\/write pointer\n    rewind() - Rewind the position of a file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-executable.php","title":"is_executable","description":"\n \n  is_executable\n  (PHP 4, PHP 5)is_executable &mdash; Tells whether the filename is executable\n\n \n \n \n  Description\n  \n   bool is_executable\n    ( string $filename\n   )\n\n  \n   Tells whether the filename is executable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the filename exists and is executable, or FALSE on\n   error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        is_executable() became available with\n        Windows\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_executable() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'\/home\/vincent\/somefile.sh';if&nbsp;(is_executable($file))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$file.'&nbsp;is&nbsp;executable';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$file.'&nbsp;is&nbsp;not&nbsp;executable';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    is_file() - Tells whether the filename is a regular file\n    is_link() - Tells whether the filename is a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fwrite.php","title":"fwrite","description":"\n \n  fwrite\n  (PHP 4, PHP 5)fwrite &mdash; Binary-safe file write\n\n \n \n \n  Description\n  \n   int fwrite\n    ( resource $handle\n   , string $string\n   [, int $length\n  ] )\n\n  \n   fwrite() writes the contents of\n   string to the file stream pointed to by\n   handle. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The string that is to be written.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If the length argument is given, writing will\n       stop after length bytes have been written or\n       the end of string is reached, whichever comes\n       first.\n      \n      \n       Note that if the length argument is given,\n       then the magic_quotes_runtime\n       configuration option will be ignored and no slashes will be\n       stripped from string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   fwrite() returns the number of bytes\n   written, or FALSE on error.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Writing to a network stream may end before the whole string is written.\n    Return value of fwrite() may be checked:\n    \n\n&lt;?phpfunction&nbsp;fwrite_stream($fp,&nbsp;$string)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;($written&nbsp;=&nbsp;0;&nbsp;$written&nbsp;&lt;&nbsp;strlen($string);&nbsp;$written&nbsp;+=&nbsp;$fwrite)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fwrite&nbsp;=&nbsp;fwrite($fp,&nbsp;substr($string,&nbsp;$written));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($fwrite&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$written;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$written;}?&gt;\n\n\n    \n\n   \n  \n  \n  Note: \n   \n    On systems which differentiate between binary and text files\n    (i.e. Windows) the file must be opened with &#039;b&#039; included in\n    fopen() mode parameter.\n   \n  \n  Note: \n   \n    If handle was fopen()ed in\n    append mode, fwrite()s are atomic (unless the size of\n    string exceeds the filesystem&#039;s block size, on some\n    platforms, and as long as the file is on a local filesystem). That is,\n    there is no need to flock() a resource before calling\n    fwrite(); all of the data will be written without\n    interruption.\n   \n  \n  Note: \n   \n    If writing twice to the file pointer, then the data will be appended to \n    the end of the file content:\n        \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('data.txt',&nbsp;'w');fwrite($fp,&nbsp;'1');fwrite($fp,&nbsp;'23');fclose($fp);\/\/&nbsp;the&nbsp;content&nbsp;of&nbsp;'data.txt'&nbsp;is&nbsp;now&nbsp;123&nbsp;and&nbsp;not&nbsp;23!?&gt;\n\n\n        \n\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple fwrite() example\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'test.txt';$somecontent&nbsp;=&nbsp;\"Add&nbsp;this&nbsp;to&nbsp;the&nbsp;file\\n\";\/\/&nbsp;Let's&nbsp;make&nbsp;sure&nbsp;the&nbsp;file&nbsp;exists&nbsp;and&nbsp;is&nbsp;writable&nbsp;first.if&nbsp;(is_writable($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;In&nbsp;our&nbsp;example&nbsp;we're&nbsp;opening&nbsp;$filename&nbsp;in&nbsp;append&nbsp;mode.&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;The&nbsp;file&nbsp;pointer&nbsp;is&nbsp;at&nbsp;the&nbsp;bottom&nbsp;of&nbsp;the&nbsp;file&nbsp;hence&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;that's&nbsp;where&nbsp;$somecontent&nbsp;will&nbsp;go&nbsp;when&nbsp;we&nbsp;fwrite()&nbsp;it.&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$handle&nbsp;=&nbsp;fopen($filename,&nbsp;'a'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Cannot&nbsp;open&nbsp;file&nbsp;($filename)\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Write&nbsp;$somecontent&nbsp;to&nbsp;our&nbsp;opened&nbsp;file.&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fwrite($handle,&nbsp;$somecontent)&nbsp;===&nbsp;FALSE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Cannot&nbsp;write&nbsp;to&nbsp;file&nbsp;($filename)\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Success,&nbsp;wrote&nbsp;($somecontent)&nbsp;to&nbsp;file&nbsp;($filename)\";&nbsp;&nbsp;&nbsp;&nbsp;fclose($handle);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;file&nbsp;$filename&nbsp;is&nbsp;not&nbsp;writable\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fread() - Binary-safe file read\n    fopen() - Opens file or URL\n    fsockopen() - Open Internet or Unix domain socket connection\n    popen() - Opens process file pointer\n    file_get_contents() - Reads entire file into a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-dir.php","title":"is_dir","description":"\n \n  is_dir\n  (PHP 4, PHP 5)is_dir &mdash; Tells whether the filename is a directory\n\n \n \n \n  Description\n  \n   bool is_dir\n    ( string $filename\n   )\n\n  \n   Tells whether the given filename is a directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file. If filename is a relative\n       filename, it will be checked relative to the current working\n       directory. If filename is a symbolic or hard link \n       then the link will be resolved and checked. If you have enabled safe mode,\n       or open_basedir further\n       restrictions may apply.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the filename exists and is a directory, FALSE\n   otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_dir() example\n    \n\n&lt;?phpvar_dump(is_dir('a_file.txt'));var_dump(is_dir('bogus_dir\/abc'));var_dump(is_dir('..'));&nbsp;\/\/one&nbsp;dir&nbsp;up?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(false)\nbool(false)\nbool(true)\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    chdir() - Change directory\n    dir\n    opendir() - Open directory handle\n    is_file() - Tells whether the filename is a regular file\n    is_link() - Tells whether the filename is a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-file.php","title":"is_file","description":"\n \n  is_file\n  (PHP 4, PHP 5)is_file &mdash; Tells whether the filename is a regular file\n\n \n \n \n  Description\n  \n   bool is_file\n    ( string $filename\n   )\n\n  \n   Tells whether the given file is a regular file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the filename exists and is a regular file, FALSE\n   otherwise.\n  \n  Note: \n    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,\n    some filesystem functions may return unexpected results for files which\n    are larger than 2GB.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_file() example\n    \n\n&lt;?phpvar_dump(is_file('a_file.txt'))&nbsp;.&nbsp;\"\\n\";var_dump(is_file('\/usr\/bin\/'))&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\nbool(false)\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    is_link() - Tells whether the filename is a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-readable.php","title":"is_readable","description":"\n \n  is_readable\n  (PHP 4, PHP 5)is_readable &mdash; Tells whether a file exists and is readable\n\n \n \n \n  Description\n  \n   bool is_readable\n    ( string $filename\n   )\n\n  \n   Tells whether a file exists and is readable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the file or directory specified by\n   filename exists and is readable, FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_readable() example\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'test.txt';if&nbsp;(is_readable($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'The&nbsp;file&nbsp;is&nbsp;readable';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'The&nbsp;file&nbsp;is&nbsp;not&nbsp;readable';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  \n   Keep in mind that PHP may be accessing the file as the user\n   id that the web server runs as (often &#039;nobody&#039;). Safe mode\n   limitations are not taken into account before PHP 5.1.5.\n  \n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n  Note: \n   \n    The check is done using the real UID\/GID instead of the effective one.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_writable() - Tells whether the filename is writable\n    file_exists() - Checks whether a file or directory exists\n    fgets() - Gets line from file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.glob.php","title":"glob","description":"\n \n  glob\n  (PHP 4 &gt;= 4.3.0, PHP 5)glob &mdash; Find pathnames matching a pattern\n\n \n \n \n  Description\n  \n   array glob\n    ( string $pattern\n   [, int $flags = 0\n  ] )\n\n  \n   The glob() function searches for all the pathnames\n   matching pattern according to the rules used by\n   the libc glob() function, which is similar to the rules used by common\n   shells.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern. No tilde expansion or parameter substitution is done.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       Valid flags:\n       \n        \n         \n          GLOB_MARK - Adds a slash to each directory returned\n         \n        \n        \n         \n          GLOB_NOSORT - Return files as they appear in the\n          directory (no sorting)\n         \n        \n        \n         \n          GLOB_NOCHECK - Return the search pattern if no\n          files matching it were found\n         \n        \n        \n         \n          GLOB_NOESCAPE - Backslashes do not quote\n          metacharacters\n         \n        \n        \n         \n          GLOB_BRACE - Expands {a,b,c} to match &#039;a&#039;, &#039;b&#039;,\n          or &#039;c&#039;\n         \n        \n        \n         \n          GLOB_ONLYDIR - Return only directory entries\n          which match the pattern\n         \n        \n        \n         \n          GLOB_ERR - Stop on read errors (like unreadable\n          directories), by default errors are ignored.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing the matched files\/directories, an empty array\n   if no file matched or FALSE on error.\n  \n  Note: \n   \n    On some systems it is impossible to distinguish between empty match and an\n    error.\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        GLOB_ERR was added\n       \n      \n\n      \n       4.3.3\n       \n        GLOB_ONLYDIR became available on Windows and\n        other systems not using the GNU C library\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Convenient way how glob() can replace\n     opendir() and friends.\n    \n    \n\n&lt;?phpforeach&nbsp;(glob(\"*.txt\")&nbsp;as&nbsp;$filename)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$filename&nbsp;size&nbsp;\"&nbsp;.&nbsp;filesize($filename)&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nfunclist.txt size 44686\nfuncsummary.txt size 267625\nquickref.txt size 137820\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: \n   \n    This function isn&#039;t available on some systems (e.g. old Sun OS).\n   \n  \n  Note: \n   \n    The GLOB_BRACE flag is not available on some non GNU\n    systems, like Solaris.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    opendir() - Open directory handle\n    readdir() - Read entry from directory handle\n    closedir() - Close directory handle\n    fnmatch() - Match filename against a pattern\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-link.php","title":"is_link","description":"\n \n  is_link\n  (PHP 4, PHP 5)is_link &mdash; Tells whether the filename is a symbolic link\n\n \n \n \n  Description\n  \n   bool is_link\n    ( string $filename\n   )\n\n  \n   Tells whether the given file is a symbolic link.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the filename exists and is a symbolic link, FALSE\n   otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Create and confirm if a file is a symbolic link\n    \n\n&lt;?php$link&nbsp;=&nbsp;'uploads';if&nbsp;(is_link($link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo(readlink($link));}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;symlink('uploads.php',&nbsp;$link);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    is_file() - Tells whether the filename is a regular file\n    readlink() - Returns the target of a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-writeable.php","title":"is_writeable","description":"\n \n  is_writeable\n  (PHP 4, PHP 5)is_writeable &mdash; Alias of is_writable()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   is_writable().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-uploaded-file.php","title":"is_uploaded_file","description":"\n \n  is_uploaded_file\n  (PHP 4 &gt;= 4.0.3, PHP 5)is_uploaded_file &mdash; Tells whether the file was uploaded via HTTP POST\n\n \n \n \n  Description\n  \n   bool is_uploaded_file\n    ( string $filename\n   )\n\n  \n   Returns TRUE if the file named by filename was\n   uploaded via HTTP POST. This is useful to help ensure that a\n   malicious user hasn&#039;t tried to trick the script into working on\n   files upon which it should not be working--for instance,\n   \/etc\/passwd.\n  \n  \n   This sort of check is especially important if there is any chance\n   that anything done with uploaded files could reveal their\n   contents to the user, or even to other users on the same\n   system.\n  \n  \n   For proper working, the function is_uploaded_file() needs\n   an argument like $_FILES['userfile']['tmp_name'], - the name of the uploaded\n   file on the client&#039;s machine $_FILES['userfile']['name'] does not work.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename being checked.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_uploaded_file() example\n    \n\n&lt;?phpif&nbsp;(is_uploaded_file($_FILES['userfile']['tmp_name']))&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"File&nbsp;\".&nbsp;$_FILES['userfile']['name']&nbsp;.\"&nbsp;uploaded&nbsp;successfully.\\n\";&nbsp;&nbsp;&nbsp;echo&nbsp;\"Displaying&nbsp;contents\\n\";&nbsp;&nbsp;&nbsp;readfile($_FILES['userfile']['tmp_name']);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"Possible&nbsp;file&nbsp;upload&nbsp;attack:&nbsp;\";&nbsp;&nbsp;&nbsp;echo&nbsp;\"filename&nbsp;'\".&nbsp;$_FILES['userfile']['tmp_name']&nbsp;.&nbsp;\"'.\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    move_uploaded_file() - Moves an uploaded file to a new location\n    $_FILES\n    See Handling file uploads for a simple usage example.\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lchgrp.php","title":"lchgrp","description":"\n \n  lchgrp\n  (PHP 5 &gt;= 5.1.2)lchgrp &mdash; Changes group ownership of symlink\n\n \n \n \n  Description\n  \n   bool lchgrp\n    ( string $filename\n   , mixed $group\n   )\n\n  \n   Attempts to change the group of the symlink filename\n   to group.\n  \n  \n   Only the superuser may change the group of a symlink arbitrarily; other\n   users may change the group of a symlink to any group of which that user is\n   a member.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the symlink.\n      \n     \n\n    \n\n    \n\n     group\n     \n\n      \n       The group specified by name or number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Changing the group of a symbolic link\n    \n\n&lt;?php$target&nbsp;=&nbsp;'output.php';$link&nbsp;=&nbsp;'output.html';symlink($target,&nbsp;$link);lchgrp($link,&nbsp;8);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n\n \n  See Also\n  \n   \n    chgrp() - Changes file group\n    lchown() - Changes user ownership of symlink\n    chown() - Changes file owner\n    chmod() - Changes file mode\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lchown.php","title":"lchown","description":"\n \n  lchown\n  (PHP 5 &gt;= 5.1.2)lchown &mdash; Changes user ownership of symlink\n\n \n \n \n  Description\n  \n   bool lchown\n    ( string $filename\n   , mixed $user\n   )\n\n  \n   Attempts to change the owner of the symlink filename\n   to user user.\n  \n  \n   Only the superuser may change the owner of a symlink.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     user\n     \n\n      \n       User name or number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Changing the owner of a symbolic link\n    \n\n&lt;?php$target&nbsp;=&nbsp;'output.php';$link&nbsp;=&nbsp;'output.html';symlink($target,&nbsp;$link);lchown($link,&nbsp;8);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n\n \n  See Also\n  \n   \n    chown() - Changes file owner\n    lchgrp() - Changes group ownership of symlink\n    chgrp() - Changes file group\n    chmod() - Changes file mode\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-writable.php","title":"is_writable","description":"\n \n  is_writable\n  (PHP 4, PHP 5)is_writable &mdash; Tells whether the filename is writable\n\n \n \n \n  Description\n  \n   bool is_writable\n    ( string $filename\n   )\n\n  \n   Returns TRUE if the filename exists and is\n   writable.  The filename argument may be a directory name allowing you\n   to check if a directory is writable.\n  \n  \n   Keep in mind that PHP may be accessing the file as the user id\n   that the web server runs as (often &#039;nobody&#039;). Safe mode\n   limitations are not taken into account.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename being checked.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the filename exists and is\n   writable.  \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_writable() example\n    \n\n&lt;?php$filename&nbsp;=&nbsp;'test.txt';if&nbsp;(is_writable($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'The&nbsp;file&nbsp;is&nbsp;writable';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'The&nbsp;file&nbsp;is&nbsp;not&nbsp;writable';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  \n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n \n \n  See Also\n  \n   \n    is_readable() - Tells whether a file exists and is readable\n    file_exists() - Checks whether a file or directory exists\n    fwrite() - Binary-safe file write\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.linkinfo.php","title":"linkinfo","description":"\n \n  linkinfo\n  (PHP 4, PHP 5)linkinfo &mdash; Gets information about a link\n\n \n \n \n  Description\n  \n   int linkinfo\n    ( string $path\n   )\n\n  \n   Gets information about a link.  \n  \n  \n   This function is used to verify if a link (pointed to by\n   path) really exists (using the same method as the\n   S_ISLNK macro defined in stat.h).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       Path to the link.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   linkinfo() returns the st_dev field\n   of the Unix C stat structure returned by the lstat\n   system call. Returns 0 or FALSE in case of error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms  (Vista, Server \n        2008 or greater).\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 linkinfo() example\n    \n\n&lt;?phpecho&nbsp;linkinfo('\/vmlinuz');&nbsp;\/\/&nbsp;835?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    symlink() - Creates a symbolic link\n    link() - Create a hard link\n    readlink() - Returns the target of a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.link.php","title":"link","description":"\n \n  link\n  (PHP 4, PHP 5)link &mdash; Create a hard link\n\n \n \n \n  Description\n  \n   bool link\n    ( string $target\n   , string $link\n   )\n\n  \n   link() creates a hard link.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     target\n     \n\n      \n       Target of the link.\n      \n     \n\n    \n\n    \n\n     link\n     \n\n      \n       The link name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    For Windows only: This function requires PHP to run in an elevated\n    mode or with the UAC disabled.\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms  (Vista, Server \n        2008 or greater).\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Creating a simple hard link\n    \n\n&lt;?php$target&nbsp;=&nbsp;'source.ext';&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;the&nbsp;file&nbsp;that&nbsp;already&nbsp;exists$link&nbsp;=&nbsp;'newfile.ext';&nbsp;\/\/&nbsp;This&nbsp;the&nbsp;filename&nbsp;that&nbsp;you&nbsp;want&nbsp;to&nbsp;link&nbsp;it&nbsp;tolink($target,&nbsp;$link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function will not work on\nremote files as the file to\nbe examined must be accessible via the server&#039;s filesystem.\n \n\n\n \n  See Also\n  \n   \n    symlink() - Creates a symbolic link\n    readlink() - Returns the target of a symbolic link\n    linkinfo() - Gets information about a link\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lstat.php","title":"lstat","description":"\n \n  lstat\n  (PHP 4, PHP 5)lstat &mdash; Gives information about a file or symbolic link\n\n \n \n \n  Description\n  \n   array lstat\n    ( string $filename\n   )\n\n  \n   Gathers the statistics of the file or symbolic link named by\n   filename.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to a file or a symbolic link.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   See the manual page for stat() for information on\n   the structure of the array that lstat() returns.\n   This function is identical to the stat() function\n   except that if the filename parameter is a symbolic\n   link, the status of the symbolic link is returned, not the status of the\n   file pointed to by the symbolic link.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Comparison of stat() and lstat()\n    \n\n&lt;?phpsymlink('uploads.php',&nbsp;'uploads');\/\/&nbsp;Contrast&nbsp;information&nbsp;for&nbsp;uploads.php&nbsp;and&nbsp;uploadsarray_diff(stat('uploads'),&nbsp;lstat('uploads'));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n     Information that differs between the two files.\n    \n    \n\nArray\n(\n    [ino] =&gt; 97236376\n    [mode] =&gt; 33188\n    [size] =&gt; 34\n    [atime] =&gt; 1223580003\n    [mtime] =&gt; 1223581848\n    [ctime] =&gt; 1223581848\n    [blocks] =&gt; 8\n)\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \nUpon failure, an E_WARNING is emitted.\n\n \n\n\n \n  Notes\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-ini-string.php","title":"parse_ini_string","description":"\n \n  parse_ini_string\n  (PHP 5 &gt;= 5.3.0)parse_ini_string &mdash; Parse a configuration string\n\n \n \n \n  Description\n  \n   array parse_ini_string\n    ( string $ini\n   [, bool $process_sections = false\n   [, int $scanner_mode = INI_SCANNER_NORMAL\n  ]] )\n\n  \n   parse_ini_string() returns the settings in string\n   ini in an associative array.\n  \n  \n   The structure of the ini string is the same as the php.ini&#039;s.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     ini\n     \n\n      \n       The contents of the ini file being parsed.\n      \n     \n\n    \n\n    \n\n     process_sections\n     \n\n      \n       By setting the process_sections\n       parameter to TRUE, you get a multidimensional array, with\n       the section names and settings included. The default\n       for process_sections is FALSE      \n      \n     \n\n    \n\n    \n\n     scanner_mode\n     \n\n      \n       Can either be INI_SCANNER_NORMAL (default) or \n       INI_SCANNER_RAW. If INI_SCANNER_RAW \n       is supplied, then option values will not be parsed.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   The settings are returned as an associative array on success,\n   and FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    There are reserved words which must not be used as keys for\n    ini files.  These include: null, yes, no, true, false, on, off, none.\n    Values null, no and false results in &quot;&quot;, yes and true results in &quot;1&quot;.\n    Characters ?{}|&amp;~![()^&quot; must not be used anywhere in\n    the key and have a special meaning in the value.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    parse_ini_file() - Parse a configuration file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mkdir.php","title":"mkdir","description":"\n \n  mkdir\n  (PHP 4, PHP 5)mkdir &mdash; Makes directory\n\n \n \n \n  Description\n  \n   bool mkdir\n    ( string $pathname\n   [, int $mode = 0777\n   [, bool $recursive = false\n   [, resource $context\n  ]]] )\n\n  \n   Attempts to create the directory specified by pathname.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pathname\n     \n\n      \n       The directory path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode is 0777 by default, which means the widest possible\n       access. For more information on modes, read the details\n       on the chmod() page.\n      \n      Note: \n       \n        mode is ignored on Windows.\n       \n      \n      \n       Note that you probably want to specify the mode as an octal number,\n       which means it should have a leading zero. The mode is also modified\n       by the current umask, which you can change using\n       umask().\n      \n     \n\n    \n\n    \n\n     recursive\n     \n\n      \n       Allows the creation of nested directories specified in the \n       pathname. Defaults to FALSE.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The recursive parameter was added\n       \n      \n\n      \n       5.0.0\n       \n        As of PHP 5.0.0 mkdir() can also be used with\n        some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers support\n        mkdir()\n       \n      \n\n      \n       4.2.0\n       \n        The mode parameter became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mkdir() example\n    \n\n&lt;?phpmkdir(\"\/path\/to\/my\/dir\",&nbsp;0700);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 mkdir() using the recursive parameter\n    \n\n&lt;?php\/\/&nbsp;Desired&nbsp;folder&nbsp;structure$structure&nbsp;=&nbsp;'.\/depth1\/depth2\/depth3\/';\/\/&nbsp;To&nbsp;create&nbsp;the&nbsp;nested&nbsp;structure,&nbsp;the&nbsp;$recursive&nbsp;parameter&nbsp;\/\/&nbsp;to&nbsp;mkdir()&nbsp;must&nbsp;be&nbsp;specified.if&nbsp;(!mkdir($structure,&nbsp;0,&nbsp;true))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Failed&nbsp;to&nbsp;create&nbsp;folders...');}\/\/&nbsp;...?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: When safe mode is enabled, PHP checks whether\nthe directory in which the script is operating has the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory    \n    rmdir() - Removes directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.move-uploaded-file.php","title":"move_uploaded_file","description":"\n \n  move_uploaded_file\n  (PHP 4 &gt;= 4.0.3, PHP 5)move_uploaded_file &mdash; Moves an uploaded file to a new location\n\n \n \n \n  Description\n  \n   bool move_uploaded_file\n    ( string $filename\n   , string $destination\n   )\n\n  \n   This function checks to ensure that the file designated by\n   filename is a valid upload file (meaning\n   that it was uploaded via PHP&#039;s HTTP POST upload mechanism). If\n   the file is valid, it will be moved to the filename given by\n   destination.\n  \n  \n   This sort of check is especially important if there is any chance\n   that anything done with uploaded files could reveal their\n   contents to the user, or even to other users on the same\n   system.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the uploaded file.\n      \n     \n\n    \n\n    \n\n     destination\n     \n\n      \n       The destination of the moved file.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success.\n  \n  \n   If filename is not a valid upload file,\n   then no action will occur, and\n   move_uploaded_file() will return\n   FALSE.\n  \n  \n   If filename is a valid upload file, but\n   cannot be moved for some reason, no action will occur, and\n   move_uploaded_file() will return\n   FALSE. Additionally, a warning will be issued.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Uploading multiple files\n    \n\n&lt;?php$uploads_dir&nbsp;=&nbsp;'\/uploads';foreach&nbsp;($_FILES[\"pictures\"][\"error\"]&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$error)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($error&nbsp;==&nbsp;UPLOAD_ERR_OK)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$tmp_name&nbsp;=&nbsp;$_FILES[\"pictures\"][\"tmp_name\"][$key];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name&nbsp;=&nbsp;$_FILES[\"pictures\"][\"name\"][$key];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move_uploaded_file($tmp_name,&nbsp;\"$uploads_dir\/$name\");&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    move_uploaded_file() is both safe mode\n    and open_basedir\n    aware. However, restrictions are placed only on the\n    destination path as to allow the moving\n    of uploaded files in which filename may conflict\n    with such restrictions. move_uploaded_file() ensures\n    the safety of this operation by allowing only those files uploaded\n    through PHP to be moved.\n   \n  \n  Warning\n   \n    If the destination file already exists, it will be overwritten.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    is_uploaded_file() - Tells whether the file was uploaded via HTTP POST\n    rename() - Renames a file or directory\n    See Handling file uploads for a simple usage example\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pathinfo.php","title":"pathinfo","description":"\n \n  pathinfo\n  (PHP 4 &gt;= 4.0.3, PHP 5)pathinfo &mdash; Returns information about a file path\n\n \n \n \n  Description\n  \n   mixed pathinfo\n    ( string $path\n   [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME\n  ] )\n\n  \n   pathinfo() returns information about\n   path: either an associative array or a string,\n   depending on options.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       The path to be parsed.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       If present, specifies a specific element to be returned; one of\n       PATHINFO_DIRNAME,\n       PATHINFO_BASENAME,\n       PATHINFO_EXTENSION or\n       PATHINFO_FILENAME.\n      \n      If options is not specified, returns all\n       available elements.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If the options parameter is not passed, an\n   associative array containing the following elements is\n   returned:\n   dirname, basename,\n   extension (if any), and filename.\n  \n  Note: \n   \n    If the path does not have an extension, no\n    extension element will be returned\n    (see second example below).\n   \n  \n  \n   If options is present, returns a \n   string containing the requested element.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        The PATHINFO_FILENAME constant was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pathinfo() Example\n    \n\n&lt;?php$path_parts&nbsp;=&nbsp;pathinfo('\/www\/htdocs\/inc\/lib.inc.php');echo&nbsp;$path_parts['dirname'],&nbsp;\"\\n\";echo&nbsp;$path_parts['basename'],&nbsp;\"\\n\";echo&nbsp;$path_parts['extension'],&nbsp;\"\\n\";echo&nbsp;$path_parts['filename'],&nbsp;\"\\n\";&nbsp;\/\/&nbsp;since&nbsp;PHP&nbsp;5.2.0?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\/www\/htdocs\/inc\nlib.inc.php\nphp\nlib.inc\n\n    \n   \n  \n  \n   \n    Example #2 pathinfo() example showing difference between null and no extension\n    \n\n&lt;?php$path_parts&nbsp;=&nbsp;pathinfo('\/path\/emptyextension.');var_dump($path_parts['extension']);$path_parts&nbsp;=&nbsp;pathinfo('\/path\/noextension');var_dump($path_parts['extension']);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(0) &quot;&quot;\n\nNotice: Undefined index: extension in test.php on line 6\nNULL\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For information on retrieving the current path info, read\n    the section on \n    predefined reserved variables.\n   \n  \n  Note: \n   \n    pathinfo() is locale aware, so for it to parse a path \n    containing multibyte characters correctly, the matching locale must be set using \n    the setlocale() function.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    dirname() - Returns parent directory's path\n    basename() - Returns trailing name component of path\n    parse_url() - Parse a URL and return its components\n    realpath() - Returns canonicalized absolute pathname\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readlink.php","title":"readlink","description":"\n \n  readlink\n  (PHP 4, PHP 5)readlink &mdash; Returns the target of a symbolic link\n\n \n \n \n  Description\n  \n   string readlink\n    ( string $path\n   )\n\n  \n   readlink() does the same as the readlink C function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       The symbolic link path.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms  (Vista, Server \n        2008 or greater).\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the contents of the symbolic link path or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 readlink() example\n    \n\n&lt;?php\/\/&nbsp;output&nbsp;e.g.&nbsp;\/boot\/vmlinux-2.4.20-xfsecho&nbsp;readlink('\/vmlinuz');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_link() - Tells whether the filename is a symbolic link\n    symlink() - Creates a symbolic link\n    linkinfo() - Gets information about a link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pclose.php","title":"pclose","description":"\n \n  pclose\n  (PHP 4, PHP 5)pclose &mdash; Closes process file pointer\n\n \n \n \n  Description\n  \n   int pclose\n    ( resource $handle\n   )\n\n  \n   Closes a file pointer to a pipe opened by popen().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The file pointer must be valid, and must have been returned by a\n       successful call to popen().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the termination status of the process that was run. In case of \n   an error then -1 is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pclose() example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;popen('\/bin\/ls',&nbsp;'r');pclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   Unix Only:\n   \n    proc_close() is internally implemented using the \n    waitpid(3) system call. To obtain the real exit \n    status code the pcntl_wexitstatus() function \n    should be used.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    popen() - Opens process file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-ini-file.php","title":"parse_ini_file","description":"\n \n  parse_ini_file\n  (PHP 4, PHP 5)parse_ini_file &mdash; Parse a configuration file\n\n \n \n \n  Description\n  \n   array parse_ini_file\n    ( string $filename\n   [, bool $process_sections = false\n   [, int $scanner_mode = INI_SCANNER_NORMAL\n  ]] )\n\n  \n   parse_ini_file() loads in the\n   ini file specified in filename,\n   and returns the settings in it in an associative array.\n  \n  \n   The structure of the ini file is the same as the php.ini&#039;s.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the ini file being parsed.\n      \n     \n\n    \n\n    \n\n     process_sections\n     \n\n      \n       By setting the process_sections\n       parameter to TRUE, you get a multidimensional array, with\n       the section names and settings included. The default\n       for process_sections is FALSE      \n      \n     \n\n    \n\n    \n\n     scanner_mode\n     \n\n      \n       Can either be INI_SCANNER_NORMAL (default) or \n       INI_SCANNER_RAW. If INI_SCANNER_RAW \n       is supplied, then option values will not be parsed.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   The settings are returned as an associative array on success,\n   and FALSE on failure.\n  \n \n\n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         Added optional scanner_mode parameter.\n         Single quotes may now be used around variable assignments.\n         Hash marks (#) may no longer be used as comments\n         and will throw a deprecation warning if used.\n       \n      \n\n      \n       5.2.7\n       \n        On syntax error this function will return FALSE rather than an empty\n        array.\n       \n      \n\n      \n       5.2.4\n       \n        Keys and section names consisting of numbers are now evaluated as PHP\n        integers thus numbers\n        starting by 0 are evaluated as octals and numbers starting by 0x are\n        evaluated as hexadecimals.\n       \n      \n\n      \n       5.0.0\n       \n        Values enclosed in double quotes can contain new lines.\n       \n      \n\n      \n       4.2.1\n       \n        This function is now affected by safe mode\n        and open_basedir.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Contents of sample.ini\n    \n\n; This is a sample configuration file\n; Comments start with &#039;;&#039;, as in php.ini\n\n[first_section]\none = 1\nfive = 5\nanimal = BIRD\n\n[second_section]\npath = &quot;\/usr\/local\/bin&quot;\nURL = &quot;http:\/\/www.example.com\/~username&quot;\n\n[third_section]\nphpversion[] = &quot;5.0&quot;\nphpversion[] = &quot;5.1&quot;\nphpversion[] = &quot;5.2&quot;\nphpversion[] = &quot;5.3&quot;\n\n    \n\n   \n   \n    Example #2 parse_ini_file() example\n    \n     Constants may also be parsed\n     in the ini file so if you define a constant as an ini value before\n     running parse_ini_file(), it will be integrated into\n     the results.  Only ini values are evaluated.  For example:\n    \n    \n\n&lt;?phpdefine('BIRD',&nbsp;'Dodo&nbsp;bird');\/\/&nbsp;Parse&nbsp;without&nbsp;sections$ini_array&nbsp;=&nbsp;parse_ini_file(\"sample.ini\");print_r($ini_array);\/\/&nbsp;Parse&nbsp;with&nbsp;sections$ini_array&nbsp;=&nbsp;parse_ini_file(\"sample.ini\",&nbsp;true);print_r($ini_array);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [one] =&gt; 1\n    [five] =&gt; 5\n    [animal] =&gt; Dodo bird\n    [path] =&gt; \/usr\/local\/bin\n    [URL] =&gt; http:\/\/www.example.com\/~username\n    [phpversion] =&gt; Array\n        (\n            [0] =&gt; 5.0\n            [1] =&gt; 5.1\n            [2] =&gt; 5.2\n            [3] =&gt; 5.3\n        )\n\n)\nArray\n(\n    [first_section] =&gt; Array\n        (\n            [one] =&gt; 1\n            [five] =&gt; 5\n            [animal] =&gt; Dodo bird\n        )\n\n    [second_section] =&gt; Array\n        (\n            [path] =&gt; \/usr\/local\/bin\n            [URL] =&gt; http:\/\/www.example.com\/~username\n        )\n\n    [third_section] =&gt; Array\n        (\n            [phpversion] =&gt; Array\n                (\n                    [0] =&gt; 5.0\n                    [1] =&gt; 5.1\n                    [2] =&gt; 5.2\n                    [3] =&gt; 5.3\n                )\n\n        )\n\n)\n\n    \n   \n  \n  \n   \n    Example #3 parse_ini_file() parsing a php.ini file\n    \n\n&lt;?php\/\/&nbsp;A&nbsp;simple&nbsp;function&nbsp;used&nbsp;for&nbsp;comparing&nbsp;the&nbsp;results&nbsp;belowfunction&nbsp;yesno($expression){&nbsp;&nbsp;&nbsp;&nbsp;return($expression&nbsp;?&nbsp;'Yes'&nbsp;:&nbsp;'No');}\/\/&nbsp;Get&nbsp;the&nbsp;path&nbsp;to&nbsp;php.ini&nbsp;using&nbsp;the&nbsp;php_ini_loaded_file()&nbsp;\/\/&nbsp;function&nbsp;available&nbsp;as&nbsp;of&nbsp;PHP&nbsp;5.2.4$ini_path&nbsp;=&nbsp;php_ini_loaded_file();\/\/&nbsp;Parse&nbsp;php.ini$ini&nbsp;=&nbsp;parse_ini_file($ini_path);\/\/&nbsp;Print&nbsp;and&nbsp;compare&nbsp;the&nbsp;values,&nbsp;note&nbsp;that&nbsp;using&nbsp;get_cfg_var()\/\/&nbsp;will&nbsp;give&nbsp;the&nbsp;same&nbsp;results&nbsp;for&nbsp;parsed&nbsp;and&nbsp;loaded&nbsp;hereecho&nbsp;'(parsed)&nbsp;magic_quotes_gpc&nbsp;=&nbsp;'&nbsp;.&nbsp;yesno($ini['magic_quotes_gpc'])&nbsp;.&nbsp;PHP_EOL;echo&nbsp;'(loaded)&nbsp;magic_quotes_gpc&nbsp;=&nbsp;'&nbsp;.&nbsp;yesno(get_cfg_var('magic_quotes_gpc'))&nbsp;.&nbsp;PHP_EOL;?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n(parsed) magic_quotes_gpc = Yes\n(loaded) magic_quotes_gpc = Yes\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function has nothing to do with the\n    php.ini file. It is already processed by\n    the time you run your script. This function can be used to\n    read in your own application&#039;s configuration files.\n   \n  \n  Note: \n   \n    If a value in the ini file contains any non-alphanumeric\n    characters it needs to be enclosed in double-quotes (&quot;).\n   \n  \n  Note: \n   \n    There are reserved words which must not be used as keys for\n    ini files.  These include: null, yes, no, true, false, on, off, none.\n    Values null, no and false results in &quot;&quot;, yes and true results in &quot;1&quot;.\n    Characters ?{}|&amp;~![()^&quot; must not be used anywhere in\n    the key and have a special meaning in the value.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    parse_ini_string() - Parse a configuration string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath_cache_get.php","title":"realpath_cache_get","description":"\n \n  realpath_cache_get\n  (PHP 5 &gt;= 5.3.2)realpath_cache_get &mdash; Get realpath cache entries\n\n \n \n \n  Description\n  \n   array realpath_cache_get\n    ( void\n   )\n\n  \n   Get the contents of the realpath cache.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of realpath cache entries. The keys are original path\n   entries, and the values are arrays of data items, containing the resolved\n   path, expiration date, and other options kept in the cache.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 realpath_cache_get() example\n    \n\n&lt;?phpvar_dump(realpath_cache_get());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(2) {\n  [&quot;\/test&quot;]=&gt;\n  array(4) {\n    [&quot;key&quot;]=&gt;\n    int(123456789)\n    [&quot;is_dir&quot;]=&gt;\n    bool(true)\n    [&quot;realpath&quot;]=&gt;\n    string(5) &quot;\/test&quot;\n    [&quot;expires&quot;]=&gt;\n    int(1260318939)\n  }\n  [&quot;\/test\/test.php&quot;]=&gt;\n  array(4) {\n    [&quot;key&quot;]=&gt;\n    int(987654321)\n    [&quot;is_dir&quot;]=&gt;\n    bool(false)\n    [&quot;realpath&quot;]=&gt;\n    string(12) &quot;\/root\/test.php&quot;\n    [&quot;expires&quot;]=&gt;\n    int(1260318939)\n  }\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    realpath_cache_size() - Get realpath cache size\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.popen.php","title":"popen","description":"\n \n  popen\n  (PHP 4, PHP 5)popen &mdash; Opens process file pointer\n\n \n \n \n  Description\n  \n   resource popen\n    ( string $command\n   , string $mode\n   )\n\n  \n   Opens a pipe to a process executed by forking the command given\n   by command.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     command\n     \n\n      \n       The command\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a file pointer identical to that returned by\n   fopen(), except that it is unidirectional (may\n   only be used for reading or writing) and must be closed with\n   pclose(). This pointer may be used with\n   fgets(), fgetss(), and\n   fwrite(). When the mode is &#039;r&#039;, the returned\n   file pointer equals to the STDOUT of the command, when the mode\n   is &#039;w&#039;, the returned file pointer equals to the STDIN of the\n   command.\n  \n  \n   If an error occurs, returns FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 popen() example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;popen(\"\/bin\/ls\",&nbsp;\"r\");?&gt;\n\n\n    \n\n   \n  \n  \n   If the command to be executed could not be found, a valid\n   resource is returned. This may seem odd, but makes sense; it\n   allows you to access any error message returned by the shell:\n   \n    Example #2 popen() example\n    \n\n&lt;?phperror_reporting(E_ALL);\/*&nbsp;Add&nbsp;redirection&nbsp;so&nbsp;we&nbsp;can&nbsp;get&nbsp;stderr.&nbsp;*\/$handle&nbsp;=&nbsp;popen('\/path\/to\/executable&nbsp;2&gt;&amp;1',&nbsp;'r');echo&nbsp;\"'$handle';&nbsp;\"&nbsp;.&nbsp;gettype($handle)&nbsp;.&nbsp;\"\\n\";$read&nbsp;=&nbsp;fread($handle,&nbsp;2096);echo&nbsp;$read;pclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    If you&#039;re looking for bi-directional support (two-way), use\n    proc_open().\n   \n  \n  Note: When\nsafe mode is enabled, you can only\nexecute files within the safe_mode_exec_dir.\nFor practical reasons, it is currently not allowed to have ..\ncomponents in the path to the executable.\n  WarningWith safe mode enabled,\nthe command string is escaped with escapeshellcmd(). Thus,\necho y | echo x becomes echo y \\| echo x.\n \n\n \n \n  See Also\n  \n   \n    pclose() - Closes process file pointer\n    fopen() - Opens file or URL\n    proc_open() - Execute a command and open file pointers for input\/output\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath_cache_size.php","title":"realpath_cache_size","description":"\n \n  realpath_cache_size\n  (PHP 5 &gt;= 5.3.2)realpath_cache_size &mdash; Get realpath cache size\n\n \n \n \n  Description\n  \n   int realpath_cache_size\n    ( void\n   )\n\n  \n   Get the amount of memory used by the realpath cache.\n  \n \n\n\n \n  Return Values\n  \n   Returns how much memory realpath cache is using.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 realpath_cache_size() example\n    \n\n&lt;?phpvar_dump(realpath_cache_size());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nint(412)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    realpath_cache_get() - Get realpath cache entries\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readfile.php","title":"readfile","description":"\n \n  readfile\n  (PHP 4, PHP 5)readfile &mdash; Outputs a file\n\n \n \n \n  Description\n  \n   int readfile\n    ( string $filename\n   [, bool $use_include_path = false\n   [, resource $context\n  ]] )\n\n  \n   Reads a file and writes it to the output buffer.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename being read.\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       You can use the optional second parameter and set it to TRUE, if\n       you want to search for the file in the include_path, too.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A context stream resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the number of bytes read from the file. If an error\n   occurs, FALSE is returned and unless the function was called as\n   @readfile(), an error message is printed.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Forcing a download using readfile()\n    \n\n&lt;?php$file&nbsp;=&nbsp;'monkey.gif';if&nbsp;(file_exists($file))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;header('Content-Description:&nbsp;File&nbsp;Transfer');&nbsp;&nbsp;&nbsp;&nbsp;header('Content-Type:&nbsp;application\/octet-stream');&nbsp;&nbsp;&nbsp;&nbsp;header('Content-Disposition:&nbsp;attachment;&nbsp;filename='.basename($file));&nbsp;&nbsp;&nbsp;&nbsp;header('Content-Transfer-Encoding:&nbsp;binary');&nbsp;&nbsp;&nbsp;&nbsp;header('Expires:&nbsp;0');&nbsp;&nbsp;&nbsp;&nbsp;header('Cache-Control:&nbsp;must-revalidate,&nbsp;post-check=0,&nbsp;pre-check=0');&nbsp;&nbsp;&nbsp;&nbsp;header('Pragma:&nbsp;public');&nbsp;&nbsp;&nbsp;&nbsp;header('Content-Length:&nbsp;'&nbsp;.&nbsp;filesize($file));&nbsp;&nbsp;&nbsp;&nbsp;ob_clean();&nbsp;&nbsp;&nbsp;&nbsp;flush();&nbsp;&nbsp;&nbsp;&nbsp;readfile($file);&nbsp;&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n     \n     \n      \n     \n    \n   \n  \n \n\n\n \n  Notes\n\n  TipA URL can be used as a\nfilename with this function if the fopen wrappers have been enabled.\nSee fopen() for more details on how to specify the\nfilename. See the Supported Protocols and Wrappers for links to information\nabout what abilities the various wrappers have, notes on their usage,\nand information on any predefined variables they may\nprovide.\n  Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n \n\n \n \n  See Also\n  \n   \n    fpassthru() - Output all remaining data on a file pointer\n    file() - Reads entire file into an array\n    fopen() - Opens file or URL\n    include() - include\n    require() - require\n    virtual() - Perform an Apache sub-request\n    file_get_contents() - Reads entire file into a string\n    Supported Protocols and Wrappers\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rewind.php","title":"rewind","description":"\n \n  rewind\n  (PHP 4, PHP 5)rewind &mdash; Rewind the position of a file pointer\n\n \n \n \n  Description\n  \n   bool rewind\n    ( resource $handle\n   )\n\n  \n   Sets the file position indicator for handle\n   to the beginning of the file stream.\n  \n  Note: \n   \n    If you have opened the file in append (&quot;a&quot; or &quot;a+&quot;) mode, any data you\n    write to the file will always be appended, regardless of the file\n    position.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The file pointer must be valid, and must point to a file\n       successfully opened by fopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 rewind() overwriting example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;fopen('output.txt',&nbsp;'r+');fwrite($handle,&nbsp;'Really&nbsp;long&nbsp;sentence.');rewind($handle);fwrite($handle,&nbsp;'Foo');rewind($handle);echo&nbsp;fread($handle,&nbsp;filesize('output.txt'));fclose($handle);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nFoolly long sentence.\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    fread() - Binary-safe file read\n    fseek() - Seeks on a file pointer\n    ftell() - Returns the current position of the file read\/write pointer\n    fwrite() - Binary-safe file write\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-file-buffer.php","title":"set_file_buffer","description":"\n \n  set_file_buffer\n  (PHP 4, PHP 5)set_file_buffer &mdash; Alias of stream_set_write_buffer()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   stream_set_write_buffer().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rmdir.php","title":"rmdir","description":"\n \n  rmdir\n  (PHP 4, PHP 5)rmdir &mdash; Removes directory\n\n \n \n \n  Description\n  \n   bool rmdir\n    ( string $dirname\n   [, resource $context\n  ] )\n\n  \n   Attempts to remove the directory named by dirname.\n   The directory must be empty, and the relevant permissions must permit this.\n   A E_WARNING level error will be generated on failure.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dirname\n     \n\n      \n       Path to the directory.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        As of PHP 5.0.0 rmdir() can also be used with\n        some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers support\n        rmdir().\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 rmdir() example\n    \n\n&lt;?phpif&nbsp;(!is_dir('examples'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;mkdir('examples');}rmdir('examples');?&gt;\n\n\n     \n\n   \n  \n \n\n\n \n  Notes\n  Note: When safe mode is enabled, PHP checks whether\nthe directory in which the script is operating has the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    is_dir() - Tells whether the filename is a directory\n    mkdir() - Makes directory\n    unlink() - Deletes a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rename.php","title":"rename","description":"\n \n  rename\n  (PHP 4, PHP 5)rename &mdash; Renames a file or directory\n\n \n \n \n  Description\n  \n   bool rename\n    ( string $oldname\n   , string $newname\n   [, resource $context\n  ] )\n\n  \n   Attempts to rename oldname to\n   newname.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     oldname\n     \n\n      \n      \n      Note: \n       \n        The old name. The wrapper used in oldname\n        must match the wrapper used in\n        newname.\n       \n      \n     \n\n    \n\n    \n\n     newname\n     \n\n      \n       The new name.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.1\n       \n        rename() can now rename files across drives in\n        Windows.\n       \n      \n\n      \n       5.0.0\n       \n        rename() can now also be used with\n        some URL wrappers.  Refer to Supported Protocols and Wrappers for a listing of which wrappers\n        support rename().\n       \n      \n\n      \n       4.3.3\n       \n        rename() may now be able to rename files across\n        partitions on *nix based systems, provided the appropriate permissions\n        are held. Warnings may be generated if the destination filesystem\n        doesn&#039;t permit chown() or\n        chmod() system calls to be made on files \u2014\n        for example, if the destination filesystem is a FAT filesystem.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example with rename()\n    \n\n&lt;?phprename(\"\/tmp\/tmp_file.txt\",&nbsp;\"\/home\/user\/login\/docs\/my_file.txt\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    copy() - Copies file\n    unlink() - Deletes a file\n    move_uploaded_file() - Moves an uploaded file to a new location\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.realpath.php","title":"realpath","description":"\n \n  realpath\n  (PHP 4, PHP 5)realpath &mdash; Returns canonicalized absolute pathname\n\n \n \n \n  Description\n  \n   string realpath\n    ( string $path\n   )\n\n  \n   realpath() expands all symbolic links and\n   resolves references to &#039;\/.\/&#039;, &#039;\/..\/&#039; and extra &#039;\/&#039; characters in\n   the input path and return the canonicalized\n   absolute pathname.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       The path being checked.\n       Note: \n        \n         Whilst a path must be supplied, the value can be blank or NULL\n         In these cases, the value is interpreted as the current directory.\n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the canonicalized absolute pathname on success. The resulting path \n   will have no symbolic link, &#039;\/.\/&#039; or &#039;\/..\/&#039; components.\n  \n  \n   realpath() returns FALSE on failure, e.g. if\n   the file does not exist.\n  \n  Note: \n   \n    The running script must have executable permissions on all directories in\n    the hierarchy, otherwise realpath() will return\n    FALSE.\n   \n  \n  Note: \n    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,\n    some filesystem functions may return unexpected results for files which\n    are larger than 2GB.\n   \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Prior to this release, if only the last path\n        component did not exist, realpath() would not fail on\n        *BSD systems. realpath() now fails in this case.\n       \n      \n\n      \n       5.0.0\n       \n        Prior to this release, a blank or NULL path would\n        cause realpath() to return the directory name of the script.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 realpath() example\n    \n\n&lt;?phpchdir('\/var\/www\/');echo&nbsp;realpath('.\/..\/..\/etc\/passwd');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\/etc\/passwd\n\n    \n   \n   \n    Example #2 realpath() on Windows\n    \n     On windows realpath() will change unix style paths to\n     windows style.\n    \n    \n\n&lt;?phpecho&nbsp;realpath('\/windows\/system32');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nC:\\WINDOWS\\System32\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    basename() - Returns trailing name component of path\n    dirname() - Returns parent directory's path\n    pathinfo() - Returns information about a file path\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stat.php","title":"stat","description":"\n \n  stat\n  (PHP 4, PHP 5)stat &mdash; Gives information about a file\n\n \n \n \n  Description\n  \n   array stat\n    ( string $filename\n   )\n\n  \n   Gathers the statistics of the file named by\n   filename.  If filename is a\n   symbolic link, statistics are from the file itself, not the symlink.\n  \n  \n   lstat() is identical to stat()\n   except it would instead be based off the symlinks status.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   \n    stat() and fstat() result\n     format\n    \n     \n      \n       Numeric\n       Associative (since PHP 4.0.6)\n       Description\n      \n\n     \n\n     \n      \n       0\n       dev\n       device number\n      \n\n      \n       1\n       ino\n       inode number *\n      \n\n      \n       2\n       mode\n       inode protection mode\n      \n\n      \n       3\n       nlink\n       number of links\n      \n\n      \n       4\n       uid\n       userid of owner *\n      \n\n      \n       5\n       gid\n       groupid of owner *\n      \n\n      \n       6\n       rdev\n       device type, if inode device\n      \n\n      \n       7\n       size\n       size in bytes\n      \n\n      \n       8\n       atime\n       time of last access (Unix timestamp)\n      \n\n      \n       9\n       mtime\n       time of last modification (Unix timestamp)\n      \n\n      \n       10\n       ctime\n       time of last inode change (Unix timestamp)\n      \n\n      \n       11\n       blksize\n       blocksize of filesystem IO **\n      \n\n      \n       12\n       blocks\n       number of 512-byte blocks allocated **\n      \n\n     \n    \n   \n\n   * On Windows this will always be 0.\n  \n  \n   ** Only valid on systems supporting the st_blksize type - other\n   systems (e.g. Windows) return -1.\n  \n  \n   In case of error, stat() returns FALSE.\n  \n  Note: \n    Because PHP&#039;s integer type is signed and many platforms use 32bit integers,\n    some filesystem functions may return unexpected results for files which\n    are larger than 2GB.\n   \n \n\n\n \n  Errors\/Exceptions\n  \n   Upon failure, an E_WARNING is emitted.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.6\n       \n        In addition to returning these attributes in a numeric array, they\n        can be accessed with associative indices, as noted next to each\n        parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stat() example\n    \n\n&lt;?php\/*&nbsp;Get&nbsp;file&nbsp;stat&nbsp;*\/$stat&nbsp;=&nbsp;stat('C:\\php\\php.exe');\/*&nbsp;*&nbsp;Print&nbsp;file&nbsp;access&nbsp;time,&nbsp;this&nbsp;is&nbsp;the&nbsp;same&nbsp;&nbsp;*&nbsp;as&nbsp;calling&nbsp;fileatime()&nbsp;*\/echo&nbsp;'Access&nbsp;time:&nbsp;'&nbsp;.&nbsp;$stat['atime'];\/*&nbsp;*&nbsp;Print&nbsp;file&nbsp;modification&nbsp;time,&nbsp;this&nbsp;is&nbsp;the&nbsp;&nbsp;*&nbsp;same&nbsp;as&nbsp;calling&nbsp;filemtime()&nbsp;*\/echo&nbsp;'Modification&nbsp;time:&nbsp;'&nbsp;.&nbsp;$stat['mtime'];\/*&nbsp;Print&nbsp;the&nbsp;device&nbsp;number&nbsp;*\/echo&nbsp;'Device&nbsp;number:&nbsp;'&nbsp;.&nbsp;$stat['dev'];?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Using stat() information together with touch()\n    \n\n&lt;?php\/*&nbsp;Get&nbsp;file&nbsp;stat&nbsp;*\/$stat&nbsp;=&nbsp;stat('C:\\php\\php.exe');\/*&nbsp;Did&nbsp;we&nbsp;failed&nbsp;to&nbsp;get&nbsp;stat&nbsp;information?&nbsp;*\/if&nbsp;(!$stat)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'stat()&nbsp;call&nbsp;failed...';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;We&nbsp;want&nbsp;the&nbsp;access&nbsp;time&nbsp;to&nbsp;be&nbsp;1&nbsp;week&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;after&nbsp;the&nbsp;current&nbsp;access&nbsp;time.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;$atime&nbsp;=&nbsp;$stat['atime']&nbsp;+&nbsp;604800;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Touch&nbsp;the&nbsp;file&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!touch('some_file.txt',&nbsp;time(),&nbsp;$atime))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Failed&nbsp;to&nbsp;touch&nbsp;file...';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'touch()&nbsp;returned&nbsp;success...';&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Note that time resolution may differ\nfrom one file system to another.\n  Note: The results of this\nfunction are cached. See clearstatcache() for\nmore details.\n  TipAs of PHP 5.0.0, this function\ncan also be used with some URL wrappers.  Refer to\nSupported Protocols and Wrappers to determine which wrappers support\nstat() family of functionality.\n \n\n\n \n  See Also\n  \n   \n    lstat() - Gives information about a file or symbolic link\n    fstat() - Gets information about a file using an open file pointer\n    filemtime() - Gets file modification time\n    filegroup() - Gets file group\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.symlink.php","title":"symlink","description":"\n \n  symlink\n  (PHP 4, PHP 5)symlink &mdash; Creates a symbolic link\n\n \n \n \n  Description\n  \n   bool symlink\n    ( string $target\n   , string $link\n   )\n\n  \n   symlink() creates a symbolic link to the existing\n   target with the specified name\n   link.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     target\n     \n\n      \n       Target of the link.\n      \n     \n\n    \n\n    \n\n     link\n     \n\n      \n       The link name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms  (Vista, Server \n        2008 or greater).\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Create a symbolic link\n    \n\n&lt;?php$target&nbsp;=&nbsp;'uploads.php';$link&nbsp;=&nbsp;'uploads';symlink($target,&nbsp;$link);echo&nbsp;readlink($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For Windows only: This function will only function if the \n    system you run PHP from is Windows Vista\/Windows Server 2008 \n    or greater. Windows versions prior to that does not support \n    symbolic links.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    link() - Create a hard link\n    readlink() - Returns the target of a symbolic link\n    linkinfo() - Gets information about a link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tmpfile.php","title":"tmpfile","description":"\n \n  tmpfile\n  (PHP 4, PHP 5)tmpfile &mdash; Creates a temporary file\n\n \n \n \n  Description\n  \n   resource tmpfile\n    ( void\n   )\n\n  \n   Creates a temporary file with a unique name in read-write (w+) mode and\n   returns a file handle .\n  \n  \n   The file is automatically removed when closed (using\n   fclose()), or when the script ends.\n  \n  \n   For details, consult your system documentation on the\n   tmpfile(3) function, as well as the\n   stdio.h header file.\n  \n \n\n\n \n  Return Values\n  \n   Returns a file handle, similar to the one returned by\n   fopen(), for the new file or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 tmpfile() example\n    \n\n&lt;?php$temp&nbsp;=&nbsp;tmpfile();fwrite($temp,&nbsp;\"writing&nbsp;to&nbsp;tempfile\");fseek($temp,&nbsp;0);echo&nbsp;fread($temp,&nbsp;1024);fclose($temp);&nbsp;\/\/&nbsp;this&nbsp;removes&nbsp;the&nbsp;file?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nwriting to tempfile\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    tempnam() - Create file with unique file name\n    sys_get_temp_dir() - Returns directory path used for temporary files\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tempnam.php","title":"tempnam","description":"\n \n  tempnam\n  (PHP 4, PHP 5)tempnam &mdash; Create file with unique file name\n\n \n \n \n  Description\n  \n   string tempnam\n    ( string $dir\n   , string $prefix\n   )\n\n  \n   Creates a file with a unique filename, with access permission set to 0600, in the specified directory.\n   If the directory does not exist, tempnam() may\n   generate a file in the system&#039;s temporary directory, and return\n   the name of that.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dir\n     \n\n      \n       The directory where the temporary filename will be created.\n      \n     \n\n    \n\n    \n\n     prefix\n     \n\n      \n       The prefix of the generated temporary filename.\n      \n      Note: \n       \n        Windows uses only the first three characters of prefix.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the new temporary filename, or FALSE on\n   failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.6\n       \n        Prior to PHP 4.0.6, the behaviour of the\n        tempnam() function was system dependent. On\n        Windows the TMP environment variable will override the\n        dir parameter, on Linux the TMPDIR\n        environment variable has precedence, while SVR4 will always use\n        your dir parameter if the directory it\n        points to exists. Consult your system documentation on the\n        tempnam(3) function if in doubt.\n       \n      \n\n      \n       4.0.3\n       \n        This function&#039;s behavior changed in 4.0.3. The temporary file is also\n        created to avoid a race condition where the file might appear in the\n        filesystem between the time the string was generated and before\n        the script gets around to creating the file. Note, that you need\n        to remove the file in case you need it no more, it is not done\n        automatically.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 tempnam() example\n    \n\n&lt;?php$tmpfname&nbsp;=&nbsp;tempnam(\"\/tmp\",&nbsp;\"FOO\");$handle&nbsp;=&nbsp;fopen($tmpfname,&nbsp;\"w\");fwrite($handle,&nbsp;\"writing&nbsp;to&nbsp;tempfile\");fclose($handle);\/\/&nbsp;do&nbsp;here&nbsp;somethingunlink($tmpfname);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If PHP cannot create a file in the specified dir\n    parameter, it falls back on the system default. On NTFS this also happens\n    if the specified dir contains more than 65534 files.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    tmpfile() - Creates a temporary file\n    sys_get_temp_dir() - Returns directory path used for temporary files\n    unlink() - Deletes a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.touch.php","title":"touch","description":"\n \n  touch\n  (PHP 4, PHP 5)touch &mdash; Sets access and modification time of file\n\n \n \n \n  Description\n  \n   bool touch\n    ( string $filename\n   [, int $time = time()\n   [, int $atime\n  ]] )\n\n  \n   Attempts to set the access and modification times of the file named in the\n   filename parameter to the value given in\n   time. \n   Note that the access time is always modified, regardless of the number\n   of parameters.\n  \n  \n   If the file does not exist, it will be created. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The name of the file being touched.\n      \n     \n\n    \n\n    \n\n     time\n     \n\n      \n       The touch time. If time is not supplied, \n       the current system time is used.\n      \n     \n\n    \n\n    \n\n     atime\n     \n\n      \n       If present, the access time of the given filename is set to \n       the value of atime. Otherwise, it is set to\n       the value passed to the time parameter.\n       If neither are present, the current system time is used.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        It became possible to change the modification time of a directory \n        under Windows.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 touch() example\n    \n\n&lt;?phpif&nbsp;(touch($filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$filename&nbsp;.&nbsp;'&nbsp;modification&nbsp;time&nbsp;has&nbsp;been&nbsp;changed&nbsp;to&nbsp;present&nbsp;time';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Sorry,&nbsp;could&nbsp;not&nbsp;change&nbsp;modification&nbsp;time&nbsp;of&nbsp;'&nbsp;.&nbsp;$filename;}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 touch() using the time parameter\n    \n\n&lt;?php\/\/&nbsp;This&nbsp;is&nbsp;the&nbsp;touch&nbsp;time,&nbsp;we'll&nbsp;set&nbsp;it&nbsp;to&nbsp;one&nbsp;hour&nbsp;in&nbsp;the&nbsp;past.$time&nbsp;=&nbsp;time()&nbsp;-&nbsp;3600;\/\/&nbsp;Touch&nbsp;the&nbsp;fileif&nbsp;(!touch('some_file.txt',&nbsp;$time))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Whoops,&nbsp;something&nbsp;went&nbsp;wrong...';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Touched&nbsp;file&nbsp;with&nbsp;success';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Note that time resolution may differ\nfrom one file system to another.\n  Warning\n   \n    Prior to PHP 5.3.0 it was not possible to change the modification time \n    of a directory with this function under Windows.\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.umask.php","title":"umask","description":"\n \n  umask\n  (PHP 4, PHP 5)umask &mdash; Changes the current umask\n\n \n \n \n  Description\n  \n   int umask\n    ([ int $mask\n  ] )\n\n  \n   umask() sets PHP&#039;s umask to\n   mask &amp; 0777 and returns the old\n   umask. When PHP is being used as a server module, the umask\n   is restored when each request is finished.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mask\n     \n\n      \n       The new umask.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   umask() without arguments simply returns the\n   current umask otherwise the old umask is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 umask() example\n    \n\n&lt;?php$old&nbsp;=&nbsp;umask(0);chmod(\"\/path\/some_dir\/some_file.txt\",&nbsp;0755);umask($old);\/\/&nbsp;Checkingif&nbsp;($old&nbsp;!=&nbsp;umask())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('An&nbsp;error&nbsp;occured&nbsp;while&nbsp;changing&nbsp;back&nbsp;the&nbsp;umask');}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Avoid using this function in multithreaded webservers. It is better to\n    change the file permissions with chmod() after\n    creating the file. Using umask() can lead to\n    unexpected behavior of concurrently running scripts and the webserver\n    itself because they all use the same umask.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unlink.php","title":"unlink","description":"\n \n  unlink\n  (PHP 4, PHP 5)unlink &mdash; Deletes a file\n\n \n \n \n  Description\n  \n   bool unlink\n    ( string $filename\n   [, resource $context\n  ] )\n\n  \n   Deletes filename.  Similar to the Unix C unlink()\n   function. A E_WARNING level error will be generated on\n   failure.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      Note: Context support was added\nwith PHP 5.0.0. For a description of contexts, refer to\nStream Functions.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        As of PHP 5.0.0 unlink() can also be used with\n        some URL wrappers. Refer to Supported Protocols and Wrappers for a listing of which wrappers support\n        unlink().\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Basic unlink() usage\n    \n\n&lt;?php$fh&nbsp;=&nbsp;fopen('test.html',&nbsp;'a');fwrite($fh,&nbsp;'&lt;h1&gt;Hello&nbsp;world!&lt;\/h1&gt;');fclose($fh);unlink('test.html');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    rmdir() - Removes directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dom-import-simplexml.php","title":"dom_import_simplexml","description":"\n \n  dom_import_simplexml\n  (PHP 5)dom_import_simplexml &mdash; \n   Gets a DOMElement object from a\n   SimpleXMLElement object\n  \n\n \n \n  Description\n  \n   DOMElement dom_import_simplexml\n    ( SimpleXMLElement $node\n   )\n\n  \n   This function takes the node node of class\n   SimpleXML and makes it into a\n   DOMElement node. This new object can then be used\n   as a native DOMElement node. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     node\n     \n\n      \n       The SimpleXMLElement node.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The DOMElement node added or FALSE if any errors occur.\n  \n \n\n \n  Examples\n  \n   Example #1 Import SimpleXML into DOM with dom_import_simplexml()\n   \n\n&lt;?php$sxe&nbsp;=&nbsp;simplexml_load_string('&lt;books&gt;&lt;book&gt;&lt;title&gt;blah&lt;\/title&gt;&lt;\/book&gt;&lt;\/books&gt;');if&nbsp;($sxe&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;while&nbsp;parsing&nbsp;the&nbsp;document';&nbsp;&nbsp;&nbsp;&nbsp;exit;}$dom_sxe&nbsp;=&nbsp;dom_import_simplexml($sxe);if&nbsp;(!$dom_sxe)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;while&nbsp;converting&nbsp;XML';&nbsp;&nbsp;&nbsp;&nbsp;exit;}$dom&nbsp;=&nbsp;new&nbsp;DOMDocument('1.0');$dom_sxe&nbsp;=&nbsp;$dom-&gt;importNode($dom_sxe,&nbsp;true);$dom_sxe&nbsp;=&nbsp;$dom-&gt;appendChild($dom_sxe);echo&nbsp;$dom-&gt;saveXML();?&gt;\n\n\n   \n\n  \n \n\n \n  See Also\n  \n   \n    simplexml_import_dom() - Get a SimpleXMLElement object from a DOM node.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.forward-static-call-array.php","title":"forward_static_call_array","description":"\n \n  forward_static_call_array\n  (PHP 5 &gt;= 5.3.0)forward_static_call_array &mdash; Call a static method and pass the arguments as array\n\n \n\n \n  Description\n  \n   mixed forward_static_call_array\n    ( callback $function\n   , array $parameters\n   )\n\n  \n   Calls a user defined function or method given by the function\n   parameter. This function must be called within a method context, it can&#039;t be \n   used outside a class.\n   It uses the late static\n   binding.\n   All arguments of the forwarded method are passed as values,\n   and as an array, similarly to call_user_func_array().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       The function or method to be called. This parameter may be an array,\n       with the name of the class, and the method, or a string, with a function\n       name.\n      \n     \n\n    \n\n    \n\n     parameter\n     \n\n      \n       One parameter, gathering all the method parameter in one array.\n      \n      Note: \n       \n        Note that the parameters for forward_static_call_array() are\n        not passed by reference.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the function result, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 forward_static_call_array() example\n    \n\n&lt;?phpclass&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NAME&nbsp;=&nbsp;'A';&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$args&nbsp;=&nbsp;func_get_args();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;static::NAME,&nbsp;\"&nbsp;\".join(',',&nbsp;$args).\"&nbsp;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}class&nbsp;B&nbsp;extends&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NAME&nbsp;=&nbsp;'B';&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;self::NAME,&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward_static_call_array(array('A',&nbsp;'test'),&nbsp;array('more',&nbsp;'args'));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward_static_call_array(&nbsp;'test',&nbsp;array('other',&nbsp;'args'));&nbsp;&nbsp;&nbsp;&nbsp;}}B::test('foo');function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$args&nbsp;=&nbsp;func_get_args();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"C&nbsp;\".join(',',&nbsp;$args).\"&nbsp;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nB\nB more,args \nC other,args\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    forward_static_call() - Call a static method\n    call_user_func() - Call a user function given by the first parameter\n    call_user_func_array() - Call a user function given with an array of parameters\n    is_callable() - Verify that the contents of a variable can be called as a function\n    information about the callback type\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.forward-static-call.php","title":"forward_static_call","description":"\n \n  forward_static_call\n  (PHP 5 &gt;= 5.3.0)forward_static_call &mdash; Call a static method\n\n \n\n \n  Description\n  \n   mixed forward_static_call\n    ( callback $function\n   [, mixed $parameter\n   [, mixed $...\n  ]] )\n\n  \n   Calls a user defined function or method given by the function\n   parameter, with the following arguments. This function must be called within a method\n   context, it can&#039;t be used outside a class.\n   It uses the late static\n   binding.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       The function or method to be called. This parameter may be an array,\n       with the name of the class, and the method, or a string, with a function\n       name.\n      \n     \n\n    \n\n    \n\n     parameter\n     \n\n      \n       Zero or more parameters to be passed to the function.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the function result, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 forward_static_call() example\n    \n\n&lt;?phpclass&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NAME&nbsp;=&nbsp;'A';&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$args&nbsp;=&nbsp;func_get_args();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;static::NAME,&nbsp;\"&nbsp;\".join(',',&nbsp;$args).\"&nbsp;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}class&nbsp;B&nbsp;extends&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NAME&nbsp;=&nbsp;'B';&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;self::NAME,&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward_static_call(array('A',&nbsp;'test'),&nbsp;'more',&nbsp;'args');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward_static_call(&nbsp;'test',&nbsp;'other',&nbsp;'args');&nbsp;&nbsp;&nbsp;&nbsp;}}B::test('foo');function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$args&nbsp;=&nbsp;func_get_args();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"C&nbsp;\".join(',',&nbsp;$args).\"&nbsp;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nB\nB more,args \nC other,args\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    forward_static_call_array() - Call a static method and pass the arguments as array\n    call_user_func_array() - Call a user function given with an array of parameters\n    call_user_func() - Call a user function given by the first parameter\n    is_callable() - Verify that the contents of a variable can be called as a function\n    information about the callback type\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.call-user-func-array.php","title":"call_user_func_array","description":"\n \n  call_user_func_array\n  (PHP 4 &gt;= 4.0.4, PHP 5)call_user_func_array &mdash; Call a user function given with an array of parameters\n\n \n \n \n  Description\n  \n   mixed call_user_func_array\n    ( callback $function\n   , array $param_arr\n   )\n\n  \n   Call a user defined function with the parameters in\n   param_arr.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       The function to be called.\n      \n     \n\n    \n\n    \n\n     param_arr\n     \n\n      \n       The parameters to be passed to the function, as an indexed array.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the function result, or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The interpretation of object oriented keywords like parent \n        and self has changed. Previously, calling them using the \n        double colon syntax would emit an E_STRICT warning because \n        they were interpreted as static.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 call_user_func_array() example\n    \n\n&lt;?phpfunction&nbsp;foobar($arg,&nbsp;$arg2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;__FUNCTION__,&nbsp;\"&nbsp;got&nbsp;$arg&nbsp;and&nbsp;$arg2\\n\";}class&nbsp;foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;bar($arg,&nbsp;$arg2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;__METHOD__,&nbsp;\"&nbsp;got&nbsp;$arg&nbsp;and&nbsp;$arg2\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Call&nbsp;the&nbsp;foobar()&nbsp;function&nbsp;with&nbsp;2&nbsp;argumentscall_user_func_array(\"foobar\",&nbsp;array(\"one\",&nbsp;\"two\"));\/\/&nbsp;Call&nbsp;the&nbsp;$foo-&gt;bar()&nbsp;method&nbsp;with&nbsp;2&nbsp;arguments$foo&nbsp;=&nbsp;new&nbsp;foo;call_user_func_array(array($foo,&nbsp;\"bar\"),&nbsp;array(\"three\",&nbsp;\"four\"));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nfoobar got one and two\nfoo::bar got three and four\n\n    \n   \n   \n    Example #2 call_user_func_array() using namespace name\n    \n\n&lt;?phpnamespace&nbsp;Foobar;class&nbsp;Foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;public&nbsp;function&nbsp;test($name)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;\"Hello&nbsp;{$name}!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0call_user_func_array(__NAMESPACE__&nbsp;.'\\Foo::test',&nbsp;array('Hannes'));\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0call_user_func_array(array(__NAMESPACE__&nbsp;.'\\Foo',&nbsp;'test'),&nbsp;array('Philip'));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nHello Hannes!\nHello Philip!\n\n    \n   \n   \n    Example #3 Using lambda function\n    \n\n&lt;?php$func&nbsp;=&nbsp;function($arg1,&nbsp;$arg2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$arg1&nbsp;*&nbsp;$arg2;};var_dump(call_user_func_array($func,&nbsp;array(2,&nbsp;4)));&nbsp;\/*&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0&nbsp;*\/?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nint(8)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Referenced variables in param_arr are passed to the\n    function by reference, regardless of whether the function expects the\n    respective parameter to be passed by reference. This form of call-time\n    pass by reference does not emit a deprecation notice, but it is nonetheless\n    deprecated, and will most likely be removed in the next version of PHP.\n    Furthermore, this does not apply to internal functions, for which\n    the function signature is honored. Passing by value when the function expects\n    a parameter by reference results in a warning and having\n    call_user_func() return FALSE (does not apply if the \n    passed value has a reference count = 1).\n   \n  \n  Note: Callbacks registered\nwith functions such as call_user_func() and call_user_func_array() will not be\ncalled if there is an uncaught exception thrown in a previous callback.\n \n\n\n \n  See Also\n  \n   \n    call_user_func() - Call a user function given by the first parameter\n    information about the callback type\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.call-user-func.php","title":"call_user_func","description":"\n \n  call_user_func\n  (PHP 4, PHP 5)call_user_func &mdash; Call a user function given by the first parameter\n\n \n\n \n  Description\n  \n   mixed call_user_func\n    ( callback $function\n   [, mixed $parameter\n   [, mixed $...\n  ]] )\n\n  \n   Call a user defined function given by the function\n   parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       The function to be called. Class methods may also be invoked\n       statically using this function by passing\n       array($classname, $methodname) to this parameter.\n       Additionally class methods of an object instance may be called by passing\n       array($objectinstance, $methodname) to this parameter.\n      \n     \n\n    \n\n    \n\n     parameter\n     \n\n      \n       Zero or more parameters to be passed to the function.\n      \n      Note: \n       \n        Note that the parameters for call_user_func() are\n        not passed by reference.\n        \n         Example #1 call_user_func() example and references\n         \n\n&lt;?phperror_reporting(E_ALL);function&nbsp;increment(&amp;$var){&nbsp;&nbsp;&nbsp;&nbsp;$var++;}$a&nbsp;=&nbsp;0;call_user_func('increment',&nbsp;$a);echo&nbsp;$a.\"\\n\";call_user_func_array('increment',&nbsp;array(&amp;$a));&nbsp;\/\/&nbsp;You&nbsp;can&nbsp;use&nbsp;this&nbsp;instead&nbsp;before&nbsp;PHP&nbsp;5.3echo&nbsp;$a.\"\\n\";?&gt;\n\n\n         \n\n         The above example will output:\n         \n\n0\n1\n\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the function result, or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The interpretation of object oriented keywords like parent \n        and self has changed. Previously, calling them using the \n        double colon syntax would emit an E_STRICT warning because \n        they were interpreted as static.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #2 call_user_func() example\n    \n\n&lt;?phpfunction&nbsp;barber($type){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"You&nbsp;wanted&nbsp;a&nbsp;$type&nbsp;haircut,&nbsp;no&nbsp;problem\\n\";}call_user_func('barber',&nbsp;\"mushroom\");call_user_func('barber',&nbsp;\"shave\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nYou wanted a mushroom haircut, no problem\nYou wanted a shave haircut, no problem\n\n    \n   \n   \n    Example #3 call_user_func() using namespace name\n    \n\n&lt;?phpnamespace&nbsp;Foobar;class&nbsp;Foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;public&nbsp;function&nbsp;test()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;\"Hello&nbsp;world!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}call_user_func(__NAMESPACE__&nbsp;.'\\Foo::test');&nbsp;\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0call_user_func(array(__NAMESPACE__&nbsp;.'\\Foo',&nbsp;'test'));&nbsp;\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHello world!\nHello world!\n\n    \n   \n   \n    Example #4 Using a class method with call_user_func()\n    \n\n&lt;?phpclass&nbsp;myclass&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;function&nbsp;say_hello()&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Hello!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}$classname&nbsp;=&nbsp;\"myclass\";call_user_func(array($classname,&nbsp;'say_hello'));call_user_func($classname&nbsp;.'::say_hello');&nbsp;\/\/&nbsp;As&nbsp;of&nbsp;5.2.3$myobject&nbsp;=&nbsp;new&nbsp;myclass();call_user_func(array($myobject,&nbsp;'say_hello'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHello!\nHello!\nHello!\n\n       \n   \n   \n    Example #5 Using lambda function with call_user_func()\n    \n\n&lt;?phpcall_user_func(function($arg)&nbsp;{&nbsp;print&nbsp;\"[$arg]\\n\";&nbsp;},&nbsp;'test');&nbsp;\/*&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0&nbsp;*\/?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n[test]\n\n       \n   \n  \n \n\n\n \n  Notes\n  Note: Callbacks registered\nwith functions such as call_user_func() and call_user_func_array() will not be\ncalled if there is an uncaught exception thrown in a previous callback.\n \n\n\n \n  See Also\n  \n   \n    call_user_func_array() - Call a user function given with an array of parameters\n    is_callable() - Verify that the contents of a variable can be called as a function\n    information about the callback type\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.create-function.php","title":"create_function","description":"\n \n  create_function\n  (PHP 4 &gt;= 4.0.1, PHP 5)create_function &mdash; Create an anonymous (lambda-style) function\n\n \n\n \n  Description\n  \n   string create_function\n    ( string $args\n   , string $code\n   )\n\n  \n   Creates an anonymous function from the parameters passed, and\n   returns a unique name for it.\n  \n \n\n \n  Parameters\n  \n   Usually these parameters will be passed as single quote delimited strings.\n   The reason for using single quoted strings, is to protect the variable\n   names from parsing, otherwise, if you use double quotes there will be a\n   need to escape the variable names, e.g. \\$avar.\n   \n\n    \n\n     args\n     \n\n      \n       The function arguments.\n      \n     \n\n    \n\n    \n\n     code\n     \n\n      \n       The function code.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a unique function name as a string, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Creating an anonymous function with create_function()\n    \n    \n     You can use this function, to (for example) create a function from\n     information gathered at run time:\n    \n    \n\n&lt;?php$newfunc&nbsp;=&nbsp;create_function('$a,$b',&nbsp;'return&nbsp;\"ln($a)&nbsp;+&nbsp;ln($b)&nbsp;=&nbsp;\"&nbsp;.&nbsp;log($a&nbsp;*&nbsp;$b);');echo&nbsp;\"New&nbsp;anonymous&nbsp;function:&nbsp;$newfunc\\n\";echo&nbsp;$newfunc(2,&nbsp;M_E)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;outputs\/\/&nbsp;New&nbsp;anonymous&nbsp;function:&nbsp;lambda_1\/\/&nbsp;ln(2)&nbsp;+&nbsp;ln(2.718281828459)&nbsp;=&nbsp;1.6931471805599?&gt;\n\n\n    \n\n   \n  \n  \n   Or, perhaps to have general handler function that can apply a set\n   of operations to a list of parameters:\n  \n  \n   \n    Example #2 \n     Making a general processing function with\n     create_function()\n    \n    \n\n&lt;?phpfunction&nbsp;process($var1,&nbsp;$var2,&nbsp;$farr){&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($farr&nbsp;as&nbsp;$f)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$f($var1,&nbsp;$var2)&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;create&nbsp;a&nbsp;bunch&nbsp;of&nbsp;math&nbsp;functions$f1&nbsp;=&nbsp;'if&nbsp;($a&nbsp;&gt;=0)&nbsp;{return&nbsp;\"b*a^2&nbsp;=&nbsp;\".$b*sqrt($a);}&nbsp;else&nbsp;{return&nbsp;false;}';$f2&nbsp;=&nbsp;\"return&nbsp;\\\"min(b^2+a,&nbsp;a^2,b)&nbsp;=&nbsp;\\\".min(\\$a*\\$a+\\$b,\\$b*\\$b+\\$a);\";$f3&nbsp;=&nbsp;'if&nbsp;($a&nbsp;&gt;&nbsp;0&nbsp;&amp;&amp;&nbsp;$b&nbsp;!=&nbsp;0)&nbsp;{return&nbsp;\"ln(a)\/b&nbsp;=&nbsp;\".log($a)\/$b;&nbsp;}&nbsp;else&nbsp;{&nbsp;return&nbsp;false;&nbsp;}';$farr&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;create_function('$x,$y',&nbsp;'return&nbsp;\"some&nbsp;trig:&nbsp;\".(sin($x)&nbsp;+&nbsp;$x*cos($y));'),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$x,$y',&nbsp;'return&nbsp;\"a&nbsp;hypotenuse:&nbsp;\".sqrt($x*$x&nbsp;+&nbsp;$y*$y);'),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$a,$b',&nbsp;$f1),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$a,$b',&nbsp;$f2),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$a,$b',&nbsp;$f3)&nbsp;&nbsp;&nbsp;&nbsp;);echo&nbsp;\"\\nUsing&nbsp;the&nbsp;first&nbsp;array&nbsp;of&nbsp;anonymous&nbsp;functions\\n\";echo&nbsp;\"parameters:&nbsp;2.3445,&nbsp;M_PI\\n\";process(2.3445,&nbsp;M_PI,&nbsp;$farr);\/\/&nbsp;now&nbsp;make&nbsp;a&nbsp;bunch&nbsp;of&nbsp;string&nbsp;processing&nbsp;functions$garr&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;create_function('$b,$a',&nbsp;'if&nbsp;(strncmp($a,&nbsp;$b,&nbsp;3)&nbsp;==&nbsp;0)&nbsp;return&nbsp;\"**&nbsp;\\\"$a\\\"&nbsp;'.&nbsp;&nbsp;&nbsp;&nbsp;'and&nbsp;\\\"$b\\\"\\n**&nbsp;Look&nbsp;the&nbsp;same&nbsp;to&nbsp;me!&nbsp;(looking&nbsp;at&nbsp;the&nbsp;first&nbsp;3&nbsp;chars)\";'),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$a,$b',&nbsp;';&nbsp;return&nbsp;\"CRCs:&nbsp;\"&nbsp;.&nbsp;crc32($a)&nbsp;.&nbsp;\",&nbsp;\".crc32($b);'),&nbsp;&nbsp;&nbsp;&nbsp;create_function('$a,$b',&nbsp;';&nbsp;return&nbsp;\"similar(a,b)&nbsp;=&nbsp;\"&nbsp;.&nbsp;similar_text($a,&nbsp;$b,&nbsp;&amp;$p)&nbsp;.&nbsp;\"($p%)\";')&nbsp;&nbsp;&nbsp;&nbsp;);echo&nbsp;\"\\nUsing&nbsp;the&nbsp;second&nbsp;array&nbsp;of&nbsp;anonymous&nbsp;functions\\n\";process(\"Twas&nbsp;brilling&nbsp;and&nbsp;the&nbsp;slithy&nbsp;toves\",&nbsp;\"Twas&nbsp;the&nbsp;night\",&nbsp;$garr);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nUsing the first array of anonymous functions\nparameters: 2.3445, M_PI\nsome trig: -1.6291725057799\na hypotenuse: 3.9199852871011\nb*a^2 = 4.8103313314525\nmin(b^2+a, a^2,b) = 8.6382729035898\nln(a)\/b = 0.27122299212594\n\nUsing the second array of anonymous functions\n** &quot;Twas the night&quot; and &quot;Twas brilling and the slithy toves&quot;\n** Look the same to me! (looking at the first 3 chars)\nCRCs: -725381282, 342550513\nsimilar(a,b) = 11(45.833333333333%)\n\n    \n   \n  \n  \n   But perhaps the most common use for of lambda-style (anonymous) functions\n   is to create callback functions, for example when using\n   array_walk() or usort()\n  \n  \n   \n    Example #3 Using anonymous functions as callback functions\n    \n\n&lt;?php$av&nbsp;=&nbsp;array(\"the&nbsp;\",&nbsp;\"a&nbsp;\",&nbsp;\"that&nbsp;\",&nbsp;\"this&nbsp;\");array_walk($av,&nbsp;create_function('&amp;$v,$k',&nbsp;'$v&nbsp;=&nbsp;$v&nbsp;.&nbsp;\"mango\";'));print_r($av);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n  [0] =&gt; the mango\n  [1] =&gt; a mango\n  [2] =&gt; that mango\n  [3] =&gt; this mango\n)\n\n    \n    \n     an array of strings ordered from shorter to longer\n    \n    \n\n&lt;?php$sv&nbsp;=&nbsp;array(\"small\",&nbsp;\"larger\",&nbsp;\"a&nbsp;big&nbsp;string\",&nbsp;\"it&nbsp;is&nbsp;a&nbsp;string&nbsp;thing\");print_r($sv);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n  [0] =&gt; small\n  [1] =&gt; larger\n  [2] =&gt; a big string\n  [3] =&gt; it is a string thing\n)\n\n    \n    \n     sort it from longer to shorter\n    \n    \n\n&lt;?phpusort($sv,&nbsp;create_function('$a,$b','return&nbsp;strlen($b)&nbsp;-&nbsp;strlen($a);'));print_r($sv);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n  [0] =&gt; it is a string thing\n  [1] =&gt; a big string\n  [2] =&gt; larger\n  [3] =&gt; small\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    Anonymous functions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-get-arg.php","title":"func_get_arg","description":"\n \n  func_get_arg\n  (PHP 4, PHP 5)func_get_arg &mdash; Return an item from the argument list\n\n \n \n \n  Description\n  \n   mixed func_get_arg\n    ( int $arg_num\n   )\n\n  \n   Gets the specified argument from a user-defined function&#039;s argument list.\n  \n  \n   This function may be used in conjunction with \n   func_get_args() and func_num_args()\n   to allow user-defined functions to accept variable-length argument lists.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arg_num\n     \n\n      \n       The argument offset. Function arguments are counted starting from\n       zero.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the specified argument, or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function can now be used in parameter lists.\n       \n      \n\n      \n       5.3.0\n       \n        If this function is called from the outermost scope of a file\n        which has been included by calling include()\n        or require() from within a function in the\n        calling file, it now generates a warning and returns FALSE.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Generates a warning if called from outside of a user-defined function, or\n   if arg_num is greater than the number of arguments\n   actually passed.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 func_get_arg() example\n    \n\n&lt;?phpfunction&nbsp;foo(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$numargs&nbsp;=&nbsp;func_num_args();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Number&nbsp;of&nbsp;arguments:&nbsp;$numargs&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($numargs&nbsp;&gt;=&nbsp;2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Second&nbsp;argument&nbsp;is:&nbsp;\"&nbsp;.&nbsp;func_get_arg(1)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}}foo&nbsp;(1,&nbsp;2,&nbsp;3);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 func_get_arg() example before and\n    after PHP 5.3\n    \n\ntest.php&lt;?phpfunction&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;'.\/fga.inc';}foo('First&nbsp;arg',&nbsp;'Second&nbsp;arg');?&gt;fga.php&lt;?php$arg&nbsp;=&nbsp;func_get_arg(1);var_export($arg);?&gt;\n\n\n    \n\n    \n     Output previous to PHP 5.3:\n    \n    \n\n&#039;Second arg&#039;\n\n    \n    \n     Output in PHP 5.3 and later:\n    \n    \n\nWarning: func_get_arg():  Called from the global scope - no function\ncontext in \/home\/torben\/Desktop\/code\/ml\/fga.inc on line 3\nfalse\n\n    \n   \n  \n\n  \n   \n    Example #3 func_get_arg() example of byref and byval arguments\n    \n\n&lt;?phpfunction&nbsp;byVal($arg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_arg(0)),&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;$arg&nbsp;=&nbsp;'baz';&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'After&nbsp;change&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_arg(0)),&nbsp;PHP_EOL;}function&nbsp;byRef(&amp;$arg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_arg(0)),&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;$arg&nbsp;=&nbsp;'baz';&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'After&nbsp;change&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_arg(0)),&nbsp;PHP_EOL;}$arg&nbsp;=&nbsp;'bar';byVal($arg);byRef($arg);?&gt;\n\n\n    \n\n     The above example will output:\n    \nAs passed     : &#039;bar&#039;\nAfter change  : &#039;bar&#039;\nAs passed     : &#039;bar&#039;\nAfter change  : &#039;baz&#039;\n    \n   \n  \n\n \n\n\n \n  Notes\n  Note: Because this function depends on the\ncurrent scope to determine parameter details, it cannot be used as a\nfunction parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n  Note: If the arguments are passed by reference,\nany changes to the arguments will be reflected in the values returned by this function.\n  Note: \n   \n    This function returns a copy of the passed arguments only, and does not\n    account for default (non-passed) arguments.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    func_get_args() - Returns an array comprising a function's argument list\n    func_num_args() - Returns the number of arguments passed to the function\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-num-args.php","title":"func_num_args","description":"\n \n  func_num_args\n  (PHP 4, PHP 5)func_num_args &mdash; Returns the number of arguments passed to the function\n\n \n \n \n  Description\n  \n   int func_num_args\n    ( void\n   )\n\n  \n   Gets the number of arguments passed to the function.\n  \n  \n   This function may be used in conjunction with \n   func_get_arg() and func_get_args()\n   to allow user-defined functions to accept variable-length argument lists.\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of arguments passed into the current user-defined\n   function.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function can now be used in parameter lists.\n       \n      \n\n      \n       5.3.0\n       \n        If this function is called from the outermost scope of a file\n        which has been included by calling include()\n        or require() from within a function in the\n        calling file, it now generates a warning and returns -1.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Generates a warning if called from outside of a user-defined function.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 func_num_args() example\n    \n\n&lt;?phpfunction&nbsp;foo(){&nbsp;&nbsp;&nbsp;&nbsp;$numargs&nbsp;=&nbsp;func_num_args();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Number&nbsp;of&nbsp;arguments:&nbsp;$numargs\\n\";}foo(1,&nbsp;2,&nbsp;3);&nbsp;&nbsp;&nbsp;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nNumber of arguments: 3\n\n    \n   \n  \n  \n   \n    Example #2 func_num_args() example before and\n    after PHP 5.3\n    \n\ntest.php&lt;?phpfunction&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;'.\/fna.php';}foo('First&nbsp;arg',&nbsp;'Second&nbsp;arg');?&gt;fna.php&lt;?php$num_args&nbsp;=&nbsp;func_num_args();var_export($num_args);?&gt;\n\n\n    \n\n    \n     Output previous to PHP 5.3:\n    \n    \n\n2\n\n    \n    \n     Output in PHP 5.3 and later will be something similar to:\n    \n    \n\nWarning: func_num_args():  Called from the global scope - no function\ncontext in \/home\/torben\/Desktop\/code\/ml\/fna.php on line 3\n-1\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: Because this function depends on the\ncurrent scope to determine parameter details, it cannot be used as a\nfunction parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n \n\n\n \n  See Also\n  \n   \n    func_get_arg() - Return an item from the argument list\n    func_get_args() - Returns an array comprising a function's argument list\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.func-get-args.php","title":"func_get_args","description":"\n \n  func_get_args\n  (PHP 4, PHP 5)func_get_args &mdash; Returns an array comprising a function&#039;s argument list\n\n \n \n \n  Description\n  \n   array func_get_args\n    ( void\n   )\n\n  \n   Gets an array of the function&#039;s argument list.\n  \n  \n   This function may be used in conjunction with \n   func_get_arg() and func_num_args()\n   to allow user-defined functions to accept variable-length argument lists.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array in which each element is a copy of the corresponding\n   member of the current user-defined function&#039;s argument list. \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function can now be used in parameter lists.\n       \n      \n\n      \n       5.3.0\n       \n        If this function is called from the outermost scope of a file\n        which has been included by calling include()\n        or require() from within a function in the\n        calling file, it now generates a warning and returns FALSE.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Generates a warning if called from outside of a user-defined function.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 func_get_args() example\n    \n\n&lt;?phpfunction&nbsp;foo(){&nbsp;&nbsp;&nbsp;&nbsp;$numargs&nbsp;=&nbsp;func_num_args();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Number&nbsp;of&nbsp;arguments:&nbsp;$numargs&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($numargs&nbsp;&gt;=&nbsp;2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Second&nbsp;argument&nbsp;is:&nbsp;\"&nbsp;.&nbsp;func_get_arg(1)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$arg_list&nbsp;=&nbsp;func_get_args();&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;$numargs;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Argument&nbsp;$i&nbsp;is:&nbsp;\"&nbsp;.&nbsp;$arg_list[$i]&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}foo(1,&nbsp;2,&nbsp;3);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nNumber of arguments: 3&lt;br \/&gt;\nSecond argument is: 2&lt;br \/&gt;\nArgument 0 is: 1&lt;br \/&gt;\nArgument 1 is: 2&lt;br \/&gt;\nArgument 2 is: 3&lt;br \/&gt;\n\n    \n   \n  \n  \n   \n    Example #2 func_get_args() example before and\n    after PHP 5.3\n    \n\ntest.php&lt;?phpfunction&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;'.\/fga.inc';}foo('First&nbsp;arg',&nbsp;'Second&nbsp;arg');?&gt;fga.inc&lt;?php$args&nbsp;=&nbsp;func_get_args();var_export($args);?&gt;\n\n\n    \n\n    \n     Output previous to PHP 5.3:\n    \n    \n\narray (\n  0 =&gt; &#039;First arg&#039;,\n  1 =&gt; &#039;Second arg&#039;,\n)\n\n    \n    \n     Output in PHP 5.3 and later:\n    \n    \n\nWarning: func_get_args():  Called from the global scope - no function\ncontext in \/home\/torben\/Desktop\/code\/ml\/fga.inc on line 3\nfalse\n\n    \n   \n  \n  \n   \n    Example #3 func_get_args() example of byref and byval arguments\n    \n\n&lt;?phpfunction&nbsp;byVal($arg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_args()),&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;$arg&nbsp;=&nbsp;'baz';&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'After&nbsp;change&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_args()),&nbsp;PHP_EOL;}function&nbsp;byRef(&amp;$arg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'As&nbsp;passed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_args()),&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;$arg&nbsp;=&nbsp;'baz';&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'After&nbsp;change&nbsp;&nbsp;:&nbsp;',&nbsp;var_export(func_get_args()),&nbsp;PHP_EOL;}$arg&nbsp;=&nbsp;'bar';byVal($arg);byRef($arg);?&gt;\n\n\n    \n\n     The above example will output:\n    \nAs passed     : array (\n  0 =&gt; &#039;bar&#039;,\n)\nAfter change  : array (\n  0 =&gt; &#039;bar&#039;,\n)\nAs passed     : array (\n  0 =&gt; &#039;bar&#039;,\n)\nAfter change  : array (\n  0 =&gt; &#039;baz&#039;,\n)\n    \n   \n  \n\n \n\n\n \n  Notes\n  Note: Because this function depends on the\ncurrent scope to determine parameter details, it cannot be used as a\nfunction parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned\nto a variable, and that variable should be passed.\n  Note: If the arguments are passed by reference,\nany changes to the arguments will be reflected in the values returned by this function.\n  Note: \n   \n    This function returns a copy of the passed arguments only, and does not\n    account for default (non-passed) arguments.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    func_get_arg() - Return an item from the argument list\n    func_num_args() - Returns the number of arguments passed to the function\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.function-exists.php","title":"function_exists","description":"\n \n  function_exists\n  (PHP 4, PHP 5)function_exists &mdash; Return TRUE if the given function has been defined\n\n \n \n \n  Description\n  \n   bool function_exists\n    ( string $function_name\n   )\n\n  \n   Checks the list of defined functions, both built-in (internal) and\n   user-defined, for function_name. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function_name\n     \n\n      \n       The function name, as a string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if function_name exists and is a\n   function, FALSE otherwise.\n  \n  Note: \n   \n    This function will return FALSE for constructs, such as \n    include_once() and echo().\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 function_exists() example\n    \n\n&lt;?phpif&nbsp;(function_exists('imap_open'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"IMAP&nbsp;functions&nbsp;are&nbsp;available.&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"IMAP&nbsp;functions&nbsp;are&nbsp;not&nbsp;available.&lt;br&nbsp;\/&gt;\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    A function name may exist even if the function itself is unusable due to\n    configuration or compiling options (with the image functions being an example).\n   \n  \n \n\n\n \n  See Also\n  \n   \n    method_exists() - Checks if the class method exists\n    is_callable() - Verify that the contents of a variable can be called as a function\n    get_defined_functions() - Returns an array of all defined functions\n    class_exists() - Checks if the class has been defined\n    extension_loaded() - Find out whether an extension is loaded\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-defined-functions.php","title":"get_defined_functions","description":"\n \n  get_defined_functions\n  (PHP 4 &gt;= 4.0.4, PHP 5)get_defined_functions &mdash; Returns an array of all defined functions\n\n \n \n \n  Description\n  \n   array get_defined_functions\n    ( void\n   )\n\n  \n   Gets an array of all defined functions.\n  \n \n\n\n \n  Return Values\n  \n   Returns an multidimensional array containing a list of all defined\n   functions, both built-in (internal) and user-defined. The internal\n   functions will be accessible via $arr[\"internal\"], and\n   the user defined ones using $arr[\"user\"] (see example\n   below).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 get_defined_functions() example\n    \n\n&lt;?phpfunction&nbsp;myrow($id,&nbsp;$data){&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"&lt;tr&gt;&lt;th&gt;$id&lt;\/th&gt;&lt;td&gt;$data&lt;\/td&gt;&lt;\/tr&gt;\\n\";}$arr&nbsp;=&nbsp;get_defined_functions();print_r($arr);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [internal] =&gt; Array\n        (\n            [0] =&gt; zend_version\n            [1] =&gt; func_num_args\n            [2] =&gt; func_get_arg\n            [3] =&gt; func_get_args\n            [4] =&gt; strlen\n            [5] =&gt; strcmp\n            [6] =&gt; strncmp\n            ...\n            [750] =&gt; bcscale\n            [751] =&gt; bccomp\n        )\n\n    [user] =&gt; Array\n        (\n            [0] =&gt; myrow\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    function_exists() - Return TRUE if the given function has been defined\n    get_defined_vars() - Returns an array of all defined variables\n    get_defined_constants() - Returns an associative array with the names of all the constants and their values\n    get_declared_classes() - Returns an array with the name of the defined classes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.register-tick-function.php","title":"register_tick_function","description":"\n \n  register_tick_function\n  (PHP 4 &gt;= 4.0.3, PHP 5)register_tick_function &mdash; Register a function for execution on each tick\n\n \n \n \n  Description\n  \n   bool register_tick_function\n    ( callback $function\n   [, mixed $arg\n   [, mixed $...\n  ]] )\n\n  \n   Registers the given function to be executed when a\n   tick is called.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       The function name as a string, or an array consisting of an object and\n       a method.\n      \n     \n\n    \n\n    \n\n     arg\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 register_tick_function() example\n    \n\n&lt;?phpdeclare(ticks=1);\/\/&nbsp;using&nbsp;a&nbsp;function&nbsp;as&nbsp;the&nbsp;callbackregister_tick_function('my_function',&nbsp;true);\/\/&nbsp;using&nbsp;an&nbsp;object-&gt;method$object&nbsp;=&nbsp;new&nbsp;my_class();register_tick_function(array(&amp;$object,&nbsp;'my_method'),&nbsp;true);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Ticks are now supported on threaded web server modules.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Warning\n   \n    register_tick_function() should not be used with\n    threaded web server modules with PHP 5.2 or lower.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    declare\n    unregister_tick_function() - De-register a function for execution on each tick\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unregister-tick-function.php","title":"unregister_tick_function","description":"\n \n  unregister_tick_function\n  (PHP 4 &gt;= 4.0.3, PHP 5)unregister_tick_function &mdash; De-register a function for execution on each tick\n\n \n \n \n  Description\n  \n   void unregister_tick_function\n    ( string $function_name\n   )\n\n  \n   De-registers the function named by function_name so it is\n   no longer executed when a tick is\n   called.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function_name\n     \n\n      \n       The function name, as a string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    register_tick_function() - Register a function for execution on each tick\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-alloc.php","title":"ftp_alloc","description":"\n \n  ftp_alloc\n  (PHP 5)ftp_alloc &mdash; Allocates space for a file to be uploaded\n\n \n \n  Description\n  \n   bool ftp_alloc\n    ( resource $ftp_stream\n   , int $filesize\n   [, string &$result\n  ] )\n\n  \n   Sends an ALLO command to the remote FTP server to \n   allocate space for a file to be uploaded.\n  \n  Note: \n   \n    Many FTP servers do not support this command.  These servers may return a failure \n    code (FALSE) indicating the command is not supported or a success code (TRUE)\n    to indicate that pre-allocation is not necessary and the client should continue\n    as though the operation were successful.  Because of this, it may be best to reserve\n    this function for servers which explicitly require preallocation.\n   \n  \n  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     filesize\n     \n\n      \n       The number of bytes to allocate.\n      \n     \n\n    \n\n    \n\n     result\n     \n\n      \n       A textual representation of the servers response will be returned by \n       reference in result if a variable is provided.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_alloc() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;\"\/home\/user\/myfile\";\/\/&nbsp;connect&nbsp;to&nbsp;the&nbsp;server$conn_id&nbsp;=&nbsp;ftp_connect('ftp.example.com');$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;'anonymous',&nbsp;'user@example.com');if&nbsp;(ftp_alloc($conn_id,&nbsp;filesize($file),&nbsp;$result))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Space&nbsp;successfully&nbsp;allocated&nbsp;on&nbsp;server.&nbsp;&nbsp;Sending&nbsp;$file.\\n\";&nbsp;&nbsp;ftp_put($conn_id,&nbsp;'\/incomming\/myfile',&nbsp;$file,&nbsp;FTP_BINARY);}&nbsp;else&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;allocate&nbsp;space&nbsp;on&nbsp;server.&nbsp;&nbsp;Server&nbsp;said:&nbsp;$result\\n\";}ftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_put() - Uploads a file to the FTP server\n    ftp_fput() - Uploads from an open file to the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-cdup.php","title":"ftp_cdup","description":"\n \n  ftp_cdup\n  (PHP 4, PHP 5)ftp_cdup &mdash; Changes to the parent directory\n\n \n \n  Description\n  \n   bool ftp_cdup\n    ( resource $ftp_stream\n   )\n\n   \n   Changes to the parent directory.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_cdup() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;change&nbsp;the&nbsp;current&nbsp;directory&nbsp;to&nbsp;htmlftp_chdir($conn_id,&nbsp;'html');echo&nbsp;ftp_pwd($conn_id);&nbsp;\/\/&nbsp;\/html&nbsp;\/\/&nbsp;return&nbsp;to&nbsp;the&nbsp;parent&nbsp;directoryif&nbsp;(ftp_cdup($conn_id))&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"cdup&nbsp;successful\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;echo&nbsp;\"cdup&nbsp;not&nbsp;successful\\n\";}echo&nbsp;ftp_pwd($conn_id);&nbsp;\/\/&nbsp;\/ftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_chdir() - Changes the current directory on a FTP server\n    ftp_pwd() - Returns the current directory name\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.register-shutdown-function.php","title":"register_shutdown_function","description":"\n \n  register_shutdown_function\n  (PHP 4, PHP 5)register_shutdown_function &mdash; Register a function for execution on shutdown\n\n \n \n \n  Description\n  \n   void register_shutdown_function\n    ( callback $callback\n   [, mixed $parameter\n   [, mixed $...\n  ]] )\n\n  \n   Registers a callback to be executed after script\n   execution finishes or exit() is called.\n  \n  \n   Multiple calls to register_shutdown_function() can be\n   made, and each will be called in the same order as they were registered.\n   If you call exit() within one registered shutdown\n   function, processing will stop completely and no other registered\n   shutdown functions will be called.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     callback\n     \n\n      \n       The shutdown callback to register.\n      \n      \n       The shutdown callbacks are executed as the part of the request, so\n       it&#039;s possible to send output from them and access output buffers.\n      \n     \n\n    \n\n    \n\n     parameter\n     \n\n      \n       It is possible to pass parameters to the shutdown function by passing\n       additional parameters.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n \n  Errors\/Exceptions\n  \n   If the passed callback is not callable a E_WARNING\n   level error will be generated.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The shutdown functions are now called as a part of the request.\n        In earlier versions under Apache, the registered shutdown functions\n        were called after the request has been completed (including sending\n        any output buffers), so it was not possible to send output to the\n        browser using echo() or\n        print(), or retrieve the contents of any output\n        buffers using ob_get_contents().\n        Headers were also always already sent.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 register_shutdown_function() example\n    \n\n&lt;?phpfunction&nbsp;shutdown(){&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;our&nbsp;shutdown&nbsp;function,&nbsp;in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;here&nbsp;we&nbsp;can&nbsp;do&nbsp;any&nbsp;last&nbsp;operations&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;before&nbsp;the&nbsp;script&nbsp;is&nbsp;complete.&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Script&nbsp;executed&nbsp;with&nbsp;success',&nbsp;PHP_EOL;}register_shutdown_function('shutdown');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Working directory of the script can change inside the shutdown function\n    under some web servers, e.g. Apache.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    auto_append_file\n    exit() - Output a message and terminate the current script\n    The section on connection handling\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-chdir.php","title":"ftp_chdir","description":"\n \n  ftp_chdir\n  (PHP 4, PHP 5)ftp_chdir &mdash; Changes the current directory on a FTP server\n\n \n \n  Description\n  \n   bool ftp_chdir\n    ( resource $ftp_stream\n   , string $directory\n   )\n\n   \n   Changes the current directory to the specified one.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     directory\n     \n\n      \n       The target directory.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   If changing directory fails, PHP will also throw a warning.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_chdir() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);&nbsp;\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);&nbsp;\/\/&nbsp;check&nbsp;connectionif&nbsp;((!$conn_id)&nbsp;||&nbsp;(!$login_result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"FTP&nbsp;connection&nbsp;has&nbsp;failed&nbsp;!\");}echo&nbsp;\"Current&nbsp;directory:&nbsp;\"&nbsp;.&nbsp;ftp_pwd($conn_id)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;try&nbsp;to&nbsp;change&nbsp;the&nbsp;directory&nbsp;to&nbsp;somedirif&nbsp;(ftp_chdir($conn_id,&nbsp;\"somedir\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Current&nbsp;directory&nbsp;is&nbsp;now:&nbsp;\"&nbsp;.&nbsp;ftp_pwd($conn_id)&nbsp;.&nbsp;\"\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;change&nbsp;directory\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_cdup() - Changes to the parent directory\n    ftp_pwd() - Returns the current directory name\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-chmod.php","title":"ftp_chmod","description":"\n \n  ftp_chmod\n  (PHP 5)ftp_chmod &mdash; Set permissions on a file via FTP\n\n \n \n  Description\n  \n   int ftp_chmod\n    ( resource $ftp_stream\n   , int $mode\n   , string $filename\n   )\n\n   \n   Sets the permissions on the specified remote file to \n   mode.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The new permissions, given as an octal value.\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       The remote file.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the new file permissions on success or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_chmod() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'public_html\/index.php';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;chmod&nbsp;$file&nbsp;to&nbsp;644if&nbsp;(ftp_chmod($conn_id,&nbsp;0644,&nbsp;$file)&nbsp;!==&nbsp;false)&nbsp;{&nbsp;echo&nbsp;\"$file&nbsp;chmoded&nbsp;successfully&nbsp;to&nbsp;644\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"could&nbsp;not&nbsp;chmod&nbsp;$file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    chmod() - Changes file mode\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-close.php","title":"ftp_close","description":"\n \n  ftp_close\n  (PHP 4 &gt;= 4.2.0, PHP 5)ftp_close &mdash; Closes an FTP connection\n\n \n \n  Description\n  \n   bool ftp_close\n    ( resource $ftp_stream\n   )\n\n  \n   ftp_close() closes the given link identifier\n   and releases the resource.\n  \n  Note: \n   \n    After calling this function, you can no longer use the FTP connection and\n    must create a new one with ftp_connect().\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_close() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;print&nbsp;the&nbsp;current&nbsp;directoryecho&nbsp;ftp_pwd($conn_id);&nbsp;\/\/&nbsp;\/\/\/&nbsp;close&nbsp;this&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_connect() - Opens an FTP connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-delete.php","title":"ftp_delete","description":"\n \n  ftp_delete\n  (PHP 4, PHP 5)ftp_delete &mdash; Deletes a file on the FTP server\n\n \n \n  Description\n  \n   bool ftp_delete\n    ( resource $ftp_stream\n   , string $path\n   )\n\n  \n   ftp_delete() deletes the file specified by\n   path from the FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     path\n     \n\n      \n       The file to delete.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_delete() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'public_html\/old.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;delete&nbsp;$fileif&nbsp;(ftp_delete($conn_id,&nbsp;$file))&nbsp;{&nbsp;echo&nbsp;\"$file&nbsp;deleted&nbsp;successful\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"could&nbsp;not&nbsp;delete&nbsp;$file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-connect.php","title":"ftp_connect","description":"\n \n  ftp_connect\n  (PHP 4, PHP 5)ftp_connect &mdash; Opens an FTP connection\n\n \n \n  Description\n  \n   resource ftp_connect\n    ( string $host\n   [, int $port = 21\n   [, int $timeout = 90\n  ]] )\n\n  \n   ftp_connect() opens an FTP connection to the\n   specified host.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     host\n     \n\n      \n       The FTP server address. This parameter shouldn&#039;t have any trailing \n       slashes and shouldn&#039;t be prefixed with ftp:\/\/.\n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n       This parameter specifies an alternate port to connect to. If it is\n       omitted or set to zero, then the default FTP port, 21, will be used.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       This parameter specifies the timeout for all subsequent network operations.\n       If omitted, the default value is 90 seconds. The timeout can be changed and\n       queried at any time with ftp_set_option() and\n       ftp_get_option().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a FTP stream on success or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_connect() example\n    \n\n&lt;?php$ftp_server&nbsp;=&nbsp;\"ftp.example.com\";\/\/&nbsp;set&nbsp;up&nbsp;a&nbsp;connection&nbsp;or&nbsp;die$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server)&nbsp;or&nbsp;die(\"Couldn't&nbsp;connect&nbsp;to&nbsp;$ftp_server\");&nbsp;?&gt;\n\n  \n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        timeout was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_close() - Closes an FTP connection\n    ftp_ssl_connect() - Opens an Secure SSL-FTP connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-get-option.php","title":"ftp_get_option","description":"\n \n  ftp_get_option\n  (PHP 4 &gt;= 4.2.0, PHP 5)ftp_get_option &mdash; Retrieves various runtime behaviours of the current FTP stream\n\n \n \n  Description\n  \n   mixed ftp_get_option\n    ( resource $ftp_stream\n   , int $option\n   )\n\n  \n   This function returns the value for the requested \n   option from the specified FTP connection.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       Currently, the following options are supported:\n       \n        Supported runtime FTP options\n        \n         \n          \n           FTP_TIMEOUT_SEC\n           \n            Returns the current timeout used for network related operations.\n           \n          \n\n          \n           FTP_AUTOSEEK\n           \n            Returns TRUE if this option is on, FALSE otherwise. \n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the value on success or FALSE if the given \n   option is not supported. In the latter case, a\n   warning message is also thrown.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_get_option() example\n    \n\n&lt;?php\/\/&nbsp;Get&nbsp;the&nbsp;timeout&nbsp;of&nbsp;the&nbsp;given&nbsp;FTP&nbsp;stream$timeout&nbsp;=&nbsp;ftp_get_option($conn_id,&nbsp;FTP_TIMEOUT_SEC);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_set_option() - Set miscellaneous runtime FTP options\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-exec.php","title":"ftp_exec","description":"\n \n  ftp_exec\n  (PHP 4 &gt;= 4.0.3, PHP 5)ftp_exec &mdash; Requests execution of a command on the FTP server\n\n \n \n  Description\n  \n   bool ftp_exec\n    ( resource $ftp_stream\n   , string $command\n   )\n\n  \n   Sends a SITE EXEC command request to the FTP\n   server. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     command\n     \n\n      \n       The command to execute.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the command was successful (server sent response code:\n   200); otherwise returns FALSE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_exec() example\n    \n\n&lt;?php\/\/&nbsp;variable&nbsp;initialization$command&nbsp;=&nbsp;'ls&nbsp;-al&nbsp;&gt;files.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;execute&nbsp;commandif&nbsp;(ftp_exec($conn_id,&nbsp;$command))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$command&nbsp;executed&nbsp;successfully\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"could&nbsp;not&nbsp;execute&nbsp;$command\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_raw() - Sends an arbitrary command to an FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-fput.php","title":"ftp_fput","description":"\n \n  ftp_fput\n  (PHP 4, PHP 5)ftp_fput &mdash; Uploads from an open file to the FTP server\n\n \n \n  Description\n  \n   bool ftp_fput\n    ( resource $ftp_stream\n   , string $remote_file\n   , resource $handle\n   , int $mode\n   [, int $startpos = 0\n  ] )\n\n  \n   ftp_fput() uploads the data from a file pointer\n   to a remote file on the FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       An open file pointer on the local file. Reading stops at end of file.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     startpos\n     \n\n      The position in the remote file to start uploading to.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_fput() example\n    \n\n&lt;?php\/\/&nbsp;open&nbsp;some&nbsp;file&nbsp;for&nbsp;reading$file&nbsp;=&nbsp;'somefile.txt';$fp&nbsp;=&nbsp;fopen($file,&nbsp;'r');\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;upload&nbsp;$fileif&nbsp;(ftp_fput($conn_id,&nbsp;$file,&nbsp;$fp,&nbsp;FTP_ASCII))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Successfully&nbsp;uploaded&nbsp;$file\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;uploading&nbsp;$file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connection&nbsp;and&nbsp;the&nbsp;file&nbsp;handlerftp_close($conn_id);fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        startpos was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_put() - Uploads a file to the FTP server\n    ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)\n    ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-fget.php","title":"ftp_fget","description":"\n \n  ftp_fget\n  (PHP 4, PHP 5)ftp_fget &mdash; Downloads a file from the FTP server and saves to an open file\n\n \n \n  Description\n  \n   bool ftp_fget\n    ( resource $ftp_stream\n   , resource $handle\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )\n\n  \n   ftp_fget() retrieves remote_file\n   from the FTP server, and writes it to the given file pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       An open file pointer in which we store the data.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     resumepos\n     \n\n      \n       The position in the remote file to start downloading from.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_fget() example\n    \n\n&lt;?php\/\/&nbsp;path&nbsp;to&nbsp;remote&nbsp;file$remote_file&nbsp;=&nbsp;'somefile.txt';$local_file&nbsp;=&nbsp;'localfile.txt';\/\/&nbsp;open&nbsp;some&nbsp;file&nbsp;to&nbsp;write&nbsp;to$handle&nbsp;=&nbsp;fopen($local_file,&nbsp;'w');\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;download&nbsp;$remote_file&nbsp;and&nbsp;save&nbsp;it&nbsp;to&nbsp;$handleif&nbsp;(ftp_fget($conn_id,&nbsp;$handle,&nbsp;$remote_file,&nbsp;FTP_ASCII,&nbsp;0))&nbsp;{&nbsp;echo&nbsp;\"successfully&nbsp;written&nbsp;to&nbsp;$local_file\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;downloading&nbsp;$remote_file&nbsp;to&nbsp;$local_file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connection&nbsp;and&nbsp;the&nbsp;file&nbsp;handlerftp_close($conn_id);fclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        resumepos was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_get() - Downloads a file from the FTP server\n    ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)\n    ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-login.php","title":"ftp_login","description":"\n \n  ftp_login\n  (PHP 4, PHP 5)ftp_login &mdash; Logs in to an FTP connection\n\n \n \n  Description\n  \n   bool ftp_login\n    ( resource $ftp_stream\n   , string $username\n   , string $password\n   )\n\n   \n   Logs in to the given FTP stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The username (USER).\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password (PASS).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   If login fails, PHP will also throw a warning.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_login() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ftp_server&nbsp;=&nbsp;\"ftp.example.com\";$ftp_user&nbsp;=&nbsp;\"foo\";$ftp_pass&nbsp;=&nbsp;\"bar\";\/\/&nbsp;set&nbsp;up&nbsp;a&nbsp;connection&nbsp;or&nbsp;die$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server)&nbsp;or&nbsp;die(\"Couldn't&nbsp;connect&nbsp;to&nbsp;$ftp_server\");&nbsp;\/\/&nbsp;try&nbsp;to&nbsp;loginif&nbsp;(@ftp_login($conn_id,&nbsp;$ftp_user,&nbsp;$ftp_pass))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connected&nbsp;as&nbsp;$ftp_user@$ftp_server\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;connect&nbsp;as&nbsp;$ftp_user\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);&nbsp;&nbsp;?&gt;\n\n  \n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-get.php","title":"ftp_get","description":"\n \n  ftp_get\n  (PHP 4, PHP 5)ftp_get &mdash; Downloads a file from the FTP server\n\n \n \n  Description\n  \n   bool ftp_get\n    ( resource $ftp_stream\n   , string $local_file\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )\n\n  \n   ftp_get() retrieves a remote file from the FTP server,\n   and saves it into a local file. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       The local file path (will be overwritten if the file already exists).\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     resumepos\n     \n\n      \n       The position in the remote file to start downloading from.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_get() example\n    \n\n&lt;?php\/\/&nbsp;define&nbsp;some&nbsp;variables$local_file&nbsp;=&nbsp;'local.zip';$server_file&nbsp;=&nbsp;'server.zip';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;download&nbsp;$server_file&nbsp;and&nbsp;save&nbsp;to&nbsp;$local_fileif&nbsp;(ftp_get($conn_id,&nbsp;$local_file,&nbsp;$server_file,&nbsp;FTP_BINARY))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Successfully&nbsp;written&nbsp;to&nbsp;$local_file\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        resumepos was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_pasv() - Turns passive mode on or off\n    ftp_fget() - Downloads a file from the FTP server and saves to an open file\n    ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)\n    ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-mkdir.php","title":"ftp_mkdir","description":"\n \n  ftp_mkdir\n  (PHP 4, PHP 5)ftp_mkdir &mdash; Creates a directory\n\n \n \n  Description\n  \n   string ftp_mkdir\n    ( resource $ftp_stream\n   , string $directory\n   )\n\n   \n   Creates the specified directory on the FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     directory\n     \n\n      \n       The name of the directory that will be created.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the newly created directory name on success or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_mkdir() example\n    \n\n&lt;?php$dir&nbsp;=&nbsp;'www';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;create&nbsp;the&nbsp;directory&nbsp;$dirif&nbsp;(ftp_mkdir($conn_id,&nbsp;$dir))&nbsp;{&nbsp;echo&nbsp;\"successfully&nbsp;created&nbsp;$dir\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;creating&nbsp;$dir\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_rmdir() - Removes a directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-mdtm.php","title":"ftp_mdtm","description":"\n \n  ftp_mdtm\n  (PHP 4, PHP 5)ftp_mdtm &mdash; Returns the last modified time of the given file\n\n \n \n  Description\n  \n   int ftp_mdtm\n    ( resource $ftp_stream\n   , string $remote_file\n   )\n\n  \n   ftp_mdtm() gets the last modified time for a remote\n   file.\n  \n  Note: \n   \n    Not all servers support this feature!\n   \n  \n  Note: \n   \n    ftp_mdtm() does not work with directories.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The file from which to extract the last modification time.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the last modified time as a Unix timestamp on success, or -1 on \n   error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_mdtm() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'somefile.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;&nbsp;get&nbsp;the&nbsp;last&nbsp;modified&nbsp;time$buff&nbsp;=&nbsp;ftp_mdtm($conn_id,&nbsp;$file);if&nbsp;($buff&nbsp;!=&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;somefile.txt&nbsp;was&nbsp;last&nbsp;modified&nbsp;on:&nbsp;March&nbsp;26&nbsp;2003&nbsp;14:16:41.&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$file&nbsp;was&nbsp;last&nbsp;modified&nbsp;on&nbsp;:&nbsp;\"&nbsp;.&nbsp;date(\"F&nbsp;d&nbsp;Y&nbsp;H:i:s.\",&nbsp;$buff);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;get&nbsp;mdtime\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-continue.php","title":"ftp_nb_continue","description":"\n \n  ftp_nb_continue\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_nb_continue &mdash; Continues retrieving\/sending a file (non-blocking)\n\n \n \n  Description\n  \n   int ftp_nb_continue\n    ( resource $ftp_stream\n   )\n\n   \n   Continues retrieving\/sending a file non-blocking.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nb_continue() example\n    \n\n&lt;?php\/\/&nbsp;Initate&nbsp;the&nbsp;download$ret&nbsp;=&nbsp;ftp_nb_get($my_connection,&nbsp;\"test\",&nbsp;\"README\",&nbsp;FTP_BINARY);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;downloading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;downloading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-fget.php","title":"ftp_nb_fget","description":"\n \n  ftp_nb_fget\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_nb_fget &mdash; Retrieves a file from the FTP server and writes it to an open file (non-blocking)\n\n \n \n  Description\n  \n   int ftp_nb_fget\n    ( resource $ftp_stream\n   , resource $handle\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )\n\n  \n   ftp_nb_fget() retrieves a remote file from the FTP \n   server.\n  \n  \n   The difference between this function and ftp_fget() is \n   that this function retrieves the file asynchronously, so your program can \n   perform other operations while the file is being downloaded.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       An open file pointer in which we store the data.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     resumepos\n     \n\n      The position in the remote file to start downloading from.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nb_fget() example\n    \n\n&lt;?php\/\/&nbsp;open&nbsp;some&nbsp;file&nbsp;for&nbsp;reading$file&nbsp;=&nbsp;'index.php';$fp&nbsp;=&nbsp;fopen($file,&nbsp;'w');$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;Initate&nbsp;the&nbsp;download$ret&nbsp;=&nbsp;ftp_nb_fget($conn_id,&nbsp;$fp,&nbsp;$file,&nbsp;FTP_BINARY);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;downloading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($conn_id);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;downloading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}\/\/&nbsp;close&nbsp;filepointerfclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_nb_get() - Retrieves a file from the FTP server and writes it to a local file (non-blocking)\n    ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)\n    ftp_fget() - Downloads a file from the FTP server and saves to an open file\n    ftp_get() - Downloads a file from the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-get.php","title":"ftp_nb_get","description":"\n \n  ftp_nb_get\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_nb_get &mdash; Retrieves a file from the FTP server and writes it to a local file (non-blocking)\n\n \n \n  Description\n  \n   int ftp_nb_get\n    ( resource $ftp_stream\n   , string $local_file\n   , string $remote_file\n   , int $mode\n   [, int $resumepos = 0\n  ] )\n\n  \n   ftp_nb_get() retrieves a remote file from the FTP server,\n   and saves it into a local file. \n  \n  \n   The difference between this function and ftp_get() is that\n   this function retrieves the file asynchronously, so your program can perform \n   other operations while the file is being downloaded.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       The local file path (will be overwritten if the file already exists).\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     resumepos\n     \n\n      The position in the remote file to start downloading from.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nb_get() example\n    \n\n&lt;?php\/\/&nbsp;Initate&nbsp;the&nbsp;download$ret&nbsp;=&nbsp;ftp_nb_get($my_connection,&nbsp;\"test\",&nbsp;\"README\",&nbsp;FTP_BINARY);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;downloading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;downloading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Resuming a download with ftp_nb_get()\n    \n\n&lt;?php\/\/&nbsp;Initate&nbsp;$ret&nbsp;=&nbsp;ftp_nb_get($my_connection,&nbsp;\"test\",&nbsp;\"README\",&nbsp;FTP_BINARY,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filesize(\"test\"));\/\/&nbsp;OR:&nbsp;$ret&nbsp;=&nbsp;ftp_nb_get($my_connection,&nbsp;\"test\",&nbsp;\"README\",&nbsp;\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTP_BINARY,&nbsp;FTP_AUTORESUME);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;downloading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;downloading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}?&gt;\n\n\n    \n\n   \n   \n    Example #3 \n     Resuming a download at position 100 to a new\n     file with ftp_nb_get()\n    \n    \n\n&lt;?php\/\/&nbsp;Disable&nbsp;Autoseekftp_set_option($my_connection,&nbsp;FTP_AUTOSEEK,&nbsp;false);\/\/&nbsp;Initiate$ret&nbsp;=&nbsp;ftp_nb_get($my_connection,&nbsp;\"newfile\",&nbsp;\"README\",&nbsp;FTP_BINARY,&nbsp;100);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;\/*&nbsp;...&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;downloading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}?&gt;\n\n\n    \n\n   \n  \n  \n   In the example above, newfile is 100 bytes smaller\n   than README on the FTP server because we started\n   reading at offset 100. If we didn&#039;t disable \n   FTP_AUTOSEEK, the first 100 bytes of\n   newfile would be &#039;\\0&#039;.\n  \n \n\n \n  See Also\n  \n   \n    ftp_nb_fget() - Retrieves a file from the FTP server and writes it to an open file (non-blocking)\n    ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)\n    ftp_fget() - Downloads a file from the FTP server and saves to an open file\n    ftp_get() - Downloads a file from the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-put.php","title":"ftp_nb_put","description":"\n \n  ftp_nb_put\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_nb_put &mdash; Stores a file on the FTP server (non-blocking)\n\n \n \n  Description\n  \n   int ftp_nb_put\n    ( resource $ftp_stream\n   , string $remote_file\n   , string $local_file\n   , int $mode\n   [, int $startpos = 0\n  ] )\n\n  \n   ftp_nb_put() stores a local file on the FTP server.\n  \n  \n   The difference between this function and the ftp_put()\n   is that this function uploads the file asynchronously, so your program can\n   perform other operations while the file is being uploaded.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       The local file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     startpos\n     \n\n      The position in the remote file to start uploading to.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nb_put() example\n    \n\n&lt;?php\/\/&nbsp;Initiate&nbsp;the&nbsp;Upload$ret&nbsp;=&nbsp;ftp_nb_put($my_connection,&nbsp;\"test.remote\",&nbsp;\"test.local\",&nbsp;FTP_BINARY);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;uploading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;uploading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Resuming an upload with ftp_nb_put()\n    \n\n&lt;?php\/\/&nbsp;Initiate$ret&nbsp;=&nbsp;ftp_nb_put($my_connection,&nbsp;\"test.remote\",&nbsp;\"test.local\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTP_BINARY,&nbsp;ftp_size(\"test.remote\"));\/\/&nbsp;OR:&nbsp;$ret&nbsp;=&nbsp;ftp_nb_put($my_connection,&nbsp;\"test.remote\",&nbsp;\"test.local\",&nbsp;\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTP_BINARY,&nbsp;FTP_AUTORESUME);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;uploading...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($my_connection);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;uploading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)\n    ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)\n    ftp_put() - Uploads a file to the FTP server\n    ftp_fput() - Uploads from an open file to the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nb-fput.php","title":"ftp_nb_fput","description":"\n \n  ftp_nb_fput\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_nb_fput &mdash; Stores a file from an open file to the FTP server (non-blocking)\n\n \n \n  Description\n  \n   int ftp_nb_fput\n    ( resource $ftp_stream\n   , string $remote_file\n   , resource $handle\n   , int $mode\n   [, int $startpos = 0\n  ] )\n\n  \n   ftp_nb_fput() uploads the data from a file pointer to\n   a remote file on the FTP server.\n  \n  \n   The difference between this function and the ftp_fput() \n   is that this function uploads the file asynchronously, so your program can\n   perform other operations while the file is being uploaded.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       An open file pointer on the local file. Reading stops at end of file.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     startpos\n     \n\n      The position in the remote file to start uploading to.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FTP_FAILED or FTP_FINISHED\n   or FTP_MOREDATA.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nb_fput() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'index.php';$fp&nbsp;=&nbsp;fopen($file,&nbsp;'r');$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;Initate&nbsp;the&nbsp;upload$ret&nbsp;=&nbsp;ftp_nb_fput($conn_id,&nbsp;$file,&nbsp;$fp,&nbsp;FTP_BINARY);while&nbsp;($ret&nbsp;==&nbsp;FTP_MOREDATA)&nbsp;{&nbsp;&nbsp;&nbsp;\/\/&nbsp;Do&nbsp;whatever&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;echo&nbsp;\".\";&nbsp;&nbsp;&nbsp;\/\/&nbsp;Continue&nbsp;upload...&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;ftp_nb_continue($conn_id);}if&nbsp;($ret&nbsp;!=&nbsp;FTP_FINISHED)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;an&nbsp;error&nbsp;uploading&nbsp;the&nbsp;file...\";&nbsp;&nbsp;&nbsp;exit(1);}fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n    ftp_nb_continue() - Continues retrieving\/sending a file (non-blocking)\n    ftp_put() - Uploads a file to the FTP server\n    ftp_fput() - Uploads from an open file to the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-pasv.php","title":"ftp_pasv","description":"\n \n  ftp_pasv\n  (PHP 4, PHP 5)ftp_pasv &mdash; Turns passive mode on or off\n\n \n \n  Description\n  \n   bool ftp_pasv\n    ( resource $ftp_stream\n   , bool $pasv\n   )\n\n  \n   ftp_pasv() turns on or off passive mode. In\n   passive mode, data connections are initiated by the client,\n   rather than by the server.\n   It may be needed if the client is behind firewall.\n  \n  \n   Please note that ftp_pasv() can only be called after a\n   successfull login or otherwise it will fail.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     pasv\n     \n\n      \n       If TRUE, the passive mode is turned on, else it&#039;s turned off.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_pasv() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'somefile.txt';$remote_file&nbsp;=&nbsp;'readme.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;turn&nbsp;passive&nbsp;mode&nbsp;onftp_pasv($conn_id,&nbsp;true);\/\/&nbsp;upload&nbsp;a&nbsp;fileif&nbsp;(ftp_put($conn_id,&nbsp;$remote_file,&nbsp;$file,&nbsp;FTP_ASCII))&nbsp;{&nbsp;echo&nbsp;\"successfully&nbsp;uploaded&nbsp;$file\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;uploading&nbsp;$file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-pwd.php","title":"ftp_pwd","description":"\n \n  ftp_pwd\n  (PHP 4, PHP 5)ftp_pwd &mdash; Returns the current directory name\n\n \n \n  Description\n  \n   string ftp_pwd\n    ( resource $ftp_stream\n   )\n\n  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the current directory name or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_pwd() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;change&nbsp;directory&nbsp;to&nbsp;public_htmlftp_chdir($conn_id,&nbsp;'public_html');\/\/&nbsp;print&nbsp;current&nbsp;directoryecho&nbsp;ftp_pwd($conn_id);&nbsp;\/\/&nbsp;\/public_html\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_chdir() - Changes the current directory on a FTP server\n    ftp_cdup() - Changes to the parent directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-quit.php","title":"ftp_quit","description":"\n \n  ftp_quit\n  (PHP 4, PHP 5)ftp_quit &mdash; Alias of ftp_close()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   ftp_close().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-nlist.php","title":"ftp_nlist","description":"\n \n  ftp_nlist\n  (PHP 4, PHP 5)ftp_nlist &mdash; Returns a list of files in the given directory\n\n \n \n  Description\n  \n   array ftp_nlist\n    ( resource $ftp_stream\n   , string $directory\n   )\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     directory\n     \n\n      \n       The directory to be listed. This parameter can also include arguments, eg.\n       ftp_nlist($conn_id, &quot;-la \/your\/dir&quot;);\n       Note that this parameter isn&#039;t escaped so there may be some issues with\n       filenames containing spaces and other characters. \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of filenames from the specified directory on success or\n   FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_nlist() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;get&nbsp;contents&nbsp;of&nbsp;the&nbsp;current&nbsp;directory$contents&nbsp;=&nbsp;ftp_nlist($conn_id,&nbsp;\".\");\/\/&nbsp;output&nbsp;$contentsvar_dump($contents);?&gt;\n\n  \n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(3) {\n  [0]=&gt;\n  string(11) &quot;public_html&quot;\n  [1]=&gt;\n  string(10) &quot;public_ftp&quot;\n  [2]=&gt;\n  string(3) &quot;www&quot;\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_rawlist() - Returns a detailed list of files in the given directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-raw.php","title":"ftp_raw","description":"\n \n  ftp_raw\n  (PHP 5)ftp_raw &mdash; Sends an arbitrary command to an FTP server\n\n \n \n  Description\n  \n   array ftp_raw\n    ( resource $ftp_stream\n   , string $command\n   )\n\n  \n   Sends an arbitrary command to the FTP server. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     command\n     \n\n      \n       The command to execute.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the server&#039;s response as an array of strings.\n   No parsing is performed on the response string, nor does \n   ftp_raw() determine if the command succeeded.  \n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using ftp_raw() to login to an FTP server manually.\n    \n\n&lt;?php$fp&nbsp;=&nbsp;ftp_connect(\"ftp.example.com\");\/*&nbsp;This&nbsp;is&nbsp;the&nbsp;same&nbsp;as:&nbsp;&nbsp;&nbsp;&nbsp;ftp_login($fp,&nbsp;\"joeblow\",&nbsp;\"secret\");&nbsp;*\/ftp_raw($fp,&nbsp;\"USER&nbsp;joeblow\");ftp_raw($fp,&nbsp;\"PASS&nbsp;secret\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_exec() - Requests execution of a command on the FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-put.php","title":"ftp_put","description":"\n \n  ftp_put\n  (PHP 4, PHP 5)ftp_put &mdash; Uploads a file to the FTP server\n\n \n \n  Description\n  \n   bool ftp_put\n    ( resource $ftp_stream\n   , string $remote_file\n   , string $local_file\n   , int $mode\n   [, int $startpos = 0\n  ] )\n\n  \n   ftp_put() stores a local file on the FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file path.\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       The local file path.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The transfer mode. Must be either FTP_ASCII or\n       FTP_BINARY.\n      \n     \n\n    \n\n    \n\n     startpos\n     \n\n      The position in the remote file to start uploading to.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_put() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'somefile.txt';$remote_file&nbsp;=&nbsp;'readme.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;upload&nbsp;a&nbsp;fileif&nbsp;(ftp_put($conn_id,&nbsp;$remote_file,&nbsp;$file,&nbsp;FTP_ASCII))&nbsp;{&nbsp;echo&nbsp;\"successfully&nbsp;uploaded&nbsp;$file\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;uploading&nbsp;$file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        startpos was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_pasv() - Turns passive mode on or off\n    ftp_fput() - Uploads from an open file to the FTP server\n    ftp_nb_fput() - Stores a file from an open file to the FTP server (non-blocking)\n    ftp_nb_put() - Stores a file on the FTP server (non-blocking)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rename.php","title":"ftp_rename","description":"\n \n  ftp_rename\n  (PHP 4, PHP 5)ftp_rename &mdash; Renames a file or a directory on the FTP server\n\n \n \n  Description\n  \n   bool ftp_rename\n    ( resource $ftp_stream\n   , string $oldname\n   , string $newname\n   )\n\n  \n   ftp_rename() renames a file or a directory on the FTP\n   server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     oldname\n     \n\n      \n       The old file\/directory name.\n      \n     \n\n    \n\n    \n\n     newname\n     \n\n      \n       The new name.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_rename() example\n    \n\n&lt;?php$old_file&nbsp;=&nbsp;'somefile.txt.bak';$new_file&nbsp;=&nbsp;'somefile.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;rename&nbsp;$old_file&nbsp;to&nbsp;$new_fileif&nbsp;(ftp_rename($conn_id,&nbsp;$old_file,&nbsp;$new_file))&nbsp;{&nbsp;echo&nbsp;\"successfully&nbsp;renamed&nbsp;$old_file&nbsp;to&nbsp;$new_file\\n\";}&nbsp;else&nbsp;{&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;renaming&nbsp;$old_file&nbsp;to&nbsp;$new_file\\n\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rmdir.php","title":"ftp_rmdir","description":"\n \n  ftp_rmdir\n  (PHP 4, PHP 5)ftp_rmdir &mdash; Removes a directory\n\n \n \n  Description\n  \n   bool ftp_rmdir\n    ( resource $ftp_stream\n   , string $directory\n   )\n\n   \n   Removes the specified directory on the FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     directory\n     \n\n      \n       The directory to delete. This must be either an absolute or relative\n       path to an empty directory.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_rmdir() example\n    \n\n&lt;?php$dir&nbsp;=&nbsp;'www\/';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;try&nbsp;to&nbsp;delete&nbsp;the&nbsp;directory&nbsp;$dirif&nbsp;(ftp_rmdir($conn_id,&nbsp;$dir))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Successfully&nbsp;deleted&nbsp;$dir\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;was&nbsp;a&nbsp;problem&nbsp;while&nbsp;deleting&nbsp;$dir\\n\";}ftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_mkdir() - Creates a directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-set-option.php","title":"ftp_set_option","description":"\n \n  ftp_set_option\n  (PHP 4 &gt;= 4.2.0, PHP 5)ftp_set_option &mdash; Set miscellaneous runtime FTP options\n\n \n \n  Description\n  \n   bool ftp_set_option\n    ( resource $ftp_stream\n   , int $option\n   , mixed $value\n   )\n\n  \n   This function controls various runtime options for the specified FTP \n   stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       Currently, the following options are supported:\n       \n        Supported runtime FTP options\n        \n         \n          \n           FTP_TIMEOUT_SEC\n           \n            Changes the timeout in seconds used for all network related \n            functions. value must be an integer that\n            is greater than 0. The default timeout is 90 seconds.\n           \n          \n\n          \n           FTP_AUTOSEEK\n           \n            When enabled, GET or PUT requests with a \n            resumepos or startpos\n            parameter will first seek to the requested position within the file.\n            This is enabled by default.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       This parameter depends on which option is chosen\n       to be altered.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the option could be set; FALSE if not. A warning\n   message will be thrown if the option is not\n   supported or the passed value doesn&#039;t match the\n   expected value for the given option.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_set_option() example\n    \n\n&lt;?php\/\/&nbsp;Set&nbsp;the&nbsp;network&nbsp;timeout&nbsp;to&nbsp;10&nbsp;secondsftp_set_option($conn_id,&nbsp;FTP_TIMEOUT_SEC,&nbsp;10);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_get_option() - Retrieves various runtime behaviours of the current FTP stream\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-site.php","title":"ftp_site","description":"\n \n  ftp_site\n  (PHP 4, PHP 5)ftp_site &mdash; Sends a SITE command to the server\n\n \n \n  Description\n  \n   bool ftp_site\n    ( resource $ftp_stream\n   , string $command\n   )\n\n  \n   ftp_site() sends the given SITE \n   command to the FTP server.\n  \n  \n   SITE commands are not standardized, and vary from server\n   to server. They are useful for handling such things as file permissions and \n   group membership.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     command\n     \n\n      \n       The SITE command. Note that this parameter isn&#039;t escaped so there may\n       be some issues with filenames containing spaces and other characters.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Sending a SITE command to an ftp server\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;FTP&nbsp;server$conn&nbsp;=&nbsp;ftp_connect('ftp.example.com');if&nbsp;(!$conn)&nbsp;die('Unable&nbsp;to&nbsp;connect&nbsp;to&nbsp;ftp.example.com');\/\/&nbsp;Login&nbsp;as&nbsp;\"user\"&nbsp;with&nbsp;password&nbsp;\"pass\"if&nbsp;(!ftp_login($conn,&nbsp;'user',&nbsp;'pass'))&nbsp;die('Error&nbsp;logging&nbsp;into&nbsp;ftp.example.com');\/\/&nbsp;Issue:&nbsp;\"SITE&nbsp;CHMOD&nbsp;0600&nbsp;\/home\/user\/privatefile\"&nbsp;command&nbsp;to&nbsp;ftp&nbsp;serverif&nbsp;(ftp_site($conn,&nbsp;'CHMOD&nbsp;0600&nbsp;\/home\/user\/privatefile'))&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"Command&nbsp;executed&nbsp;successfully.\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;die('Command&nbsp;failed.');}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_raw() - Sends an arbitrary command to an FTP server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-ssl-connect.php","title":"ftp_ssl_connect","description":"\n \n  ftp_ssl_connect\n  (PHP 4 &gt;= 4.3.0, PHP 5)ftp_ssl_connect &mdash; Opens an Secure SSL-FTP connection\n\n \n \n  Description\n  \n   resource ftp_ssl_connect\n    ( string $host\n   [, int $port = 21\n   [, int $timeout = 90\n  ]] )\n\n  \n   ftp_ssl_connect() opens an explicit SSL-FTP connection to the\n   specified host.\n  \n  Note: \n   Why this function may not exist\n   \n    ftp_ssl_connect() is only available if both\n    the ftp module and the OpenSSL\n    support is built statically into php, this means that on Windows this\n    function will be undefined in the official PHP builds. To make this\n    function available on Windows you must compile your own PHP binaries.\n   \n  \n  Note: \n   \n    ftp_ssl_connect() is not intended for use with sFTP.\n    To use sFTP with PHP, please see ssh2_sftp().\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     host\n     \n\n      \n       The FTP server address. This parameter shouldn&#039;t have any trailing \n       slashes and shouldn&#039;t be prefixed with ftp:\/\/.\n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n       This parameter specifies an alternate port to connect to. If it is\n       omitted or set to zero, then the default FTP port, 21, will be used.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       This parameter specifies the timeout for all subsequent network operations.\n       If omitted, the default value is 90 seconds. The timeout can be changed and\n       queried at any time with ftp_set_option() and\n       ftp_get_option().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a SSL-FTP stream on success or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.2\n       \n        The function was changed to return FALSE when it can&#039;t use an SSL\n        connection, instead of fallbacking to a non-SSL one as previously.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ftp_ssl_connect() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;ssl&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_ssl_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);echo&nbsp;ftp_pwd($conn_id);&nbsp;\/\/&nbsp;\/\/\/&nbsp;close&nbsp;the&nbsp;ssl&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_connect() - Opens an FTP connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-size.php","title":"ftp_size","description":"\n \n  ftp_size\n  (PHP 4, PHP 5)ftp_size &mdash; Returns the size of the given file\n\n \n \n  Description\n  \n   int ftp_size\n    ( resource $ftp_stream\n   , string $remote_file\n   )\n\n  \n   ftp_size() returns the size of the given file in\n   bytes.\n  \n  Note: \n   \n    Not all servers support this feature.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       The remote file.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the file size on success, or -1 on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_size() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'somefile.txt';\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;get&nbsp;the&nbsp;size&nbsp;of&nbsp;$file$res&nbsp;=&nbsp;ftp_size($conn_id,&nbsp;$file);if&nbsp;($res&nbsp;!=&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"size&nbsp;of&nbsp;$file&nbsp;is&nbsp;$res&nbsp;bytes\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"couldn't&nbsp;get&nbsp;the&nbsp;size\";}\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ftp_rawlist() - Returns a detailed list of files in the given directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-systype.php","title":"ftp_systype","description":"\n \n  ftp_systype\n  (PHP 4, PHP 5)ftp_systype &mdash; Returns the system type identifier of the remote FTP server\n\n \n \n  Description\n  \n   string ftp_systype\n    ( resource $ftp_stream\n   )\n\n  \n   Returns the system type identifier of the remote FTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the remote system type, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_systype() example\n    \n\n&lt;?php\/\/&nbsp;ftp&nbsp;connection$ftp&nbsp;=&nbsp;ftp_connect('ftp.example.com');ftp_login($ftp,&nbsp;'user',&nbsp;'password');\/\/&nbsp;get&nbsp;the&nbsp;system&nbsp;typeif&nbsp;($type&nbsp;=&nbsp;ftp_systype($ftp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Example.com&nbsp;is&nbsp;powered&nbsp;by&nbsp;$type\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;get&nbsp;the&nbsp;systype\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nExample.com is powered by UNIX\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-continent-code-by-name.php","title":"geoip_continent_code_by_name","description":"\n \n  geoip_continent_code_by_name\n  (PECL geoip &gt;= 1.0.3)geoip_continent_code_by_name &mdash; Get the two letter continent code\n\n \n \n  Description\n  \n   string geoip_continent_code_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_continent_code_by_name() function will return\n   the two letter continent code corresponding to a hostname or an IP address.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose location is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the two letter continent code on success, or FALSE if the\n   address cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_continent_code_by_name() example\n    \n     This will print where the host example.com is located.\n    \n    \n\n&lt;?php$continent&nbsp;=&nbsp;geoip_continent_code_by_name('www.example.com');if&nbsp;($continent)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;is&nbsp;located&nbsp;in:&nbsp;'&nbsp;.&nbsp;$continent;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n This host is located in: NA\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    geoip_country_code_by_name() - Get the two letter country code\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-code3-by-name.php","title":"geoip_country_code3_by_name","description":"\n \n  geoip_country_code3_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_country_code3_by_name &mdash; Get the three letter country code\n\n \n \n  Description\n  \n   string geoip_country_code3_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_country_code3_by_name() function will return the\n   three letter country code corresponding to a hostname or an IP address.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose location is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the three letter country code on success, or FALSE \n   if the address cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_country_code3_by_name() example\n    \n     This will print where the host example.com is located.\n    \n    \n\n&lt;?php$country&nbsp;=&nbsp;geoip_country_code3_by_name('www.example.com');if&nbsp;($country)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;is&nbsp;located&nbsp;in:&nbsp;'&nbsp;.&nbsp;$country;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis host is located in: USA\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    geoip_country_code_by_name() - Get the two letter country code\n    geoip_country_name_by_name() - Get the full country name\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-code-by-name.php","title":"geoip_country_code_by_name","description":"\n \n  geoip_country_code_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_country_code_by_name &mdash; Get the two letter country code\n\n \n \n  Description\n  \n   string geoip_country_code_by_name\n    ( string $hostname\n   )\n\n\n  \n    The geoip_country_code_by_name() function will return\n    the two letter country code corresponding to a hostname or an IP address.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose location is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the two letter ISO country code on success, or FALSE \n   if the address cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_country_code_by_name() example\n    \n     This will print where the host example.com is located.\n    \n    \n\n&lt;?php$country&nbsp;=&nbsp;geoip_country_code_by_name('www.example.com');if&nbsp;($country)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;is&nbsp;located&nbsp;in:&nbsp;'&nbsp;.&nbsp;$country;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis host is located in: US\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    geoip_country_code3_by_name() - Get the three letter country code\n    geoip_country_name_by_name() - Get the full country name\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ftp-rawlist.php","title":"ftp_rawlist","description":"\n \n  ftp_rawlist\n  (PHP 4, PHP 5)ftp_rawlist &mdash; Returns a detailed list of files in the given directory\n\n \n \n  Description\n  \n   array ftp_rawlist\n    ( resource $ftp_stream\n   , string $directory\n   [, bool $recursive = false\n  ] )\n\n  \n   ftp_rawlist() executes the FTP \n   LIST command, and returns the result as an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ftp_stream\n     \n\n      \n       The link identifier of the FTP connection.\n      \n     \n\n    \n\n    \n\n     directory\n     \n\n      \n       The directory path. May include arguments for the LIST\n       command.\n      \n     \n\n    \n\n    \n\n     recursive\n     \n\n      \n       If set to TRUE, the issued command will be LIST -R.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array where each element corresponds to one line of text.\n  \n  \n   The output is not parsed in any way. The system type identifier returned by\n   ftp_systype() can be used to determine how the results \n   should be interpreted.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ftp_rawlist() example\n    \n\n&lt;?php\/\/&nbsp;set&nbsp;up&nbsp;basic&nbsp;connection$conn_id&nbsp;=&nbsp;ftp_connect($ftp_server);\/\/&nbsp;login&nbsp;with&nbsp;username&nbsp;and&nbsp;password$login_result&nbsp;=&nbsp;ftp_login($conn_id,&nbsp;$ftp_user_name,&nbsp;$ftp_user_pass);\/\/&nbsp;get&nbsp;the&nbsp;file&nbsp;list&nbsp;for&nbsp;\/$buff&nbsp;=&nbsp;ftp_rawlist($conn_id,&nbsp;'\/');\/\/&nbsp;close&nbsp;the&nbsp;connectionftp_close($conn_id);\/\/&nbsp;output&nbsp;the&nbsp;buffervar_dump($buff);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(3) {\n  [0]=&gt;\n  string(65) &quot;drwxr-x---   3 vincent  vincent      4096 Jul 12 12:16 public_ftp&quot;\n  [1]=&gt;\n  string(66) &quot;drwxr-x---  15 vincent  vincent      4096 Nov  3 21:31 public_html&quot;\n  [2]=&gt;\n  string(73) &quot;lrwxrwxrwx   1 vincent  vincent        11 Jul 12 12:16 www -&gt; public_html&quot;\n}\n\n    \n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        recursive was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    ftp_nlist() - Returns a list of files in the given directory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-country-name-by-name.php","title":"geoip_country_name_by_name","description":"\n \n  geoip_country_name_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_country_name_by_name &mdash; Get the full country name\n\n \n \n  Description\n  \n   string geoip_country_name_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_country_name_by_name() function will return the\n   full country name corresponding to a hostname or an IP address.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose location is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the country name on success, or FALSE if the address cannot \n   be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_country_name_by_name() example\n    \n     This will print where the host example.com is located.\n    \n    \n\n&lt;?php$country&nbsp;=&nbsp;geoip_country_name_by_name('www.example.com');if&nbsp;($country)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;is&nbsp;located&nbsp;in:&nbsp;'&nbsp;.&nbsp;$country;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n This host is located in: United States\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    geoip_country_code_by_name() - Get the two letter country code\n    geoip_country_code3_by_name() - Get the three letter country code\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-avail.php","title":"geoip_db_avail","description":"\n \n  geoip_db_avail\n  (PECL geoip &gt;= 1.0.1)geoip_db_avail &mdash; Determine if GeoIP Database is available\n\n \n \n  Description\n  \n   bool geoip_db_avail\n    ( int $database\n   )\n\n\n  \n   The geoip_db_avail() function returns if the corresponding\n   GeoIP Database is available and can be opened on disk.\n  \n\n  \n   It does not indicate if the file is a proper database, only if it is readable.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION).\n      \n\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE is database exists, FALSE if not found, or NULL on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_db_avail() example\n    \n     This will output the current database version string.\n    \n    \n\n&lt;?phpif&nbsp;(geoip_db_avail(GEOIP_COUNTRY_EDITION))&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;geoip_database_info(GEOIP_COUNTRY_EDITION);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nGEO-106FREE 20080801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved\n\n    \n   \n  \n \n\n  \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-filename.php","title":"geoip_db_filename","description":"\n \n  geoip_db_filename\n  (PECL geoip &gt;= 1.0.1)geoip_db_filename &mdash; Returns the filename of the corresponding GeoIP Database\n\n \n \n  Description\n  \n   string geoip_db_filename\n    ( int $database\n   )\n\n\n  \n   The geoip_db_filename() function returns the filename of\n   the corresponding GeoIP Database.\n  \n\n  \n   It does not indicate if the file exists or not on disk, only where the library\n   is looking for the database.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION).\n      \n\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the filename of the corresponding database, or NULL on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_db_filename() example\n    \n     This will output the filename of the corresponding database.\n    \n    \n\n&lt;?phpprint&nbsp;geoip_db_filename(GEOIP_COUNTRY_EDITION);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\/usr\/share\/GeoIP\/GeoIP.dat\n\n    \n   \n  \n \n\n  \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-database-info.php","title":"geoip_database_info","description":"\n \n  geoip_database_info\n  (PECL geoip &gt;= 0.2.0)geoip_database_info &mdash; Get GeoIP Database information\n\n \n \n  Description\n  \n   string geoip_database_info\n    ([ int $database = GEOIP_COUNTRY_EDITION\n  ] )\n\n\n  \n   The geoip_database_info() function returns the corresponding\n   GeoIP Database version as it is defined inside the binary file.\n  \n  \n  \n   If this function is called without arguments, it returns the version\n   of the GeoIP Free Country Edition.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The database type as an integer. You can use the\n       various constants defined with\n       this extension (ie: GEOIP_*_EDITION).\n      \n\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the corresponding database version, or NULL on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_region_by_name() example\n    \n     This will output the current database version string.\n    \n    \n\n&lt;?phpprint&nbsp;geoip_database_info(GEOIP_COUNTRY_EDITION);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nGEO-106FREE 20060801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved\n\n    \n   \n  \n \n\n  \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-db-get-all-info.php","title":"geoip_db_get_all_info","description":"\n \n  geoip_db_get_all_info\n  (PECL geoip &gt;= 1.0.1)geoip_db_get_all_info &mdash; Returns detailed information about all GeoIP database types\n\n \n \n  Description\n  \n   array geoip_db_get_all_info\n    ( void\n   )\n\n\n  \n   The geoip_db_get_all_info() function will return \n   detailed information as a multi-dimensional array about all the \n   GeoIP database types.\n  \n  \n   This function is available even if no databases are installed. It\n   will simply list them as non-available.\n  \n  \n   The names of the different keys of the returning associative array are as follows:\n  \n  \n   \n    \n     \n      &quot;available&quot; -- Boolean, indicate if DB is available (see\n      geoip_db_avail())\n     \n    \n    \n     \n      &quot;description&quot; -- The database description\n     \n    \n    \n     \n      &quot;filename&quot; -- The database filename on disk (see\n      geoip_db_filename())\n     \n    \n   \n  \n\n \n\n \n  Return Values\n  \n   Returns the associative array.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_db_get_all_info() example\n    \n     This will print the array containing all the information.\n    \n    \n\n&lt;?php$infos&nbsp;=&nbsp;geoip_db_get_all_info();if&nbsp;(is_array($infos))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($infos);}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(11) {\n  [1]=&gt;\n  array(3) {\n    [&quot;available&quot;]=&gt;\n    bool(true)\n    [&quot;description&quot;]=&gt;\n    string(21) &quot;GeoIP Country Edition&quot;\n    [&quot;filename&quot;]=&gt;\n    string(32) &quot;\/usr\/share\/GeoIP\/GeoIP.dat&quot;\n  }\n\n[ ... ]\n\n  [11]=&gt;\n  array(3) {\n    [&quot;available&quot;]=&gt;\n    bool(false)\n    [&quot;description&quot;]=&gt;\n    string(25) &quot;GeoIP Domain Name Edition&quot;\n    [&quot;filename&quot;]=&gt;\n    string(38) &quot;\/usr\/share\/GeoIP\/GeoIPDomain.dat&quot;\n  }\n}\n\n    \n   \n  \n\n\n   \n    Example #2 A geoip_db_get_all_info() example\n    \n     You can use the various constants as keys to get only parts of the information.\n    \n    \n\n&lt;?php$infos&nbsp;=&nbsp;geoip_db_get_all_info();if&nbsp;($infos[GEOIP_COUNTRY_EDITION]['available'])&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$infos[GEOIP_COUNTRY_EDITION]['description'];}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nGeoIP Country Edition\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-id-by-name.php","title":"geoip_id_by_name","description":"\n \n  geoip_id_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_id_by_name &mdash; Get the Internet connection type\n\n \n \n  Description\n  \n   int geoip_id_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_id_by_name() function will return the Internet \n   connection type corresponding to a hostname or an IP address.\n  \n  \n   The return value is numeric and can be compared to the following constants:\n  \n  \n   \n    \n     \n      GEOIP_UNKNOWN_SPEED\n     \n    \n    \n     \n      GEOIP_DIALUP_SPEED\n     \n    \n    \n     \n      GEOIP_CABLEDSL_SPEED\n     \n    \n    \n     \n      GEOIP_CORPORATE_SPEED\n     \n    \n   \n  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose connection type is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the connection type.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_id_by_name() example\n    \n     This will output the connection type of the host example.com.\n    \n    \n\n&lt;?php$netspeed&nbsp;=&nbsp;geoip_id_by_name('www.example.com');echo&nbsp;'The&nbsp;connection&nbsp;type&nbsp;is&nbsp;';switch&nbsp;($netspeed)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;GEOIP_DIALUP_SPEED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'dial-up';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;GEOIP_CABLEDSL_SPEED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'cable&nbsp;or&nbsp;DSL';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;GEOIP_CORPORATE_SPEED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'corporate';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;GEOIP_UNKNOWN_SPEED:&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'unknown';}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThe connection type is corporate\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-isp-by-name.php","title":"geoip_isp_by_name","description":"\n \n  geoip_isp_by_name\n  (PECL geoip &gt;= 1.0.2)geoip_isp_by_name &mdash; Get the Internet Service Provider (ISP) name\n\n \n \n  Description\n  \n   string geoip_isp_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_isp_by_name() function will return the name of\n   the Internet Service Provider (ISP) that an IP is assigned to.\n  \n  \n   This function is currently only available to users who have bought a commercial\n   GeoIP ISP Edition. A warning will be issued if the proper database cannot be \n   located.\n  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the ISP name on success, or FALSE if the address\n   cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_isp_by_name() example\n    \n     This will print the ISP name of host example.com.\n    \n    \n\n&lt;?php$isp&nbsp;=&nbsp;geoip_isp_by_name('www.example.com');if&nbsp;($isp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;IP&nbsp;is&nbsp;from&nbsp;ISP:&nbsp;'&nbsp;.&nbsp;$isp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis host IP is from ISP: ICANN c\/o Internet Assigned Numbers Authority\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-org-by-name.php","title":"geoip_org_by_name","description":"\n \n  geoip_org_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_org_by_name &mdash; Get the organization name\n\n \n \n  Description\n  \n   string geoip_org_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_org_by_name() function will return the name of\n   the organization that an IP is assigned to.\n  \n  \n   This function is currently only available to users who have bought a commercial\n   GeoIP Organization, ISP or AS Edition. A warning will be issued if the proper \n   database cannot be located.\n  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the organization name on success, or FALSE if the address\n   cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_org_by_name() example\n    \n     This will print to whom the host example.com IP is allocated.\n    \n    \n\n&lt;?php$org&nbsp;=&nbsp;geoip_org_by_name('www.example.com');if&nbsp;($org)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'This&nbsp;host&nbsp;IP&nbsp;is&nbsp;allocated&nbsp;to:&nbsp;'&nbsp;.&nbsp;$org;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis host IP is allocated to: ICANN c\/o Internet Assigned Numbers Authority\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-region-by-name.php","title":"geoip_region_by_name","description":"\n \n  geoip_region_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_region_by_name &mdash; Get the country code and region\n\n \n \n  Description\n  \n   array geoip_region_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_region_by_name() function will return the country\n   and region corresponding to a hostname or an IP address.\n  \n  \n   This function is currently only available to users who have bought a commercial\n   GeoIP Region Edition. A warning will be issued if the proper database cannot be\n   located.\n  \n  \n   The names of the different keys of the returning associative array are as follows:\n  \n  \n   \n    \n     \n      &quot;country_code&quot; -- Two letter country code (see\n      geoip_country_code_by_name())\n     \n    \n    \n     \n      &quot;region&quot; -- The region code (ex: CA for California)\n     \n    \n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose region is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the associative array on success, or FALSE if the address \n   cannot be found in the database.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_region_by_name() example\n    \n     This will print the array containing the country code and region\n     of the host example.com.\n    \n    \n\n&lt;?php$region&nbsp;=&nbsp;geoip_region_by_name('www.example.com');if&nbsp;($region)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print_r($region);}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [country_code] =&gt; US\n    [region] =&gt; CA\n)\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-record-by-name.php","title":"geoip_record_by_name","description":"\n \n  geoip_record_by_name\n  (PECL geoip &gt;= 0.2.0)geoip_record_by_name &mdash; Returns the detailed City information found in the GeoIP Database\n\n \n \n  Description\n  \n   array geoip_record_by_name\n    ( string $hostname\n   )\n\n\n  \n   The geoip_record_by_name() function will return the\n   record information corresponding to a hostname or an IP address.\n  \n  \n   This function is available for both GeoLite City Edition and commercial GeoIP\n   City Edition. A warning will be issued if the proper database cannot be\n   located.\n  \n  \n   The names of the different keys of the returning associative array are as follows:\n  \n  \n   \n    \n     \n      &quot;continent_code&quot; -- Two letter continent code (as of version 1.0.4 with \n      libgeoip 1.4.3 or newer)\n     \n    \n    \n     \n      &quot;country_code&quot; -- Two letter country code (see\n      geoip_country_code_by_name())\n     \n    \n    \n     \n      &quot;country_code3&quot; -- Three letter country code (see\n      geoip_country_code3_by_name())\n     \n    \n    \n     \n      &quot;country_name&quot; -- The country name (see\n      geoip_country_name_by_name())\n     \n    \n    \n     \n      &quot;region&quot; -- The region code (ex: CA for California)\n     \n    \n    \n     \n      &quot;city&quot; -- The city.\n     \n    \n    \n     \n      &quot;postal_code&quot; -- The Postal Code, FSA or Zip Code.\n     \n    \n    \n     \n      &quot;latitude&quot; -- The Latitude as signed double.\n     \n    \n    \n     \n      &quot;longitude&quot; -- The Longitude as signed double.\n     \n    \n    \n     \n      &quot;dma_code&quot; -- Designated Market Area code (USA and Canada only)\n     \n    \n    \n     \n      &quot;area_code&quot; -- The PSTN area code (ex: 212)\n     \n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The hostname or IP address whose record is to be looked-up.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the associative array on success, or FALSE if the address \n   cannot be found in the database.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       1.0.4\n       \n        Adding the continent_code with GeoIP Library 1.4.3 or newer only\n       \n      \n\n      \n       1.0.3\n       \n        Adding country_code3 and country_name\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_record_by_name() example\n    \n     This will print the array containing the record of host example.com.\n    \n    \n\n&lt;?php$record&nbsp;=&nbsp;geoip_record_by_name('www.example.com');if&nbsp;($record)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print_r($record);}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [continent_code] =&gt; NA\n    [country_code] =&gt; US\n    [country_code3] =&gt; USA\n    [country_name] =&gt; United States\n    [region] =&gt; CA\n    [city] =&gt; Marina Del Rey\n    [postal_code] =&gt; \n    [latitude] =&gt; 33.9776992798\n    [longitude] =&gt; -118.435096741\n    [dma_code] =&gt; 803\n    [area_code] =&gt; 310\n)\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-region-name-by-code.php","title":"geoip_region_name_by_code","description":"\n \n  geoip_region_name_by_code\n  (PECL geoip &gt;= 1.0.4)geoip_region_name_by_code &mdash; Returns the region name for some country and region code combo\n\n \n \n  Description\n  \n   string geoip_region_name_by_code\n    ( string $country_code\n   , string $region_code\n   )\n\n\n  \n   The geoip_region_name_by_code() function will return the region\n   name corresponding to a country and region code combo.\n  \n  \n   In the United States, the region code corresponds to the two-letter abbreviation\n   of each state. In Canada, the region code corresponds to the two-letter province or\n   territory code as attributed by Canada Post.\n  \n  \n   For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions.\n   You can check &raquo;&nbsp;http:\/\/www.maxmind.com\/app\/fips10_4\n   for a detailed list of FIPS 10-4 codes.\n  \n  \n   This function is always available if using GeoIP Library version 1.4.1 or newer. The\n   data is taken directly from the GeoIP Library and not from any database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     country_code\n     \n\n      \n       The two-letter country code (see\n       geoip_country_code_by_name())\n      \n     \n\n    \n\n    \n\n     region_code\n     \n\n      \n       The two-letter (or digit) region code (see \n       geoip_region_by_name())\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the region name on success, or FALSE if the country and region code\n   combo cannot be found.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_region_name_by_code() example using region code for US\/Canada\n    \n     This will print the region name for country CA (Canada), region QC (Quebec).\n    \n    \n\n&lt;?php$region&nbsp;=&nbsp;geoip_region_name_by_code('CA',&nbsp;'QC');if&nbsp;($region)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Region&nbsp;name&nbsp;for&nbsp;CA\/QC&nbsp;is:&nbsp;'&nbsp;.&nbsp;$region;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nRegion name for CA\/QC is: Quebec\n\n    \n   \n   \n    Example #2 A geoip_region_name_by_code() example using FIPS codes\n    \n     This will print the region name for country JP (Japan), region 01.\n    \n    \n\n&lt;?php$region&nbsp;=&nbsp;geoip_region_name_by_code('JP',&nbsp;'01');if&nbsp;($region)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Region&nbsp;name&nbsp;for&nbsp;JP\/01&nbsp;is:&nbsp;'&nbsp;.&nbsp;$region;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nRegion name for JP\/01 is: Aichi\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.geoip-time-zone-by-country-and-region.php","title":"geoip_time_zone_by_country_and_region","description":"\n \n  geoip_time_zone_by_country_and_region\n  (PECL geoip &gt;= 1.0.4)geoip_time_zone_by_country_and_region &mdash; Returns the time zone for some country and region code combo\n\n \n \n  Description\n  \n   string geoip_time_zone_by_country_and_region\n    ( string $country_code\n   [, string $region_code\n  ] )\n\n\n  \n   The geoip_time_zone_by_country_and_region() function will return the\n   time zone corresponding to a country and region code combo.\n  \n  \n   In the United States, the region code corresponds to the two-letter abbreviation\n   of each state. In Canada, the region code corresponds to the two-letter province or\n   territory code as attributed by Canada Post.\n  \n  \n   For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions.\n   You can check &raquo;&nbsp;http:\/\/www.maxmind.com\/app\/fips10_4\n   for a detailed list of FIPS 10-4 codes.\n  \n  \n   This function is always available if using GeoIP Library version 1.4.1 or newer. The\n   data is taken directly from the GeoIP Library and not from any database.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     country_code\n     \n\n      \n       The two-letter country code (see\n       geoip_country_code_by_name())\n      \n     \n\n    \n\n    \n\n     region_code\n     \n\n      \n       The two-letter (or digit) region code (see \n       geoip_region_by_name())\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the time zone on success, or FALSE if the country and region code\n   combo cannot be found.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A geoip_time_zone_by_country_and_region() example using region code for US\/Canada\n    \n     This will print the time zone for country CA (Canada), region QC (Quebec).\n    \n    \n\n&lt;?php$timezone&nbsp;=&nbsp;geoip_time_zone_by_country_and_region('CA',&nbsp;'QC');if&nbsp;($timezone)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Time&nbsp;zone&nbsp;for&nbsp;CA\/QC&nbsp;is:&nbsp;'&nbsp;.&nbsp;$timezone;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nTime zone for CA\/QC is: America\/Montreal\n\n    \n   \n   \n    Example #2 A geoip_time_zone_by_country_and_region() example using FIPS codes\n    \n     This will print the time zone for country JP (Japan), region 01 (Aichi).\n    \n    \n\n&lt;?php$timezone&nbsp;=&nbsp;geoip_time_zone_by_country_and_region('JP',&nbsp;'01');if&nbsp;($timezone)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Time&nbsp;zone&nbsp;for&nbsp;JP\/01&nbsp;is:&nbsp;'&nbsp;.&nbsp;$timezone;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nTime zone for JP\/01 is: Asia\/Tokyo\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-frame-long-name.php","title":"id3_get_frame_long_name","description":"\n \n  id3_get_frame_long_name\n  (PECL id3 &gt;= 0.2)id3_get_frame_long_name &mdash; Get the long name of an ID3v2 frame\n\n \n \n  Description\n  \n   string id3_get_frame_long_name\n    ( string $frameId\n   )\n\n  \n   id3_get_frame_long_name() returns the long name for an\n   ID3v2 frame.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     frameId\n     \n\n      \n       An ID3v2 frame\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the frame long name or FALSE on errors.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_frame_long_name() example\n    \n\n&lt;?php$longName&nbsp;=&nbsp;id3_get_frame_long_name(\"TOLY\");echo&nbsp;$longName;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nOriginal lyricist(s)\/text writer(s)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_get_frame_short_name() - Get the short name of an ID3v2 frame\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-frame-short-name.php","title":"id3_get_frame_short_name","description":"\n \n  id3_get_frame_short_name\n  (PECL id3 &gt;= 0.2)id3_get_frame_short_name &mdash; Get the short name of an ID3v2 frame\n\n \n \n  Description\n  \n   string id3_get_frame_short_name\n    ( string $frameId\n   )\n\n  \n   id3_get_frame_short_name() returns the short name for an\n   ID3v2 frame.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     frameId\n     \n\n      \n       An ID3v2 frame\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the frame short name or FALSE on errors.\n  \n  \n   The values returned by id3_get_frame_short_name() are used in the\n   array returned by id3_get_tag().\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_frame_short_name() example\n    \n\n&lt;?php$shortName&nbsp;=&nbsp;id3_get_frame_short_name(\"TOLY\");echo&nbsp;$shortName;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\noriginalLyricist\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_get_frame_long_name() - Get the long name of an ID3v2 frame\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-id.php","title":"id3_get_genre_id","description":"\n \n  id3_get_genre_id\n  (PECL id3 &gt;= 0.1)id3_get_genre_id &mdash; Get the id for a genre\n\n \n \n  Description\n  \n   int id3_get_genre_id\n    ( string $genre\n   )\n\n  \n   id3_get_genre_id() returns the id for a genre.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     genre\n     \n\n      \n       Genre name as string.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The genre id or FALSE on errors.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_genre_id() example\n    \n\n&lt;?php$id&nbsp;=&nbsp;id3_get_genre_id(\"Alternative\");echo&nbsp;$id;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n20\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_get_genre_name() - Get the name for a genre id\n    id3_get_genre_list() - Get all possible genre values\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-list.php","title":"id3_get_genre_list","description":"\n \n  id3_get_genre_list\n  (PECL id3 &gt;= 0.1)id3_get_genre_list &mdash; Get all possible genre values\n\n \n \n  Description\n  \n   array id3_get_genre_list\n    ( void\n   )\n\n  \n   id3_get_genre_list() returns an array containing all\n   possible genres that may be stored in an ID3 tag. This list has been created\n   by Eric Kemp and later extended by WinAmp.\n  \n  \n   This function is useful to provide you users a list of genres from which\n   they may choose one. When updating the ID3 tag you will always have to\n   specify the genre as an integer ranging from 0 to 147.\n  \n \n\n \n  Return Values\n  \n   Returns an array containing all possible genres that may be stored in an\n   ID3 tag.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_genre_list() example\n    \n\n&lt;?php$genres&nbsp;=&nbsp;id3_get_genre_list();print_r($genres);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Blues\n    [1] =&gt; Classic Rock\n    [2] =&gt; Country\n    [3] =&gt; Dance\n    [4] =&gt; Disco\n    [5] =&gt; Funk\n    [6] =&gt; Grunge\n    [7] =&gt; Hip-Hop\n    [8] =&gt; Jazz\n    [9] =&gt; Metal\n    [10] =&gt; New Age\n    [11] =&gt; Oldies\n    [12] =&gt; Other\n    [13] =&gt; Pop\n    [14] =&gt; R&amp;B\n    [15] =&gt; Rap\n    [16] =&gt; Reggae\n    [17] =&gt; Rock\n    [18] =&gt; Techno\n    [19] =&gt; Industrial\n    [20] =&gt; Alternative\n    [21] =&gt; Ska\n    [22] =&gt; Death Metal\n    [23] =&gt; Pranks\n    [24] =&gt; Soundtrack\n    [25] =&gt; Euro-Techno\n    [26] =&gt; Ambient\n    [27] =&gt; Trip-Hop\n    [28] =&gt; Vocal\n    [29] =&gt; Jazz+Funk\n    [30] =&gt; Fusion\n    [31] =&gt; Trance\n    [32] =&gt; Classical\n    [33] =&gt; Instrumental\n    [34] =&gt; Acid\n    [35] =&gt; House\n    [36] =&gt; Game\n    [37] =&gt; Sound Clip\n    [38] =&gt; Gospel\n    [39] =&gt; Noise\n    [40] =&gt; Alternative Rock\n    [41] =&gt; Bass\n    [42] =&gt; Soul\n    [43] =&gt; Punk\n    [44] =&gt; Space\n    [45] =&gt; Meditative\n    [46] =&gt; Instrumental Pop\n    [47] =&gt; Instrumental Rock\n    [48] =&gt; Ethnic\n    [49] =&gt; Gothic\n    [50] =&gt; Darkwave\n    [51] =&gt; Techno-Industrial\n    [52] =&gt; Electronic\n    [53] =&gt; Pop-Folk\n    [54] =&gt; Eurodance\n    [55] =&gt; Dream\n    [56] =&gt; Southern Rock\n    [57] =&gt; Comedy\n    [58] =&gt; Cult\n    [59] =&gt; Gangsta\n    [60] =&gt; Top 40\n    [61] =&gt; Christian Rap\n    [62] =&gt; Pop\/Funk\n    [63] =&gt; Jungle\n    [64] =&gt; Native US\n    [65] =&gt; Cabaret\n    [66] =&gt; New Wave\n    [67] =&gt; Psychadelic\n    [68] =&gt; Rave\n    [69] =&gt; Showtunes\n    [70] =&gt; Trailer\n    [71] =&gt; Lo-Fi\n    [72] =&gt; Tribal\n    [73] =&gt; Acid Punk\n    [74] =&gt; Acid Jazz\n    [75] =&gt; Polka\n    [76] =&gt; Retro\n    [77] =&gt; Musical\n    [78] =&gt; Rock &amp; Roll\n    [79] =&gt; Hard Rock\n    [80] =&gt; Folk\n    [81] =&gt; Folk-Rock\n    [82] =&gt; National Folk\n    [83] =&gt; Swing\n    [84] =&gt; Fast Fusion\n    [85] =&gt; Bebob\n    [86] =&gt; Latin\n    [87] =&gt; Revival\n    [88] =&gt; Celtic\n    [89] =&gt; Bluegrass\n    [90] =&gt; Avantgarde\n    [91] =&gt; Gothic Rock\n    [92] =&gt; Progressive Rock\n    [93] =&gt; Psychedelic Rock\n    [94] =&gt; Symphonic Rock\n    [95] =&gt; Slow Rock\n    [96] =&gt; Big Band\n    [97] =&gt; Chorus\n    [98] =&gt; Easy Listening\n    [99] =&gt; Acoustic\n    [100] =&gt; Humour\n    [101] =&gt; Speech\n    [102] =&gt; Chanson\n    [103] =&gt; Opera\n    [104] =&gt; Chamber Music\n    [105] =&gt; Sonata\n    [106] =&gt; Symphony\n    [107] =&gt; Booty Bass\n    [108] =&gt; Primus\n    [109] =&gt; Porn Groove\n    [110] =&gt; Satire\n    [111] =&gt; Slow Jam\n    [112] =&gt; Club\n    [113] =&gt; Tango\n    [114] =&gt; Samba\n    [115] =&gt; Folklore\n    [116] =&gt; Ballad\n    [117] =&gt; Power Ballad\n    [118] =&gt; Rhytmic Soul\n    [119] =&gt; Freestyle\n    [120] =&gt; Duet\n    [121] =&gt; Punk Rock\n    [122] =&gt; Drum Solo\n    [123] =&gt; Acapella\n    [124] =&gt; Euro-House\n    [125] =&gt; Dance Hall\n    [126] =&gt; Goa\n    [127] =&gt; Drum &amp; Bass\n    [128] =&gt; Club-House\n    [129] =&gt; Hardcore\n    [130] =&gt; Terror\n    [131] =&gt; Indie\n    [132] =&gt; BritPop\n    [133] =&gt; Negerpunk\n    [134] =&gt; Polsk Punk\n    [135] =&gt; Beat\n    [136] =&gt; Christian Gangsta\n    [137] =&gt; Heavy Metal\n    [138] =&gt; Black Metal\n    [139] =&gt; Crossover\n    [140] =&gt; Contemporary C\n    [141] =&gt; Christian Rock\n    [142] =&gt; Merengue\n    [143] =&gt; Salsa\n    [144] =&gt; Thrash Metal\n    [145] =&gt; Anime\n    [146] =&gt; JPop\n    [147] =&gt; SynthPop\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_get_genre_name() - Get the name for a genre id\n    id3_get_genre_id() - Get the id for a genre\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-genre-name.php","title":"id3_get_genre_name","description":"\n \n  id3_get_genre_name\n  (PECL id3 &gt;= 0.1)id3_get_genre_name &mdash; Get the name for a genre id\n\n \n \n  Description\n  \n   string id3_get_genre_name\n    ( int $genre_id\n   )\n\n  \n   id3_get_genre_name() returns the name for a genre id.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     genre_id\n     \n\n      \n       An integer ranging from 0 to 147\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the name as a string.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_genre_name() example\n    \n\n&lt;?php$genre&nbsp;=&nbsp;id3_get_genre_name(20);echo&nbsp;$genre;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nAlternative\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_get_genre_list() - Get all possible genre values\n    id3_get_genre_id() - Get the id for a genre\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-version.php","title":"id3_get_version","description":"\n \n  id3_get_version\n  (PECL id3 &gt;= 0.1)id3_get_version &mdash; Get version of an ID3 tag\n\n \n \n  Description\n  \n   int id3_get_version\n    ( string $filename\n   )\n\n  \n   id3_get_version() retrieves the version(s) of the \n   ID3 tag(s) in the MP3 file.\n  \n  \n   If a file contains an ID3 v1.1 tag, it always contains\n   a 1.0 tag, as version 1.1 is just an extension of 1.0.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the MP3 file\n      \n      \n       Instead of a filename you may also pass a valid stream resource\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the version number of the ID3 tag of the file.\n   As a tag can contain ID3 v1.x and v2.x tags, the return value of this\n   function should be bitwise compared with the predefined constants \n   ID3_V1_0, ID3_V1_1 and  \n   ID3_V2.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_version() example\n    \n\n&lt;?php$version&nbsp;=&nbsp;id3_get_version(&nbsp;\"path\/to\/example.mp3\"&nbsp;);if&nbsp;($version&nbsp;&amp;&nbsp;ID3_V1_0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Contains&nbsp;a&nbsp;1.x&nbsp;tag\\n\";}if&nbsp;($version&nbsp;&amp;&nbsp;ID3_V1_1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Contains&nbsp;a&nbsp;1.1&nbsp;tag\\n\";}if&nbsp;($version&nbsp;&amp;&nbsp;ID3_V2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Contains&nbsp;a&nbsp;2.x&nbsp;tag\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nContains a 1.x tag\nContains a 1.1 tag\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_set_tag() - Update information stored in an ID3 tag\n    id3_get_tag() - Get all information stored in an ID3 tag\n    id3_remove_tag() - Remove an existing ID3 tag\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-get-tag.php","title":"id3_get_tag","description":"\n \n  id3_get_tag\n  (PECL id3 &gt;= 0.1)id3_get_tag &mdash; Get all information stored in an ID3 tag\n\n \n \n  Description\n  \n   array id3_get_tag\n    ( string $filename\n   [, int $version = ID3_BEST\n  ] )\n\n  \n   id3_get_tag() is used to get all information stored\n   in the id3 tag of the specified file.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the MP3 file\n      \n      \n       Instead of a filename you may also pass a valid stream resource\n      \n     \n\n    \n\n    \n\n     version\n     \n\n      \n       Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags\n      \n      \n       Since version 0.2 id3_get_tag() also supports ID3\n       tags of version 2.2, 2.3 and 2.4. To extract information from these\n       tags, pass one of the constants ID3_V2_2, ID3_V2_3 or ID3_V2_4 as the\n       second parameter.\n       ID3 v2.x tags can contain a lot more information about the MP3 file\n       than ID3 v1.x tags.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an associative array with various keys like: \n   title, artist, ..\n  \n  \n   The key genre will contain an integer between 0 and\n   147. You may use id3_get_genre_name() to convert it to\n   a human readable string.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_get_tag() example\n    \n\n&lt;?php$tag&nbsp;=&nbsp;id3_get_tag(&nbsp;\"path\/to\/example.mp3\"&nbsp;);print_r($tag);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [title] =&gt; DN-38416\n    [artist] =&gt; Re:\\Legion\n    [album] =&gt; Reflections\n    [year] =&gt; 2004\n    [genre] =&gt; 19\n)\n\n    \n   \n   \n    Example #2 id3_get_tag() example\n    \n\n&lt;?php$tag&nbsp;=&nbsp;id3_get_tag(&nbsp;\"path\/to\/example2.mp3\",&nbsp;ID3_V2_3&nbsp;);print_r($tag);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [copyright] =&gt; Dirty Mac\n    [originalArtist] =&gt; Dirty Mac\n    [composer] =&gt; Marcus G\u00f6tze\n    [artist] =&gt; Dirty Mac\n    [title] =&gt; Little Big Man\n    [album] =&gt; Demo-Tape\n    [track] =&gt; 5\/12\n    [genre] =&gt; (17)Rock\n    [year] =&gt; 2001\n)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_set_tag() - Update information stored in an ID3 tag\n    id3_remove_tag() - Remove an existing ID3 tag\n    id3_get_version() - Get version of an ID3 tag\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-remove-tag.php","title":"id3_remove_tag","description":"\n \n  id3_remove_tag\n  (PECL id3 &gt;= 0.1)id3_remove_tag &mdash; Remove an existing ID3 tag\n\n \n \n  Description\n  \n   bool id3_remove_tag\n    ( string $filename\n   [, int $version = ID3_V1_0\n  ] )\n\n  \n   id3_remove_tag() is used to remove the information stored\n   of an ID3 tag.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the MP3 file\n      \n      \n       Instead of a filename you may also pass a valid stream resource\n      \n     \n\n    \n\n    \n\n     version\n     \n\n      \n       Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_remove_tag() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;id3_remove_tag(&nbsp;\"path\/to\/example.mp3\",&nbsp;ID3_V1_0&nbsp;);if&nbsp;($result&nbsp;===&nbsp;true)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Tag&nbsp;succesfully&nbsp;removed\\n\";}?&gt;\n\n\n    \n\n    \n     If the file is writable and contained a 1.0 tag, this will output:\n    \n    \n\nTag succesfully removed\n\n    \n   \n  \n \n\n \n  Notes\n  Note: \n   \n    Currently id3_remove_tag() only supports version 1.0\n    and 1.1. If you choose to remove a 1.0 tag and the file contains a 1.1\n    tag, this tag will be removed, as v1.1 is only an extension of 1.0.\n   \n  \n \n\n \n  See Also\n  \n   \n    id3_set_tag() - Update information stored in an ID3 tag\n    id3_get_tag() - Get all information stored in an ID3 tag\n    id3_get_version() - Get version of an ID3 tag\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.id3-set-tag.php","title":"id3_set_tag","description":"\n \n  id3_set_tag\n  (PECL id3 &gt;= 0.1)id3_set_tag &mdash; Update information stored in an ID3 tag\n\n \n \n  Description\n  \n   bool id3_set_tag\n    ( string $filename\n   , array $tag\n   [, int $version = ID3_V1_0\n  ] )\n\n  \n   id3_set_tag() is used to change the information stored\n   of an ID3 tag. If no tag has been present, it will be added to the file.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the MP3 file\n      \n      \n       Instead of a filename you may also pass a valid stream resource\n      \n     \n\n    \n\n    \n\n     tag\n     \n\n      \n       An associative array of tag keys and values\n      \n      \n       The following keys may be used in the associative array:\n      \n      \n       \n        Keys in the associative array\n        \n         \n          \n           key\n           possible value\n           available in version\n          \n\n         \n\n         \n          \n           title\n           string with maximum of 30 characters\n           v1.0, v1.1\n          \n\n          \n           artist\n           string with maximum of 30 characters\n           v1.0, v1.1\n          \n\n          \n           album\n           string with maximum of 30 characters\n           v1.0, v1.1\n          \n\n          \n           year\n           4 digits\n           v1.0, v1.1\n          \n\n          \n           genre\n           integer value between 0 and 147\n           v1.0, v1.1\n          \n\n          \n           comment\n           string with maximum of 30 characters (28 in v1.1)\n           v1.0, v1.1\n          \n\n          \n           track\n           integer between 0 and 255\n           v1.1\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     version\n     \n\n      \n       Allows you to specify the version of the tag as MP3 files may contain\n       both, version 1.x and version 2.x tags\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 id3_set_tag() example\n    \n\n&lt;?php$data&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"title\"&nbsp;=&gt;&nbsp;\"Re:Start\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"artist\"&nbsp;=&gt;&nbsp;\"Re:\\Legion\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"comment\"&nbsp;=&gt;&nbsp;\"A&nbsp;nice&nbsp;track\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);$result&nbsp;=&nbsp;id3_set_tag(&nbsp;\"path\/to\/example.mp3\",&nbsp;$data,&nbsp;ID3_V1_0&nbsp;);if&nbsp;($result&nbsp;===&nbsp;true)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Tag&nbsp;succesfully&nbsp;updated\\n\";}?&gt;\n\n\n    \n\n    \n     If the file is writable, this will output:\n    \n    \n\nTag succesfully updated\n\n    \n   \n  \n \n\n \n  Notes\n  Note: \n   \n    Currently id3_set_tag() only supports version 1.0\n    and 1.1. \n   \n  \n \n\n \n  See Also\n  \n   \n    id3_remove_tag() - Remove an existing ID3 tag\n    id3_get_tag() - Get all information stored in an ID3 tag\n    id3_get_version() - Get version of an ID3 tag\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-copy.php","title":"hash_copy","description":"\n \n  hash_copy\n  (PHP 5 &gt;= 5.3.0)hash_copy &mdash; Copy hashing context\n\n \n \n  Description\n  \n   resource hash_copy\n    ( resource $context\n   )\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     context\n     \n\n      \n       Hashing context returned by hash_init().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a copy of Hashing Context resource.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 hash_copy() example\n    \n\n&lt;?php$context&nbsp;=&nbsp;hash_init(\"md5\");hash_update($context,&nbsp;\"data\");\/*&nbsp;copy&nbsp;context&nbsp;to&nbsp;be&nbsp;able&nbsp;to&nbsp;continue&nbsp;using&nbsp;it&nbsp;*\/$copy_context&nbsp;=&nbsp;hash_copy($context);echo&nbsp;hash_final($context),&nbsp;\"\\n\";hash_update($copy_context,&nbsp;\"data\");echo&nbsp;hash_final($copy_context),&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n8d777f385d3dfec8815d20f7496026dc\n511ae0b1c13f95e5f08f1a0dd3da3d93\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-algos.php","title":"hash_algos","description":"\n \n  hash_algos\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_algos &mdash; Return a list of registered hashing algorithms\n\n \n \n  Description\n  \n   array hash_algos\n    ( void\n   )\n\n \n\n\n \n  Return Values\n  \n   Returns a numerically indexed array containing the list of supported\n   hashing algorithms.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       Support for joaat, fnv132 and fnv164 was added\n      \n\n      \n       5.3.0\n       Support for md2, ripemd256, ripemd320, salsa10, salsa20, snefru256 and sha224 was added\n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 hash_algos() example\n    \n     As of PHP 5.3.0, hash_algos() will return the\n     following list of algorithm names.\n    \n    \n\n&lt;?phpprint_r(hash_algos());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; md2\n    [1] =&gt; md4\n    [2] =&gt; md5\n    [3] =&gt; sha1\n    [4] =&gt; sha224\n    [5] =&gt; sha256\n    [6] =&gt; sha384\n    [7] =&gt; sha512\n    [8] =&gt; ripemd128\n    [9] =&gt; ripemd160\n    [10] =&gt; ripemd256\n    [11] =&gt; ripemd320\n    [12] =&gt; whirlpool\n    [13] =&gt; tiger128,3\n    [14] =&gt; tiger160,3\n    [15] =&gt; tiger192,3\n    [16] =&gt; tiger128,4\n    [17] =&gt; tiger160,4\n    [18] =&gt; tiger192,4\n    [19] =&gt; snefru\n    [20] =&gt; snefru256\n    [21] =&gt; gost\n    [22] =&gt; adler32\n    [23] =&gt; crc32\n    [24] =&gt; crc32b\n    [25] =&gt; salsa10\n    [26] =&gt; salsa20\n    [27] =&gt; haval128,3\n    [28] =&gt; haval160,3\n    [29] =&gt; haval192,3\n    [30] =&gt; haval224,3\n    [31] =&gt; haval256,3\n    [32] =&gt; haval128,4\n    [33] =&gt; haval160,4\n    [34] =&gt; haval192,4\n    [35] =&gt; haval224,4\n    [36] =&gt; haval256,4\n    [37] =&gt; haval128,5\n    [38] =&gt; haval160,5\n    [39] =&gt; haval192,5\n    [40] =&gt; haval224,5\n    [41] =&gt; haval256,5\n)\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-file.php","title":"hash_file","description":"\n \n  hash_file\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_file &mdash; Generate a hash value using the contents of a given file\n\n \n \n  Description\n  \n   string hash_file\n    ( string $algo\n   , string $filename\n   [, bool $raw_output = false\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     algo\n     \n\n      \n       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       URL describing location of file to be hashed; Supports fopen wrappers.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using hash_file()\n    \n\n&lt;?php\/*&nbsp;Create&nbsp;a&nbsp;file&nbsp;to&nbsp;calculate&nbsp;hash&nbsp;of&nbsp;*\/file_put_contents('example.txt',&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');echo&nbsp;hash_file('md5',&nbsp;'example.txt');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n5c6ffbdd40d9556b73a21e63c3e0e904\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash() - Generate a hash value (message digest)\n    hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file\n    hash_update_file() - Pump data into an active hashing context from a file\n    md5_file() - Calculates the md5 hash of a given file\n    sha1_file() - Calculate the sha1 hash of a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-final.php","title":"hash_final","description":"\n \n  hash_final\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_final &mdash; Finalize an incremental hash and return resulting digest\n\n \n \n  Description\n  \n   string hash_final\n    ( resource $context\n   [, bool $raw_output = false\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     context\n     \n\n      \n       Hashing context returned by hash_init().\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 hash_final() example\n    \n\n&lt;?php$ctx&nbsp;=&nbsp;hash_init('sha1');hash_update($ctx,&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');echo&nbsp;hash_final($ctx);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nc0854fb9fb03c41cce3802cb0d220529e6eef94e\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash_init() - Initialize an incremental hashing context\n    hash_update() - Pump data into an active hashing context\n    hash_update_stream() - Pump data into an active hashing context from an open stream\n    hash_update_file() - Pump data into an active hashing context from a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-hmac-file.php","title":"hash_hmac_file","description":"\n \n  hash_hmac_file\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_hmac_file &mdash; Generate a keyed hash value using the HMAC method and the contents of a given file\n\n \n \n  Description\n  \n   string hash_hmac_file\n    ( string $algo\n   , string $filename\n   , string $key\n   [, bool $raw_output = false\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     algo\n     \n\n      \n       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       URL describing location of file to be hashed; Supports fopen wrappers.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       Shared secret key used for generating the HMAC variant of the message digest.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 hash_hmac_file() example\n    \n\n&lt;?php\/*&nbsp;Create&nbsp;a&nbsp;file&nbsp;to&nbsp;calculate&nbsp;hash&nbsp;of&nbsp;*\/file_put_contents('example.txt',&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');echo&nbsp;hash_hmac_file('md5',&nbsp;'example.txt',&nbsp;'secret');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n7eb2b5c37443418fc77c136dd20e859c\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash_algos() - Return a list of registered hashing algorithms\n    hash_hmac() - Generate a keyed hash value using the HMAC method\n    hash_file() - Generate a hash value using the contents of a given file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-init.php","title":"hash_init","description":"\n \n  hash_init\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_init &mdash; Initialize an incremental hashing context\n\n \n \n  Description\n  \n   resource hash_init\n    ( string $algo\n   [, int $options = 0\n   [, string $key = NULL\n  ]] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     algo\n     \n\n      \n       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Optional settings for hash generation, currently supports only one option:\n       HASH_HMAC.  When specified, the key\n       must be specified.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       When HASH_HMAC is specified for options,\n       a shared secret key to be used with the HMAC hashing method must be supplied in this\n       parameter.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a Hashing Context resource for use with hash_update(),\n   hash_update_stream(), hash_update_file(),\n   and hash_final().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Incremental hashing example\n    \n\n&lt;?php$ctx&nbsp;=&nbsp;hash_init('md5');hash_update($ctx,&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;');hash_update($ctx,&nbsp;'jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');echo&nbsp;hash_final($ctx);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n5c6ffbdd40d9556b73a21e63c3e0e904\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash() - Generate a hash value (message digest)\n    hash_file() - Generate a hash value using the contents of a given file\n    hash_hmac() - Generate a keyed hash value using the HMAC method\n    hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update-file.php","title":"hash_update_file","description":"\n \n  hash_update_file\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_update_file &mdash; Pump data into an active hashing context from a file\n\n \n \n  Description\n  \n   bool hash_update_file\n    ( resource $context\n   , string $filename\n   [, resource $context = NULL\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     context\n     \n\n      \n       Hashing context returned by hash_init().\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       URL describing location of file to be hashed; Supports fopen wrappers.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       Stream context as returned by stream_context_create().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    hash_init() - Initialize an incremental hashing context\n    hash_update() - Pump data into an active hashing context\n    hash_update_stream() - Pump data into an active hashing context from an open stream\n    hash_final() - Finalize an incremental hash and return resulting digest\n    hash() - Generate a hash value (message digest)\n    hash_file() - Generate a hash value using the contents of a given file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update.php","title":"hash_update","description":"\n \n  hash_update\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_update &mdash; Pump data into an active hashing context\n\n \n \n  Description\n  \n   bool hash_update\n    ( resource $context\n   , string $data\n   )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     context\n     \n\n      \n       Hashing context returned by hash_init().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       Message to be included in the hash digest.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE.\n  \n \n\n\n \n  See Also\n  \n   \n    hash_init() - Initialize an incremental hashing context\n    hash_update_file() - Pump data into an active hashing context from a file\n    hash_update_stream() - Pump data into an active hashing context from an open stream\n    hash_final() - Finalize an incremental hash and return resulting digest\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-update-stream.php","title":"hash_update_stream","description":"\n \n  hash_update_stream\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_update_stream &mdash; Pump data into an active hashing context from an open stream\n\n \n \n  Description\n  \n   int hash_update_stream\n    ( resource $context\n   , resource $handle\n   [, int $length = -1\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     context\n     \n\n      \n       Hashing context returned by hash_init().\n      \n     \n\n    \n\n    \n\n     handle\n     \n\n      \n       Open file handle as returned by any stream creation function.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       Maximum number of characters to copy from handle\n       into the hashing context.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Actual number of bytes added to the hashing context from handle.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 hash_update_stream() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;tmpfile();fwrite($fp,&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');rewind($fp);$ctx&nbsp;=&nbsp;hash_init('md5');hash_update_stream($ctx,&nbsp;$fp);echo&nbsp;hash_final($ctx);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n5c6ffbdd40d9556b73a21e63c3e0e904\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash_init() - Initialize an incremental hashing context\n    hash_update() - Pump data into an active hashing context\n    hash_final() - Finalize an incremental hash and return resulting digest\n    hash() - Generate a hash value (message digest)\n    hash_file() - Generate a hash value using the contents of a given file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash-hmac.php","title":"hash_hmac","description":"\n \n  hash_hmac\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash_hmac &mdash; Generate a keyed hash value using the HMAC method\n\n \n \n  Description\n  \n   string hash_hmac\n    ( string $algo\n   , string $data\n   , string $key\n   [, bool $raw_output = false\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     algo\n     \n\n      \n       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       Message to be hashed.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       Shared secret key used for generating the HMAC variant of the message digest.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 hash_hmac() example\n    \n\n&lt;?phpecho&nbsp;hash_hmac('ripemd160',&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.',&nbsp;'secret');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nb8e7ae12510bdfb1812e463a7f086122cf37e4f7\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash() - Generate a hash value (message digest)\n    hash_algos() - Return a list of registered hashing algorithms\n    hash_init() - Initialize an incremental hashing context\n    hash_hmac_file() - Generate a keyed hash value using the HMAC method and the contents of a given file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-dir-security.php","title":"iis_get_dir_security","description":"\n \n  iis_get_dir_security\n  (PECL iisfunc SVN)iis_get_dir_security &mdash; Gets Directory Security\n\n \n \n  Description\n  \n   int iis_get_dir_security\n    ( int $server_instance\n   , string $virtual_path\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-add-server.php","title":"iis_add_server","description":"\n \n  iis_add_server\n  (PECL iisfunc SVN)iis_add_server &mdash; Creates a new virtual web server\n\n \n \n  Description\n  \n   int iis_add_server\n    ( string $path\n   , string $comment\n   , string $server_ip\n   , int $port\n   , string $host_name\n   , int $rights\n   , int $start_server\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-script-map.php","title":"iis_get_script_map","description":"\n \n  iis_get_script_map\n  (PECL iisfunc SVN)iis_get_script_map &mdash; Gets script mapping on a virtual directory for a specific extension\n\n \n \n  Description\n  \n   string iis_get_script_map\n    ( int $server_instance\n   , string $virtual_path\n   , string $script_extension\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-by-comment.php","title":"iis_get_server_by_comment","description":"\n \n  iis_get_server_by_comment\n  (PECL iisfunc SVN)iis_get_server_by_comment &mdash; Return the instance number associated with the Comment\n\n \n \n  Description\n  \n   int iis_get_server_by_comment\n    ( string $comment\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hash.php","title":"hash","description":"\n \n  hash\n  (PHP 5 &gt;= 5.1.2, PECL hash &gt;= 1.1)hash &mdash; Generate a hash value (message digest)\n\n \n \n  Description\n  \n   string hash\n    ( string $algo\n   , string $data\n   [, bool $raw_output = false\n  ] )\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     algo\n     \n\n      \n       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       Message to be hashed.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When set to TRUE, outputs raw binary data.\n       FALSE outputs lowercase hexits.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the calculated message digest as lowercase hexits\n   unless raw_output is set to true in which case the raw\n   binary representation of the message digest is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A hash() example\n    \n\n&lt;?phpecho&nbsp;hash('ripemd160',&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nec457d0a974c48d5685a7efa03d137dc8bbde7e3\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    hash_file() - Generate a hash value using the contents of a given file\n    hash_hmac() - Generate a keyed hash value using the HMAC method\n    hash_init() - Initialize an incremental hashing context\n    md5() - Calculate the md5 hash of a string\n    sha1() - Calculate the sha1 hash of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-by-path.php","title":"iis_get_server_by_path","description":"\n \n  iis_get_server_by_path\n  (PECL iisfunc SVN)iis_get_server_by_path &mdash; Return the instance number associated with the Path\n\n \n \n  Description\n  \n   int iis_get_server_by_path\n    ( string $path\n   )\n\n  \n   Each virtual server in IIS is associated with an instance number.\n   iis_get_server_by_path() finds the instance number\n   from the actual path to the root directory.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       The path to the root directory\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the server instance number.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-server-rights.php","title":"iis_get_server_rights","description":"\n \n  iis_get_server_rights\n  (PECL iisfunc SVN)iis_get_server_rights &mdash; Gets server rights\n\n \n \n  Description\n  \n   int iis_get_server_rights\n    ( int $server_instance\n   , string $virtual_path\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-remove-server.php","title":"iis_remove_server","description":"\n \n  iis_remove_server\n  (PECL iisfunc SVN)iis_remove_server &mdash; Removes the virtual web server indicated by ServerInstance\n\n \n \n  Description\n  \n   int iis_remove_server\n    ( int $server_instance\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-app-settings.php","title":"iis_set_app_settings","description":"\n \n  iis_set_app_settings\n  (PECL iisfunc SVN)iis_set_app_settings &mdash; Creates application scope for a virtual directory\n\n \n \n  Description\n  \n   int iis_set_app_settings\n    ( int $server_instance\n   , string $virtual_path\n   , string $application_scope\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-get-service-state.php","title":"iis_get_service_state","description":"\n \n  iis_get_service_state\n  (PECL iisfunc SVN)iis_get_service_state &mdash; Returns the state for the service defined by ServiceId\n\n \n \n  Description\n  \n   int iis_get_service_state\n    ( string $service_id\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-dir-security.php","title":"iis_set_dir_security","description":"\n \n  iis_set_dir_security\n  (PECL iisfunc SVN)iis_set_dir_security &mdash; Sets Directory Security\n\n \n \n  Description\n  \n   int iis_set_dir_security\n    ( int $server_instance\n   , string $virtual_path\n   , int $directory_flags\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-script-map.php","title":"iis_set_script_map","description":"\n \n  iis_set_script_map\n  (PECL iisfunc SVN)iis_set_script_map &mdash; Sets script mapping on a virtual directory\n\n \n \n  Description\n  \n   int iis_set_script_map\n    ( int $server_instance\n   , string $virtual_path\n   , string $script_extension\n   , string $engine_path\n   , int $allow_scripting\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-start-server.php","title":"iis_start_server","description":"\n \n  iis_start_server\n  (PECL iisfunc SVN)iis_start_server &mdash; Starts the virtual web server\n\n \n \n  Description\n  \n   int iis_start_server\n    ( int $server_instance\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-start-service.php","title":"iis_start_service","description":"\n \n  iis_start_service\n  (PECL iisfunc SVN)iis_start_service &mdash; Starts the service defined by ServiceId\n\n \n \n  Description\n  \n   int iis_start_service\n    ( string $service_id\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-set-server-rights.php","title":"iis_set_server_rights","description":"\n \n  iis_set_server_rights\n  (PECL iisfunc SVN)iis_set_server_rights &mdash; Sets server rights\n\n \n \n  Description\n  \n   int iis_set_server_rights\n    ( int $server_instance\n   , string $virtual_path\n   , int $directory_flags\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-stop-service.php","title":"iis_stop_service","description":"\n \n  iis_stop_service\n  (PECL iisfunc SVN)iis_stop_service &mdash; Stops the service defined by ServiceId\n\n \n \n  Description\n  \n   int iis_stop_service\n    ( string $service_id\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-construct.php","title":"HttpDeflateStream::__construct","description":"\n \n  HttpDeflateStream::__construct\n  (PECL pecl_http &gt;= 0.21.0)HttpDeflateStream::__construct &mdash; HttpDeflateStream class constructor\n\n \n \n  Description\n  \n   public\n   void HttpDeflateStream::__construct\n    ([ int $flags = 0\n  ] )\n\n  \n   Creates a new HttpDeflateStream object instance.\n  \n  \n   See the deflate stream constants table for possible flags.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       initialization flags\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpDeflateStream::factory() - HttpDeflateStream class factory\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-factory.php","title":"HttpDeflateStream::factory","description":"\n \n  HttpDeflateStream::factory\n  (PECL pecl_http &gt;= 1.4.0)HttpDeflateStream::factory &mdash; HttpDeflateStream class factory\n\n \n \n  Description\n  \n   public\n   HttpDeflateStream\n    HttpDeflateStream::factory\n    ([ int $flags = 0\n   [, string $class_name = &quot;HttpDeflateStream&quot;\n  ]] )\n\n  \n   Creates a new HttpDeflateStream object instance.\n  \n  \n   See the deflate stream constants table for possible flags.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       initialization flags\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       name of a subclass of HttpDeflateStream\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpDeflateStream::__construct() - HttpDeflateStream class constructor\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-finish.php","title":"HttpDeflateStream::finish","description":"\n \n  HttpDeflateStream::finish\n  (PECL pecl_http &gt;= 0.21.0)HttpDeflateStream::finish &mdash; Finalize deflate stream\n\n \n \n  Description\n  \n   public\n   string HttpDeflateStream::finish\n    ([ string $data\n  ] )\n\n  \n   Finalizes the deflate stream. The deflate stream can be reused after finalizing.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to deflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the final part of deflated data.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-flush.php","title":"HttpDeflateStream::flush","description":"\n \n  HttpDeflateStream::flush\n  (PECL pecl_http &gt;= 0.21.0)HttpDeflateStream::flush &mdash; Flush deflate stream\n\n \n \n  Description\n  \n   public\n   string HttpDeflateStream::flush\n    ([ string $data\n  ] )\n\n  \n   Flushes the deflate stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       more data to deflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns some deflated data as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-construct.php","title":"HttpInflateStream::__construct","description":"\n \n  HttpInflateStream::__construct\n  (PECL pecl_http &gt;= 1.0.0)HttpInflateStream::__construct &mdash; HttpInflateStream class constructor\n\n \n \n  Description\n  \n   public\n   void HttpInflateStream::__construct\n    ([ int $flags = 0\n  ] )\n\n  \n   Creates a new HttpInflateStream object instance.\n  \n  \n   See the inflate constants table for possible flags.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       initialization flags\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpInflateStream::factory() - HttpInflateStream class factory\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpdeflatestream-update.php","title":"HttpDeflateStream::update","description":"\n \n  HttpDeflateStream::update\n  (PECL pecl_http &gt;= 0.21.0)HttpDeflateStream::update &mdash; Update deflate stream\n\n \n \n  Description\n  \n   public\n   string HttpDeflateStream::update\n    ( string $data\n   )\n\n  \n   Passes more data through the deflate stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to deflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns deflated data on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.iis-stop-server.php","title":"iis_stop_server","description":"\n \n  iis_stop_server\n  (PECL iisfunc SVN)iis_stop_server &mdash; Stops the virtual web server\n\n \n \n  Description\n  \n   int iis_stop_server\n    ( int $server_instance\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-factory.php","title":"HttpInflateStream::factory","description":"\n \n  HttpInflateStream::factory\n  (PECL pecl_http &gt;= 1.4.0)HttpInflateStream::factory &mdash; HttpInflateStream class factory\n\n \n \n  Description\n  \n   public\n   HttpInflateStream\n    HttpInflateStream::factory\n    ([ int $flags = 0\n   [, string $class_name = &quot;HttpInflateStream&quot;\n  ]] )\n\n  \n   Creates a new HttpInflateStream object instance.\n  \n  \n   See the inflate constants table for possible flags.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       initialization flags\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       name of a subclass of HttpInflateStream\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpInflateStream::__construct() - HttpInflateStream class constructor\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-finish.php","title":"HttpInflateStream::finish","description":"\n \n  HttpInflateStream::finish\n  (PECL pecl_http &gt;= 0.21.0)HttpInflateStream::finish &mdash; Finalize inflate stream\n\n \n \n  Description\n  \n   public\n   string HttpInflateStream::finish\n    ([ string $data\n  ] )\n\n  \n   Finalizes the inflate stream. The inflate stream can be reused after finalizing.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to inflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the final part of inflated data.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-flush.php","title":"HttpInflateStream::flush","description":"\n \n  HttpInflateStream::flush\n  (PECL pecl_http &gt;= 0.21.0)HttpInflateStream::flush &mdash; Flush inflate stream\n\n \n \n  Description\n  \n   public\n   string HttpInflateStream::flush\n    ([ string $data\n  ] )\n\n  \n   Flushes the inflate stream.\n  \n  Note: \n   \n    Flushing usually has no effect on inflate streams.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       more data to inflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns some inflated data as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpinflatestream-update.php","title":"HttpInflateStream::update","description":"\n \n  HttpInflateStream::update\n  (PECL pecl_http &gt;= 0.21.0)HttpInflateStream::update &mdash; Update inflate stream\n\n \n \n  Description\n  \n   public\n   string HttpInflateStream::update\n    ( string $data\n   )\n\n  \n   Passes more data through the inflate stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to inflate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns inflated data on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-addheaders.php","title":"HttpMessage::addHeaders","description":"\n \n  HttpMessage::addHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::addHeaders &mdash; Add headers\n\n \n \n  Description\n  \n   public\n   void HttpMessage::addHeaders\n    ( array $headers\n   [, bool $append = false\n  ] )\n\n\n  \n   Add headers. If append is true, headers with the same name will be separated, else overwritten.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     headers\n     \n\n      \n       associative array containing the additional HTTP headers to add to the messages existing headers\n      \n     \n\n    \n\n    \n\n     append\n     \n\n      \n       if true, and a header with the same name of one to add exists already, this respective\n       header will be converted to an array containing both header values, otherwise\n       it will be overwritten with the new header value\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-construct.php","title":"HttpMessage::__construct","description":"\n \n  HttpMessage::__construct\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::__construct &mdash; HttpMessage constructor\n\n \n \n  Description\n  \n   public\n   void HttpMessage::__construct\n    ([ string $message\n  ] )\n\n\n  \n   Instantiate a new HttpMessage object.\n  \n  \n   The constructed object will actually represent the last message of the passed string. If there were\n   prior messages, those can be accessed by HttpMessage::getParentMessage().\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     message\n     \n\n      \n       a single or several consecutive HTTP messages\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpMalformedHeaderException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-detach.php","title":"HttpMessage::detach","description":"\n \n  HttpMessage::detach\n  (PECL pecl_http &gt;= 0.22.0)HttpMessage::detach &mdash; Detach HttpMessage\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpMessage::detach\n    ( void\n   )\n\n\n  \n   Returns a clone of an HttpMessage object detached from any parent messages.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns detached HttpMessage object copy.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-factory.php","title":"HttpMessage::factory","description":"\n \n  HttpMessage::factory\n  (PECL pecl_http &gt;= 1.4.0)HttpMessage::factory &mdash; Create HttpMessage from string\n\n \n \n  Description\n  \n   static public\n   HttpMessage HttpMessage::factory\n    ([ string $raw_message\n   [, string $class_name = &quot;HttpMessage&quot;\n  ]] )\n\n\n  \n   Create an HttpMessage object from a string.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     raw_message\n     \n\n      \n       a single or several consecutive HTTP messages\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       a class extending HttpMessage\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an HttpMessage object on success or NULL on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpMalformedHeadersException.\n  \n \n\n\n\n \n\n\n \n\n \n  See Also\n  \n   \n    HttpMessage::fromEnv() - Create HttpMessage from environment.\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-fromenv.php","title":"HttpMessage::fromEnv","description":"\n \n  HttpMessage::fromEnv\n  (PECL pecl_http &gt;= 1.5.0)HttpMessage::fromEnv &mdash; Create HttpMessage from environment\n\n \n \n  Description\n  \n   static public\n   HttpMessage HttpMessage::fromEnv\n    ( int $message_type\n   [, string $class_name = &quot;HttpMessage&quot;\n  ] )\n\n\n  \n   Create an HttpMessage object from script environment.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     message_type\n     \n\n      \n       The message type. See HttpMessage type constants.\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       a class extending HttpMessage\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an HttpMessage object on success or NULL on failure.\n  \n \n\n\n \n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    HttpMessage::factory() - Create HttpMessage from string.\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-fromstring.php","title":"HttpMessage::fromString","description":"\n \n  HttpMessage::fromString\n  (PECL pecl_http 0.10.0-1.3.3)HttpMessage::fromString &mdash; Create HttpMessage from string\n\n \n \n  Description\n  \n   static public\n   HttpMessage HttpMessage::fromString\n    ([ string $raw_message\n   [, string $class_name = &quot;HttpMessage&quot;\n  ]] )\n\n\n  \n   Create an HttpMessage object from a string.\n  \n  This function alias is\ndeprecated and only exists for backwards compatibility reasons. The use of this\nfunction is not recommended, as it may be removed from PHP in the future.\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     raw_message\n     \n\n      \n       a single or several consecutive HTTP messages\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       a class extending HttpMessage\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an HttpMessage object on success or NULL on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpMalformedHeadersException.\n  \n \n\n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    HttpMessage::factory() - Create HttpMessage from string.\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getbody.php","title":"HttpMessage::getBody","description":"\n \n  HttpMessage::getBody\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getBody &mdash; Get message body\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getBody\n    ( void\n   )\n\n\n  \n   Get the body of the parsed HttpMessage.\n  \n\n \n\n \n  Return Values\n  \n   Returns the message body as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getheaders.php","title":"HttpMessage::getHeaders","description":"\n \n  HttpMessage::getHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getHeaders &mdash; Get message headers\n\n \n \n  Description\n  \n   public\n   array HttpMessage::getHeaders\n    ( void\n   )\n\n\n  \n   Get message headers.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array containing the messages HTTP headers.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-gethttpversion.php","title":"HttpMessage::getHttpVersion","description":"\n \n  HttpMessage::getHttpVersion\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getHttpVersion &mdash; Get HTTP version\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getHttpVersion\n    ( void\n   )\n\n\n  \n   Get the HTTP Protocol Version of the Message.\n  \n\n \n\n \n  Return Values\n  \n   Returns the HTTP protocol version as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getheader.php","title":"HttpMessage::getHeader","description":"\n \n  HttpMessage::getHeader\n  (PECL pecl_http &gt;= 1.1.0)HttpMessage::getHeader &mdash; Get header\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getHeader\n    ( string $header\n   )\n\n\n  \n   Get message header.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     header\n     \n\n      \n       header name\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the header value on success or NULL if the header does not exist.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getparentmessage.php","title":"HttpMessage::getParentMessage","description":"\n \n  HttpMessage::getParentMessage\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getParentMessage &mdash; Get parent message\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpMessage::getParentMessage\n    ( void\n   )\n\n\n  \n   Get parent Message.\n  \n\n \n\n \n  Return Values\n  \n   Returns the parent HttpMessage object.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getrequestmethod.php","title":"HttpMessage::getRequestMethod","description":"\n \n  HttpMessage::getRequestMethod\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getRequestMethod &mdash; Get request method\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getRequestMethod\n    ( void\n   )\n\n\n  \n   Get the Request Method of the Message.\n  \n\n \n\n \n  Return Values\n  \n   Returns the request method name on success, or FALSE if the message is\n   not of type HttpMessage::TYPE_REQUEST.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getrequesturl.php","title":"HttpMessage::getRequestUrl","description":"\n \n  HttpMessage::getRequestUrl\n  (PECL pecl_http &gt;= 0.21.0)HttpMessage::getRequestUrl &mdash; Get request URL\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getRequestUrl\n    ( void\n   )\n\n\n  \n   Get the Request URL of the Message.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the request URL as string on success, or FALSE if the message\n   is not of type HttpMessage::TYPE_REQUEST.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getresponsecode.php","title":"HttpMessage::getResponseCode","description":"\n \n  HttpMessage::getResponseCode\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getResponseCode &mdash; Get response code\n\n \n \n  Description\n  \n   public\n   int HttpMessage::getResponseCode\n    ( void\n   )\n\n\n  \n   Get the Response Code of the Message.\n  \n\n \n\n \n  Return Values\n  \n   Returns the HTTP response code if the message is of type HttpMessage::TYPE_RESPONSE, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-getresponsestatus.php","title":"HttpMessage::getResponseStatus","description":"\n \n  HttpMessage::getResponseStatus\n  (PECL pecl_http &gt;= 0.23.0)HttpMessage::getResponseStatus &mdash; Get response status\n\n \n \n  Description\n  \n   public\n   string HttpMessage::getResponseStatus\n    ( void\n   )\n\n\n  \n   Get the Response Status of the message (i.e. the string following the response code).\n  \n\n \n\n \n  Return Values\n  \n   Returns the HTTP response status string if the message is of type \n   HttpMessage::TYPE_RESPONSE, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-guesscontenttype.php","title":"HttpMessage::guessContentType","description":"\n \n  HttpMessage::guessContentType\n  (PECL pecl_http &gt;= 1.0.0)HttpMessage::guessContentType &mdash; Guess content type\n\n \n \n  Description\n  \n   public\n   string HttpMessage::guessContentType\n    ( string $magic_file\n   [, int $magic_mode = MAGIC_MIME\n  ] )\n\n\n  \n   Attempts to guess the content type of the message body through libmagic.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     magic_file\n     \n\n      \n       the magic.mime database to use\n      \n     \n\n    \n\n    \n\n     magic_mode\n     \n\n      \n       flags for libmagic\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the guessed content type on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException, HttpInvalidParamException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-gettype.php","title":"HttpMessage::getType","description":"\n \n  HttpMessage::getType\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::getType &mdash; Get message type\n\n \n \n  Description\n  \n   public\n   int HttpMessage::getType\n    ( void\n   )\n\n\n  \n   Get Message Type.\n   Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.\n  \n\n \n\n \n  Return Values\n  \n   Returns the HttpMessage::TYPE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-prepend.php","title":"HttpMessage::prepend","description":"\n \n  HttpMessage::prepend\n  (PECL pecl_http &gt;= 0.22.0)HttpMessage::prepend &mdash; Prepend message(s)\n\n \n \n  Description\n  \n   public\n   void HttpMessage::prepend\n    ( HttpMessage $message\n   [, bool $top = true\n  ] )\n\n\n  \n   Prepends message(s) to the HTTP message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     message\n     \n\n      \n       HttpMessage object to prepend\n      \n     \n\n    \n\n    \n\n     top\n     \n\n      \n       whether to prepend to the top most or right this message\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpInvalidParamException if the message is located within the same message chain.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-reverse.php","title":"HttpMessage::reverse","description":"\n \n  HttpMessage::reverse\n  (PECL pecl_http &gt;= 0.23.0)HttpMessage::reverse &mdash; Reverse message chain\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpMessage::reverse\n    ( void\n   )\n\n\n  \n   Reorders the message chain in reverse order.\n  \n\n \n\n \n  Return Values\n  \n   Returns the most parent HttpMessage object.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setheaders.php","title":"HttpMessage::setHeaders","description":"\n \n  HttpMessage::setHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::setHeaders &mdash; Set headers\n\n \n \n  Description\n  \n   public\n   void HttpMessage::setHeaders\n    ( array $headers\n   )\n\n\n  \n   Sets new headers.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     headers\n     \n\n      \n       associative array containing the new HTTP headers, which will replace all previous HTTP headers of the message\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-send.php","title":"HttpMessage::send","description":"\n \n  HttpMessage::send\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::send &mdash; Send message\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::send\n    ( void\n   )\n\n\n  \n   Send the Message according to its type as Response or Request.\n  \n  \n   This provides limited functionality compared to HttpRequest and HttpResponse.\n  \n\n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setbody.php","title":"HttpMessage::setBody","description":"\n \n  HttpMessage::setBody\n  (PECL pecl_http &gt;= 0.14.0)HttpMessage::setBody &mdash; Set message body\n\n \n \n  Description\n  \n   public\n   void HttpMessage::setBody\n    ( string $body\n   )\n\n\n  \n   Set the body of the HttpMessage.\n  \n  Note: \n   \n    Don&#039;t forget to update any headers accordingly.\n   \n   \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     body\n     \n\n      \n       the new body of the message\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setrequestmethod.php","title":"HttpMessage::setRequestMethod","description":"\n \n  HttpMessage::setRequestMethod\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::setRequestMethod &mdash; Set request method\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::setRequestMethod\n    ( string $method\n   )\n\n\n  \n   Set the Request Method of the HTTP Message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       the request method name\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the message is not of type\n   HttpMessage::TYPE_REQUEST or an invalid request method was supplied.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-sethttpversion.php","title":"HttpMessage::setHttpVersion","description":"\n \n  HttpMessage::setHttpVersion\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::setHttpVersion &mdash; Set HTTP version\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::setHttpVersion\n    ( string $version\n   )\n\n\n  \n   Set the HTTP Protocol version of the Message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     version\n     \n\n      \n       the HTTP protocol version\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if supplied version is out of range (1.0\/1.1).\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setrequesturl.php","title":"HttpMessage::setRequestUrl","description":"\n \n  HttpMessage::setRequestUrl\n  (PECL pecl_http &gt;= 0.21.0)HttpMessage::setRequestUrl &mdash; Set request URL\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::setRequestUrl\n    ( string $url\n   )\n\n\n  \n   Set the Request URL of the HTTP Message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       the request URL\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the message is not of type\n   HttpMessage::TYPE_REQUEST or supplied URL was empty.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setresponsecode.php","title":"HttpMessage::setResponseCode","description":"\n \n  HttpMessage::setResponseCode\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::setResponseCode &mdash; Set response code\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::setResponseCode\n    ( int $code\n   )\n\n\n  \n   Set the response code of an HTTP Response Message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     code\n     \n\n      \n       HTTP response code\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the message is not of type\n   HttpMessage::TYPE_RESPONSE or the response code is out of range (100-510).\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-setresponsestatus.php","title":"HttpMessage::setResponseStatus","description":"\n \n  HttpMessage::setResponseStatus\n  (PECL pecl_http &gt;= 0.23.0)HttpMessage::setResponseStatus &mdash; Set response status\n\n \n \n  Description\n  \n   public\n   bool HttpMessage::setResponseStatus\n    ( string $status\n   )\n\n\n  \n   Set the Response Status of the HTTP message (i.e. the string following the response code).\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      \n       the response status text\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE if the message is not of type\n   HttpMessage::TYPE_RESPONSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-settype.php","title":"HttpMessage::setType","description":"\n \n  HttpMessage::setType\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::setType &mdash; Set message type\n\n \n \n  Description\n  \n   public\n   void HttpMessage::setType\n    ( int $type\n   )\n\n\n  \n   Set Message Type.\n   Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or HTTP_MSG_RESPONSE.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     type\n     \n\n      \n       the HttpMessage::TYPE\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-tomessagetypeobject.php","title":"HttpMessage::toMessageTypeObject","description":"\n \n  HttpMessage::toMessageTypeObject\n  (PECL pecl_http &gt;= 0.22.0)HttpMessage::toMessageTypeObject &mdash; Create HTTP object regarding message type\n\n \n \n  Description\n  \n   public\n   HttpRequest|HttpResponse HttpMessage::toMessageTypeObject\n    ( void\n   )\n\n\n  \n   Creates an object regarding to the type of the message.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns either an HttpRequest or HttpResponse object on success, or NULL on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException, HttpMessageTypeException, HttpHeaderException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpmessage-tostring.php","title":"HttpMessage::toString","description":"\n \n  HttpMessage::toString\n  (PECL pecl_http &gt;= 0.10.0)HttpMessage::toString &mdash; Get string representation\n\n \n \n  Description\n  \n   public\n   string HttpMessage::toString\n    ([ bool $include_parent = false\n  ] )\n\n\n  \n   Get the string representation of the Message.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     include_parent\n     \n\n      \n       specifies whether the returned string should also contain any parent messages\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the message as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-construct.php","title":"HttpQueryString::__construct","description":"\n \n  HttpQueryString::__construct\n  (PECL pecl_http &gt;= 0.22.0)HttpQueryString::__construct &mdash; HttpQueryString constructor\n\n \n \n  Description\n  \n   final public\n   void HttpQueryString::__construct\n    ([ bool $global = true\n   [, mixed $add\n  ]] )\n\n\n  \n   Creates a new HttpQueryString object instance.\n  \n  \n   Operates on and modifies $_GET and\n   $_SERVER['QUERY_STRING'] if global is TRUE.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     global\n     \n\n      \n       whether to operate on $_GET and\n       $_SERVER['QUERY_STRING']\n      \n     \n\n    \n\n    \n\n     add\n     \n\n      \n       additional\/initial query string parameters\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-get.php","title":"HttpQueryString::get","description":"\n \n  HttpQueryString::get\n  (PECL pecl_http &gt;= 0.22.0)HttpQueryString::get &mdash; Get (part of) query string\n\n \n \n  Description\n  \n   public\n   mixed HttpQueryString::get\n    ([ string $key\n   [, mixed $type = 0\n   [, mixed $defval = NULL\n   [, bool $delete = false\n  ]]]] )\n\n\n  \n   Get (part of) the query string.\n  \n  \n   The type parameter is either one of the HttpQueryString::TYPE_* constants or a type abbreviation like\n   &quot;b&quot; for bool, &quot;i&quot; for int, &quot;f&quot; for float, &quot;s&quot; for string, &quot;a&quot; \n   for array and &quot;o&quot; for a stdClass object.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       key of the query string param to retrieve\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       which variable type to enforce\n      \n     \n\n    \n\n    \n\n     defval\n     \n\n      \n       default value if key does not exist\n      \n     \n\n    \n\n    \n\n     delete\n     \n\n      \n       whether to remove the key\/value pair from the query string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the value of the query string param or the whole query string if no key was specified on success or defval if key does not exist.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-set.php","title":"HttpQueryString::set","description":"\n \n  HttpQueryString::set\n  (PECL pecl_http &gt;= 0.22.0)HttpQueryString::set &mdash; Set query string params\n\n \n \n  Description\n  \n   public\n   string HttpQueryString::set\n    ( mixed $params\n   )\n\n\n  \n   Set query string entry\/entries. NULL values will unset the variable.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     params\n     \n\n      \n       query string params to add\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the current query string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-mod.php","title":"HttpQueryString::mod","description":"\n \n  HttpQueryString::mod\n  (PECL pecl_http &gt;= 1.1.0)HttpQueryString::mod &mdash; Modifiy query string copy\n\n \n \n  Description\n  \n   public\n   HttpQueryString HttpQueryString::mod\n    ( mixed $params\n   )\n\n\n  \n   Copies the query string object and sets provided params at the clone.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     params\n     \n\n      \n       query string params to add\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a new HttpQueryString object\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-singleton.php","title":"HttpQueryString::singleton","description":"\n \n  HttpQueryString::singleton\n  (PECL pecl_http &gt;= 0.25.0)HttpQueryString::singleton &mdash; HttpQueryString singleton\n\n \n \n  Description\n  \n   static public\n   HttpQueryString HttpQueryString::singleton\n    ([ bool $global = true\n  ] )\n\n\n  \n   Get a single instance (differentiates between the global setting).\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     global\n     \n\n      \n       whether to operate on $_GET and\n       $_SERVER['QUERY_STRING']\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns always the same HttpQueryString instance regarding the global setting.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-toarray.php","title":"HttpQueryString::toArray","description":"\n \n  HttpQueryString::toArray\n  (PECL pecl_http &gt;= 0.22.0)HttpQueryString::toArray &mdash; Get query string as array\n\n \n \n  Description\n  \n   public\n   array HttpQueryString::toArray\n    ( void\n   )\n\n\n  \n   Get the query string represented as associative array.\n  \n\n \n\n \n  Return Values\n  \n   Returns the array representation of the query string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-tostring.php","title":"HttpQueryString::toString","description":"\n \n  HttpQueryString::toString\n  (PECL pecl_http &gt;= 0.22.0)HttpQueryString::toString &mdash; Get query string\n\n \n \n  Description\n  \n   public\n   string HttpQueryString::toString\n    ( void\n   )\n\n\n  \n   Get the query string.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the string representation of the query string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpquerystring-xlate.php","title":"HttpQueryString::xlate","description":"\n \n  HttpQueryString::xlate\n  (PECL pecl_http &gt;= 0.25.0)HttpQueryString::xlate &mdash; Change query strings charset\n\n \n \n  Description\n  \n   public\n   bool HttpQueryString::xlate\n    ( string $ie\n   , string $oe\n   )\n\n\n  \n   Converts the query string from the source encoding ie to the target encoding oe.\n  \n  Warning\n   \n    Don&#039;t use any character set that can contain NUL bytes like UTF-16.\n   \n  \n  Note: \n   \n    This method requires ext\/iconv to be enabled and loaded.\n   \n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     ie\n     \n\n      \n       input encoding\n      \n     \n\n    \n\n    \n\n     oe\n     \n\n      \n       output encoding\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addcookies.php","title":"HttpRequest::addCookies","description":"\n \n  HttpRequest::addCookies\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::addCookies &mdash; Add cookies\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addCookies\n    ( array $cookies\n   )\n\n\n  \n   Add custom cookies.\n  \n  Note: The request option encodecookies controls\n   whether the cookie values should be urlencode()d.\n  Note: Affects any request method.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     cookies\n     \n\n      \n       an associative array containing any cookie name\/value pairs to add\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A HttpRequest::addCookies() example\n    \n\n&lt;?php$r&nbsp;=&nbsp;new&nbsp;HttpRequest;$r-&gt;addCookies(&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"cookie_name\"&nbsp;=&gt;&nbsp;\"cookie&nbsp;value\",&nbsp;&nbsp;&nbsp;&nbsp;));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    HttpRequest::setCookies() - Set cookies\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addpostfields.php","title":"HttpRequest::addPostFields","description":"\n \n  HttpRequest::addPostFields\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::addPostFields &mdash; Add post fields\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addPostFields\n    ( array $post_data\n   )\n\n\n  \n   Adds POST data entries, leaving previously set unchanged, unless a\n   post entry with the same name already exists.\n  \n  \n   Affects only POST and custom requests.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     post_data\n     \n\n      \n       an associative array as parameter containing the post fields\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addputdata.php","title":"HttpRequest::addPutData","description":"\n \n  HttpRequest::addPutData\n  (PECL pecl_http &gt;= 0.25.0)HttpRequest::addPutData &mdash; Add put data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addPutData\n    ( string $put_data\n   )\n\n\n  \n   Add PUT data, leaving previously set PUT data unchanged.\n  \n  \n   Affects only PUT requests.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     put_data\n     \n\n      \n       the data to concatenate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addheaders.php","title":"HttpRequest::addHeaders","description":"\n \n  HttpRequest::addHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::addHeaders &mdash; Add headers\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addHeaders\n    ( array $headers\n   )\n\n\n  \n   Add request header name\/value pairs.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     headers\n     \n\n      \n       an associative array as parameter containing additional header name\/value pairs\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addpostfile.php","title":"HttpRequest::addPostFile","description":"\n \n  HttpRequest::addPostFile\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::addPostFile &mdash; Add post file\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addPostFile\n    ( string $name\n   , string $file\n   [, string $content_type = &quot;application\/x-octetstream&quot;\n  ] )\n\n\n  \n   Add a file to the POST request, leaving previously set files unchanged.\n  \n  \n   Affects only POST and custom requests. Cannot be used with raw post data.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       the form element name\n      \n     \n\n    \n\n    \n\n     file\n     \n\n      \n       the path to the file\n      \n     \n\n    \n\n    \n\n     content_type\n     \n\n      \n       the content type of the file\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the content type seems not to contain a \n   primary and a secondary content type part.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addquerydata.php","title":"HttpRequest::addQueryData","description":"\n \n  HttpRequest::addQueryData\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::addQueryData &mdash; Add query data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addQueryData\n    ( array $query_params\n   )\n\n\n  \n   Add parameters to the query parameter list, leaving previously set unchanged.\n  \n  \n   Affects any request type.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     query_params\n     \n\n      \n       an associative array as parameter containing the query fields to add\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addssloptions.php","title":"HttpRequest::addSslOptions","description":"\n \n  HttpRequest::addSslOptions\n  (PECL pecl_http &gt;= 0.12.0)HttpRequest::addSslOptions &mdash; Add ssl options\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addSslOptions\n    ( array $options\n   )\n\n\n  \n   Set additional SSL options.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       an associative array as parameter containing additional SSL specific options\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-clearhistory.php","title":"HttpRequest::clearHistory","description":"\n \n  HttpRequest::clearHistory\n  (PECL pecl_http &gt;= 0.15.0)HttpRequest::clearHistory &mdash; Clear history\n\n \n \n  Description\n  \n   public\n   void HttpRequest::clearHistory\n    ( void\n   )\n\n\n  \n   Clears all history messages.\n  \n  Note: \n   \n    History is only logged if recordHistory was enabled.\n   \n  \n\n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-addrawpostdata.php","title":"HttpRequest::addRawPostData","description":"\n \n  HttpRequest::addRawPostData\n  (PECL pecl_http 0.14.0-1.4.1)HttpRequest::addRawPostData &mdash; Add raw post data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::addRawPostData\n    ( string $raw_post_data\n   )\n\n\n  \n   Add raw post data, leaving previously set raw post data unchanged.\n  \n  \n   Affects only POST and custom requests.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     raw_post_data\n     \n\n      \n       the raw post data to concatenate\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-construct.php","title":"HttpRequest::__construct","description":"\n \n  HttpRequest::__construct\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::__construct &mdash; HttpRequest constructor\n\n \n \n  Description\n  \n   public\n   void HttpRequest::__construct\n    ([ string $url\n   [, int $request_method = HTTP_METH_GET\n   [, array $options\n  ]]] )\n\n\n  \n   Instantiate a new HttpRequest object.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       the target request url\n      \n     \n\n    \n\n    \n\n     request_method\n     \n\n      \n       the request method to use\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       an associative array with request options\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-enablecookies.php","title":"HttpRequest::enableCookies","description":"\n \n  HttpRequest::enableCookies\n  (PECL pecl_http &gt;= 1.0.0)HttpRequest::enableCookies &mdash; Enable cookies\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::enableCookies\n    ( void\n   )\n\n\n  \n   Enable automatic sending of received cookies.\n  \n  Note: \n   \n    Note that custom set cookies will be sent anyway.\n   \n  \n\n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getcontenttype.php","title":"HttpRequest::getContentType","description":"\n \n  HttpRequest::getContentType\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getContentType &mdash; Get content type\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getContentType\n    ( void\n   )\n\n\n  \n   Get the previously set content type.\n  \n\n \n\n \n  Return Values\n  \n   Returns the previously set content type as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getheaders.php","title":"HttpRequest::getHeaders","description":"\n \n  HttpRequest::getHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getHeaders &mdash; Get headers\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getHeaders\n    ( void\n   )\n\n\n  \n   Get previously set request headers.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array containing all currently set headers.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getcookies.php","title":"HttpRequest::getCookies","description":"\n \n  HttpRequest::getCookies\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getCookies &mdash; Get cookies\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getCookies\n    ( void\n   )\n\n\n  \n   Get previously set cookies.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array containing any previously set cookies.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getmethod.php","title":"HttpRequest::getMethod","description":"\n \n  HttpRequest::getMethod\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getMethod &mdash; Get method\n\n \n \n  Description\n  \n   public\n   int HttpRequest::getMethod\n    ( void\n   )\n\n\n  \n   Get the previously set request method.\n  \n\n \n\n \n  Return Values\n  \n   Returns the currently set request method.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-gethistory.php","title":"HttpRequest::getHistory","description":"\n \n  HttpRequest::getHistory\n  (PECL pecl_http &gt;= 0.15.0)HttpRequest::getHistory &mdash; Get history\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpRequest::getHistory\n    ( void\n   )\n\n\n  \n   Get all sent requests and received responses as an HttpMessage object.\n  \n  \n   If you want to record history, set the instance variable\n   HttpRequest::recordHistory to TRUE.\n  \n  \n   The returned object references the last received response, use HttpMessage::getParentMessage() \n   to access the data of previously sent requests and received responses.\n  \n\n \n\n \n  Return Values\n  \n   Returns an HttpMessage object representing the complete request\/response history.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getoptions.php","title":"HttpRequest::getOptions","description":"\n \n  HttpRequest::getOptions\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getOptions &mdash; Get options\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getOptions\n    ( void\n   )\n\n\n  \n   Get currently set options.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array containing currently set options.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getpostfields.php","title":"HttpRequest::getPostFields","description":"\n \n  HttpRequest::getPostFields\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getPostFields &mdash; Get post fields\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getPostFields\n    ( void\n   )\n\n\n  \n   Get previously set POST data.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the currently set post fields as associative array.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getpostfiles.php","title":"HttpRequest::getPostFiles","description":"\n \n  HttpRequest::getPostFiles\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getPostFiles &mdash; Get post files\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getPostFiles\n    ( void\n   )\n\n\n  \n   Get all previously added POST files.\n  \n\n \n\n \n  Return Values\n  \n   Returns an array containing currently set post files.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getputdata.php","title":"HttpRequest::getPutData","description":"\n \n  HttpRequest::getPutData\n  (PECL pecl_http &gt;= 0.25.0)HttpRequest::getPutData &mdash; Get put data\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getPutData\n    ( void\n   )\n\n\n  \n   Get previously set PUT data.\n  \n\n \n\n \n  Return Values\n  \n   Returns a string containing the currently set PUT data.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getputfile.php","title":"HttpRequest::getPutFile","description":"\n \n  HttpRequest::getPutFile\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getPutFile &mdash; Get put file\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getPutFile\n    ( void\n   )\n\n\n  \n   Get previously set put file.\n  \n\n \n\n \n  Return Values\n  \n   Returns a string containing the path to the currently set put file.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getquerydata.php","title":"HttpRequest::getQueryData","description":"\n \n  HttpRequest::getQueryData\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getQueryData &mdash; Get query data\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getQueryData\n    ( void\n   )\n\n\n  \n   Get the current query data in form of an urlencoded query string.\n  \n\n \n\n \n  Return Values\n  \n   Returns a string containing the urlencoded query.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawpostdata.php","title":"HttpRequest::getRawPostData","description":"\n \n  HttpRequest::getRawPostData\n  (PECL pecl_http 0.14.0-1.4.1)HttpRequest::getRawPostData &mdash; Get raw post data\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getRawPostData\n    ( void\n   )\n\n\n  \n   Get previously set raw post data.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns a string containing the currently set raw post data.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawrequestmessage.php","title":"HttpRequest::getRawRequestMessage","description":"\n \n  HttpRequest::getRawRequestMessage\n  (PECL pecl_http &gt;= 0.21.0)HttpRequest::getRawRequestMessage &mdash; Get raw request message\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getRawRequestMessage\n    ( void\n   )\n\n\n  \n   Get sent HTTP message.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns an HttpMessage in a form of a string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrawresponsemessage.php","title":"HttpRequest::getRawResponseMessage","description":"\n \n  HttpRequest::getRawResponseMessage\n  (PECL pecl_http &gt;= 0.21.0)HttpRequest::getRawResponseMessage &mdash; Get raw response message\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getRawResponseMessage\n    ( void\n   )\n\n\n  \n   Get the entire HTTP response.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the complete web server response, including the headers in a form of a string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsebody.php","title":"HttpRequest::getResponseBody","description":"\n \n  HttpRequest::getResponseBody\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseBody &mdash; Get response body\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getResponseBody\n    ( void\n   )\n\n\n  \n   Get the response body after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns a string containing the response body.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsecookies.php","title":"HttpRequest::getResponseCookies","description":"\n \n  HttpRequest::getResponseCookies\n  (PECL pecl_http &gt;= 0.23.0)HttpRequest::getResponseCookies &mdash; Get response cookie(s)\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getResponseCookies\n    ([ int $flags = 0\n   [, array $allowed_extras\n  ]] )\n\n\n  \n   Get response cookie(s) after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       http_parse_cookie() flags\n      \n     \n\n    \n\n    \n\n     allowed_extras\n     \n\n      \n       allowed keys treated as extra information instead of cookie names\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of stdClass objects like http_parse_cookie() would return.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsecode.php","title":"HttpRequest::getResponseCode","description":"\n \n  HttpRequest::getResponseCode\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseCode &mdash; Get response code\n\n \n \n  Description\n  \n   public\n   int HttpRequest::getResponseCode\n    ( void\n   )\n\n\n  \n   Get the response code after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Return Values\n  \n   Returns an int representing the response code.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getrequestmessage.php","title":"HttpRequest::getRequestMessage","description":"\n \n  HttpRequest::getRequestMessage\n  (PECL pecl_http &gt;= 0.11.0)HttpRequest::getRequestMessage &mdash; Get request message\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpRequest::getRequestMessage\n    ( void\n   )\n\n\n  \n   Get sent HTTP message.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response. Use HttpMessage::getParentMessage()\n   to access the data of previously sent requests within this request cycle.\n  \n  Note: \n   \n    Note that the internal request message is immutable, that means that the\n    request message received through HttpRequest::getRequestMessage() will\n    always look the same for the same request, regardless of any changes you\n    may have made to the returned object.\n   \n  \n\n \n\n \n  Return Values\n  \n   Returns an HttpMessage object representing the sent request.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpMalformedHeadersException, HttpEncodingException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsedata.php","title":"HttpRequest::getResponseData","description":"\n \n  HttpRequest::getResponseData\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseData &mdash; Get response data\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getResponseData\n    ( void\n   )\n\n\n  \n   * Get all response data after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array with the key &quot;headers&quot; containing an associative\n   array holding all response headers, as well as the key &quot;body&quot; containing a\n   string with the response body.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponseinfo.php","title":"HttpRequest::getResponseInfo","description":"\n \n  HttpRequest::getResponseInfo\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseInfo &mdash; Get response info\n\n \n \n  Description\n  \n   public\n   mixed HttpRequest::getResponseInfo\n    ([ string $name\n  ] )\n\n\n  \n   Get response info after the request has been sent.\n  \n  \n   See http_get() for a full list of returned info.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       the info to read; if empty or omitted, an associative array containing\n       all available info will be returned\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns either a scalar containing the value of the info matching name if\n   requested, FALSE on failure, or an associative array containing all\n   available info.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponseheader.php","title":"HttpRequest::getResponseHeader","description":"\n \n  HttpRequest::getResponseHeader\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseHeader &mdash; Get response header(s)\n\n \n \n  Description\n  \n   public\n   mixed HttpRequest::getResponseHeader\n    ([ string $name\n  ] )\n\n\n  \n   Get response header(s) after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       header to read; if empty, all response headers will be returned\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns either a string with the value of the header matching name if requested, \n   FALSE on failure, or an associative array containing all response headers.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsestatus.php","title":"HttpRequest::getResponseStatus","description":"\n \n  HttpRequest::getResponseStatus\n  (PECL pecl_http &gt;= 0.23.0)HttpRequest::getResponseStatus &mdash; Get response status\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getResponseStatus\n    ( void\n   )\n\n\n  \n   Get the response status (i.e. the string after the response code) after the message has been sent.\n  \n\n \n\n \n  Return Values\n  \n   Returns a string containing the response status text.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getresponsemessage.php","title":"HttpRequest::getResponseMessage","description":"\n \n  HttpRequest::getResponseMessage\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getResponseMessage &mdash; Get response message\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpRequest::getResponseMessage\n    ( void\n   )\n\n\n  \n   Get the full response as HttpMessage object after the request has been sent.\n  \n  \n   If redirects were allowed and several responses were received, the data \n   references the last received response. Use HttpMessage::getParentMessage()\n   to access the data of previously received responses within this request\n   cycle.\n  \n\n \n\n \n  Return Values\n  \n   Returns an HttpMessage object of the response.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpException, HttpRuntimeException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-getssloptions.php","title":"HttpRequest::getSslOptions","description":"\n \n  HttpRequest::getSslOptions\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getSslOptions &mdash; Get ssl options\n\n \n \n  Description\n  \n   public\n   array HttpRequest::getSslOptions\n    ( void\n   )\n\n\n  \n   Get previously set SSL options.\n  \n\n \n\n \n  Return Values\n  \n   Returns an associative array containing any previously set SSL options.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-geturl.php","title":"HttpRequest::getUrl","description":"\n \n  HttpRequest::getUrl\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::getUrl &mdash; Get url\n\n \n \n  Description\n  \n   public\n   string HttpRequest::getUrl\n    ( void\n   )\n\n\n  \n   Get the previously set request URL.\n  \n\n \n\n \n  Return Values\n  \n   Returns the currently set request url as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-resetcookies.php","title":"HttpRequest::resetCookies","description":"\n \n  HttpRequest::resetCookies\n  (PECL pecl_http &gt;= 1.0.0)HttpRequest::resetCookies &mdash; Reset cookies\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::resetCookies\n    ([ bool $session_only = false\n  ] )\n\n\n  \n   Reset all automatically received\/sent cookies.\n  \n  Note: \n   \n    Note that custom set cookies are not affected.\n   \n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     session_only\n     \n\n      \n       whether only session cookies should be reset (needs libcurl &gt;= v7.15.4, else libcurl &gt;= v7.14.1)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setcontenttype.php","title":"HttpRequest::setContentType","description":"\n \n  HttpRequest::setContentType\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setContentType &mdash; Set content type\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setContentType\n    ( string $content_type\n   )\n\n\n  \n   Set the content type the post request should have.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     content_type\n     \n\n      \n       the content type of the request (primary\/secondary)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the content type does not seem to\n   contain a primary and a secondary part.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-send.php","title":"HttpRequest::send","description":"\n \n  HttpRequest::send\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::send &mdash; Send request\n\n \n \n  Description\n  \n   public\n   HttpMessage HttpRequest::send\n    ( void\n   )\n\n\n  \n   Send the HTTP request.\n  \n  Note: \n   \n    While an exception may be thrown, the transfer could have succeeded \n    at least partially, so you might want to check the return values of various\n    HttpRequest::getResponse*() methods.\n   \n  \n\n \n\n \n  Return Values\n  \n   Returns the received response as HttpMessage object.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException, HttpRequestException, HttpMalformedHeaderException, HttpEncodingException.\n  \n \n\n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 GET example\n    \n\n&lt;?php$r&nbsp;=&nbsp;new&nbsp;HttpRequest('http:\/\/example.com\/feed.rss',&nbsp;HttpRequest::METH_GET);$r-&gt;setOptions(array('lastmodified'&nbsp;=&gt;&nbsp;filemtime('local.rss')));$r-&gt;addQueryData(array('category'&nbsp;=&gt;&nbsp;3));try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$r-&gt;send();&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($r-&gt;getResponseCode()&nbsp;==&nbsp;200)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_put_contents('local.rss',&nbsp;$r-&gt;getResponseBody());&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;catch&nbsp;(HttpException&nbsp;$ex)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$ex;}?&gt;\n\n\n    \n\n   \n   \n    Example #2 POST example\n    \n\n&lt;?php$r&nbsp;=&nbsp;new&nbsp;HttpRequest('http:\/\/example.com\/form.php',&nbsp;HttpRequest::METH_POST);$r-&gt;setOptions(array('cookies'&nbsp;=&gt;&nbsp;array('lang'&nbsp;=&gt;&nbsp;'de')));$r-&gt;addPostFields(array('user'&nbsp;=&gt;&nbsp;'mike',&nbsp;'pass'&nbsp;=&gt;&nbsp;'s3c|r3t'));$r-&gt;addPostFile('image',&nbsp;'profile.jpg',&nbsp;'image\/jpeg');try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$r-&gt;send()-&gt;getBody();}&nbsp;catch&nbsp;(HttpException&nbsp;$ex)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$ex;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setcookies.php","title":"HttpRequest::setCookies","description":"\n \n  HttpRequest::setCookies\n  (PECL pecl_http &gt;= 0.12.0)HttpRequest::setCookies &mdash; Set cookies\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setCookies\n    ([ array $cookies\n  ] )\n\n\n  \n   Set custom cookies.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     cookies\n     \n\n      \n       an associative array as parameter containing cookie name\/value pairs;\n       if empty or omitted, all previously set cookies will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setoptions.php","title":"HttpRequest::setOptions","description":"\n \n  HttpRequest::setOptions\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setOptions &mdash; Set options\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setOptions\n    ([ array $options\n  ] )\n\n\n  \n   Set the request options to use.\n  \n  See the full list of request options.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       an associative array, which values will overwrite the \n       currently set request options;\n       if empty or omitted, the options of the HttpRequest object will be reset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setmethod.php","title":"HttpRequest::setMethod","description":"\n \n  HttpRequest::setMethod\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setMethod &mdash; Set method\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setMethod\n    ( int $request_method\n   )\n\n\n  \n   Set the request method.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     request_method\n     \n\n      \n       the request method to use\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setheaders.php","title":"HttpRequest::setHeaders","description":"\n \n  HttpRequest::setHeaders\n  (PECL pecl_http &gt;= 0.12.0)HttpRequest::setHeaders &mdash; Set headers\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setHeaders\n    ([ array $headers\n  ] )\n\n\n  \n   Set request header name\/value pairs.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     headers\n     \n\n      \n       an associative array as parameter containing header name\/value pairs;\n       if empty or omitted, all previously set headers will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setpostfields.php","title":"HttpRequest::setPostFields","description":"\n \n  HttpRequest::setPostFields\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setPostFields &mdash; Set post fields\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setPostFields\n    ( array $post_data\n   )\n\n\n  \n   Set the POST data entries, overwriting previously set POST data.\n  \n  \n   Affects only POST and custom requests.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     post_data\n     \n\n      \n       an associative array containing the post fields;\n       if empty, the post data will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setpostfiles.php","title":"HttpRequest::setPostFiles","description":"\n \n  HttpRequest::setPostFiles\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setPostFiles &mdash; Set post files\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setPostFiles\n    ( array $post_files\n   )\n\n\n  \n   Set files to post, overwriting previously set post files.\n  \n  \n   Affects only POST and requests. Cannot be used with raw post data.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     post_files\n     \n\n      \n       an array containing the files to post;\n       if empty, the post files will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setputdata.php","title":"HttpRequest::setPutData","description":"\n \n  HttpRequest::setPutData\n  (PECL pecl_http &gt;= 0.25.0)HttpRequest::setPutData &mdash; Set put data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setPutData\n    ([ string $put_data\n  ] )\n\n\n  \n   Set PUT data to send, overwriting previously set PUT data.\n  \n  \n   Affects only PUT requests.\n  \n  \n   Only either PUT data or PUT file can be used for each request.\n   PUT data has higher precedence and will be used even if a PUT\n   file is set.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     put_data\n     \n\n      \n       the data to upload\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setquerydata.php","title":"HttpRequest::setQueryData","description":"\n \n  HttpRequest::setQueryData\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setQueryData &mdash; Set query data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setQueryData\n    ( mixed $query_data\n   )\n\n\n  \n   Set the URL query parameters to use, overwriting previously set query parameters.\n  \n  \n   Affects any request types.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     query_data\n     \n\n      \n       a string or associative array parameter containing the pre-encoded \n       query string or to be encoded query fields;\n       if empty, the query data will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setssloptions.php","title":"HttpRequest::setSslOptions","description":"\n \n  HttpRequest::setSslOptions\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setSslOptions &mdash; Set ssl options\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setSslOptions\n    ([ array $options\n  ] )\n\n\n  \n   Set SSL options.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       an associative array containing any SSL specific options;\n       if empty or omitted, the SSL options will be reset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setrawpostdata.php","title":"HttpRequest::setRawPostData","description":"\n \n  HttpRequest::setRawPostData\n  (PECL pecl_http 0.14.0-1.4.1)HttpRequest::setRawPostData &mdash; Set raw post data\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setRawPostData\n    ([ string $raw_post_data\n  ] )\n\n\n  \n   Set raw post data to send, overwriting previously set raw post data. Don&#039;t \n   forget to specify a content type. Affects only POST and custom requests.\n  \n  \n   Only either post fields or raw post data can be used for each request.\n   Raw post data has higher precedence and will be used even if post fields\n   are set.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     raw_post_data\n     \n\n      \n       raw post data\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n  Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-setputfile.php","title":"HttpRequest::setPutFile","description":"\n \n  HttpRequest::setPutFile\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setPutFile &mdash; Set put file\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setPutFile\n    ([ string $file = &quot;&quot;\n  ] )\n\n\n  \n   Set file to put. Affects only PUT requests.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     file\n     \n\n      \n       the path to the file to send;\n       if empty or omitted the put file will be unset\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequest-seturl.php","title":"HttpRequest::setUrl","description":"\n \n  HttpRequest::setUrl\n  (PECL pecl_http &gt;= 0.10.0)HttpRequest::setUrl &mdash; Set URL\n\n \n \n  Description\n  \n   public\n   bool HttpRequest::setUrl\n    ( string $url\n   )\n\n\n  \n   Set the request URL.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       the request url\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-attach.php","title":"HttpRequestPool::attach","description":"\n \n  HttpRequestPool::attach\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::attach &mdash; Attach HttpRequest\n\n \n \n  Description\n  \n   public\n   bool HttpRequestPool::attach\n    ( HttpRequest $request\n   )\n\n\n  \n   Attach an HttpRequest object to this HttpRequestPool.\n  \n  Warning\n   \n    Set all options prior attaching!\n   \n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     request\n     \n\n      \n       an HttpRequest object not already attached to any HttpRequestPool object\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpInvalidParamException, HttpRequestException, \n   HttpRequestPoolException, HttpEncodingException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-destruct.php","title":"HttpRequestPool::__destruct","description":"\n \n  HttpRequestPool::__destruct\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::__destruct &mdash; HttpRequestPool destructor\n\n \n \n  Description\n  \n   void HttpRequestPool::__destruct\n    ( void\n   )\n\n\n  \n   Clean up HttpRequestPool object.\n  \n\n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-detach.php","title":"HttpRequestPool::detach","description":"\n \n  HttpRequestPool::detach\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::detach &mdash; Detach HttpRequest\n\n \n \n  Description\n  \n   bool HttpRequestPool::detach\n    ( HttpRequest $request\n   )\n\n\n  \n   Detach an HttpRequest object from this HttpRequestPool.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     request\n     \n\n      \n       an HttpRequest object attached to this HttpRequestPool object\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpInvalidParamException, HttpRequestPoolException.\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-construct.php","title":"HttpRequestPool::__construct","description":"\n \n  HttpRequestPool::__construct\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::__construct &mdash; HttpRequestPool constructor\n\n \n \n  Description\n  \n   void HttpRequestPool::__construct\n    ([ HttpRequest $request\n   [, HttpRequest $...\n  ]] )\n\n\n  \n   Instantiate a new HttpRequestPool object. An HttpRequestPool is\n   able to send several HttpRequests in parallel.\n  \n  \n   Accepts virtually infinite optional parameters each referencing an HttpRequest object.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     request\n     \n\n      \n       HttpRequest object to attach\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRequestPoolException (HttpRequestException, HttpInvalidParamException).\n  \n \n\n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A HttpRequestPool example\n    \n\n&lt;?phptry&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$pool&nbsp;=&nbsp;new&nbsp;HttpRequestPool(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HttpRequest('http:\/\/www.google.com\/',&nbsp;HttpRequest::METH_HEAD),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HttpRequest('http:\/\/www.php.net\/',&nbsp;HttpRequest::METH_HEAD)&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;$pool-&gt;send();&nbsp;&nbsp;&nbsp;&nbsp;foreach($pool&nbsp;as&nbsp;$request)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%s&nbsp;is&nbsp;%s&nbsp;(%d)\\n\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;getUrl(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;getResponseCode()&nbsp;?&nbsp;'alive'&nbsp;:&nbsp;'not&nbsp;alive',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$request-&gt;getResponseCode()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;catch&nbsp;(HttpException&nbsp;$e)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$e;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-getattachedrequests.php","title":"HttpRequestPool::getAttachedRequests","description":"\n \n  HttpRequestPool::getAttachedRequests\n  (PECL pecl_http &gt;= 0.16.0)HttpRequestPool::getAttachedRequests &mdash; Get attached requests\n\n \n \n  Description\n  \n   array HttpRequestPool::getAttachedRequests\n    ( void\n   )\n\n\n  \n   Get attached HttpRequest objects.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns an array containing all currently attached HttpRequest objects.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-getfinishedrequests.php","title":"HttpRequestPool::getFinishedRequests","description":"\n \n  HttpRequestPool::getFinishedRequests\n  (PECL pecl_http &gt;= 0.16.0)HttpRequestPool::getFinishedRequests &mdash; Get finished requests\n\n \n \n  Description\n  \n   array HttpRequestPool::getFinishedRequests\n    ( void\n   )\n\n\n  \n   Get attached HttpRequest objects that already have finished their work.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns an array containing all attached HttpRequest objects that already have finished their work.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-reset.php","title":"HttpRequestPool::reset","description":"\n \n  HttpRequestPool::reset\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::reset &mdash; Reset request pool\n\n \n \n  Description\n  \n   void HttpRequestPool::reset\n    ( void\n   )\n\n\n  \n   Detach all attached HttpRequest objects.\n  \n\n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-send.php","title":"HttpRequestPool::send","description":"\n \n  HttpRequestPool::send\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::send &mdash; Send all requests\n\n \n \n  Description\n  \n   bool HttpRequestPool::send\n    ( void\n   )\n\n\n  \n   Send all attached HttpRequest objects in parallel.\n  \n\n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRequestPoolException (HttpSocketException, HttpRequestException, HttpMalformedHeaderException).\n  \n \n\n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-socketperform.php","title":"HttpRequestPool::socketPerform","description":"\n \n  HttpRequestPool::socketPerform\n  (PECL pecl_http &gt;= 0.15.0)HttpRequestPool::socketPerform &mdash; Perform socket actions\n\n \n \n  Description\n  \n   protected\n   bool HttpRequestPool::socketPerform\n    ( void\n   )\n\n\n  \n   Returns TRUE until each request has finished its transaction.\n  \n\n \n\n \n  Return Values\n  \n   Returns TRUE until each request has finished its transaction.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A HttpRequestPool::socketPerform() example\n    \n\n&lt;?phpclass&nbsp;MyPool&nbsp;extends&nbsp;HttpRequestPool{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;send()&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;($this-&gt;socketPerform())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$this-&gt;socketSelect())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;HttpSocketExcpetion;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;final&nbsp;function&nbsp;socketPerform()&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;parent::socketPerform();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($this-&gt;getFinishedRequests()&nbsp;as&nbsp;$r)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;detach($r);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;handle&nbsp;response&nbsp;of&nbsp;finished&nbsp;request&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$result;&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httprequestpool-socketselect.php","title":"HttpRequestPool::socketSelect","description":"\n \n  HttpRequestPool::socketSelect\n  (PECL pecl_http &gt;= 0.10.0)HttpRequestPool::socketSelect &mdash; Perform socket select\n\n \n \n  Description\n  \n   protected\n   bool HttpRequestPool::socketSelect\n    ([ float $timeout = 0\n  ] )\n\n\n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-capture.php","title":"HttpResponse::capture","description":"\n \n  HttpResponse::capture\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::capture &mdash; Capture script output\n\n \n \n  Description\n  \n   static\n   void HttpResponse::capture\n    ( void\n   )\n\n  \n   Capture script output.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A HttpResponse::capture() example\n    \n\n&lt;?phpHttpResponse::setCache(true);HttpResponse::capture();\/\/&nbsp;script&nbsp;follows?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n     HttpResponse::send() - Send response\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getbuffersize.php","title":"HttpResponse::getBufferSize","description":"\n \n  HttpResponse::getBufferSize\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getBufferSize &mdash; Get buffer size\n\n \n \n  Description\n  \n   static\n   int HttpResponse::getBufferSize\n    ( void\n   )\n\n  \n   Get current buffer size.\n  \n \n\n \n  Return Values\n  \n   Returns an int representing the current buffer size in bytes.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setBufferSize() - Set buffer size\n     HttpResponse::getThrottleDelay() - Get throttle delay\n     HttpResponse::setThrottleDelay() - Set throttle delay\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcache.php","title":"HttpResponse::getCache","description":"\n \n  HttpResponse::getCache\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getCache &mdash; Get cache\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::getCache\n    ( void\n   )\n\n  \n   Get current caching setting.\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if caching should be attempted, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setCacheControl() - Set cache control\n     HttpResponse::getCacheControl() - Get cache control\n     HttpResponse::setCache() - Set cache\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcontenttype.php","title":"HttpResponse::getContentType","description":"\n \n  HttpResponse::getContentType\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getContentType &mdash; Get content type\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getContentType\n    ( void\n   )\n\n  \n   Get current Content-Type header setting.\n  \n \n\n \n  Return Values\n  \n   Returns the currently set content type as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getContentDisposition() - Get content disposition\n     HttpResponse::setContentDisposition() - Set content disposition\n     HttpResponse::setContentType() - Set content type\n     HttpResponse::guessContentType() - Guess content type\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcachecontrol.php","title":"HttpResponse::getCacheControl","description":"\n \n  HttpResponse::getCacheControl\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getCacheControl &mdash; Get cache control\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getCacheControl\n    ( void\n   )\n\n  \n   Get current Cache-Control header setting.\n  \n \n\n \n  Return Values\n  \n   Returns the current cache control setting as a string like sent in a header.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setCacheControl() - Set cache control\n     HttpResponse::setCache() - Set cache\n     HttpResponse::getCache() - Get cache\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getcontentdisposition.php","title":"HttpResponse::getContentDisposition","description":"\n \n  HttpResponse::getContentDisposition\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getContentDisposition &mdash; Get content disposition\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getContentDisposition\n    ( void\n   )\n\n  \n   Get current Content-Disposition setting.\n  \n \n\n \n  Return Values\n  \n   Returns the current content disposition as string like sent in a header.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setContentDisposition() - Set content disposition\n     HttpResponse::getContentType() - Get content type\n     HttpResponse::setContentType() - Set content type\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getdata.php","title":"HttpResponse::getData","description":"\n \n  HttpResponse::getData\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getData &mdash; Get data\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getData\n    ( void\n   )\n\n  \n   Get the previously set data to be sent.\n  \n \n\n \n  Return Values\n  \n   Returns a string containing the previously set data to send.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setData() - Set data\n     HttpResponse::getFile() - Get file\n     HttpResponse::setFile() - Set file\n     HttpResponse::getStream() - Get Stream\n     HttpResponse::setStream() - Set stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getetag.php","title":"HttpResponse::getETag","description":"\n \n  HttpResponse::getETag\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getETag &mdash; Get ETag\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getETag\n    ( void\n   )\n\n  \n   Get calculated or previously set custom ETag.\n  \n \n\n \n  Return Values\n  \n   Returns the calculated or previously set ETag as unquoted string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getLastModified() - Get last modified\n     HttpResponse::setLastModified() - Set last modified\n     HttpResponse::setETag() - Set ETag\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getfile.php","title":"HttpResponse::getFile","description":"\n \n  HttpResponse::getFile\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getFile &mdash; Get file\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getFile\n    ( void\n   )\n\n  \n   Get the previously set file to be sent.\n  \n \n\n \n  Return Values\n  \n   Returns the previously set path to the file to send as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getData() - Get data\n     HttpResponse::setData() - Set data\n     HttpResponse::setFile() - Set file\n     HttpResponse::getStream() - Get Stream\n     HttpResponse::setStream() - Set stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getgzip.php","title":"HttpResponse::getGzip","description":"\n \n  HttpResponse::getGzip\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getGzip &mdash; Get gzip\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::getGzip\n    ( void\n   )\n\n  \n   Get current gzip&#039;ing setting.\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if GZip compression is enabled, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setGzip() - Set gzip\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getlastmodified.php","title":"HttpResponse::getLastModified","description":"\n \n  HttpResponse::getLastModified\n  (PECL pecl_http &gt;= 0.12.0)HttpResponse::getLastModified &mdash; Get last modified\n\n \n \n  Description\n  \n   static\n   int HttpResponse::getLastModified\n    ( void\n   )\n\n  \n   Get calculated or previously set custom Last-Modified date.\n  \n \n\n \n  Return Values\n  \n   Returns the calculated or previously set Unix timestamp.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setLastModified() - Set last modified\n     HttpResponse::getETag() - Get ETag\n     HttpResponse::setETag() - Set ETag\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getheader.php","title":"HttpResponse::getHeader","description":"\n \n  HttpResponse::getHeader\n  (PECL pecl_http &gt;= 0.12.0)HttpResponse::getHeader &mdash; Get header\n\n \n \n  Description\n  \n   static\n   mixed HttpResponse::getHeader\n    ([ string $name\n  ] )\n\n  \n   Get header(s) about to be sent.\n  \n  Note: \n   \n    This may not work as expected with the following SAPI(s): Apache2 w\/PHP &lt; 5.1.3.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       specifies the name of the header to read;\n       if empty or omitted, an associative array with all headers will be returned\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns either a string containing the value of the header matching name,\n   FALSE on failure, or an associative array with all headers.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setHeader() - Set header\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestbody.php","title":"HttpResponse::getRequestBody","description":"\n \n  HttpResponse::getRequestBody\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getRequestBody &mdash; Get request body\n\n \n \n  Description\n  \n   static\n   string HttpResponse::getRequestBody\n    ( void\n   )\n\n  \n   This function is an alias of:  http_get_request_body().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestbodystream.php","title":"HttpResponse::getRequestBodyStream","description":"\n \n  HttpResponse::getRequestBodyStream\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getRequestBodyStream &mdash; Get request body stream\n\n \n \n  Description\n  \n   static\n   resource HttpResponse::getRequestBodyStream\n    ( void\n   )\n\n  \n   This function is an alias of:  http_get_request_body_stream().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getstream.php","title":"HttpResponse::getStream","description":"\n \n  HttpResponse::getStream\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getStream &mdash; Get Stream\n\n \n \n  Description\n  \n   static\n   resource HttpResponse::getStream\n    ( void\n   )\n\n  \n   Get the previously set resource to be sent.\n  \n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the previously set resource.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getData() - Get data\n     HttpResponse::setData() - Set data\n     HttpResponse::getFile() - Get file\n     HttpResponse::setFile() - Set file\n     HttpResponse::setStream() - Set stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getthrottledelay.php","title":"HttpResponse::getThrottleDelay","description":"\n \n  HttpResponse::getThrottleDelay\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getThrottleDelay &mdash; Get throttle delay\n\n \n \n  Description\n  \n   static\n   double HttpResponse::getThrottleDelay\n    ( void\n   )\n\n  \n   Get the current throttle delay.\n  \n \n\n \n  Return Values\n  \n   Returns a double representing the throttle delay in seconds.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getBufferSize() - Get buffer size\n     HttpResponse::setBufferSize() - Set buffer size\n     HttpResponse::setThrottleDelay() - Set throttle delay\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-getrequestheaders.php","title":"HttpResponse::getRequestHeaders","description":"\n \n  HttpResponse::getRequestHeaders\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::getRequestHeaders &mdash; Get request headers\n\n \n \n  Description\n  \n   static\n   array HttpResponse::getRequestHeaders\n    ( void\n   )\n\n  \n   This function is an alias of:  http_get_request_headers().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-guesscontenttype.php","title":"HttpResponse::guessContentType","description":"\n \n  HttpResponse::guessContentType\n  (PECL pecl_http &gt;= 0.13.0)HttpResponse::guessContentType &mdash; Guess content type\n\n \n \n  Description\n  \n   static\n   string HttpResponse::guessContentType\n    ( string $magic_file\n   [, int $magic_mode = MAGIC_MIME\n  ] )\n\n  \n   Attempts to guess the content type of supplied payload through libmagic.\n  \n  \n   If the attempt is successful, the guessed Content-Type will automatically\n   be set as response Content-Type.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     magic_file\n     \n\n      \n       specifies the magic.mime database to use\n      \n     \n\n    \n\n    \n\n     magic_mode\n     \n\n      \n       flags for libmagic\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the guessed content type on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws HttpRuntimeException, HttpInvalidParamException.\n  \n \n\n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getContentType() - Get content type\n     HttpResponse::setContentType() - Set content type\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-redirect.php","title":"HttpResponse::redirect","description":"\n \n  HttpResponse::redirect\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::redirect &mdash; Redirect\n\n \n \n  Description\n  \n   static\n   void HttpResponse::redirect\n    ([ string $url\n   [, array $params\n   [, bool $session = false\n   [, int $status\n  ]]]] )\n\n  \n   This function is an alias of:  http_redirect().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setbuffersize.php","title":"HttpResponse::setBufferSize","description":"\n \n  HttpResponse::setBufferSize\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setBufferSize &mdash; Set buffer size\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setBufferSize\n    ( int $bytes\n   )\n\n  \n   Sets the send buffer size of the throttling mechanism.\n  \n  Note: Provides a basic throttling mechanism, which will yield\n   the current process or thread until the entity has been completely sent.\n  Note: \n   \n    This may not work as expected with the following SAPI(s): FastCGI.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     bytes\n     \n\n      \n       the chunk size in bytes\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getBufferSize() - Get buffer size\n     HttpResponse::getThrottleDelay() - Get throttle delay\n     HttpResponse::setThrottleDelay() - Set throttle delay\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcache.php","title":"HttpResponse::setCache","description":"\n \n  HttpResponse::setCache\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setCache &mdash; Set cache\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setCache\n    ( bool $cache\n   )\n\n  \n   Whether it should be attempted to cache the entity.\n  \n  \n   This will result in necessary caching headers and checks of clients\n   If-Modified-Since and If-None-Match headers. If one of those headers\n   matches a 304 Not Modified status code will be issued.\n  \n  Note: \n   \n    If you&#039;re using sessions, be sure that you set session.cache_limiter\n    to something more appropriate than &quot;no-cache&quot;!\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     cache\n     \n\n      \n       whether caching should be attempted\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::setCacheControl() - Set cache control\n     HttpResponse::getCacheControl() - Get cache control\n     HttpResponse::getCachel()\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-send.php","title":"HttpResponse::send","description":"\n \n  HttpResponse::send\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::send &mdash; Send response\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::send\n    ([ bool $clean_ob = true\n  ] )\n\n  \n   Finally send the entity.\n  \n  \n   A successful caching attempt will exit PHP, and write a log entry if the INI setting\n   http.log.cache is set.\n   See the INI setting \nhttp.force_exit for what &quot;exits&quot; means.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     clean_ob\n     \n\n      \n       whether to destroy all previously started output handlers and their buffers\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A HttpResponse::send() example\n    \n\n&lt;?phpHttpResponse::setCache(true);HttpResponse::setContentType('application\/pdf');HttpResponse::setContentDisposition(\"$user.pdf\",&nbsp;false);HttpResponse::setFile('sheet.pdf');HttpResponse::send();?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n     HttpResponse::capture() - Capture script output\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcachecontrol.php","title":"HttpResponse::setCacheControl","description":"\n \n  HttpResponse::setCacheControl\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setCacheControl &mdash; Set cache control\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setCacheControl\n    ( string $control\n   [, int $max_age = 0\n   [, bool $must_revalidate = true\n  ]] )\n\n  \n   Define a custom Cache-Control header, usually being private or public;\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     control\n     \n\n      \n       the primary cache control setting\n      \n     \n\n    \n\n    \n\n     max_age\n     \n\n      \n       the max-age in seconds, suggesting how long the cache entry is valid on the client side\n      \n     \n\n    \n\n    \n\n     must_revalidate\n     \n\n      \n       whether the cached entity should be revalidated by the client for every request\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if control does not match one of public, private or no-cache.\n  \n \n\n\n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    HttpResponse::getCacheControl() - Get cache control\n    HttpResponse::setCache() - Set cache\n    HttpResponse::getCache() - Get cache\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcontentdisposition.php","title":"HttpResponse::setContentDisposition","description":"\n \n  HttpResponse::setContentDisposition\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setContentDisposition &mdash; Set content disposition\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setContentDisposition\n    ( string $filename\n   [, bool $inline = false\n  ] )\n\n  \n   Set the Content-Disposition.\n   The Content-Disposition\nheader is very useful if the data actually being sent came from a file or\nsomething similar, that should be &quot;saved&quot; by the client\/user (i.e. by\nthe browser&#039;s &quot;Save as...&quot; popup window).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       the file name the &quot;Save as...&quot; dialog should display\n      \n     \n\n    \n\n    \n\n     inline\n     \n\n      \n       if set to true and the user agent knows how to handle the content type,\n       it will probably not cause the popup window to be shown\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getContentDisposition() - Get content disposition\n     HttpResponse::getContentType() - Get content type\n     HttpResponse::setContentType() - Set content type\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setcontenttype.php","title":"HttpResponse::setContentType","description":"\n \n  HttpResponse::setContentType\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setContentType &mdash; Set content type\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setContentType\n    ( string $content_type\n   )\n\n  \n   Set the Content-Type of the sent entity.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     content_type\n     \n\n      \n       the content type of the sent entity (primary\/secondary)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if the content type does not seem to\n   contain a primary and secondary content type part.\n  \n \n\n\n \n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getContentDisposition() - Get content disposition\n     HttpResponse::setContentDisposition() - Set content disposition\n     HttpResponse::getContentType() - Get content type\n     HttpResponse::guessContentType() - Guess content type\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setdata.php","title":"HttpResponse::setData","description":"\n \n  HttpResponse::setData\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setData &mdash; Set data\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setData\n    ( mixed $data\n   )\n\n  \n   Set the data to be sent.\n  \n  Note: Previously calculated or defined ETag\n   and Last-Modified will be recalculated and redefined.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to send\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getData() - Get data\n     HttpResponse::getFile() - Get file\n     HttpResponse::setFile() - Set file\n     HttpResponse::getStream() - Get Stream\n     HttpResponse::setStream() - Set stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setetag.php","title":"HttpResponse::setETag","description":"\n \n  HttpResponse::setETag\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setETag &mdash; Set ETag\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setETag\n    ( string $etag\n   )\n\n  \n   Set a custom ETag. Use this only if you know what you&#039;re doing.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     etag\n     \n\n      \n       unquoted string as parameter containing the ETag\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getLastModified() - Get last modified\n     HttpResponse::setLastModified() - Set last modified\n     HttpResponse::getETag() - Get ETag\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setfile.php","title":"HttpResponse::setFile","description":"\n \n  HttpResponse::setFile\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setFile &mdash; Set file\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setFile\n    ( string $file\n   )\n\n  \n   Set the file to be sent.\n  \n  Note: Previously calculated or defined ETag\n   and Last-Modified will be recalculated and redefined.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     file\n     \n\n      \n       the path to the file to send\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getData() - Get data\n     HttpResponse::setData() - Set data\n     HttpResponse::getFile() - Get file\n     HttpResponse::getStream() - Get Stream\n     HttpResponse::setStream() - Set stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setgzip.php","title":"HttpResponse::setGzip","description":"\n \n  HttpResponse::setGzip\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setGzip &mdash; Set gzip\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setGzip\n    ( bool $gzip\n   )\n\n  \n   Enable on-thy-fly gzip&#039;ing of the sent entity.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     gzip\n     \n\n      \n       whether GZip compression should be enabled\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getGzip() - Get gzip\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setheader.php","title":"HttpResponse::setHeader","description":"\n \n  HttpResponse::setHeader\n  (PECL pecl_http &gt;= 0.12.0)HttpResponse::setHeader &mdash; Set header\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setHeader\n    ( string $name\n   [, mixed $value\n   [, bool $replace = true\n  ]] )\n\n  \n   Send an HTTP header.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       the name of the header\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       the value of the header;\n       if not set, no header with this name will be sent\n      \n     \n\n    \n\n    \n\n     replace\n     \n\n      \n       whether an existing header should be replaced\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getHeader() - Get header\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setlastmodified.php","title":"HttpResponse::setLastModified","description":"\n \n  HttpResponse::setLastModified\n  (PECL pecl_http &gt;= 0.12.0)HttpResponse::setLastModified &mdash; Set last modified\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setLastModified\n    ( int $timestamp\n   )\n\n  \n   Set a custom Last-Modified date.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       Unix timestamp representing the last modification time of the sent entity\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getLastModified() - Get last modified\n     HttpResponse::getETag() - Get ETag\n     HttpResponse::setETag() - Set ETag\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setstream.php","title":"HttpResponse::setStream","description":"\n \n  HttpResponse::setStream\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setStream &mdash; Set stream\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setStream\n    ( resource $stream\n   )\n\n  \n   Set the resource to be sent.\n  \n  Note: Previously calculated or defined ETag\n   and Last-Modified will be recalculated and redefined.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       already opened stream from which the data to send will be read\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getData() - Get data\n     HttpResponse::setData() - Set data\n     HttpResponse::getFile() - Get file\n     HttpResponse::setFile() - Set file\n     HttpResponse::getStream() - Get Stream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-setthrottledelay.php","title":"HttpResponse::setThrottleDelay","description":"\n \n  HttpResponse::setThrottleDelay\n  (PECL pecl_http &gt;= 0.10.0)HttpResponse::setThrottleDelay &mdash; Set throttle delay\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::setThrottleDelay\n    ( float $seconds\n   )\n\n  \n   Sets the throttle delay.\n  \n  Note: Provides a basic throttling mechanism, which will yield\n   the current process or thread until the entity has been completely sent.\n  Note: \n   \n    This may not work as expected with the following SAPI(s): FastCGI.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     seconds\n     \n\n      \n       seconds to sleep after each chunk sent\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n     HttpResponse::getBufferSize() - Get buffer size\n     HttpResponse::setBufferSize() - Set buffer size\n     HttpResponse::getThrottleDelay() - Get throttle delay\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.httpresponse-status.php","title":"HttpResponse::status","description":"\n \n  HttpResponse::status\n  (PECL pecl_http &gt;= 0.12.0)HttpResponse::status &mdash; Send HTTP response status\n\n \n \n  Description\n  \n   static\n   bool HttpResponse::status\n    ( int $status\n   )\n\n  \n   This function is an alias of:  http_send_status().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-cache-etag.php","title":"http_cache_etag","description":"\n \n  http_cache_etag\n  (PECL pecl_http &gt;= 0.1.0)http_cache_etag &mdash; Caching by ETag\n\n \n \n  Description\n  \n   bool http_cache_etag\n    ([ string $etag\n  ] )\n\n  \n   Attempts to cache the sent entity by its ETag, either supplied or generated \n   by the hash algorithm specified by the INI setting\n   http.etag.mode.\n  \n  \n   If the clients If-None-Match header matches the supplied\/calculated\n   ETag, the body is considered cached on the clients side and\n   a 304 Not Modified status code is issued.\n  \n  \n   A log entry is written to the cache log if the INI setting\n   http.log.cache is set\n   and the cache attempt was successful.\n  \n  Note: This function may be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n  \n   If this function is used outside the http_send_*() API, it facilitates the ob_etaghandler().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     etag\n     \n\n      \n       custom ETag\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FALSE or exits on success with 304 Not Modified if the entity is cached.\n   See the INI setting \nhttp.force_exit for what &quot;exits&quot; means.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_cache_etag() example\n    \n\n&lt;?phphttp_cache_etag();http_send_data(\"data\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_cache_last_modified() - Caching by last modification\n    ob_etaghandler() - ETag output handler\n    http_match_etag() - Match ETag\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-cache-last-modified.php","title":"http_cache_last_modified","description":"\n \n  http_cache_last_modified\n  (PECL pecl_http &gt;= 0.1.0)http_cache_last_modified &mdash; Caching by last modification\n\n \n \n  Description\n  \n   bool http_cache_last_modified\n    ([ int $timestamp_or_expires\n  ] )\n\n  \n   Attempts to cache the sent entity by its last modification date.\n  \n  \n   If the supplied argument is greater than 0, it is handled as timestamp\n   and will be sent as date of last modification. If it is 0 or omitted,\n   the current time will be sent as Last-Modified date.\n   If it&#039;s negative, it is handled as expiration time in seconds, which means \n   that if the requested last modification date is not between the calculated timespan,\n   the Last-Modified header is updated and the actual body will be sent.\n  \n  \n   A log entry will be written to the cache log if the INI setting\n   http.log.cache is set\n   and the cache attempt was successful.\n  \n  Note: This function may be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp_or_expires\n     \n\n      \n       Unix timestamp\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FALSE or exits on success with 304 Not Modified if the entity is cached.\n   See the INI setting \nhttp.force_exit for what &quot;exits&quot; means.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_cache_last_modified() example\n    \n     Caching for 5 seconds.\n    \n    \n\n&lt;?phphttp_cache_last_modified(-5);printf(\"%s\\n\",&nbsp;http_date());?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_cache_etag() - Caching by ETag\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-deflate.php","title":"http_deflate","description":"\n \n  http_deflate\n  (PECL pecl_http &gt;= 0.15.0)http_deflate &mdash; Deflate data\n\n \n \n  Description\n  \n   string http_deflate\n    ( string $data\n   [, int $flags = 0\n  ] )\n\n  \n   Compress data with gzip, zlib AKA deflate or raw deflate encoding.\n  \n  \n   See the deflate constants table for possible values for the flags parameter.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       String containing the data that should be encoded\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       deflate options\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the encoded string on success, or NULL on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_inflate() - Inflate data\n    HttpDeflateStream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-chunked-decode.php","title":"http_chunked_decode","description":"\n \n  http_chunked_decode\n  (PECL pecl_http &gt;= 0.1.0)http_chunked_decode &mdash; Decode chunked-encoded data\n\n \n \n  Description\n  \n   string http_chunked_decode\n    ( string $encoded\n   )\n\n  \n   Decodes a string which is HTTP-chunked encoded.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     encoded\n     \n\n      \n       chunked encoded string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the decoded string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_chunked_decode() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;\"\".&nbsp;&nbsp;&nbsp;&nbsp;\"05\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"this&nbsp;\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"07\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"string&nbsp;\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"12\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"is&nbsp;chunked&nbsp;encoded\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"01\\n\\r\\n\".&nbsp;&nbsp;&nbsp;&nbsp;\"00\";echo&nbsp;http_chunked_decode($string);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nthis string is chunked encoded\n\n    \n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-inflate.php","title":"http_inflate","description":"\n \n  http_inflate\n  (PECL pecl_http &gt;= 0.15.0)http_inflate &mdash; Inflate data\n\n \n \n  Description\n  \n   string http_inflate\n    ( string $data\n   )\n\n  \n   Decompress data compressed with either gzip, deflate AKA zlib or raw\n   deflate encoding.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       string containing the compressed data\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the decoded string on success, or NULL on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_deflate() - Deflate data\n    HttpInflateStream\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-cookie.php","title":"http_build_cookie","description":"\n \n  http_build_cookie\n  (PECL pecl_http &gt;= 1.2.0)http_build_cookie &mdash; Build cookie string\n\n \n \n  Description\n  \n   string http_build_cookie\n    ( array $cookie\n   )\n\n\n  \n   Build a cookie string from an array\/object like returned by http_parse_cookie().\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     cookie\n     \n\n      \n       a cookie list like returned from http_parse_cookie()\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the cookie(s) as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_parse_cookie() - Parse HTTP cookie\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-date.php","title":"http_date","description":"\n \n  http_date\n  (PECL pecl_http &gt;= 0.1.0)http_date &mdash; Compose HTTP RFC compliant date\n\n \n \n  Description\n  \n   string http_date\n    ([ int $timestamp\n  ] )\n\n  \n   Compose a valid HTTP date regarding RFC 1123\n   looking like: Wed, 22 Dec 2004 11:34:47 GMT.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       Unix timestamp; current time if omitted\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP date as string.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    date() - Format a local time\/date\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-body-stream.php","title":"http_get_request_body_stream","description":"\n \n  http_get_request_body_stream\n  (PECL pecl_http &gt;= 0.22.0)http_get_request_body_stream &mdash; Get request body as stream\n\n \n \n  Description\n  \n   resource http_get_request_body_stream\n    ( void\n   )\n\n  \n   Create a stream to read the raw request body (e.g. POST or PUT data).\n  \n  \n   This function can only be used once if the request method was another than POST.\n  \n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the raw request body as stream on success or NULL on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_get_request_body() - Get request body as string\n    http_get_request_headers() - Get request headers as array\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-headers.php","title":"http_get_request_headers","description":"\n \n  http_get_request_headers\n  (PECL pecl_http &gt;= 0.10.0)http_get_request_headers &mdash; Get request headers as array\n\n \n \n  Description\n  \n   array http_get_request_headers\n    ( void\n   )\n\n  \n   Get a list of incoming HTTP headers.\n  \n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns an associative array of incoming request headers.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_get_request_body() - Get request body as string\n    http_get_request_body_stream() - Get request body as stream\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-modified.php","title":"http_match_modified","description":"\n \n  http_match_modified\n  (PECL pecl_http &gt;= 0.1.0)http_match_modified &mdash; Match last modification\n\n \n \n  Description\n  \n   bool http_match_modified\n    ([ int $timestamp = -1\n   [, bool $for_range = false\n  ]] )\n\n  \n   Matches the given Unix timestamp against the clients If-Modified-Since\n   resp. If-Unmodified-Since HTTP headers.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       Unix timestamp; current time, if omitted\n      \n     \n\n    \n\n    \n\n     for_range\n     \n\n      \n       if set to TRUE, the header usually used to validate HTTP ranges will be checked\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if timestamp represents an earlier date than the header, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_match_etag() - Match ETag\n    http_match_request_header() - Match any header\n    http_cache_etag() - Caching by ETag\n    http_cache_last_modified() - Caching by last modification\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-etag.php","title":"http_match_etag","description":"\n \n  http_match_etag\n  (PECL pecl_http &gt;= 0.1.0)http_match_etag &mdash; Match ETag\n\n \n \n  Description\n  \n   bool http_match_etag\n    ( string $etag\n   [, bool $for_range = false\n  ] )\n\n  \n   Matches the given ETag against the clients If-Match resp. \n   If-None-Match HTTP headers.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     etag\n     \n\n      \n       the ETag to match\n      \n     \n\n    \n\n    \n\n     for_range\n     \n\n      \n       if set to TRUE, the header usually used to validate HTTP ranges will be checked\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if ETag matches or the header contained the asterisk (&quot;*&quot;), else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_match_last_modified()\n    http_match_request_header() - Match any header\n    http_cache_etag() - Caching by ETag\n    http_cache_last_modified() - Caching by last modification\n    ob_etaghandler() - ETag output handler\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-match-request-header.php","title":"http_match_request_header","description":"\n \n  http_match_request_header\n  (PECL pecl_http &gt;= 0.10.0)http_match_request_header &mdash; Match any header\n\n \n \n  Description\n  \n   bool http_match_request_header\n    ( string $header\n   , string $value\n   [, bool $match_case = false\n  ] )\n\n  \n   Match an incoming HTTP header.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     header\n     \n\n      \n       the header name (case-insensitive)\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       the header value that should be compared\n      \n     \n\n    \n\n    \n\n     match_case\n     \n\n      \n       whether the value should be compared case sensitively\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if header value matches, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_match_etag() - Match ETag\n    http_match_last_modified()\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get-request-body.php","title":"http_get_request_body","description":"\n \n  http_get_request_body\n  (PECL pecl_http &gt;= 0.10.0)http_get_request_body &mdash; Get request body as string\n\n \n \n  Description\n  \n   string http_get_request_body\n    ( void\n   )\n\n  \n   Get the raw request body (e.g. POST or PUT data).\n  \n  \n   This function can not be used after \n   http_get_request_body_stream()\n   if the request method was another than POST.\n  \n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns the raw request body as string on success or NULL on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_get_request_body_stream() - Get request body as stream\n    http_get_request_headers() - Get request headers as array\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-support.php","title":"http_support","description":"\n \n  http_support\n  (PECL pecl_http &gt;= 0.15.0)http_support &mdash; Check built-in HTTP support\n\n \n \n  Description\n  \n   int http_support\n    ([ int $feature = 0\n  ] )\n\n  \n   Check for features that require external libraries.\n  \n  \n   See the feature support constants table\n   for possible values for the feature argument.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     feature\n     \n\n      \n       feature to probe for\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns integer, whether requested feature is supported,\n   or a bitmask with all supported features if feature was omitted.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_support() example\n    \n\n&lt;?phpif&nbsp;(!http_support(HTTP_SUPPORT_REQUESTS))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"Need&nbsp;HTTP&nbsp;request&nbsp;support!\\n\");}?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-charset.php","title":"http_negotiate_charset","description":"\n \n  http_negotiate_charset\n  (PECL pecl_http &gt;= 0.1.0)http_negotiate_charset &mdash; Negotiate clients preferred character set\n\n \n \n  Description\n  \n   string http_negotiate_charset\n    ( array $supported\n   [, array &$result\n  ] )\n\n  \n   This function negotiates the clients preferred charset based on its\n   Accept-Charset HTTP header. The qualifier is recognized and charsets \n   without qualifier are rated highest.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     supported\n     \n\n      \n       array containing the supported charsets as values\n      \n     \n\n    \n\n    \n\n     result\n     \n\n      \n       will be filled with an array containing the negotiation results\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the negotiated charset or the default charset (i.e. first array entry) if none match.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_negotiate_charset()\n    \n\n&lt;?php$charsets&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'iso-8859-1',&nbsp;\/\/&nbsp;default&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'iso-8859-2',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'iso-8859-15',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'utf-8');$pref&nbsp;=&nbsp;http_negotiate_charset($charsets,&nbsp;$result);if&nbsp;(strcmp($pref,&nbsp;'iso-8859-1'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconv_set_encoding('internal_encoding',&nbsp;'iso-8859-1');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iconv_set_encoding('output_encoding',&nbsp;$pref);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ob_start('ob_iconv_handler');}print_r($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-content-type.php","title":"http_negotiate_content_type","description":"\n \n  http_negotiate_content_type\n  (PECL pecl_http &gt;= 0.19.0)http_negotiate_content_type &mdash; Negotiate clients preferred content type\n\n \n \n  Description\n  \n   string http_negotiate_content_type\n    ( array $supported\n   [, array &$result\n  ] )\n\n  \n   This function negotiates the clients preferred content type based on its\n   Accept HTTP header. The qualifier is recognized and content types \n   without qualifier are rated highest.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     supported\n     \n\n      \n       array containing the supported content types as values\n      \n     \n\n    \n\n    \n\n     result\n     \n\n      \n       will be filled with an array containing the negotiation results\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the negotiated content type or the default content type (i.e. first array entry) if none match.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_negotiate_content_type()\n    \n\n&lt;?php$content_types&nbsp;=&nbsp;array('application\/xhtml+xml',&nbsp;'text\/html');http_send_content_type(http_negotiate_content_type($content_types));?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-deflatehandler.php","title":"ob_deflatehandler","description":"\n \n  ob_deflatehandler\n  (PECL pecl_http &gt;= 0.21.0)ob_deflatehandler &mdash; Deflate output handler\n\n \n \n  Description\n  \n   string ob_deflatehandler\n    ( string $data\n   , int $mode\n   )\n\n  \n   For use with ob_start().\n  \n  Note: This output handler can only be used once.\n  \n   The deflate output buffer handler can only be used once.\n  \n  \n   It conflicts with ob_gzhandler() and \n   zlib.output_compression as well and should\n   not be used after mbstring extension&#039;s mb_output_handler() and \n   session extension&#039;s URL-Rewriter (AKA session.use_trans_sid).\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    ob_inflatehandler() - Inflate output handler\n    ob_start() - Turn on output buffering\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-negotiate-language.php","title":"http_negotiate_language","description":"\n \n  http_negotiate_language\n  (PECL pecl_http &gt;= 0.1.0)http_negotiate_language &mdash; Negotiate clients preferred language\n\n \n \n  Description\n  \n   string http_negotiate_language\n    ( array $supported\n   [, array &$result\n  ] )\n\n  \n   This function negotiates the clients preferred language based on its\n   Accept-Language HTTP header. The qualifier is recognized and languages \n   without qualifier are rated highest. The qualifier will be decreased by\n   10% for partial matches (i.e. matching primary language).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     supported\n     \n\n      \n       array containing the supported languages as values\n      \n     \n\n    \n\n    \n\n     result\n     \n\n      \n       will be filled with an array containing the negotiation results\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the negotiated language or the default language (i.e. first array entry) if none match.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_negotiate_language()\n    \n\n&lt;?php$langs&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'en-US',\/\/&nbsp;default&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'fr',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'fr-FR',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'de',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'de-DE',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'de-AT',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'de-CH',);include&nbsp;'.\/langs\/'.&nbsp;http_negotiate_language($langs,&nbsp;$result)&nbsp;.'.php';print_r($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-etaghandler.php","title":"ob_etaghandler","description":"\n \n  ob_etaghandler\n  (PECL pecl_http &gt;= 0.10.0)ob_etaghandler &mdash; ETag output handler\n\n \n \n  Description\n  \n   string ob_etaghandler\n    ( string $data\n   , int $mode\n   )\n\n  \n   For use with ob_start().\n  \n  \n   Output buffer handler generating an ETag with the hash algorithm \n   specified with the INI setting http.etag.mode.\n  \n  \n   This output handler is used by http_cache_etag().\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_cache_etag() - Caching by ETag\n    http_match_etag() - Match ETag\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-inflatehandler.php","title":"ob_inflatehandler","description":"\n \n  ob_inflatehandler\n  (PECL pecl_http &gt;= 0.21.0)ob_inflatehandler &mdash; Inflate output handler\n\n \n \n  Description\n  \n   string ob_inflatehandler\n    ( string $data\n   , int $mode\n   )\n\n  \n   For use with ob_start().\n  \n  \n   Same restrictions as with ob_deflatehandler() apply.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    ob_deflatehandler() - Deflate output handler\n    ob_start() - Turn on output buffering\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-message.php","title":"http_parse_message","description":"\n \n  http_parse_message\n  (PECL pecl_http &gt;= 0.12.0)http_parse_message &mdash; Parse HTTP messages\n\n \n \n  Description\n  \n   object http_parse_message\n    ( string $message\n   )\n\n  \n   Parses the HTTP message into a simple \n   recursive object.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     message\n     \n\n      \n       string containing a single HTTP message or several consecutive HTTP messages\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a hierarchical object structure of the parsed messages.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_parse_message()\n    \n\n&lt;?phpdefine&nbsp;('URL',&nbsp;'http:\/\/www.example.com\/');print_r(http_parse_message(http_get(URL,&nbsp;array('redirect'&nbsp;=&gt;&nbsp;3))));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstdClass object\n(\n  [type] =&gt; 2\n  [httpVersion] =&gt; 1.1\n  [responseCode] =&gt; 200\n  [headers] =&gt; Array \n  (\n    [Content-Length] =&gt; 3\n    [Server] =&gt; Apache\n  )\n  [body] =&gt; Hi!\n  [parentMessage] =&gt; stdClass object\n  (\n    [type] =&gt; 2\n    [httpVersion] =&gt; 1.1\n    [responseCode] =&gt; 302\n    [headers] =&gt; Array \n    (\n      [Content-Length] =&gt; 0\n      [Location] =&gt; ...\n    )\n    [body] =&gt; \n    [parentMessage] =&gt; ...\n  )\n)\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_parse_headers() - Parse HTTP headers\n    the HttpMessage class\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-params.php","title":"http_parse_params","description":"\n \n  http_parse_params\n  (PECL pecl_http &gt;= 1.0.0)http_parse_params &mdash; Parse parameter list\n\n \n \n  Description\n  \n   object http_parse_params\n    ( string $param\n   [, int $flags = HTTP_PARAMS_DEFAULT\n  ] )\n\n  \n   Parse parameter list.\n  \n  \n   See the params parsing constants table for possible \n   values of the flags argument.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     param\n     \n\n      \n       Parameters\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       Parse flags\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns parameter list as stdClass object.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_parse_params() example\n    \n\n&lt;?phpvar_dump(http_parse_params(\"text\/html;&nbsp;charset=\\\"utf8\\\"\"));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nobject(stdClass)#1 (1) {\n  [&quot;params&quot;]=&gt;\n  array(2) {\n    [0]=&gt;\n    string(9) &quot;text\/html&quot;\n    [1]=&gt;\n    array(1) {\n      [&quot;charset&quot;]=&gt;\n      string(4) &quot;utf8&quot;\n    }\n  }\n}\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_parse_headers() - Parse HTTP headers\n    http_parse_cookie() - Parse HTTP cookie\n    http_parse_message() - Parse HTTP messages\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-headers.php","title":"http_parse_headers","description":"\n \n  http_parse_headers\n  (PECL pecl_http &gt;= 0.10.0)http_parse_headers &mdash; Parse HTTP headers\n\n \n \n  Description\n  \n   array http_parse_headers\n    ( string $header\n   )\n\n  \n   Parses HTTP headers into an associative array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     header\n     \n\n      \n       string containing HTTP headers\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_parse_headers()\n    \n\n&lt;?php$headers&nbsp;=&nbsp;\"content-type:&nbsp;text\/html;&nbsp;charset=UTF-8\\r\\n\".&nbsp;&nbsp;\"Server:&nbsp;Funky\/1.0\\r\\n\".&nbsp;&nbsp;\"Set-Cookie:&nbsp;foo=bar\\r\\n\".&nbsp;&nbsp;\"Set-Cookie:&nbsp;baz=quux\\r\\n\".&nbsp;&nbsp;\"Folded:&nbsp;works\\r\\n\\ttoo\\r\\n\";print_r(http_parse_headers($headers));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n  [Content-Type] =&gt; text\/html; chatset=UTF-8\n  [Server] =&gt; Funky\/1.0\n  [Set-Cookie] =&gt; Array\n  (\n    [0] =&gt; foo=bar\n    [1] =&gt; baz=quux\n  )\n  [Folded] =&gt; works\n    too\n)\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_parse_message() - Parse HTTP messages\n    http_parse_cookie() - Parse HTTP cookie\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-parse-cookie.php","title":"http_parse_cookie","description":"\n \n  http_parse_cookie\n  (PECL pecl_http &gt;= 0.20.0)http_parse_cookie &mdash; Parse HTTP cookie\n\n \n \n  Description\n  \n   object http_parse_cookie\n    ( string $cookie\n   [, int $flags\n   [, array $allowed_extras\n  ]] )\n\n  \n   Parses HTTP cookies like sent in a response into a struct.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     cookie\n     \n\n      \n       string containing the value of a Set-Cookie response header\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       parse flags (HTTP_COOKIE_PARSE_RAW)\n      \n     \n\n    \n\n    \n\n     allowed_extras\n     \n\n      \n       array containing recognized extra keys;\n       by default all unknown keys will be treated as cookie names\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a stdClass object on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using http_parse_cookie()\n    \n\n&lt;?phpprint_r(http_parse_cookie(\"foo=bar;&nbsp;bar=baz;&nbsp;path=\/;&nbsp;domain=example.com;&nbsp;comment=;&nbsp;secure\",&nbsp;0,&nbsp;array(\"comment\")));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstdClass Object\n(\n  [cookies] =&gt; Array\n  (\n    [foo] =&gt; bar\n    [bar] =&gt; baz\n  )\n\n  [extras] =&gt; Array\n  (\n    [comment] =&gt;\n  )\n\n  [flags] =&gt; 16\n  [expires] =&gt; 0\n  [path] =&gt; \/\n  [domain] =&gt; example.com\n)\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_parse_headers() - Parse HTTP headers\n    http_parse_message() - Parse HTTP messages\n    http_build_cookie() - Build cookie string\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-clean.php","title":"http_persistent_handles_clean","description":"\n \n  http_persistent_handles_clean\n  (PECL pecl_http &gt;= 1.5.0)http_persistent_handles_clean &mdash; Clean up persistent handles\n\n \n \n  Description\n  \n   string http_persistent_handles_clean\n    ([ string $ident\n  ] )\n\n  \n   Clean up (close) persistent handles, optionally identified with ident.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     clean\n     \n\n      \n       the identification string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    http_persistent_handles_ident() - Get\/set ident of persistent handles\n    http_persistent_handles_count() - Stat persistent handles\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-count.php","title":"http_persistent_handles_count","description":"\n \n  http_persistent_handles_count\n  (PECL pecl_http &gt;= 1.5.0)http_persistent_handles_count &mdash; Stat persistent handles\n\n \n \n  Description\n  \n   object http_persistent_handles_count\n    ( void\n   )\n\n  \n   List statistics about persistent handles usage.\n  \n \n\n \n  Parameters\n  \n  \n \n\n \n  Return Values\n  \n   Returns persistent handles statistics as stdClass object on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_persistent_handles_count() example\n    \n\n&lt;?phpprint_r(http_persistent_handles_count());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstdClass Object\n(\n    [http_request] =&gt; Array\n        (\n            [GLOBAL] =&gt; Array\n                (\n                    [used] =&gt; 0\n                    [free] =&gt; 1\n                )\n\n        )\n\n    [http_request_datashare] =&gt; Array\n        (\n            [GLOBAL] =&gt; Array\n                (\n                    [used] =&gt; 1\n                    [free] =&gt; 0\n                )\n\n        )\n\n    [http_request_pool] =&gt; Array\n        (\n        )\n\n)\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_persistent_handles_ident() - Get\/set ident of persistent handles\n    http_persistent_handles_clean() - Clean up persistent handles\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-persistent-handles-ident.php","title":"http_persistent_handles_ident","description":"\n \n  http_persistent_handles_ident\n  (PECL pecl_http &gt;= 1.5.0)http_persistent_handles_ident &mdash; Get\/set ident of persistent handles\n\n \n \n  Description\n  \n   string http_persistent_handles_ident\n    ([ string $ident\n  ] )\n\n  \n   Query or define the ident of persistent handles.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     ident\n     \n\n      \n       the identification string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the prior ident as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n \n  Examples\n  \n   \n    Example #1 A http_persistent_handles_ident() example\n    \n\n&lt;?phpecho&nbsp;http_persistent_handles_ident(\"CUSTOM\"),&nbsp;\"\\n\";echo&nbsp;http_persistent_handles_ident(\"MyApp1\"),&nbsp;\"\\n\";http_get(\"http:\/\/www.example.com\/\");print_r(http_persistent_handles_count());?&gt;\n\n\n    \n\n    The above example will output:\n    \nGLOBAL\nCUSTOM\nstdClass Object\n(\n    [http_request] =&gt; Array\n        (\n            [MyApp1] =&gt; Array\n                (\n                    [used] =&gt; 0\n                    [free] =&gt; 1\n                )\n\n        )\n\n    [http_request_datashare] =&gt; Array\n        (\n            [GLOBAL] =&gt; Array\n                (\n                    [used] =&gt; 1\n                    [free] =&gt; 0\n                )\n\n        )\n\n    [http_request_pool] =&gt; Array\n        (\n        )\n\n)\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    http_persistent_handles_count() - Stat persistent handles\n    http_persistent_handles_clean() - Clean up persistent handles\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-head.php","title":"http_head","description":"\n \n  http_head\n  (PECL pecl_http &gt;= 0.1.0)http_head &mdash; Perform HEAD request\n\n \n \n  Description\n  \n   string http_head\n    ( string $url\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP HEAD request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-get.php","title":"http_get","description":"\n \n  http_get\n  (PECL pecl_http &gt;= 0.1.0)http_get &mdash; Perform GET request\n\n \n \n  Description\n  \n   string http_get\n    ( string $url\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP GET request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Will be filled with request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_get() example\n    \n\n&lt;?php$response&nbsp;=&nbsp;http_get(\"http:\/\/www.example.com\/\",&nbsp;array(\"timeout\"=&gt;1),&nbsp;$info);print_r($info);?&gt;\n\n\n    \n\n    The above example will output:\n    \narray (\n  &#039;effective_url&#039; =&gt; &#039;http:\/\/www.example.com\/&#039;,\n  &#039;response_code&#039; =&gt; 302,\n  &#039;connect_code&#039; =&gt; 0,\n  &#039;filetime&#039; =&gt; -1,\n  &#039;total_time&#039; =&gt; 0.212348,\n  &#039;namelookup_time&#039; =&gt; 0.038296,\n  &#039;connect_time&#039; =&gt; 0.104144,\n  &#039;pretransfer_time&#039; =&gt; 0.104307,\n  &#039;starttransfer_time&#039; =&gt; 0.212077,\n  &#039;redirect_time&#039; =&gt; 0,\n  &#039;redirect_count&#039; =&gt; 0,\n  &#039;size_upload&#039; =&gt; 0,\n  &#039;size_download&#039; =&gt; 218,\n  &#039;speed_download&#039; =&gt; 1026,\n  &#039;speed_upload&#039; =&gt; 0,\n  &#039;header_size&#039; =&gt; 307,\n  &#039;request_size&#039; =&gt; 103,\n  &#039;ssl_verifyresult&#039; =&gt; 0,\n  &#039;ssl_engines&#039; =&gt;\n  array (\n    0 =&gt; &#039;dynamic&#039;,\n    1 =&gt; &#039;cswift&#039;,\n    2 =&gt; &#039;chil&#039;,\n    3 =&gt; &#039;atalla&#039;,\n    4 =&gt; &#039;nuron&#039;,\n    5 =&gt; &#039;ubsec&#039;,\n    6 =&gt; &#039;aep&#039;,\n    7 =&gt; &#039;sureware&#039;,\n    8 =&gt; &#039;4758cca&#039;,\n  ),\n  &#039;content_length_download&#039; =&gt; 218,\n  &#039;content_length_upload&#039; =&gt; 0,\n  &#039;content_type&#039; =&gt; &#039;text\/html&#039;,\n  &#039;httpauth_avail&#039; =&gt; 0,\n  &#039;proxyauth_avail&#039; =&gt; 0,\n  &#039;num_connects&#039; =&gt; 1,\n  &#039;os_errno&#039; =&gt; 0,\n  &#039;error&#039; =&gt; &#039;&#039;,\n)\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-post-data.php","title":"http_post_data","description":"\n \n  http_post_data\n  (PECL pecl_http &gt;= 0.1.0)http_post_data &mdash; Perform POST request with pre-encoded data\n\n \n \n  Description\n  \n   string http_post_data\n    ( string $url\n   , string $data\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP POST request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       String containing the pre-encoded post data\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-data.php","title":"http_put_data","description":"\n \n  http_put_data\n  (PECL pecl_http &gt;= 0.25.0)http_put_data &mdash; Perform PUT request with data\n\n \n \n  Description\n  \n   string http_put_data\n    ( string $url\n   , string $data\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP PUT request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       PUT request body\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-post-fields.php","title":"http_post_fields","description":"\n \n  http_post_fields\n  (PECL pecl_http &gt;= 0.10.0)http_post_fields &mdash; Perform POST request with data to be encoded\n\n \n \n  Description\n  \n   string http_post_fields\n    ( string $url\n   , array $data\n   [, array $files\n   [, array $options\n   [, array &$info\n  ]]] )\n\n  \n   Performs an HTTP POST request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       Associative array of POST values\n      \n     \n\n    \n\n    \n\n     files\n     \n\n      \n       Array of files to post\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_post_fields() example\n    \n\n&lt;?php$fields&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'name'&nbsp;=&gt;&nbsp;'mike',&nbsp;&nbsp;&nbsp;&nbsp;'pass'&nbsp;=&gt;&nbsp;'se_ret');$files&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'name'&nbsp;=&gt;&nbsp;'uimg',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'type'&nbsp;=&gt;&nbsp;'image\/jpeg',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'file'&nbsp;=&gt;&nbsp;'.\/profile.jpg',&nbsp;&nbsp;&nbsp;&nbsp;));$response&nbsp;=&nbsp;http_post_fields(\"http:\/\/www.example.com\/\",&nbsp;$fields,&nbsp;$files);?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-stream.php","title":"http_put_stream","description":"\n \n  http_put_stream\n  (PECL pecl_http &gt;= 0.10.0)http_put_stream &mdash; Perform PUT request with stream\n\n \n \n  Description\n  \n   string http_put_stream\n    ( string $url\n   , resource $stream\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP PUT request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     stream\n     \n\n      \n       The stream to read the PUT request body from\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-put-file.php","title":"http_put_file","description":"\n \n  http_put_file\n  (PECL pecl_http &gt;= 0.10.0)http_put_file &mdash; Perform PUT request with file\n\n \n \n  Description\n  \n   string http_put_file\n    ( string $url\n   , string $file\n   [, array $options\n   [, array &$info\n  ]] )\n\n  \n   Performs an HTTP PUT request on the supplied url.\n  \n  See the full list of request options.\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     file\n     \n\n      \n       The file to put\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-body-encode.php","title":"http_request_body_encode","description":"\n \n  http_request_body_encode\n  (PECL pecl_http &gt;= 1.0.0)http_request_body_encode &mdash; Encode request body\n\n \n \n  Description\n  \n   string http_request_body_encode\n    ( array $fields\n   , array $files\n   )\n\n\n  \n   Generate x-www-form-urlencoded resp. form-data encoded request body.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     fields\n     \n\n      \n       POST fields\n      \n     \n\n    \n\n    \n\n     files\n     \n\n      \n       POST files\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns encoded string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-exists.php","title":"http_request_method_exists","description":"\n \n  http_request_method_exists\n  (PECL pecl_http &gt;= 0.10.0)http_request_method_exists &mdash; Check whether request method exists\n\n \n \n  Description\n  \n   int http_request_method_exists\n    ( mixed $method\n   )\n\n  \n   Check if a request method is registered (or available by default).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       request method name or ID\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the request method is known, else FALSE.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-name.php","title":"http_request_method_name","description":"\n \n  http_request_method_name\n  (PECL pecl_http &gt;= 0.10.0)http_request_method_name &mdash; Get request method name\n\n \n \n  Description\n  \n   string http_request_method_name\n    ( int $method\n   )\n\n  \n   Get the literal string representation of a standard or registered request method.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       request method ID\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the request method name as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-register.php","title":"http_request_method_register","description":"\n \n  http_request_method_register\n  (PECL pecl_http &gt;= 0.10.0)http_request_method_register &mdash; Register request method\n\n \n \n  Description\n  \n   int http_request_method_register\n    ( string $method\n   )\n\n  \n   Register a custom request method.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       the request method name to register\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the ID of the request method on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request-method-unregister.php","title":"http_request_method_unregister","description":"\n \n  http_request_method_unregister\n  (PECL pecl_http &gt;= 0.10.0)http_request_method_unregister &mdash; Unregister request method\n\n \n \n  Description\n  \n   bool http_request_method_unregister\n    ( mixed $method\n   )\n\n\n  \n   Unregister a previously registered custom request method.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       The request method name or ID\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-redirect.php","title":"http_redirect","description":"\n \n  http_redirect\n  (PECL pecl_http &gt;= 0.1.0)http_redirect &mdash; Issue HTTP redirect\n\n \n \n  Description\n  \n   bool http_redirect\n    ([ string $url\n   [, array $params\n   [, bool $session = false\n   [, int $status = 0\n  ]]]] )\n\n  \n   Redirect to the given url.\n  \n  \n   The supplied url will be expanded with http_build_url(), the params array will\n   be treated with http_build_str() and the session identification will be appended\n   if session is true. The HTTP response code will be set according to status.\n   You can use one of the redirect constants for convenience.\n   Please see &raquo;&nbsp;RFC 2616\n   for which redirect response code to use in which situation. By default PHP will decide which response status fits best.\n  \n  \n   To be RFC compliant, &quot;Redirecting to &lt;a&gt;URL&lt;\/a&gt;.&quot; will be displayed,\n   if the client doesn&#039;t redirect immediately, and the request method was another one than HEAD.\n  \n  \n   A log entry will be written to the redirect log, if the INI setting\n   http.log.redirect is set and the redirect attempt was successful.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       the URL to redirect to\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       associative array of query parameters\n      \n     \n\n    \n\n    \n\n     session\n     \n\n      \n       whether to append session information\n      \n     \n\n    \n\n    \n\n     status\n     \n\n      \n       custom response status code\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FALSE or exits on success with the specified redirection status code.\n   See the INI setting \nhttp.force_exit for what &quot;exits&quot; means.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_redirect() example\n    \n\n&lt;?phphttp_redirect(\"relpath\",&nbsp;array(\"name\"&nbsp;=&gt;&nbsp;\"value\"),&nbsp;true,&nbsp;HTTP_REDIRECT_PERM);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHTTP\/1.1 301 Moved Permanently\nX-Powered-By: PHP\/5.2.2\nContent-Type: text\/html\nLocation: http:\/\/www.example.com\/curdir\/relpath?name=value&amp;PHPSESSID=abc\n\nRedirecting to &lt;a href=&quot;http:\/\/www.example.com\/curdir\/relpath?name=value&amp;PHPSESSID=abc&quot;&gt;http:\/\/www.example.com\/curdir\/relpath?name=value&amp;PHPSESSID=abc&lt;\/a&gt;.\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-request.php","title":"http_request","description":"\n \n  http_request\n  (PECL pecl_http &gt;= 1.0.0)http_request &mdash; Perform custom request\n\n \n \n  Description\n  \n   string http_request\n    ( int $method\n   , string $url\n   [, string $body\n   [, array $options\n   [, array &$info\n  ]]] )\n\n  \n   Performs a custom HTTP request on the supplied url.\n  \n  See the full list of request options.\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       Request method\n      \n     \n\n    \n\n    \n\n     url\n     \n\n      \n       URL\n      \n     \n\n    \n\n    \n\n     body\n     \n\n      \n       Request body\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       request options\n      \n     \n\n    \n\n    \n\n     info\n     \n\n      \n       Request\/response information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the HTTP response(s) as string on\nsuccess, or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-content-disposition.php","title":"http_send_content_disposition","description":"\n \n  http_send_content_disposition\n  (PECL pecl_http &gt;= 0.10.0)http_send_content_disposition &mdash; Send Content-Disposition\n\n \n \n  Description\n  \n   bool http_send_content_disposition\n    ( string $filename\n   [, bool $inline = false\n  ] )\n\n  \n   Send the Content-Disposition.\n   The Content-Disposition\nheader is very useful if the data actually being sent came from a file or\nsomething similar, that should be &quot;saved&quot; by the client\/user (i.e. by\nthe browser&#039;s &quot;Save as...&quot; popup window).\n  \n  Note: This function should be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       the file name the &quot;Save as...&quot; dialog should display\n      \n     \n\n    \n\n    \n\n     inline\n     \n\n      \n       if set to TRUE and the user agent knows how to handle the content type,\n       it will probably not cause the popup window to be shown\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_send_data() - Send arbitrary data\n    http_send_file() - Send file\n    http_send_stream() - Send stream\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-data.php","title":"http_send_data","description":"\n \n  http_send_data\n  (PECL pecl_http &gt;= 0.1.0)http_send_data &mdash; Send arbitrary data\n\n \n \n  Description\n  \n   bool http_send_data\n    ( string $data\n   )\n\n  \n   Sends raw data with support for (multiple) range requests.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       data to send\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_send_file() - Send file\n    http_send_stream() - Send stream\n    http_throttle() - HTTP throttling\n    http_send_content_type() - Send Content-Type\n    http_send_content_disposition() - Send Content-Disposition\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-content-type.php","title":"http_send_content_type","description":"\n \n  http_send_content_type\n  (PECL pecl_http &gt;= 0.10.0)http_send_content_type &mdash; Send Content-Type\n\n \n \n  Description\n  \n   bool http_send_content_type\n    ([ string $content_type = &quot;application\/x-octetstream&quot;\n  ] )\n\n  \n   Send the Content-Type of the sent entity.\n  \n  Note: This function should be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n \n\n \n  Parameters\n  \n   \n\n    \n\n     content_type\n     \n\n      \n       the desired content type  (primary\/secondary)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Raises an E_WARNING when the content_type \n   doesn&#039;t seem to contain a primary and a secondary part.\n  \n \n\n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_send_data() - Send arbitrary data\n    http_send_file() - Send file\n    http_send_stream() - Send stream\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-status.php","title":"http_send_status","description":"\n \n  http_send_status\n  (PECL pecl_http &gt;= 0.1.0)http_send_status &mdash; Send HTTP response status\n\n \n \n  Description\n  \n   bool http_send_status\n    ( int $status\n   )\n\n  \n   Send HTTP status code.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      \n       HTTP status code (100-599)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-throttle.php","title":"http_throttle","description":"\n \n  http_throttle\n  (PECL pecl_http &gt;= 0.10.0)http_throttle &mdash; HTTP throttling\n\n \n \n  Description\n  \n   void http_throttle\n    ( float $sec\n   [, int $bytes = 40960\n  ] )\n\n  \n   Sets the throttle delay and send buffer size.\n  \n  Note: This function should be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n  Note: Provides a basic throttling mechanism, which will yield\n   the current process or thread until the entity has been completely sent.\n  Note: \n   \n    This may not work as expected with the following SAPI(s): FastCGI.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     sec\n     \n\n      \n       seconds to sleep after each chunk sent\n      \n     \n\n    \n\n    \n\n     bytes\n     \n\n      \n       the chunk size in bytes\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_throttle() example\n    \n     Send file with approximately 20 kbyte\/s.\n    \n    \n\n&lt;?php\/\/&nbsp;~&nbsp;20&nbsp;kbyte\/s#&nbsp;http_throttle(1,&nbsp;20000);#&nbsp;http_throttle(0.5,&nbsp;10000);http_throttle(0.1,&nbsp;2000);http_send_file('document.pdf');?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_send_data() - Send arbitrary data\n    http_send_file() - Send file\n    http_send_stream() - Send stream\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-last-modified.php","title":"http_send_last_modified","description":"\n \n  http_send_last_modified\n  (PECL pecl_http &gt;= 0.1.0)http_send_last_modified &mdash; Send Last-Modified\n\n \n \n  Description\n  \n   bool http_send_last_modified\n    ([ int $timestamp = time()\n  ] )\n\n  \n   Send a Last-Modified header with a valid HTTP date.\n  \n  Note: This function should be used in conjunction with\n   http_send_data(), http_send_file()  and http_send_stream().\n \n\n \n  Parameters\n  \n   \n\n    \n\n     timestamp\n     \n\n      \n       a Unix timestamp, converted to a valid HTTP date;\n       if omitted, the current time will be sent\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-file.php","title":"http_send_file","description":"\n \n  http_send_file\n  (PECL pecl_http &gt;= 0.1.0)http_send_file &mdash; Send file\n\n \n \n  Description\n  \n   bool http_send_file\n    ( string $file\n   )\n\n  \n   Sends a file with support for (multiple) range requests.\n  \n  \n   This functions behaviour and further action is dependent on the following\n   INI settings:\n   http.send.not_found_404\n    and http.log.not_found.\n  \n  \n   If the INI setting http.send.not_found_404\n   is enabled and the INI setting http.log.not_found\n   points to a writable file, a log message is written when the file was not found.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     file\n     \n\n      \n       the file to send\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_send_file() example\n    \n\n&lt;?phphttp_send_content_disposition(\"document.pdf\",&nbsp;true);http_send_content_type(\"application\/pdf\");http_throttle(0.1,&nbsp;2048);http_send_file(\"..\/report.pdf\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHTTP\/1.1 206 Partial Content\nX-Powered-By: PHP\/5.2.2\nAccept-Ranges: bytes\nContent-Length: 12345\nContent-Range: bytes 0-12344\nContent-Type: application\/pdf\nContent-Disposition: inline; filename=&quot;document.pdf&quot;\n\n%PDF...\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    http_send_data() - Send arbitrary data\n    http_send_stream() - Send stream\n    http_throttle() - HTTP throttling\n    http_send_content_type() - Send Content-Type\n    http_send_content_disposition() - Send Content-Disposition\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-send-stream.php","title":"http_send_stream","description":"\n \n  http_send_stream\n  (PECL pecl_http &gt;= 0.1.0)http_send_stream &mdash; Send stream\n\n \n \n  Description\n  \n   bool http_send_stream\n    ( resource $stream\n   )\n\n  \n   Sends an already opened stream with support for (multiple) range requests.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       stream to read from (must be seekable)\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    http_send_data() - Send arbitrary data\n    http_send_file() - Send file\n    http_throttle() - HTTP throttling\n    http_send_content_type() - Send Content-Type\n    http_send_content_disposition() - Send Content-Disposition\n    the \nHttpResponse class if you are using PHP 5.1.0\nand above\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-str.php","title":"http_build_str","description":"\n \n  http_build_str\n  (PECL pecl_http &gt;= 0.23.0)http_build_str &mdash; Build query string\n\n \n \n  Description\n  \n   string http_build_str\n    ( array $query\n   [, string $prefix\n   [, string $arg_separator = ini_get(&quot;arg_separator.output&quot;)\n  ]] )\n\n  \n   Opponent to parse_str().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n       associative array of query string parameters\n      \n     \n\n    \n\n    \n\n     prefix\n     \n\n      \n       top level prefix\n      \n     \n\n    \n\n    \n\n     arg_separator\n     \n\n      \n       argument separator to use (by default the INI setting arg_separator.output will be used, or &quot;&amp;&quot; if neither is set\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the built query as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n\n\n \n  See Also\n  \n   \n    standard http_build_query() - Generate URL-encoded query string\n    http_build_url() - Build a URL\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-url.php","title":"http_build_url","description":"\n \n  http_build_url\n  (PECL pecl_http &gt;= 0.21.0)http_build_url &mdash; Build a URL\n\n \n \n  Description\n  \n   string http_build_url\n    ([ mixed $url\n   [, mixed $parts\n   [, int $flags = HTTP_URL_REPLACE\n   [, array &$new_url\n  ]]]] )\n\n\n  \n   Build a URL.\n  \n  \n   The parts of the second URL will be merged into the first according to the flags argument.\n  \n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       (part(s) of) an URL in form of a string or associative array like parse_url() returns\n      \n     \n\n    \n\n    \n\n     parts\n     \n\n      \n       same as the first argument\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       a bitmask of binary or&#039;ed HTTP_URL constants;\n       HTTP_URL_REPLACE is the default\n      \n     \n\n    \n\n    \n\n     new_url\n     \n\n      \n       if set, it will be filled with the parts of the composed url like parse_url() would return\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the new URL as string on success or FALSE on failure.\n  \n \n\n\n \n\n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A http_build_url() example\n    \n\n&lt;?phpecho&nbsp;http_build_url(\"http:\/\/user@www.example.com\/pub\/index.php?a=b#files\",&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"scheme\"&nbsp;=&gt;&nbsp;\"ftp\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"host\"&nbsp;=&gt;&nbsp;\"ftp.example.com\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"path\"&nbsp;=&gt;&nbsp;\"files\/current\/\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"query\"&nbsp;=&gt;&nbsp;\"a=c\"&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;HTTP_URL_STRIP_AUTH&nbsp;|&nbsp;HTTP_URL_JOIN_PATH&nbsp;|&nbsp;HTTP_URL_JOIN_QUERY&nbsp;|&nbsp;HTTP_URL_STRIP_FRAGMENT);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nftp:\/\/ftp.example.com\/pub\/files\/current\/?a=c\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    parse_url() - Parse a URL and return its components\n    http_build_str() - Build query string\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.java-last-exception-get.php","title":"java_last_exception_get","description":"\n \n  java_last_exception_get\n  (PHP 4 &gt;= 4.0.2)java_last_exception_get &mdash; Get last Java exception\n\n \n \n \n  Description\n  \n   object java_last_exception_get\n    ( void\n   )\n\n  \n   Gets last Java exception.\n  \n \n\n\n \n  Return Values\n  \n   Returns an exception object.\n  \n \n\n\n \n  Examples\n  \n   The following example demonstrates the usage of Java&#039;s exception\n   handler from within PHP:\n   \n    Example #1 Java exception handler\n    \n\n&lt;?php$stack&nbsp;=&nbsp;new&nbsp;Java('java.util.Stack');$stack-&gt;push(1);\/\/&nbsp;This&nbsp;should&nbsp;succeed$result&nbsp;=&nbsp;$stack-&gt;pop();$ex&nbsp;=&nbsp;java_last_exception_get();if&nbsp;(!$ex)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"$result\\n\";}\/\/&nbsp;This&nbsp;should&nbsp;fail&nbsp;(error&nbsp;suppressed&nbsp;by&nbsp;@)$result&nbsp;=&nbsp;@$stack-&gt;pop();$ex&nbsp;=&nbsp;java_last_exception_get();if&nbsp;($ex)&nbsp;{&nbsp;&nbsp;echo&nbsp;$ex-&gt;toString();}\/\/&nbsp;Clear&nbsp;last&nbsp;exceptionjava_last_exception_clear();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.java-last-exception-clear.php","title":"java_last_exception_clear","description":"\n \n  java_last_exception_clear\n  (PHP 4 &gt;= 4.0.2)java_last_exception_clear &mdash; Clear last Java exception\n\n \n \n \n  Description\n  \n   void java_last_exception_clear\n    ( void\n   )\n\n  \n   Clears last Java exception.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   See java_last_exception_get() for an example.\n  \n \n\n\n \n  Notes\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-autocommit-state.php","title":"ingres_autocommit_state","description":"\n \n  ingres_autocommit_state\n  (PECL ingres &gt;= 2.0.0)ingres_autocommit_state &mdash; Test if the connection is using autocommit\n\n \n \n \n  Description\n  \n   bool ingres_autocommit_state\n    ( resource $link\n   )\n\n  \n   ingres_autocommit_state() is called to determine whether\n   the current link has autocommit enabled or not. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if autocommit is enabled or FALSE when autocommit is\n   disabled\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_autocommit() - Switch autocommit on or off\n    ingres_query() - Send an SQL query to Ingres\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-autocommit.php","title":"ingres_autocommit","description":"\n \n  ingres_autocommit\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_autocommit &mdash; Switch autocommit on or off\n\n \n \n \n  Description\n  \n   bool ingres_autocommit\n    ( resource $link\n   )\n\n  \n   ingres_autocommit() is called before opening a\n   transaction (before the first call to\n   ingres_query() or just after a call to\n   ingres_rollback() or\n   ingres_commit()) to switch the\n   autocommit mode of the server on or off (when the script begins\n   the autocommit mode is off).\n  \n  \n   When autocommit mode is on, every query is automatically\n   committed by the server, as if ingres_commit()\n   was called after every call to ingres_query().\n   To see if autocommit is enabled use, \n   ingres_autocommit_state().\n  \n  \n   By default Ingres will rollback any uncommitted transactions at the end of\n   a request. Use this function or ingres_commit() to\n   ensure your data is committed to the database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_autocommit_state() - Test if the connection is using autocommit\n    ingres_query() - Send an SQL query to Ingres\n    ingres_rollback() - Roll back a transaction\n    ingres_commit() - Commit a transaction\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-charset.php","title":"ingres_charset","description":"\n \n  ingres_charset\n  (PECL ingres &gt;= 2.1.0)ingres_charset &mdash; Returns the installation character set\n\n \n \n \n  Description\n  \n   string ingres_charset\n    ( resource $link\n   )\n\n  \n   ingres_charset() is called to determine the character\n   set being used by the Ingres client, from II_CHARSETxx (where xx is the\n   installation code).\n  \n   Note: \n    \n     You can override the value returned by using the function\n     putenv(). Changing the value of II_CHARSETxx in a\n     running Ingres installation can cause data corruption.\n    \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string with the value for II_CHARSETxx or returns NULL if the value\n   could not be determined.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ingres_charset() - Get the installation character set\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);echo&nbsp;ingres_charset($link)&nbsp;.&nbsp;\"\\n\";ingres_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_connect() - Open a connection to an Ingres database\n    ingres_query() - Send an SQL query to Ingres\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-close.php","title":"ingres_close","description":"\n \n  ingres_close\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_close &mdash; Close an Ingres database connection\n\n \n \n \n  Description\n  \n   bool ingres_close\n    ( resource $link\n   )\n\n  \n   ingres_close() closes the connection to\n   the Ingres server that is associated with the specified link.\n  \n  \n   ingres_close() is usually unnecessary, as it\n   will not close persistent connections and all non-persistent connections\n   are automatically closed at the end of the script.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_connect() - Open a connection to an Ingres database\n    ingres_pconnect() - Open a persistent connection to an Ingres database\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-commit.php","title":"ingres_commit","description":"\n \n  ingres_commit\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_commit &mdash; Commit a transaction\n\n \n \n \n  Description\n  \n   bool ingres_commit\n    ( resource $link\n   )\n\n  \n   ingres_commit() commits the currently open\n   transaction, making all changes made to the database permanent.\n  \n  \n   This closes the transaction. A new transaction can be opened by sending a\n   query with ingres_query().\n  \n  \n   You can also have the server commit automatically after every\n   query by calling ingres_autocommit() before\n   opening the transaction.\n  \n  \n   By default Ingres will roll back any uncommitted transactions at the end of\n   a request. Use this function or ingres_autocommit() to\n   ensure your that data is committed to the database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_rollback() - Roll back a transaction\n    ingres_autocommit() - Switch autocommit on or off\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-cursor.php","title":"ingres_cursor","description":"\n \n  ingres_cursor\n  (PECL ingres &gt;= 1.1.0)ingres_cursor &mdash; Get a cursor name for a given result resource\n\n \n \n \n  Description\n  \n   string ingres_cursor\n    ( resource $result\n   )\n\n  \n   Returns a string with the active cursor name. If no cursor is active then \n   NULL is returned.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the active cursor name. If no cursor is\n   active then NULL is returned.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 Get cursor name for a query resource\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_prepare($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");$cursor_name&nbsp;=&nbsp;ingres_cursor($result);echo&nbsp;$cursor_name;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_prepare() - Prepare a query for later execution\n    ingres_execute() - Execute a prepared query\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-errno.php","title":"ingres_errno","description":"\n \n  ingres_errno\n  (PECL ingres &gt;= 1.1.0)ingres_errno &mdash; Get the last Ingres error number generated\n\n \n \n \n  Description\n  \n   int ingres_errno\n    ([ resource $link\n  ] )\n\n  \n   Returns an integer containing the last error number. If no error was\n   reported 0 is returned.\n  \n  \n   If a link resource is passed to\n   ingres_errno() it returns the last error recorded for\n   the link. If no link is passed, then ingres_errno()\n   returns the last error reported using the default link.\n  \n  \n   The function, ingres_errno(), should always be called\n   after executing a database query.  Calling another function before\n   ingres_errno() is called will reset or change any\n   error code from the last Ingres function call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an integer containing the last error number. If no error was\n   reported, 0 is returned.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 Get the last Ingres error number generated\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");$error_code&nbsp;=&nbsp;ingres_errno($link);if&nbsp;(&nbsp;$error_code&nbsp;!=&nbsp;0&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured&nbsp;-&nbsp;\"&nbsp;.&nbsp;$error_code;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_error() - Get a meaningful error message for the last error generated\n    ingres_errsqlstate() - Get the last SQLSTATE error code generated\n    ingres_next_error() - Get the next Ingres error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-connect.php","title":"ingres_connect","description":"\n \n  ingres_connect\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_connect &mdash; Open a connection to an Ingres database\n\n \n \n \n  Description\n  \n   resource ingres_connect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, array $options\n  ]]]] )\n\n  \n   ingres_connect() opens a connection with the\n   given Ingres database.\n  \n  \n   The connection is closed when the script ends or when\n   ingres_close() is called on this link.\n  \n \n\n\n \n  Parameters\n  \n   If some parameters are missing, ingres_connect()\n   uses the values in php.ini for\n   ingres.default_database,\n   ingres.default_user and\n   ingres.default_password.\n  \n  \n   \n\n    \n\n     database\n     \n\n      \n       The database name. Must follow the syntax:\n      \n      \n       [vnode::]dbname[\/svr_class]\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The Ingres user name\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password associated with username\n      \n     \n\n    \n\n    \n     options\n     \n\n      \n       ingres_connect() options\n       \n        \n         \n          \n           Option name\n           Option type\n           Description\n           Example\n          \n\n         \n\n         \n          \n           date_century_boundary\n           integer\n           The threshold by which a 2-digit year is determined to be in\n           the current century or in the next century. Equivalent to II_DATE_CENTURY_BOUNDARY. \n           50\n          \n\n          \n           group\n           string\n           Specifies the group ID of the user, equivalent to the &quot;-G&quot;\n           flag\n           payroll\n          \n\n          \n           role\n           string\n           The role ID of the application. If a role password is\n           required, the parameter value should be specified as &quot;role\/password&quot;\n          \n\n          \n           effective_user\n           string\n           The ingres user account being impersonated, equivalent to the &quot;-u&quot; flag\n           another_user\n          \n\n          \n           dbms_password\n           string\n           The internal database password for the user connecting to Ingres\n           s3cr3t\n          \n\n          \n           table_structure\n           string\n           \n             The default structure for new tables.\n             Valid values for table_structure are:\n            \n             INGRES_STRUCTURE_BTREE\n             INGRES_STRUCTURE_HASH\n             INGRES_STRUCTURE_HEAP\n             INGRES_STRUCTURE_ISAM\n             INGRES_STRUCTURE_CBTREE\n             INGRES_STRUCTURE_CISAM\n             INGRES_STRUCTURE_CHASH\n             INGRES_STRUCTURE_CHEAP\n            \n            \n           \n           INGRES_STRUCTURE_BTREE\n          \n\n          \n           index_structure\n           string\n           \n             The default structure for new secondary indexes. Valid values\n           for index_structure are:\n            \n             INGRES_STRUCTURE_CBTREE\n             INGRES_STRUCTURE_CISAM\n             INGRES_STRUCTURE_CHASH\n             INGRES_STRUCTURE_BTREE\n             INGRES_STRUCTURE_HASH\n             INGRES_STRUCTURE_ISAM\n            \n            \n           \n           INGRES_STRUCTURE_HASH\n          \n\n          \n           login_local\n           boolean\n           Determines how the connection user ID and password are\n           used when a VNODE is included in the target database string.\n           If set to TRUE, the user ID and password are used to locally access\n           the VNODE, and the VNODE login information is used to establish the DBMS\n           connection. If set to FALSE, the process user ID is used to access\n           the VNODE, and the connection user ID and password are used in place\n           of the VNODE login information to establish the DBMS connection.\n           This parameter is ignored if no VNODE is included in the target\n           database string. The default is FALSE.\n           TRUE\n          \n\n          \n           timezone\n           string\n           Controls the timezone of the session. If not set it will\n           default to the value defined by II_TIMEZONE_NAME. If\n           II_TIMEZONE_NAME is not defined, NA-PACIFIC (GMT-8 with Daylight\n           Savings) is used.\n          \n\n          \n           date_format\n           integer\n           Sets the allowable input and output format for Ingres dates.\n           Defaults to the value defined by II_DATE_FORMAT. If II_DATE_FORMAT is\n           not set the default date format is US, e.g. mm\/dd\/yy. Valid values\n           for date_format are:\n            \n             INGRES_DATE_DMY\n             INGRES_DATE_FINISH\n             INGRES_DATE_GERMAN\n             INGRES_DATE_ISO\n             INGRES_DATE_ISO4\n             INGRES_DATE_MDY\n             INGRES_DATE_MULTINATIONAL\n             INGRES_DATE_MULTINATIONAL4\n             INGRES_DATE_YMD\n             INGRES_DATE_US\n            \n            \n           \n           INGRES_DATE_MULTINATIONAL4\n          \n\n          \n           decimal_separator\n           string\n           The character identifier for decimal data\n           &quot;,&quot;\n          \n\n          \n           money_lort\n           integer\n           Leading or trailing currency sign. Valid values for money_lort\n           are:\n            \n             INGRES_MONEY_LEADING\n             INGRES_MONEY_TRAILING\n            \n            \n           \n           INGRES_MONEY_TRAILING\n          \n\n          \n           money_sign\n           string\n           The currency symbol to be used with the MONEY datatype\n           \u20ac\n          \n\n          \n           money_precision\n           integer\n           The precision of the MONEY datatype\n           3\n          \n\n          \n           float4_precision\n           integer\n           Precision of the FLOAT4 datatype\n           10\n          \n\n          \n           float8_precision\n           integer\n           Precision of the FLOAT8 data\n           10\n          \n\n          \n           blob_segment_length\n           integer\n           The amount of data in bytes to fetch at a time when retrieving\n           BLOB or CLOB data, defaults to 4096 bytes when not explicitly set\n           8192\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a Ingres link resource on success or FALSE on failure\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Open a connection to an Ingres database\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"mydb\",&nbsp;\"user\",&nbsp;\"pass\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");echo&nbsp;\"Connected&nbsp;successfully\";ingres_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_pconnect() - Open a persistent connection to an Ingres database\n    ingres_close() - Close an Ingres database connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-error.php","title":"ingres_error","description":"\n \n  ingres_error\n  (PECL ingres &gt;= 1.1.0)ingres_error &mdash; Get a meaningful error message for the last error generated\n\n \n \n \n  Description\n  \n   string ingres_error\n    ([ resource $link\n  ] )\n\n  \n   Returns a string containing the last error, or NULL if no error has\n   occurred.\n  \n  \n   If a link resource is passed to\n   ingres_error(), it returns the last error recorded for\n   the link. If no link is passed then ingres_error()\n   returns the last error reported using the default link.\n  \n  \n   The function, ingres_error(), should always be called\n   after executing any database query.  Calling another function before\n   ingres_error() is called will reset or change any\n   error message from the last Ingres function call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the last error, or NULL if no error has\n   occurred.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 Get a message for the last error generated\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");$error_text&nbsp;=&nbsp;ingres_error();if&nbsp;(!is_null($error_text))&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured&nbsp;-&nbsp;\"&nbsp;.&nbsp;$error_text;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_errno() - Get the last Ingres error number generated\n    ingres_errsqlstate() - Get the last SQLSTATE error code generated\n    ingres_next_error() - Get the next Ingres error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-escape-string.php","title":"ingres_escape_string","description":"\n \n  ingres_escape_string\n  (PECL ingres &gt;= 2.1.0)ingres_escape_string &mdash; Escape special characters for use in a query\n\n \n \n \n  Description\n  \n   string ingres_escape_string\n    ( resource $link\n   , string $source_string\n   )\n\n  \n   ingres_escape_string() is used to escape certain\n   characters within a string before it is sent to the database server.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n    \n\n     source_string\n     \n\n      \n       The source string to be parsed\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the escaped data.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Escape special characters for use in a query\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$last_name&nbsp;=&nbsp;\"O'Connor\";$sql&nbsp;=&nbsp;sprintf(\"select&nbsp;*&nbsp;from&nbsp;user_profile&nbsp;where&nbsp;up_last&nbsp;=&nbsp;'%s'\",&nbsp;ingres_escape_string(&nbsp;$link,&nbsp;$last_name));$result&nbsp;=&nbsp;ingres_query($link,&nbsp;$sql);while&nbsp;($user&nbsp;=&nbsp;ingres_fetch_object($result)){&nbsp;&nbsp;echo&nbsp;$user-&gt;up_first&nbsp;.&nbsp;'&lt;BR\/&gt;';}ingres_commit($link);ingres_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-errsqlstate.php","title":"ingres_errsqlstate","description":"\n \n  ingres_errsqlstate\n  (PECL ingres &gt;= 1.1.0)ingres_errsqlstate &mdash; Get the last SQLSTATE error code generated\n\n \n \n \n  Description\n  \n   string ingres_errsqlstate\n    ([ resource $link\n  ] )\n\n  \n   Returns a string containing the last SQLSTATE, or NULL if no error has\n   occurred.\n  \n  \n   If a link resource is passed to\n   ingres_errsqlstate(), it returns the last error\n   recorded for the link. If no link is passed, then\n   ingres_errsqlstate() returns the last error reported\n   using the default link.\n  \n  \n   The function, ingres_errsqlstate(), should always be\n   called after executing any database query.  Calling another function\n   before ingres_errsqlstate() is called will reset or\n   change any error message from the last Ingres function call.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the last SQLSTATE, or NULL if no error has\n   occurred.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 Get the last SQLSTATE error code generated\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");$error_sqlstate&nbsp;=&nbsp;ingres_errsqlstate($link);if&nbsp;(!is_null($error_sqlstate))&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured&nbsp;-&nbsp;\"&nbsp;.&nbsp;$error_sqlstate;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n    ingres_next_error() - Get the next Ingres error\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-execute.php","title":"ingres_execute","description":"\n \n  ingres_execute\n  (PECL ingres &gt;= 1.1.0)ingres_execute &mdash; Execute a prepared query\n\n \n \n \n  Description\n  \n   bool ingres_execute\n    ( resource $result\n   [, array $params\n   [, string $types\n  ]] )\n\n  \n   Execute a query prepared using ingres_prepare().\n  \n\n  Note: \n   Related Configurations\n   \n    See also the ingres.describe,\n    ingres.scrollable and\n    ingres.utf8 directives in \n    Runtime Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result query identifier\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array of parameter values to be used with the query\n      \n     \n\n    \n\n    \n\n     types\n     \n\n      \n       A string containing a sequence of types for the parameter values\n       passed. See the types parameter in\n       ingres_query() for the list of type codes.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  Returns TRUE on success or FALSE on failure.\n  \n \n\n\n\n\n \n  See Also\n  \n   \n    ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n    ingres_commit() - Commit a transaction\n    ingres_rollback() - Roll back a transaction\n    ingres_autocommit() - Switch autocommit on or off\n    ingres_set_environment() - Set environment features controlling output options\n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-array.php","title":"ingres_fetch_array","description":"\n \n  ingres_fetch_array\n  ( PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_fetch_array &mdash; Fetch a row of result into an array\n\n \n \n \n  Description\n  \n   array ingres_fetch_array\n    ( resource $result\n   [, int $result_type\n  ] )\n\n  \n   This function is an extended version of\n   ingres_fetch_row().  In addition to storing\n   the data in the numeric indices of the result array, it also\n   stores the data in associative indices, using the field names as\n   keys.\n  \n  \n   If two or more columns of the result have the same field names,\n   the last column will take precedence. To access the another\n   column or columns of the same name, you must use the numeric index of the\n   column or make an alias for the column. For example:\n   \n    \n\n&lt;?php$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;ap_place&nbsp;as&nbsp;city,&nbsp;ap_ccode&nbsp;as&nbsp;country&nbsp;from&nbsp;airport&nbsp;where&nbsp;ap_iatacode&nbsp;=&nbsp;'VLL'\");&nbsp;$result&nbsp;=&nbsp;ingres_fetch_array($result);$foo&nbsp;=&nbsp;$result[\"city\"];$bar&nbsp;=&nbsp;$result[\"country\"];?&gt;\n\n\n    \n\n   \n  \n  \n   With regard to speed, the function is identical to\n   ingres_fetch_object(), and almost as quick as\n   ingres_fetch_row() (the difference is\n   insignificant).\n  \n  \n   By default, arrays created by ingres_fetch_array() start\n   from position 1 and not 0 as with other DBMS extensions. The starting position\n   can be adjusted to 0 using the configuration parameter ingres.array_index_start.\n  \n  Note: \n   Related Configurations\n   \n    See also the ingres.array_index_start, ingres.fetch_buffer_size\n    and ingres.utf8\n    directives in Runtime\n    Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      \n       The result type. This result_type can be INGRES_NUM for\n       enumerated array, INGRES_ASSOC for associative array, or\n       INGRES_BOTH (default).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row,\n   or FALSE if there are no more rows\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Fetch a row of result into an array\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,\"select&nbsp;*&nbsp;from&nbsp;table\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_array($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"user_id\"];&nbsp;&nbsp;\/\/&nbsp;using&nbsp;associative&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"fullname\"];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;using&nbsp;enumerated&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_num_fields() - Get the number of fields returned by the last query\n    ingres_field_name() - Get the name of a field in a query result\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-assoc.php","title":"ingres_fetch_assoc","description":"\n \n  ingres_fetch_assoc\n  (PECL ingres &gt;= 2.2.2)ingres_fetch_assoc &mdash; Fetch a row of result into an associative array\n\n \n \n \n  Description\n  \n   array ingres_fetch_assoc\n    ( resource $result\n   )\n\n  \n   This function is stores the data fetched from a query executed using\n   ingres_query() in an associative array, using the\n   field names as keys.\n  \n  \n   With regard to speed, the function is identical to\n   ingres_fetch_object(), and almost as quick as\n   ingres_fetch_row() (the difference is\n   insignificant).\n  \n  \n   By default, arrays created by ingres_fetch_assoc() start\n   from position 1 and not 0 as with other DBMS extensions. The starting position\n   can be adjusted to 0 using the configuration parameter ingres.array_index_start.\n  \n  Note: \n   Related Configurations\n   \n    See also the ingres.array_index_start, ingres.fetch_buffer_size\n    and ingres.utf8\n    directives in Runtime\n    Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array that corresponds to the fetched row,\n   or FALSE if there are no more rows\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Fetch a row into an associative array\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,\"select&nbsp;*&nbsp;from&nbsp;table\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"user_id\"];&nbsp;&nbsp;\/\/&nbsp;using&nbsp;associative&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"fullname\"];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_num_fields() - Get the number of fields returned by the last query\n    ingres_field_name() - Get the name of a field in a query result\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-object.php","title":"ingres_fetch_object","description":"\n \n  ingres_fetch_object\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_fetch_object &mdash; Fetch a row of result into an object\n\n \n \n \n  Description\n  \n   object ingres_fetch_object\n    ( resource $result\n   [, int $result_type\n  ] )\n\n  \n   This function is similar to\n   ingres_fetch_array(), with one difference - an\n   object is returned instead of an array.  Indirectly, this means\n   that you can access the data only by the field names and not by\n   their offsets (numbers are illegal property names).\n  \n  \n   With regard to speed, the function is identical to\n   ingres_fetch_array(), and almost as quick as\n   ingres_fetch_row() (the difference is\n   insignificant).\n  \n  Note: \n   Related Configurations\n   \n    See also the ingres.fetch_buffer_size\n    and ingres.utf8\n    directives in Runtime\n    Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      \n       (Optional argument.) result_type is a\n       constant and can take the following values: INGRES_ASSOC,\n       INGRES_NUM, and INGRES_BOTH.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object that corresponds to the fetched row,\n   or FALSE if there are no more rows\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Fetch a row into an object\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_object($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row-&gt;user_id;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row-&gt;fullname;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_num_fields() - Get the number of fields returned by the last query\n    ingres_field_name() - Get the name of a field in a query result\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-row.php","title":"ingres_fetch_row","description":"\n \n  ingres_fetch_row\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_fetch_row &mdash; Fetch a row of result into an enumerated array\n\n \n\n \n  Description\n  \n   array ingres_fetch_row\n    ( resource $result\n   )\n\n  \n   ingres_fetch_row() returns an array that\n   corresponds to the fetched row, or FALSE if there are no more\n   rows. Each result column is stored in an array offset, starting\n   at offset 1.\n  \n  \n   Subsequent calls to ingres_fetch_row()\n   return the next row in the result set, or FALSE if there are no\n   more rows.\n  \n  \n   By default, arrays created by ingres_fetch_row() start\n   from position 1 and not 0 as with other DBMS extensions. The starting position\n   can be adjusted to 0 using the configuration parameter ingres.array_index_start.\n  \n  Note: \n   Related Configurations\n   \n    See also the ingres.array_index_start, ingres.fetch_buffer_size\n    and ingres.utf8\n    directives in Runtime\n    Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row,\n   or FALSE if there are no more rows\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Fetch a row of result into an enumerated array\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_num_fields() - Get the number of fields returned by the last query\n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-name.php","title":"ingres_field_name","description":"\n \n  ingres_field_name\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_name &mdash; Get the name of a field in a query result\n\n \n \n \n  Description\n  \n   string ingres_field_name\n    ( resource $result\n   , int $index\n   )\n\n  \n   ingres_field_name() returns the name of a field\n   in a query result.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the field whose name will be\n       retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the name of a field\n   in a query result or FALSE on failure\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-length.php","title":"ingres_field_length","description":"\n \n  ingres_field_length\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_length &mdash; Get the length of a field\n\n \n \n \n  Description\n  \n   int ingres_field_length\n    ( resource $result\n   , int $index\n   )\n\n  \n   ingres_field_length() returns the length of a\n   field.  This is the number of bytes the server uses to store\n   the field.  For detailed information, see the Ingres OpenAPI User\n   Guide, Appendix &quot;Data Types&quot; in the Ingres documentation.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the column number whose length\n       will be retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of a field.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-nullable.php","title":"ingres_field_nullable","description":"\n \n  ingres_field_nullable\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_nullable &mdash; Test if a field is nullable\n\n \n \n \n  Description\n  \n   bool ingres_field_nullable\n    ( resource $result\n   , int $index\n   )\n\n  \n   Test if a field is nullable.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the field whose nullability will be\n       retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   ingres_field_nullable() returns TRUE if the\n   field can be set to the NULL value and FALSE if it cannot\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-fetch-proc-return.php","title":"ingres_fetch_proc_return","description":"\n \n  ingres_fetch_proc_return\n  (PECL ingres &gt;= 1.4.0)ingres_fetch_proc_return &mdash; Get the return value from a procedure call\n\n \n \n \n  Description\n  \n   int ingres_fetch_proc_return\n    ( resource $result\n   )\n\n  \n   This function is used to retrieve the return value following the execution\n   of an Ingres database procedure (stored procedure). \n  \n  Note: \n   \n    If used with a row-producing procedure, this function should be called after all the\n    rows from the procedure have been fetched using\n    ingres_fetch_array(),\n    ingres_fetch_object() or\n    ingres_fetch_row(). This function will eliminate any\n    rows yet to be fetched should there be any left over.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result identifier for a query\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an integer if there is a return value otherwise it will\n   return NULL.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Get the return value from a procedure call\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database);if&nbsp;(&nbsp;ingres_errno()&nbsp;!=&nbsp;0&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$error_text&nbsp;=&nbsp;ingres_error();&nbsp;&nbsp;&nbsp;&nbsp;die($error_text);}$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"execute&nbsp;procedure&nbsp;php_proc&nbsp;(value&nbsp;=&nbsp;1000)\");if&nbsp;(&nbsp;ingres_errno()&nbsp;!=&nbsp;0&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$error_text&nbsp;=&nbsp;ingres_error();&nbsp;&nbsp;&nbsp;&nbsp;die($error_text);}echo&nbsp;\"return&nbsp;value&nbsp;-&nbsp;\"&nbsp;.&nbsp;ingres_fetch_proc_return($result)&nbsp;.&nbsp;\"\\n\";ingres_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-precision.php","title":"ingres_field_precision","description":"\n \n  ingres_field_precision\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_precision &mdash; Get the precision of a field\n\n \n \n \n  Description\n  \n   int ingres_field_precision\n    ( resource $result\n   , int $index\n   )\n\n  \n   ingres_field_precision() returns the precision\n   of a field. This value is used only for decimal, float, and money\n   SQL data types. For detailed information, see the Ingres OpenAPI\n   User Guide, Appendix &quot;Data Types&quot; in the Ingres documentation.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the field whose precision will be\n       retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the field precision as an integer\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-scale.php","title":"ingres_field_scale","description":"\n \n  ingres_field_scale\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_scale &mdash; Get the scale of a field\n\n \n \n \n  Description\n  \n   int ingres_field_scale\n    ( resource $result\n   , int $index\n   )\n\n  \n   ingres_field_scale() returns the scale of a\n   field.  This value is used only for the decimal SQL data\n   type. For detailed information, see the Ingres OpenAPI User\n   Guide, Appendix &quot;Data Types&quot; in the Ingres documentation.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the field whose scale will be\n       retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n    \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the scale of the field, as an integer\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-field-type.php","title":"ingres_field_type","description":"\n \n  ingres_field_type\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_field_type &mdash; Get the type of a field in a query result\n\n \n \n \n  Description\n  \n   string ingres_field_type\n    ( resource $result\n   , int $index\n   )\n\n  \n   Get the type of a field in a query result.\n  \n  Note: \n   Related Configurations\n   \n    See ingres.array_index_start\n    in Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n    \n\n     index\n     \n\n      \n       index is the field whose type will be\n       retrieved.\n      \n      \n       The possible values of index depend upon\n       the value\n       of ingres.array_index_start.\n       If ingres.array_index_start\n       is 1 (the default)\n       then index must be\n       between 1 and the value returned\n       by ingres_num_fields(). If ingres.array_index_start\n       is 0 then index must\n       be between 0\n       and ingres_num_fields() -\n       1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   ingres_field_type() returns the type of a\n   field in a query result or FALSE on failure.  Examples of\n   types returned are IIAPI_BYTE_TYPE,\n   IIAPI_CHA_TYPE, IIAPI_DTE_TYPE,\n   IIAPI_FLT_TYPE, IIAPI_INT_TYPE,\n   IIAPI_VCH_TYPE. Some of these types can map to more\n   than one SQL type depending on the length of the field (see\n   ingres_field_length()). For example\n   IIAPI_FLT_TYPE can be a float4 or a float8. For detailed\n   information, see the Ingres OpenAPI User Guide, Appendix \n   &quot;Data Types&quot; in the Ingres documentation.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-next-error.php","title":"ingres_next_error","description":"\n \n  ingres_next_error\n  (PECL ingres &gt;= 2.0.0)ingres_next_error &mdash; Get the next Ingres error\n\n \n \n \n  Description\n  \n   bool ingres_next_error\n    ([ resource $link\n  ] )\n\n  \n   Get the next Ingres error for the last executed query. Each call to\n   ingres_next_error() can be followed by a call to\n   ingres_errno(), ingres_error() \n   or ingres_errsqlstate() to get the respective error\n   number, error text, or SQL STATE. While\n   ingres_next_error() returns TRUE, there are more errors\n   to fetch.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   ingres_next_error() returns TRUE if there is another\n   error to retrieve or FALSE when there are no more errors\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n    ingres_errsqlstate() - Get the last SQLSTATE error code generated\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-free-result.php","title":"ingres_free_result","description":"\n \n  ingres_free_result\n  (PECL ingres &gt;= 2.0.0)ingres_free_result &mdash; Free the resources associated with a result identifier\n\n \n \n \n  Description\n  \n   bool ingres_free_result\n    ( resource $result\n   )\n\n  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure. \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Free a result resource\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect($database,&nbsp;$user,&nbsp;$password);$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;table\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}ingres_free_result($result);ingres_close($link)?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-num-fields.php","title":"ingres_num_fields","description":"\n \n  ingres_num_fields\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_num_fields &mdash; Get the number of fields returned by the last query\n\n \n \n \n  Description\n  \n   int ingres_num_fields\n    ( resource $result\n   )\n\n  \n   ingres_num_fields() returns the number of\n   fields in the results returned by the Ingres server after a call\n   to ingres_query().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The query result identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of fields\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-num-rows.php","title":"ingres_num_rows","description":"\n \n  ingres_num_rows\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_num_rows &mdash; Get the number of rows affected or returned by a query\n\n \n \n \n  Description\n  \n   int ingres_num_rows\n    ( resource $result\n   )\n\n  \n   This function primarily is meant to get the number of rows\n   modified in the database. However, it can be used to retrieve the number of\n   rows to fetch for a SELECT statement.\n  \n  Note: \n   \n    If scrollable cursors are disabled and\n    this function is called before\n    using ingres_fetch_array(),\n    ingres_fetch_object(), or\n    ingres_fetch_row(), the server will delete\n    the result&#039;s data and the script will be unable to get them.\n   \n   \n    Instead, you should retrieve the result&#039;s data using one of\n    these fetch functions in a loop until it returns FALSE,\n    indicating that no more results are available.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result identifier for a query\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   For delete, insert, or update queries,\n   ingres_num_rows() returns the number of rows\n   affected by the query. For other queries,\n   ingres_num_rows() returns the number of rows\n   in the query&#039;s result.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-pconnect.php","title":"ingres_pconnect","description":"\n \n  ingres_pconnect\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_pconnect &mdash; Open a persistent connection to an Ingres database\n\n \n \n \n  Description\n  \n   resource ingres_pconnect\n    ([ string $database\n   [, string $username\n   [, string $password\n   [, array $options\n  ]]]] )\n\n  \n   Open a persistent connection to an Ingres database.\n  \n  \n   There are only two differences between this function and \n   ingres_connect(): First, when connecting, the\n   function will initially try to find a (persistent) link that is\n   already opened with the same parameters.  If one is found, an\n   identifier for it will be returned instead of opening a new\n   connection. Second, the connection to the Ingres server will not\n   be closed when the execution of the script ends.  Instead, the\n   link will remain open for future use\n   (ingres_close() will not close links\n   established by ingres_pconnect()). This type\n   of link is therefore called &quot;persistent&quot;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The database name. Must follow the syntax:\n      \n      \n       [vnode::]dbname[\/svr_class]\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The Ingres user name\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password associated with username\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       See ingres_connect() for the list of options that\n       can be passed\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an Ingres link resource on success or FALSE on failure\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_connect() - Open a connection to an Ingres database\n    ingres_close() - Close an Ingres database connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-prepare.php","title":"ingres_prepare","description":"\n \n  ingres_prepare\n  (PECL ingres &gt;= 1.1.0)ingres_prepare &mdash; Prepare a query for later execution\n\n \n \n \n  Description\n  \n   mixed ingres_prepare\n    ( resource $link\n   , string $query\n   )\n\n  \n   Prepares a query for execution by ingres_execute().\n  \n  \n   The query becomes part of the currently open transaction.  If\n   there is no open transaction, ingres_query()\n   opens a new transaction. To close the transaction, you can \n   call either ingres_commit() to commit the changes\n   made to the database or ingres_rollback() to\n   cancel these changes. When the script ends, any open transaction\n   is rolled back (by calling\n   ingres_rollback()). You can also use\n   ingres_autocommit() before opening a new\n   transaction to have every SQL query immediately committed.\n  \n\n  Note: \n   Related Configurations\n   \n    See also the ingres.describe,\n    ingres.scrollable and\n    ingres.utf8 directives in \n    Runtime Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       A valid SQL query (see the Ingres SQL reference\n       guide) in the Ingres documentation.\n       See the query\n       parameter in ingres_query() for a list of SQL\n       statements which cannot be executed using\n       ingres_prepare()\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   ingres_prepare() returns a query result identifier that\n   is used with ingres_execute() to execute the query. To see \n   if an error occurred, use ingres_errno(), \n   ingres_error(), or \n   ingres_errsqlstate().\n  \n \n\n\n\n\n \n  See Also\n  \n   \n    ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n    ingres_commit() - Commit a transaction\n    ingres_rollback() - Roll back a transaction\n    ingres_autocommit() - Switch autocommit on or off\n    ingres_set_environment() - Set environment features controlling output options\n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-rollback.php","title":"ingres_rollback","description":"\n \n  ingres_rollback\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_rollback &mdash; Roll back a transaction\n\n \n \n \n  Description\n  \n   bool ingres_rollback\n    ( resource $link\n   )\n\n  \n   ingres_rollback() rolls back the currently\n   open transaction, actually cancelling all changes made to the\n   database during the transaction.\n  \n  \n   This closes the transaction. A new transaction can be opened by sending a\n   query with ingres_query().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_commit() - Commit a transaction\n    ingres_autocommit() - Switch autocommit on or off\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-result-seek.php","title":"ingres_result_seek","description":"\n \n  ingres_result_seek\n  (PECL ingres &gt;= 2.1.0)ingres_result_seek &mdash; Set the row position before fetching data\n\n \n \n \n  Description\n  \n   bool ingres_result_seek\n    ( resource $result\n   , int $position\n   )\n\n  \n   This function is used to position the cursor associated with the result\n   resource before issuing a fetch.  If ingres.array_index_start\n   is set to 0 then the first row is 0 else it is 1.\n   ingres_result_seek() can be used only with queries that\n   make use of scrollable\n   cursors. It cannot be used with\n   ingres_unbuffered_query().\n  \n\n  Note: \n   Related Configurations\n   \n    See also the ingres.scrollable\n    and ingres.array_index_start directives in \n    Runtime Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result identifier for a query\n      \n     \n\n    \n\n    \n\n     position\n     \n\n      \n       The row to position the cursor on. If ingres.array_index_start\n       is set to 0, then the first row is 0, else it is 1\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Position the cursor on the 3rd row\n    \n\n&lt;?php$result=ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;airport&nbsp;where&nbsp;ap_ccode&nbsp;=&nbsp;'ES'&nbsp;order&nbsp;by&nbsp;ap_place&nbsp;asc\");\/*&nbsp;goto&nbsp;row&nbsp;3&nbsp;*\/if&nbsp;(!ingres_result_seek($result,&nbsp;3)){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;ingres_errno()&nbsp;.&nbsp;\"&nbsp;-&nbsp;\"&nbsp;.&nbsp;ingres_error&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;die(\"i&nbsp;died\");}else{&nbsp;&nbsp;&nbsp;&nbsp;$airport&nbsp;=&nbsp;ingres_fetch_object&nbsp;($result);&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$airport-&gt;ap_iatacode&nbsp;.&nbsp;\"&nbsp;-&nbsp;\"&nbsp;.&nbsp;&nbsp;$airport-&gt;ap_name&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}ingres_commit($link);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-query.php","title":"ingres_query","description":"\n \n  ingres_query\n  (PHP 4 &gt;= 4.0.2, PHP 5 &lt;= 5.0.5, PECL ingres &gt;= 1.0.0)ingres_query &mdash; Send an SQL query to Ingres\n\n \n \n \n  Description\n  \n   mixed ingres_query\n    ( resource $link\n   , string $query\n   [, array $params\n   [, string $types\n  ]] )\n\n  \n   ingres_query() sends the given\n   query to the Ingres server. \n  \n  \n   The query becomes part of the currently open transaction.  If\n   there is no open transaction, ingres_query()\n   opens a new transaction. To close the transaction, you can \n   call either ingres_commit() to commit the changes\n   made to the database or ingres_rollback() to\n   cancel these changes. When the script ends, any open transaction\n   is rolled back (by calling\n   ingres_rollback()). You can also use\n   ingres_autocommit() before opening a new\n   transaction to have every SQL query immediately committed.\n  \n  Note: \n   Related Configurations\n   \n    See also the ingres.describe,\n    ingres.scrollable and\n    ingres.utf8 directives in \n    Runtime Configuration\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier.\n      \n     \n\n    \n\n    \n     query\n     \n\n      \n       A valid SQL query (see the Ingres SQL reference\n       guide) in the Ingres documentation.\n      \n      \n       Data inside the query should be properly escaped.\n      \n      \n       The following types of SQL queries cannot be sent with this function:\n       \n        \n         \n          close (see ingres_close())\n         \n        \n       \n         \n          commit (see ingres_commit())\n         \n        \n        \n         \n          connect (see ingres_connect())\n         \n        \n        \n         \n          disconnect (see ingres_close())\n         \n        \n        \n         get dbevent\n        \n        \n         prepare to commit\n        \n        \n         \n          rollback (see ingres_rollback())\n         \n        \n        savepoint\n        \n         \n          set autocommit (see ingres_autocommit())\n         \n        \n        \n         all cursor-related queries are unsupported\n        \n       \n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array of parameter values to be used with the query\n      \n     \n\n    \n\n    \n     types\n     \n\n      \n       A string containing a sequence of types for the parameter values\n       passed. When ingres.describe\n       is enabled, this parameter can be ignored as the driver automatically\n       fetches the expected parameter types from the server.\n      \n      \n       \n        \n         \n          Type code\n          Ingres type\n         \n\n        \n\n        \n         \n          a\n          BOOLEAN\n         \n\n         \n          b\n          BYTE\n         \n\n         \n          B\n          LONG BYTE\/BLOB\n         \n\n         \n          c\n          CHAR\n         \n\n         \n          d\n          DATE\/ANSIDATE\/TIMESTAMP\/TIME\n         \n\n         \n          f\n          FLOAT\n         \n\n         \n          i\n          INTEGER\n         \n\n         \n          L\n          LONG TEXT\n         \n\n         \n          m\n          MONEY\n         \n\n         \n          M\n          LONG NVARCHAR\n         \n\n         \n          n\n          NCHAR\n         \n\n         \n          N\n          NVARCHAR\n         \n\n         \n          t\n          TEXT\n         \n\n         \n          v\n          VARCHAR\n         \n\n         \n          V\n          LONG VARCHAR\n         \n\n        \n       \n      \n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   ingres_query() returns a query result identifier on\n   success else it returns FALSE. To see if an error\n   occurred use ingres_errno(), \n   ingres_error() or \n   ingres_errsqlstate().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Send a simple select\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");$result&nbsp;=&nbsp;ingres_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;user_profile\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Passing query parameters to ingres_query()\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");$params[]&nbsp;=&nbsp;\"Emma\";$query&nbsp;=&nbsp;\"select&nbsp;*&nbsp;from&nbsp;user_profile&nbsp;where&nbsp;up_first&nbsp;=&nbsp;?\";$result&nbsp;=&nbsp;ingres_query($link,&nbsp;$query,&nbsp;$params);while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n   \n    Example #3 Inserting a BLOB with parameter types\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");\/\/Open&nbsp;a&nbsp;photo$fh&nbsp;=&nbsp;fopen(\"photo.jpg\",\"r\");$blob_data&nbsp;=&nbsp;stream_get_contents($fh);fclose($fh);\/\/Prepare&nbsp;parameters$params[]&nbsp;=&nbsp;$blob_data;$params[]&nbsp;=&nbsp;1201;\/\/Define&nbsp;parameter&nbsp;types$param_types&nbsp;=&nbsp;\"Bi\";$query&nbsp;=&nbsp;\"update&nbsp;user_profile&nbsp;set&nbsp;up_image&nbsp;=&nbsp;?&nbsp;where&nbsp;up_id&nbsp;=&nbsp;?\";$result&nbsp;=&nbsp;ingres_query($link,&nbsp;$query&nbsp;,&nbsp;$params,&nbsp;$param_types);if&nbsp;(ingres_errno()){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;ingres_errno()&nbsp;.&nbsp;\"-\"&nbsp;.&nbsp;ingres_error()&nbsp;.&nbsp;\"\\n\";}ingres_commit($link);ingres_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_unbuffered_query() - Send an unbuffered  SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n    ingres_commit() - Commit a transaction\n    ingres_rollback() - Roll back a transaction\n    ingres_autocommit() - Switch autocommit on or off\n    ingres_set_environment() - Set environment features controlling output options\n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-set-environment.php","title":"ingres_set_environment","description":"\n \n  ingres_set_environment\n  (PECL ingres &gt;= 1.2.0)ingres_set_environment &mdash; Set environment features controlling output options\n\n \n \n \n  Description\n  \n   bool ingres_set_environment\n    ( resource $link\n   , array $options\n   )\n\n  \n   ingres_set_environment() is called to set environmental\n   options that affect the output of certain values from Ingres, such as the\n   timezone, date format, decimal character separator, and float precision.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n    \n     options\n     \n\n      \n       An enumerated array of option name\/value pairs. The following table\n       lists the option name and the expected type\n      \n      \n       \n        \n         \n          \n           Option name\n           Option type\n           Description\n           Example\n          \n\n         \n\n         \n          \n           date_century_boundary\n           integer\n           The threshold by which a 2-digit year is determined to be in\n           the current century or in the next century. Equivalent to II_DATE_CENTURY_BOUNDARY\n           50\n          \n\n          \n           timezone\n           string\n           Controls the timezone of the session. If not set, it will\n           default the value defined by II_TIMEZONE_NAME. If\n           II_TIMEZONE_NAME is not defined, NA-PACIFIC (GMT-8 with Daylight\n           Savings) is used.\n           UNITED-KINGDOM\n          \n\n          \n           date_format\n           integer\n           Sets the allowable input and output format for Ingres dates.\n           Defaults to the value defined by II_DATE_FORMAT. If II_DATE_FORMAT is\n           not set, the default date format is US, for example mm\/dd\/yy. Valid values\n           for date_format are:\n            \n             INGRES_DATE_DMY\n             INGRES_DATE_FINISH\n             INGRES_DATE_GERMAN\n             INGRES_DATE_ISO\n             INGRES_DATE_ISO4\n             INGRES_DATE_MDY\n             INGRES_DATE_MULTINATIONAL\n             INGRES_DATE_MULTINATIONAL4\n             INGRES_DATE_YMD\n             INGRES_DATE_US\n            \n            \n           \n           INGRES_DATE_ISO4\n          \n\n          \n           decimal_separator\n           string\n           The character identifier for decimal data\n           &quot;,&quot;\n          \n\n          \n           money_lort\n           integer\n           Leading or trailing currency sign. Valid values for money_lort\n           are:\n            \n             INGRES_MONEY_LEADING\n             INGRES_MONEY_TRAILING\n            \n            \n           \n           INGRES_MONEY_LEADING\n          \n\n          \n           money_sign\n           string\n           The currency symbol to be used with the MONEY datatype\n           \u20ac\n          \n\n          \n           money_precision\n           integer\n           The precision of the MONEY datatype\n           2\n          \n\n          \n           float4_precision\n           integer\n           Precision of the FLOAT4 datatype\n           10\n          \n\n          \n           float8_precision\n           integer\n           Precision of the FLOAT8 data\n           10\n          \n\n          \n           blob_segment_length\n           integer\n           The amount of data in bytes to fetch at a time when retrieving\n           BLOB or CLOB data. Defaults to 4096 bytes when not set explicitly\n           8192\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Set date_format to ISO4\n    \n\n&lt;?php$options&nbsp;=&nbsp;array(&nbsp;\"date_format\"&nbsp;=&gt;&nbsp;INGRES_DATE_ISO4&nbsp;);if&nbsp;(ingres_set_environment($link,&nbsp;$options)){&nbsp;&nbsp;&nbsp;&nbsp;$result=ingres_query($link,\"select&nbsp;date('now')&nbsp;as&nbsp;date\");&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(&nbsp;$object&nbsp;=&nbsp;ingres_fetch_object&nbsp;($result)&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$object-&gt;date.\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Set timezone to HONG-KONG\n    \n\n&lt;?php$options&nbsp;=&nbsp;array(&nbsp;\"timezone\"&nbsp;=&gt;&nbsp;\"HONG-KONG\");if&nbsp;(ingres_set_environment($link,&nbsp;$options)){&nbsp;&nbsp;&nbsp;&nbsp;$result=ingres_query($link,\"select&nbsp;date('now')&nbsp;as&nbsp;date\");&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(&nbsp;$object&nbsp;=&nbsp;ingres_fetch_object&nbsp;($result)&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$object-&gt;date.\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    ingres_connect() - Open a connection to an Ingres database\n    ingres_query() - Send an SQL query to Ingres\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ingres-unbuffered-query.php","title":"ingres_unbuffered_query","description":"\n \n  ingres_unbuffered_query\n  (No version information available, might only be in SVN)ingres_unbuffered_query &mdash; Send an unbuffered  SQL query to Ingres\n\n \n \n \n  Description\n  \n   mixed ingres_unbuffered_query\n    ( resource $link\n   , string $query\n   [, array $params\n   [, string $types\n  ]] )\n\n  \n   ingres_unbuffered_query() sends the given\n   query to the Ingres server. \n  \n  \n   The query becomes part of the currently open transaction.  If\n   there is no open transaction, ingres_unbuffered_query()\n   opens a new transaction. To close the transaction, you can \n   call either ingres_commit() to commit the changes\n   made to the database or ingres_rollback() to\n   cancel these changes. When the script ends, any open transaction\n   is rolled back (by calling\n   ingres_rollback()). You can also use\n   ingres_autocommit() before opening a new\n   transaction to have every SQL query immediately committed.\n   Ingres allows only a single unbuffered statement to be active at any\n   one time. The extension will close any active unbuffered statements before\n   executing any SQL. In addition you cannot use\n   ingres_result_seek() to position the row before\n   fetching.\n  \n\n  Note: \n   Related Configurations\n   \n    See also the ingres.describe\n    and ingres.utf8 directives in \n    Runtime Configuration.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link\n     \n\n      \n       The connection link identifier\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       A valid SQL query (see the Ingres SQL reference\n       guide) in the Ingres documentation.\n       See the query\n       parameter in ingres_query() for a list of SQL\n       statements that cannot be executed via\n       ingres_unbuffered_query().\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array of parameter values to be used with the query\n      \n     \n\n    \n\n    \n\n     types\n     \n\n      \n       A string containing a sequence of types for the parameter values\n       passed. See the types parameter in\n       ingres_query() for the list of type codes.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   ingres_unbuffered_query() returns a query result identifier when\n   there are rows to fetch; else it returns FALSE when there are no rows, as\n   is the case of an INSERT, UPDATE, or DELETE statement. To see if an error\n   occurred, use ingres_errno(), \n   ingres_error(), or \n   ingres_errsqlstate().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Issue a simple un-buffered select\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");$result&nbsp;=&nbsp;ingres_unbuffered_query($link,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;user_profile\");while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Passing query parameters to ingres_unbuffered_query()\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");$params[]&nbsp;=&nbsp;\"Emma\";$query&nbsp;=&nbsp;\"select&nbsp;*&nbsp;from&nbsp;user_profile&nbsp;where&nbsp;up_first&nbsp;=&nbsp;?\";$result&nbsp;=&nbsp;ingres_unbuffered_query($link,&nbsp;$query,&nbsp;$params);while&nbsp;($row&nbsp;=&nbsp;ingres_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[2];}?&gt;\n\n\n    \n\n   \n   \n    Example #3 Inserting a BLOB with parameter types\n    \n\n&lt;?php$link&nbsp;=&nbsp;ingres_connect(\"demodb\");\/\/Open&nbsp;a&nbsp;photo$fh&nbsp;=&nbsp;fopen(\"photo.jpg\",\"r\");$blob_data&nbsp;=&nbsp;stream_get_contents($fh);fclose($fh);\/\/Prepare&nbsp;parameters$params[]&nbsp;=&nbsp;$blob_data;$params[]&nbsp;=&nbsp;1201;\/\/Define&nbsp;parameter&nbsp;types$param_types&nbsp;=&nbsp;\"Bi\";$query&nbsp;=&nbsp;\"update&nbsp;user_profile&nbsp;set&nbsp;up_image&nbsp;=&nbsp;?&nbsp;where&nbsp;up_id&nbsp;=&nbsp;?\";$result&nbsp;=&nbsp;ingres_unbuffered_query($link,&nbsp;$query&nbsp;,&nbsp;$params,&nbsp;$param_types);if&nbsp;(ingres_errno()){&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;ingres_errno()&nbsp;.&nbsp;\"-\"&nbsp;.&nbsp;ingres_error()&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ingres_query() - Send an SQL query to Ingres\n    ingres_fetch_array() - Fetch a row of result into an array\n    ingres_fetch_assoc() - Fetch a row of result into an associative array\n    ingres_fetch_object() - Fetch a row of result into an object\n    ingres_fetch_row() - Fetch a row of result into an enumerated array\n    ingres_commit() - Commit a transaction\n    ingres_rollback() - Roll back a transaction\n    ingres_autocommit() - Switch autocommit on or off\n    ingres_set_environment() - Set environment features controlling output options\n    ingres_errno() - Get the last Ingres error number generated\n    ingres_error() - Get a meaningful error message for the last error generated\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-alerts.php","title":"imap_alerts","description":"\n \n  imap_alerts\n  (PHP 4, PHP 5)imap_alerts &mdash; Returns all IMAP alert messages that have occurred\n\n \n \n  Description\n  \n   array imap_alerts\n    ( void\n   )\n\n  \n   Returns all of the IMAP alert messages generated since the last\n   imap_alerts() call, or the beginning of the page. \n  \n  \n   When imap_alerts() is called, the alert stack is\n   subsequently cleared. The IMAP specification requires that these messages\n   be passed to the user.\n  \n \n\n \n  Return Values\n  \n   Returns an array of all of the IMAP alert messages generated or FALSE if\n   no alert messages are available.\n  \n \n\n \n  See Also\n  \n   \n    imap_errors() - Returns all of the IMAP errors that have occured\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-base64.php","title":"imap_base64","description":"\n \n  imap_base64\n  (PHP 4, PHP 5)imap_base64 &mdash; Decode BASE64 encoded text\n\n \n \n  Description\n  \n   string imap_base64\n    ( string $text\n   )\n\n  \n   Decodes the given BASE-64 encoded text. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     text\n     \n\n      \n       The encoded text\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the decoded message as a string.\n  \n \n\n \n  See Also\n  \n   \n    imap_binary() - Convert an 8bit string to a base64 string\n    base64_encode() - Encodes data with MIME base64\n    base64_decode() - Decodes data encoded with MIME base64\n    &raquo;&nbsp;RFC2045, Section 6.8\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-8bit.php","title":"imap_8bit","description":"\n \n  imap_8bit\n  (PHP 4, PHP 5)imap_8bit &mdash; Convert an 8bit string to a quoted-printable string\n\n \n \n  Description\n  \n   string imap_8bit\n    ( string $string\n   )\n\n  \n   Convert an 8bit string to a quoted-printable string (according to\n   &raquo;&nbsp;RFC2045, section 6.7).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The 8bit string to convert\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a quoted-printable string.\n  \n \n\n \n  See Also\n  \n   \n    imap_qprint() - Convert a quoted-printable string to an 8 bit string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-append.php","title":"imap_append","description":"\n \n  imap_append\n  (PHP 4, PHP 5)imap_append &mdash; Append a string message to a specified mailbox\n\n \n \n  Description\n  \n   bool imap_append\n    ( resource $imap_stream\n   , string $mailbox\n   , string $message\n   [, string $options = NULL\n   [, string $internal_date = NULL\n  ]] )\n\n  \n   Appends a string message to the specified mailbox. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     message\n     \n\n      \n       The message to be append, as a string\n      \n      \n       When talking to the Cyrus IMAP server, you must use &quot;\\r\\n&quot; as\n       your end-of-line terminator instead of &quot;\\n&quot; or the operation will\n       fail\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       If provided, the options will also be written\n       to the mailbox\n      \n     \n\n    \n\n    \n\n     internal_date\n     \n\n      \n       If this parameter is set, it will set the INTERNALDATE on the appended message.  The parameter should be a date string that conforms to the rfc2060 specifications for a date_time value.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.2\n       \n        Added INTERNALDATE support to imap_append.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 imap_append() example\n    \n\n&lt;?php$stream&nbsp;=&nbsp;imap_open(\"{imap.example.org}INBOX.Drafts\",&nbsp;\"username\",&nbsp;\"password\");$check&nbsp;=&nbsp;imap_check($stream);echo&nbsp;\"Msg&nbsp;Count&nbsp;before&nbsp;append:&nbsp;\".&nbsp;$check-&gt;Nmsgs&nbsp;.&nbsp;\"\\n\";imap_append($stream,&nbsp;\"{imap.example.org}INBOX.Drafts\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;\"From:&nbsp;me@example.com\\r\\n\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"To:&nbsp;you@example.com\\r\\n\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"Subject:&nbsp;test\\r\\n\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"\\r\\n\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"this&nbsp;is&nbsp;a&nbsp;test&nbsp;message,&nbsp;please&nbsp;ignore\\r\\n\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);$check&nbsp;=&nbsp;imap_check($stream);echo&nbsp;\"Msg&nbsp;Count&nbsp;after&nbsp;append&nbsp;:&nbsp;\".&nbsp;$check-&gt;Nmsgs&nbsp;.&nbsp;\"\\n\";imap_close($stream);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-binary.php","title":"imap_binary","description":"\n \n  imap_binary\n  (PHP 4, PHP 5)imap_binary &mdash; Convert an 8bit string to a base64 string\n\n \n \n  Description\n  \n   string imap_binary\n    ( string $string\n   )\n\n  \n   Convert an 8bit string to a base64 string according to &raquo;&nbsp;RFC2045, Section 6.8.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The 8bit string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a base64 encoded string.\n  \n \n\n \n  See Also\n  \n   \n    imap_base64() - Decode BASE64 encoded text\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-body.php","title":"imap_body","description":"\n \n  imap_body\n  (PHP 4, PHP 5)imap_body &mdash; Read the message body\n\n \n \n  Description\n  \n   string imap_body\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )\n\n  \n   imap_body() returns the body of the message,\n   numbered msg_number in the current\n   mailbox.\n  \n  \n   imap_body() will only return a verbatim copy of the\n   message body. To extract single parts of a multipart MIME-encoded\n   message you have to use imap_fetchstructure() to\n   analyze its structure and imap_fetchbody() to\n   extract a copy of a single body component.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The optional options are a bit mask\n       with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in internal format, will\n          not canonicalize to CRLF.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the body of the specified message, as a string.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-bodystruct.php","title":"imap_bodystruct","description":"\n \n  imap_bodystruct\n  (PHP 4, PHP 5)imap_bodystruct &mdash; Read the structure of a specified body section of a specific message\n\n \n \n  Description\n  \n   object imap_bodystruct\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   )\n\n  \n   Read the structure of a specified body section of a specific message.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     section\n     \n\n      \n       The body section to read\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the information in an object, for a detailed description\n   of the object structure and properties see \n   imap_fetchstructure().\n  \n \n\n \n  See Also\n  \n   \n    imap_fetchstructure() - Read the structure of a particular message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-check.php","title":"imap_check","description":"\n \n  imap_check\n  (PHP 4, PHP 5)imap_check &mdash; Check current mailbox\n\n \n \n  Description\n  \n   object imap_check\n    ( resource $imap_stream\n   )\n\n  \n   Checks information about the current mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the information in an object with following properties:\n   \n    \n     \n      Date - current system time formatted according to &raquo;&nbsp;RFC2822\n     \n    \n    \n     \n      Driver - protocol used to access this mailbox:\n      POP3, IMAP, NNTP\n     \n    \n    \n     \n      Mailbox - the mailbox name\n     \n    \n    \n     \n      Nmsgs - number of messages in the mailbox\n     \n    \n    \n     \n      Recent - number of recent messages in the mailbox\n     \n    \n   \n  \n  \n   Returns FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_check() example\n    \n\n&lt;?php$imap_obj&nbsp;=&nbsp;imap_check($imap_stream);var_dump($imap_obj);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nobject(stdClass)(5) {\n  [&quot;Date&quot;]=&gt;\n  string(37) &quot;Wed, 10 Dec 2003 17:56:54 +0100 (CET)&quot;\n  [&quot;Driver&quot;]=&gt;\n  string(4) &quot;imap&quot;\n  [&quot;Mailbox&quot;]=&gt;\n  string(54)\n  &quot;{www.example.com:143\/imap\/user=&quot;foo@example.com&quot;}INBOX&quot;\n  [&quot;Nmsgs&quot;]=&gt;\n  int(1)\n  [&quot;Recent&quot;]=&gt;\n  int(0)\n}\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-close.php","title":"imap_close","description":"\n \n  imap_close\n  (PHP 4, PHP 5)imap_close &mdash; Close an IMAP stream\n\n \n \n  Description\n  \n   bool imap_close\n    ( resource $imap_stream\n   [, int $flag = 0\n  ] )\n\n  \n   Closes the imap stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     flag\n     \n\n      \n       If set to CL_EXPUNGE, the function will silently\n       expunge the mailbox before closing, removing all messages marked for\n       deletion. You can achieve the same thing by using\n       imap_expunge()\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_open() - Open an IMAP stream to a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-clearflag-full.php","title":"imap_clearflag_full","description":"\n \n  imap_clearflag_full\n  (PHP 4, PHP 5)imap_clearflag_full &mdash; Clears flags on messages\n\n \n \n  Description\n  \n   bool imap_clearflag_full\n    ( resource $imap_stream\n   , string $sequence\n   , string $flag\n   [, int $options = 0\n  ] )\n\n  \n   This function causes a store to delete the specified\n   flag to the flags set for the\n   messages in the specified sequence.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     sequence\n     \n\n      \n       A sequence of message numbers. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax\n      \n     \n\n    \n\n    \n\n     flag\n     \n\n      \n       The flags which you can unset are &quot;\\\\Seen&quot;, &quot;\\\\Answered&quot;, &quot;\\\\Flagged&quot;,\n       &quot;\\\\Deleted&quot;, and &quot;\\\\Draft&quot; (as defined by &raquo;&nbsp;RFC2060)\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       options are a bit mask and may contain\n       the single option:\n       \n        \n         \n          ST_UID - The sequence argument contains UIDs\n          instead of sequence numbers\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_setflag_full() - Sets flags on messages\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-create.php","title":"imap_create","description":"\n \n  imap_create\n  (PHP 4, PHP 5)imap_create &mdash; Alias of imap_createmailbox()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_createmailbox().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-errors.php","title":"imap_errors","description":"\n \n  imap_errors\n  (PHP 4, PHP 5)imap_errors &mdash; Returns all of the IMAP errors that have occured\n\n \n \n  Description\n  \n   array imap_errors\n    ( void\n   )\n\n  \n   Gets all of the IMAP errors (if any) that have occurred\n   during this page request or since the error stack was reset.\n  \n  \n   When imap_errors() is called, the error stack is\n   subsequently cleared.\n  \n \n\n \n  Return Values\n  \n   This function returns an array of all of the IMAP error messages\n   generated since the last imap_errors() call,\n   or the beginning of the page. Returns FALSE if no error messages are\n   available. \n  \n \n\n \n  See Also\n  \n   \n    imap_last_error() - Gets the last IMAP error that occurred during this page request\n    imap_alerts() - Returns all IMAP alert messages that have occurred\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-delete.php","title":"imap_delete","description":"\n \n  imap_delete\n  (PHP 4, PHP 5)imap_delete &mdash; Mark a message for deletion from current mailbox\n\n \n \n  Description\n  \n   bool imap_delete\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )\n\n  \n   Marks messages listed in msg_number for deletion.\n   Messages marked for deletion will stay in the mailbox until either\n   imap_expunge() is called or\n   imap_close() is called with the optional parameter\n   CL_EXPUNGE.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       You can set the FT_UID which tells the function\n       to treat the msg_number argument as an\n       UID.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_delete() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}INBOX\",&nbsp;\"username\",&nbsp;\"password\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$check&nbsp;=&nbsp;imap_mailboxmsginfo($mbox);echo&nbsp;\"Messages&nbsp;before&nbsp;delete:&nbsp;\"&nbsp;.&nbsp;$check-&gt;Nmsgs&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";imap_delete($mbox,&nbsp;1);$check&nbsp;=&nbsp;imap_mailboxmsginfo($mbox);echo&nbsp;\"Messages&nbsp;after&nbsp;&nbsp;delete:&nbsp;\"&nbsp;.&nbsp;$check-&gt;Nmsgs&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";imap_expunge($mbox);$check&nbsp;=&nbsp;imap_mailboxmsginfo($mbox);echo&nbsp;\"Messages&nbsp;after&nbsp;expunge:&nbsp;\"&nbsp;.&nbsp;$check-&gt;Nmsgs&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n   \n    IMAP mailboxes do not have their message flags saved between\n    connections, so imap_expunge() must be called during\n    the same connection in order for messages marked for deletion to\n    actually be purged.\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_undelete() - Unmark the message which is marked deleted\n    imap_expunge() - Delete all messages marked for deletion\n    imap_close() - Close an IMAP stream\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-createmailbox.php","title":"imap_createmailbox","description":"\n \n  imap_createmailbox\n  (PHP 4, PHP 5)imap_createmailbox &mdash; Create a new mailbox\n\n \n \n  Description\n  \n   bool imap_createmailbox\n    ( resource $imap_stream\n   , string $mailbox\n   )\n\n  \n   Creates a new mailbox specified by mailbox. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information. Names containing international characters should be\n       encoded by imap_utf7_encode()\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_createmailbox() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"username\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$name1&nbsp;=&nbsp;\"phpnewbox\";$name2&nbsp;=&nbsp;imap_utf7_encode(\"phpnewb\u00f6x\");&nbsp;\/\/&nbsp;phpnewb&amp;w7Y-x$newname&nbsp;=&nbsp;$name1;echo&nbsp;\"Newname&nbsp;will&nbsp;be&nbsp;'$name1'&lt;br&nbsp;\/&gt;\\n\";\/\/&nbsp;we&nbsp;will&nbsp;now&nbsp;create&nbsp;a&nbsp;new&nbsp;mailbox&nbsp;\"phptestbox\"&nbsp;in&nbsp;your&nbsp;inbox&nbsp;folder,\/\/&nbsp;check&nbsp;its&nbsp;status&nbsp;after&nbsp;creation&nbsp;and&nbsp;finaly&nbsp;remove&nbsp;it&nbsp;to&nbsp;restore\/\/&nbsp;your&nbsp;inbox&nbsp;to&nbsp;its&nbsp;initial&nbsp;stateif&nbsp;(@imap_createmailbox($mbox,&nbsp;imap_utf7_encode(\"{imap.example.org}INBOX.$newname\")))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$status&nbsp;=&nbsp;@imap_status($mbox,&nbsp;\"{imap.example.org}INBOX.$newname\",&nbsp;SA_ALL);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($status)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"your&nbsp;new&nbsp;mailbox&nbsp;'$name1'&nbsp;has&nbsp;the&nbsp;following&nbsp;status:&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Messages:&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;messages&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Recent:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;recent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unseen:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;unseen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"UIDnext:&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;uidnext&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"UIDvalidity:\"&nbsp;.&nbsp;$status-&gt;uidvalidity&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(imap_renamemailbox($mbox,&nbsp;\"{imap.example.org}INBOX.$newname\",&nbsp;\"{imap.example.org}INBOX.$name2\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"renamed&nbsp;new&nbsp;mailbox&nbsp;from&nbsp;'$name1'&nbsp;to&nbsp;'$name2'&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$newname&nbsp;=&nbsp;$name2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_renamemailbox&nbsp;on&nbsp;new&nbsp;mailbox&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_status&nbsp;on&nbsp;new&nbsp;mailbox&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(@imap_deletemailbox($mbox,&nbsp;\"{imap.example.org}INBOX.$newname\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"new&nbsp;mailbox&nbsp;removed&nbsp;to&nbsp;restore&nbsp;initial&nbsp;state&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_deletemailbox&nbsp;on&nbsp;new&nbsp;mailbox&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;implode(\"&lt;br&nbsp;\/&gt;\\n\",&nbsp;imap_errors())&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"could&nbsp;not&nbsp;create&nbsp;new&nbsp;mailbox:&nbsp;\"&nbsp;.&nbsp;implode(\"&lt;br&nbsp;\/&gt;\\n\",&nbsp;imap_errors())&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_renamemailbox() - Rename an old mailbox to new mailbox\n    imap_deletemailbox() - Delete a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-deletemailbox.php","title":"imap_deletemailbox","description":"\n \n  imap_deletemailbox\n  (PHP 4, PHP 5)imap_deletemailbox &mdash; Delete a mailbox\n\n \n \n  Description\n  \n   bool imap_deletemailbox\n    ( resource $imap_stream\n   , string $mailbox\n   )\n\n  \n   Deletes the specified mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_createmailbox() - Create a new mailbox\n    imap_renamemailbox() - Rename an old mailbox to new mailbox\n    \n     imap_open() - Open an IMAP stream to a mailbox for the format of\n     mbox\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-expunge.php","title":"imap_expunge","description":"\n \n  imap_expunge\n  (PHP 4, PHP 5)imap_expunge &mdash; Delete all messages marked for deletion\n\n \n \n  Description\n  \n   bool imap_expunge\n    ( resource $imap_stream\n   )\n\n  \n   Deletes all the messages marked for deletion by \n   imap_delete(), imap_mail_move(), or\n   imap_setflag_full().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchmime.php","title":"imap_fetchmime","description":"\n \n  imap_fetchmime\n  (PHP 5 &gt;= 5.3.6)imap_fetchmime &mdash; Fetch MIME headers for a particular section of the message\n\n \n \n  Description\n  \n   string imap_fetchmime\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   [, int $options = 0\n  ] )\n\n  \n   Fetch the MIME headers of a particular section of the body of the specified messages. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     section\n     \n\n      \n       The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the MIME headers of a particular section of the body of the specified messages as a\n   text string.\n  \n \n\n \n  See Also\n  \n   \n    imap_fetchbody() - Fetch a particular section of the body of the message\n    imap_fetchstructure() - Read the structure of a particular message\n    imap_fetchheader() - Returns header for a message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchheader.php","title":"imap_fetchheader","description":"\n \n  imap_fetchheader\n  (PHP 4, PHP 5)imap_fetchheader &mdash; Returns header for a message\n\n \n \n  Description\n  \n   string imap_fetchheader\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )\n\n  \n   This function causes a fetch of the complete, unfiltered &raquo;&nbsp;RFC2822 format header of the specified\n   message.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The possible options are:\n       \n        \n         \n          FT_UID - The msgno\n          argument is a UID\n         \n        \n        \n         \n          FT_INTERNAL - The return string\n          is in &quot;internal&quot; format, without any attempt to\n          canonicalize to CRLF newlines\n         \n        \n        \n         \n          FT_PREFETCHTEXT - The RFC822.TEXT\n          should be pre-fetched at the same time.  This avoids an\n          extra RTT on an IMAP connection if a full message text is\n          desired (e.g. in a &quot;save to local file&quot; operation)\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the header of the specified message as a text string.\n  \n \n\n \n  See Also\n  \n   \n    imap_fetch_overview() - Read an overview of the information in the headers of the given message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetch-overview.php","title":"imap_fetch_overview","description":"\n \n  imap_fetch_overview\n  (PHP 4, PHP 5)imap_fetch_overview &mdash; Read an overview of the information in the headers of the given message\n\n \n \n  Description\n  \n   array imap_fetch_overview\n    ( resource $imap_stream\n   , string $sequence\n   [, int $options = 0\n  ] )\n\n  \n   This function fetches mail headers for the given\n   sequence and returns an overview of their\n   contents.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     sequence\n     \n\n      \n       A message sequence description. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       sequence will contain a sequence of message\n       indices or UIDs, if this parameter is set to \n       FT_UID. \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of objects describing one message header each.\n   The object will only define a property if it exists. The possible\n   properties are:\n   \n    \n     \n      subject - the messages subject\n     \n    \n    \n     \n      from - who sent it\n     \n    \n    \n     \n      to - recipient\n     \n    \n    \n     \n      date - when was it sent\n     \n    \n    \n     \n      message_id - Message-ID\n     \n    \n    \n     \n      references - is a reference to this message id\n     \n    \n    \n     \n      in_reply_to - is a reply to this message id\n     \n    \n    \n     \n      size - size in bytes\n     \n    \n    \n     \n      uid - UID the message has in the mailbox\n     \n    \n    \n     \n      msgno - message sequence number in the mailbox\n     \n    \n    \n     \n      recent - this message is flagged as recent\n     \n    \n    \n     \n      flagged -  this message is flagged\n     \n    \n    \n     \n      answered -  this message is flagged as answered\n     \n    \n    \n     \n      deleted -  this message is flagged for deletion\n     \n    \n    \n     \n      seen -  this message is flagged as already read\n     \n    \n    \n     \n      draft -  this message is flagged as being a draft\n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_fetch_overview() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}INBOX\",&nbsp;\"username\",&nbsp;\"password\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$MC&nbsp;=&nbsp;imap_check($mbox);\/\/&nbsp;Fetch&nbsp;an&nbsp;overview&nbsp;for&nbsp;all&nbsp;messages&nbsp;in&nbsp;INBOX$result&nbsp;=&nbsp;imap_fetch_overview($mbox,\"1:{$MC-&gt;Nmsgs}\",0);foreach&nbsp;($result&nbsp;as&nbsp;$overview)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"#{$overview-&gt;msgno}&nbsp;({$overview-&gt;date})&nbsp;-&nbsp;From:&nbsp;{$overview-&gt;from}&nbsp;&nbsp;&nbsp;&nbsp;{$overview-&gt;subject}\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_fetchheader() - Returns header for a message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchtext.php","title":"imap_fetchtext","description":"\n \n  imap_fetchtext\n  (PHP 4, PHP 5)imap_fetchtext &mdash; Alias of imap_body()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_body().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchbody.php","title":"imap_fetchbody","description":"\n \n  imap_fetchbody\n  (PHP 4, PHP 5)imap_fetchbody &mdash; Fetch a particular section of the body of the message\n\n \n \n  Description\n  \n   string imap_fetchbody\n    ( resource $imap_stream\n   , int $msg_number\n   , string $section\n   [, int $options = 0\n  ] )\n\n  \n   Fetch of a particular section of the body of the specified messages. \n   Body parts are not decoded by this function.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     section\n     \n\n      \n       The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a particular section of the body of the specified messages as a\n   text string.\n  \n \n\n \n  See Also\n  \n   \n    imap_savebody() - Save a specific body section to a file\n    imap_fetchstructure() - Read the structure of a particular message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-gc.php","title":"imap_gc","description":"\n \n  imap_gc\n  (PHP 5 &gt;= 5.3.0)imap_gc &mdash; Clears IMAP cache\n\n \n \n  Description\n  \n   bool imap_gc\n    ( resource $imap_stream\n   , int $caches\n   )\n\n  \n   Purges the cache of entries of a specific type.\n  \n \n\n \n  Parameters\n  \n   \n\n     \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     caches\n     \n\n      \n       Specifies the cache to purge. It may one or a combination\n       of the following constants: \n       IMAP_GC_ELT (message cache elements), \n       IMAP_GC_ENV (enveloppe and bodies),\n       IMAP_GC_TEXTS (texts).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n  Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_gc() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}\",&nbsp;\"username\",&nbsp;\"password\");imap_gc($mbox,&nbsp;IMAP_GC_ELT);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-fetchstructure.php","title":"imap_fetchstructure","description":"\n \n  imap_fetchstructure\n  (PHP 4, PHP 5)imap_fetchstructure &mdash; Read the structure of a particular message\n\n \n \n  Description\n  \n   object imap_fetchstructure\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $options = 0\n  ] )\n\n  \n   Fetches all the structured information for a given message. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       This optional parameter only has a single option, \n       FT_UID, which tells the function to treat the\n       msg_number argument as a \n       UID.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an object includes the envelope, internal date, size, flags and\n   body structure along with a similar object for each mime attachment. The\n   structure of the returned objects is as follows:\n  \n  \n   \n    \n     Returned Objects for imap_fetchstructure()\n    \n    \n     \n      \n       type\n       Primary body type\n      \n\n      \n       encoding\n       Body transfer encoding\n      \n\n      \n       ifsubtype\n       TRUE if there is a subtype string\n      \n\n      \n       subtype\n       MIME subtype\n      \n\n      \n       ifdescription\n       TRUE if there is a description string\n      \n\n      \n       description\n       Content description string\n      \n\n      \n       ifid\n       TRUE if there is an identification string\n      \n\n      \n       id\n       Identification string\n      \n\n      \n       lines\n       Number of lines\n      \n\n      \n       bytes\n       Number of bytes\n      \n\n      \n       ifdisposition\n       TRUE if there is a disposition string\n      \n\n      \n       disposition\n       Disposition string\n      \n\n      \n       ifdparameters\n       TRUE if the dparameters array exists\n      \n\n      \n       dparameters\n       An array of objects where each object has an\n        &quot;attribute&quot; and a &quot;value&quot;\n        property corresponding to the parameters on the\n        Content-disposition MIME\n        header.\n      \n\n      \n       ifparameters\n       TRUE if the parameters array exists\n      \n\n      \n       parameters\n       An array of objects where each object has an\n        &quot;attribute&quot; and a &quot;value&quot;\n        property.\n      \n\n      \n       parts\n       An array of objects identical in structure to the top-level\n       object, each of which corresponds to a MIME body\n       part.\n      \n\n     \n    \n   \n\n  \n  \n   \n     Primary body type (may vary with used library)\n     \n      \n      0text\n\n      1multipart\n\n      2message\n\n      3application\n\n      4audio\n\n      5image\n\n      6video\n\n      7other\n\n      \n     \n   \n\n  \n  \n   \n     Transfer encodings (may vary with used library)\n     \n      \n      07BIT\n\n      18BIT\n\n      2BINARY\n\n      3BASE64\n\n      4QUOTED-PRINTABLE\n\n      5OTHER\n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    imap_fetchbody() - Fetch a particular section of the body of the message\n    imap_bodystruct() - Read the structure of a specified body section of a specific message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-get-quotaroot.php","title":"imap_get_quotaroot","description":"\n \n  imap_get_quotaroot\n  (PHP 4 &gt;= 4.3.0, PHP 5)imap_get_quotaroot &mdash; Retrieve the quota settings per user\n\n \n \n  Description\n  \n   array imap_get_quotaroot\n    ( resource $imap_stream\n   , string $quota_root\n   )\n\n  \n   Retrieve the quota settings per user. The limit value represents the total\n   amount of space allowed for this user&#039;s total mailbox usage.  The usage\n   value represents the user&#039;s current total mailbox capacity.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     quota_root\n     \n\n      \n       quota_root should normally be in the form of\n       which mailbox (i.e. INBOX).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of integer values pertaining to the specified user\n   mailbox.  All values contain a key based upon the resource name, and a\n   corresponding array with the usage and limit values within.\n  \n  \n   This function will return FALSE in the case of call failure, and an\n   array of information about the connection upon an un-parsable response\n   from the server.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_get_quotaroot() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"kalowsky\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$quota&nbsp;=&nbsp;imap_get_quotaroot($mbox,&nbsp;\"INBOX\");if&nbsp;(is_array($quota))&nbsp;{&nbsp;&nbsp;&nbsp;$storage&nbsp;=&nbsp;$quota_values['STORAGE'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"STORAGE&nbsp;usage&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$storage['usage'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"STORAGE&nbsp;limit&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$storage['limit'];&nbsp;&nbsp;&nbsp;$message&nbsp;=&nbsp;$quota_values['MESSAGE'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"MESSAGE&nbsp;usage&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$message['usage'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"MESSAGE&nbsp;limit&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$message['limit'];&nbsp;&nbsp;&nbsp;\/*&nbsp;...&nbsp;&nbsp;*\/}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  \n   This function is currently only available to users of the c-client2000\n   or greater library.\n  \n  \n   The imap_stream should be opened as the user whose\n   mailbox you wish to check.\n  \n \n\n \n  See Also\n  \n   \n    imap_open() - Open an IMAP stream to a mailbox\n    imap_set_quota() - Sets a quota for a given mailbox\n    imap_get_quota() - Retrieve the quota level settings, and usage statics per mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getacl.php","title":"imap_getacl","description":"\n \n  imap_getacl\n  (PHP 5)imap_getacl &mdash; Gets the ACL for a given mailbox\n\n \n \n  Description\n  \n   array imap_getacl\n    ( resource $imap_stream\n   , string $mailbox\n   )\n\n  \n   Gets the ACL for a given mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an associative array of &quot;folder&quot; =&gt; &quot;acl&quot; pairs.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_getacl() example\n    \n\n&lt;?phpprint_r(imap_getacl($conn_id,&nbsp;'user.joecool'));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [asubfolder] =&gt; lrswipcda\n    [anothersubfolder] =&gt; lrswipcda\n)\n\n    \n   \n  \n \n\n \n  Notes\n  \n   This function is currently only available to users of the c-client2000\n   or greater library.\n  \n \n\n \n  See Also\n  \n   \n    imap_setacl() - Sets the ACL for a giving mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-get-quota.php","title":"imap_get_quota","description":"\n \n  imap_get_quota\n  (PHP 4 &gt;= 4.0.5, PHP 5)imap_get_quota &mdash; Retrieve the quota level settings, and usage statics per mailbox\n\n \n \n  Description\n  \n   array imap_get_quota\n    ( resource $imap_stream\n   , string $quota_root\n   )\n\n  \n   Retrieve the quota level settings, and usage statics per mailbox.\n  \n  \n   For a non-admin user version of this function,\n   please see the imap_get_quotaroot() function of PHP.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     quota_root\n     \n\n      \n       quota_root should normally be in the form of\n       user.name where name is the mailbox you wish to\n       retrieve information about.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array with integer values limit and usage for the given\n   mailbox.  The value of limit represents the total amount of space\n   allowed for this mailbox.  The usage value represents the mailboxes\n   current level of capacity.  Will return FALSE in the case of failure.\n  \n  \n   As of PHP 4.3, the function more properly reflects the\n   functionality as dictated by the &raquo;&nbsp;RFC2087.\n   The array return value has changed to support an unlimited number of returned \n   resources (i.e.  messages, or sub-folders) with each named resource receiving\n   an individual array key.  Each key value then contains an another array with\n   the usage and limit values within it.\n  \n  \n   For backwards compatibility reasons, the original access methods are\n   still available for use, although it is suggested to update.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_get_quota() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"mailadmin\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$quota_value&nbsp;=&nbsp;imap_get_quota($mbox,&nbsp;\"user.kalowsky\");if&nbsp;(is_array($quota_value))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Usage&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;$quota_value['usage'];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Limit&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;$quota_value['limit'];}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 imap_get_quota() 4.3 or greater example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"mailadmin\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$quota_values&nbsp;=&nbsp;imap_get_quota($mbox,&nbsp;\"user.kalowsky\");if&nbsp;(is_array($quota_values))&nbsp;{&nbsp;&nbsp;&nbsp;$storage&nbsp;=&nbsp;$quota_values['STORAGE'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"STORAGE&nbsp;usage&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$storage['usage'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"STORAGE&nbsp;limit&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$storage['limit'];&nbsp;&nbsp;&nbsp;$message&nbsp;=&nbsp;$quota_values['MESSAGE'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"MESSAGE&nbsp;usage&nbsp;level&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$message['usage'];&nbsp;&nbsp;&nbsp;echo&nbsp;\"MESSAGE&nbsp;limit&nbsp;is:&nbsp;\"&nbsp;.&nbsp;&nbsp;$message['limit'];&nbsp;&nbsp;&nbsp;\/*&nbsp;...&nbsp;&nbsp;*\/}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  \n   This function is currently only available to users of the c-client2000\n   or greater library.\n  \n  \n   The given imap_stream must be opened as the mail\n   administrator, otherwise this function will fail.\n  \n \n\n \n  See Also\n  \n   \n    imap_open() - Open an IMAP stream to a mailbox\n    imap_set_quota() - Sets a quota for a given mailbox\n    imap_get_quotaroot() - Retrieve the quota settings per user\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getsubscribed.php","title":"imap_getsubscribed","description":"\n \n  imap_getsubscribed\n  (PHP 4, PHP 5)imap_getsubscribed &mdash; List all the subscribed mailboxes\n\n \n \n  Description\n  \n   array imap_getsubscribed\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )\n\n  \n   Gets information about the subscribed mailboxes.\n  \n  \n   Identical to imap_getmailboxes(), except that it only\n   returns mailboxes that the user is subscribed to.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     ref\n     \n\n      \n       ref should normally be just the server\n       specification as described in imap_open()\n      \n     \n\n    \n\n    \n\n     pattern\n     \n\n      Specifies where in the mailbox hierarchy\nto start searching.There are two special characters you can\npass as part of the pattern:\n&#039;*&#039; and &#039;&#039;.\n&#039;*&#039; means to return all mailboxes. If you pass\npattern as &#039;*&#039;, you will\nget a list of the entire mailbox hierarchy.\n&#039;&#039;\nmeans to return the current level only.\n&#039;&#039; as the pattern\nparameter will return only the top level\nmailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of objects containing mailbox information. Each\n   object has the attributes name, specifying\n   the full name of the mailbox; delimiter,\n   which is the hierarchy delimiter for the part of the hierarchy\n   this mailbox is in; and\n   attributes. Attributes\n   is a bitmask that can be tested against:\n   \n    \n     \n      LATT_NOINFERIORS - This mailbox has no\n      &quot;children&quot; (there are no mailboxes below this one).\n     \n    \n   \n     \n      LATT_NOSELECT - This is only a container,\n      not a mailbox - you cannot open it.\n     \n    \n    \n     \n      LATT_MARKED - This mailbox is marked.\n      Only used by UW-IMAPD.\n     \n    \n    \n     \n      LATT_UNMARKED - This mailbox is not marked.\n      Only used by UW-IMAPD.\n     \n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-headers.php","title":"imap_headers","description":"\n \n  imap_headers\n  (PHP 4, PHP 5)imap_headers &mdash; Returns headers for all messages in a mailbox\n\n \n \n  Description\n  \n   array imap_headers\n    ( resource $imap_stream\n   )\n\n  \n   Returns headers for all messages in a mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of string formatted with header info. One\n   element per mail message.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-getmailboxes.php","title":"imap_getmailboxes","description":"\n \n  imap_getmailboxes\n  (PHP 4, PHP 5)imap_getmailboxes &mdash; Read the list of mailboxes, returning detailed information on each one\n\n \n \n  Description\n  \n   array imap_getmailboxes\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )\n\n  \n   Gets information on the mailboxes.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     ref\n     \n\n      \n       ref should normally be just the server\n       specification as described in imap_open()\n      \n     \n\n    \n\n    \n\n     pattern\n     \n\n      Specifies where in the mailbox hierarchy\nto start searching.There are two special characters you can\npass as part of the pattern:\n&#039;*&#039; and &#039;&#039;.\n&#039;*&#039; means to return all mailboxes. If you pass\npattern as &#039;*&#039;, you will\nget a list of the entire mailbox hierarchy.\n&#039;&#039;\nmeans to return the current level only.\n&#039;&#039; as the pattern\nparameter will return only the top level\nmailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of objects containing mailbox information. Each\n   object has the attributes name, specifying\n   the full name of the mailbox; delimiter,\n   which is the hierarchy delimiter for the part of the hierarchy\n   this mailbox is in; and\n   attributes. Attributes\n   is a bitmask that can be tested against:\n   \n    \n     \n      LATT_NOINFERIORS - This mailbox contains, and may not contain any\n      &quot;children&quot; (there are no mailboxes below this one). Calling \n      imap_createmailbox() will not work on this mailbox.\n     \n    \n   \n     \n      LATT_NOSELECT - This is only a container,\n      not a mailbox - you cannot open it.\n     \n    \n    \n     \n      LATT_MARKED - This mailbox is marked. This means that it may \n      contain new messages since the last time it was checked. Not provided by all IMAP\n      servers.\n     \n    \n    \n     \n      LATT_UNMARKED - This mailbox is not marked, does not contain new\n      messages.  If either MARKED or UNMARKED is\n      provided, you can assume the IMAP server  supports this feature for this mailbox.\n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_getmailboxes() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"username\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$list&nbsp;=&nbsp;imap_getmailboxes($mbox,&nbsp;\"{imap.example.org}\",&nbsp;\"*\");if&nbsp;(is_array($list))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($list&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"($key)&nbsp;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;imap_utf7_decode($val-&gt;name)&nbsp;.&nbsp;\",\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'\"&nbsp;.&nbsp;$val-&gt;delimiter&nbsp;.&nbsp;\"',\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$val-&gt;attributes&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_getmailboxes&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_getsubscribed() - List all the subscribed mailboxes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-header.php","title":"imap_header","description":"\n \n  imap_header\n  (PHP 4, PHP 5)imap_header &mdash; Alias of imap_headerinfo()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_headerinfo().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-headerinfo.php","title":"imap_headerinfo","description":"\n \n  imap_headerinfo\n  (PHP 4, PHP 5)imap_headerinfo &mdash; Read the header of the message\n\n \n \n  Description\n  \n   object imap_headerinfo\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $fromlength = 0\n   [, int $subjectlength = 0\n   [, string $defaulthost = NULL\n  ]]] )\n\n  \n   Gets information about the given message number by reading its headers.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     fromlength\n     \n\n      \n       Number of characters for the fetchfrom property.\n       Must be greater than or equal to zero.\n      \n     \n\n    \n\n    \n\n     subjectlength\n     \n\n      \n       Number of characters for the fetchsubject property\n       Must be greater than or equal to zero.\n      \n     \n\n    \n\n    \n\n     defaulthost\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the information in an object with following properties:\n   \n    \n     \n      toaddress - full to: line, up to 1024 characters\n     \n    \n    \n     \n      to - an array of objects from the To: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      fromaddress - full from: line, up to 1024 characters\n     \n    \n    \n     \n      from - an array of objects from the From: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      ccaddress - full cc: line, up to 1024 characters\n     \n    \n    \n     \n      cc - an array of objects from the Cc: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      bccaddress - full bcc: line, up to 1024 characters\n     \n    \n    \n     \n      bcc - an array of objects from the Bcc: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      reply_toaddress - full Reply-To: line, up to 1024 characters\n     \n    \n    \n     \n      reply_to - an array of objects from the Reply-To: line, with the following\n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      senderaddress - full sender: line, up to 1024 characters\n     \n    \n    \n     \n      sender - an array of objects from the Sender: line, with the following \n      properties: personal, adl,\n      mailbox, and host\n     \n    \n    \n     \n      return_pathaddress - full Return-Path: line, up to 1024 characters\n     \n    \n    \n     \n      return_path - an array of objects from the Return-Path: line, with the\n      following properties: personal, \n      adl, mailbox, and \n      host\n     \n    \n    \n     \n      remail - \n     \n    \n    \n     \n      date - The message date as found in its headers\n     \n    \n    \n     \n      Date - Same as date\n     \n    \n    \n     \n      subject - The message subject\n     \n    \n    \n     \n      Subject - Same a subject \n     \n    \n    \n     \n      in_reply_to - \n     \n    \n    \n     \n      message_id - \n     \n    \n    \n     \n      newsgroups - \n     \n    \n    \n     \n      followup_to - \n     \n    \n    \n     \n      references - \n     \n    \n    \n     \n      Recent - R if recent and seen, N\n      if recent and not seen, &#039; &#039; if not recent.\n     \n    \n    \n     \n      Unseen - U if not seen AND not recent, &#039; &#039; if seen\n      OR not seen and recent\n     \n    \n    \n     \n      Flagged - F if flagged, &#039; &#039; if not flagged\n     \n    \n    \n     \n      Answered - A if answered, &#039; &#039; if unanswered\n     \n    \n    \n     \n      Deleted - D if deleted, &#039; &#039; if not deleted\n     \n    \n    \n     \n      Draft - X if draft, &#039; &#039; if not draft\n     \n    \n    \n     \n      Msgno - The message number\n     \n    \n    \n     \n      MailDate - \n     \n    \n    \n     \n      Size - The message size\n     \n    \n    \n     \n      udate - mail message date in Unix time\n     \n    \n    \n     \n      fetchfrom - from line formatted to fit fromlength\n      characters\n     \n    \n    \n     \n      fetchsubject - subject line formatted to fit \n      subjectlength characters\n     \n    \n   \n  \n \n\n \n  See Also\n  \n   \n    imap_fetch_overview() - Read an overview of the information in the headers of the given message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-last-error.php","title":"imap_last_error","description":"\n \n  imap_last_error\n  (PHP 4, PHP 5)imap_last_error &mdash; Gets the last IMAP error that occurred during this page request\n\n \n \n  Description\n  \n   string imap_last_error\n    ( void\n   )\n\n  \n   Gets the full text of the last IMAP error message\n   that occurred on the current page. The error stack is untouched; calling \n   imap_last_error() subsequently, with no intervening\n   errors, will return the same error. \n  \n \n\n \n  Return Values\n  \n   Returns the full text of the last IMAP error message that occurred on the\n   current page. Returns FALSE if no error messages are available.\n  \n \n\n \n  See Also\n  \n   \n    imap_errors() - Returns all of the IMAP errors that have occured\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listmailbox.php","title":"imap_listmailbox","description":"\n \n  imap_listmailbox\n  (PHP 4, PHP 5)imap_listmailbox &mdash; Alias of imap_list()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_list().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-list.php","title":"imap_list","description":"\n \n  imap_list\n  (PHP 4, PHP 5)imap_list &mdash; Read the list of mailboxes\n\n \n \n  Description\n  \n   array imap_list\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )\n\n  \n   Read the list of mailboxes.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     ref\n     \n\n      \n       ref should normally be just the server\n       specification as described in imap_open().\n      \n     \n\n    \n\n    \n\n     pattern\n     \n\n      Specifies where in the mailbox hierarchy\nto start searching.There are two special characters you can\npass as part of the pattern:\n&#039;*&#039; and &#039;&#039;.\n&#039;*&#039; means to return all mailboxes. If you pass\npattern as &#039;*&#039;, you will\nget a list of the entire mailbox hierarchy.\n&#039;&#039;\nmeans to return the current level only.\n&#039;&#039; as the pattern\nparameter will return only the top level\nmailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing the names of the mailboxes.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_list() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"username\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$list&nbsp;=&nbsp;imap_list($mbox,&nbsp;\"{imap.example.org}\",&nbsp;\"*\");if&nbsp;(is_array($list))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($list&nbsp;as&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;imap_utf7_decode($val)&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_list&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_getmailboxes() - Read the list of mailboxes, returning detailed information on each one\n    imap_lsub() - List all the subscribed mailboxes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listsubscribed.php","title":"imap_listsubscribed","description":"\n \n  imap_listsubscribed\n  (PHP 4, PHP 5)imap_listsubscribed &mdash; Alias of imap_lsub()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_lsub().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-listscan.php","title":"imap_listscan","description":"\n \n  imap_listscan\n  (PHP 4, PHP 5)imap_listscan &mdash; Returns the list of mailboxes that matches the given text\n\n \n \n  Description\n  \n   array imap_listscan\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   , string $content\n   )\n\n  \n   Returns an array containing the names of the mailboxes that have\n   content in the text of the mailbox.\n  \n  \n   This function is similar to imap_listmailbox(),\n   but it will additionally check for the presence of the string\n   content inside the mailbox data.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     ref\n     \n\n      \n       ref should normally be just the server \n       specification as described in imap_open()\n      \n     \n\n    \n\n    \n\n     pattern\n     \n\n      Specifies where in the mailbox hierarchy\nto start searching.There are two special characters you can\npass as part of the pattern:\n&#039;*&#039; and &#039;&#039;.\n&#039;*&#039; means to return all mailboxes. If you pass\npattern as &#039;*&#039;, you will\nget a list of the entire mailbox hierarchy.\n&#039;&#039;\nmeans to return the current level only.\n&#039;&#039; as the pattern\nparameter will return only the top level\nmailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.\n     \n\n    \n\n    \n\n     content\n     \n\n      \n       The searched string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing the names of the mailboxes that have\n   content in the text of the mailbox.\n  \n \n\n \n  See Also\n  \n   \n    imap_listmailbox() - Alias of imap_list\n    imap_search() - This function returns an array of messages matching the given search criteria\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-lsub.php","title":"imap_lsub","description":"\n \n  imap_lsub\n  (PHP 4, PHP 5)imap_lsub &mdash; List all the subscribed mailboxes\n\n \n \n  Description\n  \n   array imap_lsub\n    ( resource $imap_stream\n   , string $ref\n   , string $pattern\n   )\n\n  \n   Gets an array of all the mailboxes that you have subscribed.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     ref\n     \n\n      \n       ref should normally be just the server \n       specification as described in imap_open()\n      \n     \n\n    \n\n    \n\n     pattern\n     \n\n      Specifies where in the mailbox hierarchy\nto start searching.There are two special characters you can\npass as part of the pattern:\n&#039;*&#039; and &#039;&#039;.\n&#039;*&#039; means to return all mailboxes. If you pass\npattern as &#039;*&#039;, you will\nget a list of the entire mailbox hierarchy.\n&#039;&#039;\nmeans to return the current level only.\n&#039;&#039; as the pattern\nparameter will return only the top level\nmailboxes; &#039;~\/mail\/%&#039; on UW_IMAPD will return every mailbox in the ~\/mail directory, but none in subfolders of that directory.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of all the subscribed mailboxes.\n  \n \n\n \n  See Also\n  \n   \n    imap_list() - Read the list of mailboxes\n    imap_getmailboxes() - Read the list of mailboxes, returning detailed information on each one\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-copy.php","title":"imap_mail_copy","description":"\n \n  imap_mail_copy\n  (PHP 4, PHP 5)imap_mail_copy &mdash; Copy specified messages to a mailbox\n\n \n \n  Description\n  \n   bool imap_mail_copy\n    ( resource $imap_stream\n   , string $msglist\n   , string $mailbox\n   [, int $options = 0\n  ] )\n\n  \n   Copies mail messages specified by msglist\n   to specified mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msglist\n     \n\n      \n       msglist is a range not just message\n       numbers (as described in &raquo;&nbsp;RFC2060).\n      \n     \n\n    \n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       options is a bitmask of one or more of\n       \n        \n         \n          CP_UID - the sequence numbers contain UIDS\n         \n        \n        \n         \n          CP_MOVE - Delete the messages from\n          the current mailbox after copying\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_mail_move() - Move specified messages to a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-compose.php","title":"imap_mail_compose","description":"\n \n  imap_mail_compose\n  (PHP 4, PHP 5)imap_mail_compose &mdash; Create a MIME message based on given envelope and body sections\n\n \n \n  Description\n  \n   string imap_mail_compose\n    ( array $envelope\n   , array $body\n   )\n\n  \n   Create a MIME message based on the given envelope\n   and body sections.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     envelope\n     \n\n      \n       An associative array of headers fields. Valid keys are: &quot;remail&quot;,\n       &quot;return_path&quot;, &quot;date&quot;, &quot;from&quot;, &quot;reply_to&quot;, &quot;in_reply_to&quot;, &quot;subject&quot;,\n       &quot;to&quot;, &quot;cc&quot;, &quot;bcc&quot;, &quot;message_id&quot; and &quot;custom_headers&quot; (which contains\n       associative array of other headers).\n      \n     \n\n    \n\n    \n\n     body\n     \n\n      \n       An indexed array of bodies\n      \n      \n       A body is an associative array which can consist of the following keys:\n       &quot;type&quot;, &quot;encoding&quot;, &quot;charset&quot;, &quot;type.parameters&quot;, &quot;subtype&quot;, &quot;id&quot;,\n       &quot;description&quot;, &quot;disposition.type&quot;, &quot;disposition&quot;, &quot;contents.data&quot;,\n       &quot;lines&quot;, &quot;bytes&quot; and &quot;md5&quot;.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the MIME message.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_mail_compose() example\n    \n\n&lt;?php$envelope[\"from\"]=&nbsp;\"joe@example.com\";$envelope[\"to\"]&nbsp;&nbsp;=&nbsp;\"foo@example.com\";$envelope[\"cc\"]&nbsp;&nbsp;=&nbsp;\"bar@example.com\";$part1[\"type\"]&nbsp;=&nbsp;TYPEMULTIPART;$part1[\"subtype\"]&nbsp;=&nbsp;\"mixed\";$filename&nbsp;=&nbsp;\"\/tmp\/imap.c.gz\";$fp&nbsp;=&nbsp;fopen($filename,&nbsp;\"r\");$contents&nbsp;=&nbsp;fread($fp,&nbsp;filesize($filename));fclose($fp);$part2[\"type\"]&nbsp;=&nbsp;TYPEAPPLICATION;$part2[\"encoding\"]&nbsp;=&nbsp;ENCBINARY;$part2[\"subtype\"]&nbsp;=&nbsp;\"octet-stream\";$part2[\"description\"]&nbsp;=&nbsp;basename($filename);$part2[\"contents.data\"]&nbsp;=&nbsp;$contents;$part3[\"type\"]&nbsp;=&nbsp;TYPETEXT;$part3[\"subtype\"]&nbsp;=&nbsp;\"plain\";$part3[\"description\"]&nbsp;=&nbsp;\"description3\";$part3[\"contents.data\"]&nbsp;=&nbsp;\"contents.data3\\n\\n\\n\\t\";$body[1]&nbsp;=&nbsp;$part1;$body[2]&nbsp;=&nbsp;$part2;$body[3]&nbsp;=&nbsp;$part3;echo&nbsp;nl2br(imap_mail_compose($envelope,&nbsp;$body));?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail.php","title":"imap_mail","description":"\n \n  imap_mail\n  (PHP 4, PHP 5)imap_mail &mdash; Send an email message\n\n \n \n  Description\n  \n   bool imap_mail\n    ( string $to\n   , string $subject\n   , string $message\n   [, string $additional_headers = NULL\n   [, string $cc = NULL\n   [, string $bcc = NULL\n   [, string $rpath = NULL\n  ]]]] )\n\n  \n   This function allows sending of emails with correct handling of\n   Cc and Bcc receivers. \n  \n  \n   The parameters to, cc\n   and bcc are all strings and are all parsed\n   as &raquo;&nbsp;RFC822 address lists.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     to\n     \n\n      \n       The receiver\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The mail subject\n      \n     \n\n    \n\n    \n\n     message\n     \n\n      \n       The mail body\n      \n     \n\n    \n\n    \n\n     additional_headers\n     \n\n      \n       As string with additional headers to be set on the mail\n      \n     \n\n    \n\n    \n\n     cc\n     \n\n      \n      \n     \n\n    \n\n    \n\n     bcc\n     \n\n      \n       The receivers specified in bcc will get the\n       mail, but are excluded from the headers.\n      \n     \n\n    \n\n    \n\n     rpath\n     \n\n      \n       Use this parameter to specify return path upon mail delivery failure.\n       This is useful when using PHP as a mail client for multiple users.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    mail() - Send mail\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mailboxmsginfo.php","title":"imap_mailboxmsginfo","description":"\n \n  imap_mailboxmsginfo\n  (PHP 4, PHP 5)imap_mailboxmsginfo &mdash; Get information about the current mailbox\n\n \n \n  Description\n  \n   object imap_mailboxmsginfo\n    ( resource $imap_stream\n   )\n\n  \n   Checks the current mailbox status on the server. It is similar to\n   imap_status(), but will additionally sum up the size of\n   all messages in the mailbox, which will take some additional time to \n   execute. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the information in an object with following properties:\n   \n    Mailbox properties\n    \n     \n      \n       Date\n       date of last change (current datetime)\n      \n\n      \n       Driver\n       driver\n      \n\n      \n       Mailbox\n       name of the mailbox\n      \n\n      \n       Nmsgs\n       number of messages\n      \n\n      \n       Recent\n       number of recent messages\n      \n\n      \n       Unread\n       number of unread messages\n      \n\n      \n       Deleted\n       number of deleted messages\n      \n\n      \n       Size\n       mailbox size\n      \n\n     \n    \n   \n\n  \n  \n   Returns FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_mailboxmsginfo() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org}INBOX\",&nbsp;\"username\",&nbsp;\"password\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$check&nbsp;=&nbsp;imap_mailboxmsginfo($mbox);if&nbsp;($check)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Date:&nbsp;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;$check-&gt;Date&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Driver:&nbsp;\"&nbsp;&nbsp;&nbsp;.&nbsp;$check-&gt;Driver&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Mailbox:&nbsp;\"&nbsp;&nbsp;.&nbsp;$check-&gt;Mailbox&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Messages:&nbsp;\"&nbsp;.&nbsp;$check-&gt;Nmsgs&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Recent:&nbsp;\"&nbsp;&nbsp;&nbsp;.&nbsp;$check-&gt;Recent&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unread:&nbsp;\"&nbsp;&nbsp;&nbsp;.&nbsp;$check-&gt;Unread&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Deleted:&nbsp;\"&nbsp;&nbsp;.&nbsp;$check-&gt;Deleted&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Size:&nbsp;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;$check-&gt;Size&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\"&nbsp;;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"imap_check()&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mail-move.php","title":"imap_mail_move","description":"\n \n  imap_mail_move\n  (PHP 4, PHP 5)imap_mail_move &mdash; Move specified messages to a mailbox\n\n \n \n  Description\n  \n   bool imap_mail_move\n    ( resource $imap_stream\n   , string $msglist\n   , string $mailbox\n   [, int $options = 0\n  ] )\n\n  \n   Moves mail messages specified by msglist to the\n   specified mailbox. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msglist\n     \n\n      \n       msglist is a range not just message numbers\n       (as described in &raquo;&nbsp;RFC2060).\n      \n     \n\n    \n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       options is a bitmask and may contain the single option:\n       \n        \n         \n          CP_UID - the sequence numbers contain UIDS\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    imap_mail_move() will flag the original \n    mail with a delete flag, to successfully delete it a call to \n    the imap_expunge() function must be made.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    imap_mail_copy() - Copy specified messages to a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-num-msg.php","title":"imap_num_msg","description":"\n \n  imap_num_msg\n  (PHP 4, PHP 5)imap_num_msg &mdash; Gets the number of messages in the current mailbox\n\n \n \n  Description\n  \n   int imap_num_msg\n    ( resource $imap_stream\n   )\n\n  \n   Gets the number of messages in the current mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Return the number of messages in the current mailbox, as an integer.\n  \n \n\n \n  See Also\n  \n   \n    imap_num_recent() - Gets the number of recent messages in current mailbox\n    imap_status() - Returns status information on a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-msgno.php","title":"imap_msgno","description":"\n \n  imap_msgno\n  (PHP 4, PHP 5)imap_msgno &mdash; Gets the message sequence number for the given UID\n\n \n \n  Description\n  \n   int imap_msgno\n    ( resource $imap_stream\n   , int $uid\n   )\n\n  \n   Returns the message sequence number for the given \n   uid.\n  \n  \n   This function is the inverse of imap_uid().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     uid\n     \n\n      \n       The message UID\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the message sequence number for the given \n   uid.\n  \n \n\n \n  See Also\n  \n   \n    imap_uid() - This function returns the UID for the given message sequence number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-mime-header-decode.php","title":"imap_mime_header_decode","description":"\n \n  imap_mime_header_decode\n  (PHP 4, PHP 5)imap_mime_header_decode &mdash; Decode MIME header elements\n\n \n \n  Description\n  \n   array imap_mime_header_decode\n    ( string $text\n   )\n\n  \n   Decodes MIME message header extensions that are non ASCII text (see &raquo;&nbsp;RFC2047).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     text\n     \n\n      \n       The MIME text\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The decoded elements are returned in an array of objects, where each\n   object has two properties, charset and \n   text.\n  \n  \n   If the element hasn&#039;t been encoded, and in other words is in\n   plain US-ASCII, the charset property of that element is\n   set to default.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_mime_header_decode() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;\"=?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?=&nbsp;&lt;keld@example.com&gt;\";$elements&nbsp;=&nbsp;imap_mime_header_decode($text);for&nbsp;($i=0;&nbsp;$i&lt;count($elements);&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Charset:&nbsp;{$elements[$i]-&gt;charset}\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Text:&nbsp;{$elements[$i]-&gt;text}\\n\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nCharset: ISO-8859-1\nText: Keld J\u00f8rn Simonsen\n\nCharset: default\nText:  &lt;keld@example.com&gt;\n\n    \n   \n  \n  \n   In the above example we would have two elements, whereas the first\n   element had previously been encoded with ISO-8859-1, and the second\n   element would be plain US-ASCII.\n  \n \n\n \n  See Also\n  \n   \n    imap_utf8() - Converts MIME-encoded text to UTF-8\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-num-recent.php","title":"imap_num_recent","description":"\n \n  imap_num_recent\n  (PHP 4, PHP 5)imap_num_recent &mdash; Gets the number of recent messages in current mailbox\n\n \n \n  Description\n  \n   int imap_num_recent\n    ( resource $imap_stream\n   )\n\n  \n   Gets the number of recent messages in the current mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of recent messages in the current mailbox, as an\n   integer.\n  \n \n\n \n  See Also\n  \n   \n    imap_num_msg() - Gets the number of messages in the current mailbox\n    imap_status() - Returns status information on a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rename.php","title":"imap_rename","description":"\n \n  imap_rename\n  (PHP 4, PHP 5)imap_rename &mdash; Alias of imap_renamemailbox()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_renamemailbox().\n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-ping.php","title":"imap_ping","description":"\n \n  imap_ping\n  (PHP 4, PHP 5)imap_ping &mdash; Check if the IMAP stream is still active\n\n \n \n  Description\n  \n   bool imap_ping\n    ( resource $imap_stream\n   )\n\n  \n   imap_ping() pings the stream to see if it&#039;s still\n   active. It may discover new mail; this is the preferred method for a\n   periodic &quot;new mail check&quot; as well as a &quot;keep alive&quot; for servers which\n   have inactivity timeout.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the stream is still alive, FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_ping() Example\n    \n\n&lt;?php$imap&nbsp;=&nbsp;imap_open(\"{imap.example.org}\",&nbsp;\"mailadmin\",&nbsp;\"password\");\/\/&nbsp;after&nbsp;some&nbsp;sleepingif&nbsp;(!imap_ping($imap))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;do&nbsp;some&nbsp;stuff&nbsp;to&nbsp;reconnect}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-renamemailbox.php","title":"imap_renamemailbox","description":"\n \n  imap_renamemailbox\n  (PHP 4, PHP 5)imap_renamemailbox &mdash; Rename an old mailbox to new mailbox\n\n \n \n  Description\n  \n   bool imap_renamemailbox\n    ( resource $imap_stream\n   , string $old_mbox\n   , string $new_mbox\n   )\n\n  \n   This function renames on old mailbox to new mailbox (see\n   imap_open() for the format of\n   mbox names).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     old_mbox\n     \n\n      \n       The old mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     new_mbox\n     \n\n      \n       The new mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_createmailbox() - Create a new mailbox\n    imap_deletemailbox() - Delete a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-qprint.php","title":"imap_qprint","description":"\n \n  imap_qprint\n  (PHP 4, PHP 5)imap_qprint &mdash; Convert a quoted-printable string to an 8 bit string\n\n \n \n  Description\n  \n   string imap_qprint\n    ( string $string\n   )\n\n  \n   Convert a quoted-printable string to an 8 bit string according to &raquo;&nbsp;RFC2045, section 6.7.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       A quoted-printable string\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an 8 bits string.\n  \n \n\n \n  See Also\n  \n   \n    imap_8bit() - Convert an 8bit string to a quoted-printable string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-open.php","title":"imap_open","description":"\n \n  imap_open\n  (PHP 4, PHP 5)imap_open &mdash; Open an IMAP stream to a mailbox\n\n \n \n  Description\n  \n   resource imap_open\n    ( string $mailbox\n   , string $username\n   , string $password\n   [, int $options = NIL\n   [, int $n_retries = 0\n   [, array $params = NULL\n  ]]] )\n\n  \n   Opens an IMAP stream to a mailbox.\n  \n  \n   This function can also be used to open streams to POP3 and\n   NNTP servers, but some functions and features are only\n   available on IMAP servers.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     mailbox\n     \n\n      \n       A mailbox name consists of a server and a mailbox path on this server.\n       The special name INBOX stands for the current users\n       personal mailbox. Mailbox names that contain international characters\n       besides those in the printable ASCII space have to be encoded width\n       imap_utf7_encode().\n      \n      \n       The server part, which is enclosed in &#039;{&#039; and &#039;}&#039;, consists of the servers\n       name or ip address, an optional port (prefixed by &#039;:&#039;), and an optional\n       protocol specification (prefixed by &#039;\/&#039;). \n      \n      \n       The server part is mandatory in all mailbox\n       parameters. \n      \n      \n       All names which start with { are remote names, and are\n       in the form &quot;{&quot; remote_system_name [&quot;:&quot; port] [flags] &quot;}&quot;\n       [mailbox_name] where:\n       \n        \n         \n          remote_system_name - Internet domain name or\n          bracketed IP address of server.\n         \n        \n        \n         \n          port - optional TCP port number, default is the\n          default port for that service\n         \n        \n        \n         \n          flags - optional flags, see following table.\n         \n        \n        \n         \n          mailbox_name - remote mailbox name, default is INBOX\n         \n        \n       \n      \n      \n       \n        Optional flags for names\n        \n         \n          \n           Flag\n           Description\n          \n\n         \n\n         \n          \n           \/service=service\n           mailbox access service, default is &quot;imap&quot;\n          \n\n          \n           \/user=user\n           remote user name for login on the server\n          \n\n          \n           \/authuser=user\n           remote authentication user; if specified this is the user name\n            whose password is used (e.g. administrator)\n          \n\n          \n           \/anonymous\n           remote access as anonymous user\n          \n\n          \n           \/debug\n           record protocol telemetry in application&#039;s debug log\n          \n\n          \n           \/secure\n           do not transmit a plaintext password over the network\n          \n\n          \n           \/imap, \/imap2,\n            \/imap2bis, \/imap4,\n            \/imap4rev1\n           equivalent to \/service=imap\n          \n\n          \n           \/pop3\n           equivalent to \/service=pop3\n          \n\n          \n           \/nntp\n           equivalent to \/service=nntp\n          \n\n          \n           \/norsh\n           do not use rsh or ssh to establish a preauthenticated IMAP\n            session\n          \n\n          \n           \/ssl\n           use the Secure Socket Layer to encrypt the session\n          \n\n          \n           \/validate-cert\n           validate certificates from TLS\/SSL server (this is the default\n            behavior)\n          \n\n          \n           \/novalidate-cert\n           do not validate certificates from TLS\/SSL server, needed if\n            server uses self-signed certificates\n          \n\n          \n           \/tls\n           force use of start-TLS to encrypt the session, and reject\n            connection to servers that do not support it\n          \n\n          \n           \/notls\n           do not do start-TLS to encrypt the session, even with servers\n            that support it\n          \n\n          \n           \/readonly\n           request read-only mailbox open (IMAP only; ignored on NNTP, and\n            an error with SMTP and POP3)\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The user name\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password associated with the username\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The options are a bit mask with one or more of\n       the following:\n       \n        \n         \n          OP_READONLY - Open mailbox read-only\n         \n        \n        \n         \n          OP_ANONYMOUS - Don&#039;t use or update a\n          .newsrc for news (NNTP only)\n         \n        \n        \n         \n          OP_HALFOPEN - For IMAP\n          and NNTP names, open a connection but\n          don&#039;t open a mailbox.\n         \n        \n        \n         \n          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close\n          (see also imap_delete() and\n          imap_expunge())\n         \n        \n        \n         \n          OP_DEBUG - Debug protocol negotiations\n         \n        \n        \n         \n          OP_SHORTCACHE - Short (elt-only) caching\n         \n        \n        \n         \n          OP_SILENT - Don&#039;t pass up events (internal use)\n         \n        \n        \n         \n          OP_PROTOTYPE - Return driver prototype\n         \n        \n        \n         \n          OP_SECURE - Don&#039;t do non-secure authentication\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     n_retries\n     \n\n      \n       Number of maximum connect attempts\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       Connection parameters, the following (string) keys maybe used \n       to set one or more connection parameters:\n       \n        \n         \n          DISABLE_AUTHENTICATOR - Disable authentication properties\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an IMAP stream on success or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.2\n       params added\n      \n\n      \n       5.2.0\n       n_retries added\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Different use of imap_open()\n    \n\n&lt;?php\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;an&nbsp;IMAP&nbsp;server&nbsp;running&nbsp;on&nbsp;port&nbsp;143&nbsp;on&nbsp;the&nbsp;local&nbsp;machine,\/\/&nbsp;do&nbsp;the&nbsp;following:$mbox&nbsp;=&nbsp;imap_open(\"{localhost:143}INBOX\",&nbsp;\"user_id\",&nbsp;\"password\");\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;a&nbsp;POP3&nbsp;server&nbsp;on&nbsp;port&nbsp;110&nbsp;on&nbsp;the&nbsp;local&nbsp;server,&nbsp;use:$mbox&nbsp;=&nbsp;imap_open&nbsp;(\"{localhost:110\/pop3}INBOX\",&nbsp;\"user_id\",&nbsp;\"password\");\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;an&nbsp;SSL&nbsp;IMAP&nbsp;or&nbsp;POP3&nbsp;server,&nbsp;add&nbsp;\/ssl&nbsp;after&nbsp;the&nbsp;protocol\/\/&nbsp;specification:$mbox&nbsp;=&nbsp;imap_open&nbsp;(\"{localhost:993\/imap\/ssl}INBOX\",&nbsp;\"user_id\",&nbsp;\"password\");\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;an&nbsp;SSL&nbsp;IMAP&nbsp;or&nbsp;POP3&nbsp;server&nbsp;with&nbsp;a&nbsp;self-signed&nbsp;certificate,\/\/&nbsp;add&nbsp;\/ssl\/novalidate-cert&nbsp;after&nbsp;the&nbsp;protocol&nbsp;specification:$mbox&nbsp;=&nbsp;imap_open&nbsp;(\"{localhost:995\/pop3\/ssl\/novalidate-cert}\",&nbsp;\"user_id\",&nbsp;\"password\");\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;an&nbsp;NNTP&nbsp;server&nbsp;on&nbsp;port&nbsp;119&nbsp;on&nbsp;the&nbsp;local&nbsp;server,&nbsp;use:$nntp&nbsp;=&nbsp;imap_open&nbsp;(\"{localhost:119\/nntp}comp.test\",&nbsp;\"\",&nbsp;\"\");\/\/&nbsp;To&nbsp;connect&nbsp;to&nbsp;a&nbsp;remote&nbsp;server&nbsp;replace&nbsp;\"localhost\"&nbsp;with&nbsp;the&nbsp;name&nbsp;or&nbsp;the\/\/&nbsp;IP&nbsp;address&nbsp;of&nbsp;the&nbsp;server&nbsp;you&nbsp;want&nbsp;to&nbsp;connect&nbsp;to.?&gt;\n\n\n    \n\n   \n   \n    Example #2 imap_open() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}\",&nbsp;\"username\",&nbsp;\"password\");echo&nbsp;\"&lt;h1&gt;Mailboxes&lt;\/h1&gt;\\n\";$folders&nbsp;=&nbsp;imap_listmailbox($mbox,&nbsp;\"{imap.example.org:143}\",&nbsp;\"*\");if&nbsp;($folders&nbsp;==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Call&nbsp;failed&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($folders&nbsp;as&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$val&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}echo&nbsp;\"&lt;h1&gt;Headers&nbsp;in&nbsp;INBOX&lt;\/h1&gt;\\n\";$headers&nbsp;=&nbsp;imap_headers($mbox);if&nbsp;($headers&nbsp;==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Call&nbsp;failed&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($headers&nbsp;as&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$val&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_close() - Close an IMAP stream\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-reopen.php","title":"imap_reopen","description":"\n \n  imap_reopen\n  (PHP 4, PHP 5)imap_reopen &mdash; Reopen IMAP stream to new mailbox\n\n \n \n  Description\n  \n   bool imap_reopen\n    ( resource $imap_stream\n   , string $mailbox\n   [, int $options = 0\n   [, int $n_retries = 0\n  ]] )\n\n  \n   Reopens the specified stream to a new mailbox on an\n   IMAP or NNTP server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The options are a bit mask with one or more of\n       the following:\n       \n        \n         \n          OP_READONLY - Open mailbox read-only\n         \n        \n        \n         \n          OP_ANONYMOUS - Don&#039;t use or update a\n          .newsrc for news (NNTP only)\n         \n        \n        \n         \n          OP_HALFOPEN - For IMAP\n          and NNTP names, open a connection but\n          don&#039;t open a mailbox.\n         \n        \n        \n         \n          OP_EXPUNGE - Silently expunge recycle stream\n         \n        \n        \n         \n          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close\n          (see also imap_delete() and\n          imap_expunge())\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     n_retries\n     \n\n      \n       Number of maximum connect attempts\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if the stream is reopened, FALSE otherwise.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       n_retries added\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 imap_reopen() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}INBOX\",&nbsp;\"username\",&nbsp;\"password\")&nbsp;or&nbsp;die(implode(\",&nbsp;\",&nbsp;imap_errors()));\/\/&nbsp;...imap_reopen($mbox,&nbsp;\"{imap.example.org:143}INBOX.Sent\")&nbsp;or&nbsp;die(implode(\",&nbsp;\",&nbsp;imap_errors()));\/\/&nbsp;..?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-write-address.php","title":"imap_rfc822_write_address","description":"\n \n  imap_rfc822_write_address\n  (PHP 4, PHP 5)imap_rfc822_write_address &mdash; Returns a properly formatted email address given the mailbox, host, and personal info\n\n \n \n  Description\n  \n   string imap_rfc822_write_address\n    ( string $mailbox\n   , string $host\n   , string $personal\n   )\n\n  \n   Returns a properly formatted email address as defined in &raquo;&nbsp;RFC2822 given the needed information.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     host\n     \n\n      \n       The email host part\n      \n     \n\n    \n\n    \n\n     personal\n     \n\n      \n       The name of the account owner\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a string properly formatted email address as defined in &raquo;&nbsp;RFC2822.\n   \n \n\n \n  Examples\n  \n   \n    Example #1 imap_rfc822_write_address() example\n    \n\n&lt;?phpecho&nbsp;imap_rfc822_write_address(\"hartmut\",&nbsp;\"example.com\",&nbsp;\"Hartmut&nbsp;Holzgraefe\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHartmut Holzgraefe &lt;hartmut@example.com&gt;\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-parse-adrlist.php","title":"imap_rfc822_parse_adrlist","description":"\n \n  imap_rfc822_parse_adrlist\n  (PHP 4, PHP 5)imap_rfc822_parse_adrlist &mdash; Parses an address string\n\n \n \n  Description\n  \n   array imap_rfc822_parse_adrlist\n    ( string $address\n   , string $default_host\n   )\n\n  \n   Parses the address string as defined in &raquo;&nbsp;RFC2822 and for each address.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     address\n     \n\n      \n       A string containing addresses\n      \n     \n\n    \n\n    \n\n     default_host\n     \n\n      \n       The default host name\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of objects. The objects properties are:\n  \n  \n   \n    \n     \n      mailbox  - the mailbox name (username)\n     \n    \n    \n     \n      host - the host name\n     \n    \n    \n     \n      personal - the personal name\n     \n    \n    \n     \n      adl - at domain source route\n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_rfc822_parse_adrlist() example\n    \n\n&lt;?php$address_string&nbsp;=&nbsp;\"Joe&nbsp;Doe&nbsp;&lt;doe@example.com&gt;,&nbsp;postmaster@example.com,&nbsp;root\";$address_array&nbsp;&nbsp;=&nbsp;imap_rfc822_parse_adrlist($address_string,&nbsp;\"example.com\");if&nbsp;(!is_array($address_array)&nbsp;||&nbsp;count($address_array)&nbsp;&lt;&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"something&nbsp;is&nbsp;wrong\\n\");}foreach&nbsp;($address_array&nbsp;as&nbsp;$id&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"#&nbsp;$id\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&nbsp;mailbox&nbsp;:&nbsp;\"&nbsp;.&nbsp;$val-&gt;mailbox&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&nbsp;host&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;\"&nbsp;.&nbsp;$val-&gt;host&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&nbsp;personal:&nbsp;\"&nbsp;.&nbsp;$val-&gt;personal&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;&nbsp;adl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;\"&nbsp;.&nbsp;$val-&gt;adl&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n# 0\n  mailbox : doe\n  host    : example.com\n  personal: Joe Doe\n  adl     : \n# 1\n  mailbox : postmaster\n  host    : example.com\n  personal: \n  adl     : \n# 2\n  mailbox : root\n  host    : example.com\n  personal: \n  adl     :\n\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    imap_rfc822_parse_headers() - Parse mail headers from a string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-rfc822-parse-headers.php","title":"imap_rfc822_parse_headers","description":"\n \n  imap_rfc822_parse_headers\n  (PHP 4, PHP 5)imap_rfc822_parse_headers &mdash; Parse mail headers from a string\n\n \n \n  Description\n  \n   object imap_rfc822_parse_headers\n    ( string $headers\n   [, string $defaulthost = &quot;UNKNOWN&quot;\n  ] )\n\n  \n   Gets an object of various header elements, similar to \n   imap_header().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     headers\n     \n\n      \n       The parsed headers data\n      \n     \n\n    \n\n    \n\n     defaulthost\n     \n\n      \n       The default host name\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an object similar to the one returned by\n   imap_header(), except for the flags and other \n   properties that come from the IMAP server.\n   \n \n\n \n  See Also\n  \n   \n    imap_rfc822_parse_adrlist() - Parses an address string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-savebody.php","title":"imap_savebody","description":"\n \n  imap_savebody\n  (PHP 5 &gt;= 5.1.3)imap_savebody &mdash; Save a specific body section to a file\n\n \n \n  Description\n  \n   bool imap_savebody\n    ( resource $imap_stream\n   , mixed $file\n   , int $msg_number\n   [, string $part_number = &quot;&quot;\n   [, int $options = 0\n  ]] )\n\n  \n   Saves a part or the whole body of the specified message. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     file\n     \n\n      \n       The path to the saved file as a string, or a valid file descriptor\n       returned by fopen().\n      \n     \n\n    \n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     part_number\n     \n\n      \n       The part number. It is a string of integers delimited by period which\n       index into a body part list as per the IMAP4 specification\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       A bitmask with one or more of the following:\n       \n        \n         \n          FT_UID - The msg_number is a UID\n         \n        \n        \n         \n          FT_PEEK - Do not set the \\Seen flag if\n          not already set\n         \n        \n        \n         \n          FT_INTERNAL - The return string is in\n          internal format, will not canonicalize to CRLF.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_fetchbody() - Fetch a particular section of the body of the message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-scan.php","title":"imap_scan","description":"\n \n  imap_scan\n  (PHP 4, PHP 5)imap_scan &mdash; Alias of imap_listscan()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_listscan().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-scanmailbox.php","title":"imap_scanmailbox","description":"\n \n  imap_scanmailbox\n  (PHP 4, PHP 5)imap_scanmailbox &mdash; Alias of imap_listscan()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   imap_listscan().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-set-quota.php","title":"imap_set_quota","description":"\n \n  imap_set_quota\n  (PHP 4 &gt;= 4.0.5, PHP 5)imap_set_quota &mdash; Sets a quota for a given mailbox\n\n \n \n  Description\n  \n   bool imap_set_quota\n    ( resource $imap_stream\n   , string $quota_root\n   , int $quota_limit\n   )\n\n  \n   Sets an upper limit quota on a per mailbox basis. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     quota_root\n     \n\n      \n       The mailbox to have a quota set. This should follow the IMAP standard\n       format for a mailbox: user.name.\n      \n     \n\n    \n\n    \n\n     quota_limit\n     \n\n      \n       The maximum size (in KB) for the quota_root\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_set_quota() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}\",&nbsp;\"mailadmin\",&nbsp;\"password\");if&nbsp;(!imap_set_quota($mbox,&nbsp;\"user.kalowsky\",&nbsp;3000))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error&nbsp;in&nbsp;setting&nbsp;quota\\n\";&nbsp;&nbsp;&nbsp;&nbsp;return;}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  \n   This function is currently only available to users of the c-client2000\n   or greater library.\n  \n  \n   The given imap_stream must be opened as the mail\n   administrator, other wise this function will fail.\n  \n \n\n \n  See Also\n  \n   \n    imap_open() - Open an IMAP stream to a mailbox\n    imap_get_quota() - Retrieve the quota level settings, and usage statics per mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-setacl.php","title":"imap_setacl","description":"\n \n  imap_setacl\n  (PHP 4 &gt;= 4.0.7, PHP 5)imap_setacl &mdash; Sets the ACL for a giving mailbox\n\n \n \n  Description\n  \n   bool imap_setacl\n    ( resource $imap_stream\n   , string $mailbox\n   , string $id\n   , string $rights\n   )\n\n  \n   Sets the ACL for a giving mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     id\n     \n\n      \n       The user to give the rights to.\n      \n     \n\n    \n\n    \n\n     rights\n     \n\n      \n       The rights to give to the user. Passing an empty string will delete\n       acl.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Notes\n  \n   This function is currently only available to users of the c-client2000 or\n   greater library.\n  \n \n\n \n  See Also\n  \n   \n    imap_getacl() - Gets the ACL for a given mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-search.php","title":"imap_search","description":"\n \n  imap_search\n  (PHP 4, PHP 5)imap_search &mdash; This function returns an array of messages matching the given search criteria\n\n \n \n  Description\n  \n   array imap_search\n    ( resource $imap_stream\n   , string $criteria\n   [, int $options = SE_FREE\n   [, string $charset = NIL\n  ]] )\n\n  \n   This function performs a search on the mailbox currently opened\n   in the given IMAP stream. \n  \n  \n   For example, to match all unanswered messages sent by Mom, you&#039;d\n   use: &quot;UNANSWERED FROM mom&quot;. Searches appear to be case\n   insensitive. This list of criteria is from a reading of the UW\n   c-client source code and may be incomplete or\n   inaccurate (see also &raquo;&nbsp;RFC2060, \n   section 6.4.4).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     criteria\n     \n\n      \n       A string, delimited by spaces, in which the following keywords are\n       allowed. Any multi-word arguments (e.g.\n       FROM &quot;joey smith&quot;) must be quoted. Results will match\n       all criteria entries.\n       \n        \n         \n          ALL - return all messages matching the rest of the criteria\n         \n        \n        \n         \n          ANSWERED - match messages with the \\\\ANSWERED flag set\n         \n        \n        \n         \n          BCC &quot;string&quot; - match messages with &quot;string&quot; in the Bcc: field\n         \n        \n        \n         \n          BEFORE &quot;date&quot; - match messages with Date: before &quot;date&quot;\n         \n        \n        \n         \n          BODY &quot;string&quot; - match messages with &quot;string&quot; in the body of the message\n         \n        \n        \n         \n          CC &quot;string&quot; - match messages with &quot;string&quot; in the Cc: field\n         \n        \n        \n         \n          DELETED - match deleted messages\n         \n        \n        \n         \n          FLAGGED - match messages with the \\\\FLAGGED (sometimes\n          referred to as Important or Urgent) flag set\n         \n        \n        \n         \n          FROM &quot;string&quot; - match messages with &quot;string&quot; in the From: field\n         \n        \n        \n         \n          KEYWORD &quot;string&quot; - match messages with &quot;string&quot; as a keyword\n         \n        \n        \n         \n          NEW - match new messages\n         \n        \n        \n         \n          OLD - match old messages\n         \n        \n        \n         \n          ON &quot;date&quot; - match messages with Date: matching &quot;date&quot;\n         \n        \n        \n         \n          RECENT - match messages with the \\\\RECENT flag set\n         \n        \n        \n         \n          SEEN - match messages that have been read (the \\\\SEEN flag is set)\n         \n        \n        \n         \n          SINCE &quot;date&quot; - match messages with Date: after &quot;date&quot;\n         \n        \n        \n         \n          SUBJECT &quot;string&quot; - match messages with &quot;string&quot; in the Subject:\n         \n        \n        \n         \n          TEXT &quot;string&quot; - match messages with text &quot;string&quot;\n         \n        \n        \n         \n          TO &quot;string&quot; - match messages with &quot;string&quot; in the To:\n         \n        \n        \n         \n          UNANSWERED - match messages that have not been answered\n         \n        \n        \n         \n          UNDELETED - match messages that are not deleted\n         \n        \n        \n         \n          UNFLAGGED - match messages that are not flagged\n         \n        \n        \n         \n          UNKEYWORD &quot;string&quot; - match messages that do not have the\n          keyword &quot;string&quot;\n         \n        \n        \n         \n          UNSEEN - match messages which have not been read yet\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Valid values for options are \n       SE_UID, which causes the returned array to\n       contain UIDs instead of messages sequence numbers.\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of message numbers or UIDs.\n  \n  \n   Return FALSE if it does not understand the search\n   criteria or no messages have been found.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        The charset parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 imap_search() example\n   \n\n&lt;?php$conn&nbsp;&nbsp;&nbsp;=&nbsp;imap_open('{imap.example.com:993\/imap\/ssl}INBOX',&nbsp;'foo@example.com',&nbsp;'pass123',&nbsp;OP_READONLY);$some&nbsp;&nbsp;&nbsp;=&nbsp;imap_search($conn,&nbsp;'SUBJECT&nbsp;\"HOWTO&nbsp;be&nbsp;Awesome\"&nbsp;SINCE&nbsp;\"8&nbsp;August&nbsp;2008\"',&nbsp;SE_UID);$msgnos&nbsp;=&nbsp;imap_search($conn,&nbsp;'ALL');$uids&nbsp;&nbsp;&nbsp;=&nbsp;imap_search($conn,&nbsp;'ALL',&nbsp;SE_UID);print_r($some);print_r($msgnos);print_r($uids);?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nArray\n(\n    [0] =&gt; 4\n    [1] =&gt; 6\n    [2] =&gt; 11\n)\nArray\n(\n    [0] =&gt; 1\n    [1] =&gt; 2\n    [2] =&gt; 3\n    [3] =&gt; 4\n    [4] =&gt; 5\n    [5] =&gt; 6\n)\nArray\n(\n    [0] =&gt; 1\n    [1] =&gt; 4\n    [2] =&gt; 6\n    [3] =&gt; 8\n    [4] =&gt; 11\n    [5] =&gt; 12\n)\n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    imap_listscan() - Returns the list of mailboxes that matches the given text\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-setflag-full.php","title":"imap_setflag_full","description":"\n \n  imap_setflag_full\n  (PHP 4, PHP 5)imap_setflag_full &mdash; Sets flags on messages\n\n \n \n  Description\n  \n   bool imap_setflag_full\n    ( resource $imap_stream\n   , string $sequence\n   , string $flag\n   [, int $options = NIL\n  ] )\n\n  \n   Causes a store to add the specified flag to the\n   flags set for the messages in the specified \n   sequence.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     sequence\n     \n\n      \n       A sequence of message numbers. You can enumerate desired messages\n       with the X,Y syntax, or retrieve all messages \n       within an interval with the X:Y syntax\n      \n     \n\n    \n\n    \n\n     flag\n     \n\n      \n       The flags which you can set are \\Seen, \n       \\Answered, \\Flagged,\n       \\Deleted, and \\Draft as\n       defined by &raquo;&nbsp;RFC2060.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       A bit mask that may contain the single option:\n       \n        \n         \n          ST_UID - The sequence argument contains UIDs\n          instead of sequence numbers\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_setflag_full() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.org:143}\",&nbsp;\"username\",&nbsp;\"password\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$status&nbsp;=&nbsp;imap_setflag_full($mbox,&nbsp;\"2,5\",&nbsp;\"\\\\Seen&nbsp;\\\\Flagged\");echo&nbsp;gettype($status)&nbsp;.&nbsp;\"\\n\";echo&nbsp;$status&nbsp;.&nbsp;\"\\n\";imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_clearflag_full() - Clears flags on messages\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-sort.php","title":"imap_sort","description":"\n \n  imap_sort\n  (PHP 4, PHP 5)imap_sort &mdash; Gets and sort messages\n\n \n \n  Description\n  \n   array imap_sort\n    ( resource $imap_stream\n   , int $criteria\n   , int $reverse\n   [, int $options = 0\n   [, string $search_criteria = NULL\n   [, string $charset = NIL\n  ]]] )\n\n  \n   Gets and sorts message numbers by the given parameters.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     criteria\n     \n\n      \n       Criteria can be one (and only one) of the following:\n       \n        \n         \n          SORTDATE - message Date\n         \n        \n        \n         \n          SORTARRIVAL - arrival date\n         \n        \n        \n         \n          SORTFROM - mailbox in first From address\n         \n        \n        \n         \n          SORTSUBJECT - message subject\n         \n        \n        \n         \n          SORTTO - mailbox in first To address\n         \n        \n        \n         \n          SORTCC - mailbox in first cc address\n         \n        \n        \n         \n          SORTSIZE - size of message in octets\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     reverse\n     \n\n      \n       Set this to 1 for reverse sorting\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The options are a bitmask of one or more of the\n       following:\n       \n        \n         \n          SE_UID - Return UIDs instead of sequence numbers\n         \n        \n        \n         \n          SE_NOPREFETCH - Don&#039;t prefetch searched messages\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     search_criteria\n     \n\n      \n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array of message numbers sorted by the given\n   parameters.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        The charset parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-subscribe.php","title":"imap_subscribe","description":"\n \n  imap_subscribe\n  (PHP 4, PHP 5)imap_subscribe &mdash; Subscribe to a mailbox\n\n \n \n  Description\n  \n   bool imap_subscribe\n    ( resource $imap_stream\n   , string $mailbox\n   )\n\n  \n   Subscribe to a new mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_unsubscribe() - Unsubscribe from a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-status.php","title":"imap_status","description":"\n \n  imap_status\n  (PHP 4, PHP 5)imap_status &mdash; Returns status information on a mailbox\n\n \n \n  Description\n  \n   object imap_status\n    ( resource $imap_stream\n   , string $mailbox\n   , int $options\n   )\n\n  \n   Gets status information about the given mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Valid flags are:\n       \n        \n         \n          SA_MESSAGES - set $status-messages to the\n          number of messages in the mailbox\n         \n        \n        \n         \n          SA_RECENT - set $status-recent to the number\n          of recent messages in the mailbox\n         \n        \n        \n         \n          SA_UNSEEN - set $status-unseen to the number\n          of unseen (new) messages in the mailbox\n         \n        \n        \n         \n          SA_UIDNEXT - set $status-uidnext to the next\n          uid to be used in the mailbox\n         \n        \n        \n         \n          SA_UIDVALIDITY - set $status-uidvalidity to a\n          constant that changes when uids for the mailbox may no longer be\n          valid\n         \n        \n        \n         \n          SA_ALL - set all of the above\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   This function returns an object containing status information.\n   The object has the following properties: messages,\n   recent, unseen, \n   uidnext, and uidvalidity.  \n  \n  \n   flags is also set, which contains a bitmask which can\n   be checked against any of the above constants.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_status() example\n    \n\n&lt;?php$mbox&nbsp;=&nbsp;imap_open(\"{imap.example.com}\",&nbsp;\"username\",&nbsp;\"password\",&nbsp;OP_HALFOPEN)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"can't&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;imap_last_error());$status&nbsp;=&nbsp;imap_status($mbox,&nbsp;\"{imap.example.org}INBOX\",&nbsp;SA_ALL);if&nbsp;($status)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Messages:&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;messages&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;echo&nbsp;\"Recent:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;recent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;echo&nbsp;\"Unseen:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;unseen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;echo&nbsp;\"UIDnext:&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;.&nbsp;$status-&gt;uidnext&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;echo&nbsp;\"UIDvalidity:\"&nbsp;.&nbsp;$status-&gt;uidvalidity&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;echo&nbsp;\"imap_status&nbsp;failed:&nbsp;\"&nbsp;.&nbsp;imap_last_error()&nbsp;.&nbsp;\"\\n\";}imap_close($mbox);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-thread.php","title":"imap_thread","description":"\n \n  imap_thread\n  (PHP 4 &gt;= 4.0.7, PHP 5)imap_thread &mdash; Returns a tree of threaded message\n\n \n \n  Description\n  \n   array imap_thread\n    ( resource $imap_stream\n   [, int $options = SE_FREE\n  ] )\n\n  \n   Gets a tree of a threaded message.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     options\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   imap_thread() returns an associative array containing\n   a tree of messages threaded by REFERENCES, or FALSE\n   on error.\n  \n  \n   Every message in the current mailbox will be represented by three entries\n   in the resulting array:\n   \n    \n     $thread[\"XX.num\"] - current message number\n    \n    \n     $thread[\"XX.next\"]\n    \n    \n     $thread[\"XX.branch\"]\n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_thread() Example\n    \n\n&lt;?php\/\/&nbsp;Here&nbsp;we're&nbsp;outputting&nbsp;the&nbsp;threads&nbsp;of&nbsp;a&nbsp;newsgroup,&nbsp;in&nbsp;HTML$nntp&nbsp;=&nbsp;imap_open('{news.example.com:119\/nntp}some.newsgroup',&nbsp;'',&nbsp;'');$threads&nbsp;=&nbsp;imap_thread($nntp);foreach&nbsp;($threads&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;$tree&nbsp;=&nbsp;explode('.',&nbsp;$key);&nbsp;&nbsp;if&nbsp;($tree[1]&nbsp;==&nbsp;'num')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$header&nbsp;=&nbsp;imap_headerinfo($nntp,&nbsp;$val);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;ul&gt;\\n\\t&lt;li&gt;\"&nbsp;.&nbsp;$header-&gt;fromaddress&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;}&nbsp;elseif&nbsp;($tree[1]&nbsp;==&nbsp;'branch')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\t&lt;\/li&gt;\\n&lt;\/ul&gt;\\n\";&nbsp;&nbsp;}}imap_close($nntp);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-timeout.php","title":"imap_timeout","description":"\n \n  imap_timeout\n  (PHP 4 &gt;= 4.3.3, PHP 5)imap_timeout &mdash; Set or fetch imap timeout\n\n \n \n  Description\n  \n   mixed imap_timeout\n    ( int $timeout_type\n   [, int $timeout = -1\n  ] )\n\n  \n   Sets or fetches the imap timeout.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     timeout_type\n     \n\n      \n       One of the following:\n       IMAP_OPENTIMEOUT,\n       IMAP_READTIMEOUT,\n       IMAP_WRITETIMEOUT, or\n       IMAP_CLOSETIMEOUT.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       The timeout, in seconds.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If the timeout parameter is set, this function\n   returns TRUE on success and FALSE on failure.\n  \n  \n   If timeout  is not provided or evaluates to -1,\n   the current timeout value of timeout_type is\n   returned as an integer.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 imap_timeout() example\n    \n\n&lt;?phpecho&nbsp;\"The&nbsp;current&nbsp;read&nbsp;timeout&nbsp;is&nbsp;\"&nbsp;.&nbsp;imap_timeout(IMAP_READTIMEOUT)&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-unsubscribe.php","title":"imap_unsubscribe","description":"\n \n  imap_unsubscribe\n  (PHP 4, PHP 5)imap_unsubscribe &mdash; Unsubscribe from a mailbox\n\n \n \n  Description\n  \n   bool imap_unsubscribe\n    ( resource $imap_stream\n   , string $mailbox\n   )\n\n  \n   Unsubscribe from the specified mailbox.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     mailbox\n     \n\n      \n       The mailbox name, see imap_open() for more\n       information\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_subscribe() - Subscribe to a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-undelete.php","title":"imap_undelete","description":"\n \n  imap_undelete\n  (PHP 4, PHP 5)imap_undelete &mdash; Unmark the message which is marked deleted\n\n \n \n  Description\n  \n   bool imap_undelete\n    ( resource $imap_stream\n   , int $msg_number\n   [, int $flags = 0\n  ] )\n\n  \n   Removes the deletion flag for a specified message, which is set by\n   imap_delete() or imap_mail_move().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    imap_delete() - Mark a message for deletion from current mailbox\n    imap_mail_move() - Move specified messages to a mailbox\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-uid.php","title":"imap_uid","description":"\n \n  imap_uid\n  (PHP 4, PHP 5)imap_uid &mdash; This function returns the UID for the given message sequence number\n\n \n \n  Description\n  \n   int imap_uid\n    ( resource $imap_stream\n   , int $msg_number\n   )\n\n  \n   This function returns the UID for the given message sequence\n   number. An UID is a unique identifier that will not change over\n   time while a message sequence number may change whenever the\n   content of the mailbox changes.\n  \n  \n   This function is the inverse of imap_msgno().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\nimap_stream\nAn IMAP stream returned by\nimap_open().\n\n\n    \n\n     msg_number\n     \n\n      \n       The message number.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The UID of the given message.\n  \n \n\n \n  Notes\n  Note: \n   \n    This function is not supported by POP3 mailboxes.\n   \n  \n \n\n \n  See Also\n  \n   \n    imap_msgno() - Gets the message sequence number for the given UID\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf7-decode.php","title":"imap_utf7_decode","description":"\n \n  imap_utf7_decode\n  (PHP 4, PHP 5)imap_utf7_decode &mdash; Decodes a modified UTF-7 encoded string\n\n \n \n  Description\n  \n   string imap_utf7_decode\n    ( string $text\n   )\n\n  \n   Decodes modified UTF-7 text into ISO-8859-1 string.\n  \n  \n   This function is needed to decode mailbox names that contain certain\n   characters which are not in range of printable ASCII characters.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     text\n     \n\n      \n       A modified UTF-7 encoding string, as defined in &raquo;&nbsp;RFC 2060, section 5.1.3 (original UTF-7\n       was defined in &raquo;&nbsp;RFC1642).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a string that is encoded in ISO-8859-1 and consists of the same\n   sequence of characters in text, or FALSE\n   if text contains invalid modified UTF-7 sequence\n   or text contains a character that is not part of\n   ISO-8859-1 character set.\n  \n \n\n \n  See Also\n  \n   \n    imap_utf7_encode() - Converts ISO-8859-1 string to modified UTF-7 text\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf7-encode.php","title":"imap_utf7_encode","description":"\n \n  imap_utf7_encode\n  (PHP 4, PHP 5)imap_utf7_encode &mdash; Converts ISO-8859-1 string to modified UTF-7 text\n\n \n \n  Description\n  \n   string imap_utf7_encode\n    ( string $data\n   )\n\n  \n   Converts data to modified UTF-7 text.\n  \n  \n   This is needed to encode mailbox names that contain certain characters\n   which are not in range of printable ASCII characters.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       An ISO-8859-1 string.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns data encoded with the modified UTF-7\n   encoding as defined in &raquo;&nbsp;RFC 2060, \n   section 5.1.3 (original UTF-7 was defined in &raquo;&nbsp;RFC1642).\n  \n \n\n \n  See Also\n  \n   \n    imap_utf7_decode() - Decodes a modified UTF-7 encoded string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.imap-utf8.php","title":"imap_utf8","description":"\n \n  imap_utf8\n  (PHP 4, PHP 5)imap_utf8 &mdash; Converts MIME-encoded text to UTF-8\n\n \n \n  Description\n  \n   string imap_utf8\n    ( string $mime_encoded_text\n   )\n\n  \n   Converts the given mime_encoded_text to\n   UTF-8. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     mime_encoded_text\n     \n\n      \n       A MIME encoded string. MIME encoding method and the UTF-8 \n       specification are described in &raquo;&nbsp;RFC2047 and &raquo;&nbsp;RFC2044 respectively.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an UTF-8 encoded string.\n  \n \n\n \n  See Also\n  \n   \n    imap_mime_header_decode() - Decode MIME header elements\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-last-error.php","title":"json_last_error","description":"\n \n  json_last_error\n  (PHP 5 &gt;= 5.3.0)json_last_error &mdash; Returns the last error occurred\n\n \n\n \n  Description\n  \n   int json_last_error\n    ( void\n   )\n\n  \n   Returns the last error (if any) occurred during the last JSON encoding\/decoding.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns an integer, the value can be one of the following \n   constants: \n  \n  \n   JSON error codes\n   \n    \n     \n      Constant\n      Meaning\n      Availability\n     \n\n    \n\n    \n     \n      JSON_ERROR_NONE\n      No error has occurred\n      &nbsp;\n     \n\n     \n      JSON_ERROR_DEPTH\n      The maximum stack depth has been exceeded\n      &nbsp;\n     \n\n     \n      JSON_ERROR_STATE_MISMATCH\n      Invalid or malformed JSON\n      &nbsp;\n     \n\n     \n      JSON_ERROR_CTRL_CHAR\n      Control character error, possibly incorrectly encoded\n      &nbsp;\n     \n\n     \n      JSON_ERROR_SYNTAX\n      Syntax error\n      &nbsp;\n     \n\n     \n      JSON_ERROR_UTF8\n      Malformed UTF-8 characters, possibly incorrectly encoded\n      PHP 5.3.3\n     \n\n    \n   \n  \n\n \n\n\n \n  Examples\n  \n   \n    Example #1 json_last_error() example\n    \n\n&lt;?php\/\/&nbsp;A&nbsp;valid&nbsp;json&nbsp;string$json[]&nbsp;=&nbsp;'{\"Organization\":&nbsp;\"PHP&nbsp;Documentation&nbsp;Team\"}';\/\/&nbsp;An&nbsp;invalid&nbsp;json&nbsp;string&nbsp;which&nbsp;will&nbsp;cause&nbsp;an&nbsp;syntax&nbsp;\/\/&nbsp;error,&nbsp;in&nbsp;this&nbsp;case&nbsp;we&nbsp;used&nbsp;'&nbsp;instead&nbsp;of&nbsp;\"&nbsp;for&nbsp;quotation$json[]&nbsp;=&nbsp;\"{'Organization':&nbsp;'PHP&nbsp;Documentation&nbsp;Team'}\";foreach&nbsp;($json&nbsp;as&nbsp;$string)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Decoding:&nbsp;'&nbsp;.&nbsp;$string;&nbsp;&nbsp;&nbsp;&nbsp;json_decode($string);&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(json_last_error())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_NONE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;No&nbsp;errors';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_DEPTH:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Maximum&nbsp;stack&nbsp;depth&nbsp;exceeded';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_STATE_MISMATCH:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Underflow&nbsp;or&nbsp;the&nbsp;modes&nbsp;mismatch';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_CTRL_CHAR:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Unexpected&nbsp;control&nbsp;character&nbsp;found';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_SYNTAX:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Syntax&nbsp;error,&nbsp;malformed&nbsp;JSON';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;JSON_ERROR_UTF8:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Malformed&nbsp;UTF-8&nbsp;characters,&nbsp;possibly&nbsp;incorrectly&nbsp;encoded';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&nbsp;-&nbsp;Unknown&nbsp;error';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;PHP_EOL;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nDecoding: {&quot;Organization&quot;: &quot;PHP Documentation Team&quot;} - No errors\nDecoding: {&#039;Organization&#039;: &#039;PHP Documentation Team&#039;} - Syntax error, malformed JSON\n\n    \n   \n  \n  \n   \n    Example #2 json_last_error() with json_encode()\n    \n\n&lt;?php\/\/&nbsp;An&nbsp;invalid&nbsp;UTF8&nbsp;sequence$text&nbsp;=&nbsp;\"\\xB1\\x31\";$json&nbsp;&nbsp;=&nbsp;json_encode($text);$error&nbsp;=&nbsp;json_last_error();var_dump($json,&nbsp;$error&nbsp;===&nbsp;JSON_ERROR_UTF8);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(4) &quot;null&quot;\nbool(true)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    json_decode() - Decodes a JSON string\n    json_encode() - Returns the JSON representation of a value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-8859-to-t61.php","title":"ldap_8859_to_t61","description":"\n \n  ldap_8859_to_t61\n  (PHP 4 &gt;= 4.0.2, PHP 5)ldap_8859_to_t61 &mdash; Translate 8859 characters to t61 characters\n\n \n \n \n  Description\n  \n   string ldap_8859_to_t61\n    ( string $value\n   )\n\n  \n   Translate ISO-8859 characters to t61\n   characters.\n  \n  \n   This function is useful if you have to talk to a legacy \n   LDAPv2 server.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       The text to be translated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Return the t61 translation of\n   value.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_t61_to_8859() - Translate t61 characters to 8859 characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-decode.php","title":"json_decode","description":"\n \n  json_decode\n  (PHP 5 &gt;= 5.2.0, PECL json &gt;= 1.2.0)json_decode &mdash; Decodes a JSON string\n\n \n\n \n  Description\n  \n   mixed json_decode\n    ( string $json\n   [, bool $assoc = false\n   [, int $depth = 512\n   [, int $options = 0\n  ]]] )\n\n  \n   Takes a JSON encoded string and converts it into a PHP variable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     json\n     \n\n      \n       The json string being decoded.\n      \n      \n       This function only works with UTF-8 encoded data.\n      \n     \n\n    \n\n    \n\n     assoc\n     \n\n      \n       When TRUE, returned objects will be converted into\n       associative arrays.\n      \n     \n\n    \n\n    \n\n     depth\n     \n\n      \n       User specified recursion depth.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Bitmask of JSON decode options.  Currently only\n       JSON_BIGINT_AS_STRING\n       is supported (default is to cast large integers as floats)\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the value encoded in json in appropriate\n   PHP type. Values true, false and\n   null (case-insensitive) are returned as TRUE, FALSE\n   and NULL respectively. NULL is returned if the\n   json cannot be decoded or if the encoded\n   data is deeper than the recursion limit.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 json_decode() examples\n    \n\n&lt;?php$json&nbsp;=&nbsp;'{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';var_dump(json_decode($json));var_dump(json_decode($json,&nbsp;true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nobject(stdClass)#1 (5) {\n    [&quot;a&quot;] =&gt; int(1)\n    [&quot;b&quot;] =&gt; int(2)\n    [&quot;c&quot;] =&gt; int(3)\n    [&quot;d&quot;] =&gt; int(4)\n    [&quot;e&quot;] =&gt; int(5)\n}\n\narray(5) {\n    [&quot;a&quot;] =&gt; int(1)\n    [&quot;b&quot;] =&gt; int(2)\n    [&quot;c&quot;] =&gt; int(3)\n    [&quot;d&quot;] =&gt; int(4)\n    [&quot;e&quot;] =&gt; int(5)\n}\n\n    \n   \n   \n    Example #2 Accessing invalid object properties\n    \n     Accessing elements within an object that contain characters not\n     permitted under PHP&#039;s naming convention (e.g. the hyphen) can be\n     accomplished by encapsulating the element name within braces and the apostrophe.\n    \n    \n\n&lt;?php$json&nbsp;=&nbsp;'{\"foo-bar\":&nbsp;12345}';$obj&nbsp;=&nbsp;json_decode($json);print&nbsp;$obj-&gt;{'foo-bar'};&nbsp;\/\/&nbsp;12345?&gt;\n\n\n    \n\n   \n   \n    Example #3 common mistakes using json_decode()\n    \n\n&lt;?php\/\/&nbsp;the&nbsp;following&nbsp;strings&nbsp;are&nbsp;valid&nbsp;JavaScript&nbsp;but&nbsp;not&nbsp;valid&nbsp;JSON\/\/&nbsp;the&nbsp;name&nbsp;and&nbsp;value&nbsp;must&nbsp;be&nbsp;enclosed&nbsp;in&nbsp;double&nbsp;quotes\/\/&nbsp;single&nbsp;quotes&nbsp;are&nbsp;not&nbsp;valid&nbsp;$bad_json&nbsp;=&nbsp;\"{&nbsp;'bar':&nbsp;'baz'&nbsp;}\";json_decode($bad_json);&nbsp;\/\/&nbsp;null\/\/&nbsp;the&nbsp;name&nbsp;must&nbsp;be&nbsp;enclosed&nbsp;in&nbsp;double&nbsp;quotes$bad_json&nbsp;=&nbsp;'{&nbsp;bar:&nbsp;\"baz\"&nbsp;}';json_decode($bad_json);&nbsp;\/\/&nbsp;null\/\/&nbsp;trailing&nbsp;commas&nbsp;are&nbsp;not&nbsp;allowed$bad_json&nbsp;=&nbsp;'{&nbsp;bar:&nbsp;\"baz\",&nbsp;}';json_decode($bad_json);&nbsp;\/\/&nbsp;null?&gt;\n\n\n    \n\n   \n   \n    Example #4 depth errors\n    \n\n&lt;?php\/\/&nbsp;Encode&nbsp;the&nbsp;data.$json&nbsp;=&nbsp;json_encode(&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'English'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'One',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'January'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'French'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Une',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Janvier'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;));\/\/&nbsp;Define&nbsp;the&nbsp;errors.$constants&nbsp;=&nbsp;get_defined_constants(true);$json_errors&nbsp;=&nbsp;array();foreach&nbsp;($constants[\"json\"]&nbsp;as&nbsp;$name&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!strncmp($name,&nbsp;\"JSON_ERROR_\",&nbsp;11))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$json_errors[$value]&nbsp;=&nbsp;$name;&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Show&nbsp;the&nbsp;errors&nbsp;for&nbsp;different&nbsp;depths.foreach&nbsp;(range(4,&nbsp;3,&nbsp;-1)&nbsp;as&nbsp;$depth)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump(json_decode($json,&nbsp;true,&nbsp;$depth));&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Last&nbsp;error:&nbsp;',&nbsp;$json_errors[json_last_error()],&nbsp;PHP_EOL,&nbsp;PHP_EOL;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(1) {\n  [1]=&gt;\n  array(2) {\n    [&quot;English&quot;]=&gt;\n    array(2) {\n      [0]=&gt;\n      string(3) &quot;One&quot;\n      [1]=&gt;\n      string(7) &quot;January&quot;\n    }\n    [&quot;French&quot;]=&gt;\n    array(2) {\n      [0]=&gt;\n      string(3) &quot;Une&quot;\n      [1]=&gt;\n      string(7) &quot;Janvier&quot;\n    }\n  }\n}\nLast error: JSON_ERROR_NONE\n\nNULL\nLast error: JSON_ERROR_DEPTH\n\n    \n   \n   \n    Example #5 json_decode() of large integers\n    \n\n&lt;?php$json&nbsp;=&nbsp;'12345678901234567890';var_dump(json_decode($json));var_dump(json_decode($json,&nbsp;false,&nbsp;512,&nbsp;JSON_BIGINT_AS_STRING));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfloat(1.2345678901235E+19)\nstring(20) &quot;12345678901234567890&quot;\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    The JSON spec is not JavaScript, but a subset of JavaScript.\n   \n  \n  Note: \n   \n    In the event of a failure to decode, json_last_error()\n    can be used to determine the exact nature of the error.\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The options parameter was added.\n       \n      \n\n      \n       5.3.0\n       Added the optional depth. The default recursion depth was increased from 128 to 512\n      \n\n      \n       5.2.3\n       The nesting limit was increased from 20 to 128\n      \n\n      \n       5.2.1\n       \n        Added support for JSON decoding of basic types.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    json_encode() - Returns the JSON representation of a value\n    json_last_error() - Returns the last error occurred\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-add.php","title":"ldap_add","description":"\n \n  ldap_add\n  (PHP 4, PHP 5)ldap_add &mdash; Add entries to LDAP directory\n\n \n \n \n  Description\n  \n   bool ldap_add\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )\n\n  \n   Add entries in the LDAP directory. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     entry\n     \n\n      \n       An array that specifies the information about the entry. The values in\n       the entries are indexed by individual attributes.\n       In case of multiple values for an attribute, they are indexed using\n       integers starting with 0.\n       \n        \n     \n&lt;?php$entree[\"attribut1\"]&nbsp;=&nbsp;\"value\";$entree[\"attribut2\"][0]&nbsp;=&nbsp;\"value1\";$entree[\"attribut2\"][1]&nbsp;=&nbsp;\"value2\";?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Complete example with authenticated bind\n    \n\n&lt;?php$ds&nbsp;=&nbsp;ldap_connect(\"localhost\");&nbsp;&nbsp;\/\/&nbsp;assuming&nbsp;the&nbsp;LDAP&nbsp;server&nbsp;is&nbsp;on&nbsp;this&nbsp;hostif&nbsp;($ds)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;bind&nbsp;with&nbsp;appropriate&nbsp;dn&nbsp;to&nbsp;give&nbsp;update&nbsp;access&nbsp;&nbsp;&nbsp;&nbsp;$r&nbsp;=&nbsp;ldap_bind($ds,&nbsp;\"cn=root,&nbsp;o=My&nbsp;Company,&nbsp;c=US\",&nbsp;\"secret\");&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;prepare&nbsp;data&nbsp;&nbsp;&nbsp;&nbsp;$info[\"cn\"]&nbsp;=&nbsp;\"John&nbsp;Jones\";&nbsp;&nbsp;&nbsp;&nbsp;$info[\"sn\"]&nbsp;=&nbsp;\"Jones\";&nbsp;&nbsp;&nbsp;&nbsp;$info[\"mail\"]&nbsp;=&nbsp;\"jonj@example.com\";&nbsp;&nbsp;&nbsp;&nbsp;$info[\"objectclass\"]&nbsp;=&nbsp;\"person\";&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;add&nbsp;data&nbsp;to&nbsp;directory&nbsp;&nbsp;&nbsp;&nbsp;$r&nbsp;=&nbsp;ldap_add($ds,&nbsp;\"cn=John&nbsp;Jones,&nbsp;o=My&nbsp;Company,&nbsp;c=US\",&nbsp;$info);&nbsp;&nbsp;&nbsp;&nbsp;ldap_close($ds);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;connect&nbsp;to&nbsp;LDAP&nbsp;server\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    ldap_delete() - Delete an entry from a directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-close.php","title":"ldap_close","description":"\n \n  ldap_close\n  (PHP 4, PHP 5)ldap_close &mdash; Alias of ldap_unbind()\n\n \n\n \n  Description\n  \n   This function is an alias of:  ldap_unbind().    \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-compare.php","title":"ldap_compare","description":"\n \n  ldap_compare\n  (PHP 4 &gt;= 4.0.2, PHP 5)ldap_compare &mdash; Compare value of attribute found in entry specified with DN\n\n \n \n \n  Description\n  \n   mixed ldap_compare\n    ( resource $link_identifier\n   , string $dn\n   , string $attribute\n   , string $value\n   )\n\n  \n   Compare value of attribute\n   with value of same attribute in an LDAP directory entry.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     attribute\n     \n\n      \n       The attribute name.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The compared value.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if value matches otherwise returns\n   FALSE. Returns -1 on error.\n  \n \n\n\n \n  Examples\n  \n   The following example demonstrates how to check whether or not given password matches\n   the one defined in DN specified entry.\n  \n  \n   \n    Example #1 Complete example of password check\n    \n\n&lt;?php$ds=ldap_connect(\"localhost\");&nbsp;&nbsp;\/\/&nbsp;assuming&nbsp;the&nbsp;LDAP&nbsp;server&nbsp;is&nbsp;on&nbsp;this&nbsp;hostif&nbsp;($ds)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;bind&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(ldap_bind($ds))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;prepare&nbsp;data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$dn&nbsp;=&nbsp;\"cn=Matti&nbsp;Meikku,&nbsp;ou=My&nbsp;Unit,&nbsp;o=My&nbsp;Company,&nbsp;c=FI\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;=&nbsp;\"secretpassword\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$attr&nbsp;=&nbsp;\"password\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;compare&nbsp;value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$r=ldap_compare($ds,&nbsp;$dn,&nbsp;$attr,&nbsp;$value);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($r&nbsp;===&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error:&nbsp;\"&nbsp;.&nbsp;ldap_error($ds);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;($r&nbsp;===&nbsp;true)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Password&nbsp;correct.\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;($r&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Wrong&nbsp;guess!&nbsp;Password&nbsp;incorrect.\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;bind&nbsp;to&nbsp;LDAP&nbsp;server.\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;ldap_close($ds);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;connect&nbsp;to&nbsp;LDAP&nbsp;server.\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    ldap_compare() can NOT be used to compare BINARY values!\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.json-encode.php","title":"json_encode","description":"\n \n  json_encode\n  (PHP 5 &gt;= 5.2.0, PECL json &gt;= 1.2.0)json_encode &mdash; Returns the JSON representation of a value\n\n \n\n \n  Description\n  \n   string json_encode\n    ( mixed $value\n   [, int $options = 0\n  ] )\n\n  \n   Returns a string containing the JSON representation of \n   value.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       The value being encoded. Can be any type except\n       a resource.\n      \n      \n       This function only works with UTF-8 encoded data.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Bitmask consisting of JSON_HEX_QUOT,\n       JSON_HEX_TAG,\n       JSON_HEX_AMP,\n       JSON_HEX_APOS,\n       JSON_NUMERIC_CHECK,\n       JSON_PRETTY_PRINT,\n       JSON_UNESCAPED_SLASHES,\n       JSON_FORCE_OBJECT,\n       JSON_UNESCAPED_UNICODE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a JSON encoded string on success.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        JSON_BIGINT_AS_STRING, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, and JSON_UNESCAPED_UNICODE options were added.\n       \n      \n\n      \n       5.3.3\n       \n        JSON_NUMERIC_CHECK option was added.\n       \n      \n\n      \n       5.3.0\n       \n        The options parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A json_encode() example\n    \n\n&lt;?php$arr&nbsp;=&nbsp;array('a'&nbsp;=&gt;&nbsp;1,&nbsp;'b'&nbsp;=&gt;&nbsp;2,&nbsp;'c'&nbsp;=&gt;&nbsp;3,&nbsp;'d'&nbsp;=&gt;&nbsp;4,&nbsp;'e'&nbsp;=&gt;&nbsp;5);echo&nbsp;json_encode($arr);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5}\n\n    \n   \n\n   \n    Example #2 A json_encode() example showing all the options in action\n    \n\n&lt;?php$a&nbsp;=&nbsp;array('&lt;foo&gt;',\"'bar'\",'\"baz\"','&amp;blong&amp;',&nbsp;\"\\xc3\\xa9\");echo&nbsp;\"Normal:&nbsp;\",&nbsp;&nbsp;json_encode($a),&nbsp;\"\\n\";echo&nbsp;\"Tags:&nbsp;\",&nbsp;&nbsp;&nbsp;&nbsp;json_encode($a,&nbsp;JSON_HEX_TAG),&nbsp;\"\\n\";echo&nbsp;\"Apos:&nbsp;\",&nbsp;&nbsp;&nbsp;&nbsp;json_encode($a,&nbsp;JSON_HEX_APOS),&nbsp;\"\\n\";echo&nbsp;\"Quot:&nbsp;\",&nbsp;&nbsp;&nbsp;&nbsp;json_encode($a,&nbsp;JSON_HEX_QUOT),&nbsp;\"\\n\";echo&nbsp;\"Amp:&nbsp;\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;json_encode($a,&nbsp;JSON_HEX_AMP),&nbsp;\"\\n\";echo&nbsp;\"Unicode:&nbsp;\",&nbsp;json_encode($a,&nbsp;JSON_UNESCAPED_UNICODE),&nbsp;\"\\n\";echo&nbsp;\"All:&nbsp;\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;json_encode($a,&nbsp;JSON_HEX_TAG&nbsp;|&nbsp;JSON_HEX_APOS&nbsp;|&nbsp;JSON_HEX_QUOT&nbsp;|&nbsp;JSON_HEX_AMP&nbsp;|&nbsp;JSON_UNESCAPED_UNICODE),&nbsp;\"\\n\\n\";$b&nbsp;=&nbsp;array();echo&nbsp;\"Empty&nbsp;array&nbsp;output&nbsp;as&nbsp;array:&nbsp;\",&nbsp;json_encode($b),&nbsp;\"\\n\";echo&nbsp;\"Empty&nbsp;array&nbsp;output&nbsp;as&nbsp;object:&nbsp;\",&nbsp;json_encode($b,&nbsp;JSON_FORCE_OBJECT),&nbsp;\"\\n\\n\";$c&nbsp;=&nbsp;array(array(1,2,3));echo&nbsp;\"Non-associative&nbsp;array&nbsp;output&nbsp;as&nbsp;array:&nbsp;\",&nbsp;json_encode($c),&nbsp;\"\\n\";echo&nbsp;\"Non-associative&nbsp;array&nbsp;output&nbsp;as&nbsp;object:&nbsp;\",&nbsp;json_encode($c,&nbsp;JSON_FORCE_OBJECT),&nbsp;\"\\n\\n\";$d&nbsp;=&nbsp;array('foo'&nbsp;=&gt;&nbsp;'bar',&nbsp;'baz'&nbsp;=&gt;&nbsp;'long');echo&nbsp;\"Associative&nbsp;array&nbsp;always&nbsp;output&nbsp;as&nbsp;object:&nbsp;\",&nbsp;json_encode($d),&nbsp;\"\\n\";echo&nbsp;\"Associative&nbsp;array&nbsp;always&nbsp;output&nbsp;as&nbsp;object:&nbsp;\",&nbsp;json_encode($d,&nbsp;JSON_FORCE_OBJECT),&nbsp;\"\\n\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nNormal: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\\&quot;baz\\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\\u00e9&quot;]\nTags: [&quot;\\u003Cfoo\\u003E&quot;,&quot;&#039;bar&#039;&quot;,&quot;\\&quot;baz\\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\\u00e9&quot;]\nApos: [&quot;&lt;foo&gt;&quot;,&quot;\\u0027bar\\u0027&quot;,&quot;\\&quot;baz\\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\\u00e9&quot;]\nQuot: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\\u0022baz\\u0022&quot;,&quot;&amp;blong&amp;&quot;,&quot;\\u00e9&quot;]\nAmp: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\\&quot;baz\\&quot;&quot;,&quot;\\u0026blong\\u0026&quot;,&quot;\\u00e9&quot;]\nUnicode: [&quot;&lt;foo&gt;&quot;,&quot;&#039;bar&#039;&quot;,&quot;\\&quot;baz\\&quot;&quot;,&quot;&amp;blong&amp;&quot;,&quot;\u00e9&quot;]\nAll: [&quot;\\u003Cfoo\\u003E&quot;,&quot;\\u0027bar\\u0027&quot;,&quot;\\u0022baz\\u0022&quot;,&quot;\\u0026blong\\u0026&quot;,&quot;\u00e9&quot;]\n\nEmpty array output as array: []\nEmpty array output as object: {}\n\nNon-associative array output as array: [[1,2,3]]\nNon-associative array output as object: {&quot;0&quot;:{&quot;0&quot;:1,&quot;1&quot;:2,&quot;2&quot;:3}}\n\nAssociative array always output as object: {&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;}\nAssociative array always output as object: {&quot;foo&quot;:&quot;bar&quot;,&quot;baz&quot;:&quot;long&quot;}\n\n    \n   \n   \n    Example #3 Sequential versus non-sequential array example\n    \n\n&lt;?phpecho&nbsp;\"Sequential&nbsp;array\".PHP_EOL;$sequential&nbsp;=&nbsp;array(\"foo\",&nbsp;\"bar\",&nbsp;\"baz\",&nbsp;\"blong\");var_dump(&nbsp;$sequential,&nbsp;json_encode($sequential));echo&nbsp;PHP_EOL.\"Non-sequential&nbsp;array\".PHP_EOL;$nonsequential&nbsp;=&nbsp;array(1=&gt;\"foo\",&nbsp;2=&gt;\"bar\",&nbsp;3=&gt;\"baz\",&nbsp;4=&gt;\"blong\");var_dump(&nbsp;$nonsequential,&nbsp;json_encode($nonsequential));echo&nbsp;PHP_EOL.\"Sequential&nbsp;array&nbsp;with&nbsp;one&nbsp;key&nbsp;unset\".PHP_EOL;unset($sequential[1]);var_dump(&nbsp;$sequential,&nbsp;json_encode($sequential));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nSequential array\narray(4) {\n  [0]=&gt;\n  string(3) &quot;foo&quot;\n  [1]=&gt;\n  string(3) &quot;bar&quot;\n  [2]=&gt;\n  string(3) &quot;baz&quot;\n  [3]=&gt;\n  string(5) &quot;blong&quot;\n}\nstring(27) &quot;[&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;,&quot;blong&quot;]&quot;\n\nNon-sequential array\narray(4) {\n  [1]=&gt;\n  string(3) &quot;foo&quot;\n  [2]=&gt;\n  string(3) &quot;bar&quot;\n  [3]=&gt;\n  string(3) &quot;baz&quot;\n  [4]=&gt;\n  string(5) &quot;blong&quot;\n}\nstring(43) &quot;{&quot;1&quot;:&quot;foo&quot;,&quot;2&quot;:&quot;bar&quot;,&quot;3&quot;:&quot;baz&quot;,&quot;4&quot;:&quot;blong&quot;}&quot;\n\nSequential array with one key unset\narray(3) {\n  [0]=&gt;\n  string(3) &quot;foo&quot;\n  [2]=&gt;\n  string(3) &quot;baz&quot;\n  [3]=&gt;\n  string(5) &quot;blong&quot;\n}\nstring(33) &quot;{&quot;0&quot;:&quot;foo&quot;,&quot;2&quot;:&quot;baz&quot;,&quot;3&quot;:&quot;blong&quot;}&quot;\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    In the event of a failure to encode, json_last_error()\n    can be used to determine the exact nature of the error.\n   \n  \n  Note: \n   \n    When encoding an array, if the keys are not a continuous numeric\n    sequence starting from 0, all keys are encoded as strings, and\n    specified explicitly for each key-value pair.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    json_decode() - Decodes a JSON string\n    json_last_error() - Returns the last error occurred\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-bind.php","title":"ldap_bind","description":"\n \n  ldap_bind\n  (PHP 4, PHP 5)ldap_bind &mdash; Bind to LDAP directory\n\n \n \n \n  Description\n  \n   bool ldap_bind\n    ( resource $link_identifier\n   [, string $bind_rdn = NULL\n   [, string $bind_password = NULL\n  ]] )\n\n  \n   Binds to the LDAP directory with specified RDN and password. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     bind_rdn\n     \n\n      \n      \n     \n\n    \n\n    \n\n     bind_password\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n  \n   If bind_rdn and bind_password\n   are not specified, an anonymous bind is attempted.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using LDAP Bind\n    \n\n&lt;?php\/\/&nbsp;using&nbsp;ldap&nbsp;bind$ldaprdn&nbsp;&nbsp;=&nbsp;'uname';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;ldap&nbsp;rdn&nbsp;or&nbsp;dn$ldappass&nbsp;=&nbsp;'password';&nbsp;&nbsp;\/\/&nbsp;associated&nbsp;password\/\/&nbsp;connect&nbsp;to&nbsp;ldap&nbsp;server$ldapconn&nbsp;=&nbsp;ldap_connect(\"ldap.example.com\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;LDAP&nbsp;server.\");if&nbsp;($ldapconn)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;binding&nbsp;to&nbsp;ldap&nbsp;server&nbsp;&nbsp;&nbsp;&nbsp;$ldapbind&nbsp;=&nbsp;ldap_bind($ldapconn,&nbsp;$ldaprdn,&nbsp;$ldappass);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;verify&nbsp;binding&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($ldapbind)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP&nbsp;bind&nbsp;successful...\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP&nbsp;bind&nbsp;failed...\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Using LDAP Bind Anonymously\n    \n\n&lt;?php\/\/using&nbsp;ldap&nbsp;bind&nbsp;anonymously\/\/&nbsp;connect&nbsp;to&nbsp;ldap&nbsp;server$ldapconn&nbsp;=&nbsp;ldap_connect(\"ldap.example.com\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;LDAP&nbsp;server.\");if&nbsp;($ldapconn)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;binding&nbsp;anonymously&nbsp;&nbsp;&nbsp;&nbsp;$ldapbind&nbsp;=&nbsp;ldap_bind($ldapconn);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($ldapbind)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP&nbsp;bind&nbsp;anonymous&nbsp;successful...\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP&nbsp;bind&nbsp;anonymous&nbsp;failed...\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_unbind() - Unbind from LDAP directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-count-entries.php","title":"ldap_count_entries","description":"\n \n  ldap_count_entries\n  (PHP 4, PHP 5)ldap_count_entries &mdash; Count the number of entries in a search\n\n \n \n \n  Description\n  \n   int ldap_count_entries\n    ( resource $link_identifier\n   , resource $result_identifier\n   )\n\n  \n   Returns the number of entries stored in the result of previous search\n   operations.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_identifier\n     \n\n      \n       The internal LDAP result.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns number of entries in the result or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-delete.php","title":"ldap_delete","description":"\n \n  ldap_delete\n  (PHP 4, PHP 5)ldap_delete &mdash; Delete an entry from a directory\n\n \n \n \n  Description\n  \n   bool ldap_delete\n    ( resource $link_identifier\n   , string $dn\n   )\n\n  \n   Deletes a particular entry in LDAP directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_add() - Add entries to LDAP directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-err2str.php","title":"ldap_err2str","description":"\n \n  ldap_err2str\n  (PHP 4, PHP 5)ldap_err2str &mdash; Convert LDAP error number into string error message\n\n \n \n \n  Description\n  \n   string ldap_err2str\n    ( int $errno\n   )\n\n  \n   Returns the string error message explaining the error number\n   errno. While LDAP errno numbers are standardized,\n   different libraries return different or even localized textual error\n   messages. Never check for a specific error message text, but always use an\n   error number to check.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     errno\n     \n\n      \n       The error number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error message, as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Enumerating all LDAP error messages\n    \n\n&lt;?php&nbsp;&nbsp;for&nbsp;($i=0;&nbsp;$i&lt;100;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Error&nbsp;$i:&nbsp;%s&lt;br&nbsp;\/&gt;\\n\",&nbsp;ldap_err2str($i));&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_errno() - Return the LDAP error number of the last LDAP command\n    ldap_error() - Return the LDAP error message of the last LDAP command\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-connect.php","title":"ldap_connect","description":"\n \n  ldap_connect\n  (PHP 4, PHP 5)ldap_connect &mdash; Connect to an LDAP server\n\n \n \n \n  Description\n  \n   resource ldap_connect\n    ([ string $hostname = NULL\n   [, int $port = 389\n  ]] )\n\n  \n   Establishes a connection to a LDAP server on a specified\n   hostname and port.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       If you are using OpenLDAP 2.x.x you can specify a URL instead of the\n       hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL\n       support, configure PHP with SSL, and set this parameter as  \n       ldaps:\/\/hostname\/.\n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n       The port to connect to. Not used when using URLs.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive LDAP link identifier on success, or FALSE on error.\n   When OpenLDAP 2.x.x is used, ldap_connect() will always\n   return a resource as it does not actually connect but just\n   initializes the connecting parameters.  The actual connect happens with\n   the next calls to ldap_* funcs, usually with\n   ldap_bind().\n  \n  \n   If no arguments are specified then the link identifier of the already\n   opened link will be returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.4\n       \n        URL and SSL support was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example of connecting to LDAP server.\n    \n\n&lt;?php\/\/&nbsp;LDAP&nbsp;variables$ldaphost&nbsp;=&nbsp;\"ldap.example.com\";&nbsp;&nbsp;\/\/&nbsp;your&nbsp;ldap&nbsp;servers$ldapport&nbsp;=&nbsp;389;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;your&nbsp;ldap&nbsp;server's&nbsp;port&nbsp;number\/\/&nbsp;Connecting&nbsp;to&nbsp;LDAP$ldapconn&nbsp;=&nbsp;ldap_connect($ldaphost,&nbsp;$ldapport)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;$ldaphost\");?&gt;\n\n\n    \n\n   \n   \n    Example #2 Example of connecting securely to LDAP server.\n    \n\n&lt;?php\/\/&nbsp;make&nbsp;sure&nbsp;your&nbsp;host&nbsp;is&nbsp;the&nbsp;correct&nbsp;one\/\/&nbsp;that&nbsp;you&nbsp;issued&nbsp;your&nbsp;secure&nbsp;certificate&nbsp;to$ldaphost&nbsp;=&nbsp;\"ldaps:\/\/ldap.example.com\/\";\/\/&nbsp;Connecting&nbsp;to&nbsp;LDAP$ldapconn&nbsp;=&nbsp;ldap_connect($ldaphost)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;{$ldaphost}\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_bind() - Bind to LDAP directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-dn2ufn.php","title":"ldap_dn2ufn","description":"\n \n  ldap_dn2ufn\n  (PHP 4, PHP 5)ldap_dn2ufn &mdash; Convert DN to User Friendly Naming format\n\n \n \n \n  Description\n  \n   string ldap_dn2ufn\n    ( string $dn\n   )\n\n  \n   Turns the specified dn, into a more user-friendly\n   form, stripping off type names.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the user friendly name.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-error.php","title":"ldap_error","description":"\n \n  ldap_error\n  (PHP 4, PHP 5)ldap_error &mdash; Return the LDAP error message of the last LDAP command\n\n \n \n \n  Description\n  \n   string ldap_error\n    ( resource $link_identifier\n   )\n\n  \n   Returns the string error message explaining the error generated by the\n   last LDAP command for the given link_identifier.\n   While LDAP errno numbers are standardized, different libraries return\n   different or even localized textual error messages. Never check for a\n   specific error message text, but always use an error number to check.\n  \n  \n   Unless you lower your warning level in your php.ini sufficiently or\n   prefix your LDAP commands with @ (at) characters to\n   suppress warning output, the errors generated will also show up in your\n   HTML output.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns string error message.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_err2str() - Convert LDAP error number into string error message\n    ldap_errno() - Return the LDAP error number of the last LDAP command\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-errno.php","title":"ldap_errno","description":"\n \n  ldap_errno\n  (PHP 4, PHP 5)ldap_errno &mdash; Return the LDAP error number of the last LDAP command\n\n \n \n \n  Description\n  \n   int ldap_errno\n    ( resource $link_identifier\n   )\n\n  \n   Returns the standardized error number returned by the last LDAP command.\n   This number can be converted into a textual error message using\n   ldap_err2str().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Return the LDAP error number of the last LDAP command for this\n   link.\n  \n \n\n\n \n  Examples\n  \n   Unless you lower your warning level in your php.ini sufficiently or\n   prefix your LDAP commands with @ (at) characters to suppress warning\n   output, the errors generated will also show up in your HTML output.\n   \n    Example #1 Generating and catching an error\n\n\n&lt;?php\/\/&nbsp;This&nbsp;example&nbsp;contains&nbsp;an&nbsp;error,&nbsp;which&nbsp;we&nbsp;will&nbsp;catch.$ld&nbsp;=&nbsp;ldap_connect(\"localhost\");$bind&nbsp;=&nbsp;ldap_bind($ld);\/\/&nbsp;syntax&nbsp;error&nbsp;in&nbsp;filter&nbsp;expression&nbsp;(errno&nbsp;87),\/\/&nbsp;must&nbsp;be&nbsp;\"objectclass=*\"&nbsp;to&nbsp;work.$res&nbsp;=&nbsp;&nbsp;@ldap_search($ld,&nbsp;\"o=Myorg,&nbsp;c=DE\",&nbsp;\"objectclass\");if&nbsp;(!$res)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP-Errno:&nbsp;\"&nbsp;.&nbsp;ldap_errno($ld)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"LDAP-Error:&nbsp;\"&nbsp;.&nbsp;ldap_error($ld)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;die(\"Argh!&lt;br&nbsp;\/&gt;\\n\");}$info&nbsp;=&nbsp;ldap_get_entries($ld,&nbsp;$res);echo&nbsp;$info[\"count\"]&nbsp;.&nbsp;\"&nbsp;matching&nbsp;entries.&lt;br&nbsp;\/&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_err2str() - Convert LDAP error number into string error message\n    ldap_error() - Return the LDAP error message of the last LDAP command\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-entry.php","title":"ldap_first_entry","description":"\n \n  ldap_first_entry\n  (PHP 4, PHP 5)ldap_first_entry &mdash; Return first result id\n\n \n \n \n  Description\n  \n   resource ldap_first_entry\n    ( resource $link_identifier\n   , resource $result_identifier\n   )\n\n  \n   Returns the entry identifier for first entry in the result. This entry\n   identifier is then supplied to ldap_next_entry()\n   routine to get successive entries from the result.\n  \n  \n   Entries in the LDAP result are read sequentially using the\n   ldap_first_entry() and\n   ldap_next_entry() functions.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the result entry identifier for the first entry on success and\n   FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_entries() - Get all result entries\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-explode-dn.php","title":"ldap_explode_dn","description":"\n \n  ldap_explode_dn\n  (PHP 4, PHP 5)ldap_explode_dn &mdash; Splits DN into its component parts\n\n \n \n \n  Description\n  \n   array ldap_explode_dn\n    ( string $dn\n   , int $with_attrib\n   )\n\n  \n   Splits the DN returned by ldap_get_dn() and breaks it\n   up into its component parts. Each part is known as Relative Distinguished\n   Name, or RDN.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     with_attrib\n     \n\n      \n       Used to request if the RDNs are returned with only values or their\n       attributes as well.  To get RDNs with the attributes (i.e. in\n       attribute=value format) set with_attrib to 0\n       and to get only values set it to 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of all DN components.\n   The first element in this array has count key and\n   represents the number of returned values, next elements are numerically\n   indexed DN components.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-attribute.php","title":"ldap_first_attribute","description":"\n \n  ldap_first_attribute\n  (PHP 4, PHP 5)ldap_first_attribute &mdash; Return first attribute\n\n \n \n \n  Description\n  \n   string ldap_first_attribute\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Gets the first attribute in the given entry. Remaining attributes are\n   retrieved by calling ldap_next_attribute() successively.\n  \n  \n   Similar to reading entries, attributes are also read one by one from a\n   particular entry.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ber_identifier\n     \n\n      \n       ber_identifier is the identifier to internal\n       memory location pointer. It is passed by reference. The same\n       ber_identifier is passed to\n       ldap_next_attribute() , which modifies that\n       pointer.\n      \n      Note: \n       \n        This parameter is no longer used as this is now handled automatically\n        by PHP. For backwards compatibility PHP will not throw an error if\n        this parameter is passed.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the first attribute in the entry on success and FALSE on\n   error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.4\n       \n        The ber_identifier was removed. This\n        is now handled automatically by PHP.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_next_attribute() - Get the next attribute in result\n    ldap_get_attributes() - Get attributes from a search result entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-first-reference.php","title":"ldap_first_reference","description":"\n \n  ldap_first_reference\n  (PHP 4 &gt;= 4.0.5, PHP 5)ldap_first_reference &mdash; Return first reference\n\n \n \n \n  Description\n  \n   resource ldap_first_reference\n    ( resource $link\n   , resource $result\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-free-result.php","title":"ldap_free_result","description":"\n \n  ldap_free_result\n  (PHP 4, PHP 5)ldap_free_result &mdash; Free result memory\n\n \n \n \n  Description\n  \n   bool ldap_free_result\n    ( resource $result_identifier\n   )\n\n  \n   Frees up the memory allocated internally to store the result. All result\n   memory will be automatically freed when the script terminates.\n  \n  \n   Typically all the memory allocated for the LDAP result gets freed at the\n   end of the script. In case the script is making successive searches which\n   return large result sets, ldap_free_result() could be\n   called to keep the runtime memory usage by the script low.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-dn.php","title":"ldap_get_dn","description":"\n \n  ldap_get_dn\n  (PHP 4, PHP 5)ldap_get_dn &mdash; Get the DN of a result entry\n\n \n \n \n  Description\n  \n   string ldap_get_dn\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Finds out the DN of an entry in the result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the DN of the result entry and FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-attributes.php","title":"ldap_get_attributes","description":"\n \n  ldap_get_attributes\n  (PHP 4, PHP 5)ldap_get_attributes &mdash; Get attributes from a search result entry\n\n \n \n \n  Description\n  \n   array ldap_get_attributes\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Reads attributes and values from an entry in the search result. \n  \n  \n   Having located a specific entry in the directory, you can find out what\n   information is held for that entry by using this call. You would use this\n   call for an application which &quot;browses&quot; directory entries and\/or where you\n   do not know the structure of the directory entries. In many applications\n   you will be searching for a specific attribute such as an email address or\n   a surname, and won&#039;t care what other data is held.\n   \n    \n\nreturn_value[&quot;count&quot;] = number of attributes in the entry\nreturn_value[0] = first attribute\nreturn_value[n] = nth attribute\n\nreturn_value[&quot;attribute&quot;][&quot;count&quot;] = number of values for attribute\nreturn_value[&quot;attribute&quot;][0] = first value of the attribute\nreturn_value[&quot;attribute&quot;][i] = (i+1)th value of the attribute\n\n    \n\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a complete entry information in a multi-dimensional array\n   on success and FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Show the list of attributes held for a particular directory entry\n    \n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;the&nbsp;link&nbsp;identifier&nbsp;for&nbsp;the&nbsp;directory\/\/&nbsp;$sr&nbsp;is&nbsp;a&nbsp;valid&nbsp;search&nbsp;result&nbsp;from&nbsp;a&nbsp;prior&nbsp;call&nbsp;to\/\/&nbsp;one&nbsp;of&nbsp;the&nbsp;ldap&nbsp;directory&nbsp;search&nbsp;calls$entry&nbsp;=&nbsp;ldap_first_entry($ds,&nbsp;$sr);$attrs&nbsp;=&nbsp;ldap_get_attributes($ds,&nbsp;$entry);echo&nbsp;$attrs[\"count\"]&nbsp;.&nbsp;\"&nbsp;attributes&nbsp;held&nbsp;for&nbsp;this&nbsp;entry:&lt;p&gt;\";for&nbsp;($i=0;&nbsp;$i&nbsp;&lt;&nbsp;$attrs[\"count\"];&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$attrs[$i]&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_first_attribute() - Return first attribute\n    ldap_next_attribute() - Get the next attribute in result\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-option.php","title":"ldap_get_option","description":"\n \n  ldap_get_option\n  (PHP 4 &gt;= 4.0.4, PHP 5)ldap_get_option &mdash; Get the current value for given option\n\n \n \n \n  Description\n  \n   bool ldap_get_option\n    ( resource $link_identifier\n   , int $option\n   , mixed &$retval\n   )\n\n  \n   Sets retval to the value of the specified option.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       The parameter option can be one of:\n       \n        \n         \n          \n           Option\n           Type\n          \n\n         \n\n         \n          \n           LDAP_OPT_DEREF\n           integer\n          \n\n          \n           LDAP_OPT_SIZELIMIT\n           integer\n          \n\n          \n           LDAP_OPT_TIMELIMIT\n           integer\n          \n\n          \n           LDAP_OPT_NETWORK_TIMEOUT\n           integer\n          \n\n          \n           LDAP_OPT_PROTOCOL_VERSION\n           integer\n          \n\n          \n           LDAP_OPT_ERROR_NUMBER\n           integer\n          \n\n          \n           LDAP_OPT_REFERRALS\n           bool\n          \n\n          \n           LDAP_OPT_RESTART\n           bool\n          \n\n          \n           LDAP_OPT_HOST_NAME\n           string\n          \n\n          \n           LDAP_OPT_ERROR_STRING\n           string\n          \n\n          \n           LDAP_OPT_MATCHED_DN\n           string\n          \n\n          \n           LDAP_OPT_SERVER_CONTROLS\n           array\n          \n\n          \n           LDAP_OPT_CLIENT_CONTROLS\n           array\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     retval\n     \n\n      \n       This will be set to the option value.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Check protocol version\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;serverif&nbsp;(ldap_get_option($ds,&nbsp;LDAP_OPT_PROTOCOL_VERSION,&nbsp;$version))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Using&nbsp;protocol&nbsp;version&nbsp;$version\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;determine&nbsp;protocol&nbsp;version\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function is only available when using OpenLDAP 2.x.x OR Netscape\n    Directory SDK x.x.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_set_option() - Set the value of the given option\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-values-len.php","title":"ldap_get_values_len","description":"\n \n  ldap_get_values_len\n  (PHP 4, PHP 5)ldap_get_values_len &mdash; Get all binary values from a result entry\n\n \n \n \n  Description\n  \n   array ldap_get_values_len\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   , string $attribute\n   )\n\n  \n   Reads all the values of the attribute in the entry in the result.\n  \n  \n   This function is used exactly like ldap_get_values()\n   except that it handles binary data and not string data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     attribute\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of values for the attribute on success and FALSE on\n   error. Individual values are accessed by integer index in the array. The\n   first index is 0. The number of values can be found by indexing &quot;count&quot;\n   in the resultant array. \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_values() - Get all values from a result entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-entries.php","title":"ldap_get_entries","description":"\n \n  ldap_get_entries\n  (PHP 4, PHP 5)ldap_get_entries &mdash; Get all result entries\n\n \n \n \n  Description\n  \n   array ldap_get_entries\n    ( resource $link_identifier\n   , resource $result_identifier\n   )\n\n  \n   Reads multiple entries from the given result, and then reading the\n   attributes and multiple values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a complete result information in a multi-dimensional array on\n   success and FALSE on error.\n  \n  \n   The structure of the array is as follows.\n   The attribute index is converted to lowercase. (Attributes are\n   case-insensitive for directory servers, but not when used as\n   array indices.)\n   \n    \n\nreturn_value[&quot;count&quot;] = number of entries in the result\nreturn_value[0] : refers to the details of first entry\n\nreturn_value[i][&quot;dn&quot;] =  DN of the ith entry in the result\n\nreturn_value[i][&quot;count&quot;] = number of attributes in ith entry\nreturn_value[i][j] = NAME of the jth attribute in the ith entry in the result\n\nreturn_value[i][&quot;attribute&quot;][&quot;count&quot;] = number of values for\n                                        attribute in ith entry\nreturn_value[i][&quot;attribute&quot;][j] = jth value of attribute in ith entry\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_first_entry() - Return first result id\n    ldap_next_entry() - Get next result entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-get-values.php","title":"ldap_get_values","description":"\n \n  ldap_get_values\n  (PHP 4, PHP 5)ldap_get_values &mdash; Get all values from a result entry\n\n \n \n \n  Description\n  \n   array ldap_get_values\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   , string $attribute\n   )\n\n  \n   Reads all the values of the attribute in the entry in the result.\n  \n  \n   This call needs a result_entry_identifier,\n   so needs to be preceded by one of the ldap search calls and one\n   of the calls to get an individual entry.\n  \n  \n   You application will either be hard coded to look for certain\n   attributes (such as &quot;surname&quot; or &quot;mail&quot;) or you will have to use\n   the ldap_get_attributes() call to work out\n   what attributes exist for a given entry.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     attribute\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of values for the attribute on success and FALSE on\n   error. The number of values can be found by indexing &quot;count&quot; in the\n   resultant array. Individual values are accessed by integer index in the\n   array.  The first index is 0.\n  \n  \n   LDAP allows more than one entry for an attribute, so it can, for example,\n   store a number of email addresses for one person&#039;s directory entry all\n   labeled with the attribute &quot;mail&quot;\n   \n    \n    return_value[&quot;count&quot;] = number of values for attribute\n    return_value[0] = first value of attribute\n    return_value[i] = ith value of attribute\n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 List all values of the &quot;mail&quot; attribute for a\n     directory entry \n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;server\/\/&nbsp;$sr&nbsp;is&nbsp;a&nbsp;valid&nbsp;search&nbsp;result&nbsp;from&nbsp;a&nbsp;prior&nbsp;call&nbsp;to\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one&nbsp;of&nbsp;the&nbsp;ldap&nbsp;directory&nbsp;search&nbsp;calls\/\/&nbsp;$entry&nbsp;is&nbsp;a&nbsp;valid&nbsp;entry&nbsp;identifier&nbsp;from&nbsp;a&nbsp;prior&nbsp;call&nbsp;to\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one&nbsp;of&nbsp;the&nbsp;calls&nbsp;that&nbsp;returns&nbsp;a&nbsp;directory&nbsp;entry$values&nbsp;=&nbsp;ldap_get_values($ds,&nbsp;$entry,&nbsp;\"mail\");echo&nbsp;$values[\"count\"]&nbsp;.&nbsp;\"&nbsp;email&nbsp;addresses&nbsp;for&nbsp;this&nbsp;entry.&lt;br&nbsp;\/&gt;\";for&nbsp;($i=0;&nbsp;$i&nbsp;&lt;&nbsp;$values[\"count\"];&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$values[$i]&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_values_len() - Get all binary values from a result entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-add.php","title":"ldap_mod_add","description":"\n \n  ldap_mod_add\n  (PHP 4, PHP 5)ldap_mod_add &mdash; Add attribute values to current attributes\n\n \n \n \n  Description\n  \n   bool ldap_mod_add\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )\n\n  \n   Adds one or more attributes to the specified dn.\n   It performs the modification at the attribute level as opposed to the\n   object level. Object-level additions are done by the\n   ldap_add() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     entry\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    ldap_mod_del() - Delete attribute values from current attributes\n    ldap_mod_replace() - Replace attribute values with new ones\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-list.php","title":"ldap_list","description":"\n \n  ldap_list\n  (PHP 4, PHP 5)ldap_list &mdash; Single-level search\n\n \n \n \n  Description\n  \n   resource ldap_list\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )\n\n  \n   Performs the search for a specified filter on the\n   directory with the scope LDAP_SCOPE_ONELEVEL.\n  \n  \n   LDAP_SCOPE_ONELEVEL means that the search should only\n   return information that is at the level immediately below the\n   base_dn given in the call.\n   (Equivalent to typing &quot;ls&quot; and getting a list of files and folders in the\n   current working directory.)\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     base_dn\n     \n\n      \n       The base DN for the directory.\n      \n     \n\n    \n\n    \n\n     filter\n     \n\n      \n      \n     \n\n    \n\n    \n\n     attributes\n     \n\n      \n       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested.\n      \n      \n       Using this parameter is much more efficient than the default action\n       (which is to return all attributes and their associated values). \n       The use of this parameter should therefore be considered good\n       practice.\n      \n     \n\n    \n\n    \n\n     attrsonly\n     \n\n      \n       Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour.\n      \n     \n\n    \n\n    \n\n     sizelimit\n     \n\n      \n       Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset sizelimit. You can\n        set it lower though.\n       \n       \n        Some directory server hosts will be configured to return no more than\n        a preset number of entries. If this occurs, the server will indicate\n        that it has only returned a partial results set. This also occurs if\n        you use this parameter to limit the count of fetched entries.\n       \n      \n     \n\n    \n\n    \n\n     timelimit\n     \n\n      \n       Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset timelimit. You can\n        set it lower though.\n       \n      \n     \n\n    \n\n    \n\n     deref\n     \n\n      \n       Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a search result identifier or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.5\n       \n        Parallel searches support was added. See \n        ldap_search() for details.\n       \n      \n\n      \n       4.0.2\n       \n        The attrsonly, sizelimit,\n        timelimit and deref were\n        added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Produce a list of all organizational units of an organization\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;server$basedn&nbsp;=&nbsp;\"o=My&nbsp;Company,&nbsp;c=US\";$justthese&nbsp;=&nbsp;array(\"ou\");$sr&nbsp;=&nbsp;ldap_list($ds,&nbsp;$basedn,&nbsp;\"ou=*\",&nbsp;$justthese);$info&nbsp;=&nbsp;ldap_get_entries($ds,&nbsp;$sr);for&nbsp;($i=0;&nbsp;$i&nbsp;&lt;&nbsp;$info[\"count\"];&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$info[$i][\"ou\"][0];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_search() - Search LDAP tree\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-del.php","title":"ldap_mod_del","description":"\n \n  ldap_mod_del\n  (PHP 4, PHP 5)ldap_mod_del &mdash; Delete attribute values from current attributes\n\n \n \n \n  Description\n  \n   bool ldap_mod_del\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )\n\n  \n   Removes one or more attributes from the specified dn.\n   It performs the modification at the attribute level as opposed to the object\n   level. Object-level deletions are done by the \n   ldap_delete() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     entry\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_mod_add() - Add attribute values to current attributes\n    ldap_mod_replace() - Replace attribute values with new ones\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-mod-replace.php","title":"ldap_mod_replace","description":"\n \n  ldap_mod_replace\n  (PHP 4, PHP 5)ldap_mod_replace &mdash; Replace attribute values with new ones\n\n \n \n \n  Description\n  \n   bool ldap_mod_replace\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )\n\n  \n   Replaces one or more attributes from the specified dn.\n   It performs the modification at the attribute level as opposed to the object\n   level. Object-level modifications are done by the \n   ldap_modify() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     entry\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    ldap_mod_del() - Delete attribute values from current attributes\n    ldap_mod_add() - Add attribute values to current attributes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-attribute.php","title":"ldap_next_attribute","description":"\n \n  ldap_next_attribute\n  (PHP 4, PHP 5)ldap_next_attribute &mdash; Get the next attribute in result\n\n \n \n \n  Description\n  \n   string ldap_next_attribute\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Retrieves the attributes in an entry. The first call to\n   ldap_next_attribute() is made with the\n   result_entry_identifier returned from\n   ldap_first_attribute().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ber_identifier\n     \n\n      \n       The internal state of the pointer is maintained by this parameter.\n      \n      Note: \n       \n        This parameter is no longer used as this is now handled automatically\n        by PHP. For backwards compatibility PHP will not throw an error if\n        this parameter is passed.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the next attribute in an entry on success and FALSE on\n   error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.4\n       \n        The ber_identifier was removed. This\n        is now handled automatically by PHP.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_attributes() - Get attributes from a search result entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-entry.php","title":"ldap_next_entry","description":"\n \n  ldap_next_entry\n  (PHP 4, PHP 5)ldap_next_entry &mdash; Get next result entry\n\n \n \n \n  Description\n  \n   resource ldap_next_entry\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Retrieve the entries stored in the result. Successive calls to the\n   ldap_next_entry() return entries one by one till there\n   are no more entries. The first call to ldap_next_entry()\n   is made after the call to ldap_first_entry() with the\n   result_entry_identifier as returned from the\n   ldap_first_entry().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     result_entry_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns entry identifier for the next entry in the result whose entries\n   are being read starting with ldap_first_entry(). If\n   there are no more entries in the result then it returns FALSE.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_entries() - Get all result entries\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-modify.php","title":"ldap_modify","description":"\n \n  ldap_modify\n  (PHP 4, PHP 5)ldap_modify &mdash; Modify an LDAP entry\n\n \n \n \n  Description\n  \n   bool ldap_modify\n    ( resource $link_identifier\n   , string $dn\n   , array $entry\n   )\n\n  \n   Modify the existing entries in the LDAP directory. The structure of the\n   entry is same as in ldap_add().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     entry\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    ldap_rename() - Modify the name of an entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-next-reference.php","title":"ldap_next_reference","description":"\n \n  ldap_next_reference\n  (PHP 4 &gt;= 4.0.5, PHP 5)ldap_next_reference &mdash; Get next reference\n\n \n \n \n  Description\n  \n   resource ldap_next_reference\n    ( resource $link\n   , resource $entry\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-parse-reference.php","title":"ldap_parse_reference","description":"\n \n  ldap_parse_reference\n  (PHP 4 &gt;= 4.0.5, PHP 5)ldap_parse_reference &mdash; Extract information from reference entry\n\n \n \n \n  Description\n  \n   bool ldap_parse_reference\n    ( resource $link\n   , resource $entry\n   , array &$referrals\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-parse-result.php","title":"ldap_parse_result","description":"\n \n  ldap_parse_result\n  (PHP 4 &gt;= 4.0.5, PHP 5)ldap_parse_result &mdash; Extract information from result\n\n \n \n \n  Description\n  \n   bool ldap_parse_result\n    ( resource $link\n   , resource $result\n   , int &$errcode\n   [, string &$matcheddn\n   [, string &$errmsg\n   [, array &$referrals\n  ]]] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-read.php","title":"ldap_read","description":"\n \n  ldap_read\n  (PHP 4, PHP 5)ldap_read &mdash; Read an entry\n\n \n \n \n  Description\n  \n   resource ldap_read\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )\n\n  \n   Performs the search for a specified filter on the\n   directory with the scope LDAP_SCOPE_BASE. So it is\n   equivalent to reading an entry from the directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     base_dn\n     \n\n      \n       The base DN for the directory.\n      \n     \n\n    \n\n    \n\n     filter\n     \n\n      \n       An empty filter is not allowed. If you want to retrieve absolutely all\n       information for this entry, use a filter of \n       objectClass=*. If you know which entry types are\n       used on the directory server, you might use an appropriate filter such\n       as objectClass=inetOrgPerson.\n      \n     \n\n    \n\n    \n\n     attributes\n     \n\n      \n       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested.\n      \n      \n       Using this parameter is much more efficient than the default action\n       (which is to return all attributes and their associated values). \n       The use of this parameter should therefore be considered good\n       practice.\n      \n     \n\n    \n\n    \n\n     attrsonly\n     \n\n      \n       Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour.\n      \n     \n\n    \n\n    \n\n     sizelimit\n     \n\n      \n       Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset sizelimit. You can\n        set it lower though.\n       \n       \n        Some directory server hosts will be configured to return no more than\n        a preset number of entries. If this occurs, the server will indicate\n        that it has only returned a partial results set. This also occurs if\n        you use this parameter to limit the count of fetched entries.\n       \n      \n     \n\n    \n\n    \n\n     timelimit\n     \n\n      \n       Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset timelimit. You can\n        set it lower though.\n       \n      \n     \n\n    \n\n    \n\n     deref\n     \n\n      \n       Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a search result identifier or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.5\n       \n        Parallel searches support was added.\n        See ldap_search() for details.\n       \n      \n\n      \n       4.0.2\n       \n        The attrsonly, sizelimit,\n        timelimit and deref were\n        added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-sasl-bind.php","title":"ldap_sasl_bind","description":"\n \n  ldap_sasl_bind\n  (PHP 5)ldap_sasl_bind &mdash; Bind to LDAP directory using SASL\n\n \n \n \n  Description\n  \n   bool ldap_sasl_bind\n    ( resource $link\n   [, string $binddn = NULL\n   [, string $password = NULL\n   [, string $sasl_mech = NULL\n   [, string $sasl_realm = NULL\n   [, string $sasl_authc_id = NULL\n   [, string $sasl_authz_id = NULL\n   [, string $props = NULL\n  ]]]]]]] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   Requirement\n   \n    ldap_sasl_bind() requires SASL\n    support (sasl.h). Be sure\n    --with-ldap-sasl is used when configuring PHP\n    otherwise this function will be undefined.\n   \n  \n \n\n\n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.3\n       \n        Support on Windows was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-rename.php","title":"ldap_rename","description":"\n \n  ldap_rename\n  (PHP 4 &gt;= 4.0.5, PHP 5)ldap_rename &mdash; Modify the name of an entry\n\n \n \n \n  Description\n  \n   bool ldap_rename\n    ( resource $link_identifier\n   , string $dn\n   , string $newrdn\n   , string $newparent\n   , bool $deleteoldrdn\n   )\n\n  \n   The entry specified by dn is renamed\/moved.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     dn\n     \n\n      \n       The distinguished name of an LDAP entity.\n      \n     \n\n    \n\n    \n\n     newrdn\n     \n\n      \n       The new RDN.\n      \n     \n\n    \n\n    \n\n     newparent\n     \n\n      \n       The new parent\/superior entry.\n      \n     \n\n    \n\n    \n\n     deleteoldrdn\n     \n\n      \n       If TRUE the old RDN value(s) is removed, else the old RDN value(s)\n       is retained as non-distinguished values of the entry.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function currently only works with LDAPv3. You may have to use\n    ldap_set_option() prior to binding to use LDAPv3. This\n    function is only available when using OpenLDAP 2.x.x OR Netscape\n    Directory SDK x.x.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_modify() - Modify an LDAP entry\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-set-option.php","title":"ldap_set_option","description":"\n \n  ldap_set_option\n  (PHP 4 &gt;= 4.0.4, PHP 5)ldap_set_option &mdash; Set the value of the given option\n\n \n\n  \n  Description\n  \n   bool ldap_set_option\n    ( resource $link_identifier\n   , int $option\n   , mixed $newval\n   )\n\n  \n   Sets the value of the specified option to be newval.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       The parameter option can be one of:\n       \n        \n         \n          \n           Option\n           Type\n           Available since\n          \n\n         \n\n         \n          \n           LDAP_OPT_DEREF\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_SIZELIMIT\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_TIMELIMIT\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_NETWORK_TIMEOUT\n           integer\n           PHP 5.3.0\n          \n\n          \n           LDAP_OPT_PROTOCOL_VERSION\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_ERROR_NUMBER\n           integer\n           &nbsp;\n          \n\n          \n           LDAP_OPT_REFERRALS\n           bool\n           &nbsp;\n          \n\n          \n           LDAP_OPT_RESTART\n           bool\n           &nbsp;\n          \n\n          \n           LDAP_OPT_HOST_NAME\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_ERROR_STRING\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_MATCHED_DN\n           string\n           &nbsp;\n          \n\n          \n           LDAP_OPT_SERVER_CONTROLS\n           array\n           &nbsp;\n          \n\n          \n           LDAP_OPT_CLIENT_CONTROLS\n           array\n           &nbsp;\n          \n\n         \n        \n       \n\n      \n      \n       LDAP_OPT_SERVER_CONTROLS and \n       LDAP_OPT_CLIENT_CONTROLS require a list of\n       controls, this means that the value must be an array of controls. A\n       control consists of an oid identifying the control,\n       an optional value, and an optional flag for\n       criticality. In PHP a control is given by an\n       array containing an element with the key oid\n       and string value, and two optional elements. The optional\n       elements are key value with string value\n       and key iscritical with boolean value.\n       iscritical defaults to FALSE\n       if not supplied. See &raquo;&nbsp;draft-ietf-ldapext-ldap-c-api-xx.txt\n       for details. See also the second example below.\n      \n     \n\n    \n\n    \n\n     newval\n     \n\n      \n       The new value for the specified option.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Set protocol version\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;serverif&nbsp;(ldap_set_option($ds,&nbsp;LDAP_OPT_PROTOCOL_VERSION,&nbsp;3))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Using&nbsp;LDAPv3\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Failed&nbsp;to&nbsp;set&nbsp;protocol&nbsp;version&nbsp;to&nbsp;3\";}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Set server controls\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;server\/\/&nbsp;control&nbsp;with&nbsp;no&nbsp;value$ctrl1&nbsp;=&nbsp;array(\"oid\"&nbsp;=&gt;&nbsp;\"1.2.752.58.10.1\",&nbsp;\"iscritical\"&nbsp;=&gt;&nbsp;true);\/\/&nbsp;iscritical&nbsp;defaults&nbsp;to&nbsp;FALSE$ctrl2&nbsp;=&nbsp;array(\"oid\"&nbsp;=&gt;&nbsp;\"1.2.752.58.1.10\",&nbsp;\"value\"&nbsp;=&gt;&nbsp;\"magic\");\/\/&nbsp;try&nbsp;to&nbsp;set&nbsp;both&nbsp;controlsif&nbsp;(!ldap_set_option($ds,&nbsp;LDAP_OPT_SERVER_CONTROLS,&nbsp;array($ctrl1,&nbsp;$ctrl2)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Failed&nbsp;to&nbsp;set&nbsp;server&nbsp;controls\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function is only available when using OpenLDAP 2.x.x OR Netscape\n    Directory SDK x.x.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ldap_get_option() - Get the current value for given option\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-search.php","title":"ldap_search","description":"\n \n  ldap_search\n  (PHP 4, PHP 5)ldap_search &mdash; Search LDAP tree\n\n \n\n \n  Description\n  \n   resource ldap_search\n    ( resource $link_identifier\n   , string $base_dn\n   , string $filter\n   [, array $attributes\n   [, int $attrsonly\n   [, int $sizelimit\n   [, int $timelimit\n   [, int $deref\n  ]]]]] )\n\n  \n   Performs the search for a specified filter on the directory with the scope\n   of LDAP_SCOPE_SUBTREE. This is equivalent to searching\n   the entire directory.\n  \n  \n   From 4.0.5 on it&#039;s also possible to do parallel searches. To do this\n   you use an array of link identifiers, rather than a single identifier,\n   as the first argument. If you don&#039;t want the same base DN and the\n   same filter for all the searches, you can also use an array of base DNs\n   and\/or an array of filters. Those arrays must be of the same size as\n   the link identifier array since the first entries of the arrays are\n   used for one search, the second entries are used for another, and so\n   on. When doing parallel searches an array of search result\n   identifiers is returned, except in case of error, then the entry\n   corresponding to the search will be FALSE. This is very much like\n   the value normally returned, except that a result identifier is always\n   returned when a search was made. There are some rare cases where the\n   normal search returns FALSE while the parallel search returns an\n   identifier.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n    \n\n     base_dn\n     \n\n      \n       The base DN for the directory.\n      \n     \n\n    \n\n    \n\n     filter\n     \n\n      \n       The search filter can be simple or advanced, using boolean operators in\n       the format described in the LDAP documentation (see the &raquo;&nbsp;Netscape Directory SDK for full\n       information on filters).\n      \n     \n\n    \n\n    \n\n     attributes\n     \n\n      \n       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).\n       Note that the &quot;dn&quot; is always returned irrespective of which attributes\n       types are requested.\n      \n      \n       Using this parameter is much more efficient than the default action\n       (which is to return all attributes and their associated values). \n       The use of this parameter should therefore be considered good\n       practice.\n      \n     \n\n    \n\n    \n\n     attrsonly\n     \n\n      \n       Should be set to 1 if only attribute types are wanted. If set to 0\n       both attributes types and attribute values are fetched which is the\n       default behaviour.\n      \n     \n\n    \n\n    \n\n     sizelimit\n     \n\n      \n       Enables you to limit the count of entries fetched. Setting this to 0\n       means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset sizelimit. You can\n        set it lower though.\n       \n       \n        Some directory server hosts will be configured to return no more than\n        a preset number of entries. If this occurs, the server will indicate\n        that it has only returned a partial results set. This also occurs if\n        you use this parameter to limit the count of fetched entries.\n       \n      \n     \n\n    \n\n    \n\n     timelimit\n     \n\n      \n       Sets the number of seconds how long is spend on the search. Setting\n       this to 0 means no limit.\n      \n      Note: \n       \n        This parameter can NOT override server-side preset timelimit. You can\n        set it lower though.\n       \n      \n     \n\n    \n\n    \n\n     deref\n     \n\n      \n       Specifies how aliases should be handled during the search. It can be\n       one of the following:\n       \n        \n         \n          LDAP_DEREF_NEVER - (default) aliases are never\n          dereferenced.\n         \n        \n        \n         \n          LDAP_DEREF_SEARCHING - aliases should be\n          dereferenced during the search but not when locating the base object\n          of the search.\n         \n        \n        \n         \n          LDAP_DEREF_FINDING - aliases should be\n          dereferenced when locating the base object but not during the search.\n         \n        \n        \n         \n          LDAP_DEREF_ALWAYS - aliases should be dereferenced\n          always.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a search result identifier or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.5\n       \n        Parallel searches support was added.\n       \n      \n\n      \n       4.0.2\n       \n        The attrsonly, sizelimit,\n        timelimit and deref were\n        added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   The example below retrieves the organizational unit, surname,\n   given name and email address for all people in &quot;My Company&quot; where\n   the surname or given name contains the substring $person. This\n   example uses a boolean filter to tell the server to look for\n   information in more than one attribute.\n   \n    Example #1 LDAP search\n    \n\n&lt;?php\/\/&nbsp;$ds&nbsp;is&nbsp;a&nbsp;valid&nbsp;link&nbsp;identifier&nbsp;for&nbsp;a&nbsp;directory&nbsp;server\/\/&nbsp;$person&nbsp;is&nbsp;all&nbsp;or&nbsp;part&nbsp;of&nbsp;a&nbsp;person's&nbsp;name,&nbsp;eg&nbsp;\"Jo\"$dn&nbsp;=&nbsp;\"o=My&nbsp;Company,&nbsp;c=US\";$filter=\"(|(sn=$person*)(givenname=$person*))\";$justthese&nbsp;=&nbsp;array(\"ou\",&nbsp;\"sn\",&nbsp;\"givenname\",&nbsp;\"mail\");$sr=ldap_search($ds,&nbsp;$dn,&nbsp;$filter,&nbsp;$justthese);$info&nbsp;=&nbsp;ldap_get_entries($ds,&nbsp;$sr);echo&nbsp;$info[\"count\"].\"&nbsp;entries&nbsp;returned\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-t61-to-8859.php","title":"ldap_t61_to_8859","description":"\n \n  ldap_t61_to_8859\n  (PHP 4 &gt;= 4.0.2, PHP 5)ldap_t61_to_8859 &mdash; Translate t61 characters to 8859 characters\n\n \n\n \n  Description\n  \n   string ldap_t61_to_8859\n    ( string $value\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-set-rebind-proc.php","title":"ldap_set_rebind_proc","description":"\n \n  ldap_set_rebind_proc\n  (PHP 4 &gt;= 4.2.0, PHP 5)ldap_set_rebind_proc &mdash; Set a callback function to do re-binds on referral chasing\n\n \n\n \n  Description\n  \n   bool ldap_set_rebind_proc\n    ( resource $link\n   , callback $callback\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-sort.php","title":"ldap_sort","description":"\n \n  ldap_sort\n  (PHP 4 &gt;= 4.2.0, PHP 5)ldap_sort &mdash; Sort LDAP result entries\n\n \n\n \n  Description\n  \n   bool ldap_sort\n    ( resource $link\n   , resource $result\n   , string $sortfilter\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-start-tls.php","title":"ldap_start_tls","description":"\n \n  ldap_start_tls\n  (PHP 4 &gt;= 4.2.0, PHP 5)ldap_start_tls &mdash; Start TLS\n\n \n\n \n  Description\n  \n   bool ldap_start_tls\n    ( resource $link\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-determine-best-xfer-encoding.php","title":"mailparse_determine_best_xfer_encoding","description":"\n \n  mailparse_determine_best_xfer_encoding\n  (PECL mailparse &gt;= 0.9.0)mailparse_determine_best_xfer_encoding &mdash; Gets the best way of encoding\n\n \n \n  Description\n  \n   string mailparse_determine_best_xfer_encoding\n    ( resource $fp\n   )\n\n  \n   Figures out the best way of encoding the content read from the given file\n   pointer.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fp\n     \n\n      \n       A valid file pointer, which must be seek-able.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns one of the character encodings supported by the\n   mbstring module.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 mailparse_determine_best_xfer_encoding() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('somemail.eml',&nbsp;'r');echo&nbsp;'Best&nbsp;encoding:&nbsp;'&nbsp;.&nbsp;mailparse_determine_best_xfer_encoding($fp);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nBest encoding: 7bit\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ldap-unbind.php","title":"ldap_unbind","description":"\n \n  ldap_unbind\n  (PHP 4, PHP 5)ldap_unbind &mdash; Unbind from LDAP directory\n\n \n\n \n  Description\n  \n   bool ldap_unbind\n    ( resource $link_identifier\n   )\n\n  \n   Unbinds from the LDAP directory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    ldap_bind() - Bind to LDAP directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-create.php","title":"mailparse_msg_create","description":"\n \n  mailparse_msg_create\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_create &mdash; Create a mime mail resource\n\n \n \n  Description\n  \n   resource mailparse_msg_create\n    ( void\n   )\n\n  \n   Create a MIME mail resource.\n  \n \n\n\n \n  Return Values\n  \n   Returns a handle that can be used to parse a message.\n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_free() - Frees a MIME resource\n    mailparse_msg_parse_file() - Parses a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-part-file.php","title":"mailparse_msg_extract_part_file","description":"\n \n  mailparse_msg_extract_part_file\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_extract_part_file &mdash; Extracts\/decodes a message section\n\n \n \n  Description\n  \n   string mailparse_msg_extract_part_file\n    ( resource $mimemail\n   , mixed $filename\n   [, callback $callbackfunc\n  ] )\n\n  \n   Extracts\/decodes a message section from the supplied filename.\n  \n  \n   The contents of the section will be decoded according to their transfer\n   encoding - base64, quoted-printable and uuencoded text are supported.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource, created with\n       mailparse_msg_create().\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n       Can be a file name or a valid stream resource.\n      \n     \n\n    \n\n    \n\n     callbackfunc\n     \n\n      \n       If set, this must be either a valid callback that will be passed the\n       extracted section, or NULL to make this function return the\n       extracted section.\n      \n      \n       If not specified, the contents will be sent to &quot;stdout&quot;.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If callbackfunc is not NULL returns TRUE on\n   success.\n  \n  \n   If callbackfunc is set to NULL, returns the\n   extracted section as a string.\n  \n  \n   Returns FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_extract_part() - Extracts\/decodes a message section\n    mailparse_msg_extract_whole_part_file() - Extracts a message section including headers without decoding the transfer encoding\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-whole-part-file.php","title":"mailparse_msg_extract_whole_part_file","description":"\n \n  mailparse_msg_extract_whole_part_file\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_extract_whole_part_file &mdash; Extracts a message section including headers without decoding the transfer encoding\n\n \n \n  Description\n  \n   string mailparse_msg_extract_whole_part_file\n    ( resource $mimemail\n   , string $filename\n   [, callback $callbackfunc\n  ] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n      \n     \n\n    \n\n    \n\n     callbackfunc\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_extract_part() - Extracts\/decodes a message section\n    mailparse_msg_extract_part_file() - Extracts\/decodes a message section\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-part-data.php","title":"mailparse_msg_get_part_data","description":"\n \n  mailparse_msg_get_part_data\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_get_part_data &mdash; Returns an associative array of info about the message\n\n \n \n  Description\n  \n   array mailparse_msg_get_part_data\n    ( resource $mimemail\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-free.php","title":"mailparse_msg_free","description":"\n \n  mailparse_msg_free\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_free &mdash; Frees a MIME resource\n\n \n \n  Description\n  \n   bool mailparse_msg_free\n    ( resource $mimemail\n   )\n\n  \n   Frees a MIME resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource allocated by\n       mailparse_msg_create() or \n       mailparse_msg_parse_file().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_create() - Create a mime mail resource\n    mailparse_msg_parse_file() - Parses a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-extract-part.php","title":"mailparse_msg_extract_part","description":"\n \n  mailparse_msg_extract_part\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_extract_part &mdash; \n   Extracts\/decodes a message section\n  \n\n \n \n  Description\n  \n   void mailparse_msg_extract_part\n    ( resource $mimemail\n   , string $msgbody\n   [, callback $callbackfunc\n  ] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n    \n\n     msgbody\n     \n\n      \n      \n     \n\n    \n\n    \n\n     callbackfunc\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_extract_part_file() - Extracts\/decodes a message section\n    mailparse_msg_extract_whole_part_file() - Extracts a message section including headers without decoding the transfer encoding\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-part.php","title":"mailparse_msg_get_part","description":"\n \n  mailparse_msg_get_part\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_get_part &mdash; Returns a handle on a given section in a mimemessage\n\n \n \n  Description\n  \n   resource mailparse_msg_get_part\n    ( resource $mimemail\n   , string $mimesection\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n    \n\n     mimesection\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-get-structure.php","title":"mailparse_msg_get_structure","description":"\n \n  mailparse_msg_get_structure\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_get_structure &mdash; Returns an array of mime section names in the supplied message\n\n \n \n  Description\n  \n   array mailparse_msg_get_structure\n    ( resource $mimemail\n   )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-parse-file.php","title":"mailparse_msg_parse_file","description":"\n \n  mailparse_msg_parse_file\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_parse_file &mdash; Parses a file\n\n \n \n  Description\n  \n   resource mailparse_msg_parse_file\n    ( string $filename\n   )\n\n  \n   Parses a file.\n   This is the optimal way of parsing a mail file that you have on disk.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file holding the message.\n       The file is opened and streamed through the parser.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a MIME resource representing the structure, or\n   FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   \n    mailparse_msg_free() - Frees a MIME resource\n    mailparse_msg_create() - Create a mime mail resource\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-msg-parse.php","title":"mailparse_msg_parse","description":"\n \n  mailparse_msg_parse\n  (PECL mailparse &gt;= 0.9.0)mailparse_msg_parse &mdash; Incrementally parse data into buffer\n\n \n \n  Description\n  \n   bool mailparse_msg_parse\n    ( resource $mimemail\n   , string $data\n   )\n\n  \n   Incrementally parse data into the supplied mime mail resource.\n  \n  \n   This function allow you to stream portions of a file at a time, rather\n   than read and parse the whole thing.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     mimemail\n     \n\n      \n       A valid MIME resource.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-stream-encode.php","title":"mailparse_stream_encode","description":"\n \n  mailparse_stream_encode\n  (PECL mailparse &gt;= 0.9.0)mailparse_stream_encode &mdash; \n   Streams data from source file pointer, apply encoding and write to destfp \n  \n\n \n \n  Description\n  \n   bool mailparse_stream_encode\n    ( resource $sourcefp\n   , resource $destfp\n   , string $encoding      \n   )\n\n  \n   Streams data from the source file pointer, apply \n   encoding and write to the destination file pointer. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sourcefp\n     \n\n      \n       A valid file handle. The file is streamed through the parser.\n      \n     \n\n    \n\n    \n\n     destfp\n     \n\n      \n       The destination file handle in which the encoded data will be written.\n      \n     \n\n    \n\n    \n\n     encoding\n     \n\n      \n       One of the character encodings supported by the\n       mbstring module.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mailparse_stream_encode() example\n    \n\n&lt;?php\/\/&nbsp;email.eml&nbsp;contents:&nbsp;hello,&nbsp;this&nbsp;is&nbsp;some&nbsp;text=hello.$fp&nbsp;=&nbsp;fopen('email.eml',&nbsp;'r');$dest&nbsp;=&nbsp;tmpfile();mailparse_stream_encode($fp,&nbsp;$dest,&nbsp;\"quoted-printable\");rewind($dest);\/\/&nbsp;Display&nbsp;new&nbsp;file&nbsp;contentsfpassthru($dest);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nhello, this is some text=3Dhello.\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-rfc822-parse-addresses.php","title":"mailparse_rfc822_parse_addresses","description":"\n \n  mailparse_rfc822_parse_addresses\n  (PECL mailparse &gt;= 0.9.0)mailparse_rfc822_parse_addresses &mdash; Parse RFC 822 compliant addresses\n\n \n \n  Description\n  \n   array mailparse_rfc822_parse_addresses\n    ( string $addresses\n   )\n\n  \n   Parses a &raquo;&nbsp;RFC 822 compliant recipient\n   list, such as that found in the To: header.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     addresses\n     \n\n      \n       A string containing addresses, like in:\n       Wez Furlong &lt;wez@example.com&gt;, doe@example.com\n      \n      Note: \n       \n        This string must not include the header name.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of associative arrays with the following keys for each\n   recipient:\n   \n    \n     \n      \n       display\n       \n        The recipient name, for display purpose. If this part is not set for a\n        recipient, this key will hold the same value as \n        address.\n       \n      \n\n      \n       address\n       The email address\n      \n\n      \n       is_group\n       TRUE if the recipient is a newsgroup, FALSE otherwise.\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mailparse_rfc822_parse_addresses() example\n    \n\n&lt;?php$to&nbsp;=&nbsp;'Wez&nbsp;Furlong&nbsp;&lt;wez@example.com&gt;,&nbsp;doe@example.com';var_dump(mailparse_rfc822_parse_addresses($to));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) {\n  [0]=&gt;\n  array(3) {\n    [&quot;display&quot;]=&gt;\n    string(11) &quot;Wez Furlong&quot;\n    [&quot;address&quot;]=&gt;\n    string(15) &quot;wez@example.com&quot;\n    [&quot;is_group&quot;]=&gt;\n    bool(false)\n  }\n  [1]=&gt;\n  array(3) {\n    [&quot;display&quot;]=&gt;\n    string(15) &quot;doe@example.com&quot;\n    [&quot;address&quot;]=&gt;\n    string(15) &quot;doe@example.com&quot;\n    [&quot;is_group&quot;]=&gt;\n    bool(false)\n  }\n}\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mailparse-uudecode-all.php","title":"mailparse_uudecode_all","description":"\n \n  mailparse_uudecode_all\n  (PECL mailparse &gt;= 0.9.0)mailparse_uudecode_all &mdash; \n   Scans the data from fp and extract each embedded uuencoded file\n  \n\n \n \n  Description\n  \n   array mailparse_uudecode_all\n    ( resource $fp\n   )\n\n  \n   Scans the data from the given file pointer and extract each embedded\n   uuencoded file into a temporary file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fp\n     \n\n      \n       A valid file pointer.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of associative arrays listing filename information.\n   \n    \n     \n      \n       filename\n       Path to the temporary file name created\n      \n\n      \n       origfilename\n       The original filename, for uuencoded parts only\n      \n\n     \n    \n   \n\n   The first filename entry is the message body. The next entries are the\n   decoded uuencoded files.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mailparse_uudecode_all() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;&lt;&lt;&lt;EODTo:&nbsp;fred@example.comhello,&nbsp;this&nbsp;is&nbsp;some&nbsp;text&nbsp;hello.blah&nbsp;blah&nbsp;blah.begin&nbsp;644&nbsp;test.txt\/=&amp;AI&lt;R!I&lt;R!A('1E&lt;W0*`endEOD;$fp&nbsp;=&nbsp;tmpfile();fwrite($fp,&nbsp;$text);$data&nbsp;=&nbsp;mailparse_uudecode_all($fp);echo&nbsp;\"BODY\\n\";readfile($data[0][\"filename\"]);echo&nbsp;\"UUE&nbsp;({$data[1]['origfilename']})\\n\";readfile($data[1][\"filename\"]);\/\/&nbsp;Clean&nbsp;upunlink($data[0][\"filename\"]);unlink($data[1][\"filename\"]);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nBODY\nTo: fred@example.com\n\nhello, this is some text hello.\nblah blah blah.\n\nUUE (test.txt)\nthis is a test\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.memcache-debug.php","title":"memcache_debug","description":"\n \n  memcache_debug\n  (PECL memcache &gt;= 0.2.0)memcache_debug &mdash; Turn debug output on\/off\n\n \n\n \n  Description\n  \n   bool memcache_debug\n    ( bool $on_off\n   )\n\n\n  \n   memcache_debug() turns on debug output if parameter\n   on_off is equal to TRUE and turns off if it&#039;s\n   FALSE.\n   Note: \n    \n     memcache_debug() is accessible only if PHP was built\n     with --enable-debug option and always returns TRUE in this case.\n     Otherwise, this function has no effect and always returns FALSE.\n    \n   \n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     on_off\n     \n\n      \n       Turns debug output on if equals to TRUE.\n       Turns debug output off if equals to FALSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if PHP was built with --enable-debug option, otherwise\n   returns FALSE.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ezmlm-hash.php","title":"ezmlm_hash","description":"\n \n  ezmlm_hash\n  (PHP 4 &gt;= 4.0.2, PHP 5)ezmlm_hash &mdash; Calculate the hash value needed by EZMLM\n\n \n\n \n  Description\n  \n   int ezmlm_hash\n    ( string $addr\n   )\n\n  \n   ezmlm_hash() calculates the hash value needed\n   when keeping EZMLM mailing lists in a MySQL database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     addr\n     \n\n      \n       The email address that&#039;s being hashed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The hash value of addr.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Calculating the hash and subscribing a user\n    \n\n&lt;?php$user&nbsp;=&nbsp;\"joecool@example.com\";$hash&nbsp;=&nbsp;ezmlm_hash($user);$query&nbsp;=&nbsp;sprintf(\"INSERT&nbsp;INTO&nbsp;sample&nbsp;VALUES&nbsp;(%s,&nbsp;'%s')\",&nbsp;$hash,&nbsp;$user);$db-&gt;query($query);&nbsp;\/\/&nbsp;using&nbsp;PHPLIB&nbsp;db&nbsp;interface?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.acosh.php","title":"acosh","description":"\n \n  acosh\n  (PHP 4 &gt;= 4.1.0, PHP 5)acosh &mdash; Inverse hyperbolic cosine\n\n \n \n  Description\n   \n    float acosh\n     ( float $arg\n    )\n\n  \n   Returns the inverse hyperbolic cosine of\n   arg, i.e. the value whose\n   hyperbolic cosine is arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The value to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The inverse hyperbolic cosine of arg\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on all platforms\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    cosh() - Hyperbolic cosine\n    acos() - Arc cosine\n    asinh() - Inverse hyperbolic sine\n    atanh() - Inverse hyperbolic tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.acos.php","title":"acos","description":"\n \n  acos\n  (PHP 4, PHP 5)acos &mdash; Arc cosine\n\n \n \n  Description\n   \n    float acos\n     ( float $arg\n    )\n\n  \n   Returns the arc cosine of arg in radians.\n   acos() is the complementary function of\n   cos(), which means that\n   a==cos(acos(a)) for every value of a that is within\n   acos()&#039; range.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The arc cosine of arg in radians.\n  \n \n\n \n  See Also\n  \n   \n    cos() - Cosine\n    acosh() - Inverse hyperbolic cosine\n    asin() - Arc sine\n    atan() - Arc tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.abs.php","title":"abs","description":"\n \n  abs\n  (PHP 4, PHP 5)abs &mdash; Absolute value\n\n \n \n  Description\n   \n    number abs\n     ( mixed $number\n    )\n\n  \n   Returns the absolute value of number. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       The numeric value to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The absolute value of number. If the\n   argument number is\n   of type float, the return type is also float,\n   otherwise it is integer (as float usually has a\n   bigger value range than integer).\n  \n \n\n \n  Examples\n  \n   \n    Example #1 abs() example\n    \n\n&lt;?php$abs&nbsp;=&nbsp;abs(-4.2);&nbsp;\/\/&nbsp;$abs&nbsp;=&nbsp;4.2;&nbsp;(double\/float)$abs2&nbsp;=&nbsp;abs(5);&nbsp;&nbsp;&nbsp;\/\/&nbsp;$abs2&nbsp;=&nbsp;5;&nbsp;(integer)$abs3&nbsp;=&nbsp;abs(-5);&nbsp;&nbsp;\/\/&nbsp;$abs3&nbsp;=&nbsp;5;&nbsp;(integer)?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gmp_abs() - Absolute value\n    gmp_sign() - Sign of number\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asin.php","title":"asin","description":"\n \n  asin\n  (PHP 4, PHP 5)asin &mdash; Arc sine\n\n \n \n  Description\n   \n    float asin\n     ( float $arg\n    )\n\n  \n   Returns the arc sine of arg in radians.\n   asin() is the complementary function of\n   sin(), which means that\n   a==sin(asin(a)) for every value of a that is within\n   asin()&#039;s range.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The arc sine of arg in radians\n  \n \n\n \n  See Also\n  \n   \n    sin() - Sine\n    asinh() - Inverse hyperbolic sine\n    acos() - Arc cosine\n    atan() - Arc tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.asinh.php","title":"asinh","description":"\n \n  asinh\n  (PHP 4 &gt;= 4.1.0, PHP 5)asinh &mdash; Inverse hyperbolic sine\n\n \n \n  Description\n   \n    float asinh\n     ( float $arg\n    )\n\n  \n   Returns the inverse hyperbolic sine of\n   arg, i.e. the value whose\n   hyperbolic sine is arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The inverse hyperbolic sine of arg \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on all platforms\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    sinh() - Hyperbolic sine\n    asin() - Arc sine\n    acosh() - Inverse hyperbolic cosine\n    atanh() - Inverse hyperbolic tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atan2.php","title":"atan2","description":"\n \n  atan2\n  (PHP 4, PHP 5)atan2 &mdash; Arc tangent of two variables\n\n \n \n  Description\n   \n    float atan2\n     ( float $y\n    , float $x\n    )\n\n  \n   This function calculates the arc tangent of the two variables\n   x and y.  It is\n   similar to calculating the arc tangent of\n   y \/ x, except that\n   the signs of both arguments are used to determine the quadrant of\n   the result.\n  \n  \n   The function returns the result in radians, which is between -PI\n   and PI (inclusive).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     y\n     \n\n      \n       Dividend parameter\n      \n     \n\n    \n\n    \n\n     x\n     \n\n      \n       Divisor parameter\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The arc tangent of y\/x \n   in radians.\n  \n \n\n \n  See Also\n  \n   \n    atan() - Arc tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atan.php","title":"atan","description":"\n \n  atan\n  (PHP 4, PHP 5)atan &mdash; Arc tangent\n\n \n \n  Description\n   \n    float atan\n     ( float $arg\n    )\n\n  \n   Returns the arc tangent of arg in radians.\n   atan() is the complementary function of\n   tan(), which means that\n   a==tan(atan(a)) for every value of a that is within\n   atan()&#039;s range.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The arc tangent of arg in radians.\n  \n \n\n \n  See Also\n  \n   \n    tan() - Tangent\n    atanh() - Inverse hyperbolic tangent\n    asin() - Arc sine\n    acos() - Arc cosine\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.atanh.php","title":"atanh","description":"\n \n  atanh\n  (PHP 4 &gt;= 4.1.0, PHP 5)atanh &mdash; Inverse hyperbolic tangent\n\n \n \n  Description\n   \n    float atanh\n     ( float $arg\n    )\n\n  \n   Returns the inverse hyperbolic tangent of\n   arg, i.e. the value whose\n   hyperbolic tangent is arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Inverse hyperbolic tangent of arg \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on all platforms\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    tanh() - Hyperbolic tangent\n    atan() - Arc tangent\n    asinh() - Inverse hyperbolic sine\n    acosh() - Inverse hyperbolic cosine\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cos.php","title":"cos","description":"\n \n  cos\n  (PHP 4, PHP 5)cos &mdash; Cosine\n\n \n \n  Description\n   \n    float cos\n     ( float $arg\n    )\n\n  \n   cos() returns the cosine of the arg\n   parameter.  The arg parameter is in radians.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       An angle in radians \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The cosine of arg\n  \n \n\n \n  Examples\n  \n   \n    Example #1 cos() example\n    \n\n&lt;?phpecho&nbsp;cos(M_PI);&nbsp;\/\/&nbsp;-1?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    acos() - Arc cosine\n    sin() - Sine\n    tan() - Tangent\n    deg2rad() - Converts the number in degrees to the radian equivalent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bindec.php","title":"bindec","description":"\n \n  bindec\n  (PHP 4, PHP 5)bindec &mdash; Binary to decimal\n\n \n \n  Description\n   \n    number bindec\n     ( string $binary_string\n    )\n\n  \n   Returns the decimal equivalent of the binary number represented by\n   the binary_string argument.\n  \n  \n   bindec() converts a binary number to an\n   integer or, if needed for size reasons, float.\n  \n  \n   bindec() interprets all\n   binary_string values as unsigned\n   integers. This is because bindec() sees\n   the most significant bit as another order of magnitude\n   rather than as the sign bit.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     binary_string\n     \n\n      \n       The binary string to convert\n      \n     \n\n    \n\n   \n\n  \n  Warning\n   \n    The parameter must be a string.\n    Using other data types will produce unexpected results.\n   \n  \n \n\n \n  Return Values\n  \n   The decimal value of binary_string\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.1.0\n       \n        The function can now convert numbers that are too large to\n        fit into the platforms integer type, larger values\n        are returned as float in that case.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 bindec() example\n    \n\n&lt;?phpecho&nbsp;bindec('110011')&nbsp;.&nbsp;\"\\n\";echo&nbsp;bindec('000110011')&nbsp;.&nbsp;\"\\n\";echo&nbsp;bindec('111');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n51\n51\n7\n\n    \n   \n  \n  \n   \n    Example #2 bindec() interprets input as unsigned integers\n    \n\n&lt;?php\/*&nbsp;*&nbsp;The&nbsp;lesson&nbsp;from&nbsp;this&nbsp;example&nbsp;is&nbsp;in&nbsp;the&nbsp;output&nbsp;*&nbsp;rather&nbsp;than&nbsp;the&nbsp;PHP&nbsp;code&nbsp;itself.&nbsp;*\/$magnitude_lower&nbsp;=&nbsp;pow(2,&nbsp;(PHP_INT_SIZE&nbsp;*&nbsp;8)&nbsp;-&nbsp;2);p($magnitude_lower&nbsp;-&nbsp;1);p($magnitude_lower,&nbsp;'See&nbsp;the&nbsp;rollover?&nbsp;&nbsp;Watch&nbsp;it&nbsp;next&nbsp;time&nbsp;around...');p(PHP_INT_MAX,&nbsp;'PHP_INT_MAX');p(~PHP_INT_MAX,&nbsp;'interpreted&nbsp;to&nbsp;be&nbsp;one&nbsp;more&nbsp;than&nbsp;PHP_INT_MAX');if&nbsp;(PHP_INT_SIZE&nbsp;==&nbsp;4)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$note&nbsp;=&nbsp;'interpreted&nbsp;to&nbsp;be&nbsp;the&nbsp;largest&nbsp;unsigned&nbsp;integer';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$note&nbsp;=&nbsp;'interpreted&nbsp;to&nbsp;be&nbsp;the&nbsp;largest&nbsp;unsigned&nbsp;integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(18446744073709551615)&nbsp;but&nbsp;skewed&nbsp;by&nbsp;float&nbsp;precision';}p(-1,&nbsp;$note);function&nbsp;p($input,&nbsp;$note&nbsp;=&nbsp;'')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$input\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$format&nbsp;=&nbsp;'%0'&nbsp;.&nbsp;(PHP_INT_SIZE&nbsp;*&nbsp;8)&nbsp;.&nbsp;'b';&nbsp;&nbsp;&nbsp;&nbsp;$bin&nbsp;=&nbsp;sprintf($format,&nbsp;$input);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"binary:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bin\\n\";&nbsp;&nbsp;&nbsp;&nbsp;ini_set('precision',&nbsp;20);&nbsp;&nbsp;\/\/&nbsp;For&nbsp;readability&nbsp;on&nbsp;64&nbsp;bit&nbsp;boxes.&nbsp;&nbsp;&nbsp;&nbsp;$dec&nbsp;=&nbsp;bindec($bin);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'bindec():&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;.&nbsp;$dec&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($note)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"NOTE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$note\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    Output of the above example on 32 bit machines:\n    \n\ninput:        1073741823\nbinary:       00111111111111111111111111111111\nbindec():     1073741823\n\ninput:        1073741824\nbinary:       01000000000000000000000000000000\nbindec():     1073741824\nNOTE:         See the rollover?  Watch it next time around...\n\ninput:        2147483647\nbinary:       01111111111111111111111111111111\nbindec():     2147483647\nNOTE:         PHP_INT_MAX\n\ninput:        -2147483648\nbinary:       10000000000000000000000000000000\nbindec():     2147483648\nNOTE:         interpreted to be one more than PHP_INT_MAX\n\ninput:        -1\nbinary:       11111111111111111111111111111111\nbindec():     4294967295\nNOTE:         interpreted to be the largest unsigned integer\n\n    \n    Output of the above example on 64 bit machines:\n    \n\ninput:        4611686018427387903\nbinary:       0011111111111111111111111111111111111111111111111111111111111111\nbindec():     4611686018427387903\n\ninput:        4611686018427387904\nbinary:       0100000000000000000000000000000000000000000000000000000000000000\nbindec():     4611686018427387904\nNOTE:         See the rollover?  Watch it next time around...\n\ninput:        9223372036854775807\nbinary:       0111111111111111111111111111111111111111111111111111111111111111\nbindec():     9223372036854775807\nNOTE:         PHP_INT_MAX\n\ninput:        -9223372036854775808\nbinary:       1000000000000000000000000000000000000000000000000000000000000000\nbindec():     9223372036854775808\nNOTE:         interpreted to be one more than PHP_INT_MAX\n\ninput:        -1\nbinary:       1111111111111111111111111111111111111111111111111111111111111111\nbindec():     18446744073709551616\nNOTE:         interpreted to be the largest unsigned integer\n              (18446744073709551615) but skewed by float precision\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    decbin() - Decimal to binary\n    octdec() - Octal to decimal\n    hexdec() - Hexadecimal to decimal\n    base_convert() - Convert a number between arbitrary bases\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ceil.php","title":"ceil","description":"\n \n  ceil\n  (PHP 4, PHP 5)ceil &mdash; Round fractions up\n\n \n \n  Description\n   \n    float ceil\n     ( float $value\n    )\n\n  \n   Returns the next highest integer value by rounding up \n   value if necessary. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       The value to round\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   value rounded up to the next highest\n   integer.\n   The return value of ceil() is still of type\n   float as the value range of float is \n   usually bigger than that of integer.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 ceil() example\n    \n\n&lt;?phpecho&nbsp;ceil(4.3);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;5echo&nbsp;ceil(9.999);&nbsp;&nbsp;\/\/&nbsp;10echo&nbsp;ceil(-3.14);&nbsp;&nbsp;\/\/&nbsp;-3?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    floor() - Round fractions down\n    round() - Rounds a float\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.cosh.php","title":"cosh","description":"\n \n  cosh\n  (PHP 4 &gt;= 4.1.0, PHP 5)cosh &mdash; Hyperbolic cosine\n\n \n \n  Description\n   \n    float cosh\n     ( float $arg\n    )\n\n  \n   Returns the hyperbolic cosine of arg,\n   defined as (exp(arg) + exp(-arg))\/2.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The hyperbolic cosine of arg\n  \n \n\n \n  See Also\n  \n   \n    cos() - Cosine\n    acosh() - Inverse hyperbolic cosine\n    sinh() - Hyperbolic sine\n    cosh()\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.decoct.php","title":"decoct","description":"\n \n  decoct\n  (PHP 4, PHP 5)decoct &mdash; Decimal to octal\n\n \n \n  Description\n   \n    string decoct\n     ( int $number\n    )\n\n  \n   Returns a string containing an octal representation of the given\n   number argument.  The largest number that can be converted is\n   4294967295 in decimal resulting to &quot;37777777777&quot;. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       Decimal value to convert\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Octal string representation of number\n  \n \n\n \n  Examples\n  \n   \n    Example #1 decoct() example\n    \n\n&lt;?phpecho&nbsp;decoct(15)&nbsp;.&nbsp;\"\\n\";echo&nbsp;decoct(264);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n17\n410\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    octdec() - Octal to decimal\n    decbin() - Decimal to binary\n    dechex() - Decimal to hexadecimal\n    base_convert() - Convert a number between arbitrary bases\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base-convert.php","title":"base_convert","description":"\n \n  base_convert\n  (PHP 4, PHP 5)base_convert &mdash; Convert a number between arbitrary bases\n\n \n \n  Description\n   \n    string base_convert\n     ( string $number\n    , int $frombase\n    , int $tobase\n    )\n\n  \n   Returns a string containing number\n   represented in base tobase.  The base in\n   which number is given is specified in\n   frombase.  Both\n   frombase and tobase\n   have to be between 2 and 36, inclusive.  Digits in numbers with a\n   base higher than 10 will be represented with the letters a-z,\n   with a meaning 10, b meaning 11 and z meaning 35.\n  \n  Warning\n   \n    base_convert() may lose precision on large numbers\n    due to properties related to the internal &quot;double&quot; or &quot;float&quot; type used.\n    Please see the Floating point numbers\n    section in the manual for more specific information and limitations.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       The number to convert\n      \n     \n\n    \n\n    \n\n     frombase\n     \n\n      \n       The base number is in\n      \n     \n\n    \n\n    \n\n     tobase\n     \n\n      \n       The base to convert number to\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   number converted to base tobase\n  \n \n\n \n  Examples\n  \n   \n    Example #1 base_convert() example\n    \n\n&lt;?php$hexadecimal&nbsp;=&nbsp;'A37334';echo&nbsp;base_convert($hexadecimal,&nbsp;16,&nbsp;2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n101000110111001100110100\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    intval() - Get the integer value of a variable\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mail.php","title":"mail","description":"\n \n  mail\n  (PHP 4, PHP 5)mail &mdash; Send mail\n\n \n\n \n  Description\n  \n   bool mail\n    ( string $to\n   , string $subject\n   , string $message\n   [, string $additional_headers\n   [, string $additional_parameters\n  ]] )\n\n  \n   Sends an email.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     to\n     \n\n      \n       Receiver, or receivers of the mail.\n      \n      \n       The formatting of this string must comply with\n       &raquo;&nbsp;RFC 2822. Some examples are:\n       \n        user@example.com\n        user@example.com, anotheruser@example.com\n        User &lt;user@example.com&gt;\n        User &lt;user@example.com&gt;, Another User &lt;anotheruser@example.com&gt;\n       \n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       Subject of the email to be sent.\n      \n      Caution\n       \n        Subject must satisfy &raquo;&nbsp;RFC 2047.\n       \n      \n     \n\n    \n\n    \n\n     message\n     \n\n      \n       Message to be sent.\n      \n      \n       Each line should be separated with a LF (\\n). Lines should not be larger\n       than 70 characters.\n      \n      Caution\n       \n        (Windows only) When PHP is talking to a SMTP server directly, if a full\n        stop is found on the start of a line, it is removed. To counter-act this,\n        replace these occurrences with a double dot.\n        \n\n&lt;?php$text&nbsp;=&nbsp;str_replace(\"\\n.\",&nbsp;\"\\n..\",&nbsp;$text);?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     additional_headers (optional)\n     \n\n      \n       String to be inserted at the end of the email header.\n      \n      \n       This is typically used to add extra headers (From, Cc, and Bcc).\n       Multiple extra headers should be separated with a CRLF (\\r\\n).\n      \n      Note: \n       \n        When sending mail, the mail must contain\n        a From header. This can be set with the \n        additional_headers parameter, or a default\n        can be set in php.ini.\n       \n       \n        Failing to do this will result in an error\n        message similar to Warning: mail(): &quot;sendmail_from&quot; not\n        set in php.ini or custom &quot;From:&quot; header missing.\n        The From header sets also\n        Return-Path under Windows.\n       \n      \n      Note: \n       \n        If messages are not received, try using a LF (\\n) only.\n        Some poor quality Unix mail transfer agents replace LF by CRLF\n        automatically (which leads to doubling CR if CRLF is used).\n        This should be a last resort, as it does not comply with\n        &raquo;&nbsp;RFC 2822.\n       \n      \n     \n\n    \n\n    \n\n     additional_parameters (optional)\n     \n\n      \n       The additional_parameters parameter\n       can be used to pass additional flags as command line options to the\n       program configured to be used when sending mail, as defined by the\n       sendmail_path configuration setting. For example,\n       this can be used to set the envelope sender address when using\n       sendmail with the -f sendmail option.\n      \n      \n       The user that the webserver runs as should be added as a trusted user to the\n       sendmail configuration to prevent a &#039;X-Warning&#039; header from being added\n       to the message when the envelope sender (-f) is set using this method.\n       For sendmail users, this file is \/etc\/mail\/trusted-users.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.\n  \n  \n   It is important to note that just because the mail was accepted for delivery,\n   it does NOT mean the mail will actually reach the intended destination.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0 (Windows only)\n       \n        All custom headers (like From, Cc, Bcc and Date) are supported, and are\n        not case-sensitive.\n        (As custom headers are not interpreted by the MTA in the first place,\n        but are parsed by PHP, PHP &lt; 4.3 only supported the Cc header element\n        and was case-sensitive).\n       \n      \n\n      \n       4.2.3\n       \n        The additional_parameters parameter is disabled in\n        safe_mode and the\n        mail() function will expose a warning message\n        and return FALSE when used.\n       \n      \n\n      \n       4.0.5\n       \n        The additional_parameters parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Sending mail.\n    \n     Using mail() to send a simple email:\n    \n    \n\n&lt;?php\/\/&nbsp;The&nbsp;message$message&nbsp;=&nbsp;\"Line&nbsp;1\\nLine&nbsp;2\\nLine&nbsp;3\";\/\/&nbsp;In&nbsp;case&nbsp;any&nbsp;of&nbsp;our&nbsp;lines&nbsp;are&nbsp;larger&nbsp;than&nbsp;70&nbsp;characters,&nbsp;we&nbsp;should&nbsp;use&nbsp;wordwrap()$message&nbsp;=&nbsp;wordwrap($message,&nbsp;70);\/\/&nbsp;Sendmail('caffeinated@example.com',&nbsp;'My&nbsp;Subject',&nbsp;$message);?&gt;\n\n\n    \n\n   \n   \n    Example #2 Sending mail with extra headers.\n    \n     The addition of basic headers, telling the MUA\n     the From and Reply-To addresses:\n    \n    \n\n&lt;?php$to&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'nobody@example.com';$subject&nbsp;=&nbsp;'the&nbsp;subject';$message&nbsp;=&nbsp;'hello';$headers&nbsp;=&nbsp;'From:&nbsp;webmaster@example.com'&nbsp;.&nbsp;\"\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;'Reply-To:&nbsp;webmaster@example.com'&nbsp;.&nbsp;\"\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;'X-Mailer:&nbsp;PHP\/'&nbsp;.&nbsp;phpversion();mail($to,&nbsp;$subject,&nbsp;$message,&nbsp;$headers);?&gt;\n\n\n    \n\n   \n   \n    Example #3 Sending mail with an additional command line parameter.\n    \n     The additional_parameters parameter\n     can be used to pass an additional parameter to the program configured\n     to use when sending mail using the sendmail_path.\n    \n    \n\n&lt;?phpmail('nobody@example.com',&nbsp;'the&nbsp;subject',&nbsp;'the&nbsp;message',&nbsp;null,&nbsp;&nbsp;&nbsp;'-fwebmaster@example.com');?&gt;\n\n\n    \n\n   \n   \n    Example #4 Sending HTML email\n    \n     It is also possible to send HTML email with mail().\n    \n    \n\n&lt;?php\/\/&nbsp;multiple&nbsp;recipients$to&nbsp;&nbsp;=&nbsp;'aidan@example.com'&nbsp;.&nbsp;',&nbsp;';&nbsp;\/\/&nbsp;note&nbsp;the&nbsp;comma$to&nbsp;.=&nbsp;'wez@example.com';\/\/&nbsp;subject$subject&nbsp;=&nbsp;'Birthday&nbsp;Reminders&nbsp;for&nbsp;August';\/\/&nbsp;message$message&nbsp;=&nbsp;'&lt;html&gt;&lt;head&gt;&nbsp;&nbsp;&lt;title&gt;Birthday&nbsp;Reminders&nbsp;for&nbsp;August&lt;\/title&gt;&lt;\/head&gt;&lt;body&gt;&nbsp;&nbsp;&lt;p&gt;Here&nbsp;are&nbsp;the&nbsp;birthdays&nbsp;upcoming&nbsp;in&nbsp;August!&lt;\/p&gt;&nbsp;&nbsp;&lt;table&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Person&lt;\/th&gt;&lt;th&gt;Day&lt;\/th&gt;&lt;th&gt;Month&lt;\/th&gt;&lt;th&gt;Year&lt;\/th&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Joe&lt;\/td&gt;&lt;td&gt;3rd&lt;\/td&gt;&lt;td&gt;August&lt;\/td&gt;&lt;td&gt;1970&lt;\/td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Sally&lt;\/td&gt;&lt;td&gt;17th&lt;\/td&gt;&lt;td&gt;August&lt;\/td&gt;&lt;td&gt;1973&lt;\/td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;&nbsp;&nbsp;&lt;\/table&gt;&lt;\/body&gt;&lt;\/html&gt;';\/\/&nbsp;To&nbsp;send&nbsp;HTML&nbsp;mail,&nbsp;the&nbsp;Content-type&nbsp;header&nbsp;must&nbsp;be&nbsp;set$headers&nbsp;&nbsp;=&nbsp;'MIME-Version:&nbsp;1.0'&nbsp;.&nbsp;\"\\r\\n\";$headers&nbsp;.=&nbsp;'Content-type:&nbsp;text\/html;&nbsp;charset=iso-8859-1'&nbsp;.&nbsp;\"\\r\\n\";\/\/&nbsp;Additional&nbsp;headers$headers&nbsp;.=&nbsp;'To:&nbsp;Mary&nbsp;&lt;mary@example.com&gt;,&nbsp;Kelly&nbsp;&lt;kelly@example.com&gt;'&nbsp;.&nbsp;\"\\r\\n\";$headers&nbsp;.=&nbsp;'From:&nbsp;Birthday&nbsp;Reminder&nbsp;&lt;birthday@example.com&gt;'&nbsp;.&nbsp;\"\\r\\n\";$headers&nbsp;.=&nbsp;'Cc:&nbsp;birthdayarchive@example.com'&nbsp;.&nbsp;\"\\r\\n\";$headers&nbsp;.=&nbsp;'Bcc:&nbsp;birthdaycheck@example.com'&nbsp;.&nbsp;\"\\r\\n\";\/\/&nbsp;Mail&nbsp;itmail($to,&nbsp;$subject,&nbsp;$message,&nbsp;$headers);?&gt;\n\n\n    \n\n   \n  \n  \n   Note: \n    \n     If intending to send HTML or otherwise Complex mails, it is recommended\n     to use the PEAR package &raquo;&nbsp;PEAR::Mail_Mime.\n    \n   \n  \n \n\n\n     \n  Notes\n  Note: \n   \n    The Windows implementation of mail() differs in many\n    ways from the Unix implementation. First, it doesn&#039;t use a local binary\n    for composing messages but only operates on direct sockets which means a\n    MTA is needed listening on a network socket (which\n    can either on the localhost or a remote machine).\n   \n   \n    Second, the custom headers like\n    From:,\n    Cc:,\n    Bcc: and\n    Date: are\n    not interpreted by the\n    MTA in the first place, but are parsed by PHP.\n   \n   \n    As such, the to parameter should not be an address\n    in the form of &quot;Something &lt;someone@example.com&gt;&quot;. The\n    mail command may not parse this properly while talking with \n    the MTA.\n   \n  \n  \n  Note: \n   \n    It is worth noting that the mail() function is not\n    suitable for larger volumes of email in a loop. This function opens\n    and closes an SMTP socket for each email, which is not very efficient.\n   \n   \n    For the sending of large amounts of email, see the\n    &raquo;&nbsp;PEAR::Mail, and\n    &raquo;&nbsp;PEAR::Mail_Queue packages.\n   \n  \n\n  Note: \n   \n    The following RFCs may be useful:\n    &raquo;&nbsp;RFC 1896,\n    &raquo;&nbsp;RFC 2045,\n    &raquo;&nbsp;RFC 2046,\n    &raquo;&nbsp;RFC 2047,\n    &raquo;&nbsp;RFC 2048,\n    &raquo;&nbsp;RFC 2049, and\n    &raquo;&nbsp;RFC 2822.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    imap_mail() - Send an email message\n    &raquo;&nbsp;PEAR::Mail\n    &raquo;&nbsp;PEAR::Mail_Mime\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.decbin.php","title":"decbin","description":"\n \n  decbin\n  (PHP 4, PHP 5)decbin &mdash; Decimal to binary\n\n \n \n  Description\n  \n   string decbin\n    ( int $number\n   )\n\n  \n   Returns a string containing a binary representation of the given\n   number argument.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       Decimal value to convert\n      \n\n      \n       Range of inputs on 32-bit machines\n       \n        \n        \n        \n        \n         \n          positive number\n          negative number\n          return value\n         \n\n        \n\n        \n         \n          0\n          &nbsp;\n          0\n         \n\n         \n          1\n          &nbsp;\n          1\n         \n\n         \n          2\n          &nbsp;\n          10\n         \n\n         \n          ... normal progression ...\n         \n\n         \n          2147483646\n          &nbsp;\n          1111111111111111111111111111110\n         \n\n         \n          2147483647 (largest signed integer)\n          &nbsp;\n          1111111111111111111111111111111 (31 1&#039;s)\n         \n\n         \n          2147483648\n          -2147483648\n          10000000000000000000000000000000\n         \n\n         \n          ... normal progression ...\n         \n\n         \n          4294967294\n          -2\n          11111111111111111111111111111110\n         \n\n         \n          4294967295 (largest unsigned integer)\n          -1\n          11111111111111111111111111111111 (32 1&#039;s)\n         \n\n        \n       \n      \n\n\n      \n       Range of inputs on 64-bit machines\n       \n        \n        \n        \n        \n         \n          positive number\n          negative number\n          return value\n         \n\n        \n\n        \n         \n          0\n          &nbsp;\n          0\n         \n\n         \n          1\n          &nbsp;\n          1\n         \n\n         \n          2\n          &nbsp;\n          10\n         \n\n         \n          ... normal progression ...\n         \n\n         \n          9223372036854775806\n          &nbsp;\n          111111111111111111111111111111111111111111111111111111111111110\n         \n\n         \n          9223372036854775807 (largest signed integer)\n          &nbsp;\n          111111111111111111111111111111111111111111111111111111111111111 (63 1&#039;s)\n         \n\n         \n          &nbsp;\n          -9223372036854775808\n          1000000000000000000000000000000000000000000000000000000000000000\n         \n\n         \n          ... normal progression ...\n         \n\n         \n          &nbsp;\n          -2\n          1111111111111111111111111111111111111111111111111111111111111110\n         \n\n         \n          &nbsp;\n          -1\n          1111111111111111111111111111111111111111111111111111111111111111 (64 1&#039;s)\n         \n\n        \n       \n      \n\n\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Binary string representation of number\n  \n \n\n \n  Examples\n  \n   \n    Example #1 decbin() example\n    \n\n&lt;?phpecho&nbsp;decbin(12)&nbsp;.&nbsp;\"\\n\";echo&nbsp;decbin(26);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1100\n11010\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    bindec() - Binary to decimal\n    decoct() - Decimal to octal\n    dechex() - Decimal to hexadecimal\n    base_convert() - Convert a number between arbitrary bases\n    \n     printf() - Output a formatted string, using %b,\n     %032b or %064b as the format\n    \n    \n     sprintf(), using %b,\n     %032b or %064b as the format\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.deg2rad.php","title":"deg2rad","description":"\n \n  deg2rad\n  (PHP 4, PHP 5)deg2rad &mdash; \n   Converts the number in degrees to the radian equivalent\n  \n\n \n \n  Description\n   \n    float deg2rad\n     ( float $number\n    )\n\n  \n   This function converts number from degrees\n   to the radian equivalent.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       Angular value in degrees \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The radian equivalent of number\n  \n \n\n \n  Examples\n  \n   \n    Example #1 deg2rad() example\n    \n\n&lt;?phpecho&nbsp;deg2rad(45);&nbsp;\/\/&nbsp;0.785398163397var_dump(deg2rad(45)&nbsp;===&nbsp;M_PI_4);&nbsp;\/\/&nbsp;bool(true)?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    rad2deg() - Converts the radian number to the equivalent number in degrees\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.expm1.php","title":"expm1","description":"\n \n  expm1\n  (PHP 4 &gt;= 4.1.0, PHP 5)expm1 &mdash; \n   Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero\n  \n\n \n \n  Description\n  \n   float expm1\n    ( float $arg\n   )\n\n  \n   expm1() returns the equivalent to\n   &#039;exp(arg) -  1&#039; computed in a way that is\n   accurate even if the value of arg is near zero,\n   a case where &#039;exp (arg) - 1&#039; would be\n   inaccurate due to subtraction of two numbers that are nearly equal.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   &#039;e&#039; to the power of arg minus one\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on all platforms\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    log1p() - Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero\n    exp() - Calculates the exponent of e\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dechex.php","title":"dechex","description":"\n \n  dechex\n  (PHP 4, PHP 5)dechex &mdash; Decimal to hexadecimal\n\n \n \n  Description\n   \n    string dechex\n     ( int $number\n    )\n\n  \n   Returns a string containing a hexadecimal representation of the\n   given number argument. The largest number that can\n   be converted is 4294967295 in decimal resulting to &quot;ffffffff&quot;.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       Decimal value to convert\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Hexadecimal string representation of number\n  \n \n\n \n  Examples\n  \n   \n    Example #1 dechex() example\n    \n\n&lt;?phpecho&nbsp;dechex(10)&nbsp;.&nbsp;\"\\n\";echo&nbsp;dechex(47);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\na\n2f\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    hexdec() - Hexadecimal to decimal\n    decbin() - Decimal to binary\n    decoct() - Decimal to octal\n    base_convert() - Convert a number between arbitrary bases\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.exp.php","title":"exp","description":"\n \n  exp\n  (PHP 4, PHP 5)exp &mdash; Calculates the exponent of e\n\n \n \n  Description\n   \n    float exp\n     ( float $arg\n    )\n\n  \n   Returns e raised to the power of arg.\n  \n  Note: \n   \n    &#039;e&#039; is the base of the natural system of logarithms, or approximately\n    2.718282.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   &#039;e&#039; raised to the power of arg\n  \n \n\n \n  Examples\n  \n   \n    Example #1 exp() example\n    \n\n&lt;?phpecho&nbsp;exp(12)&nbsp;.&nbsp;\"\\n\";echo&nbsp;exp(5.7);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1.6275E+005\n298.87\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    log() - Natural logarithm\n    pow() - Exponential expression\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getrandmax.php","title":"getrandmax","description":"\n \n  getrandmax\n  (PHP 4, PHP 5)getrandmax &mdash; Show largest possible random value\n\n \n \n  Description\n   \n    int getrandmax\n     ( void\n    )\n\n  \n   Returns the maximum value that can be returned by a call to\n   rand().\n  \n \n\n \n  Return Values\n  \n   The largest possible random value returned by rand()\n  \n \n\n \n  See Also\n  \n   \n    rand() - Generate a random integer\n    srand() - Seed the random number generator\n    mt_getrandmax() - Show largest possible random value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hypot.php","title":"hypot","description":"\n \n  hypot\n  (PHP 4 &gt;= 4.1.0, PHP 5)hypot &mdash; \n   Calculate the length of the hypotenuse of a right-angle triangle\n  \n\n \n \n  Description\n  \n   float hypot\n    ( float $x\n   , float $y\n   )\n\n  \n   hypot() returns the length of the hypotenuse of a\n   right-angle triangle with sides of length x and\n   y, or the distance of the point\n   (x, y) from the origin.\n   This is equivalent to sqrt(x*x + y*y).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       Length of first side\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       Length of second side\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Calculated length of the hypotenuse\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.floor.php","title":"floor","description":"\n \n  floor\n  (PHP 4, PHP 5)floor &mdash; Round fractions down\n\n \n \n  Description\n   \n    float floor\n     ( float $value\n    )\n\n  \n   Returns the next lowest integer value by rounding down\n   value if necessary. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       The numeric value to round\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   value rounded to the next lowest integer.\n   The return value of floor() is still of type\n   float because the value range of float is \n   usually bigger than that of integer.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 floor() example\n    \n\n&lt;?phpecho&nbsp;floor(4.3);&nbsp;&nbsp;&nbsp;\/\/&nbsp;4echo&nbsp;floor(9.999);&nbsp;\/\/&nbsp;9echo&nbsp;floor(-3.14);&nbsp;\/\/&nbsp;-4?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    ceil() - Round fractions up\n    round() - Rounds a float\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fmod.php","title":"fmod","description":"\n \n  fmod\n  (PHP 4 &gt;= 4.2.0, PHP 5)fmod &mdash; Returns the floating point remainder (modulo) of the division\n  of the arguments\n\n \n \n  Description\n   \n    float fmod\n     ( float $x\n    , float $y\n    )\n\n  \n   Returns the floating point remainder of dividing the dividend\n   (x) by the divisor (y).\n   The reminder (r) is defined as: x = i * y + r, for \n   some integer i. If y is\n   non-zero, r has the same sign as\n   x and a magnitude less than the magnitude of\n   y.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       The dividend\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       The divisor\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The floating point remainder of \n   x\/y\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using fmod()\n    \n\n&lt;?php$x&nbsp;=&nbsp;5.7;$y&nbsp;=&nbsp;1.3;$r&nbsp;=&nbsp;fmod($x,&nbsp;$y);\/\/&nbsp;$r&nbsp;equals&nbsp;0.5,&nbsp;because&nbsp;4&nbsp;*&nbsp;1.3&nbsp;+&nbsp;0.5&nbsp;=&nbsp;5.7?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-finite.php","title":"is_finite","description":"\n \n  is_finite\n  (PHP 4 &gt;= 4.2.0, PHP 5)is_finite &mdash; Finds whether a value is a legal finite number\n\n \n \n  Description\n   \n    bool is_finite\n     ( float $val\n    )\n\n  \n   Checks whether val is a legal finite\n   on this platform.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     val\n     \n\n      \n       The value to check\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   TRUE if val is a legal finite\n   number within the allowed range for a PHP float on this platform,\n   else FALSE.\n  \n \n\n \n  See Also\n  \n   \n    is_infinite() - Finds whether a value is infinite\n    is_nan() - Finds whether a value is not a number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log10.php","title":"log10","description":"\n \n  log10\n  (PHP 4, PHP 5)log10 &mdash; Base-10 logarithm\n\n \n \n  Description\n   \n    float log10\n     ( float $arg\n    )\n\n  \n   Returns the base-10 logarithm of arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The base-10 logarithm of arg\n  \n \n\n \n  See Also\n  \n   \n    log() - Natural logarithm\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lcg-value.php","title":"lcg_value","description":"\n \n  lcg_value\n  (PHP 4, PHP 5)lcg_value &mdash; Combined linear congruential generator\n\n \n \n  Description\n   \n    float lcg_value\n     ( void\n    )\n\n  \n   lcg_value() returns a pseudo random number in\n   the range of (0, 1).  The function combines two CGs with periods\n   of 2^31 - 85 and 2^31 - 249. The period of this function is equal\n   to the product of both primes.\n  \n \n\n \n  Return Values\n  \n   A pseudo random float value in the range of (0, 1)\n  \n \n\n \n  See Also\n  \n   \n    rand() - Generate a random integer\n    mt_rand() - Generate a better random value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-infinite.php","title":"is_infinite","description":"\n \n  is_infinite\n  (PHP 4 &gt;= 4.2.0, PHP 5)is_infinite &mdash; Finds whether a value is infinite\n\n \n \n  Description\n   \n    bool is_infinite\n     ( float $val\n    )\n\n  \n   Returns TRUE if val is infinite (positive or \n   negative), like the result of log(0) or any value too \n   big to fit into a float on this platform.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     val\n     \n\n      \n       The value to check\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   TRUE if val is infinite, else FALSE.\n  \n \n\n \n  See Also\n  \n   \n    is_finite() - Finds whether a value is a legal finite number\n    is_nan() - Finds whether a value is not a number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-nan.php","title":"is_nan","description":"\n \n  is_nan\n  (PHP 4 &gt;= 4.2.0, PHP 5)is_nan &mdash; Finds whether a value is not a number\n\n \n\n \n  Description\n  \n   bool is_nan\n    ( float $val\n   )\n\n  \n   Checks whether val is &#039;not a number&#039;, \n   like the result of acos(1.01).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     val\n     \n\n      \n       The value to check\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if val is &#039;not a number&#039;,\n   else FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_nan() example\n    \n\n&lt;?php\/\/&nbsp;Invalid&nbsp;calculation,&nbsp;will&nbsp;return&nbsp;a&nbsp;\/\/&nbsp;NaN&nbsp;value$nan&nbsp;=&nbsp;acos(8);var_dump($nan,&nbsp;is_nan($nan));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfloat(NAN)\nbool(true)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_finite() - Finds whether a value is a legal finite number\n    is_infinite() - Finds whether a value is infinite\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log1p.php","title":"log1p","description":"\n \n  log1p\n  (PHP 4 &gt;= 4.1.0, PHP 5)log1p &mdash; \n   Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero\n  \n\n \n \n  Description\n  \n   float log1p\n    ( float $number\n   )\n\n  \n   log1p() returns log(1 +\n   number) computed in a way that is accurate even\n   when the value of number is close to zero.\n   log() might only return log(1) in this case\n   due to lack of precision.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   log(1 + number)\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on all platforms\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    expm1() - Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero\n    log() - Natural logarithm\n    log10() - Base-10 logarithm\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hexdec.php","title":"hexdec","description":"\n \n  hexdec\n  (PHP 4, PHP 5)hexdec &mdash; Hexadecimal to decimal\n\n \n \n  Description\n   \n    number hexdec\n     ( string $hex_string\n    )\n\n  \n   Returns the decimal equivalent of the hexadecimal number\n   represented by the hex_string argument.\n   hexdec() converts a hexadecimal string to a\n   decimal number. \n  \n  \n   hexdec() will ignore any non-hexadecimal \n   characters it encounters.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hex_string\n     \n\n      \n       The hexadecimal string to convert\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The decimal representation of hex_string\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.1.0\n       \n        The function can now convert values that are too big for\n        the platforms integer type, it will return\n        the value as float instead in that case.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 hexdec() example\n    \n\n&lt;?phpvar_dump(hexdec(\"See\"));var_dump(hexdec(\"ee\"));\/\/&nbsp;both&nbsp;print&nbsp;\"int(238)\"var_dump(hexdec(\"that\"));&nbsp;\/\/&nbsp;print&nbsp;\"int(10)\"var_dump(hexdec(\"a0\"));&nbsp;\/\/&nbsp;print&nbsp;\"int(160)\"?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    dechex() - Decimal to hexadecimal\n    bindec() - Binary to decimal\n    octdec() - Octal to decimal\n    base_convert() - Convert a number between arbitrary bases\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.log.php","title":"log","description":"\n \n  log\n  (PHP 4, PHP 5)log &mdash; Natural logarithm\n\n \n \n  Description\n   \n    float log\n     ( float $arg\n    [, float $base = M_E\n   ] )\n\n  \n   If the optional base parameter is specified, \n   log() returns logbase\n   arg, otherwise log() \n   returns the natural logarithm of arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The value to calculate the logarithm for\n      \n     \n\n    \n\n    \n\n     base\n     \n\n      \n       The optional logarithmic base to use \n       (defaults to &#039;e&#039; and so to the natural logarithm).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The logarithm of arg to \n   base, if given, or the\n   natural logarithm.  \n  \n \n\n\n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.3.0\n       \n        The optional parameter base became available.\n        For older versions you can calculate the logarithm in base b\n        of a number n, but using the mathematical identity:\n        logb(n) = log(n)\/log(b), where log is the\n        neperian (or natural) logarithm.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    log10() - Base-10 logarithm\n    exp() - Calculates the exponent of e\n    pow() - Exponential expression\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.min.php","title":"min","description":"\n \n  min\n  (PHP 4, PHP 5)min &mdash; Find lowest value\n\n \n \n  Description\n   \n    mixed min\n     ( array $values\n    )\n\n   \n    mixed min\n     ( mixed $value1\n    , mixed $value2\n    [, mixed $value3...\n   ] )\n\n  \n   If the first and only parameter is an array, min()\n   returns the lowest value in that array. If at least two parameters are \n   provided, min() returns the smallest of these values.\n  \n  Note: \n   \n    PHP will evaluate a non-numeric string as \n    0 if compared to integer, but still return the string if it&#039;s seen as the\n    numerically lowest value.  If multiple arguments evaluate to\n    0, min() will return the lowest\n    alphanumerical string value if any strings are given, else a numeric\n    0 is returned.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     values\n     \n\n      \n       An array containing the values.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   min() returns the numerically lowest of the\n   parameter values.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Example uses of min()\n    \n\n&lt;?phpecho&nbsp;min(2,&nbsp;3,&nbsp;1,&nbsp;6,&nbsp;7);&nbsp;&nbsp;\/\/&nbsp;1echo&nbsp;min(array(2,&nbsp;4,&nbsp;5));&nbsp;\/\/&nbsp;2echo&nbsp;min(0,&nbsp;'hello');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;0echo&nbsp;min('hello',&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;helloecho&nbsp;min('hello',&nbsp;-1);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;-1\/\/&nbsp;With&nbsp;multiple&nbsp;arrays,&nbsp;min&nbsp;compares&nbsp;from&nbsp;left&nbsp;to&nbsp;right\/\/&nbsp;so&nbsp;in&nbsp;our&nbsp;example:&nbsp;2&nbsp;==&nbsp;2,&nbsp;but&nbsp;4&nbsp;&lt;&nbsp;5$val&nbsp;=&nbsp;min(array(2,&nbsp;4,&nbsp;8),&nbsp;array(2,&nbsp;5,&nbsp;1));&nbsp;\/\/&nbsp;array(2,&nbsp;4,&nbsp;8)\/\/&nbsp;If&nbsp;both&nbsp;an&nbsp;array&nbsp;and&nbsp;non-array&nbsp;are&nbsp;given,&nbsp;the&nbsp;array\/\/&nbsp;is&nbsp;never&nbsp;returned&nbsp;as&nbsp;it's&nbsp;considered&nbsp;the&nbsp;largest$val&nbsp;=&nbsp;min('string',&nbsp;array(2,&nbsp;5,&nbsp;7),&nbsp;42);&nbsp;&nbsp;&nbsp;\/\/&nbsp;string?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    max() - Find highest value\n    count() - Count all elements in an array, or something in an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.max.php","title":"max","description":"\n \n  max\n  (PHP 4, PHP 5)max &mdash; Find highest value\n\n \n \n  Description\n  \n   mixed max\n    ( array $values\n   )\n\n  \n   mixed max\n    ( mixed $value1\n   , mixed $value2\n   [, mixed $value3...\n  ] )\n\n  \n   If the first and only parameter is an array, max()\n   returns the highest value in that array. If at least two parameters are \n   provided, max() returns the biggest of these values.\n  \n  Note: \n   \n    PHP will evaluate a non-numeric string as \n    0 if compared to integer, but still return the string if it&#039;s seen as the\n    numerically highest value.  If multiple arguments evaluate to\n    0, max() will return a numeric\n    0 if given, else the alphabetical highest string\n    value will be returned.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     values\n     \n\n      \n       An array containing the values.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   max() returns the numerically highest of the\n   parameter values. If multiple values can be considered of the same size,\n   the one that is listed first will be returned.\n  \n  \n   When max() is given multiple arrays, the\n   longest array is returned. If all the arrays have the same length,\n   max() will use lexicographic ordering to find the return\n   value.\n  \n  \n   When given a string it will be cast as an integer\n   when comparing.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Example uses of max()\n    \n\n&lt;?phpecho&nbsp;max(1,&nbsp;3,&nbsp;5,&nbsp;6,&nbsp;7);&nbsp;&nbsp;\/\/&nbsp;7echo&nbsp;max(array(2,&nbsp;4,&nbsp;5));&nbsp;\/\/&nbsp;5\/\/&nbsp;When&nbsp;'hello'&nbsp;is&nbsp;cast&nbsp;as&nbsp;integer&nbsp;it&nbsp;will&nbsp;be&nbsp;0.&nbsp;Both&nbsp;the&nbsp;parameters&nbsp;are&nbsp;equally\/\/&nbsp;long,&nbsp;so&nbsp;the&nbsp;order&nbsp;they&nbsp;are&nbsp;given&nbsp;in&nbsp;determines&nbsp;the&nbsp;resultecho&nbsp;max(0,&nbsp;'hello');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;0echo&nbsp;max('hello',&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;helloecho&nbsp;max('42',&nbsp;3);&nbsp;\/\/&nbsp;'42'\/\/&nbsp;Here&nbsp;0&nbsp;&gt;&nbsp;-1,&nbsp;so&nbsp;'hello'&nbsp;is&nbsp;the&nbsp;return&nbsp;value.echo&nbsp;max(-1,&nbsp;'hello');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;hello\/\/&nbsp;With&nbsp;multiple&nbsp;arrays&nbsp;of&nbsp;different&nbsp;lengths,&nbsp;max&nbsp;returns&nbsp;the&nbsp;longest$val&nbsp;=&nbsp;max(array(2,&nbsp;2,&nbsp;2),&nbsp;array(1,&nbsp;1,&nbsp;1,&nbsp;1));&nbsp;\/\/&nbsp;array(1,&nbsp;1,&nbsp;1,&nbsp;1)\/\/&nbsp;With&nbsp;multiple&nbsp;arrays&nbsp;of&nbsp;the&nbsp;same&nbsp;length,&nbsp;max&nbsp;compares&nbsp;from&nbsp;left&nbsp;to&nbsp;right\/\/&nbsp;using&nbsp;lexicographic&nbsp;order,&nbsp;so&nbsp;in&nbsp;our&nbsp;example:&nbsp;2&nbsp;==&nbsp;2,&nbsp;but&nbsp;4&nbsp;&lt;&nbsp;5$val&nbsp;=&nbsp;max(array(2,&nbsp;4,&nbsp;8),&nbsp;array(2,&nbsp;5,&nbsp;7));&nbsp;\/\/&nbsp;array(2,&nbsp;5,&nbsp;7)\/\/&nbsp;If&nbsp;both&nbsp;an&nbsp;array&nbsp;and&nbsp;non-array&nbsp;are&nbsp;given,&nbsp;the&nbsp;array\/\/&nbsp;is&nbsp;always&nbsp;returned&nbsp;as&nbsp;it's&nbsp;seen&nbsp;as&nbsp;the&nbsp;largest$val&nbsp;=&nbsp;max('string',&nbsp;array(2,&nbsp;5,&nbsp;7),&nbsp;42);&nbsp;&nbsp;&nbsp;\/\/&nbsp;array(2,&nbsp;5,&nbsp;7)?&gt;\n\n\n    \n\n     \n  \n \n\n \n  See Also\n  \n   \n    min() - Find lowest value\n    count() - Count all elements in an array, or something in an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-getrandmax.php","title":"mt_getrandmax","description":"\n \n  mt_getrandmax\n  (PHP 4, PHP 5)mt_getrandmax &mdash; Show largest possible random value\n\n \n \n  Description\n   \n    int mt_getrandmax\n     ( void\n    )\n\n  \n   Returns the maximum value that can be returned by a call to\n   mt_rand().\n  \n \n\n \n  Return Values\n  \n   Returns the maximum random value returned by mt_rand()\n  \n \n\n \n  Examples\n  \n   Example #1 Calculate a random floating-point number\n    \n\n&lt;?phpfunction&nbsp;randomFloat($min&nbsp;=&nbsp;0,&nbsp;$max&nbsp;=&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$min&nbsp;+&nbsp;mt_rand()&nbsp;\/&nbsp;mt_getrandmax()&nbsp;*&nbsp;($max&nbsp;-&nbsp;$min);}var_dump(randomFloat());var_dump(randomFloat(2,&nbsp;20));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nfloat(0.91601131712832)\nfloat(16.511210331931)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    mt_rand() - Generate a better random value\n    mt_srand() - Seed the better random number generator\n    getrandmax() - Show largest possible random value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pi.php","title":"pi","description":"\n \n  pi\n  (PHP 4, PHP 5)pi &mdash; Get value of pi\n\n \n \n  Description\n   \n    float pi\n     ( void\n    )\n\n  \n   Returns an approximation of pi.  The returned float\n   has a precision based on the\n   precision directive in\n   php.ini, which defaults to 14.\n   Also, you can use the M_PI constant which yields\n   identical results to pi().\n  \n \n\n \n  Return Values\n  \n   The value of pi as float.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 pi() example\n    \n\n&lt;?phpecho&nbsp;pi();&nbsp;\/\/&nbsp;3.1415926535898echo&nbsp;M_PI;&nbsp;\/\/&nbsp;3.1415926535898?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.octdec.php","title":"octdec","description":"\n \n  octdec\n  (PHP 4, PHP 5)octdec &mdash; Octal to decimal\n\n \n \n  Description\n   \n    number octdec\n     ( string $octal_string\n    )\n\n  \n   Returns the decimal equivalent of the octal number\n   represented by the octal_string argument.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     octal_string\n     \n\n      \n       The octal string to convert\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The decimal representation of octal_string\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.1.0\n       \n        The function can now convert numbers that are too large to\n        fit into the platforms integer type, larger values\n        are returned as float in that case.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 octdec() example\n    \n\n&lt;?phpecho&nbsp;octdec('77')&nbsp;.&nbsp;\"\\n\";echo&nbsp;octdec(decoct(45));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n63\n45\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    decoct() - Decimal to octal\n    bindec() - Binary to decimal\n    hexdec() - Hexadecimal to decimal\n    base_convert() - Convert a number between arbitrary bases\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pow.php","title":"pow","description":"\n \n  pow\n  (PHP 4, PHP 5)pow &mdash; Exponential expression\n\n \n \n  Description\n   \n    number pow\n     ( number $base\n    , number $exp\n    )\n\n  \n   Returns base raised to the power of\n   exp. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     base\n     \n\n      \n       The base to use\n      \n     \n\n    \n\n    \n\n     exp\n     \n\n      \n       The exponent\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   base raised to the power of exp.\n   If the result can be represented as integer it will be returned as type\n   integer, else it will be returned as type float.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        No warning is emitted on errors, even if the value can&#039;t be computed.\n       \n      \n\n      \n       4.0.6\n       \n        The function will now return integer results if possible,\n        before this it always returned a float result. For older\n        versions, you may receive a bogus result for complex numbers.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Some examples of pow()\n    \n\n&lt;?phpvar_dump(pow(2,&nbsp;8));&nbsp;\/\/&nbsp;int(256)echo&nbsp;pow(-1,&nbsp;20);&nbsp;\/\/&nbsp;1echo&nbsp;pow(0,&nbsp;0);&nbsp;\/\/&nbsp;1echo&nbsp;pow(-1,&nbsp;5.5);&nbsp;\/\/&nbsp;PHP&nbsp;&gt;4.0.6&nbsp;&nbsp;NANecho&nbsp;pow(-1,&nbsp;5.5);&nbsp;\/\/&nbsp;PHP&nbsp;&lt;=4.0.6&nbsp;1.#IND?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function will convert all input to a number, even non-scalar values,\n    which could lead to weird results.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    exp() - Calculates the exponent of e\n    sqrt() - Square root\n    bcpow() - Raise an arbitrary precision number to another\n    gmp_pow() - Raise number into power\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-srand.php","title":"mt_srand","description":"\n \n  mt_srand\n  (PHP 4, PHP 5)mt_srand &mdash; Seed the better random number generator\n\n \n \n  Description\n   \n    void mt_srand\n     ([ int $seed\n   ] )\n\n  \n   Seeds the random number generator with\n   seed or with a random value\n   if no seed is given.\n  \n\n  Note: As of PHP 4.2.0, there is no need\nto seed the random number generator with srand() or\nmt_srand() as this is now done automatically.\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     seed\n     \n\n      \n       An optional seed value\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.2.0\n       \n        The seed becomes optional \n        and defaults to a random value if omitted.\n       \n      \n\n      \n       Since 5.2.1\n       \n        The Mersenne Twister implementation in PHP now uses a new seeding\n        algorithm by Richard Wagner. Identical seeds no longer produce the same\n        sequence of values they did in previous versions. This behavior is not\n        expected to change again, but it is considered unsafe to rely upon it\n        nonetheless.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 mt_srand() example\n    \n\n&lt;?php\/\/&nbsp;seed&nbsp;with&nbsp;microsecondsfunction&nbsp;make_seed(){&nbsp;&nbsp;list($usec,&nbsp;$sec)&nbsp;=&nbsp;explode('&nbsp;',&nbsp;microtime());&nbsp;&nbsp;return&nbsp;(float)&nbsp;$sec&nbsp;+&nbsp;((float)&nbsp;$usec&nbsp;*&nbsp;100000);}mt_srand(make_seed());$randval&nbsp;=&nbsp;mt_rand();?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    mt_rand() - Generate a better random value\n    mt_getrandmax() - Show largest possible random value\n    srand() - Seed the random number generator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rad2deg.php","title":"rad2deg","description":"\n \n  rad2deg\n  (PHP 4, PHP 5)rad2deg &mdash; \n   Converts the radian number to the equivalent number in degrees\n  \n\n \n \n  Description\n   \n    float rad2deg\n     ( float $number\n    )\n\n  \n   This function converts number from radian\n   to degrees.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       A radian value\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The equivalent of number in degrees\n  \n \n\n \n  Examples\n  \n   \n    Example #1 rad2deg() example\n    \n\n&lt;?phpecho&nbsp;rad2deg(M_PI_4);&nbsp;\/\/&nbsp;45?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    deg2rad() - Converts the number in degrees to the radian equivalent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sinh.php","title":"sinh","description":"\n \n  sinh\n  (PHP 4 &gt;= 4.1.0, PHP 5)sinh &mdash; Hyperbolic sine\n\n \n \n  Description\n   \n    float sinh\n     ( float $arg\n    )\n\n  \n   Returns the hyperbolic sine of arg,\n   defined as (exp(arg) - exp(-arg))\/2.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The hyperbolic sine of arg\n  \n \n\n \n  See Also\n  \n   \n    sin() - Sine\n    asinh() - Inverse hyperbolic sine\n    cosh() - Hyperbolic cosine\n    tanh() - Hyperbolic tangent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sin.php","title":"sin","description":"\n \n  sin\n  (PHP 4, PHP 5)sin &mdash; Sine\n\n \n \n  Description\n   \n    float sin\n     ( float $arg\n    )\n\n  \n   sin() returns the sine of the arg\n   parameter.  The arg parameter is in radians.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       A value in radians\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The sine of arg\n  \n \n\n \n  Examples\n  \n   \n    Example #1 sin() example\n    \n\n&lt;?php\/\/&nbsp;Precision&nbsp;depends&nbsp;on&nbsp;your&nbsp;precision&nbsp;directiveecho&nbsp;sin(deg2rad(60));&nbsp;&nbsp;\/\/&nbsp;&nbsp;0.866025403&nbsp;...echo&nbsp;sin(60);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;-0.304810621&nbsp;...?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    asin() - Arc sine\n    sinh() - Hyperbolic sine\n    cos() - Cosine\n    tan() - Tangent\n    deg2rad() - Converts the number in degrees to the radian equivalent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mt-rand.php","title":"mt_rand","description":"\n \n  mt_rand\n  (PHP 4, PHP 5)mt_rand &mdash; Generate a better random value\n\n \n \n  Description\n  \n   int mt_rand\n    ( void\n   )\n\n  \n   int mt_rand\n    ( int $min\n   , int $max\n   )\n\n  \n   Many random number generators of older libcs have dubious or\n   unknown characteristics and are slow. By default, PHP uses the\n   libc random number generator with the rand()\n   function.  The mt_rand() function is a drop-in\n   replacement for this.  It uses a random number generator with\n   known characteristics using the &raquo;&nbsp;\n   Mersenne Twister, which will produce random numbers four times\n   faster than what the average libc rand() provides.\n  \n  \n   If called without the optional min,\n   max arguments mt_rand()\n   returns a pseudo-random value between 0 and\n   mt_getrandmax().  If you want a random number\n   between 5 and 15 (inclusive), for example, use mt_rand(5,\n   15).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     min\n     \n\n      \n       Optional lowest value to be returned (default: 0)\n      \n     \n\n    \n\n    \n\n     max\n     \n\n      \n       Optional highest value to be returned (default: mt_getrandmax())\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   A random integer value between min (or 0)\n   and max (or mt_getrandmax(), inclusive)\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      4.2.0The random\nnumber generator is seeded automatically.\n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 mt_rand() example\n    \n\n&lt;?phpecho&nbsp;mt_rand()&nbsp;.&nbsp;\"\\n\";echo&nbsp;mt_rand()&nbsp;.&nbsp;\"\\n\";echo&nbsp;mt_rand(5,&nbsp;15);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n1604716014\n1478613278\n6\n\n    \n   \n  \n \n\n \n  Notes\n  Caution\n   \n    The distribution of mt_rand() return values is biased\n    towards even numbers on 64-bit builds of PHP when\n    max is beyond 2^32.\n   \n  \n \n\n \n  See Also\n  \n   \n    mt_srand() - Seed the better random number generator\n    mt_getrandmax() - Show largest possible random value\n    rand() - Generate a random integer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.round.php","title":"round","description":"\n \n  round\n  (PHP 4, PHP 5)round &mdash; Rounds a float\n\n \n \n  Description\n   \n    float round\n     ( float $val\n    [, int $precision = 0\n    [, int $mode = PHP_ROUND_HALF_UP\n   ]] )\n\n  \n   Returns the rounded value of val to\n   specified precision\n   (number of digits after the decimal point).\n   precision can also be negative or zero (default).\n  \n  \n  \n   Note: \n    \n     PHP doesn&#039;t handle strings like &quot;12,300.2&quot; correctly\n     by default. See converting from strings.\n    \n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     val\n     \n\n      \n       The value to round\n      \n     \n\n    \n\n    \n\n     precision\n     \n\n      \n       The optional number of decimal digits to round to.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       One of PHP_ROUND_HALF_UP,\n       PHP_ROUND_HALF_DOWN,\n       PHP_ROUND_HALF_EVEN, or\n       PHP_ROUND_HALF_ODD.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The rounded value\n  \n \n\n \n  Examples\n  \n   \n    Example #1 round() examples\n    \n\n&lt;?phpecho&nbsp;round(3.4);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;3echo&nbsp;round(3.5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;4echo&nbsp;round(3.6);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;4echo&nbsp;round(3.6,&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;4echo&nbsp;round(1.95583,&nbsp;2);&nbsp;&nbsp;\/\/&nbsp;1.96echo&nbsp;round(1241757,&nbsp;-3);&nbsp;\/\/&nbsp;1242000echo&nbsp;round(5.045,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;5.05echo&nbsp;round(5.055,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;5.06?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 mode examples\n    \n\n&lt;?phpecho&nbsp;round(9.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_UP);&nbsp;&nbsp;&nbsp;\/\/&nbsp;10echo&nbsp;round(9.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_DOWN);&nbsp;\/\/&nbsp;9echo&nbsp;round(9.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_EVEN);&nbsp;\/\/&nbsp;10echo&nbsp;round(9.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_ODD);&nbsp;&nbsp;\/\/&nbsp;9echo&nbsp;round(8.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_UP);&nbsp;&nbsp;&nbsp;\/\/&nbsp;9echo&nbsp;round(8.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_DOWN);&nbsp;\/\/&nbsp;8echo&nbsp;round(8.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_EVEN);&nbsp;\/\/&nbsp;8echo&nbsp;round(8.5,&nbsp;0,&nbsp;PHP_ROUND_HALF_ODD);&nbsp;&nbsp;\/\/&nbsp;9?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The mode parameter was introduced.\n       \n      \n\n      \n       5.2.7\n       \n        The inner workings of round() was changed \n        to conform to the C99 standard.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    ceil() - Round fractions up\n    floor() - Round fractions down\n    number_format() - Format a number with grouped thousands\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tan.php","title":"tan","description":"\n \n  tan\n  (PHP 4, PHP 5)tan &mdash; Tangent\n\n \n \n  Description\n   \n    float tan\n     ( float $arg\n    )\n\n  \n   tan() returns the tangent of the arg\n   parameter.  The arg parameter is in radians.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process in radians \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The tangent of arg\n  \n \n\n \n  Examples\n  \n   \n    Example #1 tan() example\n    \n\n&lt;?phpecho&nbsp;tan(M_PI_4);&nbsp;\/\/&nbsp;1?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    atan() - Arc tangent\n    atan2() - Arc tangent of two variables\n    sin() - Sine\n    cos() - Cosine\n    tanh() - Hyperbolic tangent\n    deg2rad() - Converts the number in degrees to the radian equivalent\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rand.php","title":"rand","description":"\n \n  rand\n  (PHP 4, PHP 5)rand &mdash; Generate a random integer\n\n \n \n  Description\n  \n   int rand\n    ( void\n   )\n\n  \n   int rand\n    ( int $min\n   , int $max\n   )\n\n  \n   If called without the optional min,\n   max arguments rand()\n   returns a pseudo-random integer between 0 and\n   getrandmax().  If you want a random number\n   between 5 and 15 (inclusive), for example, use rand(5,\n   15).\n  \n  Note: \n   \n    On some platforms (such as Windows), getrandmax()\n    is only 32767.  If you require a range larger than 32767, specifying\n    min and max will allow\n    you to create a range larger than this, or consider using\n    mt_rand() instead.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     min\n     \n\n      \n       The lowest value to return (default: 0)\n      \n     \n\n    \n\n    \n\n     max\n     \n\n      \n       The highest value to return (default: getrandmax())\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   A pseudo random value between min\n   (or 0) and max (or getrandmax(), inclusive).\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      4.2.0The random\nnumber generator is seeded automatically.\n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 rand() example\n    \n\n&lt;?phpecho&nbsp;rand()&nbsp;.&nbsp;\"\\n\";echo&nbsp;rand()&nbsp;.&nbsp;\"\\n\";echo&nbsp;rand(5,&nbsp;15);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n7771\n22264\n11\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    srand() - Seed the random number generator\n    getrandmax() - Show largest possible random value\n    mt_rand() - Generate a better random value\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqrt.php","title":"sqrt","description":"\n \n  sqrt\n  (PHP 4, PHP 5)sqrt &mdash; Square root\n\n \n \n  Description\n   \n    float sqrt\n     ( float $arg\n    )\n\n  \n   Returns the square root of arg.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The square root of arg\n   or the special value NAN for negative numbers.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 sqrt() example\n    \n\n&lt;?php\/\/&nbsp;Precision&nbsp;depends&nbsp;on&nbsp;your&nbsp;precision&nbsp;directiveecho&nbsp;sqrt(9);&nbsp;\/\/&nbsp;3echo&nbsp;sqrt(10);&nbsp;\/\/&nbsp;3.16227766&nbsp;...?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    pow() - Exponential expression\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.tanh.php","title":"tanh","description":"\n \n  tanh\n  (PHP 4 &gt;= 4.1.0, PHP 5)tanh &mdash; Hyperbolic tangent\n\n \n \n  Description\n   \n    float tanh\n     ( float $arg\n    )\n\n  \n   Returns the hyperbolic tangent of arg,\n   defined as sinh(arg)\/cosh(arg).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The argument to process\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The hyperbolic tangent of arg\n  \n \n\n \n  See Also\n  \n   \n    tan() - Tangent\n    atanh() - Inverse hyperbolic tangent\n    sinh() - Hyperbolic sine\n    cosh() - Hyperbolic cosine\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-client-encoding.php","title":"mysql_client_encoding","description":"\n \n  mysql_client_encoding\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_client_encoding &mdash; Returns the name of the character set\n\n \n\n \n  Description\n  \n   string mysql_client_encoding\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the character_set variable from MySQL.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the default character set name for the current connection.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_client_encoding() example\n    \n\n&lt;?php$link&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$charset&nbsp;=&nbsp;mysql_client_encoding($link);echo&nbsp;\"The&nbsp;current&nbsp;character&nbsp;set&nbsp;is:&nbsp;$charset\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nThe current character set is: latin1\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    mysql_set_charset() - Sets the client character set\n    mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-affected-rows.php","title":"mysql_affected_rows","description":"\n \n  mysql_affected_rows\n  (PHP 4, PHP 5)mysql_affected_rows &mdash; Get number of affected rows in previous MySQL operation\n\n \n\n \n  Description\n  \n   int mysql_affected_rows\n    ([ resource $link_identifier\n  ] )\n\n  \n   Get the number of affected rows by the last INSERT, UPDATE, REPLACE \n   or DELETE query associated with link_identifier.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of affected rows on success, and -1 if the last query\n   failed.\n  \n  \n   If the last query was a DELETE query with no WHERE clause, all\n   of the records will have been deleted from the table but this\n   function will return zero with MySQL versions prior to 4.1.2.\n  \n  \n   When using UPDATE, MySQL will not update columns where the new value is the \n   same as the old value.  This creates the possibility that \n   mysql_affected_rows() may not actually equal the number \n   of rows matched, only the number of rows that were literally affected by \n   the query.\n  \n  \n   The REPLACE statement first deletes the record with the same primary key \n   and then inserts the new record. This function returns the number of \n   deleted records plus the number of inserted records.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_affected_rows() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}mysql_select_db('mydb');\/*&nbsp;this&nbsp;should&nbsp;return&nbsp;the&nbsp;correct&nbsp;numbers&nbsp;of&nbsp;deleted&nbsp;records&nbsp;*\/mysql_query('DELETE&nbsp;FROM&nbsp;mytable&nbsp;WHERE&nbsp;id&nbsp;&lt;&nbsp;10');printf(\"Records&nbsp;deleted:&nbsp;%d\\n\",&nbsp;mysql_affected_rows());\/*&nbsp;with&nbsp;a&nbsp;where&nbsp;clause&nbsp;that&nbsp;is&nbsp;never&nbsp;true,&nbsp;it&nbsp;should&nbsp;return&nbsp;0&nbsp;*\/mysql_query('DELETE&nbsp;FROM&nbsp;mytable&nbsp;WHERE&nbsp;0');printf(\"Records&nbsp;deleted:&nbsp;%d\\n\",&nbsp;mysql_affected_rows());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nRecords deleted: 10\nRecords deleted: 0\n\n    \n   \n  \n  \n   \n    Example #2 mysql_affected_rows() example using transactions\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}mysql_select_db('mydb');\/*&nbsp;Update&nbsp;records&nbsp;*\/mysql_query(\"UPDATE&nbsp;mytable&nbsp;SET&nbsp;used=1&nbsp;WHERE&nbsp;id&nbsp;&lt;&nbsp;10\");printf&nbsp;(\"Updated&nbsp;records:&nbsp;%d\\n\",&nbsp;mysql_affected_rows());mysql_query(\"COMMIT\");?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nUpdated Records: 10\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   Transactions\n   \n    If you are using transactions, you need to call\n    mysql_affected_rows() after your INSERT, UPDATE, or \n    DELETE query, not after the COMMIT.\n   \n  \n  Note: \n   SELECT Statements\n   \n    To retrieve the number of rows returned by a SELECT, it is possible to\n    use mysql_num_rows().\n   \n  \n  Note: \n   Cascaded Foreign Keys\n   \n     mysql_affected_rows() does not count rows affected\n     implicitly through the use of ON DELETE CASCADE and\/or ON UPDATE CASCADE \n     in foreign key constraints.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_num_rows() - Get number of rows in result\n    mysql_info() - Get information about the most recent query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-close.php","title":"mysql_close","description":"\n \n  mysql_close\n  (PHP 4, PHP 5)mysql_close &mdash; Close MySQL connection\n\n \n\n \n  Description\n  \n   bool mysql_close\n    ([ resource $link_identifier\n  ] )\n\n   \n   mysql_close() closes the non-persistent connection to \n   the MySQL server that&#039;s associated with the specified link identifier. If \n   link_identifier isn&#039;t specified, the last opened \n   link is used.\n  \n  \n   Using mysql_close() isn&#039;t usually necessary,\n   as non-persistent open links are automatically closed at the end\n   of the script&#039;s execution. See also\n   freeing\n   resources.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no connection is found or\nestablished, an E_WARNING level error is\ngenerated.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_close() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nConnected successfully\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysql_close() will not close persistent links\n    created by mysql_pconnect().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_connect() - Open a connection to a MySQL Server\n    mysql_free_result() - Free result memory\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.srand.php","title":"srand","description":"\n \n  srand\n  (PHP 4, PHP 5)srand &mdash; Seed the random number generator\n\n \n \n  Description\n   \n    void srand\n     ([ int $seed\n   ] )\n\n  \n   Seeds the random number generator with seed\n   or with a random value if no seed is given.\n  \n\n  Note: As of PHP 4.2.0, there is no need\nto seed the random number generator with srand() or\nmt_srand() as this is now done automatically.\n\n\n \n\n \n  Parameters\n  \n   \n\n    \n\n     seed\n     \n\n      \n       Optional seed value\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       Since 4.2.0\n       \n        The seed becomes optional\n        and defaults to a random value if omitted.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 srand() example\n    \n\n&lt;?php\/\/&nbsp;seed&nbsp;with&nbsp;microsecondsfunction&nbsp;make_seed(){&nbsp;&nbsp;list($usec,&nbsp;$sec)&nbsp;=&nbsp;explode('&nbsp;',&nbsp;microtime());&nbsp;&nbsp;return&nbsp;(float)&nbsp;$sec&nbsp;+&nbsp;((float)&nbsp;$usec&nbsp;*&nbsp;100000);}srand(make_seed());$randval&nbsp;=&nbsp;rand();?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    rand() - Generate a random integer\n    getrandmax() - Show largest possible random value\n    mt_srand() - Seed the better random number generator\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-create-db.php","title":"mysql_create_db","description":"\n \n  mysql_create_db\n  (PHP 4, PHP 5)mysql_create_db &mdash; Create a MySQL database\n\n \n\n \n  Description\n  \n   bool mysql_create_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )\n\n  \n   mysql_create_db() attempts to create a new\n   database on the server associated with the specified link\n   identifier.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database_name\n     \n\n      \n       The name of the database being created.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_create_db() alternative example\n    \n     The function mysql_create_db() is deprecated. It is \n     preferable to use mysql_query() to issue an sql\n    CREATE DATABASE statement instead.\n    \n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}$sql&nbsp;=&nbsp;'CREATE&nbsp;DATABASE&nbsp;my_db';if&nbsp;(mysql_query($sql,&nbsp;$link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Database&nbsp;my_db&nbsp;created&nbsp;successfully\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;creating&nbsp;database:&nbsp;'&nbsp;.&nbsp;mysql_error()&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nDatabase my_db created successfully\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_createdb()\n   \n  \n  Note: \n   \n    This function will not be available if the MySQL extension was built \n    against a MySQL 4.x client library.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n    mysql_select_db() - Select a MySQL database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-db-name.php","title":"mysql_db_name","description":"\n \n  mysql_db_name\n  (PHP 4, PHP 5)mysql_db_name &mdash; Retrieves database name from the call to mysql_list_dbs()\n\n \n\n \n  Description\n  \n   string mysql_db_name\n    ( resource $result\n   , int $row\n   [, mixed $field\n  ] )\n\n  \n   Retrieve the database name from a call to \n   mysql_list_dbs().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result pointer from a call to mysql_list_dbs().\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       The index into the result set.\n      \n     \n\n    \n\n    \n\n     field\n     \n\n      \n       The field name.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the database name on success, and FALSE on failure. If FALSE\n   is returned, use mysql_error() to determine the nature\n   of the error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 mysql_db_name() example\n    \n\n&lt;?phperror_reporting(E_ALL);$link&nbsp;=&nbsp;mysql_connect('dbhost',&nbsp;'username',&nbsp;'password');$db_list&nbsp;=&nbsp;mysql_list_dbs($link);$i&nbsp;=&nbsp;0;$cnt&nbsp;=&nbsp;mysql_num_rows($db_list);while&nbsp;($i&nbsp;&lt;&nbsp;$cnt)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;mysql_db_name($db_list,&nbsp;$i)&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$i++;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_dbname()\n   \n  \n \n\n \n \n  See Also\n  \n   \n    mysql_list_dbs() - List databases available on a MySQL server\n    mysql_tablename() - Get table name of field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-data-seek.php","title":"mysql_data_seek","description":"\n \n  mysql_data_seek\n  (PHP 4, PHP 5)mysql_data_seek &mdash; Move internal result pointer\n\n \n\n \n  Description\n  \n   bool mysql_data_seek\n    ( resource $result\n   , int $row_number\n   )\n\n  \n   mysql_data_seek() moves the internal row\n   pointer of the MySQL result associated with the specified result\n   identifier to point to the specified row number.  The next call\n   to a MySQL fetch function, such as mysql_fetch_assoc(),\n   would return that row.\n  \n  \n   row_number starts at 0. The \n   row_number should be a value in the range from 0 to\n   mysql_num_rows() - 1. However if the result set \n   is empty (mysql_num_rows() == 0), a seek to 0 will \n   fail with a E_WARNING and \n   mysql_data_seek() will return FALSE.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\n     row_number\n     \n\n      \n       The desired row number of the new result pointer.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_data_seek() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}$db_selected&nbsp;=&nbsp;mysql_select_db('sample_db');if&nbsp;(!$db_selected)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;select&nbsp;database:&nbsp;'&nbsp;.&nbsp;mysql_error());}$query&nbsp;=&nbsp;'SELECT&nbsp;last_name,&nbsp;first_name&nbsp;FROM&nbsp;friends';$result&nbsp;=&nbsp;mysql_query($query);if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Query&nbsp;failed:&nbsp;'&nbsp;.&nbsp;mysql_error());}\/*&nbsp;fetch&nbsp;rows&nbsp;in&nbsp;reverse&nbsp;order&nbsp;*\/for&nbsp;($i&nbsp;=&nbsp;mysql_num_rows($result)&nbsp;-&nbsp;1;&nbsp;$i&nbsp;&gt;=&nbsp;0;&nbsp;$i--)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!mysql_data_seek($result,&nbsp;$i))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Cannot&nbsp;seek&nbsp;to&nbsp;row&nbsp;$i:&nbsp;\"&nbsp;.&nbsp;mysql_error()&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!($row&nbsp;=&nbsp;mysql_fetch_assoc($result)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['last_name']&nbsp;.&nbsp;'&nbsp;'&nbsp;.&nbsp;$row['first_name']&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    The function mysql_data_seek() can be used in\n    conjunction only with mysql_query(), not with\n    mysql_unbuffered_query(). \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n    mysql_num_rows() - Get number of rows in result\n    mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both\n    mysql_fetch_object() - Fetch a result row as an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-db-query.php","title":"mysql_db_query","description":"\n \n  mysql_db_query\n  (PHP 4, PHP 5)mysql_db_query &mdash; Selects a database and executes a query on it\n\n \n\n \n  Description\n  \n   resource mysql_db_query\n    ( string $database\n   , string $query\n   [, resource $link_identifier\n  ] )\n\n  \n   mysql_db_query() selects a database, and executes a \n   query on it.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The name of the database that will be selected.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The MySQL query.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a positive MySQL result resource to the query result,\n   or FALSE on error. The function also returns TRUE\/FALSE for\n   INSERT\/UPDATE\/DELETE\n   queries to indicate success\/failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function now throws an E_DEPRECATED notice.\n       \n      \n\n      \n       4.0.6\n       \n        This function is deprecated, do not use this function. Use \n        mysql_select_db() and \n        mysql_query() instead.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_db_query() alternative example\n    \n\n&lt;?phpif&nbsp;(!$link&nbsp;=&nbsp;mysql_connect('mysql_host',&nbsp;'mysql_user',&nbsp;'mysql_password'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;mysql';&nbsp;&nbsp;&nbsp;&nbsp;exit;}if&nbsp;(!mysql_select_db('mysql_dbname',&nbsp;$link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;select&nbsp;database';&nbsp;&nbsp;&nbsp;&nbsp;exit;}$sql&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'SELECT&nbsp;foo&nbsp;FROM&nbsp;bar&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;42';$result&nbsp;=&nbsp;mysql_query($sql,&nbsp;$link);if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"DB&nbsp;Error,&nbsp;could&nbsp;not&nbsp;query&nbsp;the&nbsp;database\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'MySQL&nbsp;Error:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['foo'];}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Be aware that this function does NOT\n    switch back to the database you were connected before. In other words,\n    you can&#039;t use this function to temporarily run a\n    sql query on another database, you would have to manually switch back.\n    Users are strongly encouraged to use the\n    database.table syntax in their sql queries or\n    mysql_select_db() instead of this function.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n    mysql_select_db() - Select a MySQL database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-drop-db.php","title":"mysql_drop_db","description":"\n \n  mysql_drop_db\n  (PHP 4, PHP 5)mysql_drop_db &mdash; Drop (delete) a MySQL database\n\n \n\n \n  Description\n  \n   bool mysql_drop_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )\n\n  \n   mysql_drop_db() attempts to drop (remove) an\n   entire database from the server associated with the specified\n   link identifier. This function is deprecated, it is preferable to use \n   mysql_query() to issue an sql \n   DROP DATABASE statement instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database_name\n     \n\n      \n       The name of the database that will be deleted.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n  \n \n  Examples\n  \n   \n    Example #1 mysql_drop_db() alternative example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}$sql&nbsp;=&nbsp;'DROP&nbsp;DATABASE&nbsp;my_db';if&nbsp;(mysql_query($sql,&nbsp;$link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Database&nbsp;my_db&nbsp;was&nbsp;successfully&nbsp;dropped\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;dropping&nbsp;database:&nbsp;'&nbsp;.&nbsp;mysql_error()&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    This function will not be available if the MySQL extension was built \n    against a MySQL 4.x client library.\n   \n  \n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_dropdb()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-errno.php","title":"mysql_errno","description":"\n \n  mysql_errno\n  (PHP 4, PHP 5)mysql_errno &mdash; Returns the numerical value of the error message from previous MySQL operation\n\n \n\n \n  Description\n  \n   int mysql_errno\n    ([ resource $link_identifier\n  ] )\n\n  \n   Returns the error number from the last MySQL function. \n  \n  \n   Errors coming back from the MySQL database backend no longer\n   issue warnings. Instead, use mysql_errno() to\n   retrieve the error code. Note that this function only returns the\n   error code from the most recently executed MySQL function (not\n   including mysql_error() and\n   mysql_errno()), so if you want to use it,\n   make sure you check the value before calling another MySQL\n   function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the error number from the last MySQL function, or\n   0 (zero) if no error occurred.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_errno() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\");if&nbsp;(!mysql_select_db(\"nonexistentdb\",&nbsp;$link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;mysql_errno($link)&nbsp;.&nbsp;\":&nbsp;\"&nbsp;.&nbsp;mysql_error($link).&nbsp;\"\\n\";}mysql_select_db(\"kossu\",&nbsp;$link);if&nbsp;(!mysql_query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;nonexistenttable\",&nbsp;$link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;mysql_errno($link)&nbsp;.&nbsp;\":&nbsp;\"&nbsp;.&nbsp;mysql_error($link)&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n1049: Unknown database &#039;nonexistentdb&#039;\n1146: Table &#039;kossu.nonexistenttable&#039; doesn&#039;t exist\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_error() - Returns the text of the error message from previous MySQL operation\n    &raquo;&nbsp;MySQL error codes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-connect.php","title":"mysql_connect","description":"\n \n  mysql_connect\n  (PHP 4, PHP 5)mysql_connect &mdash; Open a connection to a MySQL Server\n\n \n\n \n  Description\n  \n   resource mysql_connect\n    ([ string $server = ini_get(&quot;mysql.default_host&quot;)\n   [, string $username = ini_get(&quot;mysql.default_user&quot;)\n   [, string $password = ini_get(&quot;mysql.default_password&quot;)\n   [, bool $new_link = false\n   [, int $client_flags = 0\n  ]]]]] )\n\n  \n   Opens or reuses a connection to a MySQL server. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     server\n     \n\n      \n       The MySQL server. It can also include a port number. e.g. \n       &quot;hostname:port&quot; or a path to a local socket e.g. &quot;:\/path\/to\/socket&quot; for \n       the localhost.\n      \n      \n       If the PHP directive \n       mysql.default_host is undefined (default), then the default \n       value is &#039;localhost:3306&#039;. In SQL safe mode, this parameter is ignored\n       and value &#039;localhost:3306&#039; is always used.\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The username. Default value is defined by mysql.default_user. In\n       SQL safe mode, this parameter is ignored and the name of the user that\n       owns the server process is used.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password. Default value is defined by mysql.default_password. In\n       SQL safe mode, this parameter is ignored and empty password is used.\n      \n     \n\n    \n   \n    \n\n     new_link\n     \n\n      \n       If a second call is made to mysql_connect()\n       with the same arguments, no new link will be established, but\n       instead, the link identifier of the already opened link will be\n       returned. The new_link parameter modifies this \n       behavior and makes mysql_connect() always open \n       a new link, even if mysql_connect() was called \n       before with the same parameters.\n       In SQL safe mode, this parameter is ignored.\n      \n     \n\n    \n\n    \n\n     client_flags\n     \n\n      \n       The client_flags parameter can be a combination \n       of the following constants:\n       128 (enable LOAD DATA LOCAL handling),\n       MYSQL_CLIENT_SSL,\n       MYSQL_CLIENT_COMPRESS, \n       MYSQL_CLIENT_IGNORE_SPACE or\n       MYSQL_CLIENT_INTERACTIVE.\n       Read the section about MySQL client constants for further information.\n       In SQL safe mode, this parameter is ignored.\n      \n     \n\n    \n \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a MySQL link identifier on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        Added the client_flags parameter.\n       \n      \n\n      \n       4.2.0\n       \n        Added the new_link parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_connect() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 mysql_connect() example using hostname:port syntax\n    \n\n&lt;?php\/\/&nbsp;we&nbsp;connect&nbsp;to&nbsp;example.com&nbsp;and&nbsp;port&nbsp;3307$link&nbsp;=&nbsp;mysql_connect('example.com:3307',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);\/\/&nbsp;we&nbsp;connect&nbsp;to&nbsp;localhost&nbsp;at&nbsp;port&nbsp;3307$link&nbsp;=&nbsp;mysql_connect('127.0.0.1:3307',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 mysql_connect() example using  &quot;:\/path\/to\/socket&quot; syntax\n    \n\n&lt;?php\/\/&nbsp;we&nbsp;connect&nbsp;to&nbsp;localhost&nbsp;and&nbsp;socket&nbsp;e.g.&nbsp;\/tmp\/mysql.sock\/\/&nbsp;variant&nbsp;1:&nbsp;omit&nbsp;localhost$link&nbsp;=&nbsp;mysql_connect(':\/tmp\/mysql',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);\/\/&nbsp;variant&nbsp;2:&nbsp;with&nbsp;localhost$link&nbsp;=&nbsp;mysql_connect('localhost:\/tmp\/mysql.sock',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}echo&nbsp;'Connected&nbsp;successfully';mysql_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Whenever you specify &quot;localhost&quot; or\n    &quot;localhost:port&quot; as server, the MySQL client library will\n    override this and try to connect to a local socket (named pipe on\n    Windows). If you want to use TCP\/IP, use &quot;127.0.0.1&quot;\n    instead of &quot;localhost&quot;. If the MySQL client library tries to\n    connect to the wrong local socket, you should set the correct path as\n     in your PHP configuration and leave the server field\n    blank.\n   \n  \n  Note: \n   \n    The link to the server will be closed as soon as the execution of\n    the script ends, unless it&#039;s closed earlier by explicitly calling\n    mysql_close().\n   \n  \n  Note: \n   \n    You can suppress the error message on failure by prepending \n    a @\n    to the function name.\n   \n  \n  Note: \n   \n    Error &quot;Can&#039;t create TCP\/IP socket (10106)&quot; usually means that the variables_order configure directive\n    doesn&#039;t contain character E. On Windows, if the\n    environment is not copied the SYSTEMROOT environment\n    variable won&#039;t be available and PHP will have problems loading Winsock.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_pconnect() - Open a persistent connection to a MySQL server\n    mysql_close() - Close MySQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-escape-string.php","title":"mysql_escape_string","description":"\n \n  mysql_escape_string\n  (PHP 4 &gt;= 4.0.3, PHP 5)mysql_escape_string &mdash; Escapes a string for use in a mysql_query\n\n \n\n \n  Description\n  \n   string mysql_escape_string\n    ( string $unescaped_string\n   )\n\n  \n   This function will escape the unescaped_string,\n   so that it is safe to place it in a mysql_query().\n   This function is deprecated.\n  \n  \n   This function is identical to mysql_real_escape_string() \n   except that mysql_real_escape_string() takes a \n   connection handler and escapes the string according to the current \n   character set. mysql_escape_string() does not take a\n   connection argument and does not respect the current charset setting.  \n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     unescaped_string\n     \n\n      \n       The string that is to be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the escaped string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function now throws an E_DEPRECATED notice.\n       \n      \n\n      \n       4.3.0\n       \n        This function became deprecated, do not use this function. Instead, \n        use mysql_real_escape_string().\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_escape_string() example\n    \n\n&lt;?php$item&nbsp;=&nbsp;\"Zak's&nbsp;Laptop\";$escaped_item&nbsp;=&nbsp;mysql_escape_string($item);printf(\"Escaped&nbsp;string:&nbsp;%s\\n\",&nbsp;$escaped_item);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nEscaped string: Zak\\&#039;s Laptop\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysql_escape_string() does not escape\n     and _.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement\n    addslashes() - Quote string with slashes\n    The magic_quotes_gpc directive.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-error.php","title":"mysql_error","description":"\n \n  mysql_error\n  (PHP 4, PHP 5)mysql_error &mdash; Returns the text of the error message from previous MySQL operation\n\n \n\n \n  Description\n  \n   string mysql_error\n    ([ resource $link_identifier\n  ] )\n\n  \n   Returns the error text from the last MySQL function.\n   Errors coming back from the MySQL database backend no longer\n   issue warnings. Instead, use mysql_error() to\n   retrieve the error text. Note that this function only returns the\n   error text from the most recently executed MySQL function (not\n   including mysql_error() and\n   mysql_errno()), so if you want to use it, make\n   sure you check the value before calling another MySQL function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error text from the last MySQL function, or\n   &#039;&#039; (empty string) if no error occurred.\n  \n \n\n\n  \n  Examples\n  \n   \n    Example #1 mysql_error() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\");mysql_select_db(\"nonexistentdb\",&nbsp;$link);echo&nbsp;mysql_errno($link)&nbsp;.&nbsp;\":&nbsp;\"&nbsp;.&nbsp;mysql_error($link).&nbsp;\"\\n\";mysql_select_db(\"kossu\",&nbsp;$link);mysql_query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;nonexistenttable\",&nbsp;$link);echo&nbsp;mysql_errno($link)&nbsp;.&nbsp;\":&nbsp;\"&nbsp;.&nbsp;mysql_error($link)&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n1049: Unknown database &#039;nonexistentdb&#039;\n1146: Table &#039;kossu.nonexistenttable&#039; doesn&#039;t exist\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_errno() - Returns the numerical value of the error message from previous MySQL operation\n    &raquo;&nbsp;MySQL error codes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-lengths.php","title":"mysql_fetch_lengths","description":"\n \n  mysql_fetch_lengths\n  (PHP 4, PHP 5)mysql_fetch_lengths &mdash; Get the length of each output in a result\n\n \n\n \n  Description\n  \n   array mysql_fetch_lengths\n    ( resource $result\n   )\n\n  \n   Returns an array that corresponds to the lengths of each field\n   in the last row fetched by MySQL.\n  \n  \n   mysql_fetch_lengths() stores the lengths of\n   each result column in the last row returned by\n   mysql_fetch_row(),\n   mysql_fetch_assoc(),\n   mysql_fetch_array(), and\n   mysql_fetch_object() in an array, starting at\n   offset 0.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   An array of lengths on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A mysql_fetch_lengths() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}$row&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;mysql_fetch_assoc($result);$lengths&nbsp;=&nbsp;mysql_fetch_lengths($result);print_r($row);print_r($lengths);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [id] =&gt; 42\n    [email] =&gt; user@example.com\n)\nArray\n(\n    [0] =&gt; 2\n    [1] =&gt; 16\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_field_len() - Returns the length of the specified field\n    mysql_fetch_row() - Get a result row as an enumerated array\n    strlen() - Get string length\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-array.php","title":"mysql_fetch_array","description":"\n \n  mysql_fetch_array\n  (PHP 4, PHP 5)mysql_fetch_array &mdash; Fetch a result row as an associative array, a numeric array, or both\n\n \n\n \n  Description\n  \n   array mysql_fetch_array\n    ( resource $result\n   [, int $result_type = MYSQL_BOTH\n  ] )\n\n  \n   Returns an array that corresponds to the fetched row\n   and moves the internal data pointer ahead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\n     result_type\n     \n\n      \n       The type of array that is to be fetched. It&#039;s a constant and can\n       take the following values: MYSQL_ASSOC, \n       MYSQL_NUM, and\n       MYSQL_BOTH.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an array of strings that corresponds to the fetched row, or FALSE\n   if there are no more rows. The type of returned array depends on\n   how result_type is defined. By using \n   MYSQL_BOTH (default), you&#039;ll get an array with both \n   associative and number indices. Using MYSQL_ASSOC, you \n   only get associative indices (as mysql_fetch_assoc() \n   works), using MYSQL_NUM, you only get number indices \n   (as mysql_fetch_row() works).\n  \n  \n   If two or more columns of the result have the same field names,\n   the last column will take precedence. To access the other column(s)\n   of the same name, you must use the numeric index of the column or\n   make an alias for the column. For aliased columns, you cannot\n   access the contents with the original column name.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Query with aliased duplicate field names\n    \nSELECT table1.field AS foo, table2.field AS bar FROM table1, table2\n\n    \n\n   \n  \n  \n   \n    Example #2 mysql_fetch_array() with MYSQL_NUM\n    \n\n&lt;?phpmysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\")&nbsp;or&nbsp;&nbsp;&nbsp;&nbsp;die(\"Could&nbsp;not&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;mysql_error());mysql_select_db(\"mydb\");$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,&nbsp;name&nbsp;FROM&nbsp;mytable\");while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_array($result,&nbsp;MYSQL_NUM))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;printf(\"ID:&nbsp;%s&nbsp;&nbsp;Name:&nbsp;%s\",&nbsp;$row[0],&nbsp;$row[1]);&nbsp;&nbsp;}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 mysql_fetch_array() with MYSQL_ASSOC\n    \n\n&lt;?phpmysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\")&nbsp;or&nbsp;&nbsp;&nbsp;&nbsp;die(\"Could&nbsp;not&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;mysql_error());mysql_select_db(\"mydb\");$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,&nbsp;name&nbsp;FROM&nbsp;mytable\");while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_array($result,&nbsp;MYSQL_ASSOC))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;printf(\"ID:&nbsp;%s&nbsp;&nbsp;Name:&nbsp;%s\",&nbsp;$row[\"id\"],&nbsp;$row[\"name\"]);}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #4 mysql_fetch_array() with MYSQL_BOTH\n    \n\n&lt;?phpmysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\")&nbsp;or&nbsp;&nbsp;&nbsp;&nbsp;die(\"Could&nbsp;not&nbsp;connect:&nbsp;\"&nbsp;.&nbsp;mysql_error());mysql_select_db(\"mydb\");$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,&nbsp;name&nbsp;FROM&nbsp;mytable\");while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_array($result,&nbsp;MYSQL_BOTH))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;(\"ID:&nbsp;%s&nbsp;&nbsp;Name:&nbsp;%s\",&nbsp;$row[0],&nbsp;$row[\"name\"]);}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   Performance\n   \n    An important thing to note is that using \n    mysql_fetch_array() is not \n    significantly slower than using\n    mysql_fetch_row(), while it provides\n    a significant added value.\n   \n  \n  Note: Field names returned by this function\nare case-sensitive.\n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_data_seek() - Move internal result pointer\n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-field.php","title":"mysql_fetch_field","description":"\n \n  mysql_fetch_field\n  (PHP 4, PHP 5)mysql_fetch_field &mdash; Get column information from a result and return as an object\n\n \n\n \n  Description\n  \n   object mysql_fetch_field\n    ( resource $result\n   [, int $field_offset = 0\n  ] )\n\n  \n   Returns an object containing field information. This function can be used \n   to obtain information about fields in the provided query result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\n     field_offset\n     \n\n      \n       The numerical field offset. If the field offset is not specified, the \n       next field that was not yet retrieved by this function is retrieved. \n       The field_offset starts at 0.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object containing field information. The properties \n   of the object are:\n  \n  \n   \n    \n     \n      name - column name\n     \n    \n    \n     \n      table - name of the table the column belongs to\n     \n    \n    \n     \n      max_length - maximum length of the column\n     \n    \n    \n     \n      not_null - 1 if the column cannot be NULL\n     \n    \n    \n     \n      primary_key - 1 if the column is a primary key\n     \n    \n    \n     \n      unique_key - 1 if the column is a unique key\n     \n    \n    \n     \n      multiple_key - 1 if the column is a non-unique key\n     \n    \n    \n     \n      numeric - 1 if the column is numeric\n     \n    \n    \n     \n      blob - 1 if the column is a BLOB\n     \n    \n    \n     \n      type - the type of the column\n     \n    \n    \n     \n      unsigned - 1 if the column is unsigned\n     \n    \n    \n     \n      zerofill - 1 if the column is zero-filled\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_fetch_field() example\n    \n\n&lt;?php$conn&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}mysql_select_db('database');$result&nbsp;=&nbsp;mysql_query('select&nbsp;*&nbsp;from&nbsp;table');if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Query&nbsp;failed:&nbsp;'&nbsp;.&nbsp;mysql_error());}\/*&nbsp;get&nbsp;column&nbsp;metadata&nbsp;*\/$i&nbsp;=&nbsp;0;while&nbsp;($i&nbsp;&lt;&nbsp;mysql_num_fields($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Information&nbsp;for&nbsp;column&nbsp;$i:&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$meta&nbsp;=&nbsp;mysql_fetch_field($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$meta)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"No&nbsp;information&nbsp;available&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;pre&gt;blob:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;blobmax_length:&nbsp;&nbsp;&nbsp;$meta-&gt;max_lengthmultiple_key:&nbsp;$meta-&gt;multiple_keyname:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;namenot_null:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;not_nullnumeric:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;numericprimary_key:&nbsp;&nbsp;$meta-&gt;primary_keytable:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;tabletype:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;typeunique_key:&nbsp;&nbsp;&nbsp;$meta-&gt;unique_keyunsigned:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;unsignedzerofill:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$meta-&gt;zerofill&lt;\/pre&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;$i++;}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Field names returned by this function\nare case-sensitive.\n \n\n\n \n  See Also\n  \n   \n    mysql_field_seek() - Set result pointer to a specified field offset\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-assoc.php","title":"mysql_fetch_assoc","description":"\n \n  mysql_fetch_assoc\n  (PHP 4 &gt;= 4.0.3, PHP 5)mysql_fetch_assoc &mdash; Fetch a result row as an associative array\n\n \n\n \n  Description\n  \n   array mysql_fetch_assoc\n    ( resource $result\n   )\n\n  \n   Returns an associative array that corresponds to the fetched row\n   and moves the internal data pointer ahead.\n   mysql_fetch_assoc() is equivalent to calling\n   mysql_fetch_array() with MYSQL_ASSOC for the\n   optional second parameter. It only returns an associative array.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array of strings that corresponds to the fetched row, or \n   FALSE if there are no more rows.\n  \n  \n   If two or more columns of the result have the same field names,\n   the last column will take precedence. To access the other\n   column(s) of the same name, you either need to access the\n   result with numeric indices by using\n   mysql_fetch_row() or add alias names.\n   See the example at the mysql_fetch_array()\n   description about aliases.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 An expanded mysql_fetch_assoc() example\n    \n\n&lt;?php$conn&nbsp;=&nbsp;mysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;connect&nbsp;to&nbsp;DB:&nbsp;\"&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}&nbsp;&nbsp;if&nbsp;(!mysql_select_db(\"mydbname\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;select&nbsp;mydbname:&nbsp;\"&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}$sql&nbsp;=&nbsp;\"SELECT&nbsp;id&nbsp;as&nbsp;userid,&nbsp;fullname,&nbsp;userstatus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;&nbsp;&nbsp;sometable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;&nbsp;userstatus&nbsp;=&nbsp;1\";$result&nbsp;=&nbsp;mysql_query($sql);if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Could&nbsp;not&nbsp;successfully&nbsp;run&nbsp;query&nbsp;($sql)&nbsp;from&nbsp;DB:&nbsp;\"&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}if&nbsp;(mysql_num_rows($result)&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"No&nbsp;rows&nbsp;found,&nbsp;nothing&nbsp;to&nbsp;print&nbsp;so&nbsp;am&nbsp;exiting\";&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/\/&nbsp;While&nbsp;a&nbsp;row&nbsp;of&nbsp;data&nbsp;exists,&nbsp;put&nbsp;that&nbsp;row&nbsp;in&nbsp;$row&nbsp;as&nbsp;an&nbsp;associative&nbsp;array\/\/&nbsp;Note:&nbsp;If&nbsp;you're&nbsp;expecting&nbsp;just&nbsp;one&nbsp;row,&nbsp;no&nbsp;need&nbsp;to&nbsp;use&nbsp;a&nbsp;loop\/\/&nbsp;Note:&nbsp;If&nbsp;you&nbsp;put&nbsp;extract($row);&nbsp;inside&nbsp;the&nbsp;following&nbsp;loop,&nbsp;you'll\/\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;then&nbsp;create&nbsp;$userid,&nbsp;$fullname,&nbsp;and&nbsp;$userstatuswhile&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"userid\"];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"fullname\"];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[\"userstatus\"];}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   Performance\n   \n    An important thing to note is that using \n    mysql_fetch_assoc() is not \n    significantly slower than using\n    mysql_fetch_row(), while it \n    provides a significant added value.\n   \n  \n  Note: Field names returned by this function\nare case-sensitive.\n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both\n    mysql_data_seek() - Move internal result pointer\n    mysql_query() - Send a MySQL query\n    mysql_error() - Returns the text of the error message from previous MySQL operation\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-row.php","title":"mysql_fetch_row","description":"\n \n  mysql_fetch_row\n  (PHP 4, PHP 5)mysql_fetch_row &mdash; Get a result row as an enumerated array\n\n \n\n \n  Description\n  \n   array mysql_fetch_row\n    ( resource $result\n   )\n\n  \n   Returns a numerical array that corresponds to the fetched row\n   and moves the internal data pointer ahead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an numerical array of strings that corresponds to the fetched row, or \n   FALSE if there are no more rows.\n  \n  \n   mysql_fetch_row() fetches one row of data from\n   the result associated with the specified result identifier.  The\n   row is returned as an array.  Each result column is stored in an\n   array offset, starting at offset 0.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Fetching one row with mysql_fetch_row()\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}$row&nbsp;=&nbsp;mysql_fetch_row($result);echo&nbsp;$row[0];&nbsp;\/\/&nbsp;42echo&nbsp;$row[1];&nbsp;\/\/&nbsp;the&nbsp;email&nbsp;value?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_fetch_object() - Fetch a result row as an object\n    mysql_data_seek() - Move internal result pointer\n    mysql_fetch_lengths() - Get the length of each output in a result\n    mysql_result() - Get result data\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-fetch-object.php","title":"mysql_fetch_object","description":"\n \n  mysql_fetch_object\n  (PHP 4, PHP 5)mysql_fetch_object &mdash; Fetch a result row as an object\n\n \n\n \n  Description\n  \n   object mysql_fetch_object\n    ( resource $result\n   [, string $class_name\n   [, array $params\n  ]] )\n\n  \n   Returns an object with properties that correspond to the fetched row\n   and moves the internal data pointer ahead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\n     class_name\n      \n\n       \n        The name of the class to instantiate, set the properties of and return.\n        If not specified, a stdClass object is returned.\n       \n     \n\n    \n\n    \n\n     params\n      \n\n       \n        An optional array of parameters to pass to the constructor\n        for class_name objects.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object with string properties that correspond to the\n   fetched row, or FALSE if there are no more rows.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Added the ability to return as a different object.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_fetch_object() example\n    \n\n&lt;?phpmysql_connect(\"hostname\",&nbsp;\"user\",&nbsp;\"password\");mysql_select_db(\"mydb\");$result&nbsp;=&nbsp;mysql_query(\"select&nbsp;*&nbsp;from&nbsp;mytable\");while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_object($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row-&gt;user_id;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row-&gt;fullname;}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 mysql_fetch_object() example\n    \n\n&lt;?phpclass&nbsp;foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$name;}mysql_connect(\"hostname\",&nbsp;\"user\",&nbsp;\"password\");mysql_select_db(\"mydb\");$result&nbsp;=&nbsp;mysql_query(\"select&nbsp;name&nbsp;from&nbsp;mytable&nbsp;limit&nbsp;1\");$obj&nbsp;=&nbsp;mysql_fetch_object($result,&nbsp;'foo');var_dump($obj);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   Performance\n   \n    Speed-wise, the function is identical to\n    mysql_fetch_array(), and almost as quick as\n    mysql_fetch_row() (the difference is\n    insignificant).\n   \n  \n  Note: \n   \n    mysql_fetch_object() is similar to\n    mysql_fetch_array(), with one difference - an\n    object is returned, instead of an array.  Indirectly, that means\n    that you can only access the data by the field names, and not by\n    their offsets (numbers are illegal property names).\n   \n  \n  Note: Field names returned by this function\nare case-sensitive.\n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_data_seek() - Move internal result pointer\n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-len.php","title":"mysql_field_len","description":"\n \n  mysql_field_len\n  (PHP 4, PHP 5)mysql_field_len &mdash; Returns the length of the specified field\n\n \n\n \n  Description\n  \n   int mysql_field_len\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   mysql_field_len() returns the length of the\n   specified field.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The length of the specified field index on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_field_len() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/\/&nbsp;Will&nbsp;get&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;id&nbsp;field&nbsp;as&nbsp;specified&nbsp;in&nbsp;the&nbsp;database\/\/&nbsp;schema.&nbsp;$length&nbsp;=&nbsp;mysql_field_len($result,&nbsp;0);echo&nbsp;$length;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_fieldlen()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_lengths() - Get the length of each output in a result\n    strlen() - Get string length\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-flags.php","title":"mysql_field_flags","description":"\n \n  mysql_field_flags\n  (PHP 4, PHP 5)mysql_field_flags &mdash; Get the flags associated with the specified field in a result\n\n \n\n \n  Description\n  \n   string mysql_field_flags\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   mysql_field_flags() returns the field flags of\n   the specified field. The flags are reported as a single word\n   per flag separated by a single space, so that you can split the\n   returned value using explode().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string of flags associated with the result or FALSE on failure.\n  \n  \n   The following flags are reported, if your version of MySQL\n   is current enough to support them: &quot;not_null&quot;, \n   &quot;primary_key&quot;, &quot;unique_key&quot;, \n   &quot;multiple_key&quot;, &quot;blob&quot;, \n   &quot;unsigned&quot;, &quot;zerofill&quot;,\n   &quot;binary&quot;, &quot;enum&quot;, \n   &quot;auto_increment&quot; and &quot;timestamp&quot;.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A mysql_field_flags() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}$flags&nbsp;=&nbsp;mysql_field_flags($result,&nbsp;0);echo&nbsp;$flags;print_r(explode('&nbsp;',&nbsp;$flags));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nnot_null primary_key auto_increment\nArray\n(\n    [0] =&gt; not_null\n    [1] =&gt; primary_key\n    [2] =&gt; auto_increment\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_fieldflags()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_field_type() - Get the type of the specified field in a result\n    mysql_field_len() - Returns the length of the specified field\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-seek.php","title":"mysql_field_seek","description":"\n \n  mysql_field_seek\n  (PHP 4, PHP 5)mysql_field_seek &mdash; Set result pointer to a specified field offset\n\n \n\n \n  Description\n  \n   bool mysql_field_seek\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   Seeks to the specified field offset.  If the next call to\n   mysql_fetch_field() doesn&#039;t include a field\n   offset, the field offset specified in\n   mysql_field_seek() will be returned.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_field() - Get column information from a result and return as an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-table.php","title":"mysql_field_table","description":"\n \n  mysql_field_table\n  (PHP 4, PHP 5)mysql_field_table &mdash; Get name of the table the specified field is in\n\n \n\n \n  Description\n  \n   string mysql_field_table\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   Returns the name of the table that the specified field is in.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The name of the table on success.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A mysql_field_table() example\n    \n\n&lt;?php$query&nbsp;=&nbsp;\"SELECT&nbsp;account.*,&nbsp;country.*&nbsp;FROM&nbsp;account,&nbsp;country&nbsp;WHERE&nbsp;country.name&nbsp;=&nbsp;'Portugal'&nbsp;AND&nbsp;account.country_id&nbsp;=&nbsp;country.id\";\/\/&nbsp;get&nbsp;the&nbsp;result&nbsp;from&nbsp;the&nbsp;DB$result&nbsp;=&nbsp;mysql_query($query);\/\/&nbsp;Lists&nbsp;the&nbsp;table&nbsp;name&nbsp;and&nbsp;then&nbsp;the&nbsp;field&nbsp;namefor&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;mysql_num_fields($result);&nbsp;++$i)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$table&nbsp;=&nbsp;mysql_field_table($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;$field&nbsp;=&nbsp;mysql_field_name($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&nbsp;\"$table:&nbsp;$field\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_fieldtable()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_list_tables() - List tables in a MySQL database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-name.php","title":"mysql_field_name","description":"\n \n  mysql_field_name\n  (PHP 4, PHP 5)mysql_field_name &mdash; Get the name of the specified field in a result\n\n \n\n \n  Description\n  \n   string mysql_field_name\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   mysql_field_name() returns the name of the\n   specified field index. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The name of the specified field index on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_field_name() example\n    \n\n&lt;?php\/*&nbsp;The&nbsp;users&nbsp;table&nbsp;consists&nbsp;of&nbsp;three&nbsp;fields:&nbsp;*&nbsp;&nbsp;&nbsp;user_id&nbsp;*&nbsp;&nbsp;&nbsp;username&nbsp;*&nbsp;&nbsp;&nbsp;password.&nbsp;*\/$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;MySQL&nbsp;server:&nbsp;'&nbsp;.&nbsp;mysql_error());}$dbname&nbsp;=&nbsp;'mydb';$db_selected&nbsp;=&nbsp;mysql_select_db($dbname,&nbsp;$link);if&nbsp;(!$db_selected)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"Could&nbsp;not&nbsp;set&nbsp;$dbname:&nbsp;\"&nbsp;.&nbsp;mysql_error());}$res&nbsp;=&nbsp;mysql_query('select&nbsp;*&nbsp;from&nbsp;users',&nbsp;$link);echo&nbsp;mysql_field_name($res,&nbsp;0)&nbsp;.&nbsp;\"\\n\";echo&nbsp;mysql_field_name($res,&nbsp;2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nuser_id\npassword\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: Field names returned by this function\nare case-sensitive.\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_fieldname()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_field_type() - Get the type of the specified field in a result\n    mysql_field_len() - Returns the length of the specified field\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-client-info.php","title":"mysql_get_client_info","description":"\n \n  mysql_get_client_info\n  (PHP 4 &gt;= 4.0.5, PHP 5)mysql_get_client_info &mdash; Get MySQL client info\n\n \n\n \n  Description\n  \n   string mysql_get_client_info\n    ( void\n   )\n\n  \n   mysql_get_client_info() returns a string that\n   represents the client library version.\n  \n \n\n\n \n  Return Values\n  \n   The MySQL client version.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 mysql_get_client_info() example\n    \n\n&lt;?phpprintf(\"MySQL&nbsp;client&nbsp;info:&nbsp;%s\\n\",&nbsp;mysql_get_client_info());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMySQL client info: 3.23.39\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_get_host_info() - Get MySQL host info\n    mysql_get_proto_info() - Get MySQL protocol info\n    mysql_get_server_info() - Get MySQL server info\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-free-result.php","title":"mysql_free_result","description":"\n \n  mysql_free_result\n  (PHP 4, PHP 5)mysql_free_result &mdash; Free result memory\n\n \n\n \n  Description\n  \n   bool mysql_free_result\n    ( resource $result\n   )\n\n  \n   mysql_free_result() will free all memory\n   associated with the result identifier result.\n  \n  \n   mysql_free_result() only needs to be called if\n   you are concerned about how much memory is being used for queries\n   that return large result sets.  All associated result memory is\n   automatically freed at the end of the script&#039;s execution.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n  \n   If a non-resource is used for the result, an\n   error of level E_WARNING will be emitted.  It&#039;s worth noting that\n   mysql_query() only returns a resource\n   for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.\n  \n \n\n \n  \n  Examples\n  \n   \n    Example #1 A mysql_free_result() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/*&nbsp;Use&nbsp;the&nbsp;result,&nbsp;assuming&nbsp;we're&nbsp;done&nbsp;with&nbsp;it&nbsp;afterwards&nbsp;*\/$row&nbsp;=&nbsp;mysql_fetch_assoc($result);\/*&nbsp;Now&nbsp;we&nbsp;free&nbsp;up&nbsp;the&nbsp;result&nbsp;and&nbsp;continue&nbsp;on&nbsp;with&nbsp;our&nbsp;script&nbsp;*\/mysql_free_result($result);echo&nbsp;$row['id'];echo&nbsp;$row['email'];?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_freeresult()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n    is_resource() - Finds whether a variable is a resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-field-type.php","title":"mysql_field_type","description":"\n \n  mysql_field_type\n  (PHP 4, PHP 5)mysql_field_type &mdash; Get the type of the specified field in a result\n\n \n\n \n  Description\n  \n   string mysql_field_type\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   mysql_field_type() is similar to the\n   mysql_field_name() function. The arguments are\n   identical, but the field type is returned instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\nfield_offset\nThe numerical field offset. The\nfield_offset starts at 0. If\nfield_offset does not exist, an error of level\nE_WARNING is also issued.\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The returned field type\n   will be one of &quot;int&quot;, &quot;real&quot;, \n   &quot;string&quot;, &quot;blob&quot;, and others as\n   detailed in the &raquo;&nbsp;MySQL\n   documentation.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_field_type() example\n    \n\n&lt;?phpmysql_connect(\"localhost\",&nbsp;\"mysql_username\",&nbsp;\"mysql_password\");mysql_select_db(\"mysql\");$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;func\");$fields&nbsp;=&nbsp;mysql_num_fields($result);$rows&nbsp;&nbsp;&nbsp;=&nbsp;mysql_num_rows($result);$table&nbsp;&nbsp;=&nbsp;mysql_field_table($result,&nbsp;0);echo&nbsp;\"Your&nbsp;'\"&nbsp;.&nbsp;$table&nbsp;.&nbsp;\"'&nbsp;table&nbsp;has&nbsp;\"&nbsp;.&nbsp;$fields&nbsp;.&nbsp;\"&nbsp;fields&nbsp;and&nbsp;\"&nbsp;.&nbsp;$rows&nbsp;.&nbsp;\"&nbsp;record(s)\\n\";echo&nbsp;\"The&nbsp;table&nbsp;has&nbsp;the&nbsp;following&nbsp;fields:\\n\";for&nbsp;($i=0;&nbsp;$i&nbsp;&lt;&nbsp;$fields;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$type&nbsp;&nbsp;=&nbsp;mysql_field_type($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;$name&nbsp;&nbsp;=&nbsp;mysql_field_name($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;$len&nbsp;&nbsp;&nbsp;=&nbsp;mysql_field_len($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;$flags&nbsp;=&nbsp;mysql_field_flags($result,&nbsp;$i);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$type&nbsp;.&nbsp;\"&nbsp;\"&nbsp;.&nbsp;$name&nbsp;.&nbsp;\"&nbsp;\"&nbsp;.&nbsp;$len&nbsp;.&nbsp;\"&nbsp;\"&nbsp;.&nbsp;$flags&nbsp;.&nbsp;\"\\n\";}mysql_free_result($result);mysql_close();?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nYour &#039;func&#039; table has 4 fields and 1 record(s)\nThe table has the following fields:\nstring name 64 not_null primary_key binary\nint ret 1 not_null\nstring dl 128 not_null\nstring type 9 not_null enum\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_fieldtype()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_field_name() - Get the name of the specified field in a result\n    mysql_field_len() - Returns the length of the specified field\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-host-info.php","title":"mysql_get_host_info","description":"\n \n  mysql_get_host_info\n  (PHP 4 &gt;= 4.0.5, PHP 5)mysql_get_host_info &mdash; Get MySQL host info\n\n \n\n \n  Description\n  \n   string mysql_get_host_info\n    ([ resource $link_identifier\n  ] )\n\n  \n   Describes the type of connection in use for the connection, including the \n   server host name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string describing the type of MySQL connection in use for the \n   connection or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_get_host_info() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}printf(\"MySQL&nbsp;host&nbsp;info:&nbsp;%s\\n\",&nbsp;mysql_get_host_info());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMySQL host info: Localhost via UNIX socket\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_get_client_info() - Get MySQL client info\n    mysql_get_proto_info() - Get MySQL protocol info\n    mysql_get_server_info() - Get MySQL server info\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-proto-info.php","title":"mysql_get_proto_info","description":"\n \n  mysql_get_proto_info\n  (PHP 4 &gt;= 4.0.5, PHP 5)mysql_get_proto_info &mdash; Get MySQL protocol info\n\n \n\n \n  Description\n  \n   int mysql_get_proto_info\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the MySQL protocol.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the MySQL protocol on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_get_proto_info() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}printf(\"MySQL&nbsp;protocol&nbsp;version:&nbsp;%s\\n\",&nbsp;mysql_get_proto_info());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMySQL protocol version: 10\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_get_client_info() - Get MySQL client info\n    mysql_get_host_info() - Get MySQL host info\n    mysql_get_server_info() - Get MySQL server info\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-get-server-info.php","title":"mysql_get_server_info","description":"\n \n  mysql_get_server_info\n  (PHP 4 &gt;= 4.0.5, PHP 5)mysql_get_server_info &mdash; Get MySQL server info\n\n \n\n \n  Description\n  \n   string mysql_get_server_info\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the MySQL server version.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the MySQL server version on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_get_server_info() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}printf(\"MySQL&nbsp;server&nbsp;version:&nbsp;%s\\n\",&nbsp;mysql_get_server_info());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nMySQL server version: 4.0.1-alpha\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_get_client_info() - Get MySQL client info\n    mysql_get_host_info() - Get MySQL host info\n    mysql_get_proto_info() - Get MySQL protocol info\n    phpversion() - Gets the current PHP version\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-info.php","title":"mysql_info","description":"\n \n  mysql_info\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_info &mdash; Get information about the most recent query\n\n \n\n \n  Description\n  \n   string mysql_info\n    ([ resource $link_identifier\n  ] )\n\n  \n   Returns detailed information about the last query.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns information about the statement on success, or FALSE on\n   failure. See the example below for which statements provide information,\n   and what the returned value may look like. Statements that are not listed \n   will return FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Relevant MySQL Statements\n    \n     Statements that return string values. The numbers are only for \n     illustrating purpose; their values will correspond to the query.\n    \n    \nINSERT INTO ... SELECT ...\nString format: Records: 23 Duplicates: 0 Warnings: 0 \nINSERT INTO ... VALUES (...),(...),(...)...\nString format: Records: 37 Duplicates: 0 Warnings: 0 \nLOAD DATA INFILE ...\nString format: Records: 42 Deleted: 0 Skipped: 0 Warnings: 0 \nALTER TABLE\nString format: Records: 60 Duplicates: 0 Warnings: 0 \nUPDATE\nString format: Rows matched: 65 Changed: 65 Warnings: 0\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    mysql_info() returns a non-FALSE value for the \n    INSERT ... VALUES statement only if multiple value lists are \n    specified in the statement.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_affected_rows() - Get number of affected rows in previous MySQL operation\n    mysql_insert_id() - Get the ID generated in the last query\n    mysql_stat() - Get current system status\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-dbs.php","title":"mysql_list_dbs","description":"\n \n  mysql_list_dbs\n  (PHP 4, PHP 5)mysql_list_dbs &mdash; List databases available on a MySQL server\n\n \n\n \n  Description\n  \n   resource mysql_list_dbs\n    ([ resource $link_identifier\n  ] )\n\n  \n   Returns a result pointer containing the databases available from the \n   current mysql daemon.\n  \n\n  Warning\nThis function has been DEPRECATED as of PHP 5.4.0.  Relying\non this function is highly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a result pointer resource on success, or FALSE on\n   failure. Use the mysql_tablename() function to traverse \n   this result pointer, or any function for result tables, such as \n   mysql_fetch_array().\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 mysql_list_dbs() example\n    \n\n&lt;?php\/\/&nbsp;Usage&nbsp;without&nbsp;mysql_list_dbs()$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$res&nbsp;=&nbsp;mysql_query(\"SHOW&nbsp;DATABASES\");while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($res))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['Database']&nbsp;.&nbsp;\"\\n\";}\/\/&nbsp;Deprecated&nbsp;as&nbsp;of&nbsp;PHP&nbsp;5.4.0$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$db_list&nbsp;=&nbsp;mysql_list_dbs($link);while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_object($db_list))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row-&gt;Database&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\ndatabase1\ndatabase2\ndatabase3\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_listdbs()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_db_name() - Retrieves database name from the call to mysql_list_dbs\n    mysql_select_db() - Select a MySQL database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-processes.php","title":"mysql_list_processes","description":"\n \n  mysql_list_processes\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_list_processes &mdash; List MySQL processes\n\n \n\n \n  Description\n  \n   resource mysql_list_processes\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the current MySQL server threads.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A result pointer resource on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_list_processes() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$result&nbsp;=&nbsp;mysql_list_processes($link);while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result)){&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%s&nbsp;%s&nbsp;%s&nbsp;%s&nbsp;%s\\n\",&nbsp;$row[\"Id\"],&nbsp;$row[\"Host\"],&nbsp;$row[\"db\"],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$row[\"Command\"],&nbsp;$row[\"Time\"]);}mysql_free_result($result);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n1 localhost test Processlist 0\n4 localhost mysql sleep 5\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_thread_id() - Return the current thread ID\n    mysql_stat() - Get current system status\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-fields.php","title":"mysql_list_fields","description":"\n \n  mysql_list_fields\n  (PHP 4, PHP 5)mysql_list_fields &mdash; List MySQL table fields\n\n \n\n \n  Description\n  \n   resource mysql_list_fields\n    ( string $database_name\n   , string $table_name\n   [, resource $link_identifier\n  ] )\n\n  \n   Retrieves information about the given table name.\n  \n  \n   This function is deprecated. It is preferable to use \n   mysql_query() to issue an SQL SHOW COLUMNS FROM \n   table [LIKE &#039;name&#039;] statement instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database_name\n     \n\n      \n       The name of the database that&#039;s being queried.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       The name of the table that&#039;s being queried.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A result pointer resource on success, or FALSE on\n   failure.\n  \n  \n   The returned result can be used with mysql_field_flags(),\n   mysql_field_len(),\n   mysql_field_name() and\n   mysql_field_type().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Alternate to deprecated mysql_list_fields()\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SHOW&nbsp;COLUMNS&nbsp;FROM&nbsp;sometable\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}if&nbsp;(mysql_num_rows($result)&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r($row);&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [Field] =&gt; id\n    [Type] =&gt; int(7)\n    [Null] =&gt;  \n    [Key] =&gt; PRI\n    [Default] =&gt;\n    [Extra] =&gt; auto_increment\n)\nArray\n(\n    [Field] =&gt; email\n    [Type] =&gt; varchar(100)\n    [Null] =&gt;\n    [Key] =&gt;\n    [Default] =&gt;\n    [Extra] =&gt;\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_listfields()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_field_flags() - Get the flags associated with the specified field in a result\n    mysql_info() - Get information about the most recent query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-insert-id.php","title":"mysql_insert_id","description":"\n \n  mysql_insert_id\n  (PHP 4, PHP 5)mysql_insert_id &mdash; Get the ID generated in the last query\n\n \n\n \n  Description\n  \n   int mysql_insert_id\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the ID generated for an AUTO_INCREMENT column by the previous \n   query (usually INSERT).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The ID generated for an AUTO_INCREMENT column by the previous \n   query on success, 0 if the previous\n   query does not generate an AUTO_INCREMENT value, or FALSE if\n   no MySQL connection was established.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_insert_id() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}mysql_select_db('mydb');mysql_query(\"INSERT&nbsp;INTO&nbsp;mytable&nbsp;(product)&nbsp;values&nbsp;('kossu')\");printf(\"Last&nbsp;inserted&nbsp;record&nbsp;has&nbsp;id&nbsp;%d\\n\",&nbsp;mysql_insert_id());?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Caution\n   \n    mysql_insert_id() will convert the return type of the\n    native MySQL C API function mysql_insert_id() to a type\n    of long (named int in PHP). If your\n    AUTO_INCREMENT column has a column type of BIGINT (64 bits) the\n    conversion may result in an incorrect value. Instead, use the internal\n    MySQL SQL function LAST_INSERT_ID() in an SQL query. For more information\n    about PHP&#039;s maximum integer values, please see the\n    integer documentation.\n   \n  \n  Note: \n   \n    Because mysql_insert_id() acts on the last performed\n    query, be sure to call mysql_insert_id() immediately \n    after the query that generates the value.\n   \n  \n  Note: \n   \n    The value of the MySQL SQL function\n    LAST_INSERT_ID() always contains the most\n    recently generated AUTO_INCREMENT value, and is not reset\n    between queries.\n  \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n    mysql_info() - Get information about the most recent query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-num-fields.php","title":"mysql_num_fields","description":"\n \n  mysql_num_fields\n  (PHP 4, PHP 5)mysql_num_fields &mdash; Get number of fields in result\n\n \n\n \n  Description\n  \n   int mysql_num_fields\n    ( resource $result\n   )\n\n  \n   Retrieves the number of fields from a query.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of fields in the result set resource on\n   success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 A mysql_num_fields() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;id,email&nbsp;FROM&nbsp;people&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;'42'\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;run&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/*&nbsp;returns&nbsp;2&nbsp;because&nbsp;id,email&nbsp;===&nbsp;two&nbsp;fields&nbsp;*\/echo&nbsp;mysql_num_fields($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_numfields()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_select_db() - Select a MySQL database\n    mysql_query() - Send a MySQL query\n    mysql_fetch_field() - Get column information from a result and return as an object\n    mysql_num_rows() - Get number of rows in result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-list-tables.php","title":"mysql_list_tables","description":"\n \n  mysql_list_tables\n  (PHP 4, PHP 5)mysql_list_tables &mdash; List tables in a MySQL database\n\n \n\n \n  Description\n  \n   resource mysql_list_tables\n    ( string $database\n   [, resource $link_identifier\n  ] )\n\n  \n   Retrieves a list of table names from a MySQL database.\n  \n  \n   This function is deprecated. It is preferable to use \n   mysql_query() to issue an SQL SHOW TABLES \n   [FROM db_name] [LIKE &#039;pattern&#039;] statement instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database\n     \n\n      \n       The name of the database\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A result pointer resource on success or FALSE on failure.\n  \n  \n   Use the mysql_tablename() function to\n   traverse this result pointer, or any function for result tables,\n   such as mysql_fetch_array().\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.7\n       \n        This function became deprecated.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_list_tables() alternative example\n    \n\n&lt;?php$dbname&nbsp;=&nbsp;'mysql_dbname';if&nbsp;(!mysql_connect('mysql_host',&nbsp;'mysql_user',&nbsp;'mysql_password'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;connect&nbsp;to&nbsp;mysql';&nbsp;&nbsp;&nbsp;&nbsp;exit;}$sql&nbsp;=&nbsp;\"SHOW&nbsp;TABLES&nbsp;FROM&nbsp;$dbname\";$result&nbsp;=&nbsp;mysql_query($sql);if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"DB&nbsp;Error,&nbsp;could&nbsp;not&nbsp;list&nbsp;tables\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'MySQL&nbsp;Error:&nbsp;'&nbsp;.&nbsp;mysql_error();&nbsp;&nbsp;&nbsp;&nbsp;exit;}while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_row($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Table:&nbsp;{$row[0]}\\n\";}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_listtables()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_list_dbs() - List databases available on a MySQL server\n    mysql_tablename() - Get table name of field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-ping.php","title":"mysql_ping","description":"\n \n  mysql_ping\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_ping &mdash; Ping a server connection or reconnect if there is no connection\n\n \n\n \n  Description\n  \n   bool mysql_ping\n    ([ resource $link_identifier\n  ] )\n\n  \n   Checks whether or not the connection to\n   the server is working. If it has gone down, an automatic reconnection is\n   attempted. This function can be used by scripts that remain idle for a\n   long while, to check whether or not the server has closed the connection\n   and reconnect if necessary.\n  \n  Note: \n   \n    Since MySQL 5.0.13, automatic reconnection feature is disabled.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the connection to the server MySQL server is working, \n   otherwise FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A mysql_ping() example\n    \n\n&lt;?phpset_time_limit(0);$conn&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysqluser',&nbsp;'mypass');$db&nbsp;&nbsp;&nbsp;=&nbsp;mysql_select_db('mydb');\/*&nbsp;Assuming&nbsp;this&nbsp;query&nbsp;will&nbsp;take&nbsp;a&nbsp;long&nbsp;time&nbsp;*\/$result&nbsp;=&nbsp;mysql_query($sql);if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Query&nbsp;#1&nbsp;failed,&nbsp;exiting.';&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/*&nbsp;Make&nbsp;sure&nbsp;the&nbsp;connection&nbsp;is&nbsp;still&nbsp;alive,&nbsp;if&nbsp;not,&nbsp;try&nbsp;to&nbsp;reconnect&nbsp;*\/if&nbsp;(!mysql_ping($conn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Lost&nbsp;connection,&nbsp;exiting&nbsp;after&nbsp;query&nbsp;#1';&nbsp;&nbsp;&nbsp;&nbsp;exit;}mysql_free_result($result);\/*&nbsp;So&nbsp;the&nbsp;connection&nbsp;is&nbsp;still&nbsp;alive,&nbsp;let's&nbsp;run&nbsp;another&nbsp;query&nbsp;*\/$result2&nbsp;=&nbsp;mysql_query($sql2);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_thread_id() - Return the current thread ID\n    mysql_list_processes() - List MySQL processes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-num-rows.php","title":"mysql_num_rows","description":"\n \n  mysql_num_rows\n  (PHP 4, PHP 5)mysql_num_rows &mdash; Get number of rows in result\n\n \n\n \n  Description\n  \n   int mysql_num_rows\n    ( resource $result\n   )\n\n  \n   Retrieves the number of rows from a result set. This command is only valid \n   for statements like SELECT or SHOW that return an actual result set. \n   To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or \n   DELETE query, use mysql_affected_rows().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of rows in a result set on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_num_rows() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\");mysql_select_db(\"database\",&nbsp;$link);$result&nbsp;=&nbsp;mysql_query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;table1\",&nbsp;$link);$num_rows&nbsp;=&nbsp;mysql_num_rows($result);echo&nbsp;\"$num_rows&nbsp;Rows\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If you use mysql_unbuffered_query(), \n    mysql_num_rows() will not return the \n    correct value until all the rows in the result set have been \n    retrieved.\n   \n  \n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_numrows()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_affected_rows() - Get number of affected rows in previous MySQL operation\n    mysql_connect() - Open a connection to a MySQL Server\n    mysql_data_seek() - Move internal result pointer\n    mysql_select_db() - Select a MySQL database\n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-pconnect.php","title":"mysql_pconnect","description":"\n \n  mysql_pconnect\n  (PHP 4, PHP 5)mysql_pconnect &mdash; Open a persistent connection to a MySQL server\n\n \n\n \n  Description\n  \n   resource mysql_pconnect\n    ([ string $server = ini_get(&quot;mysql.default_host&quot;)\n   [, string $username = ini_get(&quot;mysql.default_user&quot;)\n   [, string $password = ini_get(&quot;mysql.default_password&quot;)\n   [, int $client_flags\n  ]]]] )\n\n  \n  \n   Establishes a persistent connection to a MySQL server.\n  \n  \n  \n   mysql_pconnect() acts very much like\n   mysql_connect() with two major differences.\n  \n  \n   First, when connecting, the function would first try to find a\n   (persistent) link that&#039;s already open with the same host,\n   username and password.  If one is found, an identifier for it\n   will be returned instead of opening a new connection.\n  \n  \n   Second, the connection to the SQL server will not be closed when\n   the execution of the script ends.  Instead, the link will remain\n   open for future use (mysql_close() will not\n   close links established by mysql_pconnect()).\n  \n  \n   This type of link is therefore called &#039;persistent&#039;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     server\n     \n\n      \n       The MySQL server. It can also include a port number. e.g. \n       &quot;hostname:port&quot; or a path to a local socket e.g. &quot;:\/path\/to\/socket&quot; for \n       the localhost.\n      \n      \n       If the PHP directive \n       mysql.default_host is undefined (default), then the default \n       value is &#039;localhost:3306&#039;\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       The username. Default value is the name of the user that owns the\n       server process.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password. Default value is an empty password.\n      \n     \n\n    \n\n    \n\n     client_flags\n     \n\n      \n       The client_flags parameter can be a combination \n       of the following constants:\n       128 (enable LOAD DATA LOCAL handling),\n       MYSQL_CLIENT_SSL, \n       MYSQL_CLIENT_COMPRESS, \n       MYSQL_CLIENT_IGNORE_SPACE or\n       MYSQL_CLIENT_INTERACTIVE.\n      \n     \n\n    \n \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a MySQL persistent link identifier on success, or FALSE on \n   failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        Added the client_flags parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Note, that these kind of links only work if you are using\n    a module version of PHP. See the\n    Persistent\n    Database Connections section for more information.\n   \n  \n  Warning\n   \n    Using persistent connections can require a bit of tuning of your Apache\n    and MySQL configurations to ensure that you do not exceed the number of\n    connections allowed by MySQL.\n   \n  \n  Note: \n   \n    You can suppress the error message on failure by prepending \n    a @\n    to the function name.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_connect() - Open a connection to a MySQL Server\n    Persistent\n    Database Connections\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-result.php","title":"mysql_result","description":"\n \n  mysql_result\n  (PHP 4, PHP 5)mysql_result &mdash; Get result data\n\n \n\n \n  Description\n  \n   string mysql_result\n    ( resource $result\n   , int $row\n   [, mixed $field = 0\n  ] )\n\n  \n   Retrieves the contents of one cell from a MySQL result set.\n  \n  \n   When working on large result sets, you should consider using one\n   of the functions that fetch an entire row (specified below).  As\n   these functions return the contents of multiple cells in one\n   function call, they&#039;re MUCH quicker than\n   mysql_result().  Also, note that specifying a\n   numeric offset for the field argument is much quicker than\n   specifying a fieldname or tablename.fieldname argument.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nresult\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n\n    \n\n     row\n     \n\n      \n       The row number from the result that&#039;s being retrieved. Row numbers \n       start at 0.\n      \n     \n\n    \n\n    \n\n     field\n     \n\n      \n       The name or offset of the field being retrieved.\n      \n      \n       It can be the field&#039;s offset, the field&#039;s name, or the field&#039;s table \n       dot field name (tablename.fieldname). If the column name has been\n       aliased (&#039;select foo as bar from...&#039;), use the alias instead of the \n       column name. If undefined, the first field is retrieved.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The contents of one cell from a MySQL result set on success, or \n   FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_result() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;connect:&nbsp;'&nbsp;.&nbsp;mysql_error());}if&nbsp;(!mysql_select_db('database_name'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;select&nbsp;database:&nbsp;'&nbsp;.&nbsp;mysql_error());}$result&nbsp;=&nbsp;mysql_query('SELECT&nbsp;name&nbsp;FROM&nbsp;work.employee');if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Could&nbsp;not&nbsp;query:'&nbsp;.&nbsp;mysql_error());}echo&nbsp;mysql_result($result,&nbsp;2);&nbsp;\/\/&nbsp;outputs&nbsp;third&nbsp;employee's&nbsp;namemysql_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Calls to mysql_result() should not be mixed\n    with calls to other functions that deal with the result set.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_fetch_array() - Fetch a result row as an associative array, a numeric array, or both\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_fetch_object() - Fetch a result row as an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-real-escape-string.php","title":"mysql_real_escape_string","description":"\n \n  mysql_real_escape_string\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_real_escape_string &mdash; Escapes special characters in a string for use in an SQL statement\n\n \n\n \n  Description\n  \n   string mysql_real_escape_string\n    ( string $unescaped_string\n   [, resource $link_identifier\n  ] )\n\n  \n   Escapes special characters in the unescaped_string, \n   taking into account the current character set of the connection so that it \n   is safe to place it in a mysql_query(). If binary data \n   is to be inserted, this function must be used.\n  \n  \n   mysql_real_escape_string() calls MySQL&#039;s library function\n   mysql_real_escape_string, which prepends backslashes to the following characters:\n   \\x00, \\n,\n   \\r, \\, &#039;,\n   &quot; and \\x1a.\n  \n  \n   This function must always (with few exceptions) be used to make data\n   safe before sending a query to MySQL.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     unescaped_string\n     \n\n      \n       The string that is to be escaped.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the escaped string, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Simple mysql_real_escape_string() example\n    \n\n&lt;?php\/\/&nbsp;Connect$link&nbsp;=&nbsp;mysql_connect('mysql_host',&nbsp;'mysql_user',&nbsp;'mysql_password')&nbsp;&nbsp;&nbsp;&nbsp;OR&nbsp;die(mysql_error());\/\/&nbsp;Query$query&nbsp;=&nbsp;sprintf(\"SELECT&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;user='%s'&nbsp;AND&nbsp;password='%s'\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql_real_escape_string($user),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql_real_escape_string($password));?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 An example SQL Injection Attack\n    \n\n&lt;?php\/\/&nbsp;We&nbsp;didn't&nbsp;check&nbsp;$_POST['password'],&nbsp;it&nbsp;could&nbsp;be&nbsp;anything&nbsp;the&nbsp;user&nbsp;wanted!&nbsp;For&nbsp;example:$_POST['username']&nbsp;=&nbsp;'aidan';$_POST['password']&nbsp;=&nbsp;\"'&nbsp;OR&nbsp;''='\";\/\/&nbsp;Query&nbsp;database&nbsp;to&nbsp;check&nbsp;if&nbsp;there&nbsp;are&nbsp;any&nbsp;matching&nbsp;users$query&nbsp;=&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;users&nbsp;WHERE&nbsp;user='{$_POST['username']}'&nbsp;AND&nbsp;password='{$_POST['password']}'\";mysql_query($query);\/\/&nbsp;This&nbsp;means&nbsp;the&nbsp;query&nbsp;sent&nbsp;to&nbsp;MySQL&nbsp;would&nbsp;be:echo&nbsp;$query;?&gt;\n\n\n    \n\n     \n      The query sent to MySQL:\n     \n    \n\nSELECT * FROM users WHERE user=&#039;aidan&#039; AND password=&#039;&#039; OR &#039;&#039;=&#039;&#039;\n\n    \n    \n     This would allow anyone to log in without a valid password.\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    A MySQL connection is required before using \n    mysql_real_escape_string() otherwise an error of\n    level E_WARNING is generated, and FALSE is \n    returned. If link_identifier isn&#039;t defined, the\n    last MySQL connection is used.\n   \n  \n  Note: \n   \n    If magic_quotes_gpc is enabled,\n    first apply stripslashes() to the data. Using this function\n    on data which has already been escaped will escape the data twice.\n   \n  \n  Note: \n   \n    If this function is not used to escape data, the query is vulnerable to\n    SQL Injection Attacks.\n   \n  \n  Note: \n   \n    mysql_real_escape_string() does not escape\n     and _. These are wildcards in\n    MySQL if combined with LIKE, GRANT,\n    or REVOKE.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_client_encoding() - Returns the name of the character set\n    addslashes() - Quote string with slashes\n    stripslashes() - Un-quotes a quoted string\n    The magic_quotes_gpc directive\n    The magic_quotes_runtime directive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-select-db.php","title":"mysql_select_db","description":"\n \n  mysql_select_db\n  (PHP 4, PHP 5)mysql_select_db &mdash; Select a MySQL database\n\n \n\n \n  Description\n  \n   bool mysql_select_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )\n\n  \n   Sets the current active database on the server that&#039;s associated with the \n   specified link identifier. Every subsequent call to \n   mysql_query() will be made on the active database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database_name\n     \n\n      \n       The name of the database that is to be selected.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_select_db() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');if&nbsp;(!$link)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Not&nbsp;connected&nbsp;:&nbsp;'&nbsp;.&nbsp;mysql_error());}\/\/&nbsp;make&nbsp;foo&nbsp;the&nbsp;current&nbsp;db$db_selected&nbsp;=&nbsp;mysql_select_db('foo',&nbsp;$link);if&nbsp;(!$db_selected)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die&nbsp;('Can\\'t&nbsp;use&nbsp;foo&nbsp;:&nbsp;'&nbsp;.&nbsp;mysql_error());}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For backward compatibility, the following\ndeprecated alias may be used: \n    mysql_selectdb()\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_connect() - Open a connection to a MySQL Server\n    mysql_pconnect() - Open a persistent connection to a MySQL server\n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-set-charset.php","title":"mysql_set_charset","description":"\n \n  mysql_set_charset\n  (PHP 5 &gt;= 5.2.3)mysql_set_charset &mdash; Sets the client character set\n\n \n\n \n  Description\n  \n   bool mysql_set_charset\n    ( string $charset\n   [, resource $link_identifier\n  ] )\n\n  \n   Sets the default character set for the current connection. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     charset\n     \n\n      \n       A valid character set name.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function requires MySQL 5.0.7 or later.\n   \n  \n  Note: \n   \n    This is the preferred way to change the charset. Using\n    mysql_query() to execute SET NAMES ..\n    is not recommended.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    mysql_client_encoding() - Returns the name of the character set\n    &raquo;&nbsp;List of character sets that MySQL supports\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-stat.php","title":"mysql_stat","description":"\n \n  mysql_stat\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_stat &mdash; Get current system status\n\n \n\n \n  Description\n  \n   string mysql_stat\n    ([ resource $link_identifier\n  ] )\n\n  \n   mysql_stat() returns the current server status.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string with the status for uptime, threads, queries, open tables,\n   flush tables and queries per second. For a complete list of other status\n   variables, you have to use the SHOW STATUS SQL command.\n   If link_identifier is invalid, NULL is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_stat() example\n    \n\n&lt;?php$link&nbsp;&nbsp;&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$status&nbsp;=&nbsp;explode('&nbsp;&nbsp;',&nbsp;mysql_stat($link));print_r($status);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; Uptime: 5380\n    [1] =&gt; Threads: 2\n    [2] =&gt; Questions: 1321299\n    [3] =&gt; Slow queries: 0\n    [4] =&gt; Opens: 26\n    [5] =&gt; Flush tables: 1\n    [6] =&gt; Open tables: 17\n    [7] =&gt; Queries per second avg: 245.595\n)\n\n    \n   \n  \n  \n   \n    Example #2 Alternative mysql_stat() example\n    \n\n&lt;?php$link&nbsp;&nbsp;&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$result&nbsp;=&nbsp;mysql_query('SHOW&nbsp;STATUS',&nbsp;$link);while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['Variable_name']&nbsp;.&nbsp;'&nbsp;=&nbsp;'&nbsp;.&nbsp;$row['Value']&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nback_log = 50\nbasedir = \/usr\/local\/\nbdb_cache_size = 8388600\nbdb_log_buffer_size = 32768\nbdb_home = \/var\/db\/mysql\/\nbdb_max_lock = 10000\nbdb_logdir =\nbdb_shared_data = OFF\nbdb_tmpdir = \/var\/tmp\/\n...\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_get_server_info() - Get MySQL server info\n    mysql_list_processes() - List MySQL processes\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-tablename.php","title":"mysql_tablename","description":"\n \n  mysql_tablename\n  (PHP 4, PHP 5)mysql_tablename &mdash; Get table name of field\n\n \n\n \n  Description\n  \n   string mysql_tablename\n    ( resource $result\n   , int $i\n   )\n\n  \n   Retrieves the table name from a result.\n  \n  \n   This function is deprecated. It is preferable to use \n   mysql_query() to issue an SQL SHOW TABLES \n   [FROM db_name] [LIKE &#039;pattern&#039;] statement instead.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       A result pointer resource that&#039;s returned from  \n       mysql_list_tables().\n      \n     \n\n    \n\n    \n\n     i\n     \n\n      \n       The integer index (row\/table number)\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The name of the table on success or FALSE on failure.\n  \n  \n   Use the mysql_tablename() function to\n   traverse this result pointer, or any function for result tables,\n   such as mysql_fetch_array().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_tablename() example\n    \n\n&lt;?phpmysql_connect(\"localhost\",&nbsp;\"mysql_user\",&nbsp;\"mysql_password\");$result&nbsp;=&nbsp;mysql_list_tables(\"mydb\");$num_rows&nbsp;=&nbsp;mysql_num_rows($result);for&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;$num_rows;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Table:&nbsp;\",&nbsp;mysql_tablename($result,&nbsp;$i),&nbsp;\"\\n\";}mysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    The mysql_num_rows() function may be used to\n    determine the number of tables in the result pointer.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_list_tables() - List tables in a MySQL database\n    mysql_field_table() - Get name of the table the specified field is in\n    mysql_db_name() - Retrieves database name from the call to mysql_list_dbs\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-query.php","title":"mysql_query","description":"\n \n  mysql_query\n  (PHP 4, PHP 5)mysql_query &mdash; Send a MySQL query\n\n \n\n \n  Description\n  \n   resource mysql_query\n    ( string $query\n   [, resource $link_identifier\n  ] )\n\n  \n   mysql_query() sends a unique query (multiple queries\n   are not supported) to the currently\n   active database on the server that&#039;s associated with the\n   specified link_identifier.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n       An SQL query\n      \n      \n       The query string should not end with a semicolon.\n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,\n   mysql_query() \n   returns a resource on success, or FALSE on\n   error.\n  \n  \n   For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc,\n   mysql_query() returns TRUE on success\n   or FALSE on error.\n  \n  \n   The returned result resource should be passed to\n   mysql_fetch_array(), and other\n   functions for dealing with result tables, to access the returned data.\n  \n  \n   Use mysql_num_rows() to find out how many rows\n   were returned for a SELECT statement or\n   mysql_affected_rows() to find out how many\n   rows were affected by a DELETE, INSERT, REPLACE, or UPDATE\n   statement.\n  \n  \n   mysql_query() will also fail and return FALSE\n   if the user does not have permission to access the table(s) referenced by\n   the query.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Invalid Query\n    \n     The following query is syntactically invalid, so\n     mysql_query() fails and returns FALSE.\n    \n    \n\n&lt;?php$result&nbsp;=&nbsp;mysql_query('SELECT&nbsp;*&nbsp;WHERE&nbsp;1=1');if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Invalid&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error());}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Valid Query\n    \n     The following query is valid, so mysql_query()\n     returns a resource.\n    \n    \n\n&lt;?php\/\/&nbsp;This&nbsp;could&nbsp;be&nbsp;supplied&nbsp;by&nbsp;a&nbsp;user,&nbsp;for&nbsp;example$firstname&nbsp;=&nbsp;'fred';$lastname&nbsp;&nbsp;=&nbsp;'fox';\/\/&nbsp;Formulate&nbsp;Query\/\/&nbsp;This&nbsp;is&nbsp;the&nbsp;best&nbsp;way&nbsp;to&nbsp;perform&nbsp;an&nbsp;SQL&nbsp;query\/\/&nbsp;For&nbsp;more&nbsp;examples,&nbsp;see&nbsp;mysql_real_escape_string()$query&nbsp;=&nbsp;sprintf(\"SELECT&nbsp;firstname,&nbsp;lastname,&nbsp;address,&nbsp;age&nbsp;FROM&nbsp;friends&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;firstname='%s'&nbsp;AND&nbsp;lastname='%s'\",&nbsp;&nbsp;&nbsp;&nbsp;mysql_real_escape_string($firstname),&nbsp;&nbsp;&nbsp;&nbsp;mysql_real_escape_string($lastname));\/\/&nbsp;Perform&nbsp;Query$result&nbsp;=&nbsp;mysql_query($query);\/\/&nbsp;Check&nbsp;result\/\/&nbsp;This&nbsp;shows&nbsp;the&nbsp;actual&nbsp;query&nbsp;sent&nbsp;to&nbsp;MySQL,&nbsp;and&nbsp;the&nbsp;error.&nbsp;Useful&nbsp;for&nbsp;debugging.if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$message&nbsp;&nbsp;=&nbsp;'Invalid&nbsp;query:&nbsp;'&nbsp;.&nbsp;mysql_error()&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$message&nbsp;.=&nbsp;'Whole&nbsp;query:&nbsp;'&nbsp;.&nbsp;$query;&nbsp;&nbsp;&nbsp;&nbsp;die($message);}\/\/&nbsp;Use&nbsp;result\/\/&nbsp;Attempting&nbsp;to&nbsp;print&nbsp;$result&nbsp;won't&nbsp;allow&nbsp;access&nbsp;to&nbsp;information&nbsp;in&nbsp;the&nbsp;resource\/\/&nbsp;One&nbsp;of&nbsp;the&nbsp;mysql&nbsp;result&nbsp;functions&nbsp;must&nbsp;be&nbsp;used\/\/&nbsp;See&nbsp;also&nbsp;mysql_result(),&nbsp;mysql_fetch_array(),&nbsp;mysql_fetch_row(),&nbsp;etc.while&nbsp;($row&nbsp;=&nbsp;mysql_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['firstname'];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['lastname'];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['address'];&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['age'];}\/\/&nbsp;Free&nbsp;the&nbsp;resources&nbsp;associated&nbsp;with&nbsp;the&nbsp;result&nbsp;set\/\/&nbsp;This&nbsp;is&nbsp;done&nbsp;automatically&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;scriptmysql_free_result($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_connect() - Open a connection to a MySQL Server\n    mysql_error() - Returns the text of the error message from previous MySQL operation\n    mysql_real_escape_string() - Escapes special characters in a string for use in an SQL statement\n    mysql_result() - Get result data\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_unbuffered_query() - Send an SQL query to MySQL without fetching and buffering the result rows.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-thread-id.php","title":"mysql_thread_id","description":"\n \n  mysql_thread_id\n  (PHP 4 &gt;= 4.3.0, PHP 5)mysql_thread_id &mdash; Return the current thread ID\n\n \n\n \n  Description\n  \n   int mysql_thread_id\n    ([ resource $link_identifier\n  ] )\n\n  \n   Retrieves the current thread ID. If the connection is lost, and a reconnect \n   with mysql_ping() is executed, the thread ID will \n   change. This means only retrieve the thread ID when needed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The thread ID on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mysql_thread_id() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_password');$thread_id&nbsp;=&nbsp;mysql_thread_id($link);if&nbsp;($thread_id){&nbsp;&nbsp;&nbsp;&nbsp;printf(\"current&nbsp;thread&nbsp;id&nbsp;is&nbsp;%d\\n\",&nbsp;$thread_id);}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\ncurrent thread id is 73\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_ping() - Ping a server connection or reconnect if there is no connection\n    mysql_list_processes() - List MySQL processes\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysql-unbuffered-query.php","title":"mysql_unbuffered_query","description":"\n \n  mysql_unbuffered_query\n  (PHP 4 &gt;= 4.0.6, PHP 5)mysql_unbuffered_query &mdash; Send an SQL query to MySQL without fetching and buffering the result rows.\n\n \n\n \n  Description\n  \n   resource mysql_unbuffered_query\n    ( string $query\n   [, resource $link_identifier\n  ] )\n\n  \n   mysql_unbuffered_query() sends the SQL query\n   query to MySQL without automatically\n   fetching and buffering the result rows as\n   mysql_query() does.  This saves a considerable\n   amount of memory with SQL queries that produce large result sets,\n   and you can start working on the result set immediately after the\n   first row has been retrieved as you don&#039;t have to wait until the\n   complete SQL query has been performed.  To use\n   mysql_unbuffered_query() while multiple database\n   connections are open, you must specify the optional parameter\n   link_identifier to identify which connection\n   you want to use.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n       The SQL query to execute.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\nlink_identifier\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() was called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   For SELECT, SHOW, DESCRIBE or EXPLAIN statements,\n   mysql_unbuffered_query() \n   returns a resource on success, or FALSE on\n   error.\n  \n  \n   For other type of SQL statements, UPDATE, DELETE, DROP, etc,\n   mysql_unbuffered_query() returns TRUE on success\n   or FALSE on error.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    The benefits of mysql_unbuffered_query() come\n    at a cost: you cannot use mysql_num_rows() and\n    mysql_data_seek() on a result set returned from\n    mysql_unbuffered_query(), until all rows are fetched.\n    You also have to fetch all result rows from an unbuffered SQL query\n    before you can send a new SQL query to MySQL, using the same\n    link_identifier.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysql_query() - Send a MySQL query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.oauth_get_sbs.php","title":"oauth_get_sbs","description":"\n \n  oauth_get_sbs\n  (PECL OAuth &gt;=0.99.7)oauth_get_sbs &mdash; Generate a Signature Base String\n\n \n\n \n  Description\n  \n   string oauth_get_sbs\n    ( string $http_method\n   , string $uri\n   [, array $request_parameters\n  ] )\n\n  \n   Generates a Signature Base String according to pecl\/oauth.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     http_method\n     \n\n      \n       The HTTP method.\n      \n     \n\n    \n\n    \n\n     uri\n     \n\n      \n       URI to encode.\n      \n     \n\n    \n\n    \n\n     request_parameters\n     \n\n      \n       Array of request parameters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a Signature Base String.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.oauth-urlencode.php","title":"oauth_urlencode","description":"\n \n  oauth_urlencode\n  (PECL OAuth &gt;=0.99.2)oauth_urlencode &mdash; Encode a URI to RFC 3986\n\n \n\n \n  Description\n  \n   string oauth_urlencode\n    ( string $uri\n   )\n\n  \n   Encodes a URI to &raquo;&nbsp;RFC 3986.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     uri\n     \n\n      \n       URI to encode.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an &raquo;&nbsp;RFC 3986 encoded string.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-bind-result.php","title":"mysqli_bind_result","description":"\n \n  mysqli_bind_result\n  (PHP 5)mysqli_bind_result &mdash; Alias for mysqli_stmt_bind_result()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_bind_result().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_bind_result() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_bind_result() - Binds variables to a prepared statement for result storage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-bind-param.php","title":"mysqli_bind_param","description":"\n \n  mysqli_bind_param\n  (PHP 5)mysqli_bind_param &mdash; Alias for mysqli_stmt_bind_param()\n\n \n \n \n  Description\n  \n   This function is an alias of mysqli_stmt_bind_param().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_bind_param() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_bind_param() - Binds variables to a prepared statement as parameters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-client-encoding.php","title":"mysqli_client_encoding","description":"\n \n  mysqli_client_encoding\n  (PHP 5)mysqli_client_encoding &mdash; Alias of mysqli_character_set_name()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_character_set_name().\n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_real_escape_string() - Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-connect.php","title":"mysqli_connect","description":"\n \n  mysqli_connect\n  (PHP 5)mysqli_connect &mdash; Alias of  mysqli::__construct()\n\n \n\n \n  Description\n  \n   This function is an alias of:   mysqli::__construct()\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-disable-reads-from-master.php","title":"mysqli_disable_reads_from_mastermysqli::disable_reads_from_master","description":"\n \n  mysqli_disable_reads_from_master\n  mysqli::disable_reads_from_master\n  (PHP 5)mysqli_disable_reads_from_master -- mysqli::disable_reads_from_master &mdash; Disable reads from master\n\n \n\n \n  Description\n  Object oriented style\n  \n   void mysqli::disable_reads_from_master\n    ( void\n   )\n\n  Procedural style\n  \n   bool mysqli_disable_reads_from_master\n    ( mysqli $link\n   )\n\n\n   WarningThis function is\ncurrently not documented; only its argument list is available.\n\n   WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-disable-rpl-parse.php","title":"mysqli_disable_rpl_parse","description":"\n \n  mysqli_disable_rpl_parse\n  (PHP 5)mysqli_disable_rpl_parse &mdash; Disable RPL parse\n\n \n\n \n  Description\n  \n   bool mysqli_disable_rpl_parse\n    ( mysqli $link\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-enable-reads-from-master.php","title":"mysqli_enable_reads_from_master","description":"\n \n  mysqli_enable_reads_from_master\n  (PHP 5)mysqli_enable_reads_from_master &mdash; Enable reads from master\n\n \n\n \n  Description\n  \n   bool mysqli_enable_reads_from_master\n    ( mysqli $link\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-enable-rpl-parse.php","title":"mysqli_enable_rpl_parse","description":"\n \n  mysqli_enable_rpl_parse\n  (PHP 5)mysqli_enable_rpl_parse &mdash; Enable RPL parse\n\n \n\n \n  Description\n  \n   bool mysqli_enable_rpl_parse\n    ( mysqli $link\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-escape-string.php","title":"mysqli_escape_string","description":"\n \n  mysqli_escape_string\n  (PHP 5)mysqli_escape_string &mdash; Alias of mysqli_real_escape_string()\n\n \n\n \n  Description\n  \n   This function is an alias of:  mysqli_real_escape_string().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-execute.php","title":"mysqli_execute","description":"\n \n  mysqli_execute\n  (PHP 5)mysqli_execute &mdash; Alias for mysqli_stmt_execute()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_execute().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_execute() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_execute() - Executes a prepared Query\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-fetch.php","title":"mysqli_fetch","description":"\n \n  mysqli_fetch\n  (PHP 5)mysqli_fetch &mdash; Alias for mysqli_stmt_fetch()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_fetch().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_fetch() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_fetch() - Fetch results from a prepared statement into the bound variables\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-get-metadata.php","title":"mysqli_get_metadata","description":"\n \n  mysqli_get_metadata\n  (PHP 5)mysqli_get_metadata &mdash; Alias for mysqli_stmt_result_metadata()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_result_metadata().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_get_metadata() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_result_metadata() - Returns result set metadata from a prepared statement\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-master-query.php","title":"mysqli_master_query","description":"\n \n  mysqli_master_query\n  (PHP 5)mysqli_master_query &mdash; Enforce execution of a query on the master in a master\/slave setup\n\n \n\n \n  Description\n  \n   bool mysqli_master_query\n    ( mysqli $link\n   , string $query\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-param-count.php","title":"mysqli_param_count","description":"\n \n  mysqli_param_count\n  (PHP 5)mysqli_param_count &mdash; Alias for mysqli_stmt_param_count()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_param_count().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_param_count() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_param_count() - Returns the number of parameter for the given statement\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-parse-enabled.php","title":"mysqli_rpl_parse_enabled","description":"\n \n  mysqli_rpl_parse_enabled\n  (PHP 5)mysqli_rpl_parse_enabled &mdash; Check if RPL parse is enabled\n\n \n\n \n  Description\n  \n   int mysqli_rpl_parse_enabled\n    ( mysqli $link\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-report.php","title":"mysqli_report","description":"\n \n  mysqli_report\n  (PHP 5)mysqli_report &mdash; Enables or disables internal report functions\n\n \n\n \n  Description\n  \n   bool mysqli_report\n    ( int $flags\n   )\n\n  \n   mysqli_report() is a powerful function to improve your queries\n   and code during development and testing phase. Depending on the flags it reports\n   errors from mysqli function calls or queries which don&#039;t use an index (or use a bad\n   index).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       \n        Supported flags\n        \n         \n          \n           Name\n           Description\n          \n\n         \n\n         \n          \n           MYSQLI_REPORT_OFF\n           Turns reporting off\n          \n\n          \n           MYSQLI_REPORT_ERROR\n           Report errors from mysqli function calls\n          \n\n          \n           MYSQLI_REPORT_STRICT\n           \n            Throw mysqli_sql_exception for errors\n            instead of warnings\n           \n          \n\n          \n           MYSQLI_REPORT_INDEX\n           Report if no index or bad index was used in a query\n          \n\n          \n           MYSQLI_REPORT_ALL\n           Set all options (report all)\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.15 &amp; 5.3.4\n       \n        Changing the reporting mode is now be per-request, rather than per-process.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Object oriented style\n    \n\n&lt;?php\/*&nbsp;activate&nbsp;reporting&nbsp;*\/mysqli_report(MYSQLI_REPORT_ALL);$mysqli&nbsp;=&nbsp;new&nbsp;mysqli(\"localhost\",&nbsp;\"my_user\",&nbsp;\"my_password\",&nbsp;\"world\");\/*&nbsp;check&nbsp;connection&nbsp;*\/if&nbsp;(mysqli_connect_errno())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Connect&nbsp;failed:&nbsp;%s\\n\",&nbsp;mysqli_connect_error());&nbsp;&nbsp;&nbsp;&nbsp;exit();}\/*&nbsp;this&nbsp;query&nbsp;should&nbsp;report&nbsp;an&nbsp;error&nbsp;*\/$result&nbsp;=&nbsp;$mysqli-&gt;query(\"SELECT&nbsp;Name&nbsp;FROM&nbsp;Nonexistingtable&nbsp;WHERE&nbsp;population&nbsp;&gt;&nbsp;50000\");\/*&nbsp;this&nbsp;query&nbsp;should&nbsp;report&nbsp;a&nbsp;bad&nbsp;index&nbsp;*\/$result&nbsp;=&nbsp;$mysqli-&gt;query(\"SELECT&nbsp;Name&nbsp;FROM&nbsp;City&nbsp;WHERE&nbsp;population&nbsp;&gt;&nbsp;50000\");$result-&gt;close();$mysqli-&gt;close();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    MySQLi_Driver::$report_mode\n    mysqli_debug() - Performs debugging operations\n    mysqli_dump_debug_info() - Dump debugging information into the log\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-send-long-data.php","title":"mysqli_send_long_data","description":"\n \n  mysqli_send_long_data\n  (PHP 5)mysqli_send_long_data &mdash; Alias for mysqli_stmt_send_long_data()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_stmt_send_long_data().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    mysqli_send_long_data() is deprecated and will be removed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    mysqli_stmt_send_long_data() - Send data in blocks\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-query-type.php","title":"mysqli_rpl_query_typemysqli::rpl_query_type","description":"\n \n  mysqli_rpl_query_type\n  mysqli::rpl_query_type\n  (PHP 5)mysqli_rpl_query_type -- mysqli::rpl_query_type &mdash; Returns RPL query type\n\n \n\n \n  Description\n  Object oriented style\n  \n   \n   \n    int mysqli::rpl_query_type\n     ( string $query\n    )\n\n  \n  Procedural style\n  \n   int mysqli_rpl_query_type\n    ( mysqli $link\n   , string $query\n   )\n\n\n  \n   Returns MYSQLI_RPL_MASTER,\n   MYSQLI_RPL_SLAVE or\n   MYSQLI_RPL_ADMIN depending on a query type.\n   INSERT, UPDATE and similar are\n   master queries, SELECT is\n   slave, and FLUSH,\n   REPAIR and similar are admin.\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-send-query.php","title":"mysqli_send_querymysqli::send_query","description":"\n \n  mysqli_send_query\n  mysqli::send_query\n  (PHP 5)mysqli_send_query -- mysqli::send_query &mdash; Send the query and return\n\n \n\n \n  Description\n  Object oriented style\n  \n   \n   \n    bool mysqli::send_query\n     ( string $query\n    )\n\n  \n  Procedural style\n  \n   bool mysqli_send_query\n    ( mysqli $link\n   , string $query\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-set-opt.php","title":"mysqli_set_opt","description":"\n \n  mysqli_set_opt\n  (PHP 5)mysqli_set_opt &mdash; Alias of mysqli_options()\n\n \n\n \n  Description\n  \n   This function is an alias of mysqli_options().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-rpl-probe.php","title":"mysqli_rpl_probe","description":"\n \n  mysqli_rpl_probe\n  (PHP 5)mysqli_rpl_probe &mdash; RPL probe\n\n \n\n \n  Description\n  \n   bool mysqli_rpl_probe\n    ( mysqli $link\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.mysqli-slave-query.php","title":"mysqli_slave_query","description":"\n \n  mysqli_slave_query\n  (PHP 5)mysqli_slave_query &mdash; Force execution of a query on a slave in a master\/slave setup\n\n \n\n \n  Description\n  \n   bool mysqli_slave_query\n    ( mysqli $link\n   , string $query\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n  WarningThis function has been\nDEPRECATED and REMOVED as of PHP 5.3.0.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-cipher-iv-length.php","title":"openssl_cipher_iv_length","description":"\n \n  openssl_cipher_iv_length\n  (PHP 5 &gt;= PHP 5.3.3)openssl_cipher_iv_length &mdash; Gets the cipher iv length\n\n \n\n \n  Description\n  \n   int openssl_cipher_iv_length\n    ( string $method\n   )\n\n  \n   Gets the cipher iv length.\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    method\n    \n\n     \n      The method.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   Returns the cipher length on success, or FALSE on failure. \n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Emits an E_WARNING level error when the cipher algorithm\n   is unknown.\n  \n \n\n\n \n  Examples\n  \n   Example #1 openssl_cipher_iv_length() example\n   \n\n&lt;?php$method&nbsp;=&nbsp;'AES-128-CBC';$ivlen&nbsp;=&nbsp;openssl_cipher_iv_length($method);echo&nbsp;$ivlen;?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\n16\n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-export-to-file.php","title":"openssl_csr_export_to_file","description":"\n \n  openssl_csr_export_to_file\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_csr_export_to_file &mdash; Exports a CSR to a file\n\n \n \n \n  Description\n  \n   bool openssl_csr_export_to_file\n    ( resource $csr\n   , string $outfilename\n   [, bool $notext = true\n  ] )\n\n  \n   openssl_csr_export_to_file() takes the Certificate\n   Signing Request represented by csr and saves it\n   as ascii-armoured text into the file named by outfilename.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     csr\n     \n\n      \n      \n     \n\n    \n\n    \n\n     outfilename\n     \n\n      \n       Path to the output file.\n      \n     \n\n    \n\n    \n\n     notext\n     \n\n      \n The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE.\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_csr_export() - Exports a CSR as a string\n    openssl_csr_new() - Generates a CSR\n    openssl_csr_sign() - Sign a CSR with another certificate (or itself) and generate a certificate\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-export.php","title":"openssl_csr_export","description":"\n \n  openssl_csr_export\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_csr_export &mdash; Exports a CSR as a string\n\n \n \n \n  Description\n  \n   bool openssl_csr_export\n    ( resource $csr\n   , string &$out\n   [, bool $notext = true\n  ] )\n\n  \n   openssl_csr_export() takes the Certificate Signing\n   Request represented by csr and stores it as\n   ascii-armoured text into out, which is passed by\n   reference.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     csr\n     \n\n      \n      \n     \n\n    \n\n    \n\n     out\n     \n\n      \n      \n     \n\n    \n\n    \n\n     notext\n     \n\n      \n The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE.\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_csr_export_to_file() - Exports a CSR to a file\n    openssl_csr_new() - Generates a CSR\n    openssl_csr_sign() - Sign a CSR with another certificate (or itself) and generate a certificate\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-get-public-key.php","title":"openssl_csr_get_public_key","description":"\n \n  openssl_csr_get_public_key\n  (PHP 5 &gt;= 5.2.0)openssl_csr_get_public_key &mdash; Returns the public key of a CERT\n\n \n\n \n  Description\n  \n   resource openssl_csr_get_public_key\n    ( mixed $csr\n   [, bool $use_shortnames = true\n  ] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-dh-compute-key.php","title":"openssl_dh_compute_key","description":"\n \n  openssl_dh_compute_key\n  (No version information available, might only be in SVN)openssl_dh_compute_key &mdash; Computes shared secret for public value of remote DH key and local DH key\n\n \n\n \n  Description\n  \n   string openssl_dh_compute_key\n    ( string $pub_key\n   , resource $dh_key\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pub_key\n     \n\n      \n       Public key\n      \n     \n\n    \n\n    \n\n     dh_key\n     \n\n      \n       DH key\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns computed key on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-decrypt.php","title":"openssl_decrypt","description":"\n \n  openssl_decrypt\n  (PHP 5 &gt;= 5.3.0)openssl_decrypt &mdash; Decrypts data\n\n \n\n \n  Description\n  \n   string openssl_decrypt\n    ( string $data\n   , string $method\n   , string $password\n   [, bool $raw_input = false\n   [, string $iv = &quot;&quot;\n  ]] )\n\n  \n   Takes a raw or base64 encoded string and decrypts it using a given method and key.\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data.\n      \n     \n\n    \n\n    \n\n     method\n     \n\n      \n       The cipher method.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password.\n      \n     \n\n    \n\n    \n\n     raw_input\n     \n\n      \n       Setting to TRUE will take a raw encoded string,\n       otherwise a base64 string is assumed for the\n       data parameter.\n      \n     \n\n    \n\n    \n\n     iv\n     \n\n      \n       A non-NULL Initialization Vector. \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The decrypted string on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Emits an E_WARNING level error if an unknown cipher algorithm\n   is passed via the method parameter.\n  \n  \n   Emits an E_WARNING level error if an empty value is passed\n   in via the iv parameter.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      Version\n      Description\n     \n\n    \n\n    \n     \n      5.3.3\n      \n       The iv parameter was added.\n      \n     \n\n    \n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    openssl_encrypt() - Encrypts data\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-get-subject.php","title":"openssl_csr_get_subject","description":"\n \n  openssl_csr_get_subject\n  (PHP 5 &gt;= 5.2.0)openssl_csr_get_subject &mdash; Returns the subject of a CERT\n\n \n\n \n  Description\n  \n   array openssl_csr_get_subject\n    ( mixed $csr\n   [, bool $use_shortnames = true\n  ] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-digest.php","title":"openssl_digest","description":"\n \n  openssl_digest\n  (PHP 5 &gt;= 5.3.0)openssl_digest &mdash; Computes a digest\n\n \n\n \n  Description\n  \n   string openssl_digest\n    ( string $data\n   , string $method\n   [, bool $raw_output = false\n  ] )\n\n  \n   Computes a digest hash value for the given data using a given method,\n   and returns a raw or binhex encoded string.\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data.\n      \n     \n\n    \n\n    \n\n     method\n     \n\n      \n       The digest method.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       Setting to TRUE will return as raw output data, otherwise the return\n       value is binhex encoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the digested hash value on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Emits an E_WARNING level error if an unknown signature algorithm\n   is passed via the method parameter.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_get_cipher_methods() - Gets available cipher methods\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-new.php","title":"openssl_csr_new","description":"\n \n  openssl_csr_new\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_csr_new &mdash; Generates a CSR\n\n \n \n \n  Description\n  \n   mixed openssl_csr_new\n    ( array $dn\n   , resource &$privkey\n   [, array $configargs\n   [, array $extraattribs\n  ]] )\n\n  \n   openssl_csr_new() generates a new CSR (Certificate Signing Request)\n   based on the information provided by dn, which represents the\n   Distinguished Name to be used in the certificate.\n  \n  Note: \n \n  You need to have a valid openssl.cnf installed for\n  this function to operate correctly.\n  See the notes under the installation\n  section for more information.\n \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dn\n     \n\n      \n       The Distinguished Name to be used in the certificate.\n      \n     \n\n    \n\n    \n\n     privkey\n     \n\n      \n       privkey should be set to a private key that was\n       previously generated by openssl_pkey_new() (or\n       otherwise obtained from the other openssl_pkey family of functions).\n       The corresponding public portion of the key will be used to sign the\n       CSR.\n      \n     \n\n    \n\n    \n\n     configargs\n     \n\n      \n       By default, the information in your system openssl.conf\n       is used to initialize the request; you can specify a configuration file\n       section by setting the config_section_section key of\n       configargs.  You can also specify an alternative\n       openssl configuration file by setting the value of the\n       config key to the path of the file you want to use.\n       The following keys, if present in configargs\n       behave as their equivalents in the openssl.conf, as\n       listed in the table below.\n       \n        Configuration overrides\n        \n         \n          \n           configargs key\n           type\n           openssl.conf equivalent\n           description\n          \n\n         \n\n         \n          \n           digest_alg\n           string\n           default_md\n           Selects which digest method to use\n          \n\n          \n           x509_extensions\n           string\n           x509_extensions\n           Selects which extensions should be used when creating an x509\n           certificate\n          \n\n          \n           req_extensions\n           string\n           req_extensions\n           Selects which extensions should be used when creating a CSR\n          \n\n          \n           private_key_bits\n           integer\n           default_bits\n           Specifies how many bits should be used to generate a private\n            key\n          \n\n          \n           private_key_type\n           integer\n           none\n           Specifies the type of private key to create.  This can be one\n            of OPENSSL_KEYTYPE_DSA,\n            OPENSSL_KEYTYPE_DH or\n            OPENSSL_KEYTYPE_RSA.\n            The default value is OPENSSL_KEYTYPE_RSA which\n            is currently the only supported key type.\n           \n          \n\n          \n           encrypt_key\n           boolean\n           encrypt_key\n           Should an exported key (with passphrase) be encrypted?\n          \n\n          \n           encrypt_key_cipher\n           integer\n           none\n           \n            One of cipher constants.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     extraattribs\n     \n\n      \n       extraattribs is used to specify additional\n       configuration options for the CSR.  Both dn and\n       extraattribs are associative arrays whose keys are\n       converted to OIDs and applied to the relevant part of the request.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the CSR.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Creating a self-signed-certificate\n    \n\n&lt;?php\/\/&nbsp;Fill&nbsp;in&nbsp;data&nbsp;for&nbsp;the&nbsp;distinguished&nbsp;name&nbsp;to&nbsp;be&nbsp;used&nbsp;in&nbsp;the&nbsp;cert\/\/&nbsp;You&nbsp;must&nbsp;change&nbsp;the&nbsp;values&nbsp;of&nbsp;these&nbsp;keys&nbsp;to&nbsp;match&nbsp;your&nbsp;name&nbsp;and\/\/&nbsp;company,&nbsp;or&nbsp;more&nbsp;precisely,&nbsp;the&nbsp;name&nbsp;and&nbsp;company&nbsp;of&nbsp;the&nbsp;person\/site\/\/&nbsp;that&nbsp;you&nbsp;are&nbsp;generating&nbsp;the&nbsp;certificate&nbsp;for.\/\/&nbsp;For&nbsp;SSL&nbsp;certificates,&nbsp;the&nbsp;commonName&nbsp;is&nbsp;usually&nbsp;the&nbsp;domain&nbsp;name&nbsp;of\/\/&nbsp;that&nbsp;will&nbsp;be&nbsp;using&nbsp;the&nbsp;certificate,&nbsp;but&nbsp;for&nbsp;S\/MIME&nbsp;certificates,\/\/&nbsp;the&nbsp;commonName&nbsp;will&nbsp;be&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;individual&nbsp;who&nbsp;will&nbsp;use&nbsp;the\/\/&nbsp;certificate.$dn&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;\"countryName\"&nbsp;=&gt;&nbsp;\"UK\",&nbsp;&nbsp;&nbsp;&nbsp;\"stateOrProvinceName\"&nbsp;=&gt;&nbsp;\"Somerset\",&nbsp;&nbsp;&nbsp;&nbsp;\"localityName\"&nbsp;=&gt;&nbsp;\"Glastonbury\",&nbsp;&nbsp;&nbsp;&nbsp;\"organizationName\"&nbsp;=&gt;&nbsp;\"The&nbsp;Brain&nbsp;Room&nbsp;Limited\",&nbsp;&nbsp;&nbsp;&nbsp;\"organizationalUnitName\"&nbsp;=&gt;&nbsp;\"PHP&nbsp;Documentation&nbsp;Team\",&nbsp;&nbsp;&nbsp;&nbsp;\"commonName\"&nbsp;=&gt;&nbsp;\"Wez&nbsp;Furlong\",&nbsp;&nbsp;&nbsp;&nbsp;\"emailAddress\"&nbsp;=&gt;&nbsp;\"wez@example.com\");\/\/&nbsp;Generate&nbsp;a&nbsp;new&nbsp;private&nbsp;(and&nbsp;public)&nbsp;key&nbsp;pair$privkey&nbsp;=&nbsp;openssl_pkey_new();\/\/&nbsp;Generate&nbsp;a&nbsp;certificate&nbsp;signing&nbsp;request$csr&nbsp;=&nbsp;openssl_csr_new($dn,&nbsp;$privkey);\/\/&nbsp;You&nbsp;will&nbsp;usually&nbsp;want&nbsp;to&nbsp;create&nbsp;a&nbsp;self-signed&nbsp;certificate&nbsp;at&nbsp;this\/\/&nbsp;point&nbsp;until&nbsp;your&nbsp;CA&nbsp;fulfills&nbsp;your&nbsp;request.\/\/&nbsp;This&nbsp;creates&nbsp;a&nbsp;self-signed&nbsp;cert&nbsp;that&nbsp;is&nbsp;valid&nbsp;for&nbsp;365&nbsp;days$sscert&nbsp;=&nbsp;openssl_csr_sign($csr,&nbsp;null,&nbsp;$privkey,&nbsp;365);\/\/&nbsp;Now&nbsp;you&nbsp;will&nbsp;want&nbsp;to&nbsp;preserve&nbsp;your&nbsp;private&nbsp;key,&nbsp;CSR&nbsp;and&nbsp;self-signed\/\/&nbsp;cert&nbsp;so&nbsp;that&nbsp;they&nbsp;can&nbsp;be&nbsp;installed&nbsp;into&nbsp;your&nbsp;web&nbsp;server,&nbsp;mail&nbsp;server\/\/&nbsp;or&nbsp;mail&nbsp;client&nbsp;(depending&nbsp;on&nbsp;the&nbsp;intended&nbsp;use&nbsp;of&nbsp;the&nbsp;certificate).\/\/&nbsp;This&nbsp;example&nbsp;shows&nbsp;how&nbsp;to&nbsp;get&nbsp;those&nbsp;things&nbsp;into&nbsp;variables,&nbsp;but&nbsp;you\/\/&nbsp;can&nbsp;also&nbsp;store&nbsp;them&nbsp;directly&nbsp;into&nbsp;files.\/\/&nbsp;Typically,&nbsp;you&nbsp;will&nbsp;send&nbsp;the&nbsp;CSR&nbsp;on&nbsp;to&nbsp;your&nbsp;CA&nbsp;who&nbsp;will&nbsp;then&nbsp;issue\/\/&nbsp;you&nbsp;with&nbsp;the&nbsp;\"real\"&nbsp;certificate.openssl_csr_export($csr,&nbsp;$csrout)&nbsp;and&nbsp;var_dump($csrout);openssl_x509_export($sscert,&nbsp;$certout)&nbsp;and&nbsp;var_dump($certout);openssl_pkey_export($privkey,&nbsp;$pkeyout,&nbsp;\"mypassword\")&nbsp;and&nbsp;var_dump($pkeyout);\/\/&nbsp;Show&nbsp;any&nbsp;errors&nbsp;that&nbsp;occurred&nbsp;herewhile&nbsp;(($e&nbsp;=&nbsp;openssl_error_string())&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$e&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-error-string.php","title":"openssl_error_string","description":"\n \n  openssl_error_string\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_error_string &mdash; Return openSSL error message\n\n \n \n \n  Description\n  \n   string openssl_error_string\n    ( void\n   )\n\n  \n   openssl_error_string() returns the last error from the\n   openSSL library.  Error messages are queued, so this function should be\n   called multiple times to collect all of the information. The last error will\n   be the most recent one.\n  \n \n\n\n \n  Return Values\n  \n   Returns an error message string, or FALSE if there are no more error\n   messages to return.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_error_string() example\n    \n\n&lt;?php\/\/&nbsp;lets&nbsp;assume&nbsp;you&nbsp;just&nbsp;called&nbsp;an&nbsp;openssl&nbsp;function&nbsp;that&nbsp;failedwhile&nbsp;($msg&nbsp;=&nbsp;openssl_error_string())&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$msg&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-csr-sign.php","title":"openssl_csr_sign","description":"\n \n  openssl_csr_sign\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_csr_sign &mdash; Sign a CSR with another certificate (or itself) and generate a certificate\n\n \n \n \n  Description\n  \n   resource openssl_csr_sign\n    ( mixed $csr\n   , mixed $cacert\n   , mixed $priv_key\n   , int $days\n   [, array $configargs\n   [, int $serial = 0\n  ]] )\n\n  \n   openssl_csr_sign() generates an x509 certificate\n   resource from the given CSR.\n  \n  Note: \n \n  You need to have a valid openssl.cnf installed for\n  this function to operate correctly.\n  See the notes under the installation\n  section for more information.\n \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     csr\n     \n\n      \n       A CSR previously generated by openssl_csr_new().\n       It can also be the path to a PEM encoded CSR when specified as\n       file:\/\/path\/to\/csr or an exported string generated\n       by openssl_csr_export().\n      \n     \n\n    \n\n    \n\n     cacert\n     \n\n      \n       The generated certificate will be signed by cacert.\n       If cacert is NULL, the generated certificate\n       will be a self-signed certificate.\n      \n     \n\n    \n\n    \n\n     priv_key\n     \n\n      \n       priv_key is the private key that corresponds to\n       cacert.\n      \n     \n\n    \n\n    \n\n     days\n     \n\n      \n       days specifies the length of time for which the\n       generated certificate will be valid, in days.\n      \n     \n\n    \n\n    \n\n     configargs\n     \n\n      \n       You can finetune the CSR signing by configargs.\n       See openssl_csr_new() for more information about\n       configargs.\n      \n     \n\n    \n\n    \n\n     serial\n     \n\n      \n       An optional the serial number of issued certificate. If not specified\n       it will default to 0.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an x509 certificate resource on success, FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        The serial parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_csr_sign() example - signing a\n     CSR (how to implement your own CA)\n    \n\n&lt;?php\/\/&nbsp;Let's&nbsp;assume&nbsp;that&nbsp;this&nbsp;script&nbsp;is&nbsp;set&nbsp;to&nbsp;receive&nbsp;a&nbsp;CSR&nbsp;that&nbsp;has\/\/&nbsp;been&nbsp;pasted&nbsp;into&nbsp;a&nbsp;textarea&nbsp;from&nbsp;another&nbsp;page$csrdata&nbsp;=&nbsp;$_POST[\"CSR\"];\/\/&nbsp;We&nbsp;will&nbsp;sign&nbsp;the&nbsp;request&nbsp;using&nbsp;our&nbsp;own&nbsp;\"certificate&nbsp;authority\"\/\/&nbsp;certificate.&nbsp;&nbsp;You&nbsp;can&nbsp;use&nbsp;any&nbsp;certificate&nbsp;to&nbsp;sign&nbsp;another,&nbsp;but\/\/&nbsp;the&nbsp;process&nbsp;is&nbsp;worthless&nbsp;unless&nbsp;the&nbsp;signing&nbsp;certificate&nbsp;is&nbsp;trusted\/\/&nbsp;by&nbsp;the&nbsp;software\/users&nbsp;that&nbsp;will&nbsp;deal&nbsp;with&nbsp;the&nbsp;newly&nbsp;signed&nbsp;certificate\/\/&nbsp;We&nbsp;need&nbsp;our&nbsp;CA&nbsp;cert&nbsp;and&nbsp;its&nbsp;private&nbsp;key$cacert&nbsp;=&nbsp;\"file:\/\/path\/to\/ca.crt\";$privkey&nbsp;=&nbsp;array(\"file:\/\/path\/to\/ca.key\",&nbsp;\"your_ca_key_passphrase\");$usercert&nbsp;=&nbsp;openssl_csr_sign($csrdata,&nbsp;$cacert,&nbsp;$privkey,&nbsp;365);\/\/&nbsp;Now&nbsp;display&nbsp;the&nbsp;generated&nbsp;certificate&nbsp;so&nbsp;that&nbsp;the&nbsp;user&nbsp;can\/\/&nbsp;copy&nbsp;and&nbsp;paste&nbsp;it&nbsp;into&nbsp;their&nbsp;local&nbsp;configuration&nbsp;(such&nbsp;as&nbsp;a&nbsp;file\/\/&nbsp;to&nbsp;hold&nbsp;the&nbsp;certificate&nbsp;for&nbsp;their&nbsp;SSL&nbsp;server)openssl_x509_export($usercert,&nbsp;$certout);echo&nbsp;$certout;\/\/&nbsp;Show&nbsp;any&nbsp;errors&nbsp;that&nbsp;occurred&nbsp;herewhile&nbsp;(($e&nbsp;=&nbsp;openssl_error_string())&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$e&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-encrypt.php","title":"openssl_encrypt","description":"\n \n  openssl_encrypt\n  (PHP 5 &gt;= 5.3.0)openssl_encrypt &mdash; Encrypts data\n\n \n\n \n  Description\n  \n   string openssl_encrypt\n    ( string $data\n   , string $method\n   , string $password\n   [, bool $raw_output = false\n   [, string $iv = &quot;&quot;\n  ]] )\n\n  \n   Encrypts given data with given method and key, returns a raw\n   or base64 encoded string\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data.\n      \n     \n\n    \n\n    \n\n     method\n     \n\n      \n       The cipher method.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       Setting to TRUE will return as raw output data, otherwise the return\n       value is base64 encoded.\n      \n     \n\n    \n\n    \n\n     iv\n     \n\n      \n       A non-NULL Initialization Vector.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the encrypted string on success or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Emits an E_WARNING level error if an unknown cipher\n   algorithm is passed in via the method parameter.\n  \n  \n   Emits an E_WARNING level error if an empty value is passed\n   in via the iv parameter.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      Version\n      Description\n     \n\n    \n\n    \n     \n      5.3.3\n      \n       The iv parameter was added.\n      \n     \n\n    \n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    openssl_decrypt() - Decrypts data\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-free-key.php","title":"openssl_free_key","description":"\n \n  openssl_free_key\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_free_key &mdash; Free key resource\n\n \n \n \n  Description\n  \n   void openssl_free_key\n    ( resource $key_identifier\n   )\n\n  \n   openssl_free_key() frees the key associated with\n   the specified key_identifier from memory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key_identifier\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-cipher-methods.php","title":"openssl_get_cipher_methods","description":"\n \n  openssl_get_cipher_methods\n  (PHP 5 &gt;= 5.3.0)openssl_get_cipher_methods &mdash; Gets available cipher methods\n\n \n\n \n  Description\n  \n   array openssl_get_cipher_methods\n    ([ bool $aliases = false\n  ] )\n\n  \n   Gets a list of available cipher methods.\n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     aliases\n     \n\n      \n       Set to TRUE if cipher aliases should be included within the\n       returned array.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of available cipher methods.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_get_cipher_methods() example\n    \n     Shows how the available ciphers might look, and also which aliases\n     might be available.\n    \n    \n\n&lt;?php$ciphers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;openssl_get_cipher_methods();$ciphers_and_aliases&nbsp;=&nbsp;openssl_get_cipher_methods(true);$cipher_aliases&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;array_diff($ciphers_and_aliases,&nbsp;$ciphers);print_r($ciphers);print_r($cipher_aliases);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; AES-128-CBC\n    [1] =&gt; AES-128-CFB\n    [2] =&gt; AES-128-CFB1\n    [3] =&gt; AES-128-CFB8\n    [4] =&gt; AES-128-ECB\n    [5] =&gt; AES-128-OFB\n    [6] =&gt; AES-192-CBC\n    [7] =&gt; AES-192-CFB\n    [8] =&gt; AES-192-CFB1\n    [9] =&gt; AES-192-CFB8\n    [10] =&gt; AES-192-ECB\n    [11] =&gt; AES-192-OFB\n    [12] =&gt; AES-256-CBC\n    [13] =&gt; AES-256-CFB\n    [14] =&gt; AES-256-CFB1\n    [15] =&gt; AES-256-CFB8\n    [16] =&gt; AES-256-ECB\n    [17] =&gt; AES-256-OFB\n    [18] =&gt; BF-CBC\n    [19] =&gt; BF-CFB\n    [20] =&gt; BF-ECB\n    [21] =&gt; BF-OFB\n    [22] =&gt; CAST5-CBC\n    [23] =&gt; CAST5-CFB\n    [24] =&gt; CAST5-ECB\n    [25] =&gt; CAST5-OFB\n    [26] =&gt; DES-CBC\n    [27] =&gt; DES-CFB\n    [28] =&gt; DES-CFB1\n    [29] =&gt; DES-CFB8\n    [30] =&gt; DES-ECB\n    [31] =&gt; DES-EDE\n    [32] =&gt; DES-EDE-CBC\n    [33] =&gt; DES-EDE-CFB\n    [34] =&gt; DES-EDE-OFB\n    [35] =&gt; DES-EDE3\n    [36] =&gt; DES-EDE3-CBC\n    [37] =&gt; DES-EDE3-CFB\n    [38] =&gt; DES-EDE3-OFB\n    [39] =&gt; DES-OFB\n    [40] =&gt; DESX-CBC\n    [41] =&gt; IDEA-CBC\n    [42] =&gt; IDEA-CFB\n    [43] =&gt; IDEA-ECB\n    [44] =&gt; IDEA-OFB\n    [45] =&gt; RC2-40-CBC\n    [46] =&gt; RC2-64-CBC\n    [47] =&gt; RC2-CBC\n    [48] =&gt; RC2-CFB\n    [49] =&gt; RC2-ECB\n    [50] =&gt; RC2-OFB\n    [51] =&gt; RC4\n    [52] =&gt; RC4-40\n    [53] =&gt; aes-128-cbc\n    [54] =&gt; aes-128-cfb\n    [55] =&gt; aes-128-cfb1\n    [56] =&gt; aes-128-cfb8\n    [57] =&gt; aes-128-ecb\n    [58] =&gt; aes-128-ofb\n    [59] =&gt; aes-192-cbc\n    [60] =&gt; aes-192-cfb\n    [61] =&gt; aes-192-cfb1\n    [62] =&gt; aes-192-cfb8\n    [63] =&gt; aes-192-ecb\n    [64] =&gt; aes-192-ofb\n    [65] =&gt; aes-256-cbc\n    [66] =&gt; aes-256-cfb\n    [67] =&gt; aes-256-cfb1\n    [68] =&gt; aes-256-cfb8\n    [69] =&gt; aes-256-ecb\n    [70] =&gt; aes-256-ofb\n    [71] =&gt; bf-cbc\n    [72] =&gt; bf-cfb\n    [73] =&gt; bf-ecb\n    [74] =&gt; bf-ofb\n    [75] =&gt; cast5-cbc\n    [76] =&gt; cast5-cfb\n    [77] =&gt; cast5-ecb\n    [78] =&gt; cast5-ofb\n    [79] =&gt; des-cbc\n    [80] =&gt; des-cfb\n    [81] =&gt; des-cfb1\n    [82] =&gt; des-cfb8\n    [83] =&gt; des-ecb\n    [84] =&gt; des-ede\n    [85] =&gt; des-ede-cbc\n    [86] =&gt; des-ede-cfb\n    [87] =&gt; des-ede-ofb\n    [88] =&gt; des-ede3\n    [89] =&gt; des-ede3-cbc\n    [90] =&gt; des-ede3-cfb\n    [91] =&gt; des-ede3-ofb\n    [92] =&gt; des-ofb\n    [93] =&gt; desx-cbc\n    [94] =&gt; idea-cbc\n    [95] =&gt; idea-cfb\n    [96] =&gt; idea-ecb\n    [97] =&gt; idea-ofb\n    [98] =&gt; rc2-40-cbc\n    [99] =&gt; rc2-64-cbc\n    [100] =&gt; rc2-cbc\n    [101] =&gt; rc2-cfb\n    [102] =&gt; rc2-ecb\n    [103] =&gt; rc2-ofb\n    [104] =&gt; rc4\n    [105] =&gt; rc4-40\n)\nArray\n(\n    [18] =&gt; AES128\n    [19] =&gt; AES192\n    [20] =&gt; AES256\n    [21] =&gt; BF\n    [26] =&gt; CAST\n    [27] =&gt; CAST-cbc\n    [32] =&gt; DES\n    [47] =&gt; DES3\n    [48] =&gt; DESX\n    [50] =&gt; IDEA\n    [55] =&gt; RC2\n    [82] =&gt; aes128\n    [83] =&gt; aes192\n    [84] =&gt; aes256\n    [85] =&gt; bf\n    [90] =&gt; blowfish\n    [91] =&gt; cast\n    [92] =&gt; cast-cbc\n    [97] =&gt; des\n    [112] =&gt; des3\n    [113] =&gt; desx\n    [115] =&gt; idea\n    [120] =&gt; rc2\n)\n\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_get_md_methods() - Gets available digest methods\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-privatekey.php","title":"openssl_get_privatekey","description":"\n \n  openssl_get_privatekey\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_get_privatekey &mdash; Alias of openssl_pkey_get_private()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   openssl_pkey_get_private().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-publickey.php","title":"openssl_get_publickey","description":"\n \n  openssl_get_publickey \n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_get_publickey &mdash; Alias of openssl_pkey_get_public()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   openssl_pkey_get_public().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-get-md-methods.php","title":"openssl_get_md_methods","description":"\n \n  openssl_get_md_methods\n  (PHP 5 &gt;= 5.3.0)openssl_get_md_methods &mdash; Gets available digest methods\n\n \n\n \n  Description\n  \n   array openssl_get_md_methods\n    ([ bool $aliases = false\n  ] )\n\n  \n   Gets a list of available digest methods.\n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     aliases\n     \n\n      \n       Set to TRUE if digest aliases should be included within the\n       returned array.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of available digest methods.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_get_md_methods() example\n    \n     Shows how the available digests might look, and also which aliases\n     might be available.\n    \n    \n\n&lt;?php$digests&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;openssl_get_md_methods();$digests_and_aliases&nbsp;=&nbsp;openssl_get_md_methods(true);$digest_aliases&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;array_diff($digests_and_aliases,&nbsp;$digests);print_r($digests);print_r($digest_aliases);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; DSA\n    [1] =&gt; DSA-SHA\n    [2] =&gt; MD2\n    [3] =&gt; MD4\n    [4] =&gt; MD5\n    [5] =&gt; RIPEMD160\n    [6] =&gt; SHA\n    [7] =&gt; SHA1\n    [8] =&gt; SHA224\n    [9] =&gt; SHA256\n    [10] =&gt; SHA384\n    [11] =&gt; SHA512\n    [12] =&gt; dsaEncryption\n    [13] =&gt; dsaWithSHA\n    [14] =&gt; ecdsa-with-SHA1\n    [15] =&gt; md2\n    [16] =&gt; md4\n    [17] =&gt; md5\n    [18] =&gt; ripemd160\n    [19] =&gt; sha\n    [20] =&gt; sha1\n    [21] =&gt; sha224\n    [22] =&gt; sha256\n    [23] =&gt; sha384\n    [24] =&gt; sha512\n)\nArray\n(\n    [2] =&gt; DSA-SHA1\n    [3] =&gt; DSA-SHA1-old\n    [4] =&gt; DSS1\n    [9] =&gt; RSA-MD2\n    [10] =&gt; RSA-MD4\n    [11] =&gt; RSA-MD5\n    [12] =&gt; RSA-RIPEMD160\n    [13] =&gt; RSA-SHA\n    [14] =&gt; RSA-SHA1\n    [15] =&gt; RSA-SHA1-2\n    [16] =&gt; RSA-SHA224\n    [17] =&gt; RSA-SHA256\n    [18] =&gt; RSA-SHA384\n    [19] =&gt; RSA-SHA512\n    [28] =&gt; dsaWithSHA1\n    [29] =&gt; dss1\n    [32] =&gt; md2WithRSAEncryption\n    [34] =&gt; md4WithRSAEncryption\n    [36] =&gt; md5WithRSAEncryption\n    [37] =&gt; ripemd\n    [39] =&gt; ripemd160WithRSA\n    [40] =&gt; rmd160\n    [43] =&gt; sha1WithRSAEncryption\n    [45] =&gt; sha224WithRSAEncryption\n    [47] =&gt; sha256WithRSAEncryption\n    [49] =&gt; sha384WithRSAEncryption\n    [51] =&gt; sha512WithRSAEncryption\n    [52] =&gt; shaWithRSAEncryption\n    [53] =&gt; ssl2-md5\n    [54] =&gt; ssl3-md5\n    [55] =&gt; ssl3-sha1\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_digest() - Computes a digest\n    openssl_get_cipher_methods() - Gets available cipher methods\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-open.php","title":"openssl_open","description":"\n \n  openssl_open\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_open &mdash; Open sealed data\n\n \n \n \n  Description\n  \n   bool openssl_open\n    ( string $sealed_data\n   , string &$open_data\n   , string $env_key\n   , mixed $priv_key_id\n   [, string $method\n  ] )\n\n  \n   openssl_open() opens (decrypts)\n   sealed_data using the private key associated with\n   the key identifier priv_key_id and the envelope key\n   env_key, and fills\n   open_data with the decrypted data.\n   The envelope key is generated when the\n   data are sealed and can only be used by one specific private key. See\n   openssl_seal() for more information.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sealed_data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     open_data\n     \n\n      \n       If the call is successful the opened data is returned in this\n       parameter.\n      \n     \n\n    \n\n    \n\n     env_key\n     \n\n      \n      \n     \n\n    \n\n    \n\n     priv_key_id\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_open() example\n    \n\n&lt;?php\/\/&nbsp;$sealed&nbsp;and&nbsp;$env_key&nbsp;are&nbsp;assumed&nbsp;to&nbsp;contain&nbsp;the&nbsp;sealed&nbsp;data\/\/&nbsp;and&nbsp;our&nbsp;envelope&nbsp;key,&nbsp;both&nbsp;given&nbsp;to&nbsp;us&nbsp;by&nbsp;the&nbsp;sealer.\/\/&nbsp;fetch&nbsp;private&nbsp;key&nbsp;from&nbsp;file&nbsp;and&nbsp;ready&nbsp;it$fp&nbsp;=&nbsp;fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\",&nbsp;\"r\");$priv_key&nbsp;=&nbsp;fread($fp,&nbsp;8192);fclose($fp);$pkeyid&nbsp;=&nbsp;openssl_get_privatekey($priv_key);\/\/&nbsp;decrypt&nbsp;the&nbsp;data&nbsp;and&nbsp;store&nbsp;it&nbsp;in&nbsp;$openif&nbsp;(openssl_open($sealed,&nbsp;$open,&nbsp;$env_key,&nbsp;$pkeyid))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"here&nbsp;is&nbsp;the&nbsp;opened&nbsp;data:&nbsp;\",&nbsp;$open;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"failed&nbsp;to&nbsp;open&nbsp;data\";}\/\/&nbsp;free&nbsp;the&nbsp;private&nbsp;key&nbsp;from&nbsp;memoryopenssl_free_key($pkeyid);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_seal() - Seal (encrypt) data\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-export-to-file.php","title":"openssl_pkcs12_export_to_file","description":"\n \n  openssl_pkcs12_export_to_file\n  (PHP 5 &gt;= 5.2.2)openssl_pkcs12_export_to_file &mdash; Exports a PKCS#12 Compatible Certificate Store File\n\n \n \n \n  Description\n  \n   bool openssl_pkcs12_export_to_file\n    ( mixed $x509\n   , string $filename\n   , mixed $priv_key\n   , string $pass\n   [, array $args\n  ] )\n\n  \n   openssl_pkcs12_export_to_file() stores\n   x509 into a file named by\n   filename in a PKCS#12 file format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n x509\n \n\n  \n   See Key\/Certificate parameters for a list of valid values.\n  \n \n\n\n\n    \n\n     filename\n     \n\n      \n       Path to the output file.\n      \n     \n\n    \n\n    \n\n     priv_key\n     \n\n      \n      Private key component of PKCS#12 file.\n      \n     \n\n    \n\n    \n\n     pass\n     \n\n      \n      Encryption password for unlocking the PKCS#12 file.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-export.php","title":"openssl_pkcs12_export","description":"\n \n  openssl_pkcs12_export\n  (PHP 5 &gt;= 5.2.2)openssl_pkcs12_export &mdash; Exports a PKCS#12 Compatible Certificate Store File to variable.\n\n \n \n \n  Description\n  \n   bool openssl_pkcs12_export\n    ( mixed $x509\n   , string &$out\n   , mixed $priv_key\n   , string $pass\n   [, array $args\n  ] )\n\n  \n   openssl_pkcs12_export() stores\n   x509 into a string named by\n   out in a PKCS#12 file format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n x509\n \n\n  \n   See Key\/Certificate parameters for a list of valid values.\n  \n \n\n\n\n    \n\n     out\n     \n\n      \n       On success, this will hold the PKCS#12.\n      \n     \n\n    \n\n    \n\n     priv_key\n     \n\n      \n      Private key component of PKCS#12 file.\n      \n     \n\n    \n\n    \n\n     pass\n     \n\n      \n      Encryption password for unlocking the PKCS#12 file.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs12-read.php","title":"openssl_pkcs12_read","description":"\n \n  openssl_pkcs12_read\n  (PHP 5 &gt;= 5.2.2)openssl_pkcs12_read &mdash; Parse a PKCS#12 Certificate Store into an array\n\n \n \n \n  Description\n  \n   bool openssl_pkcs12_read\n    ( string $pkcs12\n   , array &$certs\n   , string $pass\n   )\n\n  \n   openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by\n   pkcs12 into a array named\n   certs.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pkcs12\n     \n\n      \n      \n     \n\n    \n\n    \n\n     certs\n     \n\n      \n       On success, this will hold the Certificate Store Data.\n      \n     \n\n    \n\n    \n\n     pass\n     \n\n      \n      Encryption password for unlocking the PKCS#12 file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-decrypt.php","title":"openssl_pkcs7_decrypt","description":"\n \n  openssl_pkcs7_decrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_pkcs7_decrypt &mdash; Decrypts an S\/MIME encrypted message\n\n \n \n \n  Description\n  \n   bool openssl_pkcs7_decrypt\n    ( string $infilename\n   , string $outfilename\n   , mixed $recipcert\n   [, mixed $recipkey\n  ] )\n\n  \n   Decrypts the S\/MIME encrypted message contained in the file specified by\n   infilename using the certificate and its\n   associated private key specified by recipcert and\n   recipkey.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     infilename\n     \n\n      \n      \n     \n\n    \n\n    \n\n     outfilename\n     \n\n      \n       The decrypted message is written to the file specified by\n       outfilename.\n      \n     \n\n    \n\n    \n\n     recipcert\n     \n\n      \n      \n     \n\n    \n\n    \n\n     recipkey\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_pkcs7_decrypt() example\n    \n\n&lt;?php\/\/&nbsp;$cert&nbsp;and&nbsp;$key&nbsp;are&nbsp;assumed&nbsp;to&nbsp;contain&nbsp;your&nbsp;personal&nbsp;certificate&nbsp;and&nbsp;private\/\/&nbsp;key&nbsp;pair,&nbsp;and&nbsp;that&nbsp;you&nbsp;are&nbsp;the&nbsp;recipient&nbsp;of&nbsp;an&nbsp;S\/MIME&nbsp;message$infilename&nbsp;=&nbsp;\"encrypted.msg\";&nbsp;&nbsp;\/\/&nbsp;this&nbsp;file&nbsp;holds&nbsp;your&nbsp;encrypted&nbsp;message$outfilename&nbsp;=&nbsp;\"decrypted.msg\";&nbsp;\/\/&nbsp;make&nbsp;sure&nbsp;you&nbsp;can&nbsp;write&nbsp;to&nbsp;this&nbsp;fileif&nbsp;(openssl_pkcs7_decrypt($infilename,&nbsp;$outfilename,&nbsp;$cert,&nbsp;$key))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"decrypted!\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"failed&nbsp;to&nbsp;decrypt!\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-verify.php","title":"openssl_pkcs7_verify","description":"\n \n  openssl_pkcs7_verify\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_pkcs7_verify &mdash; Verifies the signature of an S\/MIME signed message\n\n \n \n \n  Description\n  \n   mixed openssl_pkcs7_verify\n    ( string $filename\n   , int $flags\n   [, string $outfilename\n   [, array $cainfo\n   [, string $extracerts\n   [, string $content\n  ]]]] )\n\n  \n   openssl_pkcs7_verify() reads the S\/MIME message\n   contained in the given file and examines the digital signature.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the message.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be used to affect how the signature is\n       verified - see PKCS7 constants\n       for more information.\n      \n     \n\n    \n\n    \n\n     outfilename\n     \n\n      \n       If the outfilename is specified, it should be a\n       string holding the name of a file into which the certificates of the\n       persons that signed the messages will be stored in PEM format.\n      \n     \n\n    \n\n    \n\n     cainfo\n     \n\n      \n       If the cainfo is specified, it should hold\n       information about the trusted CA certificates to use in the verification\n       process - see certificate\n       verification for more information about this parameter.\n      \n     \n\n    \n\n    \n\n     extracerts\n     \n\n      \n       If the extracerts is specified, it is the filename\n       of a file containing a bunch of certificates to use as untrusted CAs.\n      \n     \n\n    \n\n    \n\n     content\n     \n\n      \n       You can specify a filename with content that will\n       be filled with the verified data, but with the signature information\n       stripped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the signature is verified, FALSE if it is not correct\n   (the message has been tampered with, or the signing certificate is invalid),\n   or -1 on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The content parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    As specified in RFC 2045, lines may not be longer than 76 characters \n    in the filename parameter.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-export-to-file.php","title":"openssl_pkey_export_to_file","description":"\n \n  openssl_pkey_export_to_file\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_export_to_file &mdash; Gets an exportable representation of a key into a file \n\n \n \n \n  Description\n  \n   bool openssl_pkey_export_to_file\n    ( mixed $key\n   , string $outfilename\n   [, string $passphrase\n   [, array $configargs\n  ]] )\n\n  \n   openssl_pkey_export_to_file() saves an ascii-armoured\n   (PEM encoded) rendition of key into the file named\n   by outfilename.  \n  \n  Note: \n \n  You need to have a valid openssl.cnf installed for\n  this function to operate correctly.\n  See the notes under the installation\n  section for more information.\n \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n      \n     \n\n    \n\n    \n\n     outfilename\n     \n\n      \n       Path to the output file.\n      \n     \n\n    \n\n    \n\n     passphrase\n     \n\n      \n       The key can be optionally protected by a\n       passphrase.\n      \n     \n\n    \n\n    \n\n     configargs\n     \n\n      \n       configargs can be used to fine-tune the export\n       process by specifying and\/or overriding options for the openssl\n       configuration file. See openssl_csr_new() for more\n       information about configargs.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-sign.php","title":"openssl_pkcs7_sign","description":"\n \n  openssl_pkcs7_sign\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_pkcs7_sign &mdash; Sign an S\/MIME message\n\n \n \n \n  Description\n  \n   bool openssl_pkcs7_sign\n    ( string $infilename\n   , string $outfilename\n   , mixed $signcert\n   , mixed $privkey\n   , array $headers\n   [, int $flags = PKCS7_DETACHED\n   [, string $extracerts\n  ]] )\n\n  \n   openssl_pkcs7_sign() takes the contents of the file\n   named infilename and signs them using the\n   certificate and its matching private key specified by\n   signcert and privkey\n   parameters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     infilename\n     \n\n      \n      \n     \n\n    \n\n    \n\n     outfilename\n     \n\n      \n      \n     \n\n    \n\n    \n\n     signcert\n     \n\n      \n      \n     \n\n    \n\n    \n\n     privkey\n     \n\n      \n      \n     \n\n    \n\n    \n\n     headers\n     \n\n      \n       headers is an array of headers that\n       will be prepended to the data after it has been signed (see\n       openssl_pkcs7_encrypt() for more information about\n       the format of this parameter).\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be used to alter the output - see PKCS7 constants.\n      \n     \n\n    \n\n    \n\n     extracerts\n     \n\n      \n       extracerts specifies the name of a file containing\n       a bunch of extra certificates to include in the signature which can for\n       example be used to help the recipient to verify the certificate that you used.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_pkcs7_sign() example\n    \n\n&lt;?php\/\/&nbsp;the&nbsp;message&nbsp;you&nbsp;want&nbsp;to&nbsp;sign&nbsp;so&nbsp;that&nbsp;recipient&nbsp;can&nbsp;be&nbsp;sure&nbsp;it&nbsp;was&nbsp;you&nbsp;that\/\/&nbsp;sent&nbsp;it$data&nbsp;=&nbsp;&lt;&lt;&lt;EODYou&nbsp;have&nbsp;my&nbsp;authorization&nbsp;to&nbsp;spend&nbsp;$10,000&nbsp;on&nbsp;dinner&nbsp;expenses.The&nbsp;CEOEOD;\/\/&nbsp;save&nbsp;message&nbsp;to&nbsp;file$fp&nbsp;=&nbsp;fopen(\"msg.txt\",&nbsp;\"w\");fwrite($fp,&nbsp;$data);fclose($fp);\/\/&nbsp;encrypt&nbsp;itif&nbsp;(openssl_pkcs7_sign(\"msg.txt\",&nbsp;\"signed.txt\",&nbsp;\"mycert.pem\",&nbsp;&nbsp;&nbsp;&nbsp;array(\"file:\/\/mycert.pem\",&nbsp;\"mypassphrase\"),&nbsp;&nbsp;&nbsp;&nbsp;array(\"To\"&nbsp;=&gt;&nbsp;\"joes@example.com\",&nbsp;\/\/&nbsp;keyed&nbsp;syntax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"From:&nbsp;HQ&nbsp;&lt;ceo@example.com&gt;\",&nbsp;\/\/&nbsp;indexed&nbsp;syntax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Subject\"&nbsp;=&gt;&nbsp;\"Eyes&nbsp;only\")&nbsp;&nbsp;&nbsp;&nbsp;))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;message&nbsp;signed&nbsp;-&nbsp;send&nbsp;it!&nbsp;&nbsp;&nbsp;&nbsp;exec(ini_get(\"sendmail_path\")&nbsp;.&nbsp;\"&nbsp;&lt;&nbsp;signed.txt\");}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-free.php","title":"openssl_pkey_free","description":"\n \n  openssl_pkey_free\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_free &mdash; Frees a private key\n\n \n \n \n  Description\n  \n   void openssl_pkey_free\n    ( resource $key\n   )\n\n  \n   This function frees a private key created by\n   openssl_pkey_new().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Resource holding the key.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-details.php","title":"openssl_pkey_get_details","description":"\n \n  openssl_pkey_get_details\n  (PHP 5 &gt;= 5.2.0)openssl_pkey_get_details &mdash; Returns an array with the key details\n\n \n\n \n  Description\n  \n   array openssl_pkey_get_details\n    ( resource $key\n   )\n\n  \n   This function returns the key details (bits, key, type).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Resource holding the key.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with the key details in success or FALSE in failure.\n   Returned array has indexes bits (number of bits),\n   key (string representation of the public key) and\n   type (type of the key which is one of\n   OPENSSL_KEYTYPE_RSA,\n   OPENSSL_KEYTYPE_DSA,\n   OPENSSL_KEYTYPE_DH,\n   OPENSSL_KEYTYPE_EC or -1 meaning unknown).\n  \n  \n   Depending on the key type used, additional details may be returned. Note that \n   some elements may not always be available.\n  \n  \n   \n    \n     OPENSSL_KEYTYPE_RSA, an additional array key named &quot;rsa&quot;, \n     containing the key data is returned.\n    \n     \n      \n       \n        \n         Key\n         Description\n        \n\n       \n\n       \n        \n         &quot;n&quot;\n         &nbsp;\n        \n\n        \n         &quot;e&quot;\n         &nbsp;\n        \n\n        \n         &quot;d&quot;\n         &nbsp;\n        \n\n        \n         &quot;p&quot;\n         &nbsp;\n        \n\n        \n         &quot;q&quot;\n         &nbsp;\n        \n\n        \n         &quot;dmp1&quot;\n         &nbsp;\n        \n\n        \n         &quot;dmq1&quot;\n         &nbsp;\n        \n\n        \n         &quot;iqmp&quot;\n         &nbsp;\n        \n\n       \n      \n     \n\n   \n   \n    \n     OPENSSL_KEYTYPE_DSA, an additional array key named &quot;dsa&quot;, \n     containing the key data is returned.\n    \n     \n      \n       \n        \n         Key\n         Description\n        \n\n       \n\n       \n        \n         &quot;p&quot;\n         &nbsp;\n        \n\n        \n         &quot;q&quot;\n         &nbsp;\n        \n\n        \n         &quot;g&quot;\n         &nbsp;\n        \n\n        \n         &quot;priv_key&quot;\n         &nbsp;\n        \n\n        \n         &quot;pub_key&quot;\n         &nbsp;\n        \n\n       \n      \n     \n\n   \n   \n    \n     OPENSSL_KEYTYPE_DH, an additional array key named &quot;dh&quot;, \n     containing the key data is returned.\n    \n     \n      \n       \n        \n         Key\n         Description\n        \n\n       \n\n       \n        \n         &quot;p&quot;\n         &nbsp;\n        \n\n        \n         &quot;g&quot;\n         &nbsp;\n        \n\n        \n         &quot;priv_key&quot;\n         &nbsp;\n        \n\n        \n         &quot;pub_key&quot;\n         &nbsp;\n        \n\n       \n      \n     \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-export.php","title":"openssl_pkey_export","description":"\n \n  openssl_pkey_export\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_export &mdash; Gets an exportable representation of a key into a string\n\n \n \n \n  Description\n  \n   bool openssl_pkey_export\n    ( mixed $key\n   , string &$out\n   [, string $passphrase\n   [, array $configargs\n  ]] )\n\n  \n   openssl_pkey_export() exports\n   key as a PEM encoded string and stores it into\n   out (which is passed by reference).\n  \n  Note: \n \n  You need to have a valid openssl.cnf installed for\n  this function to operate correctly.\n  See the notes under the installation\n  section for more information.\n \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n      \n     \n\n    \n\n    \n\n     out\n     \n\n      \n      \n     \n\n    \n\n    \n\n     passphrase\n     \n\n      \n       The key is optionally protected by passphrase.\n      \n     \n\n    \n\n    \n\n     configargs\n     \n\n      \n       configargs can be used to fine-tune the export\n       process by specifying and\/or overriding options for the openssl\n       configuration file.  See openssl_csr_new() for more\n       information about configargs.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-private.php","title":"openssl_pkey_get_private","description":"\n \n  openssl_pkey_get_private\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_get_private &mdash; Get a private key\n\n \n \n \n  Description\n  \n   resource openssl_pkey_get_private\n    ( mixed $key\n   [, string $passphrase = &quot;&quot;\n  ] )\n\n  \n   openssl_get_privatekey() parses\n   key and prepares it for use by other functions.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       key can be one of the following:\n       \n        a string having the format\n          file:\/\/path\/to\/file.pem. The named file must\n          contain a PEM encoded certificate\/private key (it may contain both).\n         \n        \n        A PEM formatted private key.\n       \n      \n     \n\n    \n\n    \n\n     passphrase\n     \n\n      \n       The optional parameter passphrase must be used\n       if the specified key is encrypted (protected by a passphrase).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive key resource identifier on success, or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-get-public.php","title":"openssl_pkey_get_public","description":"\n \n  openssl_pkey_get_public\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_get_public &mdash; Extract public key from certificate and prepare it for use\n\n \n \n \n  Description\n  \n   resource openssl_pkey_get_public\n    ( mixed $certificate\n   )\n\n  \n   openssl_get_publickey() extracts the public key from\n   certificate and prepares it for use by other\n   functions.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     certificate\n     \n\n      \n       certificate can be one of the following:\n       \n        an X.509 certificate resource\n        a string having the format\n          file:\/\/path\/to\/file.pem. The named file must\n          contain a PEM encoded certificate\/private key (it may contain both).\n         \n        \n        A PEM formatted private key.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive key resource identifier on success, or FALSE on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkey-new.php","title":"openssl_pkey_new","description":"\n \n  openssl_pkey_new\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_pkey_new &mdash; Generates a new private key \n\n \n \n \n  Description\n  \n   resource openssl_pkey_new\n    ([ array $configargs\n  ] )\n\n  \n   openssl_pkey_new() generates a new private and public\n   key pair.  The public component of the key can be obtained using\n   openssl_pkey_get_public().\n  \n  Note: \n \n  You need to have a valid openssl.cnf installed for\n  this function to operate correctly.\n  See the notes under the installation\n  section for more information.\n \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     configargs\n     \n\n      \n       You can finetune the key generation (such as specifying the number of\n       bits) using configargs.  See\n       openssl_csr_new() for more information about\n       configargs.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource identifier for the pkey on success, or FALSE on\n   error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-private-decrypt.php","title":"openssl_private_decrypt","description":"\n \n  openssl_private_decrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_private_decrypt &mdash; Decrypts data with private key \n\n \n \n \n  Description\n  \n   bool openssl_private_decrypt\n    ( string $data\n   , string &$decrypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )\n\n  \n   openssl_private_decrypt() decrypts\n   data that was previous encrypted via\n   openssl_public_encrypt() and stores the result into\n   decrypted. \n  \n  \n   You can use this function e.g. to decrypt data which were supposed only to\n   you.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     decrypted\n     \n\n      \n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       key must be the private key corresponding that\n       was used to encrypt the data.  \n      \n     \n\n    \n\n    \n\n     padding\n     \n\n      \n       padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_SSLV23_PADDING,\n       OPENSSL_PKCS1_OAEP_PADDING,\n       OPENSSL_NO_PADDING.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_public_encrypt() - Encrypts data with public key\n    openssl_public_decrypt() - Decrypts data with public key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-private-encrypt.php","title":"openssl_private_encrypt","description":"\n \n  openssl_private_encrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_private_encrypt &mdash; Encrypts data with private key \n\n \n \n \n  Description\n  \n   bool openssl_private_encrypt\n    ( string $data\n   , string &$crypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )\n\n  \n   openssl_private_encrypt() encrypts data\n   with private key and stores the result into\n   crypted. Encrypted data can be decrypted via\n   openssl_public_decrypt(). \n  \n  \n   This function can be used e.g. to sign data (or its hash) to prove that it\n   is not written by someone else.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     crypted\n     \n\n      \n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n      \n     \n\n    \n\n    \n\n     padding\n     \n\n      \n       padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_NO_PADDING.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_public_encrypt() - Encrypts data with public key\n    openssl_public_decrypt() - Decrypts data with public key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-pkcs7-encrypt.php","title":"openssl_pkcs7_encrypt","description":"\n \n  openssl_pkcs7_encrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_pkcs7_encrypt &mdash; Encrypt an S\/MIME message\n\n \n \n \n  Description\n  \n   bool openssl_pkcs7_encrypt\n    ( string $infile\n   , string $outfile\n   , mixed $recipcerts\n   , array $headers\n   [, int $flags = 0\n   [, int $cipherid = OPENSSL_CIPHER_RC2_40\n  ]] )\n\n  \n   openssl_pkcs7_encrypt() takes the contents of the\n   file named infile and encrypts them using an RC2\n   40-bit cipher so that they can only be read by the intended recipients\n   specified by recipcerts.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     infile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     outfile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     recipcerts\n     \n\n      \n       Either a lone X.509 certificate, or an array of X.509 certificates.\n      \n     \n\n    \n\n    \n\n     headers\n     \n\n      \n       headers is an array of headers that\n       will be prepended to the data after it has been encrypted.\n      \n      \n       headers can be either an associative array\n       keyed by header name, or an indexed array, where each element contains\n       a single header line.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be used to specify options that affect\n       the encoding process - see PKCS7\n       constants.\n      \n     \n\n    \n\n    \n\n     cipherid\n     \n\n      \n       One of cipher constants.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The cipherid parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_pkcs7_encrypt() example\n    \n\n&lt;?php\/\/&nbsp;the&nbsp;message&nbsp;you&nbsp;want&nbsp;to&nbsp;encrypt&nbsp;and&nbsp;send&nbsp;to&nbsp;your&nbsp;secret&nbsp;agent\/\/&nbsp;in&nbsp;the&nbsp;field,&nbsp;known&nbsp;as&nbsp;nighthawk.&nbsp;&nbsp;You&nbsp;have&nbsp;his&nbsp;certificate\/\/&nbsp;in&nbsp;the&nbsp;file&nbsp;nighthawk.pem$data&nbsp;=&nbsp;&lt;&lt;&lt;EODNighthawk,Top&nbsp;secret,&nbsp;for&nbsp;your&nbsp;eyes&nbsp;only!The&nbsp;enemy&nbsp;is&nbsp;closing&nbsp;in!&nbsp;Meet&nbsp;me&nbsp;at&nbsp;the&nbsp;cafe&nbsp;at&nbsp;8.30amto&nbsp;collect&nbsp;your&nbsp;forged&nbsp;passport!HQEOD;\/\/&nbsp;load&nbsp;key$key&nbsp;=&nbsp;file_get_contents(\"nighthawk.pem\");\/\/&nbsp;save&nbsp;message&nbsp;to&nbsp;file$fp&nbsp;=&nbsp;fopen(\"msg.txt\",&nbsp;\"w\");fwrite($fp,&nbsp;$data);fclose($fp);\/\/&nbsp;encrypt&nbsp;itif&nbsp;(openssl_pkcs7_encrypt(\"msg.txt\",&nbsp;\"enc.txt\",&nbsp;$key,&nbsp;&nbsp;&nbsp;&nbsp;array(\"To\"&nbsp;=&gt;&nbsp;\"nighthawk@example.com\",&nbsp;\/\/&nbsp;keyed&nbsp;syntax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"From:&nbsp;HQ&nbsp;&lt;hq@example.com&gt;\",&nbsp;\/\/&nbsp;indexed&nbsp;syntax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Subject\"&nbsp;=&gt;&nbsp;\"Eyes&nbsp;only\")))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;message&nbsp;encrypted&nbsp;-&nbsp;send&nbsp;it!&nbsp;&nbsp;&nbsp;&nbsp;exec(ini_get(\"sendmail_path\")&nbsp;.&nbsp;\"&nbsp;&lt;&nbsp;enc.txt\");}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-public-decrypt.php","title":"openssl_public_decrypt","description":"\n \n  openssl_public_decrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_public_decrypt &mdash; Decrypts data with public key \n\n \n \n \n  Description\n  \n   bool openssl_public_decrypt\n    ( string $data\n   , string &$decrypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )\n\n  \n   openssl_public_decrypt() decrypts\n   data that was previous encrypted via\n   openssl_private_encrypt() and stores the result into\n   decrypted.  \n  \n  \n   You can use this function e.g. to check if the message was written by the\n   owner of the private key.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     decrypted\n     \n\n      \n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       key must be the public key corresponding that\n       was used to encrypt the data.  \n      \n     \n\n    \n\n    \n\n     padding\n     \n\n      \n       padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_NO_PADDING.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_private_encrypt() - Encrypts data with private key\n    openssl_private_decrypt() - Decrypts data with private key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-random-pseudo-bytes.php","title":"openssl_random_pseudo_bytes","description":"\n \n  openssl_random_pseudo_bytes\n  (PHP 5 &gt;= 5.3.0)openssl_random_pseudo_bytes &mdash; Generate a pseudo-random string of bytes\n\n \n \n \n  Description\n  \n   string openssl_random_pseudo_bytes\n    ( int $length\n   [, bool &$crypto_strong\n  ] )\n\n  \n   Generates a string of pseudo-random bytes, with the number of bytes\n   determined by the length parameter. \n  \n  \n   It also indicates if a cryptographically strong algorithm was used to produce the\n   pseudo-random bytes, and does this via the optional crypto_strong\n   parameter. It&#039;s rare for this to be FALSE, but some systems may be broken or old.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     length\n     \n\n      \n       The length of the desired string of bytes. Must be a positive integer. PHP will\n       try to cast this parameter to a non-null integer to use it. \n      \n     \n\n    \n\n    \n\n     crypto_strong\n     \n\n      \n       If passed into the function, this will hold a boolean value that determines\n       if the algorithm used was &quot;cryptographically strong&quot;, e.g., safe for usage with GPG, \n       passwords, etc. TRUE if it did, otherwise FALSE\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the generated string of bytes on success,  or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 openssl_random_pseudo_bytes() example\n    \n\n&lt;?phpfor&nbsp;($i&nbsp;=&nbsp;-1;&nbsp;$i&nbsp;&lt;=&nbsp;4;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$bytes&nbsp;=&nbsp;openssl_random_pseudo_bytes($i,&nbsp;$cstrong);&nbsp;&nbsp;&nbsp;&nbsp;$hex&nbsp;&nbsp;&nbsp;=&nbsp;bin2hex($bytes);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Lengths:&nbsp;Bytes:&nbsp;$i&nbsp;and&nbsp;Hex:&nbsp;\"&nbsp;.&nbsp;strlen($hex)&nbsp;.&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($hex);&nbsp;&nbsp;&nbsp;&nbsp;var_dump($cstrong);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;PHP_EOL;}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nLengths: Bytes: -1 and Hex: 0\nstring(0) &quot;&quot;\nNULL\n\nLengths: Bytes: 0 and Hex: 0\nstring(0) &quot;&quot;\nNULL\n\nLengths: Bytes: 1 and Hex: 2\nstring(2) &quot;42&quot;\nbool(true)\n\nLengths: Bytes: 2 and Hex: 4\nstring(4) &quot;dc6e&quot;\nbool(true)\n\nLengths: Bytes: 3 and Hex: 6\nstring(6) &quot;288591&quot;\nbool(true)\n\nLengths: Bytes: 4 and Hex: 8\nstring(8) &quot;ab86d144&quot;\nbool(true)\n\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   bin2hex() - Convert binary data into hexadecimal representation\n   crypt() - One-way string hashing\n   mt_rand() - Generate a better random value\n   uniqid() - Generate a unique ID\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-public-encrypt.php","title":"openssl_public_encrypt","description":"\n \n  openssl_public_encrypt\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_public_encrypt &mdash; Encrypts data with public key \n\n \n \n \n  Description\n  \n   bool openssl_public_encrypt\n    ( string $data\n   , string &$crypted\n   , mixed $key\n   [, int $padding = OPENSSL_PKCS1_PADDING\n  ] )\n\n  \n   openssl_public_encrypt() encrypts data\n   with public key and stores the result into\n   crypted. Encrypted data can be decrypted via\n   openssl_private_decrypt(). \n  \n  \n   This function can be used e.g. to encrypt message which can be then read\n   only by owner of the private key. It can be also used to store secure data\n   in database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     crypted\n     \n\n      \n       This will hold the result of the encryption.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       The public key.\n      \n     \n\n    \n\n    \n\n     padding\n     \n\n      \n       padding can be one of\n       OPENSSL_PKCS1_PADDING,\n       OPENSSL_SSLV23_PADDING,\n       OPENSSL_PKCS1_OAEP_PADDING,\n       OPENSSL_NO_PADDING.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    openssl_private_encrypt() - Encrypts data with private key\n    openssl_private_decrypt() - Decrypts data with private key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-seal.php","title":"openssl_seal","description":"\n \n  openssl_seal\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_seal &mdash; Seal (encrypt) data\n\n \n \n \n  Description\n  \n   int openssl_seal\n    ( string $data\n   , string &$sealed_data\n   , array &$env_keys\n   , array $pub_key_ids\n   [, string $method\n  ] )\n\n  \n   openssl_seal() seals (encrypts)\n   data by using RC4 with a randomly generated\n   secret key. The key is encrypted with each of the public keys\n   associated with the identifiers in pub_key_ids\n   and each encrypted key is returned\n   in env_keys. This means that one can send\n   sealed data to multiple recipients (provided one has obtained their\n   public keys). Each recipient must receive both the sealed data and\n   the envelope key that was encrypted with the recipient&#039;s public key.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     sealed_data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     env_keys\n     \n\n      \n      \n     \n\n    \n\n    \n\n     pub_key_ids\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the sealed data on success, or FALSE on error.\n   If successful the sealed data is returned in\n   sealed_data, and the envelope keys in\n   env_keys.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_seal() example\n    \n\n&lt;?php\/\/&nbsp;$data&nbsp;is&nbsp;assumed&nbsp;to&nbsp;contain&nbsp;the&nbsp;data&nbsp;to&nbsp;be&nbsp;sealed\/\/&nbsp;fetch&nbsp;public&nbsp;keys&nbsp;for&nbsp;our&nbsp;recipients,&nbsp;and&nbsp;ready&nbsp;them$fp&nbsp;=&nbsp;fopen(\"\/src\/openssl-0.9.6\/demos\/maurice\/cert.pem\",&nbsp;\"r\");$cert&nbsp;=&nbsp;fread($fp,&nbsp;8192);fclose($fp);$pk1&nbsp;=&nbsp;openssl_get_publickey($cert);\/\/&nbsp;Repeat&nbsp;for&nbsp;second&nbsp;recipient$fp&nbsp;=&nbsp;fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\",&nbsp;\"r\");$cert&nbsp;=&nbsp;fread($fp,&nbsp;8192);fclose($fp);$pk2&nbsp;=&nbsp;openssl_get_publickey($cert);\/\/&nbsp;seal&nbsp;message,&nbsp;only&nbsp;owners&nbsp;of&nbsp;$pk1&nbsp;and&nbsp;$pk2&nbsp;can&nbsp;decrypt&nbsp;$sealed&nbsp;with&nbsp;keys\/\/&nbsp;$ekeys[0]&nbsp;and&nbsp;$ekeys[1]&nbsp;respectively.openssl_seal($data,&nbsp;$sealed,&nbsp;$ekeys,&nbsp;array($pk1,&nbsp;$pk2));\/\/&nbsp;free&nbsp;the&nbsp;keys&nbsp;from&nbsp;memoryopenssl_free_key($pk1);openssl_free_key($pk2);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_open() - Open sealed data\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-check-private-key.php","title":"openssl_x509_check_private_key","description":"\n \n  openssl_x509_check_private_key\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_x509_check_private_key &mdash; Checks if a private key corresponds to a certificate\n\n \n \n \n  Description\n  \n   bool openssl_x509_check_private_key\n    ( mixed $cert\n   , mixed $key\n   )\n\n  \n   Checks whether the given key is the private key\n   that corresponds to cert.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     cert\n     \n\n      \n       The certificate.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       The private key.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if key is the private key that\n   corresponds to cert, or FALSE otherwise.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-verify.php","title":"openssl_verify","description":"\n \n  openssl_verify\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_verify &mdash; Verify signature\n\n \n \n \n  Description\n  \n   int openssl_verify\n    ( string $data\n   , string $signature\n   , mixed $pub_key_id\n   [, int $signature_alg = OPENSSL_ALGO_SHA1\n  ] )\n\n  \n   openssl_verify() verifies that the\n   signature is correct for the specified\n   data using the public key associated with\n   pub_key_id. This must be the public key\n   corresponding to the private key used for signing.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     signature\n     \n\n      \n      \n     \n\n    \n\n    \n\n     pub_key_id\n     \n\n      \n      \n     \n\n    \n\n    \n\n     signature_alg\n     \n\n      \n       For more information see the list of Signature Algorithms.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 1 if the signature is correct, 0 if it is incorrect, and\n   -1 on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        The signature_alg parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_verify() example\n    \n\n&lt;?php\/\/&nbsp;$data&nbsp;and&nbsp;$signature&nbsp;are&nbsp;assumed&nbsp;to&nbsp;contain&nbsp;the&nbsp;data&nbsp;and&nbsp;the&nbsp;signature\/\/&nbsp;fetch&nbsp;public&nbsp;key&nbsp;from&nbsp;certificate&nbsp;and&nbsp;ready&nbsp;it$fp&nbsp;=&nbsp;fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\",&nbsp;\"r\");$cert&nbsp;=&nbsp;fread($fp,&nbsp;8192);fclose($fp);$pubkeyid&nbsp;=&nbsp;openssl_get_publickey($cert);\/\/&nbsp;state&nbsp;whether&nbsp;signature&nbsp;is&nbsp;okay&nbsp;or&nbsp;not$ok&nbsp;=&nbsp;openssl_verify($data,&nbsp;$signature,&nbsp;$pubkeyid);if&nbsp;($ok&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"good\";}&nbsp;elseif&nbsp;($ok&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"bad\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"ugly,&nbsp;error&nbsp;checking&nbsp;signature\";}\/\/&nbsp;free&nbsp;the&nbsp;key&nbsp;from&nbsp;memoryopenssl_free_key($pubkeyid);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_sign() - Generate signature\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-sign.php","title":"openssl_sign","description":"\n \n  openssl_sign\n  (PHP 4 &gt;= 4.0.4, PHP 5)openssl_sign &mdash; Generate signature\n\n \n \n \n  Description\n  \n   bool openssl_sign\n    ( string $data\n   , string &$signature\n   , mixed $priv_key_id\n   [, int $signature_alg = OPENSSL_ALGO_SHA1\n  ] )\n\n  \n   openssl_sign() computes a signature for the\n   specified data by using SHA1 for hashing\n   followed by encryption using the private key associated with\n   priv_key_id. Note that the data itself is\n   not encrypted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n      \n     \n\n    \n\n    \n\n     signature\n     \n\n      \n       If the call was successful the signature is returned in\n       signature.\n      \n     \n\n    \n\n    \n\n     priv_key_id\n     \n\n      \n      \n     \n\n    \n\n    \n\n     signature_alg\n     \n\n      \n       For more information see the list of Signature Algorithms.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The signature_alg parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 openssl_sign() example\n    \n\n&lt;?php\/\/&nbsp;$data&nbsp;is&nbsp;assumed&nbsp;to&nbsp;contain&nbsp;the&nbsp;data&nbsp;to&nbsp;be&nbsp;signed\/\/&nbsp;fetch&nbsp;private&nbsp;key&nbsp;from&nbsp;file&nbsp;and&nbsp;ready&nbsp;it$fp&nbsp;=&nbsp;fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\",&nbsp;\"r\");$priv_key&nbsp;=&nbsp;fread($fp,&nbsp;8192);fclose($fp);$pkeyid&nbsp;=&nbsp;openssl_get_privatekey($priv_key);\/\/&nbsp;compute&nbsp;signatureopenssl_sign($data,&nbsp;$signature,&nbsp;$pkeyid);\/\/&nbsp;free&nbsp;the&nbsp;key&nbsp;from&nbsp;memoryopenssl_free_key($pkeyid);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    openssl_verify() - Verify signature\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-export-to-file.php","title":"openssl_x509_export_to_file","description":"\n \n  openssl_x509_export_to_file\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_x509_export_to_file &mdash; Exports a certificate to file\n\n \n \n \n  Description\n  \n   bool openssl_x509_export_to_file\n    ( mixed $x509\n   , string $outfilename\n   [, bool $notext = TRUE\n  ] )\n\n  \n   openssl_x509_export_to_file() stores\n   x509 into a file named by\n   outfilename in a PEM encoded format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n x509\n \n\n  \n   See Key\/Certificate parameters for a list of valid values.\n  \n \n\n\n\n    \n\n     outfilename\n     \n\n      \n       Path to the output file.\n      \n     \n\n    \n\n    \n\n     notext\n     \n\n      \n The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE.\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-checkpurpose.php","title":"openssl_x509_checkpurpose","description":"\n \n  openssl_x509_checkpurpose\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_x509_checkpurpose &mdash; Verifies if a certificate can be used for a particular purpose\n\n \n \n \n  Description\n  \n   int openssl_x509_checkpurpose\n    ( mixed $x509cert\n   , int $purpose\n   [, array $cainfo = array()\n   [, string $untrustedfile\n  ]] )\n\n  \n   openssl_x509_checkpurpose() examines a certificate to\n   see if it can be used for the specified purpose.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x509cert\n     \n\n      \n       The examined certificate.\n      \n     \n\n    \n\n    \n\n     purpose\n     \n\n      \n       \n        openssl_x509_checkpurpose() purposes\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           X509_PURPOSE_SSL_CLIENT\n           Can the certificate be used for the client side of an SSL\n           connection?\n          \n\n          \n           X509_PURPOSE_SSL_SERVER\n           Can the certificate be used for the server side of an SSL\n           connection?\n          \n\n          \n           X509_PURPOSE_NS_SSL_SERVER\n           Can the cert be used for Netscape SSL server?\n          \n\n          \n           X509_PURPOSE_SMIME_SIGN\n           Can the cert be used to sign S\/MIME email?\n          \n\n          \n           X509_PURPOSE_SMIME_ENCRYPT\n           Can the cert be used to encrypt S\/MIME email?\n          \n\n          \n           X509_PURPOSE_CRL_SIGN\n           Can the cert be used to sign a certificate revocation list\n           (CRL)?\n          \n\n          \n           X509_PURPOSE_ANY\n           Can the cert be used for Any\/All purposes?\n          \n\n         \n        \n       \n\n       These options are not bitfields - you may specify one only!\n      \n     \n\n    \n\n    \n\n     cainfo\n     \n\n      \n       cainfo should be an array of trusted CA files\/dirs\n       as described in Certificate\n       Verification.\n      \n     \n\n    \n\n    \n\n     untrustedfile\n     \n\n      \n       If specified, this should be the name of a PEM encoded file holding\n       certificates that can be used to help verify the certificate, although\n       no trust is placed in the certificates that come from that file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the certificate can be used for the intended purpose,\n   FALSE if it cannot, or -1 on error.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-export.php","title":"openssl_x509_export","description":"\n \n  openssl_x509_export\n  (PHP 4 &gt;= 4.2.0, PHP 5)openssl_x509_export &mdash; Exports a certificate as a string\n\n \n \n \n  Description\n  \n   bool openssl_x509_export\n    ( mixed $x509\n   , string &$output\n   [, bool $notext = TRUE\n  ] )\n\n  \n   openssl_x509_export() stores\n   x509 into a string named by\n   output in a PEM encoded format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n x509\n \n\n  \n   See Key\/Certificate parameters for a list of valid values.\n  \n \n\n\n\n    \n\n     output\n     \n\n      \n       On success, this will hold the PEM.\n      \n     \n\n    \n\n    \n\n     notext\n     \n\n      \n The optional parameter notext affects\n the verbosity of the output; if it is FALSE, then additional human-readable\n information is included in the output. The default value of\n notext is TRUE.\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-free.php","title":"openssl_x509_free","description":"\n \n  openssl_x509_free\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_x509_free &mdash; Free certificate resource\n\n \n \n \n  Description\n  \n   void openssl_x509_free\n    ( resource $x509cert\n   )\n\n  \n   openssl_x509_free() frees the certificate associated\n   with the specified x509cert resource from memory.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x509cert\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-parse.php","title":"openssl_x509_parse","description":"\n \n  openssl_x509_parse\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_x509_parse &mdash; Parse an X509 certificate and return the information as an array\n\n \n \n \n  Description\n  \n   array openssl_x509_parse\n    ( mixed $x509cert\n   [, bool $shortnames = true\n  ] )\n\n  \n   openssl_x509_parse() returns information about the\n   supplied x509cert, including fields such as subject\n   name, issuer name, purposes, valid from and valid to dates etc.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x509cert\n     \n\n      \n      \n     \n\n    \n\n    \n\n     shortnames\n     \n\n      \n       shortnames controls how the data is indexed in the\n       array - if shortnames is TRUE (the default) then\n       fields will be indexed with the short name form, otherwise, the long name\n       form will be used - e.g.: CN is the shortname form of commonName.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The structure of the returned data is (deliberately) not\n   yet documented, as it is still subject to change.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openssl-x509-read.php","title":"openssl_x509_read","description":"\n \n  openssl_x509_read\n  (PHP 4 &gt;= 4.0.6, PHP 5)openssl_x509_read &mdash; Parse an X.509 certificate and return a resource identifier for\n  it\n\n \n \n \n  Description\n  \n   resource openssl_x509_read\n    ( mixed $x509certdata\n   )\n\n  \n   openssl_x509_read() parses the certificate supplied by\n   x509certdata and returns a resource identifier for\n   it.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x509certdata\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource identifier on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-clean.php","title":"ob_clean","description":"\n \n  ob_clean\n  (PHP 4 &gt;= 4.2.0, PHP 5)ob_clean &mdash; Clean (erase) the output buffer\n\n \n \n \n  Description\n  \n   void ob_clean\n    ( void\n   )\n\n  \n   This function discards the contents of the output buffer.\n  \n  \n   This function does not destroy the output buffer like\n   ob_end_clean() does.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    ob_flush() - Flush (send) the output buffer\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-end-flush.php","title":"ob_end_flush","description":"\n \n  ob_end_flush\n  (PHP 4, PHP 5)ob_end_flush &mdash; Flush (send) the output buffer and turn off output buffering\n\n \n \n \n  Description\n  \n   bool ob_end_flush\n    ( void\n   )\n\n  \n   This function will send the contents of the topmost output buffer (if\n   any) and turn this output buffer off.  If you want to further\n   process the buffer&#039;s contents you have to call\n   ob_get_contents() before\n   ob_end_flush() as the buffer contents are\n   discarded after ob_end_flush() is called.\n  \n  Note: \n   \n    This function is similar to ob_get_flush(), except\n    that ob_get_flush() returns the buffer as a string.\n   \n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the\n   function without an active buffer or that for some reason a buffer could\n   not be deleted (possible for special buffer).\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   If the function fails it generates an E_NOTICE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The boolean return value was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ob_end_flush() example\n    \n     The following example shows an easy way to flush and end all output\n     buffers:\n    \n    \n\n&lt;?php&nbsp;&nbsp;while&nbsp;(@ob_end_flush());?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_get_contents() - Return the contents of the output buffer\n    ob_get_flush() - Flush the output buffer, return it as a string and turn off output buffering\n    ob_flush() - Flush (send) the output buffer\n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.flush.php","title":"flush","description":"\n \n  flush\n  (PHP 4, PHP 5)flush &mdash; Flush the output buffer\n\n \n \n \n  Description\n  \n   void flush\n    ( void\n   )\n\n  \n   Flushes the write buffers of PHP and whatever backend PHP is using (CGI,\n   a web server, etc).  This attempts to push current output all the way to\n   the browser with a few caveats.\n  \n  \n   flush() may not be able to override the buffering scheme\n   of your web server and it has no effect on any client-side buffering in the\n   browser.  It also doesn&#039;t affect PHP&#039;s userspace output buffering mechanism.\n   This means you will have to call both ob_flush() and\n   flush() to flush the ob output buffers if you are using\n   those.\n  \n  \n   Several servers, especially on Win32, will still buffer the output from\n   your script until it terminates before transmitting the results to the\n   browser.\n  \n  \n   Server modules for Apache like mod_gzip may do buffering of their own that\n   will cause flush() to not result in data being sent\n   immediately to the client.\n  \n  \n   Even the browser may buffer its input before displaying it. Netscape, for\n   example, buffers text until it receives an end-of-line or the beginning of\n   a tag, and it won&#039;t render tables until the &lt;\/table&gt; tag of the\n   outermost table is seen.\n  \n  \n   Some versions of Microsoft Internet Explorer will only start to display\n   the page after they have received 256 bytes of output, so you may need to\n   send extra whitespace before flushing to get those browsers to display the\n   page.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-end-clean.php","title":"ob_end_clean","description":"\n \n  ob_end_clean\n  (PHP 4, PHP 5)ob_end_clean &mdash; Clean (erase) the output buffer and turn off output buffering\n\n \n \n \n  Description\n  \n   bool ob_end_clean\n    ( void\n   )\n\n  \n   This function discards the contents of the topmost output buffer and turns\n   off this output buffering. If you want to further process the buffer&#039;s\n   contents you have to call ob_get_contents() before\n   ob_end_clean() as the buffer contents are discarded\n   when ob_end_clean() is called.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the\n   function without an active buffer or that for some reason a buffer could\n   not be deleted (possible for special buffer).\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   If the function fails it generates an E_NOTICE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The boolean return value was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   The following example shows an easy way to get rid of all output buffers:\n  \n  \n   \n    Example #1 ob_end_clean() example\n    \n\n&lt;?phpob_start();echo&nbsp;'Text&nbsp;that&nbsp;won\\'t&nbsp;get&nbsp;displayed.';ob_end_clean();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_get_contents() - Return the contents of the output buffer\n    ob_flush() - Flush (send) the output buffer\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-clean.php","title":"ob_get_clean","description":"\n \n  ob_get_clean\n  (PHP 4 &gt;= 4.3.0, PHP 5)ob_get_clean &mdash; Get current buffer contents and delete current output buffer\n\n \n \n \n  Description\n  \n   string ob_get_clean\n    ( void\n   )\n\n  \n   Gets the current buffer contents and delete current output buffer.\n  \n  \n   ob_get_clean() essentially executes both\n   ob_get_contents() and\n   ob_end_clean().\n  \n \n\n\n \n  Return Values\n  \n   Returns the contents of the output buffer and end output buffering.\n   If output buffering isn&#039;t active then FALSE is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple ob_get_clean() example\n    \n\n&lt;?phpob_start();echo&nbsp;\"Hello&nbsp;World\";$out&nbsp;=&nbsp;ob_get_clean();$out&nbsp;=&nbsp;strtolower($out);var_dump($out);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n\nstring(11) &quot;hello world&quot;\n\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_get_contents() - Return the contents of the output buffer\n    ob_start() - Turn on output buffering\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-flush.php","title":"ob_flush","description":"\n \n  ob_flush\n  (PHP 4 &gt;= 4.2.0, PHP 5)ob_flush &mdash; Flush (send) the output buffer\n\n \n \n \n  Description\n  \n   void ob_flush\n    ( void\n   )\n\n  \n   This function will send the contents of the output buffer (if any). If you\n   want to further process the buffer&#039;s contents you have to call\n   ob_get_contents() before ob_flush()\n   as the buffer contents are discarded after ob_flush()\n   is called.\n  \n  \n   This function does not destroy the output buffer like\n   ob_end_flush() does.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    ob_get_contents() - Return the contents of the output buffer\n    ob_clean() - Clean (erase) the output buffer\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-contents.php","title":"ob_get_contents","description":"\n \n  ob_get_contents\n  (PHP 4, PHP 5)ob_get_contents &mdash; Return the contents of the output buffer\n\n \n \n \n  Description\n  \n   string ob_get_contents\n    ( void\n   )\n\n  \n   Gets the contents of the output buffer without clearing it.\n  \n \n \n\n \n  Return Values\n  \n   This will return the contents of the output buffer or FALSE, if output\n   buffering isn&#039;t active.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple ob_get_contents() example\n    \n\n&lt;?phpob_start();echo&nbsp;\"Hello&nbsp;\";$out1&nbsp;=&nbsp;ob_get_contents();echo&nbsp;\"World\";$out2&nbsp;=&nbsp;ob_get_contents();ob_end_clean();var_dump($out1,&nbsp;$out2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(6) &quot;Hello &quot;\nstring(11) &quot;Hello World&quot;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_get_length() - Return the length of the output buffer\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-level.php","title":"ob_get_level","description":"\n \n  ob_get_level\n  (PHP 4 &gt;= 4.2.0, PHP 5)ob_get_level &mdash; Return the nesting level of the output buffering mechanism\n\n \n \n \n  Description\n  \n   int ob_get_level\n    ( void\n   )\n\n  \n   Returns the nesting level of the output buffering mechanism.\n  \n \n\n\n \n  Return Values\n  \n   Returns the level of nested output buffering handlers or zero if output\n   buffering is not active.\n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_get_contents() - Return the contents of the output buffer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-status.php","title":"ob_get_status","description":"\n \n  ob_get_status\n  (PHP 4 &gt;= 4.2.0, PHP 5)ob_get_status &mdash; Get status of output buffers\n\n \n \n \n  Description\n  \n   array ob_get_status\n    ([ bool  $full_status  = FALSE\n  ] )\n\n  \n   ob_get_status() returns status information on either\n   the top level output buffer or all active output buffer levels if\n   full_status is set to TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     full_status\n     \n\n      \n       TRUE to return all active output buffer levels. If FALSE or not\n       set, only the top level output buffer is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If called without the full_status parameter\n   or with full_status = FALSE a simple array\n   with the following elements is returned:\n   \n    \nArray\n(\n    [level] =&gt; 2\n    [type] =&gt; 0\n    [status] =&gt; 0\n    [name] =&gt; URL-Rewriter\n    [del] =&gt; 1\n)\n\n    \n   \n   \n    Simple ob_get_status() results\n    \n    Key:levelValue:Output nesting level\n    Key:typeValue:PHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)\n    Key:statusValue:One of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)\n    Key:nameValue:Name of active output handler or &#039; default output handler&#039; if none is set\n    Key:delValue:Erase-flag as set by ob_start()\n   \n  \n  \n   If called with full_status = TRUE an array\n   with one element for each active output buffer level is returned.\n   The output level is used as key of the top level array and each array\n   element itself is another array holding status information\n   on one active output level.\n   \n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [chunk_size] =&gt; 0\n            [size] =&gt; 40960\n            [block_size] =&gt; 10240\n            [type] =&gt; 1\n            [status] =&gt; 0\n            [name] =&gt; default output handler\n            [del] =&gt; 1\n        )\n\n    [1] =&gt; Array\n        (\n            [chunk_size] =&gt; 0\n            [size] =&gt; 40960\n            [block_size] =&gt; 10240\n            [type] =&gt; 0\n            [buffer_size] =&gt; 0\n            [status] =&gt; 0\n            [name] =&gt; URL-Rewriter\n            [del] =&gt; 1\n        )\n\n)\n\n    \n   \n  \n  \n   The full output contains these additional elements:\n   \n    Full ob_get_status() results\n    \n    Key:chunk_sizeValue:Chunk size as set by ob_start()\n    Key:sizeValue:...\n    Key:blocksizeValue:...\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_get_level() - Return the nesting level of the output buffering mechanism\n    ob_list_handlers() - List all output handlers in use\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-flush.php","title":"ob_get_flush","description":"\n \n  ob_get_flush\n  (PHP 4 &gt;= 4.3.0, PHP 5)ob_get_flush &mdash; Flush the output buffer, return it as a string and turn off output buffering\n\n \n \n \n  Description\n  \n   string ob_get_flush\n    ( void\n   )\n\n  \n   ob_get_flush() flushes the output buffer, return\n   it as a string and turns off output buffering.\n  \n  Note: \n   \n    This function is similar to ob_end_flush(), except\n    that this function returns the buffer as a string.\n   \n  \n \n\n\n \n  Return Values\n  \n   Returns the output buffer or FALSE if no buffering is active.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ob_get_flush() example\n    \n\n&lt;?php\/\/using&nbsp;output_buffering=Onprint_r(ob_list_handlers());\/\/save&nbsp;buffer&nbsp;in&nbsp;a&nbsp;file$buffer&nbsp;=&nbsp;ob_get_flush();file_put_contents('buffer.txt',&nbsp;$buffer);print_r(ob_list_handlers());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; default output handler\n)\nArray\n(\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n    ob_list_handlers() - List all output handlers in use\n   \n  \n \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-get-length.php","title":"ob_get_length","description":"\n \n  ob_get_length\n  (PHP 4 &gt;= 4.0.2, PHP 5)ob_get_length &mdash; Return the length of the output buffer\n\n \n \n \n  Description\n  \n   int ob_get_length\n    ( void\n   )\n\n  \n   This will return the length of the contents in the output buffer.\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the output buffer contents or FALSE if no\n   buffering is active.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple ob_get_length() example\n    \n\n&lt;?phpob_start();echo&nbsp;\"Hello&nbsp;\";$len1&nbsp;=&nbsp;ob_get_length();echo&nbsp;\"World\";$len2&nbsp;=&nbsp;ob_get_length();ob_end_clean();echo&nbsp;$len1&nbsp;.&nbsp;\",&nbsp;.\"&nbsp;.&nbsp;$len2;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n6, 11\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_get_contents() - Return the contents of the output buffer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-list-handlers.php","title":"ob_list_handlers","description":"\n \n  ob_list_handlers\n  (PHP 4 &gt;= 4.3.0, PHP 5)ob_list_handlers &mdash; List all output handlers in use\n\n \n \n \n  Description\n  \n   array ob_list_handlers\n    ( void\n   )\n\n  \n   Lists all output handlers in use.\n  \n \n\n\n \n  Return Values\n  \n   This will return an array with the output handlers in use (if any). If\n   output_buffering is enabled or\n   an anonymous function was used with ob_start(),\n   ob_list_handlers() will return &quot;default output\n   handler&quot;.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ob_list_handlers() example\n    \n\n&lt;?php\/\/using&nbsp;output_buffering=Onprint_r(ob_list_handlers());ob_end_flush();ob_start(\"ob_gzhandler\");print_r(ob_list_handlers());ob_end_flush();\/\/&nbsp;anonymous&nbsp;functionsob_start(create_function('$string',&nbsp;'return&nbsp;$string;'));print_r(ob_list_handlers());ob_end_flush();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; default output handler\n)\n\nArray\n(\n    [0] =&gt; ob_gzhandler\n)\n\nArray\n(\n    [0] =&gt; default output handler\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n    ob_get_flush() - Flush the output buffer, return it as a string and turn off output buffering\n    ob_start() - Turn on output buffering\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.output-add-rewrite-var.php","title":"output_add_rewrite_var","description":"\n \n  output_add_rewrite_var\n  (PHP 4 &gt;= 4.3.0, PHP 5)output_add_rewrite_var &mdash; Add URL rewriter values\n\n \n \n \n  Description\n  \n   bool output_add_rewrite_var\n    ( string $name\n   , string $value\n   )\n\n  \n   This function adds another name\/value pair to the URL rewrite mechanism.\n   The name and value will be added to URLs (as GET parameter) and forms\n   (as hidden input fields) the same way as the session ID when transparent\n   URL rewriting is enabled with session.use_trans_sid. Please\n   note that absolute URLs (http:\/\/example.com\/..) aren&#039;t rewritten.\n  \n  \n   This function&#039;s behavior is controlled by the url_rewriter.tags php.ini\n   parameter.\n  \n  Note: \n   \n    Calling this function will implicitly start output buffering if it is\n    not active already.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The variable name.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The variable value.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 output_add_rewrite_var() example\n    \n\n&lt;?phpoutput_add_rewrite_var('var',&nbsp;'value');\/\/&nbsp;some&nbsp;linksecho&nbsp;'&lt;a&nbsp;href=\"file.php\"&gt;link&lt;\/a&gt;&lt;a&nbsp;href=\"http:\/\/example.com\"&gt;link2&lt;\/a&gt;';\/\/&nbsp;a&nbsp;formecho&nbsp;'&lt;form&nbsp;action=\"script.php\"&nbsp;method=\"post\"&gt;&lt;input&nbsp;type=\"text\"&nbsp;name=\"var2\"&nbsp;\/&gt;&lt;\/form&gt;';print_r(ob_list_handlers());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;a href=&quot;file.php?var=value&quot;&gt;link&lt;\/a&gt;\n&lt;a href=&quot;http:\/\/example.com&quot;&gt;link2&lt;\/a&gt;\n\n&lt;form action=&quot;script.php&quot; method=&quot;post&quot;&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;var&quot; value=&quot;value&quot; \/&gt;\n&lt;input type=&quot;text&quot; name=&quot;var2&quot; \/&gt;\n&lt;\/form&gt;\n\nArray\n(\n    [0] =&gt; URL-Rewriter\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    output_reset_rewrite_vars() - Reset URL rewriter values\n    ob_flush() - Flush (send) the output buffer\n    ob_list_handlers() - List all output handlers in use\n   \n  \n \n  \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-implicit-flush.php","title":"ob_implicit_flush","description":"\n \n  ob_implicit_flush\n  (PHP 4, PHP 5)ob_implicit_flush &mdash; Turn implicit flush on\/off\n\n \n \n \n  Description\n  \n   void ob_implicit_flush\n    ([ int $flag = true\n  ] )\n\n  \n   ob_implicit_flush() will turn implicit flushing on or\n   off. Implicit flushing will result in a flush operation after every output\n   call, so that explicit calls to flush() will no longer\n   be needed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     flag\n     \n\n      \n       TRUE to turn implicit flushing on, FALSE otherwise.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    flush() - Flush the output buffer\n    ob_start() - Turn on output buffering\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.output-reset-rewrite-vars.php","title":"output_reset_rewrite_vars","description":"\n \n  output_reset_rewrite_vars\n  (PHP 4 &gt;= 4.3.0, PHP 5)output_reset_rewrite_vars &mdash; Reset URL rewriter values\n\n \n \n \n  Description\n  \n   bool output_reset_rewrite_vars\n    ( void\n   )\n\n  \n   This function resets the URL rewriter and removes all rewrite\n   variables previously set by the output_add_rewrite_var()\n   function or the session mechanism (if session.use_trans_sid\n   was set on session_start()).\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 output_reset_rewrite_vars() example\n    \n\n&lt;?phpsession_start();output_add_rewrite_var('var',&nbsp;'value');echo&nbsp;'&lt;a&nbsp;href=\"file.php\"&gt;link&lt;\/a&gt;';ob_flush();output_reset_rewrite_vars();echo&nbsp;'&lt;a&nbsp;href=\"file.php\"&gt;link&lt;\/a&gt;';?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;a href=&quot;file.php?PHPSESSID=xxx&amp;var=value&quot;&gt;link&lt;\/a&gt;\n&lt;a href=&quot;file.php&quot;&gt;link&lt;\/a&gt;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    output_add_rewrite_var() - Add URL rewriter values\n    ob_flush() - Flush (send) the output buffer\n    ob_list_handlers() - List all output handlers in use\n    session_start() - Initialize session data\n   \n  \n \n  \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-access.php","title":"posix_access","description":"\n \n  posix_access\n  (PHP 5 &gt;= 5.1.0)posix_access &mdash; \n   Determine accessibility of a file\n  \n\n \n \n  Description\n  \n   bool posix_access\n    ( string $file\n   [, int $mode = POSIX_F_OK\n  ] )\n\n  \n   posix_access() checks the user&#039;s permission of a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     file\n      \n\n       \n        The name of the file to be tested.\n       \n      \n\n     \n\n    \n\n     mode\n      \n\n       \n        A mask consisting of one or more of POSIX_F_OK,\n        POSIX_R_OK, POSIX_W_OK and\n        POSIX_X_OK.\n       \n       \n        POSIX_R_OK, POSIX_W_OK and\n        POSIX_X_OK request checking whether the file\n        exists and has read, write and execute permissions, respectively.\n        POSIX_F_OK just requests checking for the\n        existence of the file.\n       \n      \n\n     \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_access() example\n    \n     This example will check if the $file is readable and writable, otherwise\n     will print an error message.\n    \n    \n\n&lt;?php$file&nbsp;=&nbsp;'some_file';if&nbsp;(posix_access($file,&nbsp;POSIX_R_OK&nbsp;|&nbsp;POSIX_W_OK))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'The&nbsp;file&nbsp;is&nbsp;readable&nbsp;and&nbsp;writable!';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$error&nbsp;=&nbsp;posix_get_last_error();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error&nbsp;$error:&nbsp;\"&nbsp;.&nbsp;posix_strerror($error);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n \n\n\n \n  See Also\n  \n   \n    posix_get_last_error() - Retrieve the error number set by the last posix function that failed\n    posix_strerror() - Retrieve the system error message associated with the given errno\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-gzhandler.php","title":"ob_gzhandler","description":"\n \n  ob_gzhandler\n  (PHP 4 &gt;= 4.0.4, PHP 5)ob_gzhandler &mdash; ob_start callback function to gzip output buffer\n\n \n \n \n  Description\n  \n   string ob_gzhandler\n    ( string $buffer\n   , int $mode\n   )\n\n  \n   ob_gzhandler() is intended to be used as a callback\n   function for ob_start() to help facilitate sending\n   gz-encoded data to web browsers that support compressed web pages.  \n   Before ob_gzhandler() actually sends compressed data,\n   it determines what type of content encoding the browser will accept\n   (&quot;gzip&quot;, &quot;deflate&quot; or none at all) and will return its output accordingly.\n   All browsers are supported since it&#039;s up to the browser to send the\n   correct header saying that it accepts compressed web pages. If a browser\n   doesn&#039;t support compressed pages this function returns FALSE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     buffer\n     \n\n      \n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.5\n       \n        The mode parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ob_gzhandler() example\n    \n\n&lt;?phpob_start(\"ob_gzhandler\");?&gt;&lt;html&gt;&lt;body&gt;&lt;p&gt;This&nbsp;should&nbsp;be&nbsp;a&nbsp;compressed&nbsp;page.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    ob_gzhandler() requires the zlib extension.\n   \n  \n  Note: \n   \n    You cannot use both ob_gzhandler() and zlib.output_compression.\n    Also note that using \n    zlib.output_compression is preferred over\n    ob_gzhandler().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-ctermid.php","title":"posix_ctermid","description":"\n \n  posix_ctermid\n  (PHP 4, PHP 5)posix_ctermid &mdash; Get path name of controlling terminal\n\n \n \n \n  Description\n  \n   string posix_ctermid\n    ( void\n   )\n\n  \n   Generates a string which is the pathname for the current \n   controlling terminal for the process.  On error this will set errno, \n   which can be checked using posix_get_last_error()\n  \n \n\n\n \n  Return Values\n  \n   Upon successful completion, returns string of the pathname to \n   the current controlling terminal.  Otherwise FALSE is returned and errno\n   is set, which can be checked with posix_get_last_error().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_ctermid() example\n    \n     This example will display the path to the current TTY.\n    \n    \n\n&lt;?phpecho&nbsp;\"I&nbsp;am&nbsp;running&nbsp;from&nbsp;\".posix_ctermid();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_ttyname() - Determine terminal device name\n    posix_get_last_error() - Retrieve the error number set by the last posix function that failed\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-errno.php","title":"posix_errno","description":"\n \n  posix_errno\n  (PHP 4 &gt;= 4.2.0, PHP 5)posix_errno &mdash; Alias of posix_get_last_error()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   posix_get_last_error().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ob-start.php","title":"ob_start","description":"\n \n  ob_start\n  (PHP 4, PHP 5)ob_start &mdash; Turn on output buffering\n\n \n \n \n  Description\n  \n   bool ob_start\n    ([ callback $output_callback\n   [, int $chunk_size = 0\n   [, bool $erase = true\n  ]]] )\n\n  \n   This function will turn output buffering on. While output buffering is\n   active no output is sent from the script (other than headers), instead the\n   output is stored in an internal buffer.\n  \n  \n   The contents of this internal buffer may be copied into a string variable\n   using ob_get_contents().  To output what is stored in\n   the internal buffer, use ob_end_flush(). Alternatively,\n   ob_end_clean() will silently discard the buffer\n   contents.\n  \n  Warning\n   \n    Some web servers (e.g. Apache) change the working directory of a script\n    when calling the callback function. You can change it back by e.g.\n    chdir(dirname($_SERVER[&#039;SCRIPT_FILENAME&#039;])) in the\n    callback function.\n   \n  \n  \n   Output buffers are stackable, that is, you may call\n   ob_start() while another\n   ob_start() is active. Just make\n   sure that you call ob_end_flush()\n   the appropriate number of times. If multiple output callback\n   functions are active, output is being filtered sequentially\n   through each of them in nesting order.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     output_callback\n     \n\n      \n       An optional output_callback function may be\n       specified. This function takes a string as a parameter and should\n       return a string. The function will be called when\n       the output buffer is flushed (sent) or cleaned (with\n       ob_flush(), ob_clean() or similar\n       function) or when the output buffer\n       is flushed to the browser at the end of the request.  When\n       output_callback is called, it will receive the\n       contents of the output buffer as its parameter and is expected to\n       return a new output buffer as a result, which will be sent to the\n       browser. If the output_callback is not a\n       callable function, this function will return FALSE.\n      \n      \n       If the callback function has two parameters, the second parameter is\n       filled with a bit-field consisting of\n       PHP_OUTPUT_HANDLER_START,\n       PHP_OUTPUT_HANDLER_CONT and\n       PHP_OUTPUT_HANDLER_END.\n      \n      \n       If output_callback returns FALSE original\n       input is sent to the browser.\n      \n      \n       The output_callback parameter may be bypassed\n       by passing a NULL value.\n      \n      \n       ob_end_clean(), ob_end_flush(),\n       ob_clean(), ob_flush() and\n       ob_start() may not be called from a callback\n       function. If you call them from callback function, the behavior is\n       undefined. If you would like to delete the contents of a buffer,\n       return &quot;&quot; (a null string) from callback function.\n       You can&#039;t even call functions using the output buffering functions like\n       print_r($expression, true) or\n       highlight_file($filename, true) from a callback\n       function.\n      \n      Note: \n       \n        In PHP 4.0.4, ob_gzhandler() was introduced to\n        facilitate sending gz-encoded data to web browsers that support\n        compressed web pages.  ob_gzhandler() determines\n        what type of content encoding the browser will accept and will return\n        its output accordingly.\n       \n      \n     \n\n    \n\n    \n\n     chunk_size\n     \n\n      \n       If the optional parameter chunk_size is passed, the\n       buffer will be flushed after any output call which causes the buffer&#039;s\n       length to equal or exceed chunk_size. The default\n       value 0 means that the output function will only be\n       called when the output buffer is closed.\n      \n      \n       Prior to PHP 5.4.0, the value 1 was a special case\n       value that set the chunk size to 4096 bytes.\n      \n     \n\n    \n\n    \n\n     erase\n     \n\n      \n       If the optional parameter erase is set to FALSE,\n       the buffer will not be deleted until the script finishes.\n       This causes that flushing and cleaning functions would issue a notice\n       and return FALSE if called.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        A chunk size of 1 now results in chunks of 1 byte\n        being sent to the output buffer.\n       \n      \n\n      \n       4.3.2\n       \n        This function was changed to return FALSE in case the passed\n        output_callback can not be executed.\n       \n      \n\n      \n       4.2.0\n       \n        Added the erase parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 User defined callback function example\n    \n\n&lt;?phpfunction&nbsp;callback($buffer){&nbsp;&nbsp;\/\/&nbsp;replace&nbsp;all&nbsp;the&nbsp;apples&nbsp;with&nbsp;oranges&nbsp;&nbsp;return&nbsp;(str_replace(\"apples\",&nbsp;\"oranges\",&nbsp;$buffer));}ob_start(\"callback\");?&gt;&lt;html&gt;&lt;body&gt;&lt;p&gt;It's&nbsp;like&nbsp;comparing&nbsp;apples&nbsp;to&nbsp;oranges.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;&lt;?phpob_end_flush();?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;It&#039;s like comparing oranges to oranges.&lt;\/p&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_get_contents() - Return the contents of the output buffer\n    ob_end_clean() - Clean (erase) the output buffer and turn off output buffering\n    ob_end_flush() - Flush (send) the output buffer and turn off output buffering\n    ob_implicit_flush() - Turn implicit flush on\/off\n    ob_gzhandler() - ob_start callback function to gzip output buffer\n    ob_iconv_handler() - Convert character encoding as output buffer handler\n    mb_output_handler() - Callback function converts character encoding in output buffer\n    ob_tidyhandler() - ob_start callback function to repair the buffer\n   \n  \n \n  \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-get-last-error.php","title":"posix_get_last_error","description":"\n \n  posix_get_last_error\n  (PHP 4 &gt;= 4.2.0, PHP 5)posix_get_last_error &mdash; Retrieve the error number set by the last posix function that failed\n\n \n \n \n  Description\n  \n   int posix_get_last_error\n    ( void\n   )\n\n  \n   Retrieve the error number set by the last posix function that failed.\n   The system error message associated with the errno may be checked with\n   posix_strerror().\n  \n \n\n\n \n  Return Values\n  \n   Returns the errno (error number) set by the last posix function that\n   failed.  If no errors exist, 0 is returned. \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_get_last_error() example\n    \n     This example attempt to kill a bogus process id, which will set the\n     last error.  We will then print out the last errno.\n    \n    \n\n&lt;?phpposix_kill(999459,SIGKILL);echo&nbsp;'Your&nbsp;error&nbsp;returned&nbsp;was&nbsp;'.posix_get_last_error();&nbsp;\/\/Your&nbsp;error&nbsp;was&nbsp;___?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    posix_strerror() - Retrieve the system error message associated with the given errno\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getcwd.php","title":"posix_getcwd","description":"\n \n  posix_getcwd\n  (PHP 4, PHP 5)posix_getcwd &mdash; Pathname of current directory\n\n \n \n \n  Description\n  \n   string posix_getcwd\n    ( void\n   )\n\n  \n   Gets the absolute pathname of the script&#039;s current working directory.\n   On error, it sets errno which can be checked using\n   posix_get_last_error()\n  \n \n\n\n \n  Return Values\n  \n   Returns a string of the absolute pathname on success.  \n   On error, returns FALSE and sets errno which can be checked with\n   posix_get_last_error().\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_getcwd() example\n    \n     This example will return the absolute path of the current working \n     directory of the script.\n    \n    \n\n&lt;?phpecho&nbsp;'My&nbsp;current&nbsp;working&nbsp;directory&nbsp;is&nbsp;'.posix_getcwd();?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    This function can fail on\n    \n     \n      Read or Search permission was denied\n     \n     \n      Pathname no longer exists\n     \n     \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getegid.php","title":"posix_getegid","description":"\n \n  posix_getegid\n  (PHP 4, PHP 5)posix_getegid &mdash; Return the effective group ID of the current process\n\n \n \n \n  Description\n  \n   int posix_getegid\n    ( void\n   )\n\n  \n   Return the numeric effective group ID of the current process. \n  \n \n\n\n \n  Return Values\n  \n   Returns an integer of the effective group ID.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_getegid() example\n    \n     This example will print out the effective group id, once it is\n     changed with posix_setegid().\n    \n    \n\n&lt;?phpecho&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20posix_setegid(40);echo&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20echo&nbsp;'My&nbsp;effective&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getegid();&nbsp;\/\/40?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   posix_getegid() is different than \n   posix_getgid() because effective group ID can be changed by\n   a calling process using posix_setegid().\n  \n \n\n\n \n  See Also\n  \n   \n    posix_getgrgid() - Return info about a group by group id\n    posix_getgid() - Return the real group ID of the current process\n    posix_setgid() - Set the GID of the current process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-geteuid.php","title":"posix_geteuid","description":"\n \n  posix_geteuid\n  (PHP 4, PHP 5)posix_geteuid &mdash; Return the effective user ID of the current process\n\n \n\n \n  Description\n  \n   int posix_geteuid\n    ( void\n   )\n\n  \n   Return the numeric effective user ID of the current process. See\n   also posix_getpwuid() for information on how\n   to convert this into a useable username.\n  \n \n\n\n \n  Return Values\n  \n   Returns the user id, as an integer\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_geteuid() example\n    This example will show the current user id then set the\n    effective user id to a separate id using\n    posix_seteuid(), then show the difference between\n    the real id and the effective id.\n    \n\n&lt;?phpecho&nbsp;posix_getuid().\"\\n\";&nbsp;\/\/10001echo&nbsp;posix_geteuid().\"\\n\";&nbsp;\/\/10001posix_seteuid(10000);echo&nbsp;posix_getuid().\"\\n\";&nbsp;\/\/10001echo&nbsp;posix_geteuid().\"\\n\";&nbsp;\/\/10000?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getpwuid() - Return info about a user by user id\n    posix_getuid() - Return the real user ID of the current process\n    posix_setuid() - Set the UID of the current process\n    POSIX man page GETEUID(2)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgid.php","title":"posix_getgid","description":"\n \n  posix_getgid\n  (PHP 4, PHP 5)posix_getgid &mdash; Return the real group ID of the current process\n\n \n \n \n  Description\n  \n   int posix_getgid\n    ( void\n   )\n\n  \n   Return the numeric real group ID of the current process.\n  \n \n\n\n \n  Return Values\n  \n   Returns the real group id, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_getgid() example\n    \n     This example will print out the real group id, even once the effective\n     group id has been changed.\n    \n    \n\n&lt;?phpecho&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20posix_setegid(40);echo&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20echo&nbsp;'My&nbsp;effective&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getegid();&nbsp;\/\/40?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getgrgid() - Return info about a group by group id\n    posix_getegid() - Return the effective group ID of the current process\n    posix_setgid() - Set the GID of the current process\n    POSIX man page GETGID(2)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgroups.php","title":"posix_getgroups","description":"\n \n  posix_getgroups\n  (PHP 4, PHP 5)posix_getgroups &mdash; Return the group set of the current process\n\n \n \n \n  Description\n  \n   array posix_getgroups\n    ( void\n   )\n\n  \n   Gets the group set of the current process.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of integers containing the numeric group ids of the group\n   set of the current process.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getgroups()\n    \n\n&lt;?php$groups&nbsp;=&nbsp;posix_getgroups();print_r($groups);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; 4\n    [1] =&gt; 20\n    [2] =&gt; 24\n    [3] =&gt; 25\n    [4] =&gt; 29\n    [5] =&gt; 30\n    [6] =&gt; 33\n    [7] =&gt; 44\n    [8] =&gt; 46\n    [9] =&gt; 104\n    [10] =&gt; 109\n    [11] =&gt; 110\n    [12] =&gt; 1000\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getgrgid() - Return info about a group by group id\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgrnam.php","title":"posix_getgrnam","description":"\n \n  posix_getgrnam\n  (PHP 4, PHP 5)posix_getgrnam &mdash; Return info about a group by name\n\n \n \n \n  Description\n  \n   array posix_getgrnam\n    ( string $name\n   )\n\n  \n   Gets information about a group provided its name. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      The name of the group\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The array elements returned are:\n   \n    The group information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the name of the group. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        group, not the real, full name.  This should be the same as\n        the name parameter used when\n        calling the function, and hence redundant.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the group&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       gid\n       \n        Group ID of the group in numeric form.\n       \n      \n\n      \n       members\n       \n        This consists of an array of\n        string&#039;s for all the members in the group.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        Prior to this version, members was simply an integer representing the\n        number of members in the group, and the member names were returned\n        with numerical indices.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getgrnam()\n    \n\n&lt;?php$groupinfo&nbsp;=&nbsp;posix_getgrnam(\"toons\");print_r($groupinfo);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [name]    =&gt; toons\n    [passwd]  =&gt; x\n    [members] =&gt; Array\n        (\n            [0] =&gt; tom\n            [1] =&gt; jerry\n        )\n    [gid]     =&gt; 42\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getegid() - Return the effective group ID of the current process\n    posix_getgrgid() - Return info about a group by group id\n    filegroup() - Gets file group\n    stat() - Gives information about a file\n    safe_mode_gid\n    POSIX man page GETGRNAM(3)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getgrgid.php","title":"posix_getgrgid","description":"\n \n  posix_getgrgid\n  (PHP 4, PHP 5)posix_getgrgid &mdash; Return info about a group by group id\n\n \n \n \n  Description\n  \n   array posix_getgrgid\n    ( int $gid\n   )\n\n  \n   Gets information about a group provided its id.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     gid\n     \n\n      \n       The group id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The array elements returned are:\n   \n    The group information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the name of the group. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        group, not the real, full name.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the group&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       gid\n       \n        Group ID, should be the same as the\n        gid parameter used when calling the\n        function, and hence redundant.\n       \n      \n\n      \n       members\n       \n        This consists of an array of\n        string&#039;s for all the members in the group.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        Prior to this version, members was simply an integer representing the\n        number of members in the group, and the member names were returned\n        with numerical indices.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getgrgid()\n    \n\n&lt;?php$groupid&nbsp;&nbsp;&nbsp;=&nbsp;posix_getegid();$groupinfo&nbsp;=&nbsp;posix_getgrgid($groupid);print_r($groupinfo);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [name]    =&gt; toons\n    [passwd]  =&gt; x\n    [members] =&gt; Array\n        (\n            [0] =&gt; tom\n            [1] =&gt; jerry\n        )\n    [gid]     =&gt; 42\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getegid() - Return the effective group ID of the current process\n    posix_getgrnam() - Return info about a group by name\n    filegroup() - Gets file group\n    stat() - Gives information about a file\n    safe_mode_gid\n    POSIX man page GETGRNAM(3)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getlogin.php","title":"posix_getlogin","description":"\n \n  posix_getlogin\n  (PHP 4, PHP 5)posix_getlogin &mdash; Return login name\n\n \n \n \n  Description\n  \n   string posix_getlogin\n    ( void\n   )\n\n  \n   Returns the login name of the user owning the current process.\n  \n \n\n\n \n  Return Values\n  \n   Returns the login name of the user, as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getlogin()\n    \n\n&lt;?phpecho&nbsp;posix_getlogin();&nbsp;\/\/apache?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getpwnam() - Return info about a user by username\n    POSIX man page GETLOGIN(3)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpgid.php","title":"posix_getpgid","description":"\n \n  posix_getpgid\n  (PHP 4, PHP 5)posix_getpgid &mdash; Get process group id for job control\n\n \n \n \n  Description\n  \n   int posix_getpgid\n    ( int $pid\n   )\n\n  \n   Returns the process group identifier of the process\n   pid or FALSE on failure.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       The process id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the identifier, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getpgid()\n    \n\n&lt;?php$pid&nbsp;=&nbsp;posix_getppid();echo&nbsp;posix_getpgid($pid);&nbsp;\/\/35?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This is a not POSIX function, but is common on BSD and System V\n    systems. If the system does not support this function, then it\n    will not be included at compile time.  This may be checked with\n    function_exists().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getppid() - Return the parent process identifier\n    man page SETPGID(2)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpgrp.php","title":"posix_getpgrp","description":"\n \n  posix_getpgrp\n  (PHP 4, PHP 5)posix_getpgrp &mdash; Return the current process group identifier\n\n \n \n \n  Description\n  \n   int posix_getpgrp\n    ( void\n   )\n\n  \n   Return the process group identifier of the current process. \n  \n \n\n\n \n  Return Values\n  \n   Returns the identifier, as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    POSIX.1 and the getpgrp(2) manual page on the POSIX system for\n     more information on process groups.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getppid.php","title":"posix_getppid","description":"\n \n  posix_getppid\n  (PHP 4, PHP 5)posix_getppid &mdash; Return the parent process identifier\n\n \n \n \n  Description\n  \n   int posix_getppid\n    ( void\n   )\n\n  \n   Return the process identifier of the parent process of the\n   current process.\n  \n \n\n\n \n  Return Values\n  \n   Returns the identifier, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getppid()\n    \n\n&lt;?phpecho&nbsp;posix_getppid();&nbsp;\/\/8259?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpid.php","title":"posix_getpid","description":"\n \n  posix_getpid\n  (PHP 4, PHP 5)posix_getpid &mdash; Return the current process identifier\n\n \n \n \n  Description\n  \n   int posix_getpid\n    ( void\n   )\n\n  \n   Return the process identifier of the current process.\n  \n \n\n\n \n  Return Values\n  \n   Returns the identifier, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getpid()\n    \n\n&lt;?phpecho&nbsp;posix_getpid();&nbsp;\/\/8805?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_kill() - Send a signal to a process\n    POSIX man page GETPID(2)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getuid.php","title":"posix_getuid","description":"\n \n  posix_getuid\n  (PHP 4, PHP 5)posix_getuid &mdash; Return the real user ID of the current process\n\n \n \n \n  Description\n  \n   int posix_getuid\n    ( void\n   )\n\n  \n   Return the numeric real user ID of the current process. \n  \n \n\n\n \n  Return Values\n  \n   Returns the user id, as an integer\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getuid()\n    \n\n&lt;?phpecho&nbsp;posix_getuid();&nbsp;\/\/10000?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    \n     posix_getpwuid() - Return info about a user by user id\n    POSIX man page GETUID(2)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getsid.php","title":"posix_getsid","description":"\n \n  posix_getsid\n  (PHP 4, PHP 5)posix_getsid &mdash; Get the current sid of the process\n\n \n \n \n  Description\n  \n   int posix_getsid\n    ( int $pid\n   )\n\n  \n   Return the session id of the process pid.\n   The session id of a process is the process group id of the session leader.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       The process identifier. If set to 0, the current process is\n       assumed.  If an invalid pid is\n       specified, then FALSE is returned and an error is set which\n       can be checked with posix_get_last_error().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the identifier, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getsid()\n    \n\n&lt;?php$pid&nbsp;=&nbsp;posix_getpid();echo&nbsp;posix_getsid($pid);&nbsp;\/\/8805?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    \n     posix_getpgid() - Get process group id for job control\n    \n    \n     posix_setsid() - Make the current process a session leader\n    \n    POSIX man page GETSID(2)\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getrlimit.php","title":"posix_getrlimit","description":"\n \n  posix_getrlimit\n  (PHP 4, PHP 5)posix_getrlimit &mdash; Return info about system resource limits\n\n \n \n \n  Description\n  \n   array posix_getrlimit\n    ( void\n   )\n\n  \n   posix_getrlimit() returns an array\n   of information about the current resource&#039;s soft and hard limits.\n  \n  \n    Each resource has an associated soft and hard limit.  The soft\n    limit is the value that the kernel enforces for the corresponding\n    resource.  The hard limit acts as a ceiling for the soft limit.\n    An unprivileged process may only set its soft limit to a value\n    from 0 to the hard limit, and irreversibly lower its hard limit.\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array of elements for each\n   limit that is defined. Each limit has a soft and a hard limit.\n   \n    List of possible limits returned\n    \n     \n      \n       Limit name\n       Limit description\n      \n\n     \n\n     \n      \n       core\n       \n        The maximum size of the core file.  When 0, not core files are\n        created.  When core files are larger than this size, they will\n        be truncated at this size.\n       \n      \n\n      \n       totalmem\n       \n        The maximum size of the memory of the process, in bytes.\n       \n      \n\n      \n       virtualmem\n       \n        The maximum size of the virtual memory for the process, in bytes.\n       \n      \n \n      \n       data\n       \n        The maximum size of the data segment for the process, in bytes.\n       \n      \n\n      \n       stack\n       \n        The maximum size of the process stack, in bytes.\n       \n      \n\n      \n       rss\n       \n        The maximum number of virtual pages resident in RAM\n       \n      \n\n      \n       maxproc\n       \n        The maximum number of processes that can be created for the\n        real user ID of the calling process.\n       \n      \n\n      \n       memlock\n       \n        The maximum number of bytes of memory that may be locked into RAM.\n       \n      \n\n      \n       cpu\n       \n        The amount of time the process is allowed to use the CPU.\n       \n      \n\n      \n       filesize\n       \n        The maximum size of the data segment for the process, in bytes.\n       \n      \n\n      \n       openfiles\n       \n        One more than the maximum number of open file descriptors.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getrlimit()\n    \n\n&lt;?php$limits&nbsp;=&nbsp;posix_getrlimit();print_r($limits);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [soft core] =&gt; 0\n    [hard core] =&gt; unlimited\n    [soft data] =&gt; unlimited\n    [hard data] =&gt; unlimited\n    [soft stack] =&gt; 8388608\n    [hard stack] =&gt; unlimited\n    [soft totalmem] =&gt; unlimited\n    [hard totalmem] =&gt; unlimited\n    [soft rss] =&gt; unlimited\n    [hard rss] =&gt; unlimited\n    [soft maxproc] =&gt; unlimited\n    [hard maxproc] =&gt; unlimited\n    [soft memlock] =&gt; unlimited\n    [hard memlock] =&gt; unlimited\n    [soft cpu] =&gt; unlimited\n    [hard cpu] =&gt; unlimited\n    [soft filesize] =&gt; unlimited\n    [hard filesize] =&gt; unlimited\n    [soft openfiles] =&gt; 1024\n    [hard openfiles] =&gt; 1024\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This is a not POSIX function, but is common on BSD and System V\n    systems. If the system does not support this function, then it\n    will not be included at compile time.  This may be checked with\n    function_exists().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    man page GETRLIMIT(2)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpwnam.php","title":"posix_getpwnam","description":"\n \n  posix_getpwnam\n  (PHP 4, PHP 5)posix_getpwnam &mdash; Return info about a user by username\n\n \n \n \n  Description\n  \n   array posix_getpwnam\n    ( string $username\n   )\n\n  \n   Returns an array of information about the given user.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     username\n     \n\n      \n       An alphanumeric username.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success an array with the following elements is returned, else \n   FALSE is returned:\n   \n    The user information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the username of the user. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        user, not the real, full name. This should be the same as\n        the username parameter used when\n        calling the function, and hence redundant.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the user&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       uid\n       \n        User ID of the user in numeric form.\n       \n      \n\n      \n       gid\n       \n        The group ID of the user. Use the function\n        posix_getgrgid() to resolve the group\n        name and a list of its members.\n       \n      \n\n      \n       gecos\n       \n        GECOS is an obsolete term that refers to the finger\n        information field on a Honeywell batch processing system.\n        The field, however, lives on, and its contents have been\n        formalized by POSIX. The field contains a comma separated\n        list containing the user&#039;s full name, office phone, office\n        number, and home phone number. On most systems, only the\n        user&#039;s full name is available.\n       \n      \n\n      \n       dir\n       \n        This element contains the absolute path to the home\n        directory of the user.\n       \n      \n\n      \n       shell\n       \n        The shell element contains the absolute path to the\n        executable of the user&#039;s default shell.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getpwnam()\n    \n\n&lt;?php$userinfo&nbsp;=&nbsp;posix_getpwnam(\"tom\");print_r($userinfo);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [name]    =&gt; tom\n    [passwd]  =&gt; x\n    [uid]     =&gt; 10000\n    [gid]     =&gt; 42\n    [geocs]   =&gt; &quot;tom,,,&quot;\n    [dir]     =&gt; &quot;\/home\/tom&quot;\n    [shell]   =&gt; &quot;\/bin\/bash&quot;\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getpwuid() - Return info about a user by user id\n    POSIX man page GETPWNAM(3)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-getpwuid.php","title":"posix_getpwuid","description":"\n \n  posix_getpwuid\n  (PHP 4, PHP 5)posix_getpwuid &mdash; Return info about a user by user id\n\n \n \n \n  Description\n  \n   array posix_getpwuid\n    ( int $uid\n   )\n\n  \n   Returns an array of information about the user \n   referenced by the given user ID.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     uid\n     \n\n      \n       The user identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array with the following elements:\n   \n    The user information array\n    \n     \n      \n       Element\n       Description\n      \n\n     \n\n     \n      \n       name\n       \n        The name element contains the username of the user. This is\n        a short, usually less than 16 character &quot;handle&quot; of the\n        user, not the real, full name.\n       \n      \n\n      \n       passwd\n       \n        The passwd element contains the user&#039;s password in an\n        encrypted format. Often, for example on a system employing\n        &quot;shadow&quot; passwords, an asterisk is returned instead.\n       \n      \n\n      \n       uid\n       \n        User ID, should be the same as the\n        uid parameter used when calling the\n        function, and hence redundant.\n       \n      \n\n      \n       gid\n       \n        The group ID of the user. Use the function\n        posix_getgrgid() to resolve the group\n        name and a list of its members.\n       \n      \n\n      \n       gecos\n       \n        GECOS is an obsolete term that refers to the finger\n        information field on a Honeywell batch processing system.\n        The field, however, lives on, and its contents have been\n        formalized by POSIX. The field contains a comma separated\n        list containing the user&#039;s full name, office phone, office\n        number, and home phone number. On most systems, only the\n        user&#039;s full name is available.\n       \n      \n\n      \n       dir\n       \n        This element contains the absolute path to the\n        home directory of the user.\n       \n      \n\n      \n       shell\n       \n        The shell element contains the absolute path to the\n        executable of the user&#039;s default shell.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_getpwuid()\n    \n\n&lt;?php$userinfo&nbsp;=&nbsp;posix_getpwuid(10000);print_r($userinfo);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [name]    =&gt; tom\n    [passwd]  =&gt; x\n    [uid]     =&gt; 10000\n    [gid]     =&gt; 42\n    [geocs]   =&gt; &quot;tom,,,&quot;\n    [dir]     =&gt; &quot;\/home\/tom&quot;\n    [shell]   =&gt; &quot;\/bin\/bash&quot;\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getpwnam() - Return info about a user by username\n    POSIX man page GETPWNAM(3)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-isatty.php","title":"posix_isatty","description":"\n \n  posix_isatty\n  (PHP 4, PHP 5)posix_isatty &mdash; Determine if a file descriptor is an interactive terminal\n\n \n \n \n  Description\n  \n   bool posix_isatty\n    ( int $fd\n   )\n\n   \n    Determines if the file descriptor fd refers to a valid\n    terminal type device.\n  \n \n\n    \n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor.\n      \n     \n\n    \n\n   \n\n  \n \n\n       \n \n  Return Values\n  \n   Returns TRUE if fd is an open descriptor connected\n   to a terminal and FALSE otherwise.\n  \n \n\n       \n \n  See Also\n  \n   \n    posix_ttyname() - Determine terminal device name\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-initgroups.php","title":"posix_initgroups","description":"\n \n  posix_initgroups\n  (PHP 5 &gt;= 5.2.0)posix_initgroups &mdash; Calculate the group access list\n\n \n \n \n  Description\n  \n   bool posix_initgroups\n    ( string $name\n   , int $base_group_id\n   )\n\n  \n   Calculates the group access list for the user specified in name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The user to calculate the list for.\n      \n     \n\n    \n\n    \n\n     base_group_id\n     \n\n      \n       Typically the group number from the password file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    The Unix manual page for initgroups(3).\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-kill.php","title":"posix_kill","description":"\n \n  posix_kill\n  (PHP 4, PHP 5)posix_kill &mdash; Send a signal to a process\n\n \n \n \n  Description\n  \n   bool posix_kill\n    ( int $pid\n   , int $sig\n   )\n\n  \n   Send the signal sig to the process with\n   the process identifier pid.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       The process identifier.\n      \n     \n\n    \n\n    \n\n     sig\n     \n\n      \n       One of the PCNTL signals constants.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    \n     The kill(2) manual page of the POSIX system, which contains additional\n     information about negative process identifiers, the special pid 0, the\n     special pid -1, and the signal number 0.\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-mknod.php","title":"posix_mknod","description":"\n \n  posix_mknod\n  (PHP 5 &gt;= 5.1.0)posix_mknod &mdash; \n   Create a special or ordinary file (POSIX.1)\n  \n\n \n \n  Description\n  \n   bool posix_mknod\n    ( string $pathname\n   , int $mode\n   [, int $major = 0\n   [, int $minor = 0\n  ]] )\n\n  \n   Creates a special or ordinary file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pathname\n     \n\n      \n       The file to create\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       This parameter is constructed by a bitwise OR between file type (one of\n       the following constants: POSIX_S_IFREG,\n       POSIX_S_IFCHR, POSIX_S_IFBLK,\n       POSIX_S_IFIFO or\n       POSIX_S_IFSOCK) and permissions.\n      \n     \n\n    \n\n    \n\n     major\n     \n\n      \n       The major device kernel identifier (required to pass when using\n       S_IFCHR or S_IFBLK).\n      \n     \n\n    \n\n    \n\n     minor\n     \n\n      \n       The minor device kernel identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A posix_mknod() example\n    \n\n&lt;?php$file&nbsp;=&nbsp;'\/tmp\/tmpfile';&nbsp;&nbsp;\/\/&nbsp;file&nbsp;name$type&nbsp;=&nbsp;POSIX_S_IFBLK;&nbsp;&nbsp;&nbsp;\/\/&nbsp;file&nbsp;type$permissions&nbsp;=&nbsp;0777;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;octal$major&nbsp;=&nbsp;1;$minor&nbsp;=&nbsp;8;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;\/dev\/randomif&nbsp;(!posix_mknod($file,&nbsp;$type&nbsp;|&nbsp;$permissions,&nbsp;$major,&nbsp;$minor))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Error&nbsp;'&nbsp;.&nbsp;posix_get_last_error()&nbsp;.&nbsp;':&nbsp;'&nbsp;.&nbsp;posix_strerror(posix_get_last_error()));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_mkfifo() - Create a fifo special file (a named pipe)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-mkfifo.php","title":"posix_mkfifo","description":"\n \n  posix_mkfifo\n  (PHP 4, PHP 5)posix_mkfifo &mdash; Create a fifo special file (a named pipe)\n\n \n \n \n  Description\n  \n   bool posix_mkfifo\n    ( string $pathname\n   , int $mode\n   )\n\n  \n   posix_mkfifo() creates a special\n   FIFO file which exists in the file system and acts as\n   a bidirectional communication endpoint for processes.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pathname\n     \n\n      \n       Path to the FIFO file.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The second parameter mode has to be given in\n       octal notation (e.g. 0644). The permission of the newly created\n       FIFO also depends on the setting of the current\n       umask(). The permissions of the created file are\n       (mode &amp; ~umask).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-seteuid.php","title":"posix_seteuid","description":"\n \n  posix_seteuid\n  (PHP 4 &gt;= 4.0.2, PHP 5)posix_seteuid &mdash; Set the effective UID of the current process\n\n \n \n \n  Description\n  \n   bool posix_seteuid\n    ( int $uid\n   )\n\n  \n   Set the real user ID of the current process. This is a privileged\n   function and needs appropriate privileges (usually root) on\n   the system to be able to perform this function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     uid\n     \n\n      \n       The user id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    posix_setgid() - Set the GID of the current process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setegid.php","title":"posix_setegid","description":"\n \n  posix_setegid\n  (PHP 4 &gt;= 4.0.2, PHP 5)posix_setegid &mdash; Set the effective GID of the current process\n\n \n \n \n  Description\n  \n   bool posix_setegid\n    ( int $gid\n   )\n\n  \n   Set the effective group ID of the current process. This is a\n   privileged function and needs appropriate privileges (usually\n   root) on the system to be able to perform this function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     gid\n     \n\n      \n       The group id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_setegid() example\n    \n     This example will print out the effective group id, once changed.\n    \n    \n\n&lt;?phpecho&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20posix_setegid(40);echo&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20echo&nbsp;'My&nbsp;effective&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getegid();&nbsp;\/\/40?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    \n     posix_getgrgid() - Return info about a group by group id\n    posix_getgid() - Return the real group ID of the current process\n    posix_setgid() - Set the GID of the current process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setpgid.php","title":"posix_setpgid","description":"\n \n  posix_setpgid\n  (PHP 4, PHP 5)posix_setpgid &mdash; Set process group id for job control\n\n \n \n \n  Description\n  \n   bool posix_setpgid\n    ( int $pid\n   , int $pgid\n   )\n\n  \n   Let the process pid join the process group\n   pgid. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       The process id.\n      \n     \n\n    \n\n    \n\n     pgid\n     \n\n      \n       The process group id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    \n     See POSIX.1 and the setsid(2) manual page on the POSIX system for more\n     informations on process groups and job control.\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setgid.php","title":"posix_setgid","description":"\n \n  posix_setgid\n  (PHP 4, PHP 5)posix_setgid &mdash; Set the GID of the current process\n\n \n \n \n  Description\n  \n   bool posix_setgid\n    ( int $gid\n   )\n\n  \n   Set the real group ID of the current process. This is a\n   privileged function and needs appropriate privileges (usually\n   root) on the system to be able to perform this function. The\n   appropriate order of function calls is\n   posix_setgid() first,\n   posix_setuid() last.\n  \n  Note: \n   \n    If the caller is a super user, this will also set the effective\n    group id.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     gid\n     \n\n      \n       The group id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_setgid() example\n    \n     This example will print out the effective group id, once it is changed.\n    \n    \n\n&lt;?phpecho&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/20posix_setgid(40);echo&nbsp;'My&nbsp;real&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getgid();&nbsp;\/\/40echo&nbsp;'My&nbsp;effective&nbsp;group&nbsp;id&nbsp;is&nbsp;'.posix_getegid();&nbsp;\/\/40?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_getgrgid() - Return info about a group by group id\n    posix_getgid() - Return the real group ID of the current process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setsid.php","title":"posix_setsid","description":"\n \n  posix_setsid\n  (PHP 4, PHP 5)posix_setsid &mdash; Make the current process a session leader\n\n \n \n \n  Description\n  \n   int posix_setsid\n    ( void\n   )\n\n  \n   Make the current process a session leader. \n  \n \n\n\n \n  Return Values\n  \n   Returns the session id, or -1 on errors.\n  \n \n\n\n \n  See Also\n  \n   \n    \n     The POSIX.1 and the setsid(2) manual page on the POSIX system for more\n     information on process groups and job control.\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-strerror.php","title":"posix_strerror","description":"\n \n  posix_strerror\n  (PHP 4 &gt;= 4.2.0, PHP 5)posix_strerror &mdash; Retrieve the system error message associated with the given errno\n\n \n \n \n  Description\n  \n   string posix_strerror\n    ( int $errno\n   )\n\n  \n   Returns the POSIX system error message associated with the given\n   errno.  You may get the\n   errno parameter by calling\n   posix_get_last_error().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     errno\n     \n\n      \n       A POSIX error number, returned by \n       posix_get_last_error(). If set to 0, then the\n       string &quot;Success&quot; is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the error message, as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_strerror() example\n    This example will attempt to kill a process which does not\n    exist, then will print out the corresponding error message.\n    \n\n&lt;?phpposix_kill(50,SIGKILL);echo&nbsp;posix_strerror(posix_get_last_error()).\"\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nNo such process\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_get_last_error() - Retrieve the error number set by the last posix function that failed\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-setuid.php","title":"posix_setuid","description":"\n \n  posix_setuid\n  (PHP 4, PHP 5)posix_setuid &mdash; Set the UID of the current process\n\n \n \n \n  Description\n  \n   bool posix_setuid\n    ( int $uid\n   )\n\n  \n   Set the real user ID of the current process. This is a privileged\n   function that needs appropriate privileges (usually root) on\n   the system to be able to perform this function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     uid\n     \n\n      \n       The user id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 posix_setuid() example\n    This example will show the current user id and then set\n     it to a different value.\n    \n\n&lt;?phpecho&nbsp;posix_getuid().\"\\n\";&nbsp;\/\/10001echo&nbsp;posix_geteuid().\"\\n\";&nbsp;\/\/10001posix_setuid(10000);echo&nbsp;posix_getuid().\"\\n\";&nbsp;\/\/10000echo&nbsp;posix_geteuid().\"\\n\";&nbsp;\/\/10000?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    posix_setgid() - Set the GID of the current process\n    posix_seteuid() - Set the effective UID of the current process\n    posix_getuid() - Return the real user ID of the current process\n    posix_geteuid() - Return the effective user ID of the current process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-times.php","title":"posix_times","description":"\n \n  posix_times\n  (PHP 4, PHP 5)posix_times &mdash; Get process times\n\n \n \n \n  Description\n  \n   array posix_times\n    ( void\n   )\n\n  \n   Gets information about the current CPU usage.\n  \n \n\n\n \n  Return Values\n  \n   Returns a hash of strings with information about the current\n   process CPU usage. The indices of the hash are:\n   \n    \n     \n      ticks - the number of clock ticks that have elapsed since\n      reboot.\n     \n    \n    \n     \n      utime - user time used by the current process.\n     \n    \n    \n     \n      stime - system time used by the current process.\n     \n    \n    \n     \n      cutime - user time used by current process and children.\n     \n    \n    \n     \n      cstime - system time used by current process and children.\n     \n    \n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    This function isn&#039;t reliable to use, it may return negative values for\n    high times.\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_times()\n    \n\n&lt;?php$times&nbsp;=&nbsp;posix_times();print_r($times);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [ticks] =&gt; 25814410\n    [utime] =&gt; 1\n    [stime] =&gt; 1\n    [cutime] =&gt; 0\n    [cstime] =&gt; 0\n)\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-ttyname.php","title":"posix_ttyname","description":"\n \n  posix_ttyname\n  (PHP 4, PHP 5)posix_ttyname &mdash; Determine terminal device name\n\n \n \n \n  Description\n  \n   string posix_ttyname\n    ( int $fd\n   )\n\n  \n   Returns a string for the absolute path to the current\n   terminal device that is open on the file descriptor\n   fd.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fd\n     \n\n      \n       The file descriptor.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success, returns a string of the absolute path of the\n   fd. On failure, returns FALSE\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.posix-uname.php","title":"posix_uname","description":"\n \n  posix_uname\n  (PHP 4, PHP 5)posix_uname &mdash; Get system name\n\n \n \n \n  Description\n  \n   array posix_uname\n    ( void\n   )\n\n  \n   Gets information about the system.\n  \n  \n   Posix requires that assumptions must not be made about the\n   format of the values, e.g. the assumption that a release may contain\n   three digits or anything else returned by this function.\n  \n \n\n\n \n  Return Values\n  \n   Returns a hash of strings with information about the\n   system. The indices of the hash are\n   \n    \n      sysname - operating system name (e.g. Linux)\n     \n    \n      nodename - system name (e.g. valiant)\n     \n    \n      release - operating system release (e.g. 2.2.10)\n     \n    \n      version - operating system version (e.g. #4 Tue Jul 20\n      17:01:36 MEST 1999)\n     \n    \n      machine - system architecture (e.g. i586)\n     \n    \n      domainname - DNS domainname (e.g. example.com)\n     \n   \n  \n  \n   domainname is a GNU extension and not part of POSIX.1, so this\n   field is only available on GNU systems or when using the GNU\n   libc.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example use of posix_uname()\n    \n\n&lt;?php$uname=posix_uname();print_r($uname);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [sysname] =&gt; Linux\n    [nodename] =&gt; funbox\n    [release] =&gt; 2.6.20-15-server\n    [version] =&gt; #2 SMP Sun Apr 15 07:41:34 UTC 2007\n    [machine] =&gt; i686\n)\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-add-history.php","title":"readline_add_history","description":"\n \n  readline_add_history\n  (PHP 4, PHP 5)readline_add_history &mdash; Adds a line to the history\n\n \n \n \n  Description\n  \n   bool readline_add_history\n    ( string $line\n   )\n\n  \n   This function adds a line to the command line history.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     line\n     \n\n      \n       The line to be added in the history.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-handler-install.php","title":"readline_callback_handler_install","description":"\n \n  readline_callback_handler_install\n  (PHP 5 &gt;= 5.1.0)readline_callback_handler_install &mdash; Initializes the readline callback interface and terminal, prints the prompt and returns immediately\n\n \n \n \n  Description\n  \n   bool readline_callback_handler_install\n    ( string $prompt\n   , callback $callback\n   )\n\n  \n   Sets up a readline callback interface then prints\n   prompt and immediately returns.  \n   Calling this function twice without removing the previous\n   callback interface will automatically and conveniently overwrite the old\n   interface.\n  \n  \n   The callback feature is useful when combined with\n   stream_select() as it allows interleaving of IO and\n   user input, unlike readline().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     prompt\n     \n\n      \n       The prompt message.\n      \n     \n\n    \n\n    \n\n     callback\n     \n\n      \n       The callback function takes one parameter; the\n       user input returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Readline Callback Interface Example\n    \n\n&lt;?phpfunction&nbsp;rl_callback($ret){&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$c,&nbsp;$prompting;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"You&nbsp;entered:&nbsp;$ret\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$c++;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($c&nbsp;&gt;&nbsp;10)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$prompting&nbsp;=&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readline_callback_handler_remove();&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readline_callback_handler_install(\"[$c]&nbsp;Enter&nbsp;something:&nbsp;\",&nbsp;'rl_callback');&nbsp;&nbsp;&nbsp;&nbsp;}}$c&nbsp;=&nbsp;1;$prompting&nbsp;=&nbsp;true;readline_callback_handler_install(\"[$c]&nbsp;Enter&nbsp;something:&nbsp;\",&nbsp;'rl_callback');while&nbsp;($prompting)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$w&nbsp;=&nbsp;NULL;&nbsp;&nbsp;&nbsp;&nbsp;$e&nbsp;=&nbsp;NULL;&nbsp;&nbsp;&nbsp;&nbsp;$n&nbsp;=&nbsp;stream_select($r&nbsp;=&nbsp;array(STDIN),&nbsp;$w,&nbsp;$e,&nbsp;null);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($n&nbsp;&amp;&amp;&nbsp;in_array(STDIN,&nbsp;$r))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;read&nbsp;a&nbsp;character,&nbsp;will&nbsp;call&nbsp;the&nbsp;callback&nbsp;when&nbsp;a&nbsp;newline&nbsp;is&nbsp;entered&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readline_callback_read_char();&nbsp;&nbsp;&nbsp;&nbsp;}}echo&nbsp;\"Prompting&nbsp;disabled.&nbsp;All&nbsp;done.\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    readline_callback_handler_remove() - Removes a previously installed callback handler and restores terminal settings\n    readline_callback_read_char() - Reads a character and informs the readline callback interface when a line is received\n    stream_select() - Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-handler-remove.php","title":"readline_callback_handler_remove","description":"\n \n  readline_callback_handler_remove\n  (PHP 5 &gt;= 5.1.0)readline_callback_handler_remove &mdash; Removes a previously installed callback handler and restores terminal settings\n\n \n \n \n  Description\n  \n   bool readline_callback_handler_remove\n    ( void\n   )\n\n  \n   Removes a previously installed callback handler and restores terminal\n   settings.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if a previously installed callback handler was removed, or\n   FALSE if one could not be found.\n  \n \n\n \n \n  Examples\n  \n   See readline_callback_handler_install() for an example\n   of how to use the readline callback interface.\n  \n \n\n\n \n  See Also\n  \n   \n    readline_callback_handler_install() - Initializes the readline callback interface and terminal, prints the prompt and returns immediately\n    readline_callback_read_char() - Reads a character and informs the readline callback interface when a line is received\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-callback-read-char.php","title":"readline_callback_read_char","description":"\n \n  readline_callback_read_char\n  (PHP 5 &gt;= 5.1.0)readline_callback_read_char &mdash; Reads a character and informs the readline callback interface when a line is received\n\n \n \n \n  Description\n  \n   void readline_callback_read_char\n    ( void\n   )\n\n  \n   Reads a character of user input. When a line is received, this function\n   informs the readline callback interface installed using\n   readline_callback_handler_install() that a line\n   is ready for input.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n \n  Examples\n  \n   See readline_callback_handler_install() for an example\n   of how to use the readline callback interface.\n  \n \n\n\n \n  See Also\n  \n   \n    readline_callback_handler_install() - Initializes the readline callback interface and terminal, prints the prompt and returns immediately\n    readline_callback_handler_remove() - Removes a previously installed callback handler and restores terminal settings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-clear-history.php","title":"readline_clear_history","description":"\n \n  readline_clear_history\n  (PHP 4, PHP 5)readline_clear_history &mdash; Clears the history\n\n \n \n \n  Description\n  \n   bool readline_clear_history\n    ( void\n   )\n\n  \n   This function clears the entire command line history.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-completion-function.php","title":"readline_completion_function","description":"\n \n  readline_completion_function\n  (PHP 4, PHP 5)readline_completion_function &mdash; Registers a completion function\n\n \n \n \n  Description\n  \n   bool readline_completion_function\n    ( callback $function\n   )\n\n  \n   This function registers a completion function. This is the same kind of\n   functionality you&#039;d get if you hit your tab key while using Bash.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     function\n     \n\n      \n       You must supply the name of an existing function which accepts a\n       partial command line and returns an array of possible matches.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-info.php","title":"readline_info","description":"\n \n  readline_info\n  (PHP 4, PHP 5)readline_info &mdash; Gets\/sets various internal readline variables\n\n \n \n \n  Description\n  \n   mixed readline_info\n    ([ string $varname\n   [, string $newvalue\n  ]] )\n\n  \n   Gets or sets various internal readline variables.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     varname\n     \n\n      \n       A variable name.\n      \n     \n\n    \n\n    \n\n     newvalue\n     \n\n      \n       If provided, this will be the new value of the setting.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If called with no parameters, this function returns an array of\n   values for all the setting readline uses.  The elements will\n   be indexed by the following values: done, end, erase_empty_line,\n   library_version, line_buffer, mark, pending_input, point, prompt,\n   readline_name, and terminal_name.\n  \n  \n   If called with one or two parameters, the old value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-list-history.php","title":"readline_list_history","description":"\n \n  readline_list_history\n  (PHP 4, PHP 5)readline_list_history &mdash; Lists the history\n\n \n \n \n  Description\n  \n   array readline_list_history\n    ( void\n   )\n\n  \n   Gets the entire command line history.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of the entire command line history.  The elements are\n   indexed by integers starting at zero.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-on-new-line.php","title":"readline_on_new_line","description":"\n \n  readline_on_new_line\n  (PHP 5 &gt;= 5.1.0)readline_on_new_line &mdash; Inform readline that the cursor has moved to a new line\n\n \n \n \n  Description\n  \n   void readline_on_new_line\n    ( void\n   )\n\n  \n   Tells readline that the cursor has moved to a new line.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-read-history.php","title":"readline_read_history","description":"\n \n  readline_read_history\n  (PHP 4, PHP 5)readline_read_history &mdash; Reads the history\n\n \n \n \n  Description\n  \n   bool readline_read_history\n    ([ string $filename\n  ] )\n\n  \n   This function reads a command history from a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the filename containing the command history.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-redisplay.php","title":"readline_redisplay","description":"\n \n  readline_redisplay\n  (PHP 5 &gt;= 5.1.0)readline_redisplay &mdash; Redraws the display\n\n \n \n \n  Description\n  \n   void readline_redisplay\n    ( void\n   )\n\n  \n   Redraws readline to redraw the display.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline-write-history.php","title":"readline_write_history","description":"\n \n  readline_write_history\n  (PHP 4, PHP 5)readline_write_history &mdash; Writes the history\n\n \n \n \n  Description\n  \n   bool readline_write_history\n    ([ string $filename\n  ] )\n\n  \n   This function writes the command history to a file.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the saved file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-affected-rows.php","title":"pg_affected_rows","description":"\n \n  pg_affected_rows\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_affected_rows &mdash; Returns number of affected records (tuples)\n\n \n\n \n  Description\n  \n   int pg_affected_rows\n    ( resource $result\n   )\n\n  \n   pg_affected_rows() returns the number of tuples\n   (instances\/records\/rows) affected by INSERT, \n   UPDATE, and DELETE\n   queries. \n  \n  Note: \n   \n    This function used to be called pg_cmdtuples().\n   \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of rows affected by the query.  If no tuple is\n   affected, it will return 0.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_affected_rows() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"INSERT&nbsp;INTO&nbsp;authors&nbsp;VALUES&nbsp;('Orwell',&nbsp;2002,&nbsp;'Animal&nbsp;Farm')\");$cmdtuples&nbsp;=&nbsp;pg_affected_rows($result);echo&nbsp;$cmdtuples&nbsp;.&nbsp;\"&nbsp;tuples&nbsp;are&nbsp;affected.\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1 tuples are affected.\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.\n    pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.\n    pg_num_rows() - Returns the number of rows in a result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readline.php","title":"readline","description":"\n \n  readline\n  (PHP 4, PHP 5)readline &mdash; Reads a line\n\n \n \n \n  Description\n  \n   string readline\n    ([ string $prompt\n  ] )\n\n  \n   Reads a single line from the user. You must add this line to the history\n   yourself using readline_add_history().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     prompt\n     \n\n      \n       You may specify a string with which to prompt the user.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a single string from the user. The line returned has the ending\n   newline removed.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 readline() Example\n    \n\n&lt;?php\/\/get&nbsp;3&nbsp;commands&nbsp;from&nbsp;userfor&nbsp;($i=0;&nbsp;$i&nbsp;&lt;&nbsp;3;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$line&nbsp;=&nbsp;readline(\"Command:&nbsp;\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readline_add_history($line);}\/\/dump&nbsp;historyprint_r(readline_list_history());\/\/dump&nbsp;variablesprint_r(readline_info());?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-client-encoding.php","title":"pg_client_encoding","description":"\n \n  pg_client_encoding\n  (PHP 4 &gt;= 4.0.3, PHP 5)pg_client_encoding &mdash; \n   Gets the client encoding\n  \n\n \n\n \n  Description     \n  \n   string pg_client_encoding\n    ([ resource $connection\n  ] )\n\n  \n   PostgreSQL supports automatic character set conversion between \n   server and client for certain character sets.\n   pg_client_encoding() returns the client\n   encoding as a string. The returned string will be one of the\n   standard PostgreSQL encoding identifiers.\n  \n  Note: \n   \n    This function requires PHP 4.0.3 or higher and PostgreSQL 7.0 or\n    higher. If libpq is compiled without multibyte encoding support,\n    pg_client_encoding() always returns\n    SQL_ASCII. Supported encoding depends on PostgreSQL\n    version.  Refer to the PostgreSQL Documentation supported encodings.\n   \n   \n    The function used to be called pg_clientencoding().\n   \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n    The client encoding, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_client_encoding() example\n    \n\n&lt;?php\/\/&nbsp;Assume&nbsp;$conn&nbsp;is&nbsp;a&nbsp;connection&nbsp;to&nbsp;a&nbsp;ISO-8859-1&nbsp;database$encoding&nbsp;=&nbsp;pg_client_encoding($conn);echo&nbsp;\"Client&nbsp;encoding&nbsp;is:&nbsp;\",&nbsp;$encoding,&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nClient encoding is: ISO-8859-1\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_set_client_encoding() - Set the client encoding\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-cancel-query.php","title":"pg_cancel_query","description":"\n \n  pg_cancel_query\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_cancel_query &mdash; \n   Cancel an asynchronous query\n  \n\n \n\n \n  Description\n  \n   bool pg_cancel_query\n    ( resource $connection\n   )\n\n  \n   pg_cancel_query() cancels an asynchronous query sent with \n   pg_send_query(), pg_send_query_params()\n   or pg_send_execute(). You cannot cancel a query executed using \n   pg_query().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    Returns TRUE on success or FALSE on failure.\n   \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_cancel_query() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors;&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;authors;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;\"First&nbsp;call&nbsp;to&nbsp;pg_get_result():&nbsp;$res1\\n\";&nbsp;&nbsp;$rows1&nbsp;=&nbsp;pg_num_rows($res1);&nbsp;&nbsp;echo&nbsp;\"$res1&nbsp;has&nbsp;$rows1&nbsp;records\\n\\n\";&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Cancel&nbsp;the&nbsp;currently&nbsp;running&nbsp;query.&nbsp;&nbsp;Will&nbsp;be&nbsp;the&nbsp;second&nbsp;query&nbsp;if&nbsp;it&nbsp;is&nbsp;&nbsp;\/\/&nbsp;still&nbsp;running.&nbsp;&nbsp;pg_cancel_query($dbconn);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nFirst call to pg_get_result(): Resource id #3\nResource id #3 has 3 records\n\n    \n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_send_query() - Sends asynchronous query\n    pg_connection_busy() - Get connection is busy or not\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-close.php","title":"pg_close","description":"\n \n  pg_close\n  (PHP 4, PHP 5)pg_close &mdash; Closes a PostgreSQL connection\n\n \n\n \n  Description\n  \n   bool pg_close\n    ([ resource $connection\n  ] )\n\n  \n   pg_close() closes the non-persistent\n   connection to a PostgreSQL database associated with the given\n   connection resource.\n  \n  Note: \n   \n    Using pg_close() is not usually necessary, as\n    non-persistent open connections are automatically closed at the end\n    of the script.\n   \n  \n  \n   If there is open large object resource on the connection, do not\n   close the connection before closing all large object resources.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_close() example\n    \n\n&lt;?php$dbconn&nbsp;=&nbsp;pg_connect(\"host=localhost&nbsp;port=5432&nbsp;dbname=mary\")&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");echo&nbsp;\"Connected&nbsp;successfully\";pg_close($dbconn);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nConnected successfully\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-busy.php","title":"pg_connection_busy","description":"\n \n  pg_connection_busy\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_connection_busy &mdash; \n   Get connection is busy or not\n  \n\n \n\n \n  Description\n  \n   bool pg_connection_busy\n    ( resource $connection\n   )\n\n  \n   pg_connection_busy() determines whether or not a connection\n   is busy.  If it is busy, a previous query is still executing.\n   If pg_get_result() is used on the connection, it will be blocked.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    Returns TRUE if the connection is busy, FALSE otherwise.\n   \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_connection_busy() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$bs&nbsp;=&nbsp;pg_connection_busy($dbconn);&nbsp;&nbsp;if&nbsp;($bs)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'connection&nbsp;is&nbsp;busy';&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'connection&nbsp;is&nbsp;not&nbsp;busy';&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_connection_status() - Get connection status\n    pg_get_result() - Get asynchronous query result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-reset.php","title":"pg_connection_reset","description":"\n \n  pg_connection_reset\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_connection_reset &mdash; \n   Reset connection (reconnect)\n  \n\n \n\n \n  Description\n  \n   bool pg_connection_reset\n    ( resource $connection\n   )\n\n  \n   pg_connection_reset() resets the connection.\n   It is useful for error recovery.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    Returns TRUE on success or FALSE on failure.\n   \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_connection_reset() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$dbconn2&nbsp;=&nbsp;pg_connection_reset($dbconn);&nbsp;&nbsp;if&nbsp;($dbconn2)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"reset&nbsp;successful\\n\";&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"reset&nbsp;failed\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n    pg_pconnect() - Open a persistent PostgreSQL connection\n    pg_connection_status() - Get connection status\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connection-status.php","title":"pg_connection_status","description":"\n \n  pg_connection_status\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_connection_status &mdash; \n   Get connection status\n  \n\n \n\n \n  Description\n  \n   int pg_connection_status\n    ( resource $connection\n   )\n\n  \n   pg_connection_status() returns the status of\n   the specified connection.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    PGSQL_CONNECTION_OK or \n    PGSQL_CONNECTION_BAD.\n   \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_connection_status() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$stat&nbsp;=&nbsp;pg_connection_status($dbconn);&nbsp;&nbsp;if&nbsp;($stat&nbsp;===&nbsp;PGSQL_CONNECTION_OK)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;status&nbsp;ok';&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;status&nbsp;bad';&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_connection_busy() - Get connection is busy or not\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-connect.php","title":"pg_connect","description":"\n \n  pg_connect\n  (PHP 4, PHP 5)pg_connect &mdash; Open a PostgreSQL connection\n\n \n\n \n  Description\n  \n   resource pg_connect\n    ( string $connection_string\n   [, int $connect_type\n  ] )\n\n  \n   pg_connect() opens a connection to a\n   PostgreSQL database specified by the\n   connection_string.\n  \n  \n   If a second call is made to pg_connect() with\n   the same connection_string as an existing connection, the\n   existing connection will be returned unless you pass\n   PGSQL_CONNECT_FORCE_NEW as\n   connect_type.\n  \n  \n   The old syntax with multiple parameters\n   $conn = pg_connect(&quot;host&quot;, &quot;port&quot;, &quot;options&quot;, &quot;tty&quot;, &quot;dbname&quot;)\n    has been deprecated.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection_string\n     \n\n      \n       The connection_string can be empty to use all default parameters, or it \n       can contain one or more parameter settings separated by whitespace. \n       Each parameter setting is in the form keyword = value. Spaces around \n       the equal sign are optional. To write an empty value or a value \n       containing spaces, surround it with single quotes, e.g., keyword = \n       &#039;a value&#039;. Single quotes and backslashes within the value must be \n       escaped with a backslash, i.e., \\&#039; and \\\\.  \n      \n      \n       The currently recognized parameter keywords are:\n       host, hostaddr, port,\n       dbname (defaults to value of user),\n       user,\n       password, connect_timeout,\n       options, tty (ignored), sslmode,\n       requiressl (deprecated in favor of sslmode), and\n       service.  Which of these arguments exist depends\n       on your PostgreSQL version.\n      \n      \n       The options parameter can be used to set command line parameters \n       to be invoked by the server.\n      \n     \n\n    \n\n    \n\n     connect_type\n     \n\n      \n       If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection\n       is created, even if the connection_string is identical to\n       an existing connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   PostgreSQL connection resource on success, FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_connect()\n    \n\n&lt;?php$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=mary\");\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"$dbconn2&nbsp;=&nbsp;pg_connect(\"host=localhost&nbsp;port=5432&nbsp;dbname=mary\");\/\/&nbsp;connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"&nbsp;on&nbsp;\"localhost\"&nbsp;at&nbsp;port&nbsp;\"5432\"$dbconn3&nbsp;=&nbsp;pg_connect(\"host=sheep&nbsp;port=5432&nbsp;dbname=mary&nbsp;user=lamb&nbsp;password=foo\");\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"&nbsp;on&nbsp;the&nbsp;host&nbsp;\"sheep\"&nbsp;with&nbsp;a&nbsp;username&nbsp;and&nbsp;password$conn_string&nbsp;=&nbsp;\"host=sheep&nbsp;port=5432&nbsp;dbname=test&nbsp;user=lamb&nbsp;password=bar\";$dbconn4&nbsp;=&nbsp;pg_connect($conn_string);\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"test\"&nbsp;on&nbsp;the&nbsp;host&nbsp;\"sheep\"&nbsp;with&nbsp;a&nbsp;username&nbsp;and&nbsp;password$dbconn5&nbsp;=&nbsp;pg_connect(\"host=localhost&nbsp;options='--client_encoding=UTF8'\");\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;on&nbsp;\"localhost\"&nbsp;and&nbsp;set&nbsp;the&nbsp;command&nbsp;line&nbsp;parameter&nbsp;which&nbsp;tells&nbsp;the&nbsp;encoding&nbsp;is&nbsp;in&nbsp;UTF-8?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_pconnect() - Open a persistent PostgreSQL connection\n    pg_close() - Closes a PostgreSQL connection\n    pg_host() - Returns the host name associated with the connection\n    pg_port() - Return the port number associated with the connection\n    pg_tty() - Return the TTY name associated with the connection\n    pg_options() - Get the options associated with the connection\n    pg_dbname() - Get the database name\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-convert.php","title":"pg_convert","description":"\n \n  pg_convert\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_convert &mdash; \n   Convert associative array values into suitable for SQL statement\n  \n\n \n\n \n  Description\n  \n   array pg_convert\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = 0\n  ] )\n\n  \n   pg_convert() checks and converts the values in\n   assoc_array into suitable values for use in an SQL\n   statement. Precondition for pg_convert() is the \n   existence of a table table_name which has at least\n   as many columns as assoc_array has elements. The\n   fieldnames in table_name must match the indices in\n   assoc_array and the corresponding datatypes must be\n   compatible. Returns an array with the converted values on success, FALSE\n   otherwise.\n  \n  Note: \n   \n    If there are boolean fields in table_name don&#039;t \n    use the constant TRUE in assoc_array. It will be\n    converted to the string &#039;TRUE&#039; which is no valid entry for boolean fields\n    in PostgreSQL. Use one of t, true, 1, y, yes instead.\n   \n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table against which to convert types.\n      \n     \n\n    \n\n    \n\n     assoc_array\n     \n\n      \n       Data to be converted.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Any number of PGSQL_CONV_IGNORE_DEFAULT, \n       PGSQL_CONV_FORCE_NULL or\n       PGSQL_CONV_IGNORE_NOT_NULL, combined.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of converted values, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_convert() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;$tmp&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'author'&nbsp;=&gt;&nbsp;'Joe&nbsp;Thackery',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'year'&nbsp;=&gt;&nbsp;2005,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'title'&nbsp;=&gt;&nbsp;'My&nbsp;Life,&nbsp;by&nbsp;Joe&nbsp;Thackery'&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;$vals&nbsp;=&nbsp;pg_convert($dbconn,&nbsp;'authors',&nbsp;$tmp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_meta_data() - Get meta data for table\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-copy-to.php","title":"pg_copy_to","description":"\n \n  pg_copy_to\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_copy_to &mdash; \n   Copy a table to an array\n  \n\n \n\n \n  Description\n  \n   array pg_copy_to\n    ( resource $connection\n   , string $table_name\n   [, string $delimiter\n   [, string $null_as\n  ]] )\n\n  \n   pg_copy_to() copies a table to an array. It\n   issues COPY TO SQL command internally to\n   retrieve records.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table from which to copy the data into rows.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       The token that separates values for each field in each element of\n       rows.  Default is TAB.\n      \n     \n\n    \n\n    \n\n     null_as\n     \n\n      \n       How SQL NULL values are represented in the\n       rows.  Default is \\N (&quot;\\\\N&quot;).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    An array with one element for each line of COPY data.\n    It returns FALSE on failure.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_copy_to() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$db&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rows&nbsp;=&nbsp;pg_copy_to($db,&nbsp;$table_name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_query($db,&nbsp;\"DELETE&nbsp;FROM&nbsp;$table_name\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_copy_from($db,&nbsp;$table_name,&nbsp;$rows);?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_copy_from() - Insert records into a table from an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-copy-from.php","title":"pg_copy_from","description":"\n \n  pg_copy_from\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_copy_from &mdash; \n   Insert records into a table from an array\n  \n\n \n\n \n  Description\n  \n   bool pg_copy_from\n    ( resource $connection\n   , string $table_name\n   , array $rows\n   [, string $delimiter\n   [, string $null_as\n  ]] )\n\n  \n   pg_copy_from() inserts records into a table from \n   rows. It issues a COPY FROM SQL command \n   internally to insert records.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table into which to copy the rows.\n      \n     \n\n    \n\n    \n\n     rows\n     \n\n      \n       An array of data to be copied into table_name.\n       Each value in rows becomes a row in table_name.\n       Each value in rows should be a delimited string of the values\n       to insert into each field.  Values should be linefeed terminated.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       The token that separates values for each field in each element of\n       rows.  Default is TAB.\n      \n     \n\n    \n\n    \n\n     null_as\n     \n\n      \n       How SQL NULL values are represented in the\n       rows.  Default is \\N (&quot;\\\\N&quot;).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n   \n    Returns TRUE on success or FALSE on failure.\n   \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_copy_from() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$db&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rows&nbsp;=&nbsp;pg_copy_to($db,&nbsp;$table_name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_query($db,&nbsp;\"DELETE&nbsp;FROM&nbsp;$table_name\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_copy_from($db,&nbsp;$table_name,&nbsp;$rows);?&gt;\n\n\n    \n\n    \n  \n \n\n  \n \n  See Also\n  \n   \n    pg_copy_to() - Copy a table to an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-dbname.php","title":"pg_dbname","description":"\n \n  pg_dbname\n  (PHP 4, PHP 5)pg_dbname &mdash; Get the database name\n\n \n\n \n  Description\n  \n   string pg_dbname\n    ([ resource $connection\n  ] )\n\n  \n   pg_dbname() returns the name of the database\n   that the given PostgreSQL connection\n   resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the name of the database the \n   connection is to, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_dbname() example\n    \n\n&lt;?php&nbsp;&nbsp;error_reporting(E_ALL);&nbsp;&nbsp;pg_connect(\"host=localhost&nbsp;port=5432&nbsp;dbname=mary\");&nbsp;&nbsp;echo&nbsp;pg_dbname();&nbsp;\/\/&nbsp;mary?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-end-copy.php","title":"pg_end_copy","description":"\n \n  pg_end_copy\n  (PHP 4 &gt;= 4.0.3, PHP 5)pg_end_copy &mdash; Sync with PostgreSQL backend\n\n \n\n \n  Description\n  \n   bool pg_end_copy\n    ([ resource $connection\n  ] )\n\n  \n   pg_end_copy() syncs the PostgreSQL frontend\n   (usually a web server process) with the PostgreSQL server after\n   doing a copy operation performed by\n   pg_put_line(). pg_end_copy()\n   must be issued, otherwise the PostgreSQL server may get out of\n   sync with the frontend and will report an error.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_end_copy() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=foo\");&nbsp;&nbsp;pg_query($conn,&nbsp;\"create&nbsp;table&nbsp;bar&nbsp;(a&nbsp;int4,&nbsp;b&nbsp;char(16),&nbsp;d&nbsp;float8)\");&nbsp;&nbsp;pg_query($conn,&nbsp;\"copy&nbsp;bar&nbsp;from&nbsp;stdin\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"3\\thello&nbsp;world\\t4.5\\n\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"4\\tgoodbye&nbsp;world\\t7.11\\n\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"\\\\.\\n\");&nbsp;&nbsp;pg_end_copy($conn);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_put_line() - Send a NULL-terminated string to PostgreSQL backend\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-identifier.php","title":"pg_escape_identifier","description":"\n \n  pg_escape_identifier\n  (No version information available, might only be in SVN)pg_escape_identifier &mdash; \n   Escape a identifier for insertion into a text field\n  \n\n \n\n \n  Description\n  \n   string pg_escape_identifier\n    ([ resource $connection\n   ], string $data\n   )\n\n  \n   pg_escape_identifier() escapes a identifier\n   (e.g. table, field names) for quering the database.  It returns an\n   escaped identifier string for PostgreSQL\n   server. pg_escape_identifier() adds double\n   quotes before and after data. Users should not add double\n   quotes. Use of this function is recommended for identifier\n   parameters in query. For SQL literals (i.e. parameters except\n   bytea), pg_escape_literal()\n   or pg_escape_string() muse be used. For bytea\n   type fields, pg_escape_bytea() must be used\n   instead.\n  \n  Note: \n   \n    This function has internal escape code and can also be used with\n    PostgreSQL 8.4 or less.\n    \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       A string containing text to be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the escaped data.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 pg_escape_identifier() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Escape&nbsp;the&nbsp;table&nbsp;name&nbsp;data&nbsp;&nbsp;$escaped&nbsp;=&nbsp;pg_escape_identifier($table_name);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Select&nbsp;rows&nbsp;from&nbsp;$table_name&nbsp;&nbsp;pg_query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;{$escaped};\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_escape_literal() - Escape a literal for insertion into a text field\n    pg_escape_bytea() - Escape a string for insertion into a bytea field\n    pg_escape_string() - Escape a string for query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-literal.php","title":"pg_escape_literal","description":"\n \n  pg_escape_literal\n  (No version information available, might only be in SVN)pg_escape_literal &mdash; \n   Escape a literal for insertion into a text field\n  \n\n \n\n \n  Description\n  \n   string pg_escape_literal\n    ([ resource $connection\n   ], string $data\n   )\n\n  \n   pg_escape_literal() escapes a literal for\n   querying the PostgreSQL database. It returns an escaped literal in\n   the PostgreSQL format. pg_escape_literal() adds\n   quotes before and after data. Users should not add quotes. Use of\n   this function is recommended instead\n   of pg_escape_string().  If the type of the\n   column is bytea, pg_escape_bytea() must be used\n   instead. For escaping identifiers (e.g. table, field\n   names), pg_escape_identifier() must be used.\n  \n  Note: \n   \n    This function has internal escape code and can also be used with\n    PostgreSQL 8.4 or less.\n    \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       A string containing text to be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the escaped data.\n  \n \n\n\n\n\n \n  Examples\n  \n   \n    Example #1 pg_escape_literal() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Read&nbsp;in&nbsp;a&nbsp;text&nbsp;file&nbsp;(containing&nbsp;apostrophes&nbsp;and&nbsp;backslashes)&nbsp;&nbsp;$data&nbsp;=&nbsp;file_get_contents('letter.txt');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Escape&nbsp;the&nbsp;text&nbsp;data&nbsp;&nbsp;$escaped&nbsp;=&nbsp;pg_escape_literal($data);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Insert&nbsp;it&nbsp;into&nbsp;the&nbsp;database.&nbsp;Note&nbsp;that&nbsp;no&nbsp;quotes&nbsp;around&nbsp;{$escaped}&nbsp;&nbsp;pg_query(\"INSERT&nbsp;INTO&nbsp;correspondence&nbsp;(name,&nbsp;data)&nbsp;VALUES&nbsp;('My&nbsp;letter',&nbsp;{$escaped})\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_escape_identifier() - Escape a identifier for insertion into a text field\n    pg_escape_bytea() - Escape a string for insertion into a bytea field\n    pg_escape_string() - Escape a string for query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-delete.php","title":"pg_delete","description":"\n \n  pg_delete\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_delete &mdash; \n   Deletes records\n  \n\n \n\n \n  Description\n  \n   mixed pg_delete\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )\n\n  \n   pg_delete() deletes records from a table specified by\n   the keys and values in assoc_array. If options is\n   specified, pg_convert() is applied\n   to assoc_array with the specified options.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table from which to delete rows.\n      \n     \n\n    \n\n    \n\n     assoc_array\n     \n\n      \n       An array whose keys are field names in the table table_name,\n       and whose values are the values of those fields that are to be deleted.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Any number of PGSQL_CONV_FORCE_NULL, \n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_EXEC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_delete() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$db&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;safe,&nbsp;since&nbsp;$_POST&nbsp;is&nbsp;converted&nbsp;automatically&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_delete($db,&nbsp;'post_log',&nbsp;$_POST);&nbsp;&nbsp;if&nbsp;($res)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"POST&nbsp;data&nbsp;is&nbsp;deleted:&nbsp;$res\\n\";&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"User&nbsp;must&nbsp;have&nbsp;sent&nbsp;wrong&nbsp;inputs\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  See Also\n  \n   \n    pg_convert() - Convert associative array values into suitable for SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-bytea.php","title":"pg_escape_bytea","description":"\n \n  pg_escape_bytea\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_escape_bytea &mdash; \n   Escape a string for insertion into a bytea field\n  \n\n \n\n \n  Description\n  \n   string pg_escape_bytea\n    ([ resource $connection\n   ], string $data\n   )\n\n  \n   pg_escape_bytea() escapes string for\n   bytea datatype.  It returns escaped string.\n  \n  Note: \n   \n    When you SELECT a bytea type, PostgreSQL returns octal byte values\n    prefixed with &#039;\\&#039; (e.g. \\032). Users are supposed to convert back to\n    binary format manually.\n   \n   \n    This function requires PostgreSQL 7.2 or later. With PostgreSQL\n    7.2.0 and 7.2.1, bytea values must be cast when you enable\n    multi-byte support. i.e. INSERT INTO test_table (image)\n    VALUES (&#039;$image_escaped&#039;::bytea); PostgreSQL 7.2.2 or\n    later does not need a cast. The exception is when the client and backend\n    character encoding does not match, and there may be multi-byte\n    stream error. User must then cast to bytea to avoid this error.\n   \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       A string containing text or binary data to be inserted into a bytea\n       column.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the escaped data.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       connection added\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_escape_bytea() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Read&nbsp;in&nbsp;a&nbsp;binary&nbsp;file&nbsp;&nbsp;$data&nbsp;=&nbsp;file_get_contents('image1.jpg');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Escape&nbsp;the&nbsp;binary&nbsp;data&nbsp;&nbsp;$escaped&nbsp;=&nbsp;pg_escape_bytea($data);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Insert&nbsp;it&nbsp;into&nbsp;the&nbsp;database&nbsp;&nbsp;pg_query(\"INSERT&nbsp;INTO&nbsp;gallery&nbsp;(name,&nbsp;data)&nbsp;VALUES&nbsp;('Pine&nbsp;trees',&nbsp;'{$escaped}')\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_unescape_bytea() - Unescape binary for bytea type\n    pg_escape_string() - Escape a string for query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-escape-string.php","title":"pg_escape_string","description":"\n \n  pg_escape_string\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_escape_string &mdash; \n   Escape a string for query\n  \n\n \n\n \n  Description\n  \n   string pg_escape_string\n    ([ resource $connection\n   ], string $data\n   )\n\n  \n   pg_escape_string() escapes a string for querying\n   the database.  It returns an escaped string in the PostgreSQL\n   format without quotes. pg_escape_literal() is\n   more preferred way to escape SQL parameters for PostgreSQL.\n   addslashes() must not be used with PostgreSQL.\n   If the type of the column is\n   bytea, pg_escape_bytea() must be used\n   instead. pg_escape_identifier() must be used to\n   escape identifiers (e.g. table names, field names)\n  \n  Note: \n   \n    This function requires PostgreSQL 7.2 or later.\n    \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       A string containing text to be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the escaped data.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       connection added\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_escape_string() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Read&nbsp;in&nbsp;a&nbsp;text&nbsp;file&nbsp;(containing&nbsp;apostrophes&nbsp;and&nbsp;backslashes)&nbsp;&nbsp;$data&nbsp;=&nbsp;file_get_contents('letter.txt');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Escape&nbsp;the&nbsp;text&nbsp;data&nbsp;&nbsp;$escaped&nbsp;=&nbsp;pg_escape_string($data);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Insert&nbsp;it&nbsp;into&nbsp;the&nbsp;database&nbsp;&nbsp;pg_query(\"INSERT&nbsp;INTO&nbsp;correspondence&nbsp;(name,&nbsp;data)&nbsp;VALUES&nbsp;('My&nbsp;letter',&nbsp;'{$escaped}')\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_escape_bytea() - Escape a string for insertion into a bytea field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-execute.php","title":"pg_execute","description":"\n \n  pg_execute\n  (PHP 5 &gt;= 5.1.0)pg_execute &mdash; Sends a request to execute a prepared statement with given parameters, and waits for the result.\n\n \n\n \n  Description\n  \n   resource pg_execute\n    ([ resource $connection\n   ], string $stmtname\n   , array $params\n   )\n\n  \n    Sends a request to execute a prepared statement with given parameters, and \n    waits for the result.\n  \n  \n    pg_execute() is like pg_query_params(), \n    but the command to be executed is \n    specified by naming a previously-prepared statement, instead of giving a \n    query string. This feature allows commands that will be used repeatedly to \n    be parsed and planned just once, rather than each time they are executed. \n    The statement must have been prepared previously in the current session. \n    pg_execute() is supported only against PostgreSQL 7.4 or\n    higher connections; it will fail when using earlier versions.\n  \n  \n    The parameters are identical to pg_query_params(), except that the name of a \n    prepared statement is given instead of a query string.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     stmtname\n     \n\n      \n       The name of the prepared statement to execute.  if\n       &quot;&quot; is specified, then the unnamed statement is executed.  The name must have\n       been previously prepared using pg_prepare(), \n       pg_send_prepare() or a PREPARE SQL\n       command.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n        An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders.\n      \n      Warning\n       \n        Elements are converted to strings by calling this function.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n    A query result resource on success or FALSE on failure.\n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_execute()\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=mary\");\/\/&nbsp;Prepare&nbsp;a&nbsp;query&nbsp;for&nbsp;execution$result&nbsp;=&nbsp;pg_prepare($dbconn,&nbsp;\"my_query\",&nbsp;'SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;$1');\/\/&nbsp;Execute&nbsp;the&nbsp;prepared&nbsp;query.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to&nbsp;escape\/\/&nbsp;the&nbsp;string&nbsp;\"Joe's&nbsp;Widgets\"&nbsp;in&nbsp;any&nbsp;way$result&nbsp;=&nbsp;pg_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Joe's&nbsp;Widgets\"));\/\/&nbsp;Execute&nbsp;the&nbsp;same&nbsp;prepared&nbsp;query,&nbsp;this&nbsp;time&nbsp;with&nbsp;a&nbsp;different&nbsp;parameter$result&nbsp;=&nbsp;pg_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Clothes&nbsp;Clothes&nbsp;Clothes\"));?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_prepare() - Submits a request to create a prepared statement with the \n  given parameters, and waits for completion.\n    pg_send_prepare() - Sends a request to create a prepared statement with the given parameters, without waiting for completion.\n    pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-all-columns.php","title":"pg_fetch_all_columns","description":"\n \n  pg_fetch_all_columns\n  (PHP 5 &gt;= 5.1.0)pg_fetch_all_columns &mdash; Fetches all rows in a particular result column as an array\n\n \n\n \n  Description\n  \n   array pg_fetch_all_columns\n    ( resource $result\n   [, int $column = 0\n  ] )\n\n  \n   pg_fetch_all_columns() returns an array that\n   contains all rows (records) in a particular column of the result resource.\n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     column\n     \n\n      \n       Column number, zero-based, to be retrieved from the result resource.  Defaults\n       to the first column if not specified.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array with all values in the result column.\n  \n  \n   FALSE is returned if column is larger than the number \n   of columns in the result, or on any other error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_fetch_all_columns() example\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;title,&nbsp;name,&nbsp;address&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}\/\/&nbsp;Get&nbsp;an&nbsp;array&nbsp;of&nbsp;all&nbsp;author&nbsp;names$arr&nbsp;=&nbsp;pg_fetch_all_columns($result,&nbsp;1);var_dump($arr);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_fetch_all() - Fetches all rows from a result as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-all.php","title":"pg_fetch_all","description":"\n \n  pg_fetch_all\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_fetch_all &mdash; Fetches all rows from a result as an array\n\n \n\n \n  Description\n  \n   array pg_fetch_all\n    ( resource $result\n   )\n\n  \n   pg_fetch_all() returns an array that\n   contains all rows (records) in the result resource.\n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array with all rows in the result.  Each row is an array\n   of field values indexed by field name.\n  \n  \n   FALSE is returned if there are no rows in the result, or on any\n   other error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 PostgreSQL fetch all\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;&nbsp;&nbsp;exit;}$arr&nbsp;=&nbsp;pg_fetch_all($result);print_r($arr);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [id] =&gt; 1\n            [name] =&gt; Fred\n        )\n\n    [1] =&gt; Array\n        (\n            [id] =&gt; 2\n            [name] =&gt; Bob\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_fetch_row() - Get a row as an enumerated array\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_object() - Fetch a row as an object\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-array.php","title":"pg_fetch_array","description":"\n \n  pg_fetch_array\n  (PHP 4, PHP 5)pg_fetch_array &mdash; Fetch a row as an array\n\n \n\n \n  Description\n  \n   array pg_fetch_array\n    ( resource $result\n   [, int $row\n   [, int $result_type = PGSQL_BOTH\n  ]] )\n\n  \n   pg_fetch_array() returns an array that\n   corresponds to the fetched row (record).\n  \n  \n   pg_fetch_array() is an extended version of\n   pg_fetch_row().  In addition to storing the\n   data in the numeric indices (field number) to the result array, it\n   can also store the data using associative indices (field name).\n   It stores both indicies by default.\n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n  \n   pg_fetch_array() is NOT significantly\n   slower than using pg_fetch_row(), and\n   is significantly easier to use.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      \n       An optional parameter that controls\n       how the returned array is indexed.\n       result_type is a constant and can take the\n       following values: PGSQL_ASSOC, \n       PGSQL_NUM and PGSQL_BOTH.\n       Using PGSQL_NUM, pg_fetch_array()\n       will return an array with numerical indices, using\n       PGSQL_ASSOC it will return only associative indices\n       while PGSQL_BOTH, the default, will return both\n       numerical and associative indices.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array indexed numerically (beginning with 0) or\n   associatively (indexed by field name), or both.\n   Each value in the array is represented as a \n   string.  Database NULL\n   values are returned as NULL.\n  \n  \n   FALSE is returned if row exceeds the number\n   of rows in the set, there are no more rows, or on any other error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The row parameter became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_fetch_array() example\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$arr&nbsp;=&nbsp;pg_fetch_array($result,&nbsp;0,&nbsp;PGSQL_NUM);echo&nbsp;$arr[0]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;1&nbsp;Author\\n\";echo&nbsp;$arr[1]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;1&nbsp;E-mail\\n\";\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;4.1.0,&nbsp;the&nbsp;row&nbsp;parameter&nbsp;is&nbsp;optional;&nbsp;NULL&nbsp;can&nbsp;be&nbsp;passed&nbsp;instead,\/\/&nbsp;to&nbsp;pass&nbsp;a&nbsp;result_type.&nbsp;&nbsp;Successive&nbsp;calls&nbsp;to&nbsp;pg_fetch_array&nbsp;will&nbsp;return&nbsp;the\/\/&nbsp;next&nbsp;row.$arr&nbsp;=&nbsp;pg_fetch_array($result,&nbsp;NULL,&nbsp;PGSQL_ASSOC);echo&nbsp;$arr[\"author\"]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;2&nbsp;Author\\n\";echo&nbsp;$arr[\"email\"]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;2&nbsp;E-mail\\n\";$arr&nbsp;=&nbsp;pg_fetch_array($result);echo&nbsp;$arr[\"author\"]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;3&nbsp;Author\\n\";echo&nbsp;$arr[1]&nbsp;.&nbsp;\"&nbsp;&lt;-&nbsp;Row&nbsp;3&nbsp;E-mail\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_fetch_row() - Get a row as an enumerated array\n    pg_fetch_object() - Fetch a row as an object\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-object.php","title":"pg_fetch_object","description":"\n \n  pg_fetch_object\n  (PHP 4, PHP 5)pg_fetch_object &mdash; Fetch a row as an object\n\n \n\n \n  Description\n  \n   object pg_fetch_object\n    ( resource $result\n   [, int $row\n   [, int $result_type = PGSQL_ASSOC\n  ]] )\n\n  \n   object pg_fetch_object\n    ( resource $result\n   [, int $row\n   [, string $class_name\n   [, array $params\n  ]]] )\n\n  \n   pg_fetch_object() returns an object with\n   properties that correspond to the fetched row&#039;s field names.  It can optionally\n   instantiate an object of a specific class, and pass parameters to that\n   class&#039;s constructor.\n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n  \n   Speed-wise, the function is identical to\n   pg_fetch_array(), and almost as fast as\n   pg_fetch_row() (the difference is\n   insignificant).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched.\n      \n     \n\n    \n\n    \n\n     result_type\n      \n\n       \n        Ignored and deprecated.\n       \n     \n\n    \n\n    \n\n     class_name\n      \n\n       \n        The name of the class to instantiate, set the properties of and return.\n        If not specified, a stdClass object is returned.\n       \n     \n\n    \n\n    \n\n     params\n      \n\n       \n        An optional array of parameters to pass to the constructor\n        for class_name objects.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An object with one attribute for each field\n   name in the result.  Database NULL\n   values are returned as NULL.\n  \n  \n   FALSE is returned if row exceeds the number\n   of rows in the set, there are no more rows, or on any other error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        class_name and params\n        were added. The old form with result_type\n        still exists for backwards compatibility.\n       \n      \n\n      \n       4.3.0\n       \n        result_type default changed from\n        PGSQL_BOTH to PGSQL_ASSOC,\n        since the numeric index was illegal.\n       \n      \n\n      \n       4.1.0\n       \n        The parameter row became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_fetch_object() example\n    \n\n&lt;?php&nbsp;$database&nbsp;=&nbsp;\"store\";$db_conn&nbsp;=&nbsp;pg_connect(\"host=localhost&nbsp;port=5432&nbsp;dbname=$database\");if&nbsp;(!$db_conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Failed&nbsp;connecting&nbsp;to&nbsp;postgres&nbsp;database&nbsp;$database\\n\";&nbsp;&nbsp;exit;}$qu&nbsp;=&nbsp;pg_query($db_conn,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;books&nbsp;ORDER&nbsp;BY&nbsp;author\");while&nbsp;($data&nbsp;=&nbsp;pg_fetch_object($qu))&nbsp;{&nbsp;&nbsp;echo&nbsp;$data-&gt;author&nbsp;.&nbsp;\"&nbsp;(\";&nbsp;&nbsp;echo&nbsp;$data-&gt;year&nbsp;.&nbsp;\"):&nbsp;\";&nbsp;&nbsp;echo&nbsp;$data-&gt;title&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\";}pg_free_result($qu);pg_close($db_conn);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_assoc() - Fetch a row as an associative array\n    pg_fetch_row() - Get a row as an enumerated array\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-result.php","title":"pg_fetch_result","description":"\n \n  pg_fetch_result\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_fetch_result &mdash; Returns values from a result resource\n\n \n\n \n  Description\n  \n   string pg_fetch_result\n    ( resource $result\n   , int $row\n   , mixed $field\n   )\n\n  \n   string pg_fetch_result\n    ( resource $result\n   , mixed $field\n   )\n\n  \n   pg_fetch_result() returns the value of a particular\n   row and field (column) in a PostgreSQL result resource.\n  \n  Note: \n   \n    This function used to be called pg_result().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,\n       next row is fetched.\n      \n     \n\n    \n\n    \n\n     field\n     \n\n             \n       A string representing the name of the field (column) to fetch, otherwise\n       an int representing the field number to fetch.  Fields are\n       numbered from 0 upwards.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Boolean is returned as &quot;t&quot; or &quot;f&quot;.  All\n   other types, including arrays are returned as strings formatted\n   in the same default PostgreSQL manner that you would see in the\n   psql program.  Database NULL\n   values are returned as NULL.\n  \n  \n   FALSE is returned if row exceeds the number\n   of rows in the set, or on any other error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_fetch_result() example\n    \n\n&lt;?php$db&nbsp;=&nbsp;pg_connect(\"dbname=users&nbsp;user=me\")&nbsp;||&nbsp;die();$res&nbsp;=&nbsp;pg_query($db,&nbsp;\"SELECT&nbsp;1&nbsp;UNION&nbsp;ALL&nbsp;SELECT&nbsp;2\");$val&nbsp;=&nbsp;pg_fetch_result($res,&nbsp;1,&nbsp;0);echo&nbsp;\"First&nbsp;field&nbsp;in&nbsp;the&nbsp;second&nbsp;row&nbsp;is:&nbsp;\",&nbsp;$val,&nbsp;\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nFirst field in the second row is: 2\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_fetch_array() - Fetch a row as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-row.php","title":"pg_fetch_row","description":"\n \n  pg_fetch_row\n  (PHP 4, PHP 5)pg_fetch_row &mdash; Get a row as an enumerated array\n\n \n\n \n  Description\n  \n   array pg_fetch_row\n    ( resource $result\n   [, int $row\n   \n  ] )\n\n  \n   pg_fetch_row() fetches one row of data from\n   the result associated with the specified\n   result resource.\n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array, indexed from 0 upwards, with each value\n   represented as a string.  Database NULL\n   values are returned as NULL.\n  \n  \n   FALSE is returned if row exceeds the number\n   of rows in the set, there are no more rows, or on any other error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The parameter row became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_fetch_row() example\n    \n\n&lt;?php$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}while&nbsp;($row&nbsp;=&nbsp;pg_fetch_row($result))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Author:&nbsp;$row[0]&nbsp;&nbsp;E-mail:&nbsp;$row[1]\";&nbsp;&nbsp;echo&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_object() - Fetch a row as an object\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-num.php","title":"pg_field_num","description":"\n \n  pg_field_num\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_num &mdash; Returns the field number of the named field\n\n \n\n \n  Description\n  \n   int pg_field_num\n    ( resource $result\n   , string $field_name\n   )\n\n  \n   pg_field_num() will return the number of the\n   field number that corresponds to the\n   field_name in the given PostgreSQL\n   result resource.\n  \n  Note: \n   \n    This function used to be called pg_fieldnum().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_name\n      \n\n       \n        The name of the field.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The field number (numbered from 0), or -1 on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;author,&nbsp;year,&nbsp;title&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Column&nbsp;'title'&nbsp;is&nbsp;field&nbsp;number:&nbsp;\",&nbsp;pg_field_num($res,&nbsp;'title');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nColumn &#039;title&#039; is field number: 2\n\n    \n    \n  \n \n\n  \n \n  See Also\n  \n   \n    pg_field_name() - Returns the name of a field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-is-null.php","title":"pg_field_is_null","description":"\n \n  pg_field_is_null\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_is_null &mdash; Test if a field is SQL NULL\n\n \n\n \n  Description\n  \n   int pg_field_is_null\n    ( resource $result\n   , int $row\n   , mixed $field\n   )\n\n  \n   int pg_field_is_null\n    ( resource $result\n   , mixed $field\n   )\n\n  \n   pg_field_is_null() tests if a field in a PostgreSQL\n   result resource is SQL NULL or not.\n  \n  Note: \n   \n    This function used to be called pg_fieldisnull().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch.  Rows are numbered from 0 upwards.  If omitted,\n       current row is fetched.\n      \n     \n\n    \n\n    \n\n     field\n      \n\n       \n        Field number (starting from 0) as an integer or \n        the field name as a string.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 1 if the field in the given row is SQL NULL, 0\n   if not.  FALSE is returned if the row is out of range, or upon any other error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_field_is_null() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die&nbsp;(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;if&nbsp;($res)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pg_field_is_null($res,&nbsp;0,&nbsp;\"year\")&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;value&nbsp;of&nbsp;the&nbsp;field&nbsp;year&nbsp;is&nbsp;null.\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pg_field_is_null($res,&nbsp;0,&nbsp;\"year\")&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;value&nbsp;of&nbsp;the&nbsp;field&nbsp;year&nbsp;is&nbsp;not&nbsp;null.\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-fetch-assoc.php","title":"pg_fetch_assoc","description":"\n \n  pg_fetch_assoc\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_fetch_assoc &mdash; Fetch a row as an associative array\n\n \n\n \n  Description\n  \n   array pg_fetch_assoc\n    ( resource $result\n   [, int $row\n  ] )\n\n  \n   pg_fetch_assoc() returns an associative array that\n   corresponds to the fetched row (records).\n  \n  \n   pg_fetch_assoc() is equivalent to calling\n   pg_fetch_array() with PGSQL_ASSOC as the\n   optional third parameter. It only returns an associative array.\n   If you need the numeric indices, use \n   pg_fetch_row().  \n  \n  Note: This function sets NULL fields to\nthe PHP NULL value.\n  \n   pg_fetch_assoc() is NOT significantly\n   slower than using pg_fetch_row(), and\n   is significantly easier to use.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result to fetch. Rows are numbered from 0 upwards. If\n       omitted or NULL, the next row is fetched.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array indexed associatively (by field name).\n   Each value in the array is represented as a \n   string.  Database NULL\n   values are returned as NULL.\n  \n  \n   FALSE is returned if row exceeds the number\n   of rows in the set, there are no more rows, or on any other error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The parameter row became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_fetch_assoc() example\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;id,&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}while&nbsp;($row&nbsp;=&nbsp;pg_fetch_assoc($result))&nbsp;{&nbsp;&nbsp;echo&nbsp;$row['id'];&nbsp;&nbsp;echo&nbsp;$row['author'];&nbsp;&nbsp;echo&nbsp;$row['email'];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_fetch_row() - Get a row as an enumerated array\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_object() - Fetch a row as an object\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-name.php","title":"pg_field_name","description":"\n \n  pg_field_name\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_name &mdash; Returns the name of a field\n\n \n\n \n  Description\n  \n   string pg_field_name\n    ( resource $result\n   , int $field_number\n   )\n\n  \n   pg_field_name() returns the name of the field\n   occupying the given field_number in the\n   given PostgreSQL result resource.  Field\n   numbering starts from 0.\n  \n  Note: \n   \n    This function used to be called pg_fieldname().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_number\n      \n\n       \n        Field number, starting from 0.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The field name, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;$i&nbsp;=&nbsp;pg_num_fields($res);&nbsp;&nbsp;for&nbsp;($j&nbsp;=&nbsp;0;&nbsp;$j&nbsp;&lt;&nbsp;$i;&nbsp;$j++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"column&nbsp;$j\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fieldname&nbsp;=&nbsp;pg_field_name($res,&nbsp;$j);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"fieldname:&nbsp;$fieldname\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"printed&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_prtlen($res,&nbsp;$fieldname)&nbsp;.&nbsp;\"&nbsp;characters\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"storage&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_size($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;bytes\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"field&nbsp;type:&nbsp;\"&nbsp;.&nbsp;pg_field_type($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;\\n\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\ncolumn 0\nfieldname: author\nprinted length: 6 characters\nstorage length: -1 bytes\nfield type: varchar \n\ncolumn 1\nfieldname: year\nprinted length: 4 characters\nstorage length: 2 bytes\nfield type: int2 \n\ncolumn 2\nfieldname: title\nprinted length: 24 characters\nstorage length: -1 bytes\nfield type: varchar \n\n    \n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_field_num() - Returns the field number of the named field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-prtlen.php","title":"pg_field_prtlen","description":"\n \n  pg_field_prtlen\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_prtlen &mdash; Returns the printed length\n\n \n\n \n  Description\n  \n   int pg_field_prtlen\n    ( resource $result\n   , int $row_number\n   , mixed $field_name_or_number\n   )\n\n  \n   int pg_field_prtlen\n    ( resource $result\n   , mixed $field_name_or_number\n   )\n\n  \n   pg_field_prtlen() returns the actual printed\n   length (number of characters) of a specific value in a PostgreSQL\n   result.  Row numbering starts at 0.  This\n   function will return FALSE on an error.\n  \n  \n   field_name_or_number can be passed either as an\n   integer or as a string. If it is passed as an\n   integer, PHP recognises it as the field number, otherwise as\n   field name.\n  \n  \n   See the example given at the pg_field_name() page.\n  \n  Note: \n   \n     This function used to be called pg_fieldprtlen().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Row number in result.  Rows are numbered from 0 upwards.  If omitted,\n       current row is fetched.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The field printed length, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;$i&nbsp;=&nbsp;pg_num_fields($res);&nbsp;&nbsp;for&nbsp;($j&nbsp;=&nbsp;0;&nbsp;$j&nbsp;&lt;&nbsp;$i;&nbsp;$j++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"column&nbsp;$j\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fieldname&nbsp;=&nbsp;pg_field_name($res,&nbsp;$j);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"fieldname:&nbsp;$fieldname\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"printed&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_prtlen($res,&nbsp;$fieldname)&nbsp;.&nbsp;\"&nbsp;characters\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"storage&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_size($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;bytes\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"field&nbsp;type:&nbsp;\"&nbsp;.&nbsp;pg_field_type($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;\\n\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\ncolumn 0\nfieldname: author\nprinted length: 6 characters\nstorage length: -1 bytes\nfield type: varchar \n\ncolumn 1\nfieldname: year\nprinted length: 4 characters\nstorage length: 2 bytes\nfield type: int2 \n\ncolumn 2\nfieldname: title\nprinted length: 24 characters\nstorage length: -1 bytes\nfield type: varchar \n\n    \n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_field_size() - Returns the internal storage size of the named field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-table.php","title":"pg_field_table","description":"\n \n  pg_field_table \n  (PHP 5 &gt;= 5.2.0)pg_field_table &mdash; Returns the name or oid of the tables field\n\n \n\n \n  Description\n  \n   mixed pg_field_table\n    ( resource $result\n   , int $field_number\n   [, bool $oid_only = false\n  ] )\n\n  \n   pg_field_table() returns the name of the table that field \n   belongs to, or the table&#039;s oid if oid_only is TRUE.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_number\n      \n\n       \n        Field number, starting from 0.\n       \n     \n\n    \n\n    \n\n     oid_only\n      \n\n       \n        By default the tables name that field belongs to is returned but\n        if oid_only is set to TRUE, then the\n        oid will instead be returned.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success either the fields table name or oid. Or, FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting table information about a field\n    \n\n&lt;?php$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"SELECT&nbsp;bar&nbsp;FROM&nbsp;foo\");echo&nbsp;pg_field_table($res,&nbsp;0);echo&nbsp;pg_field_table($res,&nbsp;0,&nbsp;true);$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"SELECT&nbsp;version()\");var_dump(pg_field_table($res,&nbsp;0));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nfoo\n14379580\n\nbool(false)\n\n    \n    \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Returning the oid is much faster than returning the table name because\n    fetching the table name requires a query to the database system table.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_field_name() - Returns the name of a field\n    pg_field_type() - Returns the type name for the corresponding field number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-type-oid.php","title":"pg_field_type_oid","description":"\n \n  pg_field_type_oid \n  (PHP 5 &gt;= 5.1.0)pg_field_type_oid &mdash; \n   Returns the type ID (OID) for the corresponding field number\n  \n\n \n\n \n  Description\n  \n   int pg_field_type_oid\n    ( resource $result\n   , int $field_number\n   )\n\n  \n   pg_field_type_oid() returns an integer containing the\n   OID of the base type of the given field_number in the\n   given PostgreSQL result resource.\n  \n  \n    You can get more information about the field type by querying PostgreSQL&#039;s\n    pg_type system table using the OID obtained with this function.\n    The PostgreSQL format_type() function will convert a\n    type OID into an SQL standard type name.\n  \n  Note: \n   \n    If the field uses a PostgreSQL domain (rather than a basic type), it is\n    the OID of the domain&#039;s underlying type that is returned, rather than the OID\n    of the domain itself.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_number\n      \n\n       \n        Field number, starting from 0.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The OID of the field&#039;s base type. FALSE is returned on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Assume&nbsp;'title'&nbsp;is&nbsp;a&nbsp;varchar&nbsp;type&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;title&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;echo&nbsp;\"Title&nbsp;field&nbsp;type&nbsp;OID:&nbsp;\",&nbsp;pg_field_type_oid($res,&nbsp;0);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nTitle field type OID: 1043\n\n    \n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_field_type() - Returns the type name for the corresponding field number\n    pg_field_prtlen() - Returns the printed length\n    pg_field_name() - Returns the name of a field\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-size.php","title":"pg_field_size","description":"\n \n  pg_field_size \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_size &mdash; \n   Returns the internal storage size of the named field\n  \n\n \n\n \n  Description\n  \n   int pg_field_size\n    ( resource $result\n   , int $field_number\n   )\n\n  \n   pg_field_size() returns the internal storage\n   size (in bytes) of the field number in the given PostgreSQL\n   result.\n  \n  Note: \n   \n    This function used to be called pg_fieldsize().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_number\n      \n\n       \n        Field number, starting from 0.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The internal field storage size (in bytes).  -1 indicates a variable\n   length field.  FALSE is returned on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;$i&nbsp;=&nbsp;pg_num_fields($res);&nbsp;&nbsp;for&nbsp;($j&nbsp;=&nbsp;0;&nbsp;$j&nbsp;&lt;&nbsp;$i;&nbsp;$j++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"column&nbsp;$j\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fieldname&nbsp;=&nbsp;pg_field_name($res,&nbsp;$j);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"fieldname:&nbsp;$fieldname\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"printed&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_prtlen($res,&nbsp;$fieldname)&nbsp;.&nbsp;\"&nbsp;characters\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"storage&nbsp;length:&nbsp;\"&nbsp;.&nbsp;pg_field_size($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;bytes\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"field&nbsp;type:&nbsp;\"&nbsp;.&nbsp;pg_field_type($res,&nbsp;$j)&nbsp;.&nbsp;\"&nbsp;\\n\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\ncolumn 0\nfieldname: author\nprinted length: 6 characters\nstorage length: -1 bytes\nfield type: varchar \n\ncolumn 1\nfieldname: year\nprinted length: 4 characters\nstorage length: 2 bytes\nfield type: int2 \n\ncolumn 2\nfieldname: title\nprinted length: 24 characters\nstorage length: -1 bytes\nfield type: varchar \n\n    \n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_field_prtlen() - Returns the printed length\n    pg_field_type() - Returns the type name for the corresponding field number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-field-type.php","title":"pg_field_type","description":"\n \n  pg_field_type \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_field_type &mdash; \n   Returns the type name for the corresponding field number\n  \n\n \n\n \n  Description\n  \n   string pg_field_type\n    ( resource $result\n   , int $field_number\n   )\n\n  \n   pg_field_type() returns a string containing the\n   base type name of the given field_number in the\n   given PostgreSQL result resource.\n  \n  Note: \n   \n    If the field uses a PostgreSQL domain (rather than a basic type), it is\n    the name of the domain&#039;s underlying type that is returned, rather than the \n    name of the domain itself.\n   \n  \n  Note: \n   \n    This function used to be called pg_fieldtype().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     field_number\n      \n\n       \n        Field number, starting from 0.\n       \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the base name of the field&#039;s type, or FALSE\n   on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting information about fields\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Assume&nbsp;'title'&nbsp;is&nbsp;a&nbsp;varchar&nbsp;type&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;title&nbsp;from&nbsp;authors&nbsp;where&nbsp;author&nbsp;=&nbsp;'Orwell'\");&nbsp;&nbsp;echo&nbsp;\"Title&nbsp;field&nbsp;type:&nbsp;\",&nbsp;pg_field_type($res,&nbsp;0);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nTitle field type: varchar\n\n    \n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_field_prtlen() - Returns the printed length\n    pg_field_name() - Returns the name of a field\n    pg_field_type_oid() - Returns the type ID (OID) for the corresponding field number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-free-result.php","title":"pg_free_result","description":"\n \n  pg_free_result \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_free_result &mdash; Free result memory\n\n \n\n \n  Description\n  \n   bool pg_free_result\n    ( resource $result\n   )\n\n  \n   pg_free_result() frees the memory and data associated with the\n   specified PostgreSQL query result resource.\n  \n  \n   This function need only be called if memory\n   consumption during script execution is a problem.   Otherwise, all result memory will \n   be automatically freed when the script ends.\n  \n  Note: \n   \n    This function used to be called pg_freeresult().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_free_result() example\n    \n\n&lt;?php$db&nbsp;=&nbsp;pg_connect(\"dbname=users&nbsp;user=me\")&nbsp;||&nbsp;die();$res&nbsp;=&nbsp;pg_query($db,&nbsp;\"SELECT&nbsp;1&nbsp;UNION&nbsp;ALL&nbsp;SELECT&nbsp;2\");$val&nbsp;=&nbsp;pg_fetch_result($res,&nbsp;1,&nbsp;0);echo&nbsp;\"First&nbsp;field&nbsp;in&nbsp;the&nbsp;second&nbsp;row&nbsp;is:&nbsp;\",&nbsp;$val,&nbsp;\"\\n\";pg_free_result($res);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nFirst field in the second row is: 2\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_query_params() - Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.\n    pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-notify.php","title":"pg_get_notify","description":"\n \n  pg_get_notify\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_get_notify &mdash; Gets SQL NOTIFY message\n\n \n\n \n  Description\n  \n   array pg_get_notify\n    ( resource $connection\n   [, int $result_type\n  ] )\n\n  \n   pg_get_notify() gets notifications generated by a\n   NOTIFY SQL command. To receive notifications,\n   the LISTEN SQL command must be\n   issued.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      \n       An optional parameter that controls\n       how the returned array is indexed.\n       result_type is a constant and can take the\n       following values: PGSQL_ASSOC, \n       PGSQL_NUM and PGSQL_BOTH.\n       Using PGSQL_NUM, pg_get_notify()\n       will return an array with numerical indices, using\n       PGSQL_ASSOC it will return only associative indices\n       while PGSQL_BOTH, the default, will return both\n       numerical and associative indices.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array containing the NOTIFY message name and backend PID.\n   Otherwise if no NOTIFY is waiting, then FALSE is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 PostgreSQL NOTIFY message\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}\/\/&nbsp;Listen&nbsp;'author_updated'&nbsp;message&nbsp;from&nbsp;other&nbsp;processespg_query($conn,&nbsp;'LISTEN&nbsp;author_updated;');$notify&nbsp;=&nbsp;pg_get_notify($conn);if&nbsp;(!$notify)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"No&nbsp;messages\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;print_r($notify);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_get_pid() - Gets the backend's process ID\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-pid.php","title":"pg_get_pid","description":"\n \n  pg_get_pid\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_get_pid &mdash; Gets the backend&#039;s process ID\n\n \n\n \n  Description\n  \n   int pg_get_pid\n    ( resource $connection\n   )\n\n  \n   pg_get_pid() gets the backend&#039;s (database server\n   process) PID. The PID is useful to determine whether or not a NOTIFY\n   message received via pg_get_notify() is sent from another process\n   or not.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The backend database process ID.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 PostgreSQL backend PID\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}\/\/&nbsp;Backend&nbsp;process&nbsp;PID.&nbsp;Use&nbsp;PID&nbsp;with&nbsp;pg_get_notify()$pid&nbsp;=&nbsp;pg_get_pid($conn);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_get_notify() - Gets SQL NOTIFY message\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-get-result.php","title":"pg_get_result","description":"\n \n  pg_get_result\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_get_result &mdash; \n   Get asynchronous query result\n  \n\n \n\n \n  Description\n  \n   resource pg_get_result\n    ([ resource $connection\n  ] )\n\n  \n   pg_get_result() gets the result resource from\n   an asynchronous query executed by\n   pg_send_query(), pg_send_query_params() or\n   pg_send_execute().\n  \n  pg_send_query() and the\n   other asynchronous query functions\n   can send multiple queries to a PostgreSQL server and\n   pg_get_result() is used to get each query&#039;s results,\n   one by one.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The result resource, or FALSE if no more results are available.\n  \n \n \n\n \n  Examples\n  \n   \n    Example #1 pg_get_result() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors;&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;authors;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;\"First&nbsp;call&nbsp;to&nbsp;pg_get_result():&nbsp;$res1\\n\";&nbsp;&nbsp;$rows1&nbsp;=&nbsp;pg_num_rows($res1);&nbsp;&nbsp;echo&nbsp;\"$res1&nbsp;has&nbsp;$rows1&nbsp;records\\n\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$res2&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;\"Second&nbsp;call&nbsp;to&nbsp;pg_get_result():&nbsp;$res2\\n\";&nbsp;&nbsp;$rows2&nbsp;=&nbsp;pg_num_rows($res2);&nbsp;&nbsp;echo&nbsp;\"$res2&nbsp;has&nbsp;$rows2&nbsp;records\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nFirst call to pg_get_result(): Resource id #3\nResource id #3 has 3 records\n\nSecond call to pg_get_result(): Resource id #4\nResource id #4 has 1 records\n\n    \n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_send_query() - Sends asynchronous query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-host.php","title":"pg_host","description":"\n \n  pg_host \n  (PHP 4, PHP 5)pg_host &mdash; \n   Returns the host name associated with the connection\n  \n\n \n\n \n  Description\n  \n   string pg_host\n    ([ resource $connection\n  ] )\n\n  \n   pg_host() returns the host name of the given\n   PostgreSQL connection resource is\n   connected to.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the name of the host the \n   connection is to, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_host() example\n    \n\n&lt;?php$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");if&nbsp;($pgsql_conn)&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;\"Successfully&nbsp;connected&nbsp;to:&nbsp;\"&nbsp;.&nbsp;pg_host($pgsql_conn)&nbsp;.&nbsp;\"&lt;br\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;pg_last_error($pgsql_conn);&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n    pg_pconnect() - Open a persistent PostgreSQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-insert.php","title":"pg_insert","description":"\n \n  pg_insert\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_insert &mdash; \n   Insert array into table\n  \n\n \n\n \n  Description\n  \n   mixed pg_insert\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )\n\n  \n   pg_insert() inserts the values of assoc_array \n   into the table specified by table_name.\n   If options is\n   specified, pg_convert() is applied\n   to assoc_array with the specified options.\n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table into which to insert rows.  The table table_name must at least \n       have as many columns as assoc_array has elements.\n      \n     \n\n    \n\n    \n\n     assoc_array\n     \n\n      \n       An array whose keys are field names in the table table_name,\n       and whose values are the values of those fields that are to be inserted.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Any number of PGSQL_CONV_OPTS, \n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_insert() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;safe,&nbsp;since&nbsp;$_POST&nbsp;is&nbsp;converted&nbsp;automatically&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_insert($dbconn,&nbsp;'post_log',&nbsp;$_POST);&nbsp;&nbsp;if&nbsp;($res)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"POST&nbsp;data&nbsp;is&nbsp;successfully&nbsp;logged\\n\";&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"User&nbsp;must&nbsp;have&nbsp;sent&nbsp;wrong&nbsp;inputs\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_convert() - Convert associative array values into suitable for SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-notice.php","title":"pg_last_notice","description":"\n \n  pg_last_notice \n  (PHP 4 &gt;= 4.0.6, PHP 5)pg_last_notice &mdash; \n   Returns the last notice message from PostgreSQL server\n  \n\n \n\n \n  Description\n  \n   string pg_last_notice\n    ( resource $connection\n   )\n\n  \n   pg_last_notice() returns the last notice\n   message from the PostgreSQL server on the specified\n   connection. The PostgreSQL server sends notice\n   messages in several cases, for instance when creating a SERIAL\n   column in a table.\n  \n  \n   With pg_last_notice(), you can avoid issuing useless\n   queries by checking whether or not the notice is related to your transaction.\n  \n  \n   Notice message tracking can be set to optional by setting 1 for\n   pgsql.ignore_notice in php.ini.\n  \n  \n   Notice message logging can be set to optional by setting 0 for\n   pgsql.log_notice in php.ini.\n   Unless pgsql.ignore_notice is set\n   to 0, notice message cannot be logged.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the last notice on the \n   given connection, or FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        This function is now fully implemented. Earlier versions ignores\n        database connection parameter.\n       \n      \n\n      \n       4.3.0\n       \n        The pgsql.ignore_notice and \n        pgsql.log_notice php.ini directives were added.\n       \n      \n\n      \n       4.0.6\n       \n        PHP 4.0.6 has problem with notice message handling. Use of the\n        PostgreSQL module with PHP 4.0.6 is not recommended even if you are\n        not using pg_last_notice().\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_last_notice() example\n    \n\n&lt;?php&nbsp;&nbsp;$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query(\"CREATE&nbsp;TABLE&nbsp;test&nbsp;(id&nbsp;SERIAL)\");&nbsp;&nbsp;&nbsp;&nbsp;$notice&nbsp;=&nbsp;pg_last_notice($pgsql_conn);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$notice;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nCREATE TABLE will create implicit sequence &quot;test_id_seq&quot; for &quot;serial&quot; column &quot;test.id&quot;\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_last_error() - Get the last error message string of a connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-error.php","title":"pg_last_error","description":"\n \n  pg_last_error\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_last_error &mdash; Get the last error message string of a connection\n\n \n\n \n  Description\n  \n   string pg_last_error\n    ([ resource $connection\n  ] )\n\n  \n   pg_last_error() returns the last error message\n   for a given connection. \n  \n  \n   Error messages may be overwritten by internal PostgreSQL (libpq)\n   function calls. It may not return an appropriate error message if\n   multiple errors occur inside a PostgreSQL module function.\n  \n  \n   Use pg_result_error(), pg_result_error_field(),\n   pg_result_status() and\n   pg_connection_status() for better error handling.\n  \n  Note: \n   \n    This function used to be called pg_errormessage().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the last error message on the \n   given connection, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_last_error() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Query&nbsp;that&nbsp;fails&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;doesnotexist\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;pg_last_error($dbconn);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_result_error() - Get error message associated with result\n    pg_result_error_field() - Returns an individual field of an error report.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-close.php","title":"pg_lo_close","description":"\n \n  pg_lo_close\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_close &mdash; Close a large object\n\n \n\n \n  Description\n  \n   bool pg_lo_close\n    ( resource $large_object\n   )\n\n  \n   pg_lo_close() closes a large\n   object. large_object is a resource for the\n   large object from pg_lo_open().\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_loclose().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_close() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_lo_create($database);&nbsp;&nbsp;&nbsp;echo&nbsp;\"$oid\\n\";&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$oid,&nbsp;\"w\");&nbsp;&nbsp;&nbsp;echo&nbsp;\"$handle\\n\";&nbsp;&nbsp;&nbsp;pg_lo_write($handle,&nbsp;\"large&nbsp;object&nbsp;data\");&nbsp;&nbsp;&nbsp;pg_lo_close($handle);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_open() - Open a large object\n    pg_lo_create() - Create a large object\n    pg_lo_import() - Import a large object from file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-create.php","title":"pg_lo_create","description":"\n \n  pg_lo_create\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_create &mdash; Create a large object\n\n \n\n \n  Description\n  \n   int pg_lo_create\n    ([ resource $connection\n   [, mixed $object_id\n  ]] )\n\n  \n   int pg_lo_create\n    ( mixed $object_id\n   )\n\n  \n   pg_lo_create() creates a large\n   object and returns the OID of the large\n   object.  PostgreSQL access modes\n   INV_READ, INV_WRITE, and \n   INV_ARCHIVE are not supported, the\n   object is created always with both read and write\n   access. INV_ARCHIVE has been removed from PostgreSQL itself\n   (version 6.3 and above).\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  \n   Instead of using the large object interface (which has no access controls\n   and is cumbersome to use), try PostgreSQL&#039;s bytea\n   column type and pg_escape_bytea().\n  \n  Note: \n   \n    This function used to be called pg_locreate().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     object_id\n     \n\n      \n       If an object_id is given the function\n       will try to create a large object with this id, else a free\n       object id is assigned by the server. The parameter\n       was added in PHP 5.3 and relies on functionality that first\n       appeared in PostgreSQL 8.1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n\n \n  Return Values\n  \n   A large object OID or FALSE on error.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The optional object_id was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_lo_create() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_lo_create($database);&nbsp;&nbsp;&nbsp;echo&nbsp;\"$oid\\n\";&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$oid,&nbsp;\"w\");&nbsp;&nbsp;&nbsp;echo&nbsp;\"$handle\\n\";&nbsp;&nbsp;&nbsp;pg_lo_write($handle,&nbsp;\"large&nbsp;object&nbsp;data\");&nbsp;&nbsp;&nbsp;pg_lo_close($handle);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-last-oid.php","title":"pg_last_oid","description":"\n \n  pg_last_oid \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_last_oid &mdash; Returns the last row&#039;s OID\n\n \n\n \n  Description\n  \n   string pg_last_oid\n    ( resource $result\n   )\n\n  \n   pg_last_oid() is used to retrieve the\n   OID assigned to an inserted row.\n  \n  \n   OID field became an optional field from PostgreSQL 7.2 and will\n   not be present by default in PostgreSQL 8.1. When the\n   OID field is not present in a table, the programmer must use \n   pg_result_status() to check for successful\n   insertion.\n  \n  \n   To get the value of a SERIAL field in an inserted\n   row, it is necessary to use the PostgreSQL CURRVAL\n   function, naming the sequence whose last value is required.  If the\n   name of the sequence is unknown, the pg_get_serial_sequence\n   PostgreSQL 8.0 function is necessary.\n  \n  \n   PostgreSQL 8.1 has a function LASTVAL that returns\n   the value of the most recently used sequence in the session.  This avoids\n   the need for naming the sequence, table or column altogether.\n  \n  Note: \n   \n    This function used to be called pg_getlastoid().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the OID assigned to the most recently inserted\n   row in the specified connection, or FALSE on error or\n   no available OID.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_last_oid() example\n    \n\n&lt;?php&nbsp;&nbsp;$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_query(\"CREATE&nbsp;TABLE&nbsp;test&nbsp;(a&nbsp;INTEGER)&nbsp;WITH&nbsp;OIDS\");&nbsp;&nbsp;$res2&nbsp;=&nbsp;pg_query(\"INSERT&nbsp;INTO&nbsp;test&nbsp;VALUES&nbsp;(1)\");&nbsp;&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_last_oid($res2);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_result_status() - Get status of query result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-export.php","title":"pg_lo_export","description":"\n \n  pg_lo_export\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_export &mdash; Export a large object to file\n\n \n\n \n  Description\n  \n   bool pg_lo_export\n    ([ resource $connection\n   ], int $oid\n   , string $pathname\n   )\n\n  \n   pg_lo_export() takes a large object in a\n   PostgreSQL database and saves its contents to a file on the local\n   filesystem.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_loexport().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     oid\n     \n\n      \n       The OID of the large object in the database.\n      \n     \n\n    \n\n    \n\n     pathname\n     \n\n      \n       The full path and file name of the file in which to write the\n       large object on the client filesystem.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_export() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_lo_create($database);&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$oid,&nbsp;\"w\");&nbsp;&nbsp;&nbsp;pg_lo_write($handle,&nbsp;\"large&nbsp;object&nbsp;data\");&nbsp;&nbsp;&nbsp;pg_lo_close($handle);&nbsp;&nbsp;&nbsp;pg_lo_export($database,&nbsp;$oid,&nbsp;'\/tmp\/lob.dat');&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_import() - Import a large object from file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-open.php","title":"pg_lo_open","description":"\n \n  pg_lo_open\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_open &mdash; Open a large object\n\n \n\n \n  Description\n  \n   resource pg_lo_open\n    ( resource $connection\n   , int $oid\n   , string $mode\n   )\n\n  \n   pg_lo_open() opens a large object in the database\n   and returns large object resource so that it can be manipulated.\n  \n  Warning\n   \n    Do not close the database connection before closing the large\n    object resource. \n   \n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_loopen().\n   \n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     oid\n     \n\n      \n       The OID of the large object in the database.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Can be either &quot;r&quot; for read-only, &quot;w&quot; for write only or &quot;rw&quot; for read and \n       write.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A large object resource or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_open() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_lo_create($database);&nbsp;&nbsp;&nbsp;echo&nbsp;\"$oid\\n\";&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$oid,&nbsp;\"w\");&nbsp;&nbsp;&nbsp;echo&nbsp;\"$handle\\n\";&nbsp;&nbsp;&nbsp;pg_lo_write($handle,&nbsp;\"large&nbsp;object&nbsp;data\");&nbsp;&nbsp;&nbsp;pg_lo_close($handle);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_close() - Close a large object\n    pg_lo_create() - Create a large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-import.php","title":"pg_lo_import","description":"\n \n  pg_lo_import\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_import &mdash; Import a large object from file\n\n \n\n \n  Description\n  \n   int pg_lo_import\n    ([ resource $connection\n   ], string $pathname\n   [, mixed $object_id\n  ] )\n\n  \n   pg_lo_import() creates a new large object\n   in the database using a file on the filesystem as its data\n   source.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: When safe mode is enabled, PHP checks whether\nthe files or directories being operated upon have the same UID (owner) as the\nscript that is being executed.\n  Note: \n   \n    This function used to be called pg_loimport().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     pathname\n     \n\n      \n       The full path and file name of the file on the client\n       filesystem from which to read the large object data.\n      \n     \n\n    \n\n    \n\n     object_id\n     \n\n      \n       If an object_id is given the function\n       will try to create a large object with this id, else a free\n       object id is assigned by the server. The parameter\n       was added in PHP 5.3 and relies on functionality that first\n       appeared in PostgreSQL 8.1.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The OID of the newly created large object, or\n   FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The optional object_id was added.\n       \n      \n\n      \n       4.2.0\n       \n        The syntax of this function changed. It used to be:\n        \n         int pg_lo_import\n          ( string $pathname\n         [, resource $connection\n        ] )\n\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_lo_import() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$oid&nbsp;=&nbsp;pg_lo_import($database,&nbsp;'\/tmp\/lob.dat');&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_export() - Export a large object to file\n    pg_lo_open() - Open a large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-read-all.php","title":"pg_lo_read_all","description":"\n \n  pg_lo_read_all\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_read_all &mdash; \n   Reads an entire large object and send straight to browser\n  \n\n \n\n \n  Description\n  \n   int pg_lo_read_all\n    ( resource $large_object\n   )\n\n  \n   pg_lo_read_all() reads a large object and passes\n   it straight through to the browser after sending all pending\n   headers. Mainly intended for sending binary data like images or\n   sound.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_loreadall().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     large_object\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Number of bytes read or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_read_all() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;header('Content-type:&nbsp;image\/jpeg');&nbsp;&nbsp;&nbsp;$image_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$image_oid,&nbsp;\"r\");&nbsp;&nbsp;&nbsp;pg_lo_read_all($handle);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_read() - Read a large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-read.php","title":"pg_lo_read","description":"\n \n  pg_lo_read\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_read &mdash; Read a large object\n\n \n\n \n  Description\n  \n   string pg_lo_read\n    ( resource $large_object\n   [, int $len = 8192\n  ] )\n\n  \n   pg_lo_read() reads at most\n   len bytes from a large object and\n   returns it as a string.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_loread().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     large_object\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       An optional maximum number of bytes to return.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing len bytes from the\n   large object, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_read() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$doc_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$doc_oid,&nbsp;\"r\");&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;pg_lo_read($handle,&nbsp;50000);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");&nbsp;&nbsp;&nbsp;echo&nbsp;$data;?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_read_all() - Reads an entire large object and send straight to browser\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-seek.php","title":"pg_lo_seek","description":"\n \n  pg_lo_seek\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_seek &mdash; \n   Seeks position within a large object\n  \n\n \n\n \n  Description\n  \n   bool pg_lo_seek\n    ( resource $large_object\n   , int $offset\n   [, int $whence = PGSQL_SEEK_CUR\n  ] )\n\n  \n   pg_lo_seek() seeks a position within a large object\n   resource.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     large_object\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The number of bytes to seek.\n      \n     \n\n    \n\n    \n\n     whence\n     \n\n      \n       One of the constants PGSQL_SEEK_SET (seek from object start), \n       PGSQL_SEEK_CUR (seek from current position)\n       or PGSQL_SEEK_END (seek from object end) .\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_seek() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$doc_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$doc_oid,&nbsp;\"r\");&nbsp;&nbsp;&nbsp;\/\/&nbsp;Skip&nbsp;first&nbsp;50000&nbsp;bytes&nbsp;&nbsp;&nbsp;pg_lo_seek($handle,&nbsp;50000,&nbsp;PGSQL_SEEK_SET);&nbsp;&nbsp;&nbsp;\/\/&nbsp;Read&nbsp;the&nbsp;next&nbsp;10000&nbsp;bytes&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;pg_lo_read($handle,&nbsp;10000);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");&nbsp;&nbsp;&nbsp;echo&nbsp;$data;?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_tell() - Returns current seek position a of large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-tell.php","title":"pg_lo_tell","description":"\n \n  pg_lo_tell\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_tell &mdash; \n   Returns current seek position a of large object\n  \n\n \n\n \n  Description\n  \n   int pg_lo_tell\n    ( resource $large_object\n   )\n\n  \n   pg_lo_tell() returns the current position (offset\n   from the beginning) of a large object.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     large_object\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The current seek offset (in number of bytes) from the beginning of the large\n   object.  If there is an error, the return value is negative.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_tell() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$doc_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$doc_oid,&nbsp;\"r\");&nbsp;&nbsp;&nbsp;\/\/&nbsp;Skip&nbsp;first&nbsp;50000&nbsp;bytes&nbsp;&nbsp;&nbsp;pg_lo_seek($handle,&nbsp;50000,&nbsp;PGSQL_SEEK_SET);&nbsp;&nbsp;&nbsp;\/\/&nbsp;See&nbsp;how&nbsp;far&nbsp;we've&nbsp;skipped&nbsp;&nbsp;&nbsp;$offset&nbsp;=&nbsp;pg_lo_tell($handle);&nbsp;&nbsp;&nbsp;echo&nbsp;\"Seek&nbsp;position&nbsp;is:&nbsp;$offset\";&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nSeek position is: 50000\n\n    \n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_seek() - Seeks position within a large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-write.php","title":"pg_lo_write","description":"\n \n  pg_lo_write\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_write &mdash; Write to a large object\n\n \n\n \n  Description\n  \n   int pg_lo_write\n    ( resource $large_object\n   , string $data\n   [, int $len\n  ] )\n\n  \n   pg_lo_write() writes data into a large object\n   at the current seek position.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_lowrite().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     large_object\n     \n\n      \n       PostgreSQL large object (LOB) resource, returned by pg_lo_open().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The data to be written to the large object.  If len is\n       specified and is less than the length of data, only\n       len bytes will be written.\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       An optional maximum number of bytes to write.  Must be greater than zero\n       and no greater than the length of data.  Defaults to\n       the length of data.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of bytes written to the large object, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_write() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$doc_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;\"This&nbsp;will&nbsp;overwrite&nbsp;the&nbsp;start&nbsp;of&nbsp;the&nbsp;large&nbsp;object.\";&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;$handle&nbsp;=&nbsp;pg_lo_open($database,&nbsp;$doc_oid,&nbsp;\"w\");&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;pg_lo_write($handle,&nbsp;$data);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_create() - Create a large object\n    pg_lo_open() - Open a large object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-lo-unlink.php","title":"pg_lo_unlink","description":"\n \n  pg_lo_unlink\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_lo_unlink &mdash; Delete a large object\n\n \n\n \n  Description\n  \n   bool pg_lo_unlink\n    ( resource $connection\n   , int $oid\n   )\n\n  \n   pg_lo_unlink() deletes a large object with the\n   oid. Returns TRUE on success or FALSE on failure.\n  \n  \n   To use the large object interface, it is necessary to\n   enclose it within a transaction block.\n  \n  Note: \n   \n    This function used to be called pg_lounlink().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     oid\n     \n\n      \n       The OID of the large object in the database.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_lo_unlink() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;OID&nbsp;of&nbsp;the&nbsp;large&nbsp;object&nbsp;to&nbsp;delete&nbsp;&nbsp;&nbsp;$doc_oid&nbsp;=&nbsp;189762345;&nbsp;&nbsp;&nbsp;$database&nbsp;=&nbsp;pg_connect(\"dbname=jacarta\");&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"begin\");&nbsp;&nbsp;&nbsp;pg_lo_unlink($database,&nbsp;$doc_oid);&nbsp;&nbsp;&nbsp;pg_query($database,&nbsp;\"commit\");?&gt;\n\n\n    \n\n    \n  \n \n\n \n \n  See Also\n  \n   \n    pg_lo_create() - Create a large object\n    pg_lo_import() - Import a large object from file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-meta-data.php","title":"pg_meta_data","description":"\n \n  pg_meta_data\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_meta_data &mdash; \n   Get meta data for table\n  \n\n \n\n \n  Description\n  \n   array pg_meta_data\n    ( resource $connection\n   , string $table_name\n   )\n\n  \n   pg_meta_data() returns table definition for\n   table_name as an array.\n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       The name of the table.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An array of the table definition, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Getting table metadata\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$meta&nbsp;=&nbsp;pg_meta_data($dbconn,&nbsp;'authors');&nbsp;&nbsp;if&nbsp;(is_array($meta))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&lt;pre&gt;';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($meta);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'&lt;\/pre&gt;';&nbsp;&nbsp;}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(3) {\n[&quot;author&quot;]=&gt;\narray(5) {\n  [&quot;num&quot;]=&gt;\n  int(1)\n  [&quot;type&quot;]=&gt;\n  string(7) &quot;varchar&quot;\n  [&quot;len&quot;]=&gt;\n  int(-1)\n  [&quot;not null&quot;]=&gt;\n  bool(false)\n  [&quot;has default&quot;]=&gt;\n  bool(false)\n}\n[&quot;year&quot;]=&gt;\narray(5) {\n  [&quot;num&quot;]=&gt;\n  int(2)\n  [&quot;type&quot;]=&gt;\n  string(4) &quot;int2&quot;\n  [&quot;len&quot;]=&gt;\n  int(2)\n  [&quot;not null&quot;]=&gt;\n  bool(false)\n  [&quot;has default&quot;]=&gt;\n  bool(false)\n}\n[&quot;title&quot;]=&gt;\narray(5) {\n  [&quot;num&quot;]=&gt;\n  int(3)\n  [&quot;type&quot;]=&gt;\n  string(7) &quot;varchar&quot;\n  [&quot;len&quot;]=&gt;\n  int(-1)\n  [&quot;not null&quot;]=&gt;\n  bool(false)\n  [&quot;has default&quot;]=&gt;\n  bool(false)\n}\n}\n\n    \n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_convert() - Convert associative array values into suitable for SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-num-fields.php","title":"pg_num_fields","description":"\n \n  pg_num_fields \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_num_fields &mdash; Returns the number of fields in a result\n\n \n\n \n  Description\n  \n   int pg_num_fields\n    ( resource $result\n   )\n\n  \n   pg_num_fields() returns the number of fields\n   (columns) in a PostgreSQL result resource.\n  \n  Note: \n   \n    This function used to be called pg_numfields().\n   \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of fields (columns) in the result. On error, -1 is returned.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_num_fields() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;1,&nbsp;2\");$num&nbsp;=&nbsp;pg_num_fields($result);echo&nbsp;$num&nbsp;.&nbsp;\"&nbsp;field(s)&nbsp;returned.\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n2 field(s) returned.\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_num_rows() - Returns the number of rows in a result\n    pg_affected_rows() - Returns number of affected records (tuples)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-num-rows.php","title":"pg_num_rows","description":"\n \n  pg_num_rows \n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_num_rows &mdash; Returns the number of rows in a result\n\n \n\n \n  Description\n  \n   int pg_num_rows\n    ( resource $result\n   )\n\n  \n   pg_num_rows() will return the number of rows in\n   a PostgreSQL result resource.\n  \n  Note: \n   \n    This function used to be called pg_numrows().\n   \n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The number of rows in the result. On error, -1 is returned.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_num_rows() example\n    \n\n&lt;?php$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;1\");$rows&nbsp;=&nbsp;pg_num_rows($result);echo&nbsp;$rows&nbsp;.&nbsp;\"&nbsp;row(s)&nbsp;returned.\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1 row(s) returned.\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_num_fields() - Returns the number of fields in a result\n    pg_affected_rows() - Returns number of affected records (tuples)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-options.php","title":"pg_options","description":"\n \n  pg_options \n  (PHP 4, PHP 5)pg_options &mdash; Get the options associated with the connection\n\n \n\n \n  Description\n  \n   string pg_options\n    ([ resource $connection\n  ] )\n\n  \n   pg_options() will return a string containing\n   the options specified on the given PostgreSQL\n   connection resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the connection\n   options, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_options() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");&nbsp;&nbsp;&nbsp;echo&nbsp;pg_options($pgsql_conn);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-parameter-status.php","title":"pg_parameter_status","description":"\n \n  pg_parameter_status\n  (PHP 5)pg_parameter_status &mdash; Looks up a current parameter setting of the server.\n\n \n\n \n  Description\n  \n   string pg_parameter_status\n    ([ resource $connection\n   ], string $param_name\n   )\n\n  \n    Looks up a current parameter setting of the server.\n  \n  \n    Certain parameter values are reported by the server automatically at \n    connection startup or whenever their values change. pg_parameter_status() can be \n    used to interrogate these settings. It returns the current value of a \n    parameter if known, or FALSE if the parameter is not known.\n  \n  \n    Parameters reported as of PostgreSQL 8.0 include server_version, \n    server_encoding, client_encoding, \n    is_superuser, session_authorization, \n    DateStyle, TimeZone, and integer_datetimes.\n    (server_encoding, TimeZone, and \n    integer_datetimes were not reported by releases before 8.0.) Note that \n    server_version, server_encoding and integer_datetimes \n    cannot change after PostgreSQL startup.\n  \n  \n    PostgreSQL 7.3 or lower servers do not report parameter settings,\n    pg_parameter_status()\n    includes logic to obtain values for server_version and \n    client_encoding\n    anyway. Applications are encouraged to use pg_parameter_status() rather than ad \n    hoc code to determine these values.\n  \n  Caution\n    \n      On a pre-7.4\n      PostgreSQL server, changing client_encoding via SET after connection startup will \n      not be reflected by pg_parameter_status().\n     \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     param_name\n     \n\n        \n         Possible param_name values include server_version, \n        server_encoding, client_encoding, \n        is_superuser, session_authorization, \n        DateStyle, TimeZone, and \n        integer_datetimes.\n        \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  A string containing the value of the parameter, FALSE on failure or invalid\n  param_name.\n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_parameter_status() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;echo&nbsp;\"Server&nbsp;encoding:&nbsp;\",&nbsp;pg_parameter_status($dbconn,&nbsp;\"server_encoding\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nServer encoding: SQL_ASCII\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-ping.php","title":"pg_ping","description":"\n \n  pg_ping\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_ping &mdash; Ping database connection\n\n \n\n \n  Description\n  \n   bool pg_ping\n    ([ resource $connection\n  ] )\n\n  \n   pg_ping() pings a database connection and tries to\n   reconnect it if it is broken.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_ping() example\n    \n\n&lt;?php&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}if&nbsp;(!pg_ping($conn))&nbsp;&nbsp;die(\"Connection&nbsp;is&nbsp;broken\\n\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_connection_status() - Get connection status\n    pg_connection_reset() - Reset connection (reconnect)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-pconnect.php","title":"pg_pconnect","description":"\n \n  pg_pconnect\n  (PHP 4, PHP 5)pg_pconnect &mdash; Open a persistent PostgreSQL connection\n\n \n\n \n  Description\n  \n   resource pg_pconnect\n    ( string $connection_string\n   [, int $connect_type\n  ] )\n\n  \n   pg_pconnect() opens a connection to a\n   PostgreSQL database. It returns a connection resource that is\n   needed by other PostgreSQL functions.\n  \n  \n   If a second call is made to pg_pconnect() with\n   the same connection_string as an existing connection, the\n   existing connection will be returned unless you pass\n   PGSQL_CONNECT_FORCE_NEW as\n   connect_type.\n  \n  \n   To enable persistent connection, the pgsql.allow_persistent\n   php.ini directive must be set to &quot;On&quot; (which is the default).\n   The maximum number of persistent connection can be defined with the pgsql.max_persistent\n   php.ini directive (defaults to -1 for no limit). The total number\n   of connections can be set with the pgsql.max_links \n   php.ini directive.\n  \n  \n   pg_close() will not close persistent links\n   generated by pg_pconnect().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_string\n     \n\n      \n       The connection_string can be empty to use all default parameters, or it \n       can contain one or more parameter settings separated by whitespace. \n       Each parameter setting is in the form keyword = value. Spaces around \n       the equal sign are optional. To write an empty value or a value \n       containing spaces, surround it with single quotes, e.g., keyword = \n       &#039;a value&#039;. Single quotes and backslashes within the value must be \n       escaped with a backslash, i.e., \\&#039; and \\\\.  \n      \n      \n       The currently recognized parameter keywords are:\n       host, hostaddr, port,\n       dbname, user,\n       password, connect_timeout,\n       options, tty (ignored), sslmode,\n       requiressl (deprecated in favor of sslmode), and\n       service.  Which of these arguments exist depends\n       on your PostgreSQL version.\n      \n     \n\n    \n\n    \n\n     connect_type\n     \n\n      \n       If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection\n       is created, even if the connection_string is identical to\n       an existing connection.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   PostgreSQL connection resource on success, FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_pconnect()\n    \n\n&lt;?php$dbconn&nbsp;=&nbsp;pg_pconnect(\"dbname=mary\");\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"$dbconn2&nbsp;=&nbsp;pg_pconnect(\"host=localhost&nbsp;port=5432&nbsp;dbname=mary\");\/\/&nbsp;connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"&nbsp;on&nbsp;\"localhost\"&nbsp;at&nbsp;port&nbsp;\"5432\"$dbconn3&nbsp;=&nbsp;pg_pconnect(\"host=sheep&nbsp;port=5432&nbsp;dbname=mary&nbsp;user=lamb&nbsp;password=foo\");\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"&nbsp;on&nbsp;the&nbsp;host&nbsp;\"sheep\"&nbsp;with&nbsp;a&nbsp;username&nbsp;and&nbsp;password$conn_string&nbsp;=&nbsp;\"host=sheep&nbsp;port=5432&nbsp;dbname=test&nbsp;user=lamb&nbsp;password=bar\";$dbconn4&nbsp;=&nbsp;pg_pconnect($conn_string);\/\/connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"test\"&nbsp;on&nbsp;the&nbsp;host&nbsp;\"sheep\"&nbsp;with&nbsp;a&nbsp;username&nbsp;and&nbsp;password?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n    \n     \n     Persistent Database Connections\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-port.php","title":"pg_port","description":"\n \n  pg_port\n  (PHP 4, PHP 5)pg_port &mdash; \n   Return the port number associated with the connection\n  \n\n \n\n \n  Description\n  \n   int pg_port\n    ([ resource $connection\n  ] )\n\n  \n   pg_port() returns the port number that the\n   given PostgreSQL connection resource is\n   connected to.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An int containing the port number of the database\n   server the connection is to, \n   or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_port() example\n    \n\n&lt;?php$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");if&nbsp;($pgsql_conn)&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;\"Successfully&nbsp;connected&nbsp;to&nbsp;port:&nbsp;\"&nbsp;.&nbsp;pg_port($pgsql_conn)&nbsp;.&nbsp;\"&lt;br\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;pg_last_error($pgsql_conn);&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-prepare.php","title":"pg_prepare","description":"\n \n  pg_prepare\n  (PHP 5 &gt;= 5.1.0)pg_prepare &mdash;  Submits a request to create a prepared statement with the \n  given parameters, and waits for completion.\n\n \n\n \n  Description\n  \n   resource pg_prepare\n    ([ resource $connection\n   ], string $stmtname\n   , string $query\n   )\n\n  \n    pg_prepare() creates a prepared statement for later execution with \n    pg_execute() or pg_send_execute(). \n    This feature allows commands that will be used repeatedly to \n    be parsed and planned just once, rather than each time they are executed. \n    pg_prepare() is supported only against PostgreSQL 7.4 or\n    higher connections; it will fail when using earlier versions.\n  \n  \n    The function creates a prepared statement named stmtname from the query \n    string, which must contain a single SQL command. stmtname may be &quot;&quot; to \n    create an unnamed statement, in which case any pre-existing unnamed \n    statement is automatically replaced; otherwise it is an error if the \n    statement name is already defined in the current session. If any parameters \n    are used, they are referred to in the query as $1, $2, etc.\n  \n  \n    Prepared statements for use with pg_prepare() can also be created by \n    executing SQL PREPARE statements. (But pg_prepare() is more flexible since it \n    does not require parameter types to be pre-specified.) Also, although there \n    is no PHP function for deleting a prepared statement, the SQL DEALLOCATE\n    statement can be used for that purpose.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     stmtname\n     \n\n      \n       The name to give the prepared statement.  Must be unique per-connection.  If\n       &quot;&quot; is specified, then an unnamed statement is created, overwriting any\n       previously defined unnamed statement.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A query result resource on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_prepare()\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=mary\");\/\/&nbsp;Prepare&nbsp;a&nbsp;query&nbsp;for&nbsp;execution$result&nbsp;=&nbsp;pg_prepare($dbconn,&nbsp;\"my_query\",&nbsp;'SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;$1');\/\/&nbsp;Execute&nbsp;the&nbsp;prepared&nbsp;query.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to&nbsp;escape\/\/&nbsp;the&nbsp;string&nbsp;\"Joe's&nbsp;Widgets\"&nbsp;in&nbsp;any&nbsp;way$result&nbsp;=&nbsp;pg_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Joe's&nbsp;Widgets\"));\/\/&nbsp;Execute&nbsp;the&nbsp;same&nbsp;prepared&nbsp;query,&nbsp;this&nbsp;time&nbsp;with&nbsp;a&nbsp;different&nbsp;parameter$result&nbsp;=&nbsp;pg_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Clothes&nbsp;Clothes&nbsp;Clothes\"));?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.\n    pg_send_execute() - Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-put-line.php","title":"pg_put_line","description":"\n \n  pg_put_line\n  (PHP 4 &gt;= 4.0.3, PHP 5)pg_put_line &mdash; Send a NULL-terminated string to PostgreSQL backend\n\n \n\n \n  Description\n  \n   bool pg_put_line\n    ([ resource $connection\n   ], string $data\n   )\n\n  \n   pg_put_line() sends a NULL-terminated string\n   to the PostgreSQL backend server.  This is needed in conjunction\n   with PostgreSQL&#039;s COPY FROM command.\n  \n  COPY is a high-speed data loading interface\n   supported by PostgreSQL.  Data is passed in without being parsed, \n   and in a single transaction.\n  \n  \n   An alternative to using raw pg_put_line() commands\n   is to use pg_copy_from().  This is a far simpler \n   interface.\n  \n  Note: \n    \n    The application must explicitly send the two characters &quot;\\.&quot;\n    on the last line to indicate to the backend that it has finished\n    sending its data, before issuing pg_end_copy().\n   \n  \n  Warning\n   \n    Use of the pg_put_line() causes most large object\n    operations, including pg_lo_read() and\n    pg_lo_tell(), to subsequently fail. You can use\n    pg_copy_from() and pg_copy_to()\n    instead.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       A line of text to be sent directly to the PostgreSQL backend.  A NULL\n       terminator is added automatically.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_put_line() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=foo\");&nbsp;&nbsp;pg_query($conn,&nbsp;\"create&nbsp;table&nbsp;bar&nbsp;(a&nbsp;int4,&nbsp;b&nbsp;char(16),&nbsp;d&nbsp;float8)\");&nbsp;&nbsp;pg_query($conn,&nbsp;\"copy&nbsp;bar&nbsp;from&nbsp;stdin\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"3\\thello&nbsp;world\\t4.5\\n\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"4\\tgoodbye&nbsp;world\\t7.11\\n\");&nbsp;&nbsp;pg_put_line($conn,&nbsp;\"\\\\.\\n\");&nbsp;&nbsp;pg_end_copy($conn);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_end_copy() - Sync with PostgreSQL backend\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-query-params.php","title":"pg_query_params","description":"\n \n  pg_query_params\n  (PHP 5 &gt;= 5.1.0)pg_query_params &mdash; Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.\n\n \n\n \n  Description\n  \n   resource pg_query_params\n    ([ resource $connection\n   ], string $query\n   , array $params\n   )\n\n  \n    Submits a command to the server and waits for the result, with the ability \n    to pass parameters separately from the SQL command text.\n  \n  \n    pg_query_params() is like pg_query(), \n    but offers additional functionality: parameter \n    values can be specified separately from the command string proper. \n    pg_query_params() is supported only against PostgreSQL 7.4 or\n    higher connections; it will fail when using earlier versions.\n  \n  \n    If parameters are used, they are referred to in the query \n    string as $1, $2, etc.  params specifies the actual values of the \n    parameters. A NULL value in this array means the corresponding parameter is SQL\n    NULL.\n  \n  \n    The primary advantage of pg_query_params() over pg_query() \n    is that parameter values \n    may be separated from the query string, thus avoiding the need for tedious \n    and error-prone quoting and escaping. Unlike pg_query(), \n    pg_query_params() allows at \n    most one SQL command in the given string. (There can be semicolons in it, \n    but not more than one nonempty command.)\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n        An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n    A query result resource on success or FALSE on failure.\n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_query_params()\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;a&nbsp;database&nbsp;named&nbsp;\"mary\"$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=mary\");\/\/&nbsp;Find&nbsp;all&nbsp;shops&nbsp;named&nbsp;Joe's&nbsp;Widgets.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to\/\/&nbsp;escape&nbsp;\"Joe's&nbsp;Widgets\"$result&nbsp;=&nbsp;pg_query_params($dbconn,&nbsp;'SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;$1',&nbsp;array(\"Joe's&nbsp;Widgets\"));\/\/&nbsp;Compare&nbsp;against&nbsp;just&nbsp;using&nbsp;pg_query$str&nbsp;=&nbsp;pg_escape_string(\"Joe's&nbsp;Widgets\");$result&nbsp;=&nbsp;pg_query($dbconn,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;'{$str}'\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_query() - Execute a query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-query.php","title":"pg_query","description":"\n \n  pg_query\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_query &mdash; Execute a query\n\n \n\n \n  Description\n  \n   resource pg_query\n    ([ resource $connection\n   ], string $query\n   )\n\n  \n   pg_query() executes the query\n   on the specified database connection.\n  \n  \n   If an error occurs, and FALSE is returned, details of the error can\n   be retrieved using the pg_last_error()\n   function if the connection is valid.\n  \n  \n   Note: \n    \n     Although connection can be omitted, it\n     is not recommended, since it can be the cause of hard to find\n     bugs in scripts.\n    \n   \n  \n  Note: \n   \n    This function used to be called pg_exec().\n    pg_exec() is still available for compatibility\n    reasons, but users are encouraged to use the newer name.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The SQL statement or statements to be executed. When multiple statements are passed to the function,\n       they are automatically executed as one transaction, unless there are explicit BEGIN\/COMMIT commands\n       included in the query string. However, using multiple transactions in one function call is not recommended.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n    A query result resource on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_query() example\n    \n\n&lt;?php$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}while&nbsp;($row&nbsp;=&nbsp;pg_fetch_row($result))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Author:&nbsp;$row[0]&nbsp;&nbsp;E-mail:&nbsp;$row[1]\";&nbsp;&nbsp;echo&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}&nbsp;?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Using pg_query() with multiple statements\n    \n\n&lt;?php$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");\/\/&nbsp;these&nbsp;statements&nbsp;will&nbsp;be&nbsp;executed&nbsp;as&nbsp;one&nbsp;transaction$query&nbsp;=&nbsp;\"UPDATE&nbsp;authors&nbsp;SET&nbsp;author=UPPER(author)&nbsp;WHERE&nbsp;id=1;\";$query&nbsp;.=&nbsp;\"UPDATE&nbsp;authors&nbsp;SET&nbsp;author=LOWER(author)&nbsp;WHERE&nbsp;id=2;\";$query&nbsp;.=&nbsp;\"UPDATE&nbsp;authors&nbsp;SET&nbsp;author=NULL&nbsp;WHERE&nbsp;id=3;\";pg_query($conn,&nbsp;$query);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n    pg_pconnect() - Open a persistent PostgreSQL connection\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_object() - Fetch a row as an object\n    pg_num_rows() - Returns the number of rows in a result\n    pg_affected_rows() - Returns number of affected records (tuples)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-error-field.php","title":"pg_result_error_field","description":"\n \n  pg_result_error_field\n  (PHP 5 &gt;= 5.1.0)pg_result_error_field &mdash; Returns an individual field of an error report.\n\n \n\n \n  Description\n  \n   string pg_result_error_field\n    ( resource $result\n   , int $fieldcode\n   )\n\n  \n   pg_result_error_field() returns one of the detailed error message\n   fields associated with result resource. It is only available\n   against a PostgreSQL 7.4 or above server.  The error field is specified by\n   the fieldcode.\n  \n  \n   Because pg_query() and pg_query_params() return FALSE if the query fails,\n   you must use pg_send_query() and\n   pg_get_result() to get the result handle.\n  \n  \n   If you need to get additional error information from failed pg_query() queries,  \n   use pg_set_error_verbosity() and pg_last_error()\n   and then parse the result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       A PostgreSQL query result resource from a previously executed\n       statement.\n      \n     \n\n    \n\n    \n\n     fieldcode\n     \n\n        \n         Possible fieldcode values are: PGSQL_DIAG_SEVERITY,\n         PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY,\n         PGSQL_DIAG_MESSAGE_DETAIL,\n         PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,\n         PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only),\n         PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only),\n         PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE,\n         PGSQL_DIAG_SOURCE_LINE or\n         PGSQL_DIAG_SOURCE_FUNCTION.\n        \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  A string containing the contents of the error field, NULL if the field does not exist or FALSE\n  on failure.\n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_result_error_field() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;doesnotexist;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;pg_result_error_field($res1,&nbsp;PGSQL_DIAG_SQLSTATE);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_result_error() - Get error message associated with result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-error.php","title":"pg_result_error","description":"\n \n  pg_result_error\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_result_error &mdash; \n   Get error message associated with result\n  \n\n \n\n \n  Description\n  \n   string pg_result_error\n    ( resource $result\n   )\n\n  \n   pg_result_error() returns any error message\n   associated with the result resource. Therefore,\n   the user has a better chance of getting the correct error message than\n   with pg_last_error().\n  \n  \n   The function pg_result_error_field() can give much greater\n   detail on result errors than pg_result_error().\n  \n  \n   Because pg_query() returns FALSE if the query fails,\n   you must use pg_send_query() and\n   pg_get_result() to get the result handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string if there is an error associated with the\n   result parameter, FALSE otherwise.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_result_error() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;doesnotexist;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;pg_result_error($res1);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_result_error_field() - Returns an individual field of an error report.\n    pg_query() - Execute a query\n    pg_send_query() - Sends asynchronous query\n    pg_get_result() - Get asynchronous query result\n    pg_last_error() - Get the last error message string of a connection\n    pg_last_notice() - Returns the last notice message from PostgreSQL server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-seek.php","title":"pg_result_seek","description":"\n \n  pg_result_seek\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_result_seek &mdash; Set internal row offset in result resource\n\n \n\n \n  Description\n  \n   bool pg_result_seek\n    ( resource $result\n   , int $offset\n   )\n\n  \n   pg_result_seek() sets the internal row offset in\n   a result resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       Row to move the internal offset to in the result resource.\n       Rows are numbered starting from zero.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_result_seek() example\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");\/\/&nbsp;Execute&nbsp;a&nbsp;query$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");\/\/&nbsp;Seek&nbsp;to&nbsp;the&nbsp;3rd&nbsp;row&nbsp;(assuming&nbsp;there&nbsp;are&nbsp;3&nbsp;rows)pg_result_seek($result,&nbsp;2);\/\/&nbsp;Fetch&nbsp;the&nbsp;3rd&nbsp;row$row&nbsp;=&nbsp;pg_fetch_row($result);&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_fetch_row() - Get a row as an enumerated array\n    pg_fetch_assoc() - Fetch a row as an associative array\n    pg_fetch_array() - Fetch a row as an array\n    pg_fetch_object() - Fetch a row as an object\n    pg_fetch_result() - Returns values from a result resource\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-result-status.php","title":"pg_result_status","description":"\n \n  pg_result_status\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_result_status &mdash; \n   Get status of query result\n  \n\n \n\n \n  Description\n  \n   mixed pg_result_status\n    ( resource $result\n   [, int $type = PGSQL_STATUS_LONG\n  ] )\n\n  \n   pg_result_status() returns the status of a result\n   resource, or the PostgreSQL command completion tag associated with the result\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       PostgreSQL query result resource, returned by pg_query(),\n       pg_query_params() or pg_execute()\n       (among others).\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       Either PGSQL_STATUS_LONG to return the numeric status \n       of the result, or PGSQL_STATUS_STRING \n       to return the command tag of the result.\n       If not specified, PGSQL_STATUS_LONG is the default.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Possible return values are PGSQL_EMPTY_QUERY,\n   PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT,\n   PGSQL_COPY_IN, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and\n   PGSQL_FATAL_ERROR if PGSQL_STATUS_LONG is\n   specified.  Otherwise, a string containing the PostgreSQL command tag is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The type parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_result_status() example\n    \n\n&lt;?php\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");\/\/&nbsp;Execute&nbsp;a&nbsp;COPY$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"COPY&nbsp;authors&nbsp;FROM&nbsp;STDIN;\");\/\/&nbsp;Get&nbsp;the&nbsp;result&nbsp;status$status&nbsp;=&nbsp;pg_result_status($result);\/\/&nbsp;Determine&nbsp;statusif&nbsp;($status&nbsp;==&nbsp;PGSQL_COPY_IN)&nbsp;&nbsp;&nbsp;echo&nbsp;\"Copy&nbsp;began.\";else&nbsp;&nbsp;&nbsp;echo&nbsp;\"Copy&nbsp;failed.\";&nbsp;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nCopy began.\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connection_status() - Get connection status\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-select.php","title":"pg_select","description":"\n \n  pg_select\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_select &mdash; \n   Select records\n  \n\n \n\n \n  Description\n  \n   mixed pg_select\n    ( resource $connection\n   , string $table_name\n   , array $assoc_array\n   [, int $options = PGSQL_DML_EXEC\n  ] )\n\n  \n   pg_select() selects records specified by\n   assoc_array which has\n   field=&gt;value. For a successful query, it returns an\n   array containing all records and fields that match the condition\n   specified by assoc_array.\n  \n  If options is specified,\n   pg_convert() is applied to\n   assoc_array with the specified flags.\n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table from which to select rows.\n      \n     \n\n    \n\n    \n\n     assoc_array\n     \n\n      \n       An array whose keys are field names in the table table_name,\n       and whose values are the conditions that a row must meet to be retrieved.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Any number of PGSQL_CONV_FORCE_NULL, \n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_EXEC,\n       PGSQL_DML_ASYNC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_select() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$db&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;safe,&nbsp;since&nbsp;$_POST&nbsp;is&nbsp;converted&nbsp;automatically&nbsp;&nbsp;$rec&nbsp;=&nbsp;pg_select($db,&nbsp;'post_log',&nbsp;$_POST);&nbsp;&nbsp;if&nbsp;($rec)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Records&nbsp;selected\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($rec);&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"User&nbsp;must&nbsp;have&nbsp;sent&nbsp;wrong&nbsp;inputs\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_convert() - Convert associative array values into suitable for SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-execute.php","title":"pg_send_execute","description":"\n \n  pg_send_execute\n  (PHP 5 &gt;= 5.1.0)pg_send_execute &mdash; Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).\n\n \n\n \n  Description\n  \n   bool pg_send_execute\n    ( resource $connection\n   , string $stmtname\n   , array $params\n   )\n\n  \n    Sends a request to execute a prepared statement with given parameters, \n    without waiting for the result(s).\n  \n  \n    This is similar to pg_send_query_params(), but the command to be executed is specified \n    by naming a previously-prepared statement, instead of giving a query string. The \n    function&#039;s parameters are handled identically to pg_execute(). \n    Like pg_execute(), it will not work on pre-7.4 versions of\n    PostgreSQL.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     stmtname\n     \n\n      \n       The name of the prepared statement to execute.  if\n       &quot;&quot; is specified, then the unnamed statement is executed.  The name must have\n       been previously prepared using pg_prepare(), \n       pg_send_prepare() or a PREPARE SQL\n       command.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n        An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  Returns TRUE on success, FALSE on failure.  Use pg_get_result()\n  to determine the query result.\n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_send_execute()\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Prepare&nbsp;a&nbsp;query&nbsp;for&nbsp;execution&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_prepare($dbconn,&nbsp;\"my_query\",&nbsp;'SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;$1');&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;\/\/&nbsp;Execute&nbsp;the&nbsp;prepared&nbsp;query.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to&nbsp;escape&nbsp;&nbsp;\/\/&nbsp;the&nbsp;string&nbsp;\"Joe's&nbsp;Widgets\"&nbsp;in&nbsp;any&nbsp;way&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Joe's&nbsp;Widgets\"));&nbsp;&nbsp;&nbsp;&nbsp;$res2&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Execute&nbsp;the&nbsp;same&nbsp;prepared&nbsp;query,&nbsp;this&nbsp;time&nbsp;with&nbsp;a&nbsp;different&nbsp;parameter&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Clothes&nbsp;Clothes&nbsp;Clothes\"));&nbsp;&nbsp;&nbsp;&nbsp;$res3&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_prepare() - Submits a request to create a prepared statement with the \n  given parameters, and waits for completion.\n    pg_send_prepare() - Sends a request to create a prepared statement with the given parameters, without waiting for completion.\n    pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-query-params.php","title":"pg_send_query_params","description":"\n \n  pg_send_query_params\n  (PHP 5 &gt;= 5.1.0)pg_send_query_params &mdash; Submits a command and separate parameters to the server without waiting for the result(s).\n\n \n\n \n  Description\n  \n   bool pg_send_query_params\n    ( resource $connection\n   , string $query\n   , array $params\n   )\n\n  \n    Submits a command and separate parameters to the server without \n    waiting for the result(s).\n  \n  \n    This is equivalent to pg_send_query() except that query \n    parameters can be specified separately from the \n    query string. The function&#039;s parameters are \n    handled identically to pg_query_params(). Like \n    pg_query_params(), it will not work on pre-7.4 PostgreSQL \n    connections, and it allows only one command in the query string. \n    \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n        An array of parameter values to substitute for the $1, $2, etc. placeholders\n        in the original prepared query string.  The number of elements in the array\n        must match the number of placeholders.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  Returns TRUE on success or FALSE on failure.\n  \n   Use pg_get_result() to determine the query result.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Using pg_send_query_params()\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Using&nbsp;parameters.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to&nbsp;quote&nbsp;or&nbsp;escape&nbsp;&nbsp;\/\/&nbsp;the&nbsp;parameter.&nbsp;&nbsp;pg_send_query_params($dbconn,&nbsp;'select&nbsp;count(*)&nbsp;from&nbsp;authors&nbsp;where&nbsp;city&nbsp;=&nbsp;$1',&nbsp;array('Perth'));&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Compare&nbsp;against&nbsp;basic&nbsp;pg_send_query&nbsp;usage&nbsp;&nbsp;$str&nbsp;=&nbsp;pg_escape_string('Perth');&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;count(*)&nbsp;from&nbsp;authors&nbsp;where&nbsp;city&nbsp;=&nbsp;'${str}'\");?&gt;\n\n\n    \n\n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_send_query() - Sends asynchronous query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-prepare.php","title":"pg_send_prepare","description":"\n \n  pg_send_prepare\n  (PHP 5 &gt;= 5.1.0)pg_send_prepare &mdash; Sends a request to create a prepared statement with the given parameters, without waiting for completion.\n\n \n\n \n  Description\n  \n   bool pg_send_prepare\n    ( resource $connection\n   , string $stmtname\n   , string $query\n   )\n\n  \n    Sends a request to create a prepared statement with the given parameters, \n    without waiting for completion.\n  \n  \n    This is an asynchronous version of pg_prepare(): it returns TRUE if it was able to \n    dispatch the request, and FALSE if not. After a successful call, call \n    pg_get_result() to determine whether the server successfully created the \n    prepared statement. The function&#039;s parameters are handled identically to \n    pg_prepare(). Like pg_prepare(), it will not work \n    on pre-7.4 versions of PostgreSQL.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     stmtname\n     \n\n      \n       The name to give the prepared statement.  Must be unique per-connection.  If\n       &quot;&quot; is specified, then an unnamed statement is created, overwriting any\n       previously defined unnamed statement.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The parameterized SQL statement.  Must contain only a single statement.\n       (multiple statements separated by semi-colons are not allowed.)  If any parameters \n       are used, they are referred to as $1, $2, etc.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  Returns TRUE on success, FALSE on failure.  Use pg_get_result()\n  to determine the query result.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using pg_send_prepare()\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;\/\/&nbsp;Prepare&nbsp;a&nbsp;query&nbsp;for&nbsp;execution&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_prepare($dbconn,&nbsp;\"my_query\",&nbsp;'SELECT&nbsp;*&nbsp;FROM&nbsp;shops&nbsp;WHERE&nbsp;name&nbsp;=&nbsp;$1');&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;\/\/&nbsp;Execute&nbsp;the&nbsp;prepared&nbsp;query.&nbsp;&nbsp;Note&nbsp;that&nbsp;it&nbsp;is&nbsp;not&nbsp;necessary&nbsp;to&nbsp;escape&nbsp;&nbsp;\/\/&nbsp;the&nbsp;string&nbsp;\"Joe's&nbsp;Widgets\"&nbsp;in&nbsp;any&nbsp;way&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Joe's&nbsp;Widgets\"));&nbsp;&nbsp;&nbsp;&nbsp;$res2&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Execute&nbsp;the&nbsp;same&nbsp;prepared&nbsp;query,&nbsp;this&nbsp;time&nbsp;with&nbsp;a&nbsp;different&nbsp;parameter&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;pg_send_execute($dbconn,&nbsp;\"my_query\",&nbsp;array(\"Clothes&nbsp;Clothes&nbsp;Clothes\"));&nbsp;&nbsp;&nbsp;&nbsp;$res3&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;}&nbsp;&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_connect() - Open a PostgreSQL connection\n    pg_pconnect() - Open a persistent PostgreSQL connection\n    pg_execute() - Sends a request to execute a prepared statement with given parameters, and waits for the result.\n    pg_send_execute() - Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).\n    pg_send_query_params() - Submits a command and separate parameters to the server without waiting for the result(s).\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-set-error-verbosity.php","title":"pg_set_error_verbosity","description":"\n \n  pg_set_error_verbosity\n  (PHP 5 &gt;= 5.1.0)pg_set_error_verbosity &mdash; \n   Determines the verbosity of messages returned by pg_last_error() \n   and pg_result_error().\n  \n\n \n\n \n  Description\n  \n   int pg_set_error_verbosity\n    ([ resource $connection\n   ], int $verbosity\n   )\n\n  \n    Determines the verbosity of messages returned by pg_last_error() \n    and pg_result_error().\n  \n  \n   pg_set_error_verbosity() sets the verbosity mode, returning the connection&#039;s previous \n   setting. In PGSQL_ERRORS_TERSE mode, returned messages include severity, primary text, and \n   position only; this will normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT)\n   produces messages that include the above plus any detail, hint, or context \n   fields (these may span multiple lines). The PGSQL_ERRORS_VERBOSE mode includes all available \n   fields. Changing the verbosity does not affect the messages available from \n   already-existing result objects, only subsequently-created ones.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     verbosity\n     \n\n      \n       The required verbosity: PGSQL_ERRORS_TERSE,\n       PGSQL_ERRORS_DEFAULT\n       or PGSQL_ERRORS_VERBOSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The previous verbosity level: PGSQL_ERRORS_TERSE,\n   PGSQL_ERRORS_DEFAULT\n   or PGSQL_ERRORS_VERBOSE.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_set_error_verbosity() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;doesnotexist;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;pg_set_error_verbosity($dbconn,&nbsp;PGSQL_ERRORS_VERBOSE);&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;pg_result_error($res1);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_last_error() - Get the last error message string of a connection\n    pg_result_error() - Get error message associated with result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-set-client-encoding.php","title":"pg_set_client_encoding","description":"\n \n  pg_set_client_encoding\n  (PHP 4 &gt;= 4.0.3, PHP 5)pg_set_client_encoding &mdash; \n   Set the client encoding\n  \n\n \n\n \n  Description\n  \n   int pg_set_client_encoding\n    ([ resource $connection\n   ], string $encoding\n   )\n\n  \n   pg_set_client_encoding() sets the client\n   encoding and returns 0 if success or -1 if error.\n  \n  \n   PostgreSQL will automatically convert data in the backend database\n   encoding into the frontend encoding.\n  \n  Note: \n   \n    The function used to be called\n    pg_setclientencoding().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n    \n\n     encoding\n     \n\n      \n       The required client encoding.  One of SQL_ASCII, EUC_JP, \n       EUC_CN, EUC_KR, EUC_TW, \n       UNICODE, MULE_INTERNAL, LATINX (X=1...9), \n       KOI8, WIN, ALT, SJIS, \n       BIG5 or WIN1250.\n      \n      \n       The exact list of available encodings depends on your PostgreSQL version, so check your\n       PostgreSQL manual for a more specific list.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 0 on success or -1 on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_set_client_encoding() example\n    \n\n&lt;?php$conn&nbsp;=&nbsp;pg_pconnect(\"dbname=publisher\");if&nbsp;(!$conn)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}\/\/&nbsp;Set&nbsp;the&nbsp;client&nbsp;encoding&nbsp;to&nbsp;UNICODE.&nbsp;&nbsp;Data&nbsp;will&nbsp;be&nbsp;automatically\/\/&nbsp;converted&nbsp;from&nbsp;the&nbsp;backend&nbsp;encoding&nbsp;to&nbsp;the&nbsp;frontend.pg_set_client_encoding($conn,&nbsp;\"UNICODE\");$result&nbsp;=&nbsp;pg_query($conn,&nbsp;\"SELECT&nbsp;author,&nbsp;email&nbsp;FROM&nbsp;authors\");if&nbsp;(!$result)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"An&nbsp;error&nbsp;occured.\\n\";&nbsp;&nbsp;exit;}\/\/&nbsp;Write&nbsp;out&nbsp;UTF-8&nbsp;datawhile&nbsp;($row&nbsp;=&nbsp;pg_fetch_row($result))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Author:&nbsp;$row[0]&nbsp;&nbsp;E-mail:&nbsp;$row[1]\";&nbsp;&nbsp;echo&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    pg_client_encoding() - Gets the client encoding\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-send-query.php","title":"pg_send_query","description":"\n \n  pg_send_query\n  (PHP 4 &gt;= 4.2.0, PHP 5)pg_send_query &mdash; \n   Sends asynchronous query\n  \n\n \n\n \n  Description\n  \n   bool pg_send_query\n    ( resource $connection\n   , string $query\n   )\n\n  \n   pg_send_query() sends a query or queries asynchronously to the\n   connection. Unlike\n   pg_query(), it can send multiple queries at once to\n   PostgreSQL and get the results one by one using\n   pg_get_result().\n  \n  \n   Script execution is not blocked while the queries are executing. Use\n   pg_connection_busy() to check if the connection is\n   busy (i.e. the query is executing). Queries may be cancelled using\n   pg_cancel_query().\n  \n  \n   Although the user can send multiple queries at once, multiple queries\n   cannot be sent over a busy connection. If a query is sent while\n   the connection is busy, it waits until the last query is finished and\n   discards all its results.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The SQL statement or statements to be executed.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  Returns TRUE on success or FALSE on failure.\n  \n   Use pg_get_result() to determine the query result.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_send_query() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;if&nbsp;(!pg_connection_busy($dbconn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pg_send_query($dbconn,&nbsp;\"select&nbsp;*&nbsp;from&nbsp;authors;&nbsp;select&nbsp;count(*)&nbsp;from&nbsp;authors;\");&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$res1&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;\"First&nbsp;call&nbsp;to&nbsp;pg_get_result():&nbsp;$res1\\n\";&nbsp;&nbsp;$rows1&nbsp;=&nbsp;pg_num_rows($res1);&nbsp;&nbsp;echo&nbsp;\"$res1&nbsp;has&nbsp;$rows1&nbsp;records\\n\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$res2&nbsp;=&nbsp;pg_get_result($dbconn);&nbsp;&nbsp;echo&nbsp;\"Second&nbsp;call&nbsp;to&nbsp;pg_get_result():&nbsp;$res2\\n\";&nbsp;&nbsp;$rows2&nbsp;=&nbsp;pg_num_rows($res2);&nbsp;&nbsp;echo&nbsp;\"$res2&nbsp;has&nbsp;$rows2&nbsp;records\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nFirst call to pg_get_result(): Resource id #3\nResource id #3 has 3 records\n\nSecond call to pg_get_result(): Resource id #4\nResource id #4 has 1 records\n\n    \n    \n  \n \n\n\n \n  See Also\n  \n   \n    pg_query() - Execute a query\n    pg_cancel_query() - Cancel an asynchronous query\n    pg_get_result() - Get asynchronous query result\n    pg_connection_busy() - Get connection is busy or not\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-trace.php","title":"pg_trace","description":"\n \n  pg_trace\n  (PHP 4 &gt;= 4.0.1, PHP 5)pg_trace &mdash; Enable tracing a PostgreSQL connection\n\n \n\n \n  Description\n  \n   bool pg_trace\n    ( string $pathname\n   [, string $mode = &quot;w&quot;\n   [, resource $connection\n  ]] )\n\n  \n   pg_trace() enables tracing of the PostgreSQL\n   frontend\/backend communication to a file. To fully understand the results,\n   one needs to be familiar with the internals of PostgreSQL\n   communication protocol.\n  \n  For those who are not, it can still be\n   useful for tracing errors in queries sent to the server, you\n   could do for example grep &#039;^To backend&#039;\n   trace.log and see what queries actually were sent to the\n   PostgreSQL server. For more information, refer to the\n   &raquo;&nbsp;PostgreSQL Documentation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pathname\n     \n\n      \n       The full path and file name of the file in which to write the\n       trace log.  Same as in fopen().\n      \n     \n\n    \n\n    \n\n     pathname\n     \n\n      \n       An optional file access mode, same as for fopen().\n      \n     \n\n    \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_trace() example\n    \n\n&lt;?php$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");if&nbsp;($pgsql_conn)&nbsp;{&nbsp;&nbsp;&nbsp;pg_trace('\/tmp\/trace.log',&nbsp;'w',&nbsp;$pgsql_conn);&nbsp;&nbsp;&nbsp;pg_query(\"SELECT&nbsp;1\");&nbsp;&nbsp;&nbsp;pg_untrace($pgsql_conn);&nbsp;&nbsp;&nbsp;\/\/&nbsp;Now&nbsp;\/tmp\/trace.log&nbsp;will&nbsp;contain&nbsp;backend&nbsp;communication}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;pg_last_error($pgsql_conn);&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    fopen() - Opens file or URL\n    pg_untrace() - Disable tracing of a PostgreSQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-transaction-status.php","title":"pg_transaction_status","description":"\n \n  pg_transaction_status\n  (PHP 5 &gt;= 5.1.0)pg_transaction_status &mdash; Returns the current in-transaction status of the server.\n\n \n\n \n  Description\n  \n   int pg_transaction_status\n    ( resource $connection\n   )\n\n  \n    Returns the current in-transaction status of the server.\n  \n  Caution\n    \n      pg_transaction_status() will give incorrect results when using\n      a PostgreSQL 7.3 server that has the parameter autocommit\n      set to off.  The server-side autocommit feature has been\n      deprecated and does not exist in later server versions.\n    \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  The status can be PGSQL_TRANSACTION_IDLE (currently idle),\n    PGSQL_TRANSACTION_ACTIVE (a command is in progress),\n    PGSQL_TRANSACTION_INTRANS (idle, in a valid transaction block),\n    or PGSQL_TRANSACTION_INERROR (idle, in a failed transaction block).\n    PGSQL_TRANSACTION_UNKNOWN is reported if the connection is bad.\n    PGSQL_TRANSACTION_ACTIVE is reported only when a query\n    has been sent to the server and not yet completed.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_transaction_status() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"dbname=publisher\")&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;$stat&nbsp;=&nbsp;pg_transaction_status($dbconn);&nbsp;&nbsp;if&nbsp;($stat&nbsp;===&nbsp;PGSQL_TRANSACTION_UNKNOWN)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;is&nbsp;bad';&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;($stat&nbsp;===&nbsp;PGSQL_TRANSACTION_IDLE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;is&nbsp;currently&nbsp;idle';&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;is&nbsp;in&nbsp;a&nbsp;transaction&nbsp;state';&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-tty.php","title":"pg_tty","description":"\n \n  pg_tty\n  (PHP 4, PHP 5)pg_tty &mdash; \n   Return the TTY name associated with the connection\n  \n\n \n\n \n  Description\n  \n   string pg_tty\n    ([ resource $connection\n  ] )\n\n  \n   pg_tty() returns the TTY name that server\n   side debugging output is sent to on the given PostgreSQL\n   connection resource.\n  \n  Note: \n   \n    pg_tty() is obsolete, since the server no longer pays\n    attention to the TTY setting, but the function remains for backwards\n    compatibility.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the debug TTY of \n   the connection, or FALSE on error.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_tty() example\n    \n\n&lt;?php$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");if&nbsp;($pgsql_conn)&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;\"Server&nbsp;debug&nbsp;TTY&nbsp;is:&nbsp;\"&nbsp;.&nbsp;pg_tty($pgsql_conn)&nbsp;.&nbsp;\"&lt;br\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;pg_last_error($pgsql_conn);&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-untrace.php","title":"pg_untrace","description":"\n \n  pg_untrace\n  (PHP 4 &gt;= 4.0.1, PHP 5)pg_untrace &mdash; Disable tracing of a PostgreSQL connection\n\n \n\n \n  Description\n  \n   bool pg_untrace\n    ([ resource $connection\n  ] )\n\n  \n   Stop tracing started by pg_trace().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Always returns TRUE.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_untrace() example\n    \n\n&lt;?php$pgsql_conn&nbsp;=&nbsp;pg_connect(\"dbname=mark&nbsp;host=localhost\");if&nbsp;($pgsql_conn)&nbsp;{&nbsp;&nbsp;&nbsp;pg_trace('\/tmp\/trace.log',&nbsp;'w',&nbsp;$pgsql_conn);&nbsp;&nbsp;&nbsp;pg_query(\"SELECT&nbsp;1\");&nbsp;&nbsp;&nbsp;pg_untrace($pgsql_conn);&nbsp;&nbsp;&nbsp;\/\/&nbsp;Now&nbsp;tracing&nbsp;of&nbsp;backend&nbsp;communication&nbsp;is&nbsp;disabled}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;print&nbsp;pg_last_error($pgsql_conn);&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_trace() - Enable tracing a PostgreSQL connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-unescape-bytea.php","title":"pg_unescape_bytea","description":"\n \n  pg_unescape_bytea\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_unescape_bytea &mdash; \n   Unescape binary for bytea type\n  \n\n \n\n \n  Description\n  \n   string pg_unescape_bytea\n    ( string $data\n   )\n\n  \n   pg_unescape_bytea() unescapes PostgreSQL bytea data\n   values.  It returns the unescaped string, possibly containing binary data.\n  \n  Note: \n   \n    When you SELECT a bytea type, PostgreSQL returns octal byte values\n    prefixed with &#039;\\&#039; (e.g. \\032). Users are supposed to convert back to\n    binary format manually.\n   \n   \n    This function requires PostgreSQL 7.2 or later. With PostgreSQL\n    7.2.0 and 7.2.1, bytea values must be cast when you enable\n    multi-byte support. i.e. INSERT INTO test_table (image)\n    VALUES (&#039;$image_escaped&#039;::bytea); PostgreSQL 7.2.2 or\n    later does not need a cast. The exception is when the client and backend\n    character encoding does not match, and there may be multi-byte\n    stream error. User must then cast to bytea to avoid this error.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       A string containing PostgreSQL bytea data to be converted into\n       a PHP binary string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A string containing the unescaped data.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pg_unescape_bytea() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;\/\/&nbsp;Connect&nbsp;to&nbsp;the&nbsp;database&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Get&nbsp;the&nbsp;bytea&nbsp;data&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_query(\"SELECT&nbsp;data&nbsp;FROM&nbsp;gallery&nbsp;WHERE&nbsp;name='Pine&nbsp;trees'\");&nbsp;&nbsp;&nbsp;&nbsp;$raw&nbsp;=&nbsp;pg_fetch_result($res,&nbsp;'data');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Convert&nbsp;to&nbsp;binary&nbsp;and&nbsp;send&nbsp;to&nbsp;the&nbsp;browser&nbsp;&nbsp;header('Content-type:&nbsp;image\/jpeg');&nbsp;&nbsp;echo&nbsp;pg_unescape_bytea($raw);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    pg_escape_bytea() - Escape a string for insertion into a bytea field\n    pg_escape_string() - Escape a string for query\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-update.php","title":"pg_update","description":"\n \n  pg_update\n  (PHP 4 &gt;= 4.3.0, PHP 5)pg_update &mdash; \n   Update table\n  \n\n \n\n \n  Description\n  \n   mixed pg_update\n    ( resource $connection\n   , string $table_name\n   , array $data\n   , array $condition\n   [, int $options = PGSQL_DML_EXEC\n  ] )\n\n  \n   pg_update() updates records that matches\n   condition with data. If\n   options is specified,\n   pg_convert() is applied to\n   data with specified options.\n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       Name of the table into which to update rows.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       An array whose keys are field names in the table table_name,\n       and whose values are what matched rows are to be updated to.\n      \n     \n\n    \n\n    \n\n     condition\n     \n\n      \n       An array whose keys are field names in the table table_name,\n       and whose values are the conditions that a row must meet to be updated.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Any number of PGSQL_CONV_OPTS, \n       PGSQL_DML_NO_CONV,\n       PGSQL_DML_EXEC or\n       PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the\n       options then query string is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.  Returns string if PGSQL_DML_STRING is passed\n   via options.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_update() example\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;$db&nbsp;=&nbsp;pg_connect('dbname=foo');&nbsp;&nbsp;$data&nbsp;=&nbsp;array('field1'=&gt;'AA',&nbsp;'field2'=&gt;'BB');&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;This&nbsp;is&nbsp;safe,&nbsp;since&nbsp;$_POST&nbsp;is&nbsp;converted&nbsp;automatically&nbsp;&nbsp;$res&nbsp;=&nbsp;pg_update($db,&nbsp;'post_log',&nbsp;$_POST,&nbsp;$data);&nbsp;&nbsp;if&nbsp;($res)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Data&nbsp;is&nbsp;updated:&nbsp;$res\\n\";&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"User&nbsp;must&nbsp;have&nbsp;sent&nbsp;wrong&nbsp;inputs\\n\";&nbsp;&nbsp;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_convert() - Convert associative array values into suitable for SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pg-version.php","title":"pg_version","description":"\n \n  pg_version\n  (PHP 5)pg_version &mdash; \n   Returns an array with client, protocol and server version (when available)\n  \n\n \n\n \n  Description\n  \n   array pg_version\n    ([ resource $connection\n  ] )\n\n  \n   pg_version() returns an array with the client, protocol\n   and server version. Protocol and server versions are only available if PHP\n   was compiled with PostgreSQL 7.4 or later.\n  \n  \n   For more detailed server information, use pg_parameter_status().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection\n     \n\n      \n       PostgreSQL database connection resource.  When \n       connection is not present, the default connection \n       is used. The default connection is the last connection made by \n       pg_connect() or pg_pconnect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with client, protocol \n   and server keys and values (if available).  Returns\n   FALSE on error or invalid connection.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 pg_version() example\n    \n\n&lt;?php&nbsp;&nbsp;$dbconn&nbsp;=&nbsp;pg_connect(\"host=localhost&nbsp;port=5432&nbsp;dbname=mary\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$v&nbsp;=&nbsp;pg_version($dbconn);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$v['client'];?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n7.4\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    pg_parameter_status() - Looks up a current parameter setting of the server.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-busy-timeout.php","title":"sqlite_busy_timeoutSQLiteDatabase-busyTimeout","description":"\n \n  sqlite_busy_timeout\n  SQLiteDatabase-busyTimeout\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_busy_timeout -- SQLiteDatabase-&gt;busyTimeout &mdash; Set busy timeout duration, or disable busy handlers\n\n \n\n \n  Description\n  \n   void sqlite_busy_timeout\n    ( resource $dbhandle\n   , int $milliseconds\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    void SQLiteDatabase::busyTimeout\n     ( int $milliseconds\n    )\n\n  \n  \n   Set the maximum time, in milliseconds, that SQLite will wait for a\n   dbhandle to become ready for use.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     milliseconds\n     \n\n      \n       The number of milliseconds.  When set to\n       0, busy handlers will be disabled and SQLite will\n       return immediately with a SQLITE_BUSY status code\n       if another process\/thread has the database locked for an update.\n      \n      \n       PHP sets the default busy timeout to be 60 seconds when the database is\n       opened.\n      \n      Note: \n       \n        There are one thousand (1000) milliseconds in one second.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('sqlitedb');sqlite_busy_timeout($dbhandle,&nbsp;10000);&nbsp;\/\/&nbsp;set&nbsp;timeout&nbsp;to&nbsp;10&nbsp;secondssqlite_busy_timeout($dbhandle,&nbsp;0);&nbsp;\/\/&nbsp;disable&nbsp;busy&nbsp;handler?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object oriented style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('sqlitedb');$dbhandle-&gt;busyTimeout(10000);&nbsp;\/\/&nbsp;10&nbsp;seconds$dbhandle-&gt;busyTimeout(0);&nbsp;\/\/&nbsp;disable?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_open() - Opens an SQLite database and create the database if it does not exist\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-array-query.php","title":"sqlite_array_querySQLiteDatabase-arrayQuery","description":"\n \n  sqlite_array_query\n  SQLiteDatabase-arrayQuery\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_array_query -- SQLiteDatabase-&gt;arrayQuery &mdash; Execute a query against a given database and returns an array\n\n \n\n \n  Description\n  \n   array sqlite_array_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )\n\n  \n   array sqlite_array_query\n    ( string $query\n   , resource $dbhandle\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteDatabase::arrayQuery\n     ( string $query\n    [, int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   sqlite_array_query() executes the given query and returns\n   an array of the entire result set.  It is similar to calling\n   sqlite_query() and then sqlite_fetch_array()\n   for each row in the result set.  sqlite_array_query() is\n   significantly faster than the aforementioned.\n  \n  Tip\n   \n    sqlite_array_query() is best suited to queries\n    returning 45 rows or less.  If you have more data than that, it is\n    recommended that you write your scripts to use\n    sqlite_unbuffered_query() instead for more optimal\n    performance.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n       The query to be executed.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n  Note: Two alternative syntaxes are\nsupported for compatibility with other database extensions (such as MySQL).\nThe preferred form is the first, where the dbhandle\nparameter is the first parameter to the function.\n \n\n\n \n  Return Values\n  \n   Returns an array of the entire result set; FALSE otherwise.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('sqlitedb');$result&nbsp;=&nbsp;sqlite_array_query($dbhandle,&nbsp;'SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25',&nbsp;SQLITE_ASSOC);foreach&nbsp;($result&nbsp;as&nbsp;$entry)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('sqlitedb');$result&nbsp;=&nbsp;$dbhandle-&gt;arrayQuery('SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25',&nbsp;SQLITE_ASSOC);foreach&nbsp;($result&nbsp;as&nbsp;$entry)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_query() - Executes a query against a given database and returns a result handle\n    sqlite_fetch_array() - Fetches the next row from a result set as an array\n    sqlite_fetch_string() - Alias of sqlite_fetch_single\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-changes.php","title":"sqlite_changesSQLiteDatabase-changes","description":"\n \n  sqlite_changes\n  SQLiteDatabase-changes\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_changes -- SQLiteDatabase-&gt;changes &mdash; \n   Returns the number of rows that were changed by the most\n   recent SQL statement\n  \n\n \n\n \n  Description\n  \n   int sqlite_changes\n    ( resource $dbhandle\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteDatabase::changes\n     ( void\n    )\n\n  \n  \n   Returns the numbers of rows that were changed by the most recent SQL\n   statement executed against the dbhandle database\n   handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of changed rows.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('mysqlitedb');$query&nbsp;=&nbsp;sqlite_query($dbhandle,&nbsp;\"UPDATE&nbsp;users&nbsp;SET&nbsp;email='jDoe@example.com'&nbsp;WHERE&nbsp;username='jDoe'\");if&nbsp;(!$query)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit('Error&nbsp;in&nbsp;query.');}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Number&nbsp;of&nbsp;rows&nbsp;modified:&nbsp;',&nbsp;sqlite_changes($dbhandle);}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object oriented style\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('mysqlitedb');$query&nbsp;=&nbsp;$dbhandle-&gt;query(\"UPDATE&nbsp;users&nbsp;SET&nbsp;email='jDoe@example.com'&nbsp;WHERE&nbsp;username='jDoe'\");if&nbsp;(!$query)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit('Error&nbsp;in&nbsp;query.');}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Number&nbsp;of&nbsp;rows&nbsp;modified:&nbsp;',&nbsp;$dbhandle-&gt;changes();}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_open() - Opens an SQLite database and create the database if it does not exist\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-close.php","title":"sqlite_close","description":"\n \n  sqlite_close\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_close &mdash; Closes an open SQLite database\n\n \n\n \n  Description\n  \n   void sqlite_close\n    ( resource $dbhandle\n   )\n\n  \n   Closes the given db_handle database handle.\n   If the database was persistent, it will be closed and removed from the\n   persistent list.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sqlite_close() example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('sqlitedb');sqlite_close($dbhandle);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_open() - Opens an SQLite database and create the database if it does not exist\n    sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-column.php","title":"sqlite_columnSQLiteResult-columnSQLiteUnbuffered-column","description":"\n \n  sqlite_column\n  SQLiteResult-column\n  SQLiteUnbuffered-column\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_column -- SQLiteResult-&gt;column -- SQLiteUnbuffered-&gt;column &mdash; Fetches a column from the current row of a result set\n\n \n\n \n  Description \n  \n   mixed sqlite_column\n    ( resource $result\n   , mixed $index_or_name\n   [, bool $decode_binary = true\n  ] )\n\n  \n   \n   \n    mixed SQLiteResult::column\n     ( mixed $index_or_name\n    [, bool $decode_binary = true\n   ] )\n\n  \n  \n   \n   \n    mixed SQLiteUnbuffered::column\n     ( mixed $index_or_name\n    [, bool $decode_binary = true\n   ] )\n\n  \n  \n   Fetches the value of a column named index_or_name\n   (if it is a string), or of the ordinal column numbered\n   index_or_name (if it is an integer) from the\n   current row of the query result handle result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     index_or_name\n     \n\n      \n       The column index or name to fetch.\n      \n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the column value.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Use this function when you are iterating a large result set with many\n    columns, or with columns that contain large amounts of data.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_fetch_string() - Alias of sqlite_fetch_single\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-create-aggregate.php","title":"sqlite_create_aggregateSQLiteDatabase-createAggregate","description":"\n \n  sqlite_create_aggregate\n  SQLiteDatabase-createAggregate\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_create_aggregate -- SQLiteDatabase-&gt;createAggregate &mdash; Register an aggregating UDF for use in SQL statements\n\n \n\n \n  Description\n  \n   void sqlite_create_aggregate\n    ( resource $dbhandle\n   , string $function_name\n   , callback $step_func\n   , callback $finalize_func\n   [, int $num_args = -1\n  ] )\n\n  Object oriented style (method):\n  \n   \n   \n    void SQLiteDatabase::createAggregate\n     ( string $function_name\n    , callback $step_func\n    , callback $finalize_func\n    [, int $num_args = -1\n   ] )\n\n  \n  \n   sqlite_create_aggregate() is similar to\n   sqlite_create_function() except that it registers\n   functions that can be used to calculate a result aggregated across all the\n   rows of a query.\n  \n  \n   The key difference between this function and\n   sqlite_create_function() is that two functions are\n   required to manage the aggregate; step_func is\n   called for each row of the result set.  Your PHP function should\n   accumulate the result and store it into the aggregation context.\n   Once all the rows have been processed,\n   finalize_func will be called and it should then\n   take the data from the aggregation context and return the result.\n   Callback functions should return a type understood by SQLite (i.e.\n   scalar type).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     function_name\n     \n\n      \n       The name of the function used in SQL statements.\n      \n     \n\n    \n\n    \n\n     step_func\n     \n\n      \n       Callback function called for each row of the result set.\n       Function parameters are &amp;$context, $value, ....\n      \n     \n\n    \n\n    \n\n     finalize_func\n     \n\n      \n       Callback function to aggregate the &quot;stepped&quot; data from each row.\n       Function parameter is &amp;$context and the function\n       should return the final result of aggregation.\n      \n     \n\n    \n\n    \n\n     num_args\n     \n\n      \n       Hint to the SQLite parser if the callback function accepts a\n       predetermined number of arguments.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 max_length aggregation function example\n    \n\n&lt;?php$data&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;'one',&nbsp;&nbsp;&nbsp;'two',&nbsp;&nbsp;&nbsp;'three',&nbsp;&nbsp;&nbsp;'four',&nbsp;&nbsp;&nbsp;'five',&nbsp;&nbsp;&nbsp;'six',&nbsp;&nbsp;&nbsp;'seven',&nbsp;&nbsp;&nbsp;'eight',&nbsp;&nbsp;&nbsp;'nine',&nbsp;&nbsp;&nbsp;'ten',&nbsp;&nbsp;&nbsp;);$dbhandle&nbsp;=&nbsp;sqlite_open(':memory:');sqlite_query($dbhandle,&nbsp;\"CREATE&nbsp;TABLE&nbsp;strings(a)\");foreach&nbsp;($data&nbsp;as&nbsp;$str)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;=&nbsp;sqlite_escape_string($str);&nbsp;&nbsp;&nbsp;&nbsp;sqlite_query($dbhandle,&nbsp;\"INSERT&nbsp;INTO&nbsp;strings&nbsp;VALUES&nbsp;('$str')\");}function&nbsp;max_len_step(&amp;$context,&nbsp;$string)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strlen($string)&nbsp;&gt;&nbsp;$context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$context&nbsp;=&nbsp;strlen($string);&nbsp;&nbsp;&nbsp;&nbsp;}}function&nbsp;max_len_finalize(&amp;$context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$context;}sqlite_create_aggregate($dbhandle,&nbsp;'max_len',&nbsp;'max_len_step',&nbsp;'max_len_finalize');var_dump(sqlite_array_query($dbhandle,&nbsp;'SELECT&nbsp;max_len(a)&nbsp;from&nbsp;strings'));?&gt;\n\n\n    \n\n   \n  \n  \n   In this example, we are creating an aggregating function that will\n   calculate the length of the longest string in one of the columns of the\n   table.  For each row, the max_len_step function is\n   called and passed a context parameter.  The context\n   parameter is just like any other PHP variable and be set to hold an array\n   or even an object value.  In this example, we are simply using it to hold\n   the maximum length we have seen so far; if the\n   string has a length longer than the current\n   maximum, we update the context to hold this new maximum length.\n  \n  \n   After all of the rows have been processed, SQLite calls the\n   max_len_finalize function to determine the aggregate\n   result.  Here, we could perform some kind of calculation based on the\n   data found in the context.  In our simple example\n   though, we have been calculating the result as the query progressed, so we\n   simply need to return the context value.\n  \n  Note: \n   \n    The example above will not work correctly if the column contains binary\n    data.  Take a look at the manual page for\n    sqlite_udf_decode_binary() for an explanation of why\n    this is so, and an example of how to make it respect the binary encoding.\n   \n  \n  Tip\n   \n    It is NOT recommended for you to store a copy of the values in the context\n    and then process them at the end, as you would cause SQLite to use a lot of\n    memory to process the query - just think of how much memory you would need\n    if a million rows were stored in memory, each containing a string 32 bytes\n    in length.\n   \n  \n  Tip\n   \n    You can use sqlite_create_function() and\n    sqlite_create_aggregate() to override SQLite native\n    SQL functions.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_create_function() - Registers a &quot;regular&quot; User Defined Function for use in SQL statements\n    sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF\n    sqlite_udf_decode_binary() - Decode binary data passed as parameters to an UDF\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-current.php","title":"sqlite_currentSQLiteResult-currentSQLiteUnbuffered-current","description":"\n \n  sqlite_current\n  SQLiteResult-current\n  SQLiteUnbuffered-current\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_current -- SQLiteResult-&gt;current -- SQLiteUnbuffered-&gt;current &mdash; Fetches the current row from a result set as an array\n\n \n\n \n  Description\n  \n   array sqlite_current\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteResult::current\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   \n   \n    array SQLiteUnbuffered::current\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   sqlite_current() is identical to\n   sqlite_fetch_array() except that it does not advance\n   to the next row prior to returning the data; it returns the data from the\n   current position only.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of the current row from a result set; FALSE if the\n   current position is beyond the final row.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  See Also\n  \n   \n    sqlite_seek() - Seek to a particular row number of a buffered result set\n    sqlite_next() - Seek to the next row number\n    sqlite_fetch_array() - Fetches the next row from a result set as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-create-function.php","title":"sqlite_create_functionSQLiteDatabase-createFunction","description":"\n \n  sqlite_create_function\n  SQLiteDatabase-createFunction\n  (PHP 5, sqlite &gt;= 1.0.0)sqlite_create_function -- SQLiteDatabase-&gt;createFunction &mdash; \n   Registers a &quot;regular&quot; User Defined Function for use in SQL statements\n  \n\n \n\n \n  Description\n  \n   void sqlite_create_function\n    ( resource $dbhandle\n   , string $function_name\n   , callback $callback\n   [, int $num_args = -1\n  ] )\n\n  Object oriented style (method):\n  \n   \n   \n    void SQLiteDatabase::createFunction\n     ( string $function_name\n    , callback $callback\n    [, int $num_args = -1\n   ] )\n\n  \n  \n   sqlite_create_function() allows you to register a PHP\n   function with SQLite as an UDF (User Defined\n   Function), so that it can be called from within your SQL statements.\n  \n  \n   The UDF can be used in any SQL statement that can call functions, such as\n   SELECT and UPDATE statements and also in triggers.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     function_name\n     \n\n      \n       The name of the function used in SQL statements.\n      \n     \n\n    \n\n    \n\n     callback\n     \n\n      \n       Callback function to handle the defined SQL function.\n      \n      Note: \n       \n        Callback functions should return a type understood by SQLite (i.e.\n        scalar type).\n       \n      \n     \n\n    \n\n    \n\n     num_args\n     \n\n      \n       Hint to the SQLite parser if the callback function accepts a\n       predetermined number of arguments.\n      \n     \n\n    \n\n   \n\n  \n  Note: Two alternative syntaxes are\nsupported for compatibility with other database extensions (such as MySQL).\nThe preferred form is the first, where the dbhandle\nparameter is the first parameter to the function.\n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sqlite_create_function() example\n    \n\n&lt;?phpfunction&nbsp;md5_and_reverse($string)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;strrev(md5($string));}if&nbsp;($dbhandle&nbsp;=&nbsp;sqlite_open('mysqlitedb',&nbsp;0666,&nbsp;$sqliteerror))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite_create_function($dbhandle,&nbsp;'md5rev',&nbsp;'md5_and_reverse',&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$sql&nbsp;&nbsp;=&nbsp;'SELECT&nbsp;md5rev(filename)&nbsp;FROM&nbsp;files';&nbsp;&nbsp;&nbsp;&nbsp;$rows&nbsp;=&nbsp;sqlite_array_query($dbhandle,&nbsp;$sql);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;opening&nbsp;sqlite&nbsp;db:&nbsp;'&nbsp;.&nbsp;$sqliteerror;&nbsp;&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n  \n   In this example, we have a function that calculates the md5 sum of a\n   string, and then reverses it.  When the SQL statement executes, it\n   returns the value of the filename transformed by our function.  The data\n   returned in $rows contains the processed result.\n  \n  \n   The beauty of this technique is that you do not need to process the\n   result using a foreach loop after you have queried for the data.\n  \n  \n   PHP registers a special function named php when the\n   database is first opened.  The php function can be used to call any PHP\n   function without having to register it first.\n  \n  \n   \n    Example #2 Example of using the PHP function\n    \n\n&lt;?php$rows&nbsp;=&nbsp;sqlite_array_query($dbhandle,&nbsp;\"SELECT&nbsp;php('md5',&nbsp;filename)&nbsp;from&nbsp;files\");?&gt;\n\n\n    \n\n    \n     This example will call the md5() on each\n     filename column in the database and return the result\n     into $rows\n    \n   \n  \n  Note: \n   \n    For performance reasons, PHP will not automatically encode\/decode binary\n    data passed to and from your UDF&#039;s.  You need to manually encode\/decode\n    the parameters and return values if you need to process binary data in\n    this way.  Take a look at sqlite_udf_encode_binary()\n    and sqlite_udf_decode_binary() for more details.\n   \n  \n  Tip\n   \n    It is not recommended to use UDF&#039;s to handle processing of\n    binary data, unless high performance is not a key requirement of your\n    application.\n   \n  \n  Tip\n   \n    You can use sqlite_create_function() and\n    sqlite_create_aggregate() to override SQLite native\n    SQL functions.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-error-string.php","title":"sqlite_error_string","description":"\n \n  sqlite_error_string\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_error_string &mdash; Returns the textual description of an error code\n\n \n\n \n  Description\n  \n   string sqlite_error_string\n    ( int $error_code\n   )\n\n  \n   Returns a human readable description of the\n   error_code returned from\n   sqlite_last_error().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     error_code\n     \n\n      \n       The error code being used, which might be passed in from\n       sqlite_last_error().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a human readable description of the error_code,\n   as a string.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_last_error() - Returns the error code of the last error for a database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-escape-string.php","title":"sqlite_escape_string","description":"\n \n  sqlite_escape_string\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_escape_string &mdash; Escapes a string for use as a query parameter\n\n \n\n \n  Description\n  \n   string sqlite_escape_string\n    ( string $item\n   )\n\n  \n   sqlite_escape_string() will correctly quote the string\n   specified by item\n   for use in an SQLite SQL statement.  This includes doubling up\n   single-quote characters (&#039;) and checking for\n   binary-unsafe characters in the query string.\n  \n  \n   Although the encoding makes it safe to insert the data, it will render\n   simple text comparisons and LIKE clauses in your\n   queries unusable for the columns that contain the binary data.  In\n   practice, this shouldn&#039;t be a problem, as your schema should be such that\n   you don&#039;t use such things on binary columns (in fact, it might be better to\n   store binary data using other means, such as in files).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     item\n     \n\n      \n       The string being quoted.\n      \n      \n       If the item contains a NUL\n       character, or if it begins with a character whose ordinal value is\n       0x01, PHP will apply a binary encoding scheme so that\n       you can safely store and retrieve binary data.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an escaped string for use in an SQLite SQL statement.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Do not use this function to encode the return values from UDF&#039;s created\n    using sqlite_create_function() or\n    sqlite_create_aggregate() - use\n    sqlite_udf_encode_binary() instead.\n   \n  \n  Warning\n   \n    addslashes() should NOT be used to\n    quote your strings for SQLite queries; it will lead to strange results\n    when retrieving your data.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-factory.php","title":"sqlite_factory","description":"\n \n  sqlite_factory\n  (PHP 5)sqlite_factory &mdash; Opens an SQLite database and returns an SQLiteDatabase object\n\n \n\n \n  Description\n  \n   SQLiteDatabase sqlite_factory\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )\n\n  \n   sqlite_factory() behaves similarly to\n   sqlite_open() in that it opens an SQLite database or\n   attempts to create it if it does not exist.  However, a\n   SQLiteDatabase object is\n   returned rather than a resource.  Please see the\n   sqlite_open() reference page for further usage and caveats.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the SQLite database.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value.\n      \n     \n\n    \n\n    \n\n     error_message\n     \n\n      \n       Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an SQLiteDatabase object on success, NULL on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sqlite_factory() example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_factory('sqlitedb');$dbhandle-&gt;query('SELECT&nbsp;user_id,&nbsp;username&nbsp;FROM&nbsp;users');\/*&nbsp;functionally&nbsp;equivalent&nbsp;to:&nbsp;*\/$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('sqlitedb');$dbhandle-&gt;query('SELECT&nbsp;user_id,&nbsp;username&nbsp;FROM&nbsp;users');?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlite_open() - Opens an SQLite database and create the database if it does not exist\n    sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-exec.php","title":"sqlite_execSQLiteDatabase-exec","description":"\n \n  sqlite_exec\n  SQLiteDatabase-exec\n  (PHP 5, PECL sqlite &gt;= 1.0.3)sqlite_exec -- SQLiteDatabase-&gt;exec &mdash; Executes a result-less query against a given database\n\n \n\n \n  Description\n  \n   bool sqlite_exec\n    ( resource $dbhandle\n   , string $query\n   [, string &$error_msg\n  ] )\n\n  \n   bool sqlite_exec\n    ( string $query\n   , resource $dbhandle\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteDatabase::queryExec\n     ( string $query\n    [, string &$error_msg\n   ] )\n\n  \n  \n   Executes an SQL statement given by the query against\n   a given database handle (specified by the dbhandle \n   parameter).\n  \n  Warning\n   \n    SQLite will execute multiple queries separated by\n    semicolons, so you can use it to execute a batch of SQL that you have\n    loaded from a file or have embedded in a script.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The query to be executed.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\n     error_msg\n     \n\n      \n       The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function.\n      \n     \n\n    \n\n   \n\n  \n  Note: Two alternative syntaxes are\nsupported for compatibility with other database extensions (such as MySQL).\nThe preferred form is the first, where the dbhandle\nparameter is the first parameter to the function.\n \n\n\n \n  Return Values\n  \n   This function will return a boolean result; TRUE for success or FALSE for failure.\n   If you need to run a query that returns rows, see sqlite_query().\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the error_msg parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 Procedural example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('mysqlitedb');$query&nbsp;=&nbsp;sqlite_exec($dbhandle,&nbsp;\"UPDATE&nbsp;users&nbsp;SET&nbsp;email='jDoe@example.com'&nbsp;WHERE&nbsp;username='jDoe'\",&nbsp;$error);if&nbsp;(!$query)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit(\"Error&nbsp;in&nbsp;query:&nbsp;'$error'\");}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Number&nbsp;of&nbsp;rows&nbsp;modified:&nbsp;',&nbsp;sqlite_changes($dbhandle);}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('mysqlitedb');$query&nbsp;=&nbsp;$dbhandle-&gt;queryExec(\"UPDATE&nbsp;users&nbsp;SET&nbsp;email='jDoe@example.com'&nbsp;WHERE&nbsp;username='jDoe'\",&nbsp;$error);if&nbsp;(!$query)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit(\"Error&nbsp;in&nbsp;query:&nbsp;'$error'\");}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Number&nbsp;of&nbsp;rows&nbsp;modified:&nbsp;',&nbsp;$dbhandle-&gt;changes();}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlite_query() - Executes a query against a given database and returns a result handle\n    sqlite_unbuffered_query() - Execute a query that does not prefetch and buffer all data\n    sqlite_array_query() - Execute a query against a given database and returns an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-array.php","title":"sqlite_fetch_arraySQLiteResult-fetchSQLiteUnbuffered-fetch","description":"\n \n  sqlite_fetch_array\n  SQLiteResult-fetch\n  SQLiteUnbuffered-fetch\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_fetch_array -- SQLiteResult-&gt;fetch -- SQLiteUnbuffered-&gt;fetch &mdash; Fetches the next row from a result set as an array\n\n \n\n \n  Description\n  \n   array sqlite_fetch_array\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteResult::fetch\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   \n   \n    array SQLiteUnbuffered::fetch\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   Fetches the next row from the given result handle.\n   If there are no more rows, returns FALSE, otherwise returns an\n   associative array representing the row data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of the next row from a result set; FALSE if the\n   next position is beyond the final row.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('sqlitedb');$query&nbsp;=&nbsp;sqlite_query($dbhandle,&nbsp;'SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');while&nbsp;($entry&nbsp;=&nbsp;sqlite_fetch_array($query,&nbsp;SQLITE_ASSOC))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('sqlitedb');$query&nbsp;=&nbsp;$dbhandle-&gt;query('SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');&nbsp;\/\/&nbsp;buffered&nbsp;result&nbsp;set$query&nbsp;=&nbsp;$dbhandle-&gt;unbufferedQuery('SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');&nbsp;\/\/&nbsp;unbuffered&nbsp;result&nbsp;setwhile&nbsp;($entry&nbsp;=&nbsp;$query-&gt;fetch(SQLITE_ASSOC))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_array_query() - Execute a query against a given database and returns an array\n    sqlite_fetch_string() - Alias of sqlite_fetch_single\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-object.php","title":"sqlite_fetch_objectSQLiteResult-fetchObjectSQLiteUnbuffered-fetchObject","description":"\n \n  sqlite_fetch_object\n  SQLiteResult-fetchObject\n  SQLiteUnbuffered-fetchObject\n  (PHP 5)sqlite_fetch_object -- SQLiteResult-&gt;fetchObject -- SQLiteUnbuffered-&gt;fetchObject &mdash; Fetches the next row from a result set as an object\n\n \n\n \n  Description\n  \n   object sqlite_fetch_object\n    ( resource $result\n   [, string $class_name\n   [, array $ctor_params\n   [, bool $decode_binary = true\n  ]]] )\n\n  Object oriented style (method):\n  \n   \n   \n    object SQLiteResult::fetchObject\n     ([ string $class_name\n    [, array $ctor_params\n    [, bool $decode_binary = true\n   ]]] )\n\n  \n  \n   \n   \n    object SQLiteUnbuffered::fetchObject\n     ([ string $class_name\n    [, array $ctor_params\n    [, bool $decode_binary = true\n   ]]] )\n\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-column-types.php","title":"sqlite_fetch_column_typesSQLiteDatabase-fetchColumnTypes","description":"\n \n  sqlite_fetch_column_types\n  SQLiteDatabase-fetchColumnTypes\n  (PHP 5)sqlite_fetch_column_types -- SQLiteDatabase-&gt;fetchColumnTypes &mdash; \n   Return an array of column types from a particular table\n  \n\n \n\n \n  Description\n  \n   array sqlite_fetch_column_types\n    ( string $table_name\n   , resource $dbhandle\n   [, int $result_type = SQLITE_ASSOC\n  ] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteDatabase::fetchColumnTypes\n     ( string $table_name\n    [, int $result_type = SQLITE_ASSOC\n   ] )\n\n  \n  \n   sqlite_fetch_column_types() returns an array of column\n   data types from the specified table_name table.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     table_name\n     \n\n      \n       The table name to query.\n      \n     \n\n    \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      \n       The optional result_type parameter accepts a\n       constant and determines how the returned array will be indexed. Using\n       SQLITE_ASSOC will return only associative indices\n       (named fields) while SQLITE_NUM will return only\n       numerical indices (ordinal field numbers).\n       SQLITE_ASSOC is the default for\n       this function.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of column data types; FALSE on error.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       Added result_type\n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Procedural example\n    \n\n&lt;?php$db&nbsp;=&nbsp;sqlite_open('mysqlitedb');sqlite_query($db,&nbsp;'CREATE&nbsp;TABLE&nbsp;foo&nbsp;(bar&nbsp;varchar(10),&nbsp;arf&nbsp;text)');$cols&nbsp;=&nbsp;sqlite_fetch_column_types('foo',&nbsp;$db,&nbsp;SQLITE_ASSOC);foreach&nbsp;($cols&nbsp;as&nbsp;$column&nbsp;=&gt;&nbsp;$type)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Column:&nbsp;$column&nbsp;&nbsp;Type:&nbsp;$type\\n\";}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented example\n    \n\n&lt;?php$db&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('mysqlitedb');$db-&gt;query('CREATE&nbsp;TABLE&nbsp;foo&nbsp;(bar&nbsp;varchar(10),&nbsp;arf&nbsp;text)');$cols&nbsp;=&nbsp;$db-&gt;fetchColumnTypes('foo',&nbsp;SQLITE_ASSOC);foreach&nbsp;($cols&nbsp;as&nbsp;$column&nbsp;=&gt;&nbsp;$type)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Column:&nbsp;$column&nbsp;&nbsp;Type:&nbsp;$type\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nColumn: bar  Type: VARCHAR\nColumn: arf  Type: TEXT\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-all.php","title":"sqlite_fetch_allSQLiteResult-fetchAllSQLiteUnbuffered-fetchAll","description":"\n \n  sqlite_fetch_all\n  SQLiteResult-fetchAll\n  SQLiteUnbuffered-fetchAll\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_fetch_all -- SQLiteResult-&gt;fetchAll -- SQLiteUnbuffered-&gt;fetchAll &mdash; Fetches all rows from a result set as an array of arrays\n\n \n\n \n  Description\n  \n   array sqlite_fetch_all\n    ( resource $result\n   [, int $result_type = SQLITE_BOTH\n   [, bool $decode_binary = true\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteResult::fetchAll\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   \n   \n    array SQLiteUnbuffered::fetchAll\n     ([ int $result_type = SQLITE_BOTH\n    [, bool $decode_binary = true\n   ]] )\n\n  \n  \n   sqlite_fetch_all() returns an array of the entire result\n   set from the result resource.  It is similar to calling\n   sqlite_query() (or\n   sqlite_unbuffered_query()) and then\n   sqlite_fetch_array() for each row in the result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of the remaining rows in a result set. If called right\n   after sqlite_query(), it returns all rows. If called\n   after sqlite_fetch_array(), it returns the rest. If\n   there are no rows in a result set, it returns an empty array.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;sqlite_open('sqlitedb');$query&nbsp;=&nbsp;sqlite_query($dbhandle,&nbsp;'SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');$result&nbsp;=&nbsp;sqlite_fetch_all($query,&nbsp;SQLITE_ASSOC);foreach&nbsp;($result&nbsp;as&nbsp;$entry)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented example\n    \n\n&lt;?php$dbhandle&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('sqlitedb');$query&nbsp;=&nbsp;$dbhandle-&gt;query('SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');&nbsp;\/\/&nbsp;buffered&nbsp;result&nbsp;set$query&nbsp;=&nbsp;$dbhandle-&gt;unbufferedQuery('SELECT&nbsp;name,&nbsp;email&nbsp;FROM&nbsp;users&nbsp;LIMIT&nbsp;25');&nbsp;\/\/&nbsp;unbuffered&nbsp;result&nbsp;set$result&nbsp;=&nbsp;$query-&gt;fetchAll(SQLITE_ASSOC);foreach&nbsp;($result&nbsp;as&nbsp;$entry)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Name:&nbsp;'&nbsp;.&nbsp;$entry['name']&nbsp;.&nbsp;'&nbsp;&nbsp;E-mail:&nbsp;'&nbsp;.&nbsp;$entry['email'];}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_fetch_array() - Fetches the next row from a result set as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-string.php","title":"sqlite_fetch_string","description":"\n \n  sqlite_fetch_string\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_fetch_string &mdash; Alias of sqlite_fetch_single()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   sqlite_fetch_single().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-fetch-single.php","title":"sqlite_fetch_singleSQLiteResult-fetchSingleSQLiteUnbuffered-fetchSingle","description":"\n \n  sqlite_fetch_single\n  SQLiteResult-fetchSingle\n  SQLiteUnbuffered-fetchSingle\n  (PHP 5, PECL sqlite &gt;= 1.0.1)sqlite_fetch_single -- SQLiteResult-&gt;fetchSingle -- SQLiteUnbuffered-&gt;fetchSingle &mdash; Fetches the first column of a result set as a string\n\n \n\n \n  Description\n  \n   string sqlite_fetch_single\n    ( resource $result\n   [, bool $decode_binary = true\n  ] )\n\n  Object oriented style (method):\n  \n   \n   \n    string SQLiteResult::fetchSingle\n     ([ bool $decode_binary = true\n   ] )\n\n  \n  \n   \n   \n    string SQLiteUnbuffered::fetchSingle\n     ([ bool $decode_binary = true\n   ] )\n\n  \n  \n   sqlite_fetch_single() is identical to\n   sqlite_fetch_array() except that it returns the value\n   of the first column of the rowset.\n  \n  \n   This is the most optimal way to retrieve data when you are only\n   interested in the values from a single column of data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     decode_binary\n     \n\n      When the decode_binary\nparameter is set to TRUE (the default), PHP will decode the binary encoding\nit applied to the data if it was encoded using the\nsqlite_escape_string().  You should normally leave this\nvalue at its default, unless you are interoperating with databases created by\nother sqlite capable applications.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the first column value, as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A sqlite_fetch_single() example\n    \n\n&lt;?phpif&nbsp;($dbhandle&nbsp;=&nbsp;sqlite_open('mysqlitedb',&nbsp;0666,&nbsp;$sqliteerror))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$sql&nbsp;=&nbsp;\"SELECT&nbsp;id&nbsp;FROM&nbsp;sometable&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;42\";&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;sqlite_query($dbhandle,&nbsp;$sql);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(sqlite_num_rows($res)&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;sqlite_fetch_single($res);&nbsp;\/\/&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite_close($dbhandle);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_fetch_array() - Fetches the next row from a result set as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-has-prev.php","title":"sqlite_has_prevSQLiteResult-hasPrev","description":"\n \n  sqlite_has_prev\n  SQLiteResult-hasPrev\n  (PHP 5)sqlite_has_prev -- SQLiteResult-&gt;hasPrev &mdash; Returns whether or not a previous row is available\n\n \n\n \n  Description\n  \n   bool sqlite_has_prev\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::hasPrev\n     ( void\n    )\n\n  \n  \n   Find whether there are more previous rows from the given result handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if there are more previous rows available from the\n   result handle, or FALSE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_prev() - Seek to the previous row number of a result set\n    sqlite_has_more() - Finds whether or not more rows are available\n    sqlite_num_rows() - Returns the number of rows in a buffered result set\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-has-more.php","title":"sqlite_has_more","description":"\n \n  sqlite_has_more\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_has_more &mdash; Finds whether or not more rows are available\n\n \n\n \n  Description\n  \n   bool sqlite_has_more\n    ( resource $result\n   )\n\n  \n   Finds whether more rows are available from the given result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if there are more rows available from the\n   result handle, or FALSE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_num_rows() - Returns the number of rows in a buffered result set\n    sqlite_changes() - Returns the number of rows that were changed by the most\n   recent SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-key.php","title":"sqlite_keySQLiteResult-key","description":"\n \n  sqlite_key\n  SQLiteResult-key\n  (PHP 5 &gt;= 5.1.0)sqlite_key -- SQLiteResult-&gt;key &mdash; Returns the current row index\n\n \n\n \n  Description\n  \n   int sqlite_key\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteResult::key\n     ( void\n    )\n\n  \n  \n   sqlite_key() returns the current row index of the\n   buffered result set result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the current row index of the buffered result set\n   result.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.4\n       \n        Prior to PHP 5.0.4, sqlite_key() was only able to be\n        called as a method on a\n        SQLiteResult object,\n        not procedurally.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_next() - Seek to the next row number\n    sqlite_current() - Fetches the current row from a result set as an array\n    sqlite_rewind() - Seek to the first row number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-field-name.php","title":"sqlite_field_nameSQLiteResult-fieldNameSQLiteUnbuffered-fieldName","description":"\n \n  sqlite_field_name\n  SQLiteResult-fieldName\n  SQLiteUnbuffered-fieldName\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_field_name -- SQLiteResult-&gt;fieldName -- SQLiteUnbuffered-&gt;fieldName &mdash; Returns the name of a particular field\n\n \n\n \n  Description\n  \n   string sqlite_field_name\n    ( resource $result\n   , int $field_index\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    string SQLiteResult::fieldName\n     ( int $field_index\n    )\n\n  \n  \n   \n   \n    string SQLiteUnbuffered::fieldName\n     ( int $field_index\n    )\n\n  \n  \n   Given the ordinal column number, field_index,\n   sqlite_field_name() returns the name of that field in\n   the result set result.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n    \n\n     field_index\n     \n\n      \n       The ordinal column number in the result set.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the name of a field in an SQLite result set, given the ordinal\n   column number; FALSE on error.\n  \n  The column names returned by\nSQLITE_ASSOC and SQLITE_BOTH will be\ncase-folded according to the value of the\nsqlite.assoc_case configuration\noption.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-last-error.php","title":"sqlite_last_errorSQLiteDatabase-lastError","description":"\n \n  sqlite_last_error\n  SQLiteDatabase-lastError\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_last_error -- SQLiteDatabase-&gt;lastError &mdash; Returns the error code of the last error for a database\n\n \n\n \n  Description\n  \n   int sqlite_last_error\n    ( resource $dbhandle\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteDatabase::lastError\n     ( void\n    )\n\n  \n  \n   Returns the error code from the last operation performed on\n   dbhandle (the database handle), or 0\n   when no error occurred. A human readable\n   description of the error code can be retrieved using\n   sqlite_error_string().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an error code, or 0 if no error occurred.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_error_string() - Returns the textual description of an error code\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-libencoding.php","title":"sqlite_libencoding","description":"\n \n  sqlite_libencoding\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_libencoding &mdash; Returns the encoding of the linked SQLite library\n\n \n\n \n  Description\n  \n   string sqlite_libencoding\n    ( void\n   )\n\n  \n   The SQLite library may be compiled in either ISO-8859-1\n   or UTF-8 compatible modes. This function allows you to\n   determine which encoding scheme is used by your version of the library.\n  \n  Warning\n   \n    The default PHP distribution builds libsqlite in\n    ISO-8859-1 encoding\n    mode.  However, this is a misnomer; rather than handling\n    ISO-8859-1, it operates according to your current\n    locale settings for string comparisons and sort ordering. So, rather\n    than ISO-8859-1, you should think of it as being\n    &#039;8-bit&#039; instead.\n   \n  \n  \n   When compiled with UTF-8 support, sqlite handles encoding and decoding\n   of UTF-8 multi-byte character sequences, but does not yet do a complete\n   job when working with the data (no normalization is performed for\n   example), and some comparison operations may still not be carried out\n   correctly.\n  \n  Warning\n   \n    It is not recommended that you use PHP in a web-server configuration\n    with a version of the SQLite library compiled with UTF-8 support, since\n    libsqlite will abort the process if it detects a problem with the\n    UTF-8 encoding.\n   \n  \n \n\n\n \n  Return Values\n  \n   Returns the library encoding.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_lib_version()\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-libversion.php","title":"sqlite_libversion","description":"\n \n  sqlite_libversion\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_libversion &mdash; Returns the version of the linked SQLite library\n\n \n\n \n  Description\n  \n   string sqlite_libversion\n    ( void\n   )\n\n  \n   Returns the version of the linked SQLite library.\n  \n \n\n \n \n  Return Values\n  \n   Returns the library version, as a string.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_libencoding() - Returns the encoding of the linked SQLite library\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-next.php","title":"sqlite_nextSQLiteResult-nextSQLiteUnbuffered-next","description":"\n \n  sqlite_next\n  SQLiteResult-next\n  SQLiteUnbuffered-next\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_next -- SQLiteResult-&gt;next -- SQLiteUnbuffered-&gt;next &mdash; Seek to the next row number\n\n \n\n \n  Description\n  \n   bool sqlite_next\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::next\n     ( void\n    )\n\n  \n  \n   \n   \n    bool SQLiteUnbuffered::next\n     ( void\n    )\n\n  \n  \n   sqlite_next() advances the result handle\n   result to the next row.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if there are no more rows.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_seek() - Seek to a particular row number of a buffered result set\n    sqlite_current() - Fetches the current row from a result set as an array\n    sqlite_rewind() - Seek to the first row number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-last-insert-rowid.php","title":"sqlite_last_insert_rowidSQLiteDatabase-lastInsertRowid","description":"\n \n  sqlite_last_insert_rowid\n  SQLiteDatabase-lastInsertRowid\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_last_insert_rowid -- SQLiteDatabase-&gt;lastInsertRowid &mdash; Returns the rowid of the most recently inserted row\n\n \n\n \n  Description\n  \n   int sqlite_last_insert_rowid\n    ( resource $dbhandle\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteDatabase::lastInsertRowid\n     ( void\n    )\n\n  \n  \n   Returns the rowid of the row that was most recently inserted into the\n   database dbhandle, if it was created as an\n   auto-increment field.\n  \n  Tip\n   \n    You can create auto-increment fields in SQLite by declaring them as\n    INTEGER PRIMARY KEY in your table schema.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from sqlite_open()\n       when used procedurally.  This parameter is not required\n       when using the object-oriented method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the row id, as an integer.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-num-fields.php","title":"sqlite_num_fieldsSQLiteResult-numFieldsSQLiteUnbuffered-numFields","description":"\n \n  sqlite_num_fields\n  SQLiteResult-numFields\n  SQLiteUnbuffered-numFields\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_num_fields -- SQLiteResult-&gt;numFields -- SQLiteUnbuffered-&gt;numFields &mdash; Returns the number of fields in a result set\n\n \n\n \n  Description\n  \n   int sqlite_num_fields\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteResult::numFields\n     ( void\n    )\n\n  \n  \n   \n   \n    int SQLiteUnbuffered::numFields\n     ( void\n    )\n\n  \n  \n   Returns the number of fields in the result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of fields, as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_changes() - Returns the number of rows that were changed by the most\n   recent SQL statement\n    sqlite_num_rows() - Returns the number of rows in a buffered result set\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-num-rows.php","title":"sqlite_num_rowsSQLiteResult-numRows","description":"\n \n  sqlite_num_rows\n  SQLiteResult-numRows\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_num_rows -- SQLiteResult-&gt;numRows &mdash; Returns the number of rows in a buffered result set\n\n \n\n \n  Description\n  \n   int sqlite_num_rows\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    int SQLiteResult::numRows\n     ( void\n    )\n\n  \n  \n   Returns the number of rows in the buffered result\n   set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of rows, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Procedural example\n    \n\n&lt;?php$db&nbsp;=&nbsp;sqlite_open('mysqlitedb');$result&nbsp;=&nbsp;sqlite_query($db,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;mytable&nbsp;WHERE&nbsp;name='John&nbsp;Doe'\");$rows&nbsp;=&nbsp;sqlite_num_rows($result);echo&nbsp;\"Number&nbsp;of&nbsp;rows:&nbsp;$rows\";?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Object-oriented example\n    \n\n&lt;?php$db&nbsp;=&nbsp;new&nbsp;SQLiteDatabase('mysqlitedb');$result&nbsp;=&nbsp;$db-&gt;query(\"SELECT&nbsp;*&nbsp;FROM&nbsp;mytable&nbsp;WHERE&nbsp;name='John&nbsp;Doe'\");$rows&nbsp;=&nbsp;$result-&gt;numRows();echo&nbsp;\"Number&nbsp;of&nbsp;rows:&nbsp;$rows\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_changes() - Returns the number of rows that were changed by the most\n   recent SQL statement\n    sqlite_query() - Executes a query against a given database and returns a result handle\n    sqlite_num_fields() - Returns the number of fields in a result set\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-prev.php","title":"sqlite_prevSQLiteResult-prev","description":"\n \n  sqlite_prev\n  SQLiteResult-prev\n  (PHP 5)sqlite_prev -- SQLiteResult-&gt;prev &mdash; Seek to the previous row number of a result set\n\n \n\n \n  Description\n  \n   bool sqlite_prev\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::prev\n     ( void\n    )\n\n  \n  \n   sqlite_prev() seeks back the \n   result handle to the previous row.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success, or FALSE if there are no more previous rows.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_has_prev() - Returns whether or not a previous row is available\n    sqlite_rewind() - Seek to the first row number\n    sqlite_next() - Seek to the next row number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-popen.php","title":"sqlite_popen","description":"\n \n  sqlite_popen\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_popen &mdash; \n   Opens a persistent handle to an SQLite database and create the database if it does not exist\n  \n\n \n\n \n  Description\n  \n   resource sqlite_popen\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )\n\n  \n   This function behaves identically to sqlite_open()\n   except that is uses the persistent resource mechanism of PHP.\n   For information about the meaning of the parameters, read the\n   sqlite_open() manual page.\n  \n  \n   sqlite_popen() will first check to see if a persistent\n   handle has already been opened for the given\n   filename.  If it finds one, it returns that handle\n   to your script, otherwise it opens a fresh handle to the database.\n  \n  \n   The benefit of this approach is that you don&#039;t incur the performance\n   cost of re-reading the database and index schema on each page hit served\n   by persistent web server SAPI&#039;s (any SAPI except for regular CGI or CLI).\n  \n  Note: \n   \n    If you use persistent handles and have the database updated by a\n    background process (perhaps via a crontab), and that process re-creates\n    the database by overwriting it (either by unlinking and rebuilding, or\n    moving the updated version to replace the current version),\n    you may experience undefined behaviour when a persistent handle on the\n    old version of the database is recycled.\n   \n   \n    To avoid this situation, have your background processes open the same\n    database file and perform their updates in a transaction.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the SQLite database.  If the file does not exist, SQLite\n       will attempt to create it.  PHP must have write permissions to the file\n       if data is inserted, the database schema is modified or to create the\n       database if it does not exist.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value.\n      \n     \n\n    \n\n    \n\n     error_message\n     \n\n      \n       Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource (database handle) on success, FALSE on error.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_open() - Opens an SQLite database and create the database if it does not exist\n    sqlite_close() - Closes an open SQLite database\n    sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-open.php","title":"sqlite_open","description":"\n \n  sqlite_open\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_open &mdash; Opens an SQLite database and create the database if it does not exist\n\n \n\n \n  Description\n  \n   resource sqlite_open\n    ( string $filename\n   [, int $mode = 0666\n   [, string &$error_message\n  ]] )\n\n  Object oriented style (constructor):\n  \n   \n   \n     SQLiteDatabase::__construct\n     ( string $filename\n    [, int $mode = 0666\n    [, string &$error_message\n   ]] )\n\n  \n  \n   Opens an SQLite database or creates the database if it does not exist.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the SQLite database.  If the file does not exist, SQLite\n       will attempt to create it.  PHP must have write permissions to the file\n       if data is inserted, the database schema is modified or to create the\n       database if it does not exist.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       The mode of the file. Intended to be used to open the database in\n       read-only mode.  Presently, this parameter is ignored by the sqlite\n       library.  The default value for mode is the octal value\n       0666 and this is the recommended value.\n      \n     \n\n    \n\n    \n\n     error_message\n     \n\n      \n       Passed by reference and is set to hold a descriptive error message\n       explaining why the database could not be opened if there was an error.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource (database handle) on success, FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sqlite_open() example\n    \n\n&lt;?phpif&nbsp;($db&nbsp;=&nbsp;sqlite_open('mysqlitedb',&nbsp;0666,&nbsp;$sqliteerror))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlite_query($db,&nbsp;'CREATE&nbsp;TABLE&nbsp;foo&nbsp;(bar&nbsp;varchar(10))');&nbsp;&nbsp;&nbsp;&nbsp;sqlite_query($db,&nbsp;\"INSERT&nbsp;INTO&nbsp;foo&nbsp;VALUES&nbsp;('fnord')\");&nbsp;&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;sqlite_query($db,&nbsp;'select&nbsp;bar&nbsp;from&nbsp;foo');&nbsp;&nbsp;&nbsp;&nbsp;var_dump(sqlite_fetch_array($result));&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die($sqliteerror);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Tip\n   \n    On Unix platforms, SQLite is sensitive to scripts that use the fork() system call.  If you\n    do have such a script, it is recommended that you close the handle prior\n    to forking and then re-open it in the child and\/or parent.\n    For more information on this issue, see \n    &raquo;&nbsp;The C language interface\n    to the SQLite library in the section entitled\n    Multi-Threading And SQLite. \n   \n  \n  Tip\n   \n    It is not recommended to work with SQLite databases mounted on NFS\n    partitions.  Since NFS is notoriously bad when it comes to locking you\n    may find that you cannot even open the database at all, and if it\n    succeeds, the locking behaviour may be undefined.\n   \n  \n  Note: \n   \n    Starting with SQLite library version 2.8.2, you can specify\n    :memory: as the filename to\n    create a database that lives only in the memory of the computer.\n    This is useful mostly for temporary processing, as the in-memory\n    database will be destroyed when the process ends.  It can also be\n    useful when coupled with the ATTACH DATABASE SQL\n    statement to load other databases and move and query data between them.\n   \n  \n  Note: \n   \n    SQLite is safe mode and open_basedir aware.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlite_popen() - Opens a persistent handle to an SQLite database and create the database if it does not exist\n    sqlite_close() - Closes an open SQLite database\n    sqlite_factory() - Opens an SQLite database and returns an SQLiteDatabase object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-rewind.php","title":"sqlite_rewindSQLiteResult-rewind","description":"\n \n  sqlite_rewind\n  SQLiteResult-rewind\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_rewind -- SQLiteResult-&gt;rewind &mdash; Seek to the first row number\n\n \n\n \n  Description\n  \n   bool sqlite_rewind\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::rewind\n     ( void\n    )\n\n  \n  \n   sqlite_rewind() seeks back to the first row in the\n   given result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns FALSE if there are no rows in the result set, TRUE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_next() - Seek to the next row number\n    sqlite_current() - Fetches the current row from a result set as an array\n    sqlite_seek() - Seek to a particular row number of a buffered result set\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-seek.php","title":"sqlite_seekSQLiteResult-seek","description":"\n \n  sqlite_seek\n  SQLiteResult-seek\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_seek -- SQLiteResult-&gt;seek &mdash; Seek to a particular row number of a buffered result set\n\n \n\n \n  Description\n  \n   bool sqlite_seek\n    ( resource $result\n   , int $rownum\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::seek\n     ( int $rownum\n    )\n\n  \n  \n   sqlite_seek() seeks to the row given by the parameter\n   rownum.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n    \n\n     rownum\n     \n\n      \n       The ordinal row number to seek to.  The row number is zero-based (0 is\n       the first row).\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns FALSE if the row does not exist, TRUE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_next() - Seek to the next row number\n    sqlite_current() - Fetches the current row from a result set as an array\n    sqlite_rewind() - Seek to the first row number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-single-query.php","title":"sqlite_single_querySQLiteDatabase-singleQuery","description":"\n \n  sqlite_single_query\n  SQLiteDatabase-singleQuery\n  (PHP 5, PECL sqlite &gt;= 1.0.1)sqlite_single_query -- SQLiteDatabase-&gt;singleQuery &mdash; \n   Executes a query and returns either an array for one single column or the value of the first row\n  \n\n \n\n \n  Description\n  \n   array sqlite_single_query\n    ( resource $db\n   , string $query\n   [, bool $first_row_only\n   [, bool $decode_binary\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    array SQLiteDatabase::singleQuery\n     ( string $query\n    [, bool $first_row_only\n    [, bool $decode_binary\n   ]] )\n\n  \n  \n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-query.php","title":"sqlite_querySQLiteDatabase-query","description":"\n \n  sqlite_query\n  SQLiteDatabase-query\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_query -- SQLiteDatabase-&gt;query &mdash; Executes a query against a given database and returns a result handle\n\n \n\n \n  Description\n  \n   resource sqlite_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg\n  ]] )\n\n  \n   resource sqlite_query\n    ( string $query\n   , resource $dbhandle\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg\n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    SQLiteResult SQLiteDatabase::query\n     ( string $query\n    [, int $result_type = SQLITE_BOTH\n    [, string &$error_msg\n   ]] )\n\n  \n  \n   Executes an SQL statement given by the query against\n   a given database handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The query to be executed.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     error_msg\n     \n\n      \n       The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function.\n      \n     \n\n    \n\n\n   \n\n  \n  Note: Two alternative syntaxes are\nsupported for compatibility with other database extensions (such as MySQL).\nThe preferred form is the first, where the dbhandle\nparameter is the first parameter to the function.\n \n\n\n \n  Return Values\n  \n   This function will return a result handle or FALSE on failure.\n   For queries that return rows, the result handle can then be used with\n   functions such as sqlite_fetch_array() and\n   sqlite_seek().\n  \n  \n   Regardless of the query type, this function will return FALSE if the\n   query failed.\n  \n  \n   sqlite_query() returns a buffered, seekable result\n   handle.  This is useful for reasonably small queries where you need to\n   be able to randomly access the rows.  Buffered result handles will\n   allocate memory to hold the entire result and will not return until it\n   has been fetched.  If you only need sequential access to the data, it is\n   recommended that you use the much higher performance\n   sqlite_unbuffered_query() instead.\n  \n \n\n\n\n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the error_msg parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Warning\n   \n    SQLite will execute multiple queries separated by\n    semicolons, so you can use it to execute a batch of SQL that you have\n    loaded from a file or have embedded in a script. However, this works only\n    when the result of the function is not used - if it is used, \n    only the first SQL statement would be executed. Function\n    sqlite_exec() will always execute multiple SQL \n    statements.\n   \n   \n    When executing multiple queries, the return value of this function\n    will be FALSE if there was an error, but undefined otherwise (it might\n    be TRUE for success or it might return a result handle).\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_unbuffered_query() - Execute a query that does not prefetch and buffer all data\n    sqlite_array_query() - Execute a query against a given database and returns an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-udf-decode-binary.php","title":"sqlite_udf_decode_binary","description":"\n \n  sqlite_udf_decode_binary\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_udf_decode_binary &mdash; Decode binary data passed as parameters to an UDF\n\n \n\n \n  Description\n  \n   string sqlite_udf_decode_binary\n    ( string $data\n   )\n\n  \n   Decodes binary data passed as parameters to a UDF.\n  \n  \n   You must call this function on parameters passed to your UDF if you need\n   them to handle binary data, as the binary encoding employed by PHP will\n   obscure the content and of the parameter in its natural, non-coded form.\n  \n  \n   PHP does not perform this encode\/decode operation automatically as it would\n   severely impact performance if it did.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The encoded data that will be decoded, data that was applied by either\n       sqlite_udf_encode_binary() or\n       sqlite_escape_string().       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   The decoded string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 binary-safe max_length aggregation function example\n    \n\n&lt;?php$data&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;'one',&nbsp;&nbsp;&nbsp;'two',&nbsp;&nbsp;&nbsp;'three',&nbsp;&nbsp;&nbsp;'four',&nbsp;&nbsp;&nbsp;'five',&nbsp;&nbsp;&nbsp;'six',&nbsp;&nbsp;&nbsp;'seven',&nbsp;&nbsp;&nbsp;'eight',&nbsp;&nbsp;&nbsp;'nine',&nbsp;&nbsp;&nbsp;'ten',&nbsp;&nbsp;&nbsp;);$db&nbsp;=&nbsp;sqlite_open(':memory:');sqlite_query($db,&nbsp;\"CREATE&nbsp;TABLE&nbsp;strings(a)\");foreach&nbsp;($data&nbsp;as&nbsp;$str)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;=&nbsp;sqlite_escape_string($str);&nbsp;&nbsp;&nbsp;&nbsp;sqlite_query($db,&nbsp;\"INSERT&nbsp;INTO&nbsp;strings&nbsp;VALUES&nbsp;('$str')\");}function&nbsp;max_len_step(&amp;$context,&nbsp;$string)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$string&nbsp;=&nbsp;sqlite_udf_decode_binary($string);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strlen($string)&nbsp;&gt;&nbsp;$context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$context&nbsp;=&nbsp;strlen($string);&nbsp;&nbsp;&nbsp;&nbsp;}}function&nbsp;max_len_finalize(&amp;$context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$context;}sqlite_create_aggregate($db,&nbsp;'max_len',&nbsp;'max_len_step',&nbsp;'max_len_finalize');var_dump(sqlite_array_query($db,&nbsp;'SELECT&nbsp;max_len(a)&nbsp;from&nbsp;strings'));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_udf_encode_binary() - Encode binary data before returning it from an UDF\n    sqlite_create_function() - Registers a &quot;regular&quot; User Defined Function for use in SQL statements\n    sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-udf-encode-binary.php","title":"sqlite_udf_encode_binary","description":"\n \n  sqlite_udf_encode_binary\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_udf_encode_binary &mdash; Encode binary data before returning it from an UDF\n\n \n\n \n  Description\n  \n   string sqlite_udf_encode_binary\n    ( string $data\n   )\n\n  \n   sqlite_udf_encode_binary() applies a binary encoding\n   to the data so that it can be safely returned from\n   queries (since the underlying libsqlite API is not binary safe).\n  \n  \n   If there is a chance that your data might be binary unsafe (e.g.: it\n   contains a NUL byte in the middle rather than at the end, or if it has and\n   0x01 byte as the first character) then you must\n   call this function to encode the return value from your UDF.\n  \n  \n   PHP does not perform this encode\/decode operation automatically as it would\n   severely impact performance if it did.\n  \n  Note: \n   \n    Do not use sqlite_escape_string() to quote strings\n    returned from UDF&#039;s as it will lead to double-quoting of the data.  Use\n    sqlite_udf_encode_binary() instead!\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The string being encoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   The encoded string.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_udf_decode_binary() - Decode binary data passed as parameters to an UDF\n    sqlite_escape_string() - Escapes a string for use as a query parameter\n    sqlite_create_function() - Registers a &quot;regular&quot; User Defined Function for use in SQL statements\n    sqlite_create_aggregate() - Register an aggregating UDF for use in SQL statements\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-valid.php","title":"sqlite_validSQLiteResult-validSQLiteUnbuffered-valid","description":"\n \n  sqlite_valid\n  SQLiteResult-valid\n  SQLiteUnbuffered-valid\n  (PHP 5)sqlite_valid -- SQLiteResult-&gt;valid -- SQLiteUnbuffered-&gt;valid &mdash; Returns whether more rows are available\n\n \n\n \n  Description\n  \n   bool sqlite_valid\n    ( resource $result\n   )\n\n  Object oriented style (method):\n  \n   \n   \n    bool SQLiteResult::valid\n     ( void\n    )\n\n  \n  \n   \n   \n    bool SQLiteUnbuffered::valid\n     ( void\n    )\n\n  \n  \n   Finds whether more rows are available from the given result handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The SQLite result resource.  This parameter is not required when using\n       the object-oriented method.\n      \n      Note: This function cannot be used with\nunbuffered result handles.\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if there are more rows available from the\n   result handle, or FALSE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_num_rows() - Returns the number of rows in a buffered result set\n    sqlite_changes() - Returns the number of rows that were changed by the most\n   recent SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlite-unbuffered-query.php","title":"sqlite_unbuffered_querySQLiteDatabase-unbufferedQuery","description":"\n \n  sqlite_unbuffered_query\n  SQLiteDatabase-unbufferedQuery\n  (PHP 5, PECL sqlite &gt;= 1.0.0)sqlite_unbuffered_query -- SQLiteDatabase-&gt;unbufferedQuery &mdash; Execute a query that does not prefetch and buffer all data\n\n \n\n \n  Description\n  \n   resource sqlite_unbuffered_query\n    ( resource $dbhandle\n   , string $query\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg\n  ]] )\n\n  \n   resource sqlite_unbuffered_query\n    ( string $query\n   , resource $dbhandle\n   [, int $result_type = SQLITE_BOTH\n   [, string &$error_msg   \n  ]] )\n\n  Object oriented style (method):\n  \n   \n   \n    SQLiteUnbuffered SQLiteDatabase::unbufferedQuery\n     ( string $query\n    [, int $result_type = SQLITE_BOTH\n    [, string &$error_msg\n   ]] )\n\n  \n  \n   sqlite_unbuffered_query() is identical to\n   sqlite_query() except that the result that is returned\n   is a sequential forward-only result set that can only be used to read\n   each row, one after the other.\n  \n  \n   This function is ideal for generating things such as HTML tables where\n   you only need to process one row at a time and don&#039;t need to randomly\n   access the row data.\n  \n  Note: \n   \n    Functions such as sqlite_seek(), \n    sqlite_rewind(), sqlite_next(),\n    sqlite_current(), and\n    sqlite_num_rows() do not work on result handles\n    returned from sqlite_unbuffered_query().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dbhandle\n     \n\n      \n       The SQLite Database resource; returned from\n       sqlite_open() when used procedurally. This parameter\n       is not required when using the object-oriented method.\n      \n     \n\n    \n\n    \n\n     query\n     \n\n      \n       The query to be executed.\n      \n      \n       Data inside the query should be properly escaped.\n      \n     \n\n    \n\n    \n\n     result_type\n     \n\n      The optional result_type\nparameter accepts a constant and determines how the returned array will be\nindexed. Using SQLITE_ASSOC will return only associative\nindices (named fields) while SQLITE_NUM will return\nonly numerical indices (ordinal field numbers). SQLITE_BOTH\nwill return both associative and numerical indices.\nSQLITE_BOTH is the default for this function.\n     \n\n    \n\n    \n\n     error_msg\n     \n\n      \n       The specified variable will be filled if an error occurs. This is\n       specially important because SQL syntax errors can&#039;t be fetched using\n       the sqlite_last_error() function.\n      \n     \n\n    \n\n   \n\n  \n  Note: Two alternative syntaxes are\nsupported for compatibility with other database extensions (such as MySQL).\nThe preferred form is the first, where the dbhandle\nparameter is the first parameter to the function.\n \n\n\n \n  Return Values\n  \n   Returns a result handle or FALSE on failure.\n  \n  \n   sqlite_unbuffered_query() returns a sequential\n   forward-only result set that can only be used to read each row, one after\n   the other.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the error_msg parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    sqlite_query() - Executes a query against a given database and returns a result handle\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-import-dom.php","title":"simplexml_import_dom","description":"\n \n  simplexml_import_dom\n  (PHP 5)simplexml_import_dom &mdash; Get a SimpleXMLElement object from a DOM node.\n\n \n \n  Description\n  \n   SimpleXMLElement simplexml_import_dom\n    ( DOMNode $node\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n  ] )\n\n  \n   This function takes a node of a DOM\n   document and makes it into a SimpleXML node. This new object can\n   then be used as a native SimpleXML element. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     node\n     \n\n      \n       A DOM Element node\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       You may use this optional parameter so that\n       simplexml_import_dom() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a SimpleXMLElement or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Importing DOM\n    \n\n&lt;?php$dom&nbsp;=&nbsp;new&nbsp;DOMDocument;$dom-&gt;loadXML('&lt;books&gt;&lt;book&gt;&lt;title&gt;blah&lt;\/title&gt;&lt;\/book&gt;&lt;\/books&gt;');if&nbsp;(!$dom)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Error&nbsp;while&nbsp;parsing&nbsp;the&nbsp;document';&nbsp;&nbsp;&nbsp;&nbsp;exit;}$s&nbsp;=&nbsp;simplexml_import_dom($dom);echo&nbsp;$s-&gt;book[0]-&gt;title;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nblah\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    dom_import_simplexml() - Gets a DOMElement object from a\n   SimpleXMLElement object\n    Basic SimpleXML usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-hostbased-file.php","title":"ssh2_auth_hostbased_file","description":"\n \n  ssh2_auth_hostbased_file\n  (PECL ssh2 &gt;= 0.9.0)ssh2_auth_hostbased_file &mdash; Authenticate using a public hostkey\n\n \n \n \n  Description\n  \n   bool ssh2_auth_hostbased_file\n    ( resource $session\n   , string $username\n   , string $hostname\n   , string $pubkeyfile\n   , string $privkeyfile\n   [, string $passphrase\n   [, string $local_username\n  ]] )\n\n  \n   Authenticate using a public hostkey read from a file.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n      \n     \n\n    \n\n    \n\n     hostname\n     \n\n      \n      \n     \n\n    \n\n    \n\n     pubkeyfile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     privkeyfile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     passphrase\n     \n\n      \n       If privkeyfile is encrypted (which it should\n       be), the passphrase must be provided.\n      \n     \n\n    \n\n    \n\n     local_username\n     \n\n      \n       If local_username is omitted, then the value\n       for username will be used for it.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Authentication using a public hostkey\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22,&nbsp;array('hostkey'=&gt;'ssh-rsa'));if&nbsp;(ssh2_auth_hostbased_file($connection,&nbsp;'remoteusername',&nbsp;'myhost.example.com',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'\/usr\/local\/etc\/hostkey_rsa.pub',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'\/usr\/local\/etc\/hostkey_rsa',&nbsp;'secret',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'localusername'))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Public&nbsp;Key&nbsp;Hostbased&nbsp;Authentication&nbsp;Successful\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;die('Public&nbsp;Key&nbsp;Hostbased&nbsp;Authentication&nbsp;Failed');}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    ssh2_auth_hostbased_file() requires libssh2 &gt;= 0.7 and\n    PHP\/SSH2 &gt;= 0.7\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-load-file.php","title":"simplexml_load_file","description":"\n \n  simplexml_load_file\n  (PHP 5)simplexml_load_file &mdash; \n   Interprets an XML file into an object\n  \n\n \n \n  Description\n  \n   SimpleXMLElement simplexml_load_file\n    ( string $filename\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n   [, int $options = 0\n   [, string $ns = &quot;&quot;\n   [, bool $is_prefix = false\n  ]]]] )\n\n  \n   Convert the well-formed XML document in the given file to an object.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the XML file\n      \n      Note: \n       \n        Libxml 2 unescapes the URI, so if you want to pass e.g.\n        b&amp;c as the URI parameter a,\n        you have to call\n        simplexml_load_file(rawurlencode(&#039;http:\/\/example.com\/?a=&#039; .\n        urlencode(&#039;b&amp;c&#039;))). Since PHP 5.1.0 you don&#039;t need to do\n        this because PHP will do it for you.\n       \n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       You may use this optional parameter so that\n       simplexml_load_file() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n       options parameter to specify additional Libxml parameters.\n      \n     \n\n    \n\n    \n\n     ns\n     \n\n      \n       Namespace prefix or URI.\n      \n     \n\n    \n\n    \n\n     is_prefix\n     \n\n      \n       TRUE if ns is a prefix, FALSE if it&#039;s a URI;\n       defaults to FALSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object of class SimpleXMLElement with\n   properties containing the data held within the XML document, or FALSE on failure.\n  \n \n\n \n \n  Errors\/Exceptions\n  \n   Produces an E_WARNING error message for each error\n   found in the XML data.\n  \n  Tip\n   \n    Use libxml_use_internal_errors() to suppress all XML\n    errors, and libxml_get_errors() to iterate over them\n    afterwards.\n   \n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Interpret an XML document\n    \n\n&lt;?php\/\/&nbsp;The&nbsp;file&nbsp;test.xml&nbsp;contains&nbsp;an&nbsp;XML&nbsp;document&nbsp;with&nbsp;a&nbsp;root&nbsp;element\/\/&nbsp;and&nbsp;at&nbsp;least&nbsp;an&nbsp;element&nbsp;\/[root]\/title.if&nbsp;(file_exists('test.xml'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$xml&nbsp;=&nbsp;simplexml_load_file('test.xml');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r($xml);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit('Failed&nbsp;to&nbsp;open&nbsp;test.xml.');}?&gt;\n\n\n    \n\n    \n     This script will display, on success:\n    \n    \n\nSimpleXMLElement Object\n(\n  [title] =&gt; Example Title\n  ...\n)\n\n    \n    \n     At this point, you can go about using $xml-&gt;title\n     and any other elements.\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    simplexml_load_string() - Interprets a string of XML into an object\n     SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object\n    Dealing with XML errors\n    libxml_use_internal_errors() - Disable libxml errors and allow user to fetch error information as needed\n    Basic SimpleXML usage\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-none.php","title":"ssh2_auth_none","description":"\n \n  ssh2_auth_none\n  (PECL ssh2 &gt;= 0.9.0)ssh2_auth_none &mdash; Authenticate as &quot;none&quot;\n\n \n \n \n  Description\n  \n   mixed ssh2_auth_none\n    ( resource $session\n   , string $username\n   )\n\n  \n   Attempt &quot;none&quot; authentication which usually will (and should) fail.\n   As part of the failure, this function will return an array of accepted\n   authentication methods. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       Remote user name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the server does accept &quot;none&quot; as an authentication\n   method, or an array of accepted authentication methods on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Retrieving a list of authentication methods\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);$auth_methods&nbsp;=&nbsp;ssh2_auth_none($connection,&nbsp;'user');if&nbsp;(in_array('password',&nbsp;$auth_methods))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Server&nbsp;supports&nbsp;password&nbsp;based&nbsp;authentication\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-password.php","title":"ssh2_auth_password","description":"\n \n  ssh2_auth_password\n  (PECL ssh2 &gt;= 0.9.0)ssh2_auth_password &mdash; Authenticate over SSH using a plain password\n\n \n \n \n  Description\n  \n   bool ssh2_auth_password\n    ( resource $session\n   , string $username\n   , string $password\n   )\n\n  \n   Authenticate over SSH using a plain password\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       Remote user name.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       Password for username\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Authenticating with a password\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);if&nbsp;(ssh2_auth_password($connection,&nbsp;'username',&nbsp;'secret'))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Authentication&nbsp;Successful!\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;die('Authentication&nbsp;Failed...');}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-auth-pubkey-file.php","title":"ssh2_auth_pubkey_file","description":"\n \n  ssh2_auth_pubkey_file\n  (PECL ssh2 &gt;= 0.9.0)ssh2_auth_pubkey_file &mdash; Authenticate using a public key\n\n \n \n \n  Description\n  \n   bool ssh2_auth_pubkey_file\n    ( resource $session\n   , string $username\n   , string $pubkeyfile\n   , string $privkeyfile\n   [, string $passphrase\n  ] )\n\n  \n   Authenticate using a public key read from a file.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n      \n     \n\n    \n\n    \n\n     pubkeyfile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     privkeyfile\n     \n\n      \n      \n     \n\n    \n\n    \n\n     passphrase\n     \n\n      \n       If privkeyfile is encrypted (which it should\n       be), the passphrase must be provided.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Authentication using a public key\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22,&nbsp;array('hostkey'=&gt;'ssh-rsa'));if&nbsp;(ssh2_auth_pubkey_file($connection,&nbsp;'username',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'\/home\/username\/.ssh\/id_rsa.pub',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'\/home\/username\/.ssh\/id_rsa',&nbsp;'secret'))&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Public&nbsp;Key&nbsp;Authentication&nbsp;Successful\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;die('Public&nbsp;Key&nbsp;Authentication&nbsp;Failed');}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-connect.php","title":"ssh2_connect","description":"\n \n  ssh2_connect\n  (PECL ssh2 &gt;= 0.9.0)ssh2_connect &mdash; Connect to an SSH server\n\n \n \n \n  Description\n  \n   resource ssh2_connect\n    ( string $host\n   [, int $port = 22\n   [, array $methods\n   [, array $callbacks\n  ]]] )\n\n  \n   Establish a connection to a remote SSH server.\n  \n  \n   Once connected, the client should verify the server&#039;s hostkey using\n   ssh2_fingerprint(), then authenticate using either\n   password or public key.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     host\n     \n\n      \n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n      \n     \n\n    \n\n    \n\n     methods\n     \n\n      \n       methods may be an associative array with up to four parameters\n       as described below.\n      \n      \n       \n        methods may be an associative array\n               with any or all of the following parameters.\n        \n         \n          \n           Index\n           Meaning\n           Supported Values*\n          \n\n         \n\n         \n          \n           kex\n           \n            List of key exchange methods to advertise, comma separated\n            in order of preference.\n           \n           \n            diffie-hellman-group1-sha1,\n            diffie-hellman-group14-sha1, and\n            diffie-hellman-group-exchange-sha1\n           \n          \n\n          \n           hostkey\n           \n            List of hostkey methods to advertise, come separated\n            in order of preference.\n           \n           \n            ssh-rsa and\n            ssh-dss\n           \n          \n\n          \n           client_to_server\n           \n            Associative array containing crypt, compression, and\n            message authentication code (MAC) method preferences\n            for messages sent from client to server.\n           \n           &nbsp;\n          \n\n          \n           server_to_client\n           \n            Associative array containing crypt, compression, and\n            message authentication code (MAC) method preferences\n            for messages sent from server to client.\n           \n           &nbsp;\n          \n\n         \n        \n       \n\n      \n      \n       * - Supported Values are dependent on methods supported by underlying library.\n       See &raquo;&nbsp;libssh2 documentation for additional\n       information.\n      \n      \n       \n        \n         client_to_server and\n         server_to_client may be an associative array\n         with any or all of the following parameters.\n        \n        \n         \n          \n           Index\n           Meaning\n           Supported Values*\n          \n\n         \n\n         \n          \n           crypt\n           List of crypto methods to advertise, comma separated\n            in order of preference.\n           \n            rijndael-cbc@lysator.liu.se,\n            aes256-cbc,\n            aes192-cbc,\n            aes128-cbc,\n            3des-cbc,\n            blowfish-cbc,\n            cast128-cbc,\n            arcfour, and\n            none**\n           \n          \n\n          \n           comp\n           List of compression methods to advertise, comma separated\n            in order of preference.\n           \n            zlib and\n            none\n           \n          \n\n          \n           mac\n           List of MAC methods to advertise, come separated\n            in order of preference.\n           \n            hmac-sha1,\n            hmac-sha1-96,\n            hmac-ripemd160,\n            hmac-ripemd160@openssh.com, and\n            none**\n           \n          \n\n         \n        \n       \n\n      \n      \n       Note: \n        Crypt and MAC method &quot;none&quot;\n        \n         For security reasons, none is disabled by the underlying\n         &raquo;&nbsp;libssh2 library unless explicitly enabled\n         during build time by using the appropriate .\/configure options.  See documentation\n         for the underlying library for more information.\n        \n       \n      \n     \n\n    \n\n    \n\n     callbacks\n     \n\n      \n       callbacks may be an associative array with any\n       or all of the following parameters.\n       \n        \n         Callbacks parameters\n        \n        \n         \n          \n           Index\n           Meaning\n           Prototype\n          \n\n         \n\n         \n          \n           ignore\n           \n            Name of function to call when an\n            SSH2_MSG_IGNORE packet is received\n           \n           void ignore_cb($message)\n          \n\n          \n           debug\n           \n            Name of function to call when an\n            SSH2_MSG_DEBUG packet is received\n           \n           void debug_cb($message, $language, $always_display)\n          \n\n          \n           macerror\n           \n            Name of function to call when a packet is received but the\n            message authentication code failed.  If the callback returns\n            TRUE, the mismatch will be ignored, otherwise the connection\n            will be terminated.\n           \n           bool macerror_cb($packet)\n          \n\n          \n           disconnect\n           \n            Name of function to call when an\n            SSH2_MSG_DISCONNECT packet is received\n           \n           void disconnect_cb($reason, $message, $language)\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource on success, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ssh2_connect() example\n    \n     Open a connection forcing 3des-cbc when sending packets, any strength\n     aes cipher when receiving packets, no compression in either direction,\n     and Group1 key exchange.\n    \n    \n\n&lt;?php\/*&nbsp;Notify&nbsp;the&nbsp;user&nbsp;if&nbsp;the&nbsp;server&nbsp;terminates&nbsp;the&nbsp;connection&nbsp;*\/function&nbsp;my_ssh_disconnect($reason,&nbsp;$message,&nbsp;$language)&nbsp;{&nbsp;&nbsp;printf(\"Server&nbsp;disconnected&nbsp;with&nbsp;reason&nbsp;code&nbsp;[%d]&nbsp;and&nbsp;message:&nbsp;%s\\n\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$reason,&nbsp;$message);}$methods&nbsp;=&nbsp;array(&nbsp;&nbsp;'kex'&nbsp;=&gt;&nbsp;'diffie-hellman-group1-sha1',&nbsp;&nbsp;'client_to_server'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'crypt'&nbsp;=&gt;&nbsp;'3des-cbc',&nbsp;&nbsp;&nbsp;&nbsp;'comp'&nbsp;=&gt;&nbsp;'none'),&nbsp;&nbsp;'server_to_client'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'crypt'&nbsp;=&gt;&nbsp;'aes256-cbc,aes192-cbc,aes128-cbc',&nbsp;&nbsp;&nbsp;&nbsp;'comp'&nbsp;=&gt;&nbsp;'none'));$callbacks&nbsp;=&nbsp;array('disconnect'&nbsp;=&gt;&nbsp;'my_ssh_disconnect');$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22,&nbsp;$methods,&nbsp;$callbacks);if&nbsp;(!$connection)&nbsp;die('Connection&nbsp;failed');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_fingerprint() - Retrieve fingerprint of remote server\n    ssh2_auth_none() - Authenticate as &quot;none&quot;\n    ssh2_auth_password() - Authenticate over SSH using a plain password\n    ssh2_auth_pubkey_file() - Authenticate using a public key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.simplexml-load-string.php","title":"simplexml_load_string","description":"\n \n  simplexml_load_string\n  (PHP 5)simplexml_load_string &mdash; \n   Interprets a string of XML into an object\n  \n\n \n \n  Description\n  \n   SimpleXMLElement simplexml_load_string\n    ( string $data\n   [, string $class_name = &quot;SimpleXMLElement&quot;\n   [, int $options = 0\n   [, string $ns = &quot;&quot;\n   [, bool $is_prefix = false\n  ]]]] )\n\n  \n   Takes a well-formed XML string and returns it as an object.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       A well-formed XML string\n      \n     \n\n    \n\n    \n\n     class_name\n     \n\n      \n       You may use this optional parameter so that\n       simplexml_load_string() will return an object of \n       the specified class. That class should extend the \n       SimpleXMLElement class.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       Since PHP 5.1.0 and Libxml 2.6.0, you may also use the\n       options parameter to specify additional Libxml parameters.\n      \n     \n\n    \n\n    \n\n     ns\n     \n\n      \n       Namespace prefix or URI.\n      \n     \n\n    \n\n    \n\n     is_prefix\n     \n\n      \n       TRUE if ns is a prefix, FALSE if it&#039;s a URI;\n       defaults to FALSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object of class SimpleXMLElement with\n   properties containing the data held within the xml document, or FALSE on failure.\n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Produces an E_WARNING error message for each error\n   found in the XML data.\n  \n  Tip\n   \n    Use libxml_use_internal_errors() to suppress all XML\n    errors, and libxml_get_errors() to iterate over them\n    afterwards.\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Interpret an XML string\n    \n\n&lt;?php$string&nbsp;=&nbsp;&lt;&lt;&lt;XML&lt;?xml&nbsp;version='1.0'?&gt;&nbsp;&lt;document&gt;&nbsp;&lt;title&gt;Forty&nbsp;What?&lt;\/title&gt;&nbsp;&lt;from&gt;Joe&lt;\/from&gt;&nbsp;&lt;to&gt;Jane&lt;\/to&gt;&nbsp;&lt;body&gt;&nbsp;&nbsp;I&nbsp;know&nbsp;that's&nbsp;the&nbsp;answer&nbsp;--&nbsp;but&nbsp;what's&nbsp;the&nbsp;question?&nbsp;&lt;\/body&gt;&lt;\/document&gt;XML;$xml&nbsp;=&nbsp;simplexml_load_string($string);print_r($xml);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nSimpleXMLElement Object\n(\n  [title] =&gt; Forty What?\n  [from] =&gt; Joe\n  [to] =&gt; Jane\n  [body] =&gt;\n   I know that&#039;s the answer -- but what&#039;s the question?\n)\n\n    \n    \n     At this point, you can go about using $xml-&gt;body\n     and such.\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    simplexml_load_file() - Interprets an XML file into an object\n     SimpleXMLElement::__construct() - Creates a new SimpleXMLElement object\n    Dealing with XML errors\n    libxml_use_internal_errors() - Disable libxml errors and allow user to fetch error information as needed\n    Basic SimpleXML usage\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-fetch-stream.php","title":"ssh2_fetch_stream","description":"\n \n  ssh2_fetch_stream\n  (PECL ssh2 &gt;= 0.9.0)ssh2_fetch_stream &mdash; Fetch an extended data stream\n\n \n \n \n  Description\n  \n   resource ssh2_fetch_stream\n    ( resource $channel\n   , int $streamid\n   )\n\n  \n   Fetches an alternate substream associated with an SSH2 channel stream.\n   The SSH2 protocol currently defines only one substream, STDERR, which has\n   a substream ID of SSH2_STREAM_STDERR (defined as 1).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     channel\n     \n\n      \n      \n     \n\n    \n\n    \n\n     streamid\n     \n\n      \n       An SSH2 channel stream.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the requested stream resource.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Opening a shell and retrieving the stderr stream associated with it\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$stdio_stream&nbsp;=&nbsp;ssh2_shell($connection);$stderr_stream&nbsp;=&nbsp;ssh2_fetch_stream($stdio_stream,&nbsp;SSH2_STREAM_STDERR);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_shell() - Request an interactive shell\n    ssh2_exec() - Execute a command on a remote server\n    ssh2_connect() - Connect to an SSH server\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-exec.php","title":"ssh2_exec","description":"\n \n  ssh2_exec\n  (PECL ssh2 &gt;= 0.9.0)ssh2_exec &mdash; Execute a command on a remote server\n\n \n \n \n  Description\n  \n   resource ssh2_exec\n    ( resource $session\n   , string $command\n   [, string $pty\n   [, array $env\n   [, int $width = 80\n   [, int $height = 25\n   [, int $width_height_type = SSH2_TERM_UNIT_CHARS\n  ]]]]] )\n\n  \n   Execute a command at the remote end and allocate a channel for it.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     command\n     \n\n      \n      \n     \n\n    \n\n    \n\n     pty\n     \n\n      \n      \n     \n\n    \n\n    \n\n     env\n     \n\n      \n       env may be passed as an associative array of\n       name\/value pairs to set in the target environment.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       Width of the virtual terminal.\n      \n     \n\n    \n\n    \n\n     height\n     \n\n      \n       Height of the virtual terminal.\n      \n     \n\n    \n\n    \n\n     width_height_type\n     \n\n      \n       width_height_type should be one of\n       SSH2_TERM_UNIT_CHARS or\n       SSH2_TERM_UNIT_PIXELS.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a stream on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Executing a command\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$stream&nbsp;=&nbsp;ssh2_exec($connection,&nbsp;'\/usr\/local\/bin\/php&nbsp;-i');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_connect() - Connect to an SSH server\n    ssh2_shell() - Request an interactive shell\n    ssh2_tunnel() - Open a tunnel through a remote server\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-fingerprint.php","title":"ssh2_fingerprint","description":"\n \n  ssh2_fingerprint\n  (PECL ssh2 &gt;= 0.9.0)ssh2_fingerprint &mdash; Retrieve fingerprint of remote server\n\n \n \n \n  Description\n  \n   string ssh2_fingerprint\n    ( resource $session\n   [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX\n  ] )\n\n  \n   Returns a server hostkey hash from an active session.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags may be either of\n       SSH2_FINGERPRINT_MD5 or\n       SSH2_FINGERPRINT_SHA1 logically ORed with\n       SSH2_FINGERPRINT_HEX or\n       SSH2_FINGERPRINT_RAW.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the hostkey hash as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Checking the fingerprint against a known value\n    \n\n&lt;?php$known_host&nbsp;=&nbsp;'6F89C2F0A719B30CC38ABDF90755F2E4';$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);$fingerprint&nbsp;=&nbsp;ssh2_fingerprint($connection,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSH2_FINGERPRINT_MD5&nbsp;|&nbsp;SSH2_FINGERPRINT_HEX);if&nbsp;($fingerprint&nbsp;!=&nbsp;$known_host)&nbsp;{&nbsp;&nbsp;die(\"HOSTKEY&nbsp;MISMATCH!\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Possible&nbsp;Man-In-The-Middle&nbsp;Attack?\");}?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-methods-negotiated.php","title":"ssh2_methods_negotiated","description":"\n \n  ssh2_methods_negotiated\n  (PECL ssh2 &gt;= 0.9.0)ssh2_methods_negotiated &mdash; Return list of negotiated methods\n\n \n \n \n  Description\n  \n   array ssh2_methods_negotiated\n    ( resource $session\n   )\n\n  \n   Returns list of negotiated methods.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Determining what methods were negotiated\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);$methods&nbsp;=&nbsp;ssh2_methods_negotiated($connection);echo&nbsp;\"Encryption&nbsp;keys&nbsp;were&nbsp;negotiated&nbsp;using:&nbsp;{$methods['kex']}\\n\";echo&nbsp;\"Server&nbsp;identified&nbsp;using&nbsp;an&nbsp;{$methods['hostkey']}&nbsp;with&nbsp;\";echo&nbsp;\"fingerprint:&nbsp;\"&nbsp;.&nbsp;ssh2_fingerprint($connection)&nbsp;.&nbsp;\"\\n\";echo&nbsp;\"Client&nbsp;to&nbsp;Server&nbsp;packets&nbsp;will&nbsp;use&nbsp;methods:\\n\";echo&nbsp;\"\\tCrypt:&nbsp;{$methods['client_to_server']['crypt']}\\n\";echo&nbsp;\"\\tComp:&nbsp;{$methods['client_to_server']['comp']}\\n\";echo&nbsp;\"\\tMAC:&nbsp;{$methods['client_to_server']['mac']}\\n\";echo&nbsp;\"Server&nbsp;to&nbsp;Client&nbsp;packets&nbsp;will&nbsp;use&nbsp;methods:\\n\";echo&nbsp;\"\\tCrypt:&nbsp;{$methods['server_to_client']['crypt']}\\n\";echo&nbsp;\"\\tComp:&nbsp;{$methods['server_to_client']['comp']}\\n\";echo&nbsp;\"\\tMAC:&nbsp;{$methods['server_to_client']['mac']}\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_connect() - Connect to an SSH server\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-init.php","title":"ssh2_publickey_init","description":"\n \n  ssh2_publickey_init\n  (PECL ssh2 &gt;= 0.10)ssh2_publickey_init &mdash; \n   Initialize Publickey subsystem\n  \n\n \n  \n \n  Description\n  \n   resource ssh2_publickey_init\n    ( resource $session\n   )\n\n  \n   Request the Publickey subsystem from an already connected SSH2 server.\n  \n  \n   The publickey subsystem allows an already connected and authenticated\n   client to manage the list of authorized public keys stored on the\n   target server in an implementation agnostic manner.\n   If the remote server does not support the publickey subsystem,\n   the ssh2_publickey_init() function will return FALSE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an SSH2 Publickey Subsystem resource for use\n   with all other ssh2_publickey_*() methods or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: The public key subsystem\nis used for managing public keys on a server to which the client is\nalready authenticated.  To authenticate to a remote system\nusing public key authentication, use the\nssh2_auth_pubkey_file() function instead.\n \n\n\n \n  See Also\n  \n   \n    ssh2_publickey_add() - Add an authorized publickey\n    ssh2_publickey_remove() - Remove an authorized publickey\n    ssh2_publickey_list() - List currently authorized publickeys\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-add.php","title":"ssh2_publickey_add","description":"\n \n  ssh2_publickey_add\n  (PECL ssh2 &gt;= 0.10)ssh2_publickey_add &mdash; \n   Add an authorized publickey\n  \n\n \n\n \n  Description\n  \n   bool ssh2_publickey_add\n    ( resource $pkey\n   , string $algoname\n   , string $blob\n   [, bool $overwrite = false\n   [, array $attributes\n  ]] )\n\n\n  Note: The public key subsystem\nis used for managing public keys on a server to which the client is\nalready authenticated.  To authenticate to a remote system\nusing public key authentication, use the\nssh2_auth_pubkey_file() function instead.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pkey\n     \n\n      \n       Publickey Subsystem resource created by ssh2_publickey_init().\n      \n     \n\n    \n\n    \n\n     algoname\n     \n\n      \n       Publickey algorithm (e.g.): ssh-dss, ssh-rsa\n      \n     \n\n    \n\n    \n\n     blob\n     \n\n      \n       Publickey blob as raw binary data\n      \n     \n\n    \n\n    \n\n     overwrite\n     \n\n      \n       If the specified key already exists, should it be overwritten?\n      \n     \n\n    \n\n    \n\n     attributes\n     \n\n      \n       Associative array of attributes to assign to this public key.\n       Refer to ietf-secsh-publickey-subsystem for a list of supported attributes.\n       To mark an attribute as mandatory, precede its name with an asterisk.\n       If the server is unable to support an attribute marked mandatory,\n       it will abort the add process.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Adding a publickey with ssh2_publickey_add()\n    \n\n&lt;?php$ssh2&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($ssh2,&nbsp;'jdoe',&nbsp;'password');$pkey&nbsp;=&nbsp;ssh2_publickey_init($ssh2);$keyblob&nbsp;=&nbsp;base64_decode('AAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5PTrLRdjNONxXH1tVFGn0Bd26BF0aCP9qyJRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xjzaLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VEHYckxQ16CjSTibI5X69GmnYC9PNqEYq\/1TP+HF10=');ssh2_publickey_add($pkey,&nbsp;'ssh-rsa',&nbsp;$keyblob,&nbsp;false,&nbsp;array('comment'=&gt;\"John's&nbsp;Key\"));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_publickey_init() - Initialize Publickey subsystem\n    ssh2_publickey_remove() - Remove an authorized publickey\n    ssh2_publickey_list() - List currently authorized publickeys\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-list.php","title":"ssh2_publickey_list","description":"\n \n  ssh2_publickey_list\n  (PECL ssh2 &gt;= 0.10)ssh2_publickey_list &mdash; \n   List currently authorized publickeys\n  \n\n \n\n \n  Description\n  \n   array ssh2_publickey_list\n    ( resource $pkey\n   )\n\n  \n   List currently authorized publickeys.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pkey\n     \n\n      \n       Publickey Subsystem resource\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a numerically indexed array of keys,\n   each of which is an associative array containing:\n   name, blob, and attrs elements.\n  \n  \n   \n    Publickey elements\n    \n     \n      \n       Array Key\n       Meaning\n      \n\n     \n\n     \n      \n       name\n       Name of algorithm used by this publickey, for example:\n       ssh-dss or ssh-rsa.\n      \n\n      \n       blob\n       Publickey blob as raw binary data.\n      \n\n      \n       attrs\n       Attributes assigned to this publickey. The most common\n       attribute, and the only one supported by publickey version 1\n       servers, is comment, which may be any freeform\n       string.\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Listing authorized keys with ssh2_publickey_list()\n    \n\n&lt;?php$ssh2&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($ssh2,&nbsp;'jdoe',&nbsp;'secret');$pkey&nbsp;=&nbsp;ssh2_publickey_init($ssh2);$list&nbsp;=&nbsp;ssh2_publickey_list($pkey);foreach($list&nbsp;as&nbsp;$key)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"Key:&nbsp;{$key['name']}\\n\";&nbsp;&nbsp;echo&nbsp;\"Blob:&nbsp;\"&nbsp;.&nbsp;chunk_split(base64_encode($key['blob']),&nbsp;40,&nbsp;\"\\n\")&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;echo&nbsp;\"Comment:&nbsp;{$key['attrs']['comment']}\\n\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nKey: ssh-rsa\nBlob: AAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5P\nTrLRdjNONxXH1tVFGn0Bd26BF0aCP9qyJRlvdJ3j\n4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xjza\nLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VE\nHYckxQ16CjSTibI5X69GmnYC9PNqEYq\/1TP+HF10\nComment: John&#039;s Key\n\nKey: ssh-rsa\nBlob: AAAAB3NzaHVt6VqSGd5C1yc2EAAAABIwA232dnJA\nAIEA5HVt6VqSGd5PTrLRdjNONxX\/1TP+HF1HVt6V\nqSGd50H1tVFGn0BB3NzaC1yc2EAd26BF0aCP9qyJ\nRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26HVt6Vq\nSGd5sDHwfL351xjzaLpipu\\BGB3NzaC1yc2EA\/1T\nComment: Alice&#039;s Key\n\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: The public key subsystem\nis used for managing public keys on a server to which the client is\nalready authenticated.  To authenticate to a remote system\nusing public key authentication, use the\nssh2_auth_pubkey_file() function instead.\n \n\n\n \n  See Also\n  \n   \n    ssh2_publickey_init() - Initialize Publickey subsystem\n    ssh2_publickey_add() - Add an authorized publickey\n    ssh2_publickey_remove() - Remove an authorized publickey\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-publickey-remove.php","title":"ssh2_publickey_remove","description":"\n \n  ssh2_publickey_remove\n  (PECL ssh2 &gt;= 0.10)ssh2_publickey_remove &mdash; \n   Remove an authorized publickey\n  \n\n \n\n \n  Description\n  \n   bool ssh2_publickey_remove\n    ( resource $pkey\n   , string $algoname\n   , string $blob\n   )\n\n  \n   Removes an authorized publickey.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pkey\n     \n\n      \n       Publickey Subsystem Resource\n      \n     \n\n    \n\n    \n\n     algoname\n     \n\n      \n       Publickey algorithm (e.g.): ssh-dss, ssh-rsa\n      \n     \n\n    \n\n    \n\n     blob\n     \n\n      \n       Publickey blob as raw binary data\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Note: The public key subsystem\nis used for managing public keys on a server to which the client is\nalready authenticated.  To authenticate to a remote system\nusing public key authentication, use the\nssh2_auth_pubkey_file() function instead.\n \n\n\n \n  See Also\n  \n   \n    ssh2_publickey_init() - Initialize Publickey subsystem\n    ssh2_publickey_add() - Add an authorized publickey\n    ssh2_publickey_list() - List currently authorized publickeys\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-lstat.php","title":"ssh2_sftp_lstat","description":"\n \n  ssh2_sftp_lstat\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_lstat &mdash; Stat a symbolic link\n\n \n \n \n  Description\n  \n   array ssh2_sftp_lstat\n    ( resource $sftp\n   , string $path\n   )\n\n  \n   Stats a symbolic link on the remote filesystem without\n   following the link.\n  \n  \n   This function is similar to using the lstat() function\n   with the ssh2.sftp:\/\/ wrapper in PHP 5\n   and returns the same values.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n      \n     \n\n    \n\n    \n\n     path\n     \n\n      \n       Path to the remote symbolic link.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   See the documentation for stat() for details on the\n   values which may be returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Stating a symbolic link via SFTP\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);$statinfo&nbsp;=&nbsp;ssh2_sftp_lstat($sftp,&nbsp;'\/path\/to\/symlink');$filesize&nbsp;=&nbsp;$statinfo['size'];$group&nbsp;=&nbsp;$statinfo['gid'];$owner&nbsp;=&nbsp;$statinfo['uid'];$atime&nbsp;=&nbsp;$statinfo['atime'];$mtime&nbsp;=&nbsp;$statinfo['mtime'];$mode&nbsp;=&nbsp;$statinfo['mode'];?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_sftp_stat() - Stat a file on a remote filesystem\n    lstat() - Gives information about a file or symbolic link\n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-scp-send.php","title":"ssh2_scp_send","description":"\n \n  ssh2_scp_send\n  (PECL ssh2 &gt;= 0.9.0)ssh2_scp_send &mdash; Send a file via SCP\n\n \n \n \n  Description\n  \n   bool ssh2_scp_send\n    ( resource $session\n   , string $local_file\n   , string $remote_file\n   [, int $create_mode = 0644\n  ] )\n\n  \n   Copy a file from the local filesystem to the remote server using the SCP protocol.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       Path to the local file.\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       Path to the remote file.\n      \n     \n\n    \n\n    \n\n     create_mode\n     \n\n      \n       The file will be created with the mode specified by\n       create_mode.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Uploading a file via SCP\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');ssh2_scp_send($connection,&nbsp;'\/local\/filename',&nbsp;'\/remote\/filename',&nbsp;0644);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_scp_recv() - Request a file via SCP\n    copy() - Copies file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-readlink.php","title":"ssh2_sftp_readlink","description":"\n \n  ssh2_sftp_readlink\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_readlink &mdash; Return the target of a symbolic link\n\n \n \n \n  Description\n  \n   string ssh2_sftp_readlink\n    ( resource $sftp\n   , string $link\n   )\n\n  \n   Returns the target of a symbolic link.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     link\n     \n\n      \n       Path of the symbolic link.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the target of the symbolic link.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Reading a symbolic link\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);$target&nbsp;=&nbsp;ssh2_sftp_readlink($sftp,&nbsp;'\/tmp\/mysql.sock');\/*&nbsp;$target&nbsp;is&nbsp;now&nbsp;(e.g.):&nbsp;'\/var\/run\/mysql.sock'&nbsp;*\/?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    readlink() - Returns the target of a symbolic link\n    ssh2_sftp_symlink() - Create a symlink\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-mkdir.php","title":"ssh2_sftp_mkdir","description":"\n \n  ssh2_sftp_mkdir\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_mkdir &mdash; Create a directory\n\n \n \n \n  Description\n  \n   bool ssh2_sftp_mkdir\n    ( resource $sftp\n   , string $dirname\n   [, int $mode = 0777\n   [, bool $recursive = false\n  ]] )\n\n  \n   Creates a directory on the remote file server with permissions set to\n   mode.  \n  \n  \n   This function is similar to using mkdir() with the\n   ssh2.sftp:\/\/ wrapper.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     dirname\n     \n\n      \n       Path of the new directory.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Permissions on the new directory.\n      \n     \n\n    \n\n    \n\n     recursive\n     \n\n      \n       If recursive is TRUE any parent directories\n       required for dirname will be automatically created as well.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Creating a directory on a remote server\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);ssh2_sftp_mkdir($sftp,&nbsp;'\/home\/username\/newdir');\/*&nbsp;Or:&nbsp;&nbsp;mkdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/newdir\");&nbsp;*\/?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    mkdir() - Makes directory\n    ssh2_sftp_rmdir() - Remove a directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-scp-recv.php","title":"ssh2_scp_recv","description":"\n \n  ssh2_scp_recv\n  (PECL ssh2 &gt;= 0.9.0)ssh2_scp_recv &mdash; Request a file via SCP\n\n \n \n \n  Description\n  \n   bool ssh2_scp_recv\n    ( resource $session\n   , string $remote_file\n   , string $local_file\n   )\n\n  \n   Copy a file from the remote server to the local filesystem using the SCP protocol.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     remote_file\n     \n\n      \n       Path to the remote file.\n      \n     \n\n    \n\n    \n\n     local_file\n     \n\n      \n       Path to the local file.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Downloading a file via SCP\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');ssh2_scp_recv($connection,&nbsp;'\/remote\/filename',&nbsp;'\/local\/filename');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_scp_send() - Send a file via SCP\n    copy() - Copies file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-realpath.php","title":"ssh2_sftp_realpath","description":"\n \n  ssh2_sftp_realpath\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_realpath &mdash; Resolve the realpath of a provided path string\n\n \n \n \n  Description\n  \n   string ssh2_sftp_realpath\n    ( resource $sftp\n   , string $filename\n   )\n\n  \n   Translates filename into the effective real path\n   on the remote filesystem.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the real path as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Resolving a pathname\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);$realpath&nbsp;=&nbsp;ssh2_sftp_realpath($sftp,&nbsp;'\/home\/username\/..\/..\/..\/..\/\/.\/usr\/..\/etc\/passwd');\/*&nbsp;$realpath&nbsp;is&nbsp;now:&nbsp;'\/etc\/passwd'&nbsp;*\/?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    realpath() - Returns canonicalized absolute pathname\n    ssh2_sftp_symlink() - Create a symlink\n    ssh2_sftp_readlink() - Return the target of a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-rename.php","title":"ssh2_sftp_rename","description":"\n \n  ssh2_sftp_rename\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_rename &mdash; Rename a remote file\n\n \n \n \n  Description\n  \n   bool ssh2_sftp_rename\n    ( resource $sftp\n   , string $from\n   , string $to\n   )\n\n  \n   Renames a file on the remote filesystem.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     from\n     \n\n      \n       The current file that is being renamed.\n      \n     \n\n    \n\n    \n\n     to\n     \n\n      \n       The new file name that replaces from.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Renaming a file via sftp\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);ssh2_sftp_rename($sftp,&nbsp;'\/home\/username\/oldname',&nbsp;'\/home\/username\/newname');?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    rename() - Renames a file or directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-rmdir.php","title":"ssh2_sftp_rmdir","description":"\n \n  ssh2_sftp_rmdir\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_rmdir &mdash; Remove a directory\n\n \n \n \n  Description\n  \n   bool ssh2_sftp_rmdir\n    ( resource $sftp\n   , string $dirname\n   )\n\n  \n   Removes a directory from the remote file server.\n  \n  \n   This function is similar to using rmdir() with the\n   ssh2.sftp:\/\/ wrapper.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     dirname\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Removing a directory on a remote server\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);ssh2_sftp_rmdir($sftp,&nbsp;'\/home\/username\/deltodel');\/*&nbsp;Or:&nbsp;&nbsp;rmdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/dirtodel\");&nbsp;*\/?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    rmdir() - Removes directory\n    ssh2_sftp_mkdir() - Create a directory\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-stat.php","title":"ssh2_sftp_stat","description":"\n \n  ssh2_sftp_stat\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_stat &mdash; Stat a file on a remote filesystem\n\n \n \n \n  Description\n  \n   array ssh2_sftp_stat\n    ( resource $sftp\n   , string $path\n   )\n\n  \n   Stats a file on the remote filesystem following any symbolic links.\n  \n  \n   This function is similar to using the stat() function\n   with the ssh2.sftp:\/\/ wrapper in PHP 5\n   and returns the same values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n       \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     path\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   See the documentation for stat() for details on the\n   values which may be returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Stating a file via SFTP\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);$statinfo&nbsp;=&nbsp;ssh2_sftp_stat($sftp,&nbsp;'\/path\/to\/file');$filesize&nbsp;=&nbsp;$statinfo['size'];$group&nbsp;=&nbsp;$statinfo['gid'];$owner&nbsp;=&nbsp;$statinfo['uid'];$atime&nbsp;=&nbsp;$statinfo['atime'];$mtime&nbsp;=&nbsp;$statinfo['mtime'];$mode&nbsp;=&nbsp;$statinfo['mode'];?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_sftp_lstat() - Stat a symbolic link\n    lstat() - Gives information about a file or symbolic link\n    stat() - Gives information about a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-symlink.php","title":"ssh2_sftp_symlink","description":"\n \n  ssh2_sftp_symlink\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_symlink &mdash; Create a symlink\n\n \n \n \n  Description\n  \n   bool ssh2_sftp_symlink\n    ( resource $sftp\n   , string $target\n   , string $link\n   )\n\n  \n   Creates a symbolic link named link on the remote\n   filesystem pointing to target.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     target\n     \n\n      \n       Target of the symbolic link.\n      \n     \n\n    \n\n    \n\n     link\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Creating a symbolic link\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);ssh2_sftp_symlink($sftp,&nbsp;'\/var\/run\/mysql.sock',&nbsp;'\/tmp\/mysql.sock');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_sftp_readlink() - Return the target of a symbolic link\n    symlink() - Creates a symbolic link\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp-unlink.php","title":"ssh2_sftp_unlink","description":"\n \n  ssh2_sftp_unlink\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp_unlink &mdash; Delete a file\n\n \n \n \n  Description\n  \n   bool ssh2_sftp_unlink\n    ( resource $sftp\n   , string $filename\n   )\n\n  \n   Deletes a file on the remote filesystem.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     sftp\n     \n\n      \n       An SSH2 SFTP resource opened by ssh2_sftp().\n      \n     \n\n    \n\n    \n\n     filename\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Deleting a file\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);ssh2_sftp_unlink($sftp,&nbsp;'\/home\/username\/stale_file');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    unlink() - Deletes a file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-tunnel.php","title":"ssh2_tunnel","description":"\n \n  ssh2_tunnel\n  (PECL ssh2 &gt;= 0.9.0)ssh2_tunnel &mdash; Open a tunnel through a remote server\n\n \n \n \n  Description\n  \n   resource ssh2_tunnel\n    ( resource $session\n   , string $host\n   , int $port\n   )\n\n  \n   Open a socket stream to an arbitrary host\/port by way of the currently\n   connected SSH server.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     host\n     \n\n      \n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Opening a tunnel to an arbitrary host\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_pubkey_file($connection,&nbsp;'username',&nbsp;'id_dsa.pub',&nbsp;'id_dsa');$tunnel&nbsp;=&nbsp;ssh2_tunnel($connection,&nbsp;'10.0.0.101',&nbsp;12345);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_connect() - Connect to an SSH server\n    fsockopen() - Open Internet or Unix domain socket connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-shell.php","title":"ssh2_shell","description":"\n \n  ssh2_shell\n  (PECL ssh2 &gt;= 0.9.0)ssh2_shell &mdash; Request an interactive shell\n\n \n \n \n  Description\n  \n   resource ssh2_shell\n    ( resource $session\n   [, string $term_type = &quot;vanilla&quot;\n   [, array $env\n   [, int $width = 80\n   [, int $height = 25\n   [, int $width_height_type = SSH2_TERM_UNIT_CHARS\n  ]]]]] )\n\n  \n   Open a shell at the remote end and allocate a stream for it.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n    \n\n     term_type\n     \n\n      \n       term_type should correspond to one of the\n       entries in the target system&#039;s \/etc\/termcap file.\n      \n     \n\n    \n\n    \n\n     env\n     \n\n      \n       env may be passed as an associative array of\n       name\/value pairs to set in the target environment.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       Width of the virtual terminal.\n      \n     \n\n    \n\n    \n\n     height\n     \n\n      \n       Height of the virtual terminal.\n      \n     \n\n    \n\n    \n\n     width_height_type\n     \n\n      \n       width_height_type should be one of\n       SSH2_TERM_UNIT_CHARS or\n       SSH2_TERM_UNIT_PIXELS.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Executing a command\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$stream&nbsp;=&nbsp;ssh2_shell($connection,&nbsp;'vt102',&nbsp;null,&nbsp;80,&nbsp;24,&nbsp;SSH2_TERM_UNIT_CHARS);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_exec() - Execute a command on a remote server\n    ssh2_tunnel() - Open a tunnel through a remote server\n    ssh2_fetch_stream() - Fetch an extended data stream\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ssh2-sftp.php","title":"ssh2_sftp","description":"\n \n  ssh2_sftp\n  (PECL ssh2 &gt;= 0.9.0)ssh2_sftp &mdash; Initialize SFTP subsystem\n\n \n \n \n  Description\n  \n   resource ssh2_sftp\n    ( resource $session\n   )\n\n  \n   Request the SFTP subsystem from an already connected SSH2 server.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     session\n     \n\n      \n       An SSH connection link identifier, obtained from a call to\n       ssh2_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This method returns an SSH2 SFTP resource for use with\n   all other ssh2_sftp_*() methods and the\n   ssh2.sftp:\/\/ fopen wrapper.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Opening a file via SFTP\n    \n\n&lt;?php$connection&nbsp;=&nbsp;ssh2_connect('shell.example.com',&nbsp;22);ssh2_auth_password($connection,&nbsp;'username',&nbsp;'password');$sftp&nbsp;=&nbsp;ssh2_sftp($connection);$stream&nbsp;=&nbsp;fopen(\"ssh2.sftp:\/\/$sftp\/path\/to\/file\",&nbsp;'r');?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    ssh2_scp_recv() - Request a file via SCP\n    ssh2_scp_send() - Send a file via SCP\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-begin-transaction.php","title":"sqlsrv_begin_transaction","description":"\n \n  sqlsrv_begin_transaction\n  (No version information available, might only be in SVN)sqlsrv_begin_transaction &mdash; Begins a database transaction\n\n \n \n  Description\n  \n   bool sqlsrv_begin_transaction\n    ( resource $conn\n   )\n\n  \n   The transaction begun by sqlsrv_begin_transaction() includes \n   all statements that were executed after the call to \n   sqlsrv_begin_transaction() and before calls to \n   sqlsrv_rollback() or sqlsrv_commit(). \n   Explicit transactions should be started and committed or rolled back using \n   these functions instead of executing SQL statements that begin and committ\/roll \n   back transactions. For more information, see \n   &raquo;&nbsp;SQLSRV Transactions.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection resource returned by a call to sqlsrv_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_begin_transaction() example\n    \n    The following example demonstrates how to use \n    sqlsrv_begin_transaction() together with \n    sqlsrv_commit() and sqlsrv_rollback().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Begin&nbsp;the&nbsp;transaction.&nbsp;*\/if&nbsp;(&nbsp;sqlsrv_begin_transaction(&nbsp;$conn&nbsp;)&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Initialize&nbsp;parameter&nbsp;values.&nbsp;*\/$orderId&nbsp;=&nbsp;1;&nbsp;$qty&nbsp;=&nbsp;10;&nbsp;$productId&nbsp;=&nbsp;100;\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;first&nbsp;query.&nbsp;*\/$sql1&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;OrdersTable&nbsp;(ID,&nbsp;Quantity,&nbsp;ProductID)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES&nbsp;(?,&nbsp;?,&nbsp;?)\";$params1&nbsp;=&nbsp;array(&nbsp;$orderId,&nbsp;$qty,&nbsp;$productId&nbsp;);$stmt1&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql1,&nbsp;$params1&nbsp;);\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;second&nbsp;query.&nbsp;*\/$sql2&nbsp;=&nbsp;\"UPDATE&nbsp;InventoryTable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;Quantity&nbsp;=&nbsp;(Quantity&nbsp;-&nbsp;?)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ProductID&nbsp;=&nbsp;?\";$params2&nbsp;=&nbsp;array($qty,&nbsp;$productId);$stmt2&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql2,&nbsp;$params2&nbsp;);\/*&nbsp;If&nbsp;both&nbsp;queries&nbsp;were&nbsp;successful,&nbsp;commit&nbsp;the&nbsp;transaction.&nbsp;*\/\/*&nbsp;Otherwise,&nbsp;rollback&nbsp;the&nbsp;transaction.&nbsp;*\/if(&nbsp;$stmt1&nbsp;&amp;&amp;&nbsp;$stmt2&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_commit(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;committed.&lt;br&nbsp;\/&gt;\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_rollback(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;rolled&nbsp;back.&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_commit() - Commits a transaction that was begun with sqlsrv_begin_transaction\n    sqlsrv_rollback() - Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-cancel.php","title":"sqlsrv_cancel","description":"\n \n  sqlsrv_cancel\n  (No version information available, might only be in SVN)sqlsrv_cancel &mdash; Cancels a statement\n\n \n \n  Description\n  \n   bool sqlsrv_cancel\n    ( resource $stmt\n   )\n\n  \n   Cancels a statement. Any results associated with the statement that have not \n   been consumed are deleted. After sqlsrv_cancel() has been \n   called, the specified statement can be re-executed if it was created with \n   sqlsrv_prepare(). Calling sqlsrv_cancel() \n   is not necessary if all the results associated with the statement have been \n   consumed.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statement resource to be cancelled.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_cancel() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;Sales&nbsp;FROM&nbsp;Table_1\";$stmt&nbsp;=&nbsp;sqlsrv_prepare(&nbsp;$conn,&nbsp;$sql);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}if(&nbsp;sqlsrv_execute(&nbsp;$stmt&nbsp;)&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$salesTotal&nbsp;=&nbsp;0;$count&nbsp;=&nbsp;0;while(&nbsp;($row&nbsp;=&nbsp;sqlsrv_fetch_array(&nbsp;$stmt))&nbsp;&amp;&amp;&nbsp;$salesTotal&nbsp;&lt;=100000){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$qty&nbsp;=&nbsp;$row[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$price&nbsp;=&nbsp;$row[1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$salesTotal&nbsp;+=&nbsp;(&nbsp;$price&nbsp;*&nbsp;$qty);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count++;}echo&nbsp;\"$count&nbsp;sales&nbsp;accounted&nbsp;for&nbsp;the&nbsp;first&nbsp;$$salesTotal&nbsp;in&nbsp;revenue.&lt;br&nbsp;\/&gt;\";\/\/&nbsp;Cancel&nbsp;the&nbsp;pending&nbsp;results.&nbsp;The&nbsp;statement&nbsp;can&nbsp;be&nbsp;reused.sqlsrv_cancel(&nbsp;$stmt);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   The main difference between sqlsrv_cancel() and \n   sqlsrv_free_stmt() is that a statement resource cancelled with \n   sqlsrv_cancel() can be re-executed if it was created with \n   sqlsrv_prepare(). A statement resource cancelled with \n   sqlsrv_free_statement() cannot be re-executed.\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_free_stmt() - Frees all resources for the specified statement\n    sqlsrv_prepare() - Prepares a query for execution\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-client-info.php","title":"sqlsrv_client_info","description":"\n \n  sqlsrv_client_info\n  (No version information available, might only be in SVN)sqlsrv_client_info &mdash; Returns information about the client and specified connection\n\n \n \n  Description\n  \n   array sqlsrv_client_info\n    ( resource $conn\n   )\n\n  \n   Returns information about the client and specified connection\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection about which information is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an associative array with keys described in the table below. \n   Returns FALSE otherwise. \n   \n   Array returned by sqlsrv_client_info\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      DriverDllName\n      SQLNCLI10.DLL\n     \n\n     \n      DriverODBCVer\n      ODBC version (xx.yy)\n     \n\n     \n      DriverVer\n      SQL Server Native Client DLL version (10.5.xxx)\n     \n\n     \n      ExtensionVer\n      php_sqlsrv.dll version (2.0.xxx.x)\n     \n\n    \n   \n  \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_client_info() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connOptions&nbsp;=&nbsp;array(\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connOptions&nbsp;);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}if(&nbsp;$client_info&nbsp;=&nbsp;sqlsrv_client_info(&nbsp;$conn))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach(&nbsp;$client_info&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$key.\":&nbsp;\".$value.\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error&nbsp;in&nbsp;retrieving&nbsp;client&nbsp;info.&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_server_info() - Returns information about the server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-close.php","title":"sqlsrv_close","description":"\n \n  sqlsrv_close\n  (No version information available, might only be in SVN)sqlsrv_close &mdash; Closes an open connection and releases resourses associated with the connection\n\n \n \n  Description\n  \n   bool sqlsrv_close\n    ( resource $conn\n   )\n\n  \n   Closes an open connection and releases resourses associated with the connection.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection to be closed.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_close() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpres\";$connOptions&nbsp;=&nbsp;array(\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\",&nbsp;\"Database\"=&gt;\"dbname\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connOptions&nbsp;);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/-------------------------------------\/\/&nbsp;Perform&nbsp;database&nbsp;operations&nbsp;here.\/\/-------------------------------------\/\/&nbsp;Close&nbsp;the&nbsp;connection.sqlsrv_close(&nbsp;$conn&nbsp;);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_connect() - Opens a connection to a Microsoft SQL Server database\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-commit.php","title":"sqlsrv_commit","description":"\n \n  sqlsrv_commit\n  (No version information available, might only be in SVN)sqlsrv_commit &mdash; Commits a transaction that was begun with sqlsrv_begin_transaction()\n\n \n \n  Description\n  \n   bool sqlsrv_commit\n    ( resource $conn\n   )\n\n  \n   Commits a transaction that was begun with sqlsrv_begin_transaction(). \n   The connection is returned to auto-commit mode after sqlsrv_commit() \n   is called. The transaction that is committed includes all statements that were \n   executed after the call to sqlsrv_begin_transaction(). \n   Explicit transactions should be started and committed or rolled back using these \n   functions instead of executing SQL statements that begin and committ\/roll back \n   transactions. For more information, see \n   &raquo;&nbsp;SQLSRV Transactions.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection on which the transaction is to be committed.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_commit() example\n    \n    The following example demonstrates how to use sqlsrv_commit() \n    together with sqlsrv_begin_transaction() and \n    sqlsrv_rollback().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Begin&nbsp;the&nbsp;transaction.&nbsp;*\/if&nbsp;(&nbsp;sqlsrv_begin_transaction(&nbsp;$conn&nbsp;)&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Initialize&nbsp;parameter&nbsp;values.&nbsp;*\/$orderId&nbsp;=&nbsp;1;&nbsp;$qty&nbsp;=&nbsp;10;&nbsp;$productId&nbsp;=&nbsp;100;\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;first&nbsp;query.&nbsp;*\/$sql1&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;OrdersTable&nbsp;(ID,&nbsp;Quantity,&nbsp;ProductID)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES&nbsp;(?,&nbsp;?,&nbsp;?)\";$params1&nbsp;=&nbsp;array(&nbsp;$orderId,&nbsp;$qty,&nbsp;$productId&nbsp;);$stmt1&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql1,&nbsp;$params1&nbsp;);\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;second&nbsp;query.&nbsp;*\/$sql2&nbsp;=&nbsp;\"UPDATE&nbsp;InventoryTable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;Quantity&nbsp;=&nbsp;(Quantity&nbsp;-&nbsp;?)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ProductID&nbsp;=&nbsp;?\";$params2&nbsp;=&nbsp;array($qty,&nbsp;$productId);$stmt2&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql2,&nbsp;$params2&nbsp;);\/*&nbsp;If&nbsp;both&nbsp;queries&nbsp;were&nbsp;successful,&nbsp;commit&nbsp;the&nbsp;transaction.&nbsp;*\/\/*&nbsp;Otherwise,&nbsp;rollback&nbsp;the&nbsp;transaction.&nbsp;*\/if(&nbsp;$stmt1&nbsp;&amp;&amp;&nbsp;$stmt2&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_commit(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;committed.&lt;br&nbsp;\/&gt;\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_rollback(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;rolled&nbsp;back.&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_begin_transaction() - Begins a database transaction\n    sqlsrv_rollback() - Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-configure.php","title":"sqlsrv_configure","description":"\n \n  sqlsrv_configure\n  (No version information available, might only be in SVN)sqlsrv_configure &mdash; Changes the driver error handling and logging configurations\n\n \n \n  Description\n  \n   bool sqlsrv_configure\n    ( string $setting\n   , mixed $value\n   )\n\n  \n   Changes the driver error handling and logging configurations.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     setting\n     \n\n      \n       The name of the setting to set. The possible values are \n       &quot;WarningsReturnAsErrors&quot;, &quot;LogSubsystems&quot;, and &quot;LogSeverity&quot;.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The value of the specified setting. The following table shows possible values:\n          \n   Error and Logging Setting Options\n   \n    \n     \n      Setting\n      Options\n     \n\n    \n\n    \n     \n      WarningsReturnAsErrors\n      1 (TRUE) or 0 (FALSE)\n     \n\n     \n      LogSubsystems\n      SQLSRV_LOG_SYSTEM_ALL (-1) \n      SQLSRV_LOG_SYSTEM_CONN (2) \n      SQLSRV_LOG_SYSTEM_INIT (1) \n      SQLSRV_LOG_SYSTEM_OFF (0) \n      SQLSRV_LOG_SYSTEM_STMT (4) \n      SQLSRV_LOG_SYSTEM_UTIL (8)\n     \n\n     \n      LogSeverity\n      SQLSRV_LOG_SEVERITY_ALL (-1) \n      SQLSRV_LOG_SEVERITY_ERROR (1) \n      SQLSRV_LOG_SEVERITY_NOTICE (4) \n      SQLSRV_LOG_SEVERITY_WARNING (2)\n     \n\n    \n   \n  \n\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  See Also\n  \n   \n    &raquo;&nbsp;SQLSRV Error Handling.\n    &raquo;&nbsp;Logging SQLSRV Activity.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-connect.php","title":"sqlsrv_connect","description":"\n \n  sqlsrv_connect\n  (No version information available, might only be in SVN)sqlsrv_connect &mdash; Opens a connection to a Microsoft SQL Server database\n\n \n \n  Description\n  \n   resource sqlsrv_connect\n    ( string $serverName\n   [, array $connectionInfo\n  ] )\n\n  \n   Opens a connection to a Microsoft SQL Server database. By default, the connection \n   is attempted using Windows Authentication. To connect using SQL Server \n   Authentication, include &quot;UID&quot; and &quot;PWD&quot; in the connection options array.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     serverName\n     \n\n      \n       The name of the server to which a connection is established. To connect \n       to a specific instance, follow the server name with a forward slash \n       and the instance name (e.g. serverName\\sqlexpress).\n      \n     \n\n    \n\n    \n\n     connectionInfo\n     \n\n      \n       An associative array that specifies options for connecting to the server. \n       If values for the UID and PWD keys are not specified, the connection \n       will be attempted using Windows Authentication. For a complete list of supported \n       keys, see &raquo;&nbsp;SQLSRV Connection Options.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   A connection resource. If a connection cannot be successfully opened, FALSE is returned.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Connect using Windows Authentication.\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";&nbsp;\/\/serverName\\instanceName\/\/&nbsp;Since&nbsp;UID&nbsp;and&nbsp;PWD&nbsp;are&nbsp;not&nbsp;specified&nbsp;in&nbsp;the&nbsp;$connectionInfo&nbsp;array,\/\/&nbsp;The&nbsp;connection&nbsp;will&nbsp;be&nbsp;attempted&nbsp;using&nbsp;Windows&nbsp;Authentication.$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;established.&lt;br&nbsp;\/&gt;\";}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;could&nbsp;not&nbsp;be&nbsp;established.&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Connect by specifying a user name and password.\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";&nbsp;\/\/serverName\\instanceName$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;established.&lt;br&nbsp;\/&gt;\";}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;could&nbsp;not&nbsp;be&nbsp;established.&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Connect on a specifed port.\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress,&nbsp;1542\";&nbsp;\/\/serverName\\instanceName,&nbsp;portNumber&nbsp;(default&nbsp;is&nbsp;1433)$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;established.&lt;br&nbsp;\/&gt;\";}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connection&nbsp;could&nbsp;not&nbsp;be&nbsp;established.&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   By default, the sqlsrv_connect() uses connection pooling to \n   improve connection performance. To turn off connection pooling (i.e. force a \n   new connection on each call), set the &quot;ConnectionPooling&quot; option in the \n   $connectionOptions array to 0 (or FALSE). For more information, see \n   &raquo;&nbsp;SQLSRV Connection Pooling.\n  \n  \n  The SQLSRV extension does not have a dedicated function for changing which \n  database is connected to. The target database is specified in the \n  $connectionOptions array that is passed to sqlsrv_connect. To change the \n  database on an open connection, execute the following query &quot;USE dbName&quot; \n  (e.g. sqlsrv_query($conn, &quot;USE dbName&quot;)).\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_close() - Closes an open connection and releases resourses associated with the connection\n    sqlsrv_errors() - Returns error and warning information about the last SQLSRV operation performed\n    sqlsrv_query() - Prepares and executes a query.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-execute.php","title":"sqlsrv_execute","description":"\n \n  sqlsrv_execute\n  (No version information available, might only be in SVN)sqlsrv_execute &mdash; Executes a statement prepared with sqlsrv_prepare()\n\n \n \n  Description\n  \n   bool sqlsrv_execute\n    ( resource $stmt\n   )\n\n  \n   Executes a statement prepared with sqlsrv_prepare(). This \n   function is ideal for executing a prepared statement multiple times with \n   different parameter values.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource returned by sqlsrv_prepare().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_execute() example\n    \n    This example demonstrates how to prepare a statement with \n    sqlsrv_prepare() and re-execute it multiple times (with \n    different parameter values) using sqlsrv_execute().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"UPDATE&nbsp;Table_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;OrderQty&nbsp;=&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;SalesOrderID&nbsp;=&nbsp;?\";\/\/&nbsp;Initialize&nbsp;parameters&nbsp;and&nbsp;prepare&nbsp;the&nbsp;statement.&nbsp;\/\/&nbsp;Variables&nbsp;$qty&nbsp;and&nbsp;$id&nbsp;are&nbsp;bound&nbsp;to&nbsp;the&nbsp;statement,&nbsp;$stmt.$qty&nbsp;=&nbsp;0;&nbsp;$id&nbsp;=&nbsp;0;$stmt&nbsp;=&nbsp;sqlsrv_prepare(&nbsp;$conn,&nbsp;$sql,&nbsp;array(&nbsp;&amp;$qty,&nbsp;&amp;$id));if(&nbsp;!$stmt&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Set&nbsp;up&nbsp;the&nbsp;SalesOrderDetailID&nbsp;and&nbsp;OrderQty&nbsp;information.&nbsp;\/\/&nbsp;This&nbsp;array&nbsp;maps&nbsp;the&nbsp;order&nbsp;ID&nbsp;to&nbsp;order&nbsp;quantity&nbsp;in&nbsp;key=&gt;value&nbsp;pairs.$orders&nbsp;=&nbsp;array(&nbsp;1=&gt;10,&nbsp;2=&gt;20,&nbsp;3=&gt;30);\/\/&nbsp;Execute&nbsp;the&nbsp;statement&nbsp;for&nbsp;each&nbsp;order.foreach(&nbsp;$orders&nbsp;as&nbsp;$id&nbsp;=&gt;&nbsp;$qty)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Because&nbsp;$id&nbsp;and&nbsp;$qty&nbsp;are&nbsp;bound&nbsp;to&nbsp;$stmt1,&nbsp;their&nbsp;updated&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;values&nbsp;are&nbsp;used&nbsp;with&nbsp;each&nbsp;execution&nbsp;of&nbsp;the&nbsp;statement.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;sqlsrv_execute(&nbsp;$stmt&nbsp;)&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   When you prepare a statement that uses variables as parameters, the variables \n   are bound to the statement. This means that if you update the values of the \n   variables, the next time you execute the statement it will run with updated \n   parameter values. For statements that you plan to execute only once, use \n   sqlsrv_query().\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_prepare() - Prepares a query for execution\n    sqlsrv_query() - Prepares and executes a query.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-errors.php","title":"sqlsrv_errors","description":"\n \n  sqlsrv_errors\n  (No version information available, might only be in SVN)sqlsrv_errors &mdash; Returns error and warning information about the last SQLSRV operation performed\n\n \n \n  Description\n  \n   \n   mixed sqlsrv_errors\n    ([ int $errorsOrWarnings\n  ] )\n\n  \n   Returns error and warning information about the last SQLSRV operation performed.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     errorsOrWarnings\n     \n\n      \n       Determines whether error information, warning information, or both are \n       returned. If this parameter is not supplied, both error information and \n       warning information are returned. The following are the supported values \n       for this parameter: SQLSRV_ERR_ALL, SQLSRV_ERR_ERRORS, SQLSRV_ERR_WARNINGS.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   If errors and\/or warnings occured on the last sqlsrv operation, and array of \n   arrays containing error information is returned. If no errors and\/or warnings \n   occured on the last sqlsrv operation, NULL is returned. The following table \n   describes the structure of the returned arrays:\n   \n   Array returned by sqlsrv_errors\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      SQLSTATE\n      For errors that originate from the ODBC driver, the SQLSTATE returned \n      by ODBC. For errors that originate from the Microsoft Drivers for PHP for \n      SQL Server, a SQLSTATE of IMSSP. For warnings that originate from the \n      Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP.\n      \n     \n\n     \n      code\n      For errors that originate from SQL Server, the native SQL Server \n      error code. For errors that originate from the ODBC driver, the error \n      code returned by ODBC. For errors that originate from the Microsoft Drivers \n      for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code.\n      \n     \n\n     \n      message\n      A description of the error.\n     \n\n    \n   \n  \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 functionname() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\/sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/*&nbsp;Set&nbsp;up&nbsp;a&nbsp;query&nbsp;to&nbsp;select&nbsp;an&nbsp;invalid&nbsp;column&nbsp;name.&nbsp;*\/$sql&nbsp;=&nbsp;\"SELECT&nbsp;BadColumnName&nbsp;FROM&nbsp;Table_1\";\/*&nbsp;Execution&nbsp;of&nbsp;the&nbsp;query&nbsp;will&nbsp;fail&nbsp;because&nbsp;of&nbsp;the&nbsp;bad&nbsp;column&nbsp;name.&nbsp;*\/$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql&nbsp;);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;($errors&nbsp;=&nbsp;sqlsrv_errors()&nbsp;)&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach(&nbsp;$errors&nbsp;as&nbsp;$error&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"SQLSTATE:&nbsp;\".$error[&nbsp;'SQLSTATE'].\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"code:&nbsp;\".$error[&nbsp;'code'].\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"message:&nbsp;\".$error[&nbsp;'message'].\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   By default, warnings generated on a call to any SQLSRV function are treated \n   as errors. This means that if a warning occurs on a call to a SQLSRV function, \n   the function returns FALSE. However, warnings that correspond to SQLSTATE \n   values 01000, 01001, 01003, and 01S02 are never treated as errors. For \n   information about changing this behavior, see sqlsrv_configure() \n   and the WarningsReturnAsErrors setting.\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_configure() - Changes the driver error handling and logging configurations\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch-array.php","title":"sqlsrv_fetch_array","description":"\n \n  sqlsrv_fetch_array\n  (No version information available, might only be in SVN)sqlsrv_fetch_array &mdash; Returns a row as an array\n\n \n \n  Description\n  \n   array sqlsrv_fetch_array\n    ( resource $stmt\n   [, int $fetchType\n   [, int $row\n   [, int $offset\n  ]]] )\n\n  \n   Returns the next available row of data as an associative array, a numeric \n   array, or both (the default).\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource returned by sqlsrv_query or sqlsrv_execute.\n      \n     \n\n    \n\n    \n\n     fetchType\n     \n\n      \n       A predefined constant specifying the type of array to return. Possible \n       values are SQLSRV_FETCH_ASSOC, \n       SQLSRV_FETCH_NUMERIC, and \n       SQLSRV_FETCH_BOTH (the default).\n      \n      \n      A fetch type of SQLSRV_FETCH_ASSOC should not be used when consuming a \n      result set with multiple columns of the same name.\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       Specifies the row to access in a result set that uses a scrollable cursor. \n       Possible values are SQLSRV_SCROLL_NEXT, \n       SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, \n       SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE and, \n       SQLSRV_SCROLL_RELATIVE (the default). When this parameter \n       is specified, the fetchType must be explicitly defined.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an array on success, NULL if there are no more rows to return, and \n   FALSE if an error occurs.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Retrieving an associative array.\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\instanceName\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo&nbsp;);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;FirstName,&nbsp;LastName&nbsp;FROM&nbsp;SomeTable\";$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql&nbsp;);if(&nbsp;$stmt&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true)&nbsp;);}while(&nbsp;$row&nbsp;=&nbsp;sqlsrv_fetch_array(&nbsp;$stmt,&nbsp;SQLSRV_FETCH_ASSOC)&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['LastName'].\",&nbsp;\".$row['FirstName'].\"&lt;br&nbsp;\/&gt;\";}sqlsrv_free_stmt(&nbsp;$stmt);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Retrieving a numeric array.\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\instanceName\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo&nbsp;);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;FirstName,&nbsp;LastName&nbsp;FROM&nbsp;SomeTable\";$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql&nbsp;);if(&nbsp;$stmt&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true)&nbsp;);}while(&nbsp;$row&nbsp;=&nbsp;sqlsrv_fetch_array(&nbsp;$stmt,&nbsp;SQLSRV_FETCH_NUMERIC)&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[0].\",&nbsp;\".$row[1].\"&lt;br&nbsp;\/&gt;\";}sqlsrv_free_stmt(&nbsp;$stmt);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   Not specifying the fetchType or explicity using the \n   SQLSRV_FETCH_TYPE constant in the examples above will \n   return an array that has both associative and numeric keys. \n  \n  \n   If more than one column is returned with the same name, the last column will \n   take precedence. To avoid field name collisions, use aliases. \n  \n  \n  If a column with no name is returned, the associative key for the array element \n  will be an empty string (&quot;&quot;).\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_connect() - Opens a connection to a Microsoft SQL Server database\n    sqlsrv_query() - Prepares and executes a query.\n    sqlsrv_errors() - Returns error and warning information about the last SQLSRV operation performed\n    sqlsrv_fetch() - Makes the next row in a result set available for reading\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch-object.php","title":"sqlsrv_fetch_object","description":"\n \n  sqlsrv_fetch_object\n  (No version information available, might only be in SVN)sqlsrv_fetch_object &mdash; Retrieves the next row of data in a result set as an object\n\n \n \n  Description\n  \n   mixed sqlsrv_fetch_object\n    ( resource $stmt\n   [, string $className\n   [, array $ctorParams\n   [, int $row\n   [, int $offset\n  ]]]] )\n\n  \n   Retrieves the next row of data in a result set as an instance of the specified \n   class with properties that match the row field names and values that correspond \n   to the row field values.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource created by sqlsrv_query() or \n       sqlsrv_execute().\n      \n     \n\n    \n\n    \n\n     className\n     \n\n      \n       The name of the class to instantiate. If no class name is specified, \n       stdClass is instantiated.\n      \n     \n\n    \n\n    \n\n     ctorParams\n     \n\n      \n       Values passed to the constructor of the specified class. If the constructor \n       of the specified class takes parameters, the ctorParams array must be \n       supplied.\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       The row to be accessed. This parameter can only be used if the specified \n       statement was prepared with a scrollable cursor. In that case, this parameter \n       can take on one of the following values:\n       \n        SQLSRV_SCROLL_NEXT\n        SQLSRV_SCROLL_PRIOR\n        SQLSRV_SCROLL_FIRST\n        SQLSRV_SCROLL_LAST\n        SQLSRV_SCROLL_ABSOLUTE\n        SQLSRV_SCROLL_RELATIVE\n       \n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       Specifies the row to be accessed if the row parameter is set to \n       SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. Note that the first row \n       in a result set has index 0.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n   \n   Returns an object on success, NULL if there are no more rows to return, \n   and FALSE if an error occurs or if the specified class does not exist.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_fetch_object() example\n    \n    The following example demonstrates how to retrieve a row as a stdClass object.\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;fName,&nbsp;lName&nbsp;FROM&nbsp;Table_1\";$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Retrieve&nbsp;each&nbsp;row&nbsp;as&nbsp;an&nbsp;object.\/\/&nbsp;Because&nbsp;no&nbsp;class&nbsp;is&nbsp;specified,&nbsp;each&nbsp;row&nbsp;will&nbsp;be&nbsp;retrieved&nbsp;as&nbsp;a&nbsp;stdClass&nbsp;object.\/\/&nbsp;Property&nbsp;names&nbsp;correspond&nbsp;to&nbsp;field&nbsp;names.while(&nbsp;$obj&nbsp;=&nbsp;sqlsrv_fetch_object(&nbsp;$stmt))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$obj-&gt;fName.\",&nbsp;\".$obj-&gt;lName.\"&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   If a class name is specified with the optional $className parameter and the \n   class has properties whose names match the result set field names, the corresponding \n   result set values are applied to the properties. If a result set field name \n   does not match a class property, a property with the result set field name is added \n   to the object and the result set value is applied to the property. The following \n   rules apply when using the $className parameter:\n   \n      Field-property name matching is case-sensitive.\n      Field-property matching occurs regardless of access modifiers.\n      Class property data types are ignored when applying a field value to a property.\n      If the class does not exist, the function returns FALSE and adds an error to the error collection.\n   \n   Regardless of whether the $className parameter is supplied, if a field with no \n   name is returned, the field value will be ignored and a warning will be added \n   to the error collection.\n  \n  \n   When consuming a result set that has multiple columns with the same name, it may \n   be better to use sqlsrv_fetch_array() or the combination of \n   sqlsrv_fetch() and sqlsrv_get_field().\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_fetch() - Makes the next row in a result set available for reading\n    sqlsrv_fetch_array() - Returns a row as an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-free-stmt.php","title":"sqlsrv_free_stmt","description":"\n \n  sqlsrv_free_stmt\n  (No version information available, might only be in SVN)sqlsrv_free_stmt &mdash; Frees all resources for the specified statement\n\n \n \n  Description\n  \n   bool sqlsrv_free_stmt\n    ( resource $stmt\n   )\n\n  \n   Frees all resources for the specified statement. The statement cannot be used \n   after sqlsrv_free_stmt() has been called on it. If \n   sqlsrv_free_stmt() is called on an in-progress statement \n   that alters server state, statement execution is terminated and the statement \n   is rolled back.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statment for which resources are freed. \n       Note that NULL is a valid parameter value. This allows the function to be \n       called multiple times in a script. \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_free_stmt() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;Table_1\");if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/*-------------------------------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Process&nbsp;query&nbsp;results&nbsp;here.-------------------------------*\/\/*&nbsp;Free&nbsp;the&nbsp;statement&nbsp;resources.&nbsp;*\/sqlsrv_free_stmt(&nbsp;$stmt);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  \n  Notes\n  \n   The main difference between sqlsrv_free_stmt() and \n   sqlsrv_cancel() is that a statement resource cancelled with \n   sqlsrv_cancel() can be re-executed if it was created with \n   sqlsrv_prepare(). A statement resource cancelled with \n   sqlsrv_free_statement() cannot be re-executed.\n  \n \n\n \n  See Also\n  \n   \n    sqlsrv_cancel() - Cancels a statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-get-config.php","title":"sqlsrv_get_config","description":"\n \n  sqlsrv_get_config\n  (No version information available, might only be in SVN)sqlsrv_get_config &mdash; Returns the value of the specified configuration setting\n\n \n \n  Description\n  \n   mixed sqlsrv_get_config\n    ( string $setting\n   )\n\n  \n   Returns the value of the specified configuration setting.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     setting\n     \n\n      \n       The name of the setting for which the value is returned. For a list of \n       configurable settings, see sqlsrv_configure().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the value of the specified setting. If an invalid setting is specified, \n   FALSE is returned.\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_configure() - Changes the driver error handling and logging configurations\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-field-metadata.php","title":"sqlsrv_field_metadata","description":"\n \n  sqlsrv_field_metadata\n  (No version information available, might only be in SVN)sqlsrv_field_metadata &mdash; Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare() or sqlsrv_query()\n  \n\n \n \n  Description\n  \n   mixed sqlsrv_field_metadata\n    ( resource $stmt\n   )\n\n  \n   Retrieves metadata for the fields of a statement prepared by \n   sqlsrv_prepare() or sqlsrv_query(). \n   sqlsrv_field_metadata() can be called on a statement before \n   or after statement execution.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statment resource for which metadata is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an array of arrays is returned on success. Otherwise, FALSE is returned. \n   Each returned array is described by the following table:\n   \n   Array returned by sqlsrv_field_metadata\n   \n    \n     \n      Key\n      Description\n     \n\n    \n\n    \n     \n      Name\n      The name of the field.\n     \n\n     \n      Type\n      The numeric value for the SQL type.\n     \n\n     \n      Size\n      The number of characters for fields of character type, the number of \n      bytes for fields of binary type, or NULL for other types.\n     \n\n     \n      Precision\n      The precision for types of variable precision, NULL for other types.\n     \n\n     \n      Scale\n      The scale for types of variable scale, NULL for other types.\n     \n\n     \n      Nullable\n      An enumeration indicating whether the column is nullable, not nullable, \n      or if it is not known.\n     \n\n    \n   \n  \n\n  For more information, see &raquo;&nbsp;sqlsrv_field_metadata \n  in the Microsoft SQLSRV documentation.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_field_metadata() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"AdventureWorks\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;Table_1\";$stmt&nbsp;=&nbsp;sqlsrv_prepare(&nbsp;$conn,&nbsp;$sql&nbsp;);foreach(&nbsp;sqlsrv_field_metadata(&nbsp;$stmt&nbsp;)&nbsp;as&nbsp;$fieldMetadata&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach(&nbsp;$fieldMetadata&nbsp;as&nbsp;$name&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$name:&nbsp;$value&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_client_info() - Returns information about the client and specified connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-fetch.php","title":"sqlsrv_fetch","description":"\n \n  sqlsrv_fetch\n  (No version information available, might only be in SVN)sqlsrv_fetch &mdash; Makes the next row in a result set available for reading\n\n \n \n  Description\n  \n   \n   mixed sqlsrv_fetch\n    ( resource $stmt\n   [, int $row\n   [, int $offset\n  ]] )\n\n  \n   Makes the next row in a result set available for reading. Use \n   sqlsrv_get_field() to read the fields of the row.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource created by executing sqlsrv_query() \n       or sqlsrv_execute().\n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n       The row to be accessed. This parameter can only be used if the specified \n       statement was prepared with a scrollable cursor. In that case, this parameter \n       can take on one of the following values:\n       \n        SQLSRV_SCROLL_NEXT\n        SQLSRV_SCROLL_PRIOR\n        SQLSRV_SCROLL_FIRST\n        SQLSRV_SCROLL_LAST\n        SQLSRV_SCROLL_ABSOLUTE\n        SQLSRV_SCROLL_RELATIVE\n       \n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       Specifies the row to be accessed if the row parameter is set to \n       SQLSRV_SCROLL_ABSOLUTE or SQLSRV_SCROLL_RELATIVE. Note that the first \n       row in a result set has index 0.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the next row of a result set was successfully retrieved, \n   FALSE if an error occurs, and NULL if there are no more rows in the result set.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_fetch() example\n    \n    The following example demonstrates how to retrieve a row with \n    sqlsrv_fetch() and get the row fields with \n    sqlsrv_get_field().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;Name,&nbsp;Comment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;Table_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ReviewID=1\";$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Make&nbsp;the&nbsp;first&nbsp;(and&nbsp;in&nbsp;this&nbsp;case,&nbsp;only)&nbsp;row&nbsp;of&nbsp;the&nbsp;result&nbsp;set&nbsp;available&nbsp;for&nbsp;reading.if(&nbsp;sqlsrv_fetch(&nbsp;$stmt&nbsp;)&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Get&nbsp;the&nbsp;row&nbsp;fields.&nbsp;Field&nbsp;indeces&nbsp;start&nbsp;at&nbsp;0&nbsp;and&nbsp;must&nbsp;be&nbsp;retrieved&nbsp;in&nbsp;order.\/\/&nbsp;Retrieving&nbsp;row&nbsp;fields&nbsp;by&nbsp;name&nbsp;is&nbsp;not&nbsp;supported&nbsp;by&nbsp;sqlsrv_get_field.$name&nbsp;=&nbsp;sqlsrv_get_field(&nbsp;$stmt,&nbsp;0);echo&nbsp;\"$name:&nbsp;\";$comment&nbsp;=&nbsp;sqlsrv_get_field(&nbsp;$stmt,&nbsp;1);echo&nbsp;$comment;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n \n  See Also\n  \n   \n    sqlsrv_get_field() - Gets field data from the currently selected row\n    sqlsrv_fetch_array() - Returns a row as an array\n    sqlsrv_fetch_object() - Retrieves the next row of data in a result set as an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-has-rows.php","title":"sqlsrv_has_rows","description":"\n \n  sqlsrv_has_rows\n  (No version information available, might only be in SVN)sqlsrv_has_rows &mdash; Indicates whether the specified statement has rows\n\n \n \n  Description\n  \n   bool sqlsrv_has_rows\n    ( resource $stmt\n   )\n\n  \n   Indicates whether the specified statement has rows.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the specified statement has rows and FALSE if the statement \n   does not have rows or if an error occured.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_has_rows() example\n    \n\n&lt;?php$server&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\"&nbsp;)$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$server,&nbsp;$connectionInfo&nbsp;);$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;Table_1\");if&nbsp;($stmt)&nbsp;{&nbsp;&nbsp;&nbsp;$rows&nbsp;=&nbsp;sqlsrv_has_rows(&nbsp;$stmt&nbsp;);&nbsp;&nbsp;&nbsp;if&nbsp;($rows&nbsp;===&nbsp;true)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;are&nbsp;rows.&nbsp;&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;are&nbsp;no&nbsp;rows.&nbsp;&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_num_rows() - Retrieves the number of rows in a result set\n    sqlsrv_query() - Prepares and executes a query.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-next-result.php","title":"sqlsrv_next_result","description":"\n \n  sqlsrv_next_result\n  (No version information available, might only be in SVN)sqlsrv_next_result &mdash; Makes the next result of the specified statement active\n\n \n \n  Description\n  \n   mixed sqlsrv_next_result\n   \n    ( resource $stmt\n   )\n\n  \n   Makes the next result of the specified statement active. Results include result \n   sets, row counts, and output parameters.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statment on which the next result is being called.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the next result was successfully retrieved, FALSE if an error \n   occurred, and NULL if there are no more results to retrieve.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_next_result() example\n    \n    The following example executes a batch query that inserts into a table and \n    then selects from the table. This produces two results on the statement: \n    one for the rows affected by the INSERT and one for the rows returned by \n    the SELECT. To get to the rows returned by the SELECT, \n    sqlsrv_next_result() must be called to move past the first result.\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);$query&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;Table_1&nbsp;(id,&nbsp;data)&nbsp;VALUES&nbsp;(?,?);&nbsp;SELECT&nbsp;*&nbsp;FROM&nbsp;TABLE_1;\";$params&nbsp;=&nbsp;array(1,&nbsp;\"some&nbsp;data\");$stmt&nbsp;=&nbsp;sqlsrv_query($conn,&nbsp;$query,&nbsp;$params);\/\/&nbsp;Consume&nbsp;the&nbsp;first&nbsp;result&nbsp;(rows&nbsp;affected&nbsp;by&nbsp;INSERT)&nbsp;without&nbsp;calling&nbsp;sqlsrv_next_result.echo&nbsp;\"Rows&nbsp;affected:&nbsp;\".sqlsrv_rows_affected($stmt).\"&lt;br&nbsp;\/&gt;\";\/\/&nbsp;Move&nbsp;to&nbsp;the&nbsp;next&nbsp;result&nbsp;and&nbsp;display&nbsp;results.$next_result&nbsp;=&nbsp;sqlsrv_next_result($stmt);if(&nbsp;$next_result&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;while(&nbsp;$row&nbsp;=&nbsp;sqlsrv_fetch_array(&nbsp;$stmt,&nbsp;SQLSRV_FETCH_ASSOC)){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row['id'].\":&nbsp;\".$row['data'].\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;elseif(&nbsp;is_null($next_result))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"No&nbsp;more&nbsp;results.&lt;br&nbsp;\/&gt;\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(print_r(sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_query() - Prepares and executes a query.\n    sqlsrv_fetch_array() - Returns a row as an array\n    sqlsrv_rows_affected() - Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-get-field.php","title":"sqlsrv_get_field","description":"\n \n  sqlsrv_get_field\n  (No version information available, might only be in SVN)sqlsrv_get_field &mdash; Gets field data from the currently selected row\n\n \n \n  Description\n  \n   mixed sqlsrv_get_field\n    ( resource $stmt\n   , int $fieldIndex\n   [, int $getAsType\n  ] )\n\n  \n   Gets field data from the currently selected row. Fields must be accessed in \n   order. Field indices start at 0.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute().\n      \n     \n\n    \n\n    \n\n     fieldIndex\n     \n\n      \n       The index of the field to be retrieved. Field indices start at 0. Fields \n       must be accessed in order. i.e. If you access field index 1, then field \n       index 0 will not be available.\n      \n     \n\n    \n\n    \n\n     getAsType\n     \n\n      \n       The PHP data type for the returned field data. If this parameter is not \n       set, the field data will be returned as its default PHP data type.\n       For information about default PHP data types, see \n       &raquo;&nbsp;Default PHP Data Types \n       in the Microsoft SQLSRV documentation.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns data from the specified field on success. Returns FALSE otherwise.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_get_field() example\n    \n    The following example demonstrates how to retrieve a row with \n    sqlsrv_fetch() and get the row fields with \n    sqlsrv_get_field().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;Name,&nbsp;Comment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;Table_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ReviewID=1\";$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Make&nbsp;the&nbsp;first&nbsp;(and&nbsp;in&nbsp;this&nbsp;case,&nbsp;only)&nbsp;row&nbsp;of&nbsp;the&nbsp;result&nbsp;set&nbsp;available&nbsp;for&nbsp;reading.if(&nbsp;sqlsrv_fetch(&nbsp;$stmt&nbsp;)&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Get&nbsp;the&nbsp;row&nbsp;fields.&nbsp;Field&nbsp;indeces&nbsp;start&nbsp;at&nbsp;0&nbsp;and&nbsp;must&nbsp;be&nbsp;retrieved&nbsp;in&nbsp;order.\/\/&nbsp;Retrieving&nbsp;row&nbsp;fields&nbsp;by&nbsp;name&nbsp;is&nbsp;not&nbsp;supported&nbsp;by&nbsp;sqlsrv_get_field.$name&nbsp;=&nbsp;sqlsrv_get_field(&nbsp;$stmt,&nbsp;0);echo&nbsp;\"$name:&nbsp;\";$comment&nbsp;=&nbsp;sqlsrv_get_field(&nbsp;$stmt,&nbsp;1);echo&nbsp;$comment;?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_fetch() - Makes the next row in a result set available for reading\n    sqlsrv_fetch_array() - Returns a row as an array\n    sqlsrv_fetch_object() - Retrieves the next row of data in a result set as an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-num-rows.php","title":"sqlsrv_num_rows","description":"\n \n  sqlsrv_num_rows\n  (No version information available, might only be in SVN)sqlsrv_num_rows &mdash; Retrieves the number of rows in a result set\n\n \n \n  Description\n  \n   mixed sqlsrv_num_rows\n    ( resource $stmt\n   )\n\n  \n   Retrieves the number of rows in a result set. This function requires that the \n   statment resource be created with a static or keyset cursor. For more information, \n   see sqlsrv_query(), sqlsrv_prepare(), \n   or &raquo;&nbsp;Specifying a Cursor Type and Selecting Rows \n   in the Microsoft SQLSRV documentation.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statement for which the row count is returned. The statment resource \n       must be created with a static or keyset cursor. For more information, see \n       sqlsrv_query(), sqlsrv_prepare(), or \n       &raquo;&nbsp;Specifying a Cursor Type and Selecting Rows \n       in the Microsoft SQLSRV documentation.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the number of rows retrieved on success and FALSE if an error occured. \n   If a forward cursor (the default) or dynamic cursor is used, FALSE is returned.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_num_rows() example\n    \n\n&lt;?php$server&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\"&nbsp;);$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$server,&nbsp;$connectionInfo&nbsp;);$sql&nbsp;=&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;Table_1\";$params&nbsp;=&nbsp;array();$options&nbsp;=&nbsp;&nbsp;array(&nbsp;\"Scrollable\"&nbsp;=&gt;&nbsp;SQLSRV_CURSOR_KEYSET&nbsp;);$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql&nbsp;,&nbsp;$params,&nbsp;$options&nbsp;);$row_count&nbsp;=&nbsp;sqlsrv_num_rows(&nbsp;$stmt&nbsp;);&nbsp;&nbsp;&nbsp;if&nbsp;($row_count&nbsp;===&nbsp;false)&nbsp;&nbsp;&nbsp;echo&nbsp;\"Error&nbsp;in&nbsp;retrieveing&nbsp;row&nbsp;count.\";else&nbsp;&nbsp;&nbsp;echo&nbsp;$row_count;?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_has_rows() - Indicates whether the specified statement has rows\n    sqlsrv_rows_affected() - Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-num-fields.php","title":"sqlsrv_num_fields","description":"\n \n  sqlsrv_num_fields\n  (No version information available, might only be in SVN)sqlsrv_num_fields &mdash; Retrieves the number of fields (columns) on a statement\n\n \n \n  Description\n  \n   mixed sqlsrv_num_fields\n    ( resource $stmt\n   )\n\n  \n   Retrieves the number of fields (columns) on a statement.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The statment for which the number of fields is returned. \n       sqlsrv_num_fields() can be called on a statement before \n       or after statement execution.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the number of fields on success. Returns FALSE otherwise.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_num_fields() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"SELECT&nbsp;*&nbsp;FROM&nbsp;Table_1\";$stmt&nbsp;=&nbsp;sqlsrv_query($conn,&nbsp;$sql);if(&nbsp;$stmt&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$numFields&nbsp;=&nbsp;sqlsrv_num_fields(&nbsp;$stmt&nbsp;);while(&nbsp;sqlsrv_fetch(&nbsp;$stmt&nbsp;))&nbsp;{&nbsp;&nbsp;&nbsp;\/\/&nbsp;Iterate&nbsp;through&nbsp;the&nbsp;fields&nbsp;of&nbsp;each&nbsp;row.&nbsp;&nbsp;&nbsp;for($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;$numFields;&nbsp;$i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;sqlsrv_get_field($stmt,&nbsp;$i).\"&nbsp;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_field_metadata() - Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare or sqlsrv_query\n    sqlsrv_fetch() - Makes the next row in a result set available for reading\n    sqlsrv_get_field() - Gets field data from the currently selected row\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-prepare.php","title":"sqlsrv_prepare","description":"\n \n  sqlsrv_prepare\n  (No version information available, might only be in SVN)sqlsrv_prepare &mdash; Prepares a query for execution\n\n \n \n  Description\n  \n   mixed sqlsrv_prepare\n    ( resource $conn\n   , string $sql\n   [, array $params\n   [, array $options\n  ]] )\n\n  \n   Prepares a query for execution. This function is ideal for preparing a query \n   that will be executed multiple times with different parameter values.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       A connection resource returned by sqlsrv_connect().\n      \n     \n\n    \n\n    \n\n     sql\n     \n\n      \n       The string that defines the query to be prepared and executed.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array specifying parameter information when executing a parameterized \n       query. Array elements can be any of the following:\n       \n        A literal value\n        A PHP variable\n        An array with this structure: \n        array($value [, $direction [, $phpType [, $sqlType]]])\n       \n       The following table describes the elements in the array structure above:\n       \n       \n       Array structure\n       \n        \n         \n          Element\n          Description\n         \n\n        \n\n        \n         \n          $value\n          A literal value, a PHP variable, or a PHP by-reference variable.\n         \n\n         \n          $direction (optional)\n          One of the following SQLSRV constants used to indicate the \n          parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT. \n          The default value is SQLSRV_PARAM_IN.         \n         \n\n         \n          $phpType (optional)\n          A SQLSRV_PHPTYPE_* constant that specifies PHP data type of the \n          returned value.\n         \n\n         \n          $sqlType (optional)\n          A SQLSRV_SQLTYPE_* constant that specifies the SQL Server data \n          type of the input value.\n         \n\n        \n       \n      \n\n     \n\n    \n\n    \n\n     options\n     \n\n      \n       An array specifing query property options. The supported keys are described \n       in the following table:\n      \n      \n       Query Options\n       \n        \n         \n          Key\n          Values\n          Description\n         \n\n        \n\n        \n         \n          QueryTimeout\n          A positive integer value.\n          Sets the query timeout in seconds. By default, the driver will \n          wait indefinitely for results.\n         \n\n         \n          SendStreamParamsAtExec\n          TRUE or FALSE (the default is TRUE)\n          Configures the driver to send all stream data at execution (TRUE), \n          or to send stream data in chunks (FALSE). By default, the value is set to TRUE. \n          For more information, see sqlsrv_send_stream_data().\n         \n\n         \n          Scrollable\n          SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC, \n          or SQLSRV_CURSOR_KEYSET\n          See &raquo;&nbsp;Specifying a Cursor Type and Selecting Rows \n          in the Microsoft SQLSRV documentation.\n         \n\n        \n       \n      \n\n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a statement resource on success and FALSE if an error occurred.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_prepare() example\n    \n    This example demonstrates how to prepare a statement with sqlsrv_prepare() \n    and re-execute it multiple times (with different parameter values) using sqlsrv_execute().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"UPDATE&nbsp;Table_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;OrderQty&nbsp;=&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;SalesOrderID&nbsp;=&nbsp;?\";\/\/&nbsp;Initialize&nbsp;parameters&nbsp;and&nbsp;prepare&nbsp;the&nbsp;statement.&nbsp;\/\/&nbsp;Variables&nbsp;$qty&nbsp;and&nbsp;$id&nbsp;are&nbsp;bound&nbsp;to&nbsp;the&nbsp;statement,&nbsp;$stmt.$qty&nbsp;=&nbsp;0;&nbsp;$id&nbsp;=&nbsp;0;$stmt&nbsp;=&nbsp;sqlsrv_prepare(&nbsp;$conn,&nbsp;$sql,&nbsp;array(&nbsp;&amp;$qty,&nbsp;&amp;$id));if(&nbsp;!$stmt&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}\/\/&nbsp;Set&nbsp;up&nbsp;the&nbsp;SalesOrderDetailID&nbsp;and&nbsp;OrderQty&nbsp;information.&nbsp;\/\/&nbsp;This&nbsp;array&nbsp;maps&nbsp;the&nbsp;order&nbsp;ID&nbsp;to&nbsp;order&nbsp;quantity&nbsp;in&nbsp;key=&gt;value&nbsp;pairs.$orders&nbsp;=&nbsp;array(&nbsp;1=&gt;10,&nbsp;2=&gt;20,&nbsp;3=&gt;30);\/\/&nbsp;Execute&nbsp;the&nbsp;statement&nbsp;for&nbsp;each&nbsp;order.foreach(&nbsp;$orders&nbsp;as&nbsp;$id&nbsp;=&gt;&nbsp;$qty)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Because&nbsp;$id&nbsp;and&nbsp;$qty&nbsp;are&nbsp;bound&nbsp;to&nbsp;$stmt1,&nbsp;their&nbsp;updated&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;values&nbsp;are&nbsp;used&nbsp;with&nbsp;each&nbsp;execution&nbsp;of&nbsp;the&nbsp;statement.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;sqlsrv_execute(&nbsp;$stmt&nbsp;)&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   When you prepare a statement that uses variables as parameters, the variables \n   are bound to the statement. This means that if you update the values of the \n   variables, the next time you execute the statement it will run with updated \n   parameter values. For statements that you plan to execute only once, use \n   sqlsrv_query().\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_execute() - Executes a statement prepared with sqlsrv_prepare\n    sqlsrv_query() - Prepares and executes a query.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-query.php","title":"sqlsrv_query","description":"\n \n  sqlsrv_query\n  (No version information available, might only be in SVN)sqlsrv_query &mdash; Prepares and executes a query.\n\n \n \n  Description\n  \n   mixed sqlsrv_query\n    ( resource $conn\n   , string $sql\n   [, array $params\n   [, array $options\n  ]] )\n\n  \n   Prepares and executes a query.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       A connection resource returned by sqlsrv_connect().\n      \n     \n\n    \n\n    \n\n     sql\n     \n\n      \n       The string that defines the query to be prepared and executed.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array specifying parameter information when executing a parameterized query. \n       Array elements can be any of the following:\n       \n        A literal value\n        A PHP variable\n        An array with this structure: \n        array($value [, $direction [, $phpType [, $sqlType]]])\n       \n       The following table describes the elements in the array structure above:\n       \n       \n       Array structure\n       \n        \n         \n          Element\n          Description\n         \n\n        \n\n        \n         \n          $value\n          A literal value, a PHP variable, or a PHP by-reference variable.\n         \n\n         \n          $direction (optional)\n          One of the following SQLSRV constants used to indicate the \n          parameter direction: SQLSRV_PARAM_IN, SQLSRV_PARAM_OUT, SQLSRV_PARAM_INOUT. \n          The default value is SQLSRV_PARAM_IN.\n         \n\n         \n          $phpType (optional)\n          A SQLSRV_PHPTYPE_* constant that specifies PHP data type of the \n          returned value.\n         \n\n         \n          $sqlType (optional)\n          A SQLSRV_SQLTYPE_* constant that specifies the SQL Server data \n          type of the input value.\n         \n\n        \n       \n      \n\n     \n\n    \n\n    \n\n     options\n     \n\n      \n       An array specifing query property options. The supported keys are described \n       in the following table:\n      \n      \n       Query Options\n       \n        \n         \n          Key\n          Values\n          Description\n         \n\n        \n\n        \n         \n          QueryTimeout\n          A positive integer value.\n          Sets the query timeout in seconds. By default, the driver will \n          wait indefinitely for results.\n         \n\n         \n          SendStreamParamsAtExec\n          TRUE or FALSE (the default is TRUE)\n          Configures the driver to send all stream data at execution (TRUE), \n          or to send stream data in chunks (FALSE). By default, the value is set \n          to TRUE. For more information, see sqlsrv_send_stream_data().\n         \n\n         \n          Scrollable\n          SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_STATIC, SQLSRV_CURSOR_DYNAMIC, \n          or SQLSRV_CURSOR_KEYSET\n          See &raquo;&nbsp;Specifying \n          a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation.\n         \n\n        \n       \n      \n\n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a statement resource on success and FALSE if an error occurred.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_query() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\"&nbsp;);$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;Table_1&nbsp;(id,&nbsp;data)&nbsp;VALUES&nbsp;(?,&nbsp;?)\";$params&nbsp;=&nbsp;array(1,&nbsp;\"some&nbsp;data\");$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql,&nbsp;$params);if(&nbsp;$stmt&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   For statements that you plan to execute only once, use sqlsrv_query(). \n   If you intend to re-execute a statement with different parameter values, use \n   the combination of sqlsrv_prepare() and sqlsrv_execute().\n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_prepare() - Prepares a query for execution\n    sqlsrv_execute() - Executes a statement prepared with sqlsrv_prepare\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-rollback.php","title":"sqlsrv_rollback","description":"\n \n  sqlsrv_rollback\n  (No version information available, might only be in SVN)sqlsrv_rollback &mdash; Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction()\n\n \n \n  Description\n  \n   bool sqlsrv_rollback\n    ( resource $conn\n   )\n\n  \n   Rolls back a transaction that was begun with sqlsrv_begin_transaction() \n   and returns the connection to auto-commit mode.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection resource returned by a call to sqlsrv_connect().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_rollback() example\n    \n    The following example demonstrates how to use sqlsrv_begin_transaction() \n    together with sqlsrv_commit() and sqlsrv_rollback().\n    \n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"userName\",&nbsp;\"PWD\"=&gt;\"password\");$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Begin&nbsp;the&nbsp;transaction.&nbsp;*\/if&nbsp;(&nbsp;sqlsrv_begin_transaction(&nbsp;$conn&nbsp;)&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true&nbsp;));}\/*&nbsp;Initialize&nbsp;parameter&nbsp;values.&nbsp;*\/$orderId&nbsp;=&nbsp;1;&nbsp;$qty&nbsp;=&nbsp;10;&nbsp;$productId&nbsp;=&nbsp;100;\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;first&nbsp;query.&nbsp;*\/$sql1&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;OrdersTable&nbsp;(ID,&nbsp;Quantity,&nbsp;ProductID)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUES&nbsp;(?,&nbsp;?,&nbsp;?)\";$params1&nbsp;=&nbsp;array(&nbsp;$orderId,&nbsp;$qty,&nbsp;$productId&nbsp;);$stmt1&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql1,&nbsp;$params1&nbsp;);\/*&nbsp;Set&nbsp;up&nbsp;and&nbsp;execute&nbsp;the&nbsp;second&nbsp;query.&nbsp;*\/$sql2&nbsp;=&nbsp;\"UPDATE&nbsp;InventoryTable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET&nbsp;Quantity&nbsp;=&nbsp;(Quantity&nbsp;-&nbsp;?)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;ProductID&nbsp;=&nbsp;?\";$params2&nbsp;=&nbsp;array($qty,&nbsp;$productId);$stmt2&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql2,&nbsp;$params2&nbsp;);\/*&nbsp;If&nbsp;both&nbsp;queries&nbsp;were&nbsp;successful,&nbsp;commit&nbsp;the&nbsp;transaction.&nbsp;*\/\/*&nbsp;Otherwise,&nbsp;rollback&nbsp;the&nbsp;transaction.&nbsp;*\/if(&nbsp;$stmt1&nbsp;&amp;&amp;&nbsp;$stmt2&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_commit(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;committed.&lt;br&nbsp;\/&gt;\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqlsrv_rollback(&nbsp;$conn&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Transaction&nbsp;rolled&nbsp;back.&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_begin_transaction() - Begins a database transaction\n    sqlsrv_commit() - Commits a transaction that was begun with sqlsrv_begin_transaction\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-rows-affected.php","title":"sqlsrv_rows_affected","description":"\n \n  sqlsrv_rows_affected\n  (No version information available, might only be in SVN)sqlsrv_rows_affected &mdash; Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed\n\n \n \n  Description\n  \n   int sqlsrv_rows_affected\n    ( resource $stmt\n   )\n\n  \n   Returns the number of rows modified by the last INSERT, UPDATE, or DELETE \n   query executed. For information about the number of rows returned by a SELECT \n   query, see sqlsrv_num_rows().\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       The executed statement resource for which the number of affected rows is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the number of rows affected by the last INSERT, UPDATE, or DELETE query. \n   If no rows were affected, 0 is returned. If the number of affected rows cannot \n   be determined, -1 is returned. If an error occured, FALSE is returned.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_rows_affected() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\"&nbsp;);$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"UPDATE&nbsp;Table_1&nbsp;SET&nbsp;data&nbsp;=&nbsp;?&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;?\";$params&nbsp;=&nbsp;array(\"updated&nbsp;data\",&nbsp;1);$stmt&nbsp;=&nbsp;sqlsrv_query(&nbsp;$conn,&nbsp;$sql,&nbsp;$params);$rows_affected&nbsp;=&nbsp;sqlsrv_rows_affected(&nbsp;$stmt);if(&nbsp;$rows_affected&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}&nbsp;elseif(&nbsp;$rows_affected&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"No&nbsp;information&nbsp;available.&lt;br&nbsp;\/&gt;\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$rows_affected.\"&nbsp;rows&nbsp;were&nbsp;updated.&lt;br&nbsp;\/&gt;\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_num_rows() - Retrieves the number of rows in a result set\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-send-stream-data.php","title":"sqlsrv_send_stream_data","description":"\n \n  sqlsrv_send_stream_data\n  (No version information available, might only be in SVN)sqlsrv_send_stream_data &mdash; Sends data from parameter streams to the server\n\n \n \n  Description\n  \n   bool sqlsrv_send_stream_data\n    ( resource $stmt\n   )\n\n  \n   Send data from parameter streams to the server. Up to 8 KB of data is sent \n   with each call.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stmt\n     \n\n      \n       A statement resource returned by sqlsrv_query() or \n       sqlsrv_execute().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if there is more data to send and FALSE if there is not.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 sqlsrv_send_stream_data() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$connectionInfo&nbsp;=&nbsp;array(&nbsp;\"Database\"=&gt;\"dbName\",&nbsp;\"UID\"=&gt;\"username\",&nbsp;\"PWD\"=&gt;\"password\"&nbsp;);$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName,&nbsp;$connectionInfo);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$sql&nbsp;=&nbsp;\"UPDATE&nbsp;Table_1&nbsp;SET&nbsp;data&nbsp;=&nbsp;(&nbsp;?)&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;100\";\/\/&nbsp;Open&nbsp;parameter&nbsp;data&nbsp;as&nbsp;a&nbsp;stream&nbsp;and&nbsp;put&nbsp;it&nbsp;in&nbsp;the&nbsp;$params&nbsp;array.$data&nbsp;=&nbsp;fopen(&nbsp;\"data:\/\/text\/plain,[&nbsp;Lengthy&nbsp;content&nbsp;here.&nbsp;]\",&nbsp;\"r\");$params&nbsp;=&nbsp;array(&nbsp;&amp;$data);\/\/&nbsp;Prepare&nbsp;the&nbsp;statement.&nbsp;Use&nbsp;the&nbsp;$options&nbsp;array&nbsp;to&nbsp;turn&nbsp;off&nbsp;the\/\/&nbsp;default&nbsp;behavior,&nbsp;which&nbsp;is&nbsp;to&nbsp;send&nbsp;all&nbsp;stream&nbsp;data&nbsp;at&nbsp;the&nbsp;time&nbsp;of&nbsp;query\/\/&nbsp;execution.$options&nbsp;=&nbsp;array(\"SendStreamParamsAtExec\"=&gt;0);$stmt&nbsp;=&nbsp;sqlsrv_prepare(&nbsp;$conn,&nbsp;$sql,&nbsp;$params,&nbsp;$options);sqlsrv_execute(&nbsp;$stmt);\/\/&nbsp;Send&nbsp;up&nbsp;to&nbsp;8K&nbsp;of&nbsp;parameter&nbsp;data&nbsp;to&nbsp;the&nbsp;server&nbsp;\/\/&nbsp;with&nbsp;each&nbsp;call&nbsp;to&nbsp;sqlsrv_send_stream_data.$i&nbsp;=&nbsp;1;while(&nbsp;sqlsrv_send_stream_data(&nbsp;$stmt))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$i++;}echo&nbsp;\"$i&nbsp;calls&nbsp;were&nbsp;made.\";?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_prepare() - Prepares a query for execution\n    sqlsrv_query() - Prepares and executes a query.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sqlsrv-server-info.php","title":"sqlsrv_server_info","description":"\n \n  sqlsrv_server_info\n  (No version information available, might only be in SVN)sqlsrv_server_info &mdash; Returns information about the server\n\n \n \n  Description\n  \n   array sqlsrv_server_info\n    ( resource $conn\n   )\n\n  \n   Returns information about the server.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     conn\n     \n\n      \n       The connection resource that connects the client and the server.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array as described in the following table:\n  \n  Returned Array\n   \n    \n     \n      CurrentDatabase\n      The connected-to database.\n     \n\n    \n\n    \n     \n      SQLServerVersion\n      The SQL Server version.\n     \n\n     \n      SQLServerName\n      The name of the server.\n     \n\n    \n   \n  \n \n\n \n\n\n \n  Examples\n  \n   \n    Example #1 sqlsrv_server_info() example\n    \n\n&lt;?php$serverName&nbsp;=&nbsp;\"serverName\\sqlexpress\";$conn&nbsp;=&nbsp;sqlsrv_connect(&nbsp;$serverName);if(&nbsp;$conn&nbsp;===&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}$server_info&nbsp;=&nbsp;sqlsrv_server_info(&nbsp;$conn);if(&nbsp;$server_info&nbsp;){&nbsp;&nbsp;&nbsp;&nbsp;foreach(&nbsp;$server_info&nbsp;as&nbsp;$key&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$key.\":&nbsp;\".$value.\"&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die(&nbsp;print_r(&nbsp;sqlsrv_errors(),&nbsp;true));}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    sqlsrv_client_info() - Returns information about the client and specified connection\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.set-socket-blocking.php","title":"set_socket_blocking","description":"\n \n  set_socket_blocking\n  (PHP 4, PHP 5)set_socket_blocking &mdash; Alias of stream_set_blocking()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   stream_set_blocking()\n  \n  Warning\nThis alias has been DEPRECATED as of PHP 5.3.0.  Relying\non this alias is highly discouraged.\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-append.php","title":"stream_bucket_append","description":"\n \n  stream_bucket_append\n  (PHP 5)stream_bucket_append &mdash; \n   Append bucket to brigade\n  \n\n \n \n  Description\n  \n   void stream_bucket_append\n    ( resource $brigade\n   , resource $bucket\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-make-writeable.php","title":"stream_bucket_make_writeable","description":"\n \n  stream_bucket_make_writeable\n  (PHP 5)stream_bucket_make_writeable &mdash; \n   Return a bucket object from the brigade for operating on\n  \n\n \n \n  Description\n  \n   object stream_bucket_make_writeable\n    ( resource $brigade\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-new.php","title":"stream_bucket_new","description":"\n \n  stream_bucket_new\n  (PHP 5)stream_bucket_new &mdash; \n   Create a new bucket for use on the current stream\n  \n\n \n \n  Description\n  \n   object stream_bucket_new\n    ( resource $stream\n   , string $buffer\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-options.php","title":"stream_context_get_options","description":"\n \n  stream_context_get_options\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_context_get_options &mdash; Retrieve options for a stream\/wrapper\/context\n\n \n \n \n  Description\n  \n   array stream_context_get_options\n    ( resource $stream_or_context\n   )\n\n  \n   Returns an array of options on the specified stream or context.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stream_or_context\n     \n\n      \n       The stream or context to get options from\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns an associative array with the options.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 stream_context_get_options() example\n    \n\n&lt;?php$params&nbsp;=&nbsp;array(\"method\"&nbsp;=&gt;&nbsp;\"POST\");stream_context_get_default(array(\"http\"&nbsp;=&gt;&nbsp;$params));var_dump(stream_context_get_options(stream_context_get_default()));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(1) {\n  [&quot;http&quot;]=&gt;\n  array(1) {\n    [&quot;method&quot;]=&gt;\n    string(4) &quot;POST&quot;\n  }\n}\n\n    \n   \n  \n \n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-default.php","title":"stream_context_get_default","description":"\n \n  stream_context_get_default\n  (PHP 5 &gt;= 5.1.0)stream_context_get_default &mdash; Retrieve the default streams context\n\n \n \n \n  Description\n  \n   resource stream_context_get_default\n    ([ array $options\n  ] )\n\n  \n   Returns the default stream context which is used whenever file operations\n   (fopen(), file_get_contents(), etc...)\n   are called without a context parameter.  Options for the default context\n   can optionally be specified with this function using the same syntax as\n   stream_context_create().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       options must be an associative\n       array of associative arrays in the format\n       $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.\n      \n      Note: \n       \n        As of PHP 5.3.0, the stream_context_set_default() function\n        can be used to set the default context.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A stream context resource.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using stream_context_get_default()\n    \n\n&lt;?php$default_opts&nbsp;=&nbsp;array(&nbsp;&nbsp;'http'=&gt;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'=&gt;\"GET\",&nbsp;&nbsp;&nbsp;&nbsp;'header'=&gt;\"Accept-language:&nbsp;en\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cookie:&nbsp;foo=bar\",&nbsp;&nbsp;&nbsp;&nbsp;'proxy'=&gt;\"tcp:\/\/10.54.1.39:8000\"&nbsp;&nbsp;));$alternate_opts&nbsp;=&nbsp;array(&nbsp;&nbsp;'http'=&gt;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'=&gt;\"POST\",&nbsp;&nbsp;&nbsp;&nbsp;'header'=&gt;\"Content-type:&nbsp;application\/x-www-form-urlencoded\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Content-length:&nbsp;\"&nbsp;.&nbsp;strlen(\"baz=bomb\"),&nbsp;&nbsp;&nbsp;&nbsp;'content'=&gt;\"baz=bomb\"&nbsp;&nbsp;));$default&nbsp;=&nbsp;stream_context_get_default($default_opts);$alternate&nbsp;=&nbsp;stream_context_create($alternate_opts);\/*&nbsp;Sends&nbsp;a&nbsp;regular&nbsp;GET&nbsp;request&nbsp;to&nbsp;proxy&nbsp;server&nbsp;at&nbsp;10.54.1.39&nbsp;*&nbsp;For&nbsp;www.example.com&nbsp;using&nbsp;context&nbsp;options&nbsp;specified&nbsp;in&nbsp;$default_opts&nbsp;*\/readfile('http:\/\/www.example.com');\/*&nbsp;Sends&nbsp;a&nbsp;POST&nbsp;request&nbsp;directly&nbsp;to&nbsp;www.example.com&nbsp;*&nbsp;Using&nbsp;context&nbsp;options&nbsp;specified&nbsp;in&nbsp;$alternate_opts&nbsp;*\/readfile('http:\/\/www.example.com',&nbsp;false,&nbsp;$alternate);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    stream_context_create() - Create a streams context\n    Listing of supported wrappers with context options (Supported Protocols and Wrappers).\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-bucket-prepend.php","title":"stream_bucket_prepend","description":"\n \n  stream_bucket_prepend\n  (PHP 5)stream_bucket_prepend &mdash; \n   Prepend bucket to brigade\n  \n\n \n \n  Description\n  \n   void stream_bucket_prepend\n    ( resource $brigade\n   , resource $bucket\n   )\n\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-get-params.php","title":"stream_context_get_params","description":"\n \n  stream_context_get_params\n  (PHP 5 &gt;= 5.3.0)stream_context_get_params &mdash; Retrieves parameters from a context\n\n \n\n \n  Description\n  \n   array stream_context_get_params\n    ( resource $stream_or_context\n   )\n\n  \n   Retrieves parameter and options information from the stream or context.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream_or_context\n     \n\n      \n       A stream resource or a\n       context resource\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an associate array containing all context options and parameters.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_context_get_params() example\n    \n     Basic usage example\n    \n    \n\n&lt;?php$ctx&nbsp;=&nbsp;stream_context_create();$params&nbsp;=&nbsp;array(\"notification\"&nbsp;=&gt;&nbsp;\"stream_notification_callback\");stream_context_set_params($ctx,&nbsp;$params);var_dump(stream_context_get_params($ctx));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(2) {\n  [&quot;notification&quot;]=&gt;\n  string(28) &quot;stream_notification_callback&quot;\n  [&quot;options&quot;]=&gt;\n  array(0) {\n  }\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    stream_context_set_option() - Sets an option for a stream\/wrapper\/context\n    stream_context_get_params()\n    stream_context_set_params() - Set parameters for a stream\/wrapper\/context\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-create.php","title":"stream_context_create","description":"\n \n  stream_context_create\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_context_create &mdash; Create a streams context\n\n \n \n  Description\n  \n   resource stream_context_create\n    ([ array $options\n   [, array $params\n  ]] )\n\n  \n   Creates and returns a stream context with any options supplied in\n   options preset.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       Must be an associative array of associative arrays in the format\n       $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.\n      \n      \n       Default to an empty array.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       Must be an associative array in the format\n       $arr[&#039;parameter&#039;] = $value.\n       Refer to context parameters for\n       a listing of standard stream parameters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   A stream context resource.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Added the optional params argument.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 Using stream_context_create()\n   \n\n&lt;?php$opts&nbsp;=&nbsp;array(&nbsp;&nbsp;'http'=&gt;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'=&gt;\"GET\",&nbsp;&nbsp;&nbsp;&nbsp;'header'=&gt;\"Accept-language:&nbsp;en\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cookie:&nbsp;foo=bar\\r\\n\"&nbsp;&nbsp;));$context&nbsp;=&nbsp;stream_context_create($opts);\/*&nbsp;Sends&nbsp;an&nbsp;http&nbsp;request&nbsp;to&nbsp;www.example.com&nbsp;&nbsp;&nbsp;with&nbsp;additional&nbsp;headers&nbsp;shown&nbsp;above&nbsp;*\/$fp&nbsp;=&nbsp;fopen('http:\/\/www.example.com',&nbsp;'r',&nbsp;false,&nbsp;$context);fpassthru($fp);fclose($fp);?&gt;\n\n\n   \n\n  \n \n\n\n \n  See Also\n  \n   stream_context_set_option() - Sets an option for a stream\/wrapper\/context\n   Listing of supported wrappers (Supported Protocols and Wrappers)\n   Context options (Context options and parameters)\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-option.php","title":"stream_context_set_option","description":"\n \n  stream_context_set_option\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_context_set_option &mdash; Sets an option for a stream\/wrapper\/context\n\n \n \n \n  Description\n  \n   bool stream_context_set_option\n    ( resource $stream_or_context\n   , string $wrapper\n   , string $option\n   , mixed $value\n   )\n\n   \n    bool stream_context_set_option\n     ( resource $stream_or_context\n    , array $options\n    )\n\n  \n    Sets an option on the specified context.  value\n    is set to option for wrapper\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream_or_context\n     \n\n      \n       The stream or context resource to apply the options too.\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The options to set for the default context.\n      \n      Note: \n       \n        options must be an associative\n        array of associative arrays in the format\n        $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.\n       \n       \n       Refer to context options and parameters\n       for a listing of stream options.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-default.php","title":"stream_context_set_default","description":"\n \n  stream_context_set_default\n  (PHP 5 &gt;= 5.3.0)stream_context_set_default &mdash; Set the default streams context\n\n \n \n \n  Description\n  \n   resource stream_context_set_default\n    ( array $options\n   )\n\n  \n   Set the default stream context which will be used whenever file operations\n   (fopen(), file_get_contents(), etc...)\n   are called without a context parameter. Uses the same syntax as\n   stream_context_create().\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     options\n     \n\n      \n       The options to set for the default context.\n      \n      Note: \n       \n        options must be an associative\n        array of associative arrays in the format\n        $arr[&#039;wrapper&#039;][&#039;option&#039;] = $value.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the default stream context. \n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 stream_context_set_default() example\n    \n\n&lt;?php$default_opts&nbsp;=&nbsp;array(&nbsp;&nbsp;'http'=&gt;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'=&gt;\"GET\",&nbsp;&nbsp;&nbsp;&nbsp;'header'=&gt;\"Accept-language:&nbsp;en\\r\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cookie:&nbsp;foo=bar\",&nbsp;&nbsp;&nbsp;&nbsp;'proxy'=&gt;\"tcp:\/\/10.54.1.39:8000\"&nbsp;&nbsp;));$default&nbsp;=&nbsp;stream_context_set_default($default_opts);\/*&nbsp;Sends&nbsp;a&nbsp;regular&nbsp;GET&nbsp;request&nbsp;to&nbsp;proxy&nbsp;server&nbsp;at&nbsp;10.54.1.39&nbsp;*&nbsp;For&nbsp;www.example.com&nbsp;using&nbsp;context&nbsp;options&nbsp;specified&nbsp;in&nbsp;$default_opts&nbsp;*\/readfile('http:\/\/www.example.com');?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    stream_context_create() - Create a streams context\n    stream_context_get_default() - Retrieve the default streams context\n    Listing of supported wrappers with context options (Supported Protocols and Wrappers).\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-context-set-params.php","title":"stream_context_set_params","description":"\n \n  stream_context_set_params\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_context_set_params &mdash; Set parameters for a stream\/wrapper\/context\n\n \n \n \n  Description\n  \n   bool stream_context_set_params\n    ( resource $stream_or_context\n   , array $params\n   )\n\n  \n   Sets parameters on the specified context.\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stream_or_context\n     \n\n      \n       The stream or context to apply the parameters too.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       An array of parameters to set.\n      \n      Note: \n       \n        params should be an associative array of the structure:\n        $params[&#039;paramname&#039;] = &quot;paramvalue&quot;;.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Supported parameters\n  \n   \n    \n     \n      Parameters\n      Purpose\n     \n\n    \n\n    \n     \n      notification\n      \n       Name of user-defined callback function to be called whenever a stream triggers a notification.\n      \n     \n\n     \n      options\n      \n       Array of options as in context options and\n        parameters.\n      \n     \n\n    \n   \n  \n\n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  See Also\n  \n   stream_notification_callback() - A callback function for the notification context paramater\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-prepend.php","title":"stream_filter_prepend","description":"\n \n  stream_filter_prepend\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_filter_prepend &mdash; Attach a filter to a stream\n\n \n \n  Description\n  \n   resource stream_filter_prepend\n    ( resource $stream\n   , string $filtername\n   [, int $read_write\n   [, mixed $params\n  ]] )\n\n  \n   Adds filtername to the list of filters\n   attached to stream.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The target stream.\n      \n     \n\n    \n\n    \n\n     filtername\n     \n\n      \n       The filter name.\n      \n     \n\n    \n\n    \n\n     read_write\n     \n\n      \n       By default, stream_filter_prepend() will\n       attach the filter to the read filter chain\n       if the file was opened for reading (i.e. File Mode:\n       r, and\/or +).  The filter\n       will also be attached to the write filter chain\n       if the file was opened for writing (i.e. File Mode:\n       w, a, and\/or +).\n       STREAM_FILTER_READ,\n       STREAM_FILTER_WRITE, and\/or\n       STREAM_FILTER_ALL can also be passed to the\n       read_write parameter to override this behavior.\n       See stream_filter_append() for an example of\n       using this parameter.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       This filter will be added with the specified params\n       to the beginning of the list and will therefore be\n       called first during stream operations.  To add a filter to the end of the\n       list, use stream_filter_append().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource which can be used to refer to this filter\n   instance during a call to stream_filter_remove().\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Prior to PHP 5.1.0, this function returns TRUE on success\n        or FALSE on failure.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   When using custom (user) filters\n   \n    stream_filter_register() must be called first\n    in order to register the desired user filter to filtername.\n   \n  \n  Note: \n   \n    Stream data is read from resources (both local and remote) in chunks,\n    with any unconsumed data kept in internal buffers.  When a new\n    filter is prepended to a stream, data in the internal buffers,\n    which has already been processed through other filters will\n    not be reprocessed through the new filter\n    at that time.  This differs from the behavior of\n    stream_filter_append().\n   \n  \n  Note: \n   \n    When a filter is added for read and write, two instances of the filter\n    are created. stream_filter_prepend() must be called twice \n    with STREAM_FILTER_READ and \n    STREAM_FILTER_WRITE to get both filter resources.\n   \n  \n \n\n\n \n  See Also\n  \n   stream_filter_register() - Register a user defined stream filter\n   stream_filter_append() - Attach a filter to a stream\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-append.php","title":"stream_filter_append","description":"\n \n  stream_filter_append\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_filter_append &mdash; Attach a filter to a stream\n\n \n \n  Description\n  \n   resource stream_filter_append\n    ( resource $stream\n   , string $filtername\n   [, int $read_write\n   [, mixed $params\n  ]] )\n\n  \n   Adds filtername to the list of filters\n   attached to stream.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The target stream.\n      \n     \n\n    \n\n    \n\n     filtername\n     \n\n      \n       The filter name.\n      \n     \n\n    \n\n    \n\n     read_write\n     \n\n      \n       By default, stream_filter_append() will\n       attach the filter to the read filter chain\n       if the file was opened for reading (i.e. File Mode:\n       r, and\/or +).  The filter\n       will also be attached to the write filter chain\n       if the file was opened for writing (i.e. File Mode:\n       w, a, and\/or +).\n       STREAM_FILTER_READ,\n       STREAM_FILTER_WRITE, and\/or\n       STREAM_FILTER_ALL can also be passed to the\n       read_write parameter to override this behavior.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       This filter will be added with the specified \n       params to the end of\n       the list and will therefore be called last during stream operations.\n       To add a filter to the beginning of the list, use\n       stream_filter_prepend().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a resource which can be used to refer to this filter\n   instance during a call to stream_filter_remove().\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Prior to PHP 5.1.0, this function returns TRUE on success\n        or FALSE on failure.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Controlling where filters are applied\n    \n\n&lt;?php\/*&nbsp;Open&nbsp;a&nbsp;test&nbsp;file&nbsp;for&nbsp;reading&nbsp;and&nbsp;writing&nbsp;*\/$fp&nbsp;=&nbsp;fopen('test.txt',&nbsp;'w+');\/*&nbsp;Apply&nbsp;the&nbsp;ROT13&nbsp;filter&nbsp;to&nbsp;the&nbsp;*&nbsp;write&nbsp;filter&nbsp;chain,&nbsp;but&nbsp;not&nbsp;the&nbsp;*&nbsp;read&nbsp;filter&nbsp;chain&nbsp;*\/stream_filter_append($fp,&nbsp;\"string.rot13\",&nbsp;STREAM_FILTER_WRITE);\/*&nbsp;Write&nbsp;a&nbsp;simple&nbsp;string&nbsp;to&nbsp;the&nbsp;file&nbsp;*&nbsp;it&nbsp;will&nbsp;be&nbsp;ROT13&nbsp;transformed&nbsp;on&nbsp;the&nbsp;*&nbsp;way&nbsp;out&nbsp;*\/fwrite($fp,&nbsp;\"This&nbsp;is&nbsp;a&nbsp;test\\n\");\/*&nbsp;Back&nbsp;up&nbsp;to&nbsp;the&nbsp;beginning&nbsp;of&nbsp;the&nbsp;file&nbsp;*\/rewind($fp);\/*&nbsp;Read&nbsp;the&nbsp;contents&nbsp;of&nbsp;the&nbsp;file&nbsp;back&nbsp;out.&nbsp;*&nbsp;Had&nbsp;the&nbsp;filter&nbsp;been&nbsp;applied&nbsp;to&nbsp;the&nbsp;*&nbsp;read&nbsp;filter&nbsp;chain&nbsp;as&nbsp;well,&nbsp;we&nbsp;would&nbsp;see&nbsp;*&nbsp;the&nbsp;text&nbsp;ROT13ed&nbsp;back&nbsp;to&nbsp;its&nbsp;original&nbsp;state&nbsp;*\/fpassthru($fp);fclose($fp);\/*&nbsp;Expected&nbsp;Output&nbsp;&nbsp;&nbsp;---------------Guvf&nbsp;vf&nbsp;n&nbsp;grfg&nbsp;*\/?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   When using custom (user) filters\n   \n    stream_filter_register() must be called first\n    in order to register the desired user filter to filtername.\n   \n  \n  Note: \n   \n    Stream data is read from resources (both local and remote) in chunks,\n    with any unconsumed data kept in internal buffers.  When a new\n    filter is appended to a stream, data in the internal buffers is processed through\n    the new filter at that time.  This differs from the behavior of\n    stream_filter_prepend().\n   \n  \n  Note: \n   \n    When a filter is added for read and write, two instances of the filter\n    are created. stream_filter_append() must be called twice \n    with STREAM_FILTER_READ and \n    STREAM_FILTER_WRITE to get both filter resources.\n   \n  \n \n\n\n \n  See Also\n  \n   stream_filter_register() - Register a user defined stream filter\n   stream_filter_prepend() - Attach a filter to a stream\n   stream_get_filters() - Retrieve list of registered filters\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-copy-to-stream.php","title":"stream_copy_to_stream","description":"\n \n  stream_copy_to_stream\n  (PHP 5)stream_copy_to_stream &mdash; Copies data from one stream to another\n\n \n \n  Description\n  \n   int stream_copy_to_stream\n    ( resource $source\n   , resource $dest\n   [, int $maxlength = -1\n   [, int $offset = 0\n  ]] )\n\n  \n   Makes a copy of up to maxlength bytes\n   of data from the current position (or from the\n   offset position, if specified) in\n   source to dest. If\n   maxlength is not specified, all remaining content in\n   source will be copied.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     source\n     \n\n      \n       The source stream\n      \n     \n\n    \n\n    \n\n     dest\n     \n\n      \n       The destination stream\n      \n     \n\n    \n\n    \n\n     maxlength\n     \n\n      \n       Maximum bytes to copy\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The offset where to start to copy data\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the total count of bytes copied.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the offset parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A stream_copy_to_stream() example\n    \n\n&lt;?php$src&nbsp;=&nbsp;fopen('http:\/\/www.example.com',&nbsp;'r');$dest1&nbsp;=&nbsp;fopen('first1k.txt',&nbsp;'w');$dest2&nbsp;=&nbsp;fopen('remainder.txt',&nbsp;'w');echo&nbsp;stream_copy_to_stream($src,&nbsp;$dest1,&nbsp;1024)&nbsp;.&nbsp;\"&nbsp;bytes&nbsp;copied&nbsp;to&nbsp;first1k.txt\\n\";echo&nbsp;stream_copy_to_stream($src,&nbsp;$dest2)&nbsp;.&nbsp;\"&nbsp;bytes&nbsp;copied&nbsp;to&nbsp;remainder.txt\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    copy() - Copies file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-register.php","title":"stream_filter_register","description":"\n \n  stream_filter_register\n  (PHP 5)stream_filter_register &mdash; Register a user defined stream filter\n\n \n \n  Description\n  \n   bool stream_filter_register\n    ( string $filtername\n   , string $classname\n   )\n\n  \n   stream_filter_register() allows you to implement\n   your own filter on any registered stream used with all the other\n   filesystem functions (such as fopen(),\n   fread() etc.).\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     filtername\n     \n\n      \n       The filter name to be registered.\n      \n     \n\n    \n\n    \n\n     classname\n     \n\n      \n       To implement a filter, you need to define a class as an extension of\n       php_user_filter with a number of member functions\n       as defined below. When performing read\/write operations on the stream\n       to which your filter is attached, PHP will pass the data through your\n       filter (and any other filters attached to that stream) so that the\n       data may be modified as desired. You must implement the methods\n       exactly as described below - doing otherwise will lead to undefined\n       behaviour.\n      \n      \n       int filter\n        ( resource $in\n       , resource $out\n       , int &$consumed\n       , bool $closing\n       )\n\n      \n       This method is called whenever data is read from or written to\n       the attached stream (such as with fread() or fwrite()).\n       in is a resource pointing to a bucket brigade\n       which contains one or more bucket objects containing data to be filtered.\n       out is a resource pointing to a second bucket brigade\n       into which your modified buckets should be placed.\n       consumed, which must always\n       be declared by reference, should be incremented by the length of the data\n       which your filter reads in and alters.  In most cases this means you will\n       increment consumed by $bucket-&gt;datalen\n       for each $bucket. If the stream is in the process of closing\n       (and therefore this is the last pass through the filterchain),\n       the closing parameter will be set to TRUE.\n       The  filter() method must return one of\n       three values upon completion.\n       \n        \n         \n          \n           Return Value\n           Meaning\n          \n\n         \n\n         \n          \n           PSFS_PASS_ON\n           \n            Filter processed successfully with data available in the\n            out bucket brigade.\n           \n          \n\n          \n           PSFS_FEED_ME\n           \n            Filter processed successfully, however no data was available to\n            return. More data is required from the stream or prior filter.\n           \n          \n\n          \n           PSFS_ERR_FATAL (default)\n           \n            The filter experienced an unrecoverable error and cannot continue.\n           \n          \n\n         \n        \n       \n\n      \n      \n       bool onCreate\n        ( void\n       )\n\n      \n       This method is called during instantiation of the filter class\n       object.  If your filter allocates or initializes any other resources\n       (such as a buffer), this is the place to do it.  Your implementation of\n       this method should return FALSE on failure, or TRUE on success.\n      \n      \n       When your filter is first instantiated, and\n       yourfilter-&gt;onCreate() is called, a number of properties\n       will be available as shown in the table below.\n      \n      \n       \n        \n         \n          \n           Property\n           Contents\n          \n\n         \n\n         \n          \n           FilterClass-&gt;filtername\n           \n            A string containing the name the filter was instantiated with.\n            Filters may be registered under multiple names or under wildcards.\n            Use this property to determine which name was used.\n           \n          \n\n          \n           FilterClass-&gt;params\n           \n            The contents of the params parameter passed\n            to stream_filter_append()\n            or stream_filter_prepend().\n           \n          \n\n          \n           FilterClass-&gt;stream\n           \n            The stream resource being filtered. Maybe available only during\n             filter() calls when the \n            closing parameter is set to FALSE.\n           \n          \n\n         \n        \n       \n\n      \n      \n       void onClose\n        ( void\n       )\n\n      \n       This method is called upon filter shutdown (typically, this is also\n       during stream shutdown), and is executed after\n       the flush method is called.  If any resources\n       were allocated or initialized during onCreate()\n       this would be the time to destroy or dispose of them.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n  \n   stream_filter_register() will return FALSE if the\n   filtername is already defined.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Filter for capitalizing characters on foo-bar.txt stream\n    \n     The example below implements a filter named strtoupper\n     on the foo-bar.txt stream which will capitalize\n     all letter characters written to\/read from that stream.\n    \n    \n\n&lt;?php\/*&nbsp;Define&nbsp;our&nbsp;filter&nbsp;class&nbsp;*\/class&nbsp;strtoupper_filter&nbsp;extends&nbsp;php_user_filter&nbsp;{&nbsp;&nbsp;function&nbsp;filter($in,&nbsp;$out,&nbsp;&amp;$consumed,&nbsp;$closing)&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;($bucket&nbsp;=&nbsp;stream_bucket_make_writeable($in))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bucket-&gt;data&nbsp;=&nbsp;strtoupper($bucket-&gt;data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$consumed&nbsp;+=&nbsp;$bucket-&gt;datalen;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stream_bucket_append($out,&nbsp;$bucket);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;PSFS_PASS_ON;&nbsp;&nbsp;}}\/*&nbsp;Register&nbsp;our&nbsp;filter&nbsp;with&nbsp;PHP&nbsp;*\/stream_filter_register(\"strtoupper\",&nbsp;\"strtoupper_filter\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Failed&nbsp;to&nbsp;register&nbsp;filter\");$fp&nbsp;=&nbsp;fopen(\"foo-bar.txt\",&nbsp;\"w\");\/*&nbsp;Attach&nbsp;the&nbsp;registered&nbsp;filter&nbsp;to&nbsp;the&nbsp;stream&nbsp;just&nbsp;opened&nbsp;*\/stream_filter_append($fp,&nbsp;\"strtoupper\");fwrite($fp,&nbsp;\"Line1\\n\");fwrite($fp,&nbsp;\"Word&nbsp;-&nbsp;2\\n\");fwrite($fp,&nbsp;\"Easy&nbsp;As&nbsp;123\\n\");fclose($fp);\/*&nbsp;Read&nbsp;the&nbsp;contents&nbsp;back&nbsp;out&nbsp;*\/readfile(\"foo-bar.txt\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nLINE1\nWORD - 2\nEASY AS 123\n\n    \n   \n  \n  \n   \n    Example #2 Registering a generic filter class to match multiple filter names.\n    \n\n&lt;?php\/*&nbsp;Define&nbsp;our&nbsp;filter&nbsp;class&nbsp;*\/class&nbsp;string_filter&nbsp;extends&nbsp;php_user_filter&nbsp;{&nbsp;&nbsp;var&nbsp;$mode;&nbsp;&nbsp;function&nbsp;filter($in,&nbsp;$out,&nbsp;&amp;$consumed,&nbsp;$closing)&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;($bucket&nbsp;=&nbsp;stream_bucket_make_writeable($in))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($this-&gt;mode&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bucket-&gt;data&nbsp;=&nbsp;strtoupper($bucket-&gt;data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;($this-&gt;mode&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bucket-&gt;data&nbsp;=&nbsp;strtolower($bucket-&gt;data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$consumed&nbsp;+=&nbsp;$bucket-&gt;datalen;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stream_bucket_append($out,&nbsp;$bucket);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;PSFS_PASS_ON;&nbsp;&nbsp;}&nbsp;&nbsp;function&nbsp;onCreate()&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($this-&gt;filtername&nbsp;==&nbsp;'str.toupper')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;mode&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;elseif&nbsp;($this-&gt;filtername&nbsp;==&nbsp;'str.tolower')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;mode&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Some&nbsp;other&nbsp;str.*&nbsp;filter&nbsp;was&nbsp;asked&nbsp;for,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;report&nbsp;failure&nbsp;so&nbsp;that&nbsp;PHP&nbsp;will&nbsp;keep&nbsp;looking&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&nbsp;&nbsp;}}\/*&nbsp;Register&nbsp;our&nbsp;filter&nbsp;with&nbsp;PHP&nbsp;*\/stream_filter_register(\"str.*\",&nbsp;\"string_filter\")&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Failed&nbsp;to&nbsp;register&nbsp;filter\");$fp&nbsp;=&nbsp;fopen(\"foo-bar.txt\",&nbsp;\"w\");\/*&nbsp;Attach&nbsp;the&nbsp;registered&nbsp;filter&nbsp;to&nbsp;the&nbsp;stream&nbsp;just&nbsp;opened&nbsp;&nbsp;&nbsp;We&nbsp;could&nbsp;alternately&nbsp;bind&nbsp;to&nbsp;str.tolower&nbsp;here&nbsp;*\/stream_filter_append($fp,&nbsp;\"str.toupper\");fwrite($fp,&nbsp;\"Line1\\n\");fwrite($fp,&nbsp;\"Word&nbsp;-&nbsp;2\\n\");fwrite($fp,&nbsp;\"Easy&nbsp;As&nbsp;123\\n\");fclose($fp);\/*&nbsp;Read&nbsp;the&nbsp;contents&nbsp;back&nbsp;out&nbsp;*\/readfile(\"foo-bar.txt\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nLINE1\nWORD - 2\nEASY AS 123\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    stream_wrapper_register() - Register a URL wrapper implemented as a PHP class\n    stream_filter_append() - Attach a filter to a stream\n    stream_filter_prepend() - Attach a filter to a stream\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-encoding.php","title":"stream_encoding","description":"\n \n  stream_encoding\n  (No version information available, might only be in SVN)stream_encoding &mdash; Set character set for stream encoding\n\n \n\n \n  Description\n  \n   bool stream_encoding\n    ( resource $stream\n   [, string $encoding\n  ] )\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-filter-remove.php","title":"stream_filter_remove","description":"\n \n  stream_filter_remove\n  (PHP 5 &gt;= 5.1.0)stream_filter_remove &mdash; Remove a filter from a stream\n\n \n \n  Description\n  \n   bool stream_filter_remove\n    ( resource $stream_filter\n   )\n\n  \n   Removes a stream filter previously added to a stream with\n   stream_filter_prepend() or\n   stream_filter_append().  Any data remaining in the\n   filter&#039;s internal buffer will be flushed through to the next filter before\n   removing it.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream_filter\n     \n\n      \n       The stream filter to be removed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Dynamicly refiltering a stream\n    \n\n&lt;?php\/*&nbsp;Open&nbsp;a&nbsp;test&nbsp;file&nbsp;for&nbsp;reading&nbsp;and&nbsp;writing&nbsp;*\/$fp&nbsp;=&nbsp;fopen(\"test.txt\",&nbsp;\"rw\");$rot13_filter&nbsp;=&nbsp;stream_filter_append($fp,&nbsp;\"string.rot13\",&nbsp;STREAM_FILTER_WRITE);fwrite($fp,&nbsp;\"This&nbsp;is&nbsp;\");stream_filter_remove($rot13_filter);fwrite($fp,&nbsp;\"a&nbsp;test\\n\");rewind($fp);fpassthru($fp);fclose($fp);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nGuvf vf a test\n\n    \n   \n   \n  \n \n\n\n \n  See Also\n  \n   \n    stream_filter_register() - Register a user defined stream filter\n    stream_filter_append() - Attach a filter to a stream\n    stream_filter_prepend() - Attach a filter to a stream\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-filters.php","title":"stream_get_filters","description":"\n \n  stream_get_filters\n  (PHP 5)stream_get_filters &mdash; Retrieve list of registered filters\n\n \n \n  Description\n  \n   array stream_get_filters\n    ( void\n   )\n\n  \n   Retrieve the list of registered filters on the running system.\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed array containing the name of all stream filters\n   available.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using stream_get_filters()\n    \n\n&lt;?php$streamlist&nbsp;=&nbsp;stream_get_filters();print_r($streamlist);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray (\n  [0] =&gt; string.rot13\n  [1] =&gt; string.toupper\n  [2] =&gt; string.tolower\n  [3] =&gt; string.base64\n  [4] =&gt; string.quoted-printable\n)\n\n    \n   \n  \n \n\n  \n \n  See Also\n  \n   stream_filter_register() - Register a user defined stream filter\n   stream_get_wrappers() - Retrieve list of registered streams\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-contents.php","title":"stream_get_contents","description":"\n \n  stream_get_contents \n  (PHP 5)stream_get_contents &mdash; Reads remainder of a stream into a string\n\n \n \n  Description\n  \n   string stream_get_contents\n    ( resource $handle\n   [, int $maxlength = -1\n   [, int $offset = -1\n  ]] )\n\n   \n   Identical to file_get_contents(), except that\n   stream_get_contents() operates on an already open\n   stream resource and returns the remaining contents in a string, up to\n   maxlength bytes and starting at the specified\n   offset.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle (resource)\n     \n\n      \n       A stream resource (e.g. returned from fopen())\n      \n     \n\n    \n\n    \n\n     maxlength (integer)\n     \n\n      \n       The maximum bytes to read. Defaults to -1 (read all the remaining\n       buffer).\n      \n     \n\n    \n\n    \n\n     offset (integer)\n     \n\n      \n       Seek to the specified offset before reading. If this number is negative,\n       no seeking will occur and reading will start from the current position.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The offset was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_get_contents() example\n    \n\n&lt;?phpif&nbsp;($stream&nbsp;=&nbsp;fopen('http:\/\/www.example.com',&nbsp;'r'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;print&nbsp;all&nbsp;the&nbsp;page&nbsp;starting&nbsp;at&nbsp;the&nbsp;offset&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;stream_get_contents($stream,&nbsp;-1,&nbsp;10);&nbsp;&nbsp;&nbsp;&nbsp;fclose($stream);}if&nbsp;($stream&nbsp;=&nbsp;fopen('http:\/\/www.example.net',&nbsp;'r'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;print&nbsp;the&nbsp;first&nbsp;5&nbsp;bytes&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;stream_get_contents($stream,&nbsp;5);&nbsp;&nbsp;&nbsp;&nbsp;fclose($stream);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    fgets() - Gets line from file pointer\n    fread() - Binary-safe file read\n    fpassthru() - Output all remaining data on a file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-meta-data.php","title":"stream_get_meta_data","description":"\n \n  stream_get_meta_data\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_get_meta_data &mdash; Retrieves header\/meta data from streams\/file pointers\n\n \n \n  Description\n  \n   array stream_get_meta_data\n    ( resource $stream\n   )\n\n  \n   Returns information about an existing stream.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The stream can be any stream created by fopen(),\n       fsockopen() and pfsockopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The result array contains the following items:\n  \n  \n   \n    \n     timed_out (bool) - TRUE if the stream\n     timed out while waiting for data on the last call to\n     fread() or fgets().\n    \n   \n   \n    \n     blocked (bool) - TRUE if the stream is\n     in blocking IO mode. See stream_set_blocking().\n    \n   \n   \n    \n     eof (bool) - TRUE if the stream has reached\n     end-of-file.  Note that for socket streams this member can be TRUE\n     even when unread_bytes is non-zero.  To\n     determine if there is more data to be read, use\n     feof() instead of reading this item.\n    \n   \n   \n    \n     unread_bytes (int) - the number of bytes\n     currently contained in the PHP&#039;s own internal buffer.\n    \n    Note: \n     \n      You shouldn&#039;t use this value in a script.\n     \n    \n   \n   \n    \n     stream_type (string) - a label describing\n     the underlying implementation of the stream.\n    \n   \n   \n    \n     wrapper_type (string) - a label describing\n     the protocol wrapper implementation layered over the stream.\n     See Supported Protocols and Wrappers for more information about wrappers.\n    \n   \n   \n    \n     wrapper_data (mixed) - wrapper specific\n     data attached to this stream.  See Supported Protocols and Wrappers for\n     more information about wrappers and their wrapper data.\n    \n   \n   \n    \n     filters (array) - and array containing\n     the names of any filters that have been stacked onto this stream.\n     Documentation on filters can be found in the\n     Filters appendix.\n    \n   \n   \n    \n     mode (string) - the type of access required for\n     this stream (see Table 1 of the fopen() reference)\n    \n   \n   \n    \n     seekable (bool) - whether the current stream can\n     be seeked.\n    \n   \n   \n    \n     uri (string) - the URI\/filename associated with this\n     stream.\n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The following entries were added in the returned array:\n        mode, seekable,\n        and uri.\n       \n      \n\n      \n       4.3.0\n       \n        The following entries were added in the returned array:\n        stream_type, wrapper_type,\n        wrapper_data, and filters.\n       \n      \n\n      \n       4.3.0\n       \n        socket_get_status() is an alias for this function.\n        Prior to PHP 4.3.0, it was used to retrieve the first four items, for\n        socket based streams only.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_get_meta_data() example\n    \n\n&lt;?php$url&nbsp;=&nbsp;'http:\/\/www.example.com\/';if&nbsp;(!$fp&nbsp;=&nbsp;fopen($url,&nbsp;'r'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"Unable&nbsp;to&nbsp;open&nbsp;URL&nbsp;($url)\",&nbsp;E_USER_ERROR);}$meta&nbsp;=&nbsp;stream_get_meta_data($fp);print_r($meta);fclose($fp);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [wrapper_data] =&gt; Array\n        (\n            [0] =&gt; HTTP\/1.1 200 OK\n            [1] =&gt; Server: Apache\/2.2.3 (Red Hat)\n            [2] =&gt; Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT\n            [3] =&gt; ETag: &quot;b300b4-1b6-4059a80bfd280&quot;\n            [4] =&gt; Accept-Ranges: bytes\n            [5] =&gt; Content-Type: text\/html; charset=UTF-8\n            [6] =&gt; Set-Cookie: FOO=BAR; expires=Fri, 21-Dec-2012 12:00:00 GMT; path=\/; domain=.example.com\n            [6] =&gt; Connection: close     \n            [7] =&gt; Date: Fri, 16 Oct 2009 12:00:00 GMT\n            [8] =&gt; Age: 1164   \n            [9] =&gt; Content-Length: 438\n        )\n\n    [wrapper_type] =&gt; http\n    [stream_type] =&gt; tcp_socket\/ssl\n    [mode] =&gt; r\n    [unread_bytes] =&gt; 438\n    [seekable] =&gt; \n    [uri] =&gt; http:\/\/www.example.com\/\n    [timed_out] =&gt; \n    [blocked] =&gt; 1\n    [eof] =&gt; \n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   This function does NOT work on sockets created by the Socket extension.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    get_headers() - Fetches all the headers sent by the server in response to a HTTP request\n    $http_response_header\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-transports.php","title":"stream_get_transports","description":"\n \n  stream_get_transports\n  (PHP 5)stream_get_transports &mdash; Retrieve list of registered socket transports\n\n \n \n  Description\n  \n   array stream_get_transports\n    ( void\n   )\n\n  \n   Returns an indexed array containing the name of all socket transports\n   available on the running system.\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed array of socket transports names.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using stream_get_transports()\n    \n\n&lt;?php$xportlist&nbsp;=&nbsp;stream_get_transports();print_r($xportlist);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray (\n  [0] =&gt; tcp\n  [1] =&gt; udp\n  [2] =&gt; unix\n  [3] =&gt; udg\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   stream_get_filters() - Retrieve list of registered filters\n   stream_get_wrappers() - Retrieve list of registered streams\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-line.php","title":"stream_get_line","description":"\n \n  stream_get_line\n  (PHP 5)stream_get_line &mdash; Gets line from stream resource up to a given delimiter\n\n \n \n  Description\n  \n   string stream_get_line\n    ( resource $handle\n   , int $length\n   [, string $ending\n  ] )\n\n  \n   Gets a line from the given handle.\n  \n  \n   Reading ends when length bytes have been read, when\n   the string specified by ending is found (which is\n   not included in the return value), or on EOF\n   (whichever comes first).\n  \n  \n   This function is nearly identical to fgets() except in\n   that it allows end of line delimiters other than the standard \\n, \\r, and\n   \\r\\n, and does not return the delimiter itself.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       A valid file handle.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of bytes to read from the handle.\n      \n     \n\n    \n\n    \n\n     ending\n     \n\n      \n       An optional string delimiter.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string of up to length bytes read from the file\n   pointed to by handle.\n  \n  \n   If an error occurs, returns FALSE.\n  \n \n\n  \n \n  See Also\n  \n   fread() - Binary-safe file read\n   fgets() - Gets line from file pointer\n   fgetc() - Gets character from file pointer\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-get-wrappers.php","title":"stream_get_wrappers","description":"\n \n  stream_get_wrappers\n  (PHP 5)stream_get_wrappers &mdash; Retrieve list of registered streams\n\n \n \n  Description\n  \n   array stream_get_wrappers\n    ( void\n   )\n\n  \n   Retrieve list of registered streams available on the running system.\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed array containing the name of all stream wrappers\n   available on the running system.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_get_wrappers() example\n    \n\n&lt;?phpprint_r(stream_get_wrappers());?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; php\n    [1] =&gt; file\n    [2] =&gt; http\n    [3] =&gt; ftp\n    [4] =&gt; compress.bzip2\n    [5] =&gt; compress.zlib\n)\n\n    \n   \n  \n  \n   \n    Example #2 Checking for the existence of a stream wrapper\n    \n\n&lt;?php\/\/&nbsp;check&nbsp;for&nbsp;the&nbsp;existence&nbsp;of&nbsp;the&nbsp;bzip2&nbsp;stream&nbsp;wrapperif&nbsp;(in_array('compress.bzip2',&nbsp;stream_get_wrappers()))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'compress.bzip2:\/\/&nbsp;support&nbsp;enabled.';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'compress.bzip2:\/\/&nbsp;support&nbsp;not&nbsp;enabled.';}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   stream_wrapper_register() - Register a URL wrapper implemented as a PHP class\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-is-local.php","title":"stream_is_local","description":"\n \n  stream_is_local\n  (PHP 5 &gt;= 5.2.4)stream_is_local &mdash; Checks if a stream is a local stream\n\n \n\n \n  Description\n  \n   bool stream_is_local\n    ( mixed $stream_or_url\n   )\n\n  \n   Checks if a stream, or a URL, is a local one or not.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream_or_url\n     \n\n      \n       The stream resource or URL to check.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_is_local() example\n    \n     Basic usage example.\n    \n    \n\n&lt;?phpvar_dump(stream_is_local(\"http:\/\/example.com\"));var_dump(stream_is_local(\"\/etc\"));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nbool(false)\nbool(true)\n\n    \n   \n  \n \n\n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-register-wrapper.php","title":"stream_register_wrapper","description":"\n \n  stream_register_wrapper\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_register_wrapper &mdash; Alias of stream_wrapper_register()\n\n \n \n  Description\n  \n   This function is an alias of:  stream_wrapper_register().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-resolve-include-path.php","title":"stream_resolve_include_path","description":"\n \n  stream_resolve_include_path\n  (PHP 5 &gt;= 5.3.2)stream_resolve_include_path &mdash; \n   Resolve filename against the include path\n  \n\n \n\n \n  Description\n  \n   string stream_resolve_include_path\n    ( string $filename\n   \n   )\n\n  \n   Resolve filename against the include path according to the same rules as fopen()\/include().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename to resolve.\n      \n     \n\n    \n\n    \n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing the resolved absolute filename,  or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_resolve_include_path() example\n    \n     Basic usage example.\n    \n    \n\n&lt;?phpvar_dump(stream_resolve_include_path(\"test.php\"));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(22) &quot;\/var\/www\/html\/test.php&quot;\n\n    \n   \n  \n \n\n\n \n "},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-notification-callback.php","title":"stream_notification_callback","description":"\n \n  stream_notification_callback\n  (PHP 5 &gt;= 5.2.0)stream_notification_callback &mdash; A callback function for the notification context paramater\n\n \n \n \n  Description\n  \n   void stream_notification_callback\n    ( int $notification_code\n   , int $severity\n   , string $message\n   , int $message_code\n   , int $bytes_transferred\n   , int $bytes_max\n   )\n\n  \n   A callback function, used by the\n   notification context parameter,\n   called during an event.\n  \n  Note: \n   \n    This is not a real function, only a prototype of how the function should\n    be.\n   \n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     notification_code\n     \n\n      \n       One of the STREAM_NOTIFY_* notification constants.\n      \n     \n\n    \n\n    \n\n     severity\n     \n\n      \n       One of the STREAM_NOTIFY_SEVERITY_* notification constants.\n      \n     \n\n    \n\n    \n\n     message\n     \n\n      \n       Passed if a descriptive message is available for the event.\n      \n     \n\n    \n\n    \n\n     message_code\n     \n\n      \n       Passed if a descriptive message code is available for the event.\n      \n      \n       The meaning of this value is dependent on the specific wrapper in use.\n      \n     \n\n    \n\n    \n\n     bytes_transferred\n     \n\n      \n       If applicable, the bytes_transferred will be\n       populated.\n      \n     \n\n    \n\n    \n\n     bytes_max\n     \n\n      \n       If applicable, the bytes_max will be\n       populated.\n      \n     \n\n    \n\n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_notification_callback() example\n    \n\n&lt;?phpfunction&nbsp;stream_notification_callback($notification_code,&nbsp;$severity,&nbsp;$message,&nbsp;$message_code,&nbsp;$bytes_transferred,&nbsp;$bytes_max)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;switch($notification_code)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_RESOLVE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_AUTH_REQUIRED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_COMPLETED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_FAILURE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_AUTH_RESULT:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($notification_code,&nbsp;$severity,&nbsp;$message,&nbsp;$message_code,&nbsp;$bytes_transferred,&nbsp;$bytes_max);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Ignore&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_REDIRECTED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Being&nbsp;redirected&nbsp;to:&nbsp;\",&nbsp;$message;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_CONNECT:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connected...\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_FILE_SIZE_IS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Got&nbsp;the&nbsp;filesize:&nbsp;\",&nbsp;$bytes_max;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_MIME_TYPE_IS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Found&nbsp;the&nbsp;mime-type:&nbsp;\",&nbsp;$message;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_PROGRESS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Made&nbsp;some&nbsp;progress,&nbsp;downloaded&nbsp;\",&nbsp;$bytes_transferred,&nbsp;\"&nbsp;so&nbsp;far\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\n\";}$ctx&nbsp;=&nbsp;stream_context_create();stream_context_set_params($ctx,&nbsp;array(\"notification\"&nbsp;=&gt;&nbsp;\"stream_notification_callback\"));file_get_contents(\"http:\/\/php.net\/contact\",&nbsp;false,&nbsp;$ctx);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nConnected...\nFound the mime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no.php.net\/contact\nConnected...\nGot the filesize: 0\nFound the mime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no.php.net\/contact.php\nConnected...\nGot the filesize: 4589\nFound the mime-type: text\/html;charset=utf-8\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 1440 so far\nMade some progress, downloaded 2880 so far\nMade some progress, downloaded 4320 so far\nMade some progress, downloaded 5760 so far\nMade some progress, downloaded 6381 so far\nMade some progress, downloaded 7002 so far\n\n    \n   \n  \n  \n   \n    Example #2 Simple progressbar for commandline download client\n    \n\n&lt;?phpfunction&nbsp;usage($argv)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Usage:\\n\";&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\tphp&nbsp;%s&nbsp;&lt;http:\/\/example.com\/file&gt;&nbsp;&lt;localfile&gt;\\n\",&nbsp;$argv[0]);&nbsp;&nbsp;&nbsp;&nbsp;exit(1);}function&nbsp;stream_notification_callback($notification_code,&nbsp;$severity,&nbsp;$message,&nbsp;$message_code,&nbsp;$bytes_transferred,&nbsp;$bytes_max)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;$filesize&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;switch($notification_code)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_RESOLVE:&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_AUTH_REQUIRED:&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_COMPLETED:&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_FAILURE:&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_AUTH_RESULT:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Ignore&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_REDIRECTED:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Being&nbsp;redirected&nbsp;to:&nbsp;\",&nbsp;$message,&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_CONNECT:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Connected...\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_FILE_SIZE_IS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$filesize&nbsp;=&nbsp;$bytes_max;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Filesize:&nbsp;\",&nbsp;$filesize,&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_MIME_TYPE_IS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Mime-type:&nbsp;\",&nbsp;$message,&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;STREAM_NOTIFY_PROGRESS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($bytes_transferred&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isset($filesize))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\rUnknown&nbsp;filesize..&nbsp;%2d&nbsp;kb&nbsp;done..\",&nbsp;$bytes_transferred\/1024);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$length&nbsp;=&nbsp;(int)(($bytes_transferred\/$filesize)*100);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"\\r[%-100s]&nbsp;%d%%&nbsp;(%2d\/%2d&nbsp;kb)\",&nbsp;str_repeat(\"=\",&nbsp;$length).&nbsp;\"&gt;\",&nbsp;$length,&nbsp;($bytes_transferred\/1024),&nbsp;$filesize\/1024);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}}isset($argv[1],&nbsp;$argv[2])&nbsp;or&nbsp;usage($argv);$ctx&nbsp;=&nbsp;stream_context_create();stream_context_set_params($ctx,&nbsp;array(\"notification\"&nbsp;=&gt;&nbsp;\"stream_notification_callback\"));$fp&nbsp;=&nbsp;fopen($argv[1],&nbsp;\"r\",&nbsp;false,&nbsp;$ctx);if&nbsp;(is_resource($fp)&nbsp;&amp;&amp;&nbsp;file_put_contents($argv[2],&nbsp;$fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"\\nDone!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;exit(0);}$err&nbsp;=&nbsp;error_get_last();echo&nbsp;\"\\nErrrrrorr..\\n\",&nbsp;$err[\"message\"],&nbsp;\"\\n\";exit(1);?&gt;\n\n\n    \n\n    \n     Executing the example above with:\n     php -n fetch.php\n     http:\/\/no2.php.net\/get\/php-5-LATEST.tar.bz2\/from\/this\/mirror\n     php-latest.tar.bz2 will output something similar too:\n    \n    \n\nConnected...\nMime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no2.php.net\/distributions\/php-5.2.5.tar.bz2\nConnected...\nFilesize: 7773024\nMime-type: application\/octet-stream\n[========================================&gt;                                                           ] 40% (3076\/7590 kb)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    Context parameters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-blocking.php","title":"stream_set_blocking","description":"\n \n  stream_set_blocking\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_set_blocking &mdash; Set blocking\/non-blocking mode on a stream\n\n \n \n  Description\n  \n   bool stream_set_blocking\n    ( resource $stream\n   , int $mode\n   )\n\n  \n   Sets blocking or non-blocking mode on a stream.\n  \n  \n   This function works for any stream that supports non-blocking mode\n   (currently, regular files and socket streams).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The stream.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       If mode is 0, the given stream\n       will be switched to non-blocking mode, and if 1, it\n       will be switched to blocking mode.  This affects calls like\n       fgets() and fread()\n       that read from the stream.  In non-blocking mode an\n       fgets() call will always return right away\n       while in blocking mode it will wait for data to become available\n       on the stream.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        Prior to PHP 4.3.0, this function only worked on socket based streams.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function was previously called as\n    set_socket_blocking() and later\n    socket_set_blocking() but this usage is deprecated.\n   \n  \n \n\n\n \n  See Also\n  \n   stream_select() - Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-read-buffer.php","title":"stream_set_read_buffer","description":"\n \n  stream_set_read_buffer\n  (PHP 5 &gt;= 5.3.3)stream_set_read_buffer &mdash; Set read file buffering on the given stream\n\n \n \n  Description\n  \n   int stream_set_read_buffer\n    ( resource $stream\n   , int $buffer\n   )\n\n  \n   Sets the read buffer. It&#039;s the equivalent of stream_set_write_buffer(),\n   but for read operations.\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    stream\n    \n\n     \n      The file pointer.\n     \n    \n\n   \n\n   \n\n    buffer\n    \n\n     \n      The number of bytes to buffer. If buffer\n      is 0 then read operations are unbuffered.  This ensures that all reads\n      with fread() are completed before other processes are\n      allowed to write to that output stream.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   Returns 0 on success, or EOF if the request\n   cannot be honored.\n  \n \n\n\n \n  See Also\n  \n   stream_set_write_buffer() - Sets write file buffering on the given stream\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-write-buffer.php","title":"stream_set_write_buffer","description":"\n \n  stream_set_write_buffer\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_set_write_buffer &mdash; Sets write file buffering on the given stream\n\n \n \n  Description\n  \n   int stream_set_write_buffer\n    ( resource $stream\n   , int $buffer\n   )\n\n  \n   Sets the buffering for write operations on the given stream\n   to buffer bytes.\n  \n  \n   Output using fwrite() is normally buffered at\n   8K.  This means that if there are two processes wanting to write\n   to the same output stream (a file), each is paused after 8K of\n   data to allow the other to write.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The file pointer.\n      \n     \n\n    \n\n    \n\n     buffer\n     \n\n      \n       The number of bytes to buffer. If buffer\n       is 0 then write operations are unbuffered.  This ensures that all writes\n       with fwrite() are completed before other processes are\n       allowed to write to that output stream.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 0 on success, or EOF if the request cannot be honored.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_set_write_buffer() example\n    \n     The following example demonstrates how to use\n     stream_set_write_buffer() to create an unbuffered stream.\n    \n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen($file,&nbsp;\"w\");if&nbsp;($fp)&nbsp;{&nbsp;&nbsp;stream_set_write_buffer($fp,&nbsp;0);&nbsp;&nbsp;fwrite($fp,&nbsp;$output);&nbsp;&nbsp;fclose($fp);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   fopen() - Opens file or URL\n   fwrite() - Binary-safe file write\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-set-timeout.php","title":"stream_set_timeout","description":"\n \n  stream_set_timeout\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_set_timeout &mdash; Set timeout period on a stream\n\n \n \n  Description\n  \n   bool stream_set_timeout\n    ( resource $stream\n   , int $seconds\n   [, int $microseconds = 0\n  ] )\n\n  \n   Sets the timeout value on stream,\n   expressed in the sum of seconds and\n   microseconds. \n  \n  \n   When the stream times out, the &#039;timed_out&#039; key of the array returned by\n   stream_get_meta_data() is set to TRUE, although no\n   error\/warning is generated.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The target stream.\n      \n     \n\n    \n\n    \n\n     seconds\n     \n\n      \n       The seconds part of the timeout to be set.\n      \n     \n\n    \n\n    \n\n     microseconds\n     \n\n      \n       The microseconds part of the timeout to be set.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        As of PHP 4.3, this function can (potentially) work on any kind of\n        stream.  In PHP 4.3, socket based streams are still the only kind\n        supported in the PHP core, although streams from other extensions\n        may support this function.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_set_timeout() example\n     \n\n&lt;?php$fp&nbsp;=&nbsp;fsockopen(\"www.example.com\",&nbsp;80);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Unable&nbsp;to&nbsp;open\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"GET&nbsp;\/&nbsp;HTTP\/1.0\\r\\n\\r\\n\");&nbsp;&nbsp;&nbsp;&nbsp;stream_set_timeout($fp,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;fread($fp,&nbsp;2000);&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;stream_get_meta_data($fp);&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($info['timed_out'])&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Connection&nbsp;timed&nbsp;out!';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$res;&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    This function doesn&#039;t work with advanced operations like\n    stream_socket_recvfrom(), use\n    stream_select() with timeout parameter instead.\n   \n  \n  \n   This function was previously called as\n   set_socket_timeout() and later\n   socket_set_timeout() but this usage is deprecated.\n  \n \n\n\n \n  See Also\n  \n   fsockopen() - Open Internet or Unix domain socket connection\n   fopen() - Opens file or URL\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-accept.php","title":"stream_socket_accept","description":"\n \n  stream_socket_accept\n  (PHP 5)stream_socket_accept &mdash; Accept a connection on a socket created by stream_socket_server()\n\n \n \n \n  Description\n  \n   resource stream_socket_accept\n    ( resource $server_socket\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n   [, string &$peername\n  ]] )\n\n  \n   Accept a connection on a socket previously created by\n   stream_socket_server().\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     server_socket\n     \n\n      \n       The server socket to accept a connection from.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       Override the default socket accept timeout. Time should be given in\n       seconds.\n      \n     \n\n    \n\n    \n\n     peername\n     \n\n      \n       Will be set to the name (address) of the client which connected, if\n       included and available from the selected transport.\n      \n      Note: \n       \n        Can also be determined later using\n        stream_socket_get_name().\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a stream to the accepted socket connection or FALSE on failure.\n  \n \n\n\n \n  Notes\n  Warning\n   \n    This function should not be used with UDP server sockets. Instead, use\n    stream_socket_recvfrom() and\n    stream_socket_sendto().\n   \n \n \n\n \n \n  See Also\n  \n   \n    stream_socket_server() - Create an Internet or Unix domain server socket\n    stream_socket_get_name() - Retrieve the name of the local or remote sockets\n    stream_set_blocking() - Set blocking\/non-blocking mode on a stream\n    stream_set_timeout() - Set timeout period on a stream\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    fwrite() - Binary-safe file write\n    fclose() - Closes an open file pointer\n    feof() - Tests for end-of-file on a file pointer\n    cURL Functions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-get-name.php","title":"stream_socket_get_name","description":"\n \n  stream_socket_get_name\n  (PHP 5)stream_socket_get_name &mdash; Retrieve the name of the local or remote sockets\n\n \n \n \n  Description\n  \n   string stream_socket_get_name\n    ( resource $handle\n   , bool $want_peer\n   )\n\n  \n   Returns the local or remote name of a given socket connection.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The socket to get the name of.\n      \n     \n\n    \n\n    \n\n     want_peer\n     \n\n      \n       If set to TRUE the remote socket name will be returned, if set\n       to FALSE the local socket name will be returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The name of the socket.\n  \n \n\n\n \n  See Also\n  \n   \n    stream_socket_accept() - Accept a connection on a socket created by stream_socket_server\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-enable-crypto.php","title":"stream_socket_enable_crypto","description":"\n \n  stream_socket_enable_crypto\n  (PHP 5 &gt;= 5.1.0)stream_socket_enable_crypto &mdash; Turns encryption on\/off on an already connected socket\n\n \n \n \n  Description\n  \n   mixed stream_socket_enable_crypto\n    ( resource $stream\n   , bool $enable\n   [, int $crypto_type\n   [, resource $session_stream\n  ]] )\n\n\n  \n   Enable or disable encryption on the stream.\n  \n\n  \n   Once the crypto settings are established, cryptography can be turned\n   on and off dynamically by passing TRUE or FALSE in the\n   enable parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The stream resource.\n      \n     \n\n    \n\n    \n\n     enable\n     \n\n      \n       Enable\/disable cryptography on the stream.\n      \n     \n\n    \n\n    \n\n     crypto_type\n     \n\n      \n       Setup encryption on the stream.\n       Valid methods are\n       \n        STREAM_CRYPTO_METHOD_SSLv2_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv3_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv23_CLIENT\n        STREAM_CRYPTO_METHOD_TLS_CLIENT\n        STREAM_CRYPTO_METHOD_SSLv2_SERVER\n        STREAM_CRYPTO_METHOD_SSLv3_SERVER\n        STREAM_CRYPTO_METHOD_SSLv23_SERVER\n        STREAM_CRYPTO_METHOD_TLS_SERVER\n       \n      \n     \n\n    \n\n    \n\n     session_stream\n     \n\n      \n       Seed the stream with settings from session_stream.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success, FALSE if negotiation has failed or\n   0 if there isn&#039;t enough data and you should try again\n   (only for non-blocking sockets).\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 stream_socket_enable_crypto() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;stream_socket_client(\"tcp:\/\/myproto.example.com:31337\",&nbsp;$errno,&nbsp;$errstr,&nbsp;30);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"Unable&nbsp;to&nbsp;connect:&nbsp;$errstr&nbsp;($errno)\");}\/*&nbsp;Turn&nbsp;on&nbsp;encryption&nbsp;for&nbsp;login&nbsp;phase&nbsp;*\/stream_socket_enable_crypto($fp,&nbsp;true,&nbsp;STREAM_CRYPTO_METHOD_SSLv23_CLIENT);fwrite($fp,&nbsp;\"USER&nbsp;god\\r\\n\");fwrite($fp,&nbsp;\"PASS&nbsp;secret\\r\\n\");\/*&nbsp;Turn&nbsp;off&nbsp;encryption&nbsp;for&nbsp;the&nbsp;rest&nbsp;*\/stream_socket_enable_crypto($fp,&nbsp;false);while&nbsp;($motd&nbsp;=&nbsp;fgets($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$motd;}fclose($fp);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   \n    OpenSSL Functions\n    List of Supported Socket Transports\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-select.php","title":"stream_select","description":"\n \n  stream_select\n  (PHP 4 &gt;= 4.3.0, PHP 5)stream_select &mdash; Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec \n\n \n \n  Description\n  \n   int stream_select\n    ( array &$read\n   , array &$write\n   , array &$except\n   , int $tv_sec\n   [, int $tv_usec = 0\n  ] )\n\n  \n   The stream_select() function accepts arrays of streams and\n   waits for them to change status. Its operation is equivalent to that of\n   the socket_select() function except in that it acts on streams.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     read\n     \n\n      \n       The streams listed in the read array will be watched to\n       see if characters become available for reading (more precisely, to see if\n       a read will not block - in particular, a stream resource is also ready on\n       end-of-file, in which case an fread() will return\n       a zero length string).\n      \n     \n\n    \n\n    \n\n     write\n     \n\n      \n       The streams listed in the write array will be\n       watched to see if a write will not block.\n      \n     \n\n    \n\n    \n\n     except\n     \n\n      \n       The streams listed in the except array will be\n       watched for high priority exceptional (&quot;out-of-band&quot;) data arriving.\n      \n      Note: \n       \n        When stream_select() returns, the arrays\n        read, write and\n        except are modified to indicate which stream\n        resource(s) actually changed status.\n       \n      \n      \n       You do not need to pass every array to\n       stream_select(). You can leave it out and use an\n       empty array or NULL instead. Also do not forget that those arrays are\n       passed by reference and will be modified after\n       stream_select() returns.\n      \n     \n\n    \n\n    \n\n     tv_sec\n     \n\n      \n       The tv_sec and tv_usec\n       together form the timeout parameter,\n       tv_sec specifies the number of seconds while\n       tv_usec the number of microseconds.\n       The timeout is an upper bound on the amount of time\n       that stream_select() will wait before it returns.\n       If tv_sec and tv_usec are\n       both set to 0, stream_select() will\n       not wait for data - instead it will return immediately, indicating the\n       current status of the streams.\n      \n      \n       If tv_sec is NULL stream_select()\n       can block indefinitely, returning only when an event on one of the\n       watched streams occurs (or if a signal interrupts the system call).\n      \n      Warning\n       \n        Using a timeout value of 0 allows you to\n        instantaneously poll the status of the streams, however, it is NOT a\n        good idea to use a 0 timeout value in a loop as it\n        will cause your script to consume too much CPU time.\n       \n       \n        It is much better to specify a timeout value of a few seconds, although\n        if you need to be checking and running other code concurrently, using a\n        timeout value of at least 200000 microseconds will\n        help reduce the CPU usage of your script.\n       \n       \n        Remember that the timeout value is the maximum time that will elapse;\n        stream_select() will return as soon as the\n        requested streams are ready for use.\n       \n      \n     \n\n    \n\n    \n\n     tv_usec\n     \n\n      \n       See tv_sec description.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success stream_select() returns the number of\n   stream resources contained in the modified arrays, which may be zero if\n   the timeout expires before anything interesting happens. On error FALSE\n   is returned and a warning raised (this can happen if the system call is\n   interrupted by an incoming signal).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_select() Example\n    \n     This example checks to see if data has arrived for reading on either\n     $stream1 or $stream2.\n     Since the timeout value is 0 it will return\n     immediately:\n    \n    \n\n&lt;?php\/*&nbsp;Prepare&nbsp;the&nbsp;read&nbsp;array&nbsp;*\/$read&nbsp;&nbsp;&nbsp;=&nbsp;array($stream1,&nbsp;$stream2);$write&nbsp;&nbsp;=&nbsp;NULL;$except&nbsp;=&nbsp;NULL;if&nbsp;(false&nbsp;===&nbsp;($num_changed_streams&nbsp;=&nbsp;stream_select($read,&nbsp;$write,&nbsp;$except,&nbsp;0)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Error&nbsp;handling&nbsp;*\/}&nbsp;elseif&nbsp;($num_changed_streams&nbsp;&gt;&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;At&nbsp;least&nbsp;on&nbsp;one&nbsp;of&nbsp;the&nbsp;streams&nbsp;something&nbsp;interesting&nbsp;happened&nbsp;*\/}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Due to a limitation in the current Zend Engine it is not possible to pass a\n    constant modifier like NULL directly as a parameter to a function\n    which expects this parameter to be passed by reference. Instead use a\n    temporary variable or an expression with the leftmost member being a\n    temporary variable:\n    \n\n&lt;?php$e&nbsp;=&nbsp;NULL;stream_select($r,&nbsp;$w,&nbsp;$e,&nbsp;0);?&gt;\n\n\n   \n\n   \n  \n  Note: \n   \n   Be sure to use the === operator when checking for an\n   error. Since the stream_select() may return 0 the\n   comparison with == would evaluate to TRUE:\n   \n\n&lt;?php$e&nbsp;=&nbsp;NULL;if&nbsp;(false&nbsp;===&nbsp;stream_select($r,&nbsp;$w,&nbsp;$e,&nbsp;0))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"stream_select()&nbsp;failed\\n\";}?&gt;\n\n\n   \n\n   \n  \n  Note: \n   \n    If you read\/write to a stream returned in the arrays be aware that\n    they do not necessarily read\/write the full amount of data you have\n    requested. Be prepared to even only be able to read\/write a single\n    byte.\n   \n  \n  Note: \n   \n    Some streams (like zlib) cannot be selected by this\n    function.\n   \n  \n  Note: \n   \n    Windows compatibility: stream_select() used on a\n    pipe returned from proc_open() may cause data loss\n    under Windows 98.\n   \n   \n    Use of stream_select() on\n    file descriptors returned by proc_open() will fail\n    and return FALSE under Windows.\n   \n  \n \n\n\n \n  See Also\n  \n   stream_set_blocking() - Set blocking\/non-blocking mode on a stream\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-pair.php","title":"stream_socket_pair","description":"\n \n  stream_socket_pair\n  (PHP 5 &gt;= 5.1.0)stream_socket_pair &mdash; \n   Creates a pair of connected, indistinguishable socket streams\n  \n\n \n \n  Description\n  \n   array stream_socket_pair\n    ( int $domain\n   , int $type\n   , int $protocol\n   )\n\n  \n   stream_socket_pair() creates a pair of connected,\n   indistinguishable socket streams. This function is commonly used in IPC\n   (Inter-Process Communication).     \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     domain\n     \n\n      \n       The protocol family to be used: STREAM_PF_INET,\n       STREAM_PF_INET6 or\n       STREAM_PF_UNIX\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       The type of communication to be used:\n       STREAM_SOCK_DGRAM,\n       STREAM_SOCK_RAW,\n       STREAM_SOCK_RDM,\n       STREAM_SOCK_SEQPACKET or\n       STREAM_SOCK_STREAM\n      \n     \n\n    \n\n    \n\n     protocol\n     \n\n      \n       The protocol to be used: STREAM_IPPROTO_ICMP,\n       STREAM_IPPROTO_IP,\n       STREAM_IPPROTO_RAW,\n       STREAM_IPPROTO_TCP or\n       STREAM_IPPROTO_UDP       \n      \n     \n\n    \n\n   \n\n  \n  Note: \n   \n    Please consult the Streams constant\n     list for further details on each constant.\n   \n  \n \n\n\n \n  Return Values\n  \n   Returns an array with the two socket resources on success, or\n   FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function is now available on Windows platforms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A stream_socket_pair() example\n    \n     This example shows the basic usage of\n     stream_socket_pair() in Inter-Process Comunication.\n    \n    \n\n&lt;?php$sockets&nbsp;=&nbsp;stream_socket_pair(STREAM_PF_UNIX,&nbsp;STREAM_SOCK_STREAM,&nbsp;STREAM_IPPROTO_IP);$pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;pcntl_fork();if&nbsp;($pid&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die('could&nbsp;not&nbsp;fork');}&nbsp;else&nbsp;if&nbsp;($pid)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;parent&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;fclose($sockets[0]);&nbsp;&nbsp;&nbsp;&nbsp;fwrite($sockets[1],&nbsp;\"child&nbsp;PID:&nbsp;$pid\\n\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fgets($sockets[1]);&nbsp;&nbsp;&nbsp;&nbsp;fclose($sockets[1]);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;child&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;fclose($sockets[1]);&nbsp;&nbsp;&nbsp;&nbsp;fwrite($sockets[0],&nbsp;\"message&nbsp;from&nbsp;child\\n\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fgets($sockets[0]);&nbsp;&nbsp;&nbsp;&nbsp;fclose($sockets[0]);}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nchild PID: 1378\nmessage from child\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-client.php","title":"stream_socket_client","description":"\n \n  stream_socket_client\n  (PHP 5)stream_socket_client &mdash; Open Internet or Unix domain socket connection\n\n \n \n \n  Description\n  \n   resource stream_socket_client\n    ( string $remote_socket\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n   [, int $flags = STREAM_CLIENT_CONNECT\n   [, resource $context\n  ]]]]] )\n\n  \n   Initiates a stream or datagram connection to the destination specified\n   by remote_socket.  The type of socket created\n   is determined by the transport specified using standard URL formatting:\n   transport:\/\/target.  For Internet Domain sockets\n   (AF_INET) such as TCP and UDP, the target portion\n   of the remote_socket parameter should consist of\n   a hostname or IP address followed by a colon and a port number.  For Unix\n   domain sockets, the target portion should point\n   to the socket file on the filesystem.\n  \n  Note: \n   \n    The stream will by default be opened in blocking mode.  You can\n    switch it to non-blocking mode by using\n    stream_set_blocking().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     remote_socket\n     \n\n      \n       Address to the socket to connect to.\n      \n     \n\n    \n\n    \n\n     errno\n     \n\n      \n       Will be set to the system level error number if connection fails.\n      \n     \n\n    \n\n    \n\n     errstr\n     \n\n      \n       Will be set to the system level error message if the connection fails.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       Number of seconds until the connect() system call\n       should timeout.\n       Note: \n        \n         This parameter only applies when not making asynchronous\n         connection attempts.\n        \n       \n       Note: \n        \n         To set a timeout for reading\/writing data over the socket, use the\n         stream_set_timeout(), as the\n         timeout only applies while making connecting\n         the socket.\n        \n       \n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       Bitmask field which may be set to any combination of connection flags.\n       Currently the select of connection flags is limited to\n       STREAM_CLIENT_CONNECT (default),\n       STREAM_CLIENT_ASYNC_CONNECT and\n       STREAM_CLIENT_PERSISTENT.\n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n       A valid context resource created with stream_context_create().\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success a stream resource is returned which may\n   be used together with the other file functions (such as\n   fgets(), fgetss(),\n   fwrite(), fclose(), and\n   feof()), FALSE on failure.\n  \n \n\n \n \n  Errors\/Exceptions\n  \n   On failure the errno and\n   errstr arguments will be populated with the actual\n   system level error that occurred in the system-level\n   connect() call. If the value returned in\n   errno is 0 and the\n   function returned FALSE, it is an indication that the error\n   occurred before the connect() call. This is\n   most likely due to a problem initializing the socket. Note that\n   the errno and\n   errstr arguments will always be passed by\n   reference.\n  \n \n\n \n \n \n  Examples\n  \n   \n    Example #1 stream_socket_client() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;stream_socket_client(\"tcp:\/\/www.example.com:80\",&nbsp;$errno,&nbsp;$errstr,&nbsp;30);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$errstr&nbsp;($errno)&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"GET&nbsp;\/&nbsp;HTTP\/1.0\\r\\nHost:&nbsp;www.example.com\\r\\nAccept:&nbsp;*\/*\\r\\n\\r\\n\");&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fgets($fp,&nbsp;1024);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);}?&gt;\n\n\n    \n\n   \n   \n    Example #2 Using UDP connection\n    \n     Retrieving the day and time from the UDP service &quot;daytime&quot; (port 13)\n     on localhost.\n    \n    \n\n&lt;?php$fp&nbsp;=&nbsp;stream_socket_client(\"udp:\/\/127.0.0.1:13\",&nbsp;$errno,&nbsp;$errstr);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"ERROR:&nbsp;$errno&nbsp;-&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"\\n\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fread($fp,&nbsp;26);&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n     UDP sockets will sometimes appear to have opened without an error,\n     even if the remote host is unreachable.  The error will only\n     become apparent when you read or write data to\/from the socket.\n     The reason for this is because UDP is a &quot;connectionless&quot; protocol,\n     which means that the operating system does not try to establish\n     a link for the socket until it actually needs to send or receive data.\n   \n  \n  Note: When specifying a numerical IPv6 address\n(e.g. fe80::1), you must enclose the IP in square\nbrackets\u2014for example, tcp:\/\/[fe80::1]:80.\n  Note: \n   \n    Depending on the environment, the Unix domain or the optional\n    connect timeout may not be available.  A list of available\n    transports can be retrieved using stream_get_transports().\n    See List of Supported Socket Transports for a list of built in transports.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    stream_socket_server() - Create an Internet or Unix domain server socket\n    stream_set_blocking() - Set blocking\/non-blocking mode on a stream\n    stream_set_timeout() - Set timeout period on a stream\n    stream_select() - Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    fwrite() - Binary-safe file write\n    fclose() - Closes an open file pointer\n    feof() - Tests for end-of-file on a file pointer\n    cURL Functions\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-sendto.php","title":"stream_socket_sendto","description":"\n \n  stream_socket_sendto\n  (PHP 5)stream_socket_sendto &mdash; Sends a message to a socket, whether it is connected or not \n\n \n \n  Description\n  \n   int stream_socket_sendto\n    ( resource $socket\n   , string $data\n   [, int $flags = 0\n   [, string $address\n  ]] )\n\n  \n   Sends the specified data through the\n   socket.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     socket\n     \n\n      \n       The socket to send data to.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The data to be sent.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The value of flags can be any combination\n       of the following:\n       \n        possible values for flags\n        \n         \n          \n           STREAM_OOB\n           \n            Process OOB (out-of-band) data.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     address\n     \n\n      \n       The address specified when the socket stream was created will be used\n       unless an alternate address is specified in address.\n      \n      \n       If specified, it must be in dotted quad (or [ipv6]) format.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a result code, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_socket_sendto() Example\n    \n\n&lt;?php\/*&nbsp;Open&nbsp;a&nbsp;socket&nbsp;to&nbsp;port&nbsp;1234&nbsp;on&nbsp;localhost&nbsp;*\/$socket&nbsp;=&nbsp;stream_socket_client('tcp:\/\/127.0.0.1:1234');\/*&nbsp;Send&nbsp;ordinary&nbsp;data&nbsp;via&nbsp;ordinary&nbsp;channels.&nbsp;*\/fwrite($socket,&nbsp;\"Normal&nbsp;data&nbsp;transmit.\");\/*&nbsp;Send&nbsp;more&nbsp;data&nbsp;out&nbsp;of&nbsp;band.&nbsp;*\/stream_socket_sendto($socket,&nbsp;\"Out&nbsp;of&nbsp;Band&nbsp;data.\",&nbsp;STREAM_OOB);\/*&nbsp;Close&nbsp;it&nbsp;up&nbsp;*\/fclose($socket);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   stream_socket_recvfrom() - Receives data from a socket, connected or not\n   stream_socket_client() - Open Internet or Unix domain socket connection\n   stream_socket_server() - Create an Internet or Unix domain server socket\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-recvfrom.php","title":"stream_socket_recvfrom","description":"\n \n  stream_socket_recvfrom\n  (PHP 5)stream_socket_recvfrom &mdash; Receives data from a socket, connected or not \n\n \n \n  Description\n  \n   string stream_socket_recvfrom\n    ( resource $socket\n   , int $length\n   [, int $flags = 0\n   [, string &$address\n  ]] )\n\n  \n   stream_socket_recvfrom() accepts\n   data from a remote socket up to length bytes.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     socket\n     \n\n      \n       The remote socket.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of bytes to receive from the socket.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The value of flags can be any combination\n       of the following:\n       \n        Possible values for flags\n        \n         \n          \n           STREAM_OOB\n           \n            Process OOB (out-of-band) data.\n           \n          \n\n          \n           STREAM_PEEK\n           \n            Retrieve data from the socket, but do not consume the buffer.\n            Subsequent calls to fread() or\n            stream_socket_recvfrom() will see\n            the same data.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     address\n     \n\n      \n       If address is provided it will be populated with\n       the address of the remote socket.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the read data, as a string\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stream_socket_recvfrom() example\n    \n\n&lt;?php\/*&nbsp;Open&nbsp;a&nbsp;server&nbsp;socket&nbsp;to&nbsp;port&nbsp;1234&nbsp;on&nbsp;localhost&nbsp;*\/$server&nbsp;=&nbsp;stream_socket_server('tcp:\/\/127.0.0.1:1234');\/*&nbsp;Accept&nbsp;a&nbsp;connection&nbsp;*\/$socket&nbsp;=&nbsp;stream_socket_accept($server);\/*&nbsp;Grab&nbsp;a&nbsp;packet&nbsp;(1500&nbsp;is&nbsp;a&nbsp;typical&nbsp;MTU&nbsp;size)&nbsp;of&nbsp;OOB&nbsp;data&nbsp;*\/echo&nbsp;\"Received&nbsp;Out-Of-Band:&nbsp;'\"&nbsp;.&nbsp;stream_socket_recvfrom($socket,&nbsp;1500,&nbsp;STREAM_OOB)&nbsp;.&nbsp;\"'\\n\";\/*&nbsp;Take&nbsp;a&nbsp;peek&nbsp;at&nbsp;the&nbsp;normal&nbsp;in-band&nbsp;data,&nbsp;but&nbsp;don't&nbsp;comsume&nbsp;it.&nbsp;*\/echo&nbsp;\"Data:&nbsp;'\"&nbsp;.&nbsp;stream_socket_recvfrom($socket,&nbsp;1500,&nbsp;STREAM_PEEK)&nbsp;.&nbsp;\"'\\n\";\/*&nbsp;Get&nbsp;the&nbsp;exact&nbsp;same&nbsp;packet&nbsp;again,&nbsp;but&nbsp;remove&nbsp;it&nbsp;from&nbsp;the&nbsp;buffer&nbsp;this&nbsp;time.&nbsp;*\/echo&nbsp;\"Data:&nbsp;'\"&nbsp;.&nbsp;stream_socket_recvfrom($socket,&nbsp;1500)&nbsp;.&nbsp;\"'\\n\";\/*&nbsp;Close&nbsp;it&nbsp;up&nbsp;*\/fclose($socket);fclose($server);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    If a message received is longer than the length\n    parameter, excess bytes may be discarded depending on the type of socket\n    the message is received from (such as UDP).\n   \n  \n  Note: \n   \n    Calls to stream_socket_recvfrom() on socket-based\n    streams, after calls to buffer-based stream functions (like\n    fread() or stream_get_line()) read\n    data directly from the socket and bypass the stream buffer.\n    \n  \n \n\n\n \n  See Also\n  \n   stream_socket_sendto() - Sends a message to a socket, whether it is connected or not\n   stream_socket_client() - Open Internet or Unix domain socket connection\n   stream_socket_server() - Create an Internet or Unix domain server socket\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-shutdown.php","title":"stream_socket_shutdown","description":"\n \n  stream_socket_shutdown\n  (PHP 5 &gt;= 5.2.1)stream_socket_shutdown &mdash; Shutdown a full-duplex connection\n\n \n \n  Description\n  \n   bool stream_socket_shutdown\n    ( resource $stream\n   , int $how\n   )\n\n  \n   Shutdowns (partially or not) a full-duplex connection.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       An open stream (opened with stream_socket_client(),\n       for example)\n      \n     \n\n    \n\n    \n\n     how\n     \n\n      \n       One of the following constants: STREAM_SHUT_RD\n       (disable further receptions), STREAM_SHUT_WR\n       (disable further transmissions) or\n       STREAM_SHUT_RDWR (disable further receptions and\n       transmissions).\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A stream_socket_shutdown() example\n    \n\n&lt;?php$server&nbsp;=&nbsp;stream_socket_server('tcp:\/\/127.0.0.1:1337');$client&nbsp;=&nbsp;stream_socket_client('tcp:\/\/127.0.0.1:1337');var_dump(fputs($client,&nbsp;\"hello\"));stream_socket_shutdown($client,&nbsp;STREAM_SHUT_WR);var_dump(fputs($client,&nbsp;\"hello\"));&nbsp;\/\/&nbsp;doesn't&nbsp;work&nbsp;now?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nint(5)\n\nNotice: fputs(): send of 5 bytes failed with errno=32 Broken pipe in test.php on line 9\nint(0)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    fclose() - Closes an open file pointer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-supports-lock.php","title":"stream_supports_lock","description":"\n \n  stream_supports_lock\n  (PHP 5 &gt;= 5.3.0)stream_supports_lock &mdash; Tells whether the stream supports locking.\n\n \n \n \n  Description\n  \n   bool stream_supports_lock\n    ( resource $stream\n   )\n\n  \n   Tells whether the stream supports locking through \n   flock().\n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     stream\n     \n\n      \n       The stream to check.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  See Also\n  \n   \n    flock() - Portable advisory file locking\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-socket-server.php","title":"stream_socket_server","description":"\n \n  stream_socket_server\n  (PHP 5)stream_socket_server &mdash; Create an Internet or Unix domain server socket\n\n \n \n  Description\n  \n   resource stream_socket_server\n    ( string $local_socket\n   [, int &$errno\n   [, string &$errstr\n   [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN\n   [, resource $context\n  ]]]] )\n\n  \n   Creates a stream or datagram socket on the specified\n   local_socket.    \n  \n  \n   This function only creates a socket, to begin accepting connections\n   use stream_socket_accept().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     local_socket\n     \n\n      \n       The type of socket created is determined by the transport specified\n       using standard URL formatting: transport:\/\/target.\n      \n      \n       For Internet Domain sockets (AF_INET) such as TCP and UDP, the\n       target portion of the \n       remote_socket parameter should consist of a\n       hostname or IP address followed by a colon and a port number.  For\n       Unix domain sockets, the target portion should\n       point to the socket file on the filesystem.\n      \n      \n       Depending on the environment, Unix domain sockets may not be available.\n       A list of available transports can be retrieved using\n       stream_get_transports(). See\n       List of Supported Socket Transports for a list of bulitin transports.\n      \n     \n\n    \n\n    \n\n     errno\n     \n\n      \n       If the optional errno and errstr\n       arguments are present they will be set to indicate the actual system\n       level error that occurred in the system-level socket(),\n       bind(), and listen() calls. If\n       the value returned in errno is \n       0 and the function returned FALSE, it is an\n       indication that the error occurred before the bind()\n       call. This is most likely due to a problem initializing the socket. \n       Note that the errno and\n       errstr arguments will always be passed by reference.\n      \n     \n\n    \n\n    \n\n     errstr\n     \n\n      \n       See errno description.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       A bitmask field which may be set to any combination of socket creation\n       flags.\n      \n      Note: \n       \n        For UDP sockets, you must use STREAM_SERVER_BIND as\n        the flags parameter.\n       \n      \n     \n\n    \n\n    \n\n     context\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the created stream, or FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using TCP server sockets\n    \n\n&lt;?php$socket&nbsp;=&nbsp;stream_socket_server(\"tcp:\/\/0.0.0.0:8000\",&nbsp;$errno,&nbsp;$errstr);if&nbsp;(!$socket)&nbsp;{&nbsp;&nbsp;echo&nbsp;\"$errstr&nbsp;($errno)&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;while&nbsp;($conn&nbsp;=&nbsp;stream_socket_accept($socket))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fwrite($conn,&nbsp;'The&nbsp;local&nbsp;time&nbsp;is&nbsp;'&nbsp;.&nbsp;date('n\/j\/Y&nbsp;g:i&nbsp;a')&nbsp;.&nbsp;\"\\n\");&nbsp;&nbsp;&nbsp;&nbsp;fclose($conn);&nbsp;&nbsp;}&nbsp;&nbsp;fclose($socket);}?&gt;\n\n\n    \n\n   \n  \n  \n   The example below shows how to act as a time server which can respond\n   to time queries as shown in an example on stream_socket_client().\n   Note: \n    \n     Most systems require root access to create a server socket on a port\n     below 1024.\n    \n   \n   \n    Example #2 Using UDP server sockets\n    \n\n&lt;?php$socket&nbsp;=&nbsp;stream_socket_server(\"udp:\/\/127.0.0.1:1113\",&nbsp;$errno,&nbsp;$errstr,&nbsp;STREAM_SERVER_BIND);if&nbsp;(!$socket)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die(\"$errstr&nbsp;($errno)\");}do&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$pkt&nbsp;=&nbsp;stream_socket_recvfrom($socket,&nbsp;1,&nbsp;0,&nbsp;$peer);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$peer\\n\";&nbsp;&nbsp;&nbsp;&nbsp;stream_socket_sendto($socket,&nbsp;date(\"D&nbsp;M&nbsp;j&nbsp;H:i:s&nbsp;Y\\r\\n\"),&nbsp;0,&nbsp;$peer);}&nbsp;while&nbsp;($pkt&nbsp;!==&nbsp;false);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: When specifying a numerical IPv6 address\n(e.g. fe80::1), you must enclose the IP in square\nbrackets\u2014for example, tcp:\/\/[fe80::1]:80.\n \n\n\n \n  See Also\n  \n   stream_socket_client() - Open Internet or Unix domain socket connection\n   stream_set_blocking() - Set blocking\/non-blocking mode on a stream\n   stream_set_timeout() - Set timeout period on a stream\n   fgets() - Gets line from file pointer\n   fgetss() - Gets line from file pointer and strip HTML tags\n   fwrite() - Binary-safe file write\n   fclose() - Closes an open file pointer\n   feof() - Tests for end-of-file on a file pointer\n   Curl extension\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-unregister.php","title":"stream_wrapper_unregister","description":"\n \n  stream_wrapper_unregister\n  (PHP 5 &gt;= 5.1.0)stream_wrapper_unregister &mdash; Unregister a URL wrapper\n\n \n \n  Description\n  \n   bool stream_wrapper_unregister\n    ( string $protocol\n   )\n\n  \n   Allows you to disable an already defined stream wrapper. Once the wrapper\n   has been disabled you may override it with a user-defined wrapper using\n   stream_wrapper_register() or reenable it later on with\n   stream_wrapper_restore().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     protocol\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-restore.php","title":"stream_wrapper_restore","description":"\n \n  stream_wrapper_restore\n  (PHP 5 &gt;= 5.1.0)stream_wrapper_restore &mdash; Restores a previously unregistered built-in wrapper\n\n \n \n  Description\n  \n   bool stream_wrapper_restore\n    ( string $protocol\n   )\n\n  \n   Restores a built-in wrapper previously unregistered with\n   stream_wrapper_unregister().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     protocol\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongeturl.php","title":"swf_actiongeturl","description":"\n \n  swf_actiongeturl\n  (PHP 4)swf_actiongeturl &mdash; Get a URL from a Shockwave Flash movie\n\n \n \n \n  Description\n  \n   void swf_actiongeturl\n    ( string $url\n   , string $target\n   )\n\n  \n   Gets the URL specified by the parameter url with\n   the given  target.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       The URL, as a string.\n      \n     \n\n    \n\n    \n\n     target\n     \n\n      \n       The target, as a string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongotoframe.php","title":"swf_actiongotoframe","description":"\n \n  swf_actiongotoframe\n  (PHP 4)swf_actiongotoframe &mdash; Play a frame and then stop\n\n \n \n \n  Description\n  \n   void swf_actiongotoframe\n    ( int $framenumber\n   )\n\n  \n   The swf_actiongotoframe() function will go to\n   the frame specified by framenumber, play\n   it, and then stop.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     framenumber\n     \n\n      \n       The frame number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiongotolabel.php","title":"swf_actiongotolabel","description":"\n \n  swf_actiongotolabel\n  (PHP 4)swf_actiongotolabel &mdash; Display a frame with the specified label\n\n \n \n \n  Description\n  \n   void swf_actiongotolabel\n    ( string $label\n   )\n\n  \n   The swf_actiongotolabel() function displays\n   the frame with the label given by the\n   label parameter and then stops.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     label\n     \n\n      \n       The frame label.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionnextframe.php","title":"swf_actionnextframe","description":"\n \n  swf_actionnextframe\n  (PHP 4)swf_actionnextframe &mdash; Go forward one frame\n\n \n\n \n  Description\n  \n   void swf_actionnextframe\n    ( void\n   )\n\n  \n   Go forward one frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_actionprevframe() - Go backwards one frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stream-wrapper-register.php","title":"stream_wrapper_register","description":"\n \n  stream_wrapper_register\n  (PHP 4 &gt;= 4.3.2, PHP 5)stream_wrapper_register &mdash; Register a URL wrapper implemented as a PHP class\n\n \n \n  Description\n  \n   bool stream_wrapper_register\n    ( string $protocol\n   , string $classname\n   [, int $flags  = 0\n  ] )\n\n  \n   Allows you to implement your own protocol handlers and streams for use\n   with all the other filesystem functions (such as fopen(),\n   fread() etc.).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     protocol\n     \n\n      \n       The wrapper name to be registered.\n      \n     \n\n    \n\n    \n\n     classname\n     \n\n      \n       The classname which implements the protocol.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       Should be set to STREAM_IS_URL if\n       protocol is a URL protocol. Default is 0, local\n       stream.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n  \n   stream_wrapper_register() will return FALSE if the\n   protocol already has a handler.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.4\n       \n        Added the flags parameter.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n\n \n  Examples\n  \n   \n    Example #1 How to register a stream wrapper\n    \n\n&lt;?php$existed&nbsp;=&nbsp;in_array(\"var\",&nbsp;stream_get_wrappers());if&nbsp;($existed)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;stream_wrapper_unregister(\"var\");}stream_wrapper_register(\"var\",&nbsp;\"VariableStream\");$myvar&nbsp;=&nbsp;\"\";$fp&nbsp;=&nbsp;fopen(\"var:\/\/myvar\",&nbsp;\"r+\");fwrite($fp,&nbsp;\"line1\\n\");fwrite($fp,&nbsp;\"line2\\n\");fwrite($fp,&nbsp;\"line3\\n\");rewind($fp);while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fgets($fp);}fclose($fp);var_dump($myvar);if&nbsp;($existed)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;stream_wrapper_restore(\"var\");}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nline1\nline2\nline3\nstring(18) &quot;line1\nline2\nline3\n&quot;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    The streamWrapper prototype class\n    Example class registered as stream wrapper\n    stream_wrapper_unregister() - Unregister a URL wrapper\n    stream_wrapper_restore() - Restores a previously unregistered built-in wrapper\n    stream_get_wrappers() - Retrieve list of registered streams\n   \n  \n \n\n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionplay.php","title":"swf_actionplay","description":"\n \n  swf_actionplay\n  (PHP 4)swf_actionplay &mdash; Start playing the flash movie from the current frame\n\n \n\n \n  Description\n  \n   void swf_actionplay\n    ( void\n   )\n\n  \n   Start playing the flash movie from the current frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_actionstop() - Stop playing the flash movie at the current frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionsettarget.php","title":"swf_actionsettarget","description":"\n \n  swf_actionsettarget\n  (PHP 4)swf_actionsettarget &mdash; Set the context for actions\n\n \n \n \n  Description\n  \n   void swf_actionsettarget\n    ( string $target\n   )\n\n  \n   Sets the context for all actions. You can use this to control other flash\n   movies that are currently playing.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     target\n     \n\n      \n       The target, as a string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionprevframe.php","title":"swf_actionprevframe","description":"\n \n  swf_actionprevframe\n  (PHP 4)swf_actionprevframe &mdash; Go backwards one frame\n\n \n\n \n  Description\n  \n   void swf_actionprevframe\n    ( void\n   )\n\n  \n   Go backwards one frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_actionnextframe() - Go forward one frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionstop.php","title":"swf_actionstop","description":"\n \n  swf_actionstop\n  (PHP 4)swf_actionstop &mdash; Stop playing the flash movie at the current frame\n\n \n\n \n  Description\n  \n   void swf_actionstop\n    ( void\n   )\n\n  \n   Stop playing the flash movie at the current frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_actionplay() - Start playing the flash movie from the current frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actiontogglequality.php","title":"swf_actiontogglequality","description":"\n \n  swf_actiontogglequality\n  (PHP 4)swf_actiontogglequality &mdash; Toggle between low and high quality\n\n \n \n \n  Description\n  \n   void swf_actiontogglequality\n    ( void\n   )\n\n  \n   Toggle the flash movie between high and low quality.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-actionwaitforframe.php","title":"swf_actionwaitforframe","description":"\n \n  swf_actionwaitforframe\n  (PHP 4)swf_actionwaitforframe &mdash; Skip actions if a frame has not been loaded\n\n \n \n \n  Description\n  \n   void swf_actionwaitforframe\n    ( int $framenumber\n   , int $skipcount\n   )\n\n  \n   The swf_actionwaitforframe() function will\n   check to see if the frame, specified by the\n   framenumber parameter has been loaded, if\n   not it will skip the number of actions specified by the\n   skipcount parameter.  This can be useful\n   for &quot;Loading...&quot; type animations.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     framenumber\n     \n\n      \n       The frame number.\n      \n     \n\n    \n\n    \n\n     skipcount\n     \n\n      \n       The number of actions to skip.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-addcolor.php","title":"swf_addcolor","description":"\n \n  swf_addcolor\n  (PHP 4)swf_addcolor &mdash; Set the global add color to the rgba value specified\n\n \n \n \n  Description\n  \n   void swf_addcolor\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )\n\n  \n   Sets the global add color to the specified color. This color is then\n   implicitly used by the swf_placeobject(),\n   swf_modifyobject() and \n   swf_addbuttonrecord() functions.\n  \n  \n   The color of the object will be add by the given values when the object is\n   written to the screen.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     r\n     \n\n      \n       Red value\n      \n     \n\n    \n\n    \n\n     g\n     \n\n      \n       Green value\n      \n     \n\n    \n\n    \n\n     b\n     \n\n      \n       Blue value\n      \n     \n\n    \n\n    \n\n     a\n     \n\n      \n       Alpha value\n      \n     \n\n    \n\n   \n\n  \n  \n   These parameters can be either positive or negative.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-addbuttonrecord.php","title":"swf_addbuttonrecord","description":"\n \n  swf_addbuttonrecord\n  (PHP 4)swf_addbuttonrecord &mdash; Controls location, appearance and active area of the current button\n\n \n \n \n  Description\n  \n   void swf_addbuttonrecord\n    ( int $states\n   , int $shapeid\n   , int $depth\n   )\n\n  \n   Allow you to define the specifics of using a button.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     states\n     \n\n      \n       Defines what states the button can have, these can be any or all of\n       the following constants: BSHitTest, \n       BSDown, BSOver or\n       BSUp.   \n      \n     \n\n    \n\n    \n\n     shapeid\n     \n\n      \n       The second parameter, the shapeid is the look\n       of the button, this is usually the object id of the shape of the\n       button. \n      \n     \n\n    \n\n    \n\n     depth\n     \n\n      \n       This parameter is the placement of the button in the current frame.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 swf_addbuttonrecord() example\n    \n\n&lt;?phpswf_startButton($objid,&nbsp;TYPE_MENUBUTTON);swf_addButtonRecord(BSDown|BSOver,&nbsp;$buttonImageId,&nbsp;340);swf_onCondition(MenuEnter);swf_actionGetUrl(\"http:\/\/www.example.com\",&nbsp;\"_level1\");swf_onCondition(MenuExit);swf_actionGetUrl(\"\",&nbsp;\"_level1\");swf_endButton();?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-closefile.php","title":"swf_closefile","description":"\n \n  swf_closefile\n  (PHP 4)swf_closefile &mdash; Close the current Shockwave Flash file\n\n \n\n \n  Description\n  \n   void swf_closefile\n    ([ int $return_file\n  ] )\n\n  \n   Close a file that was opened by the\n   swf_openfile() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     return_file\n     \n\n      \n       If set then the contents of the SWF file are returned from the\n       function.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Creating a simple flash file based on user input and outputting it\n     and saving it in a database\n    \n    \n\n&lt;?php\/\/&nbsp;The&nbsp;$text&nbsp;variable&nbsp;is&nbsp;submitted&nbsp;by&nbsp;the\/\/&nbsp;user\/\/&nbsp;Global&nbsp;variables&nbsp;for&nbsp;database\/\/&nbsp;access&nbsp;(used&nbsp;in&nbsp;the&nbsp;swf_savedata()&nbsp;function)$DBHOST&nbsp;=&nbsp;\"localhost\";$DBUSER&nbsp;=&nbsp;\"sterling\";$DBPASS&nbsp;=&nbsp;\"secret\";swf_openfile(\"php:\/\/stdout\",&nbsp;256,&nbsp;256,&nbsp;30,&nbsp;1,&nbsp;1,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;swf_definefont(10,&nbsp;\"Ligon-Bold\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf_fontsize(12);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf_fontslant(10);&nbsp;&nbsp;&nbsp;&nbsp;swf_definetext(11,&nbsp;$text,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;swf_pushmatrix();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf_translate(-50,&nbsp;80,&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf_placeobject(11,&nbsp;60);&nbsp;&nbsp;&nbsp;&nbsp;swf_popmatrix();&nbsp;&nbsp;&nbsp;&nbsp;swf_showframe();&nbsp;&nbsp;&nbsp;&nbsp;swf_startdoaction();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf_actionstop();&nbsp;&nbsp;&nbsp;&nbsp;swf_enddoaction();$data&nbsp;=&nbsp;swf_closefile(1);$data&nbsp;?&nbsp;&nbsp;swf_savedata($data)&nbsp;:&nbsp;&nbsp;die(\"Error&nbsp;could&nbsp;not&nbsp;save&nbsp;SWF&nbsp;file\");\/\/&nbsp;void&nbsp;swf_savedata(string&nbsp;data)\/\/&nbsp;Save&nbsp;the&nbsp;generated&nbsp;file&nbsp;a&nbsp;database\/\/&nbsp;for&nbsp;later&nbsp;retrievalfunction&nbsp;swf_savedata($data){&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$DBHOST,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$DBUSER,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$DBPASS;&nbsp;&nbsp;&nbsp;&nbsp;$dbh&nbsp;=&nbsp;@mysql_connect($DBHOST,&nbsp;$DBUSER,&nbsp;$DBPASS);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$dbh)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die&nbsp;(sprintf(\"Error&nbsp;[%d]:&nbsp;%s\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql_errno(),&nbsp;mysql_error()));&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$stmt&nbsp;=&nbsp;\"INSERT&nbsp;INTO&nbsp;swf_files&nbsp;(file)&nbsp;VALUES&nbsp;('$data')\";&nbsp;&nbsp;&nbsp;&nbsp;$sth&nbsp;=&nbsp;@mysql_query($stmt,&nbsp;$dbh);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$sth)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die&nbsp;(sprintf(\"Error&nbsp;[%d]:&nbsp;%s\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql_errno(),&nbsp;mysql_error()));&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@mysql_free_result($sth);&nbsp;&nbsp;&nbsp;&nbsp;@mysql_close($dbh);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    swf_openfile() - Open a new Shockwave Flash file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definebitmap.php","title":"swf_definebitmap","description":"\n \n  swf_definebitmap\n  (PHP 4)swf_definebitmap &mdash; Define a bitmap\n\n \n \n \n  Description\n  \n   void swf_definebitmap\n    ( int $objid\n   , string $image_name\n   )\n\n  \n   The swf_definebitmap() function defines a\n   bitmap given an image.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       An SWF object id.\n      \n     \n\n    \n\n    \n\n     image_name\n     \n\n      \n       A GIF, JPEG, RGB or FI image. The image will be converted into a Flash\n       JPEG or Flash color map format.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-defineline.php","title":"swf_defineline","description":"\n \n  swf_defineline\n  (PHP 4)swf_defineline &mdash; Define a line\n\n \n \n \n  Description\n  \n   void swf_defineline\n    ( int $objid\n   , float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $width\n   )\n\n  \n   Defines a line.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     x1\n     \n\n      \n       x-coordinate of start point.\n      \n     \n\n    \n\n    \n\n     y1\n     \n\n      \n       y-coordinate of start point.\n      \n     \n\n    \n\n    \n\n     x2\n     \n\n      \n       x-coordinate of end point.\n      \n     \n\n    \n\n    \n\n     y2\n     \n\n      \n       y-coordinate of end point.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       The line width.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definepoly.php","title":"swf_definepoly","description":"\n \n  swf_definepoly\n  (PHP 4)swf_definepoly &mdash; Define a polygon\n\n \n \n \n  Description\n  \n   void swf_definepoly\n    ( int $objid\n   , array $coords\n   , int $npoints\n   , float $width\n   )\n\n  \n   Defines a polygon given an array of x, y coordinates.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     coords\n     \n\n      \n       An array of x, y coordinates.\n      \n     \n\n    \n\n    \n\n     npoints\n     \n\n      \n       The number of overall points that are contained in the array given by\n       coords\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       The width of the polygon&#039;s border, if set to 0.0 the polygon is\n       filled.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definefont.php","title":"swf_definefont","description":"\n \n  swf_definefont\n  (PHP 4)swf_definefont &mdash; Defines a font\n\n \n\n \n  Description\n  \n   void swf_definefont\n    ( int $fontid\n   , string $fontname\n   )\n\n  \n   The swf_definefont() function defines a font parameter\n   and gives it the specified id.  It then sets the font given by \n   fontname to the current font.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fontid\n     \n\n      \n       The id to be given to the font.\n      \n     \n\n    \n\n    \n\n     fontname\n     \n\n      \n       The font so be set as current font.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_definetext() - Define a text string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definerect.php","title":"swf_definerect","description":"\n \n  swf_definerect\n  (PHP 4)swf_definerect &mdash; Define a rectangle\n\n \n \n \n  Description\n  \n   void swf_definerect\n    ( int $objid\n   , float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $width\n   )\n\n  \n   Defines a rectangle with an upper left hand coordinate and a lower right\n   hand coordinate.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     x1\n     \n\n      \n       x-coordinate of upper left point.\n      \n     \n\n    \n\n    \n\n     y1\n     \n\n      \n       y-coordinate of upper left point.\n      \n     \n\n    \n\n    \n\n     x2\n     \n\n      \n       x-coordinate of lower right point.\n      \n     \n\n    \n\n    \n\n     y2\n     \n\n      \n       y-coordinate of lower right point.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       Width of the rectangles border, if the width is 0.0 then the rectangle\n       is filled.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-definetext.php","title":"swf_definetext","description":"\n \n  swf_definetext\n  (PHP 4)swf_definetext &mdash; Define a text string\n\n \n\n \n  Description\n  \n   void swf_definetext\n    ( int $objid\n   , string $str\n   , int $docenter\n   )\n\n  \n   Defines a text string using the current font and font size.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     str\n     \n\n      \n       The text, as a string.\n      \n     \n\n    \n\n    \n\n     docenter\n     \n\n      \n       The docenter is where the word is centered, if\n       docenter is 1, then the word is centered in x.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Horizontal text example\n    \n\n&lt;?php$Xposition&nbsp;=&nbsp;50;$Yposition&nbsp;=&nbsp;50;$Zposition&nbsp;=&nbsp;0;$Obj_depth&nbsp;=&nbsp;1;$char&nbsp;=&nbsp;'THIS&nbsp;IS&nbsp;THE&nbsp;TEXT';swf_pushmatrix();swf_definefont&nbsp;(swf_nextid(),&nbsp;\"Mod\");swf_fontsize(10);$secondid&nbsp;=&nbsp;swf_nextid();swf_definetext($secondid,&nbsp;$char,&nbsp;1);swf_translate($Xposition,&nbsp;$Yposition,&nbsp;Zposition);swf_placeobject($secondid,&nbsp;$Obj_depth);swf_popmatrix();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    swf_definefont() - Defines a font\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endbutton.php","title":"swf_endbutton","description":"\n \n  swf_endbutton\n  (PHP 4)swf_endbutton &mdash; End the definition of the current button\n\n \n\n \n  Description\n  \n   void swf_endbutton\n    ( void\n   )\n\n  \n   The swf_endbutton() function ends the\n   definition of the current button.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_startbutton() - Start the definition of a button\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-enddoaction.php","title":"swf_enddoaction","description":"\n \n  swf_enddoaction\n  (PHP 4)swf_enddoaction &mdash; End the current action\n\n \n\n \n  Description\n  \n   void swf_enddoaction\n    ( void\n   )\n\n  \n   Ends the current action started by the\n   swf_startdoaction() function.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_startdoaction() - Start a description of an action list for the current frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endshape.php","title":"swf_endshape","description":"\n \n  swf_endshape\n  (PHP 4)swf_endshape &mdash; Completes the definition of the current shape\n\n \n\n \n  Description\n  \n   void swf_endshape\n    ( void\n   )\n\n  \n   The swf_endshape() completes the definition of\n   the current shape.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_startshape() - Start a complex shape\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-endsymbol.php","title":"swf_endsymbol","description":"\n \n  swf_endsymbol\n  (PHP 4)swf_endsymbol &mdash; End the definition of a symbol\n\n \n\n \n  Description\n  \n   void swf_endsymbol\n    ( void\n   )\n\n  \n   Ends the definition of a symbol that was started by the\n   swf_startsymbol() function.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_startsymbol() - Define a symbol\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fontsize.php","title":"swf_fontsize","description":"\n \n  swf_fontsize\n  (PHP 4)swf_fontsize &mdash; Change the font size\n\n \n \n \n  Description\n  \n   void swf_fontsize\n    ( float $size\n   )\n\n  \n   Changes the font size to the value given by the \n   size parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     size\n     \n\n      \n       The font size, as an integer.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fontslant.php","title":"swf_fontslant","description":"\n \n  swf_fontslant\n  (PHP 4)swf_fontslant &mdash; Set the font slant\n\n \n \n \n  Description\n  \n   void swf_fontslant\n    ( float $slant\n   )\n\n  \n   Set the current font slant to the angle indicated by the\n   slant parameter.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     slant\n     \n\n      \n       Positive values create a forward slant, negative values create a\n       negative slant.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-fonttracking.php","title":"swf_fonttracking","description":"\n \n  swf_fonttracking\n  (PHP 4)swf_fonttracking &mdash; Set the current font tracking\n\n \n \n \n  Description\n  \n   void swf_fonttracking\n    ( float $tracking\n   )\n\n  \n   Set the font tracking to the value specified by the\n   tracking parameter.  This function is used\n   to increase the spacing between letters and text, positive values\n   increase the space and negative values decrease the space between\n   letters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     tracking\n     \n\n      \n       The font tracking.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getbitmapinfo.php","title":"swf_getbitmapinfo","description":"\n \n  swf_getbitmapinfo\n  (PHP 4)swf_getbitmapinfo &mdash; Get information about a bitmap\n\n \n \n \n  Description\n  \n   array swf_getbitmapinfo\n    ( int $bitmapid\n   )\n\n  \n   Returns information about a bitmap.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     bitmapid\n     \n\n      \n       The bitmap id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with the following elements:\n   \n    \n     \n      &quot;size&quot; -  The size in bytes of the bitmap.\n     \n    \n    \n     \n      &quot;width&quot; -  The width in pixels of the bitmap.\n     \n    \n    \n     \n      &quot;height&quot; -  The height in pixels of the bitmap.\n     \n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getfontinfo.php","title":"swf_getfontinfo","description":"\n \n  swf_getfontinfo\n  (PHP 4)swf_getfontinfo &mdash; Gets font information\n\n \n \n \n  Description\n  \n   array swf_getfontinfo\n    ( void\n   )\n\n  \n   Gets information about the font by giving the height in pixels of a\n   capital A and a lowercase x.\n  \n \n\n\n \n  Return Values\n  \n   Returns an associative array with the following parameters:\n   \n    \n     \n      Aheight -  The height in pixels of a capital A.\n     \n    \n    \n     \n      xheight -  The height in pixels of a lowercase x.\n     \n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-getframe.php","title":"swf_getframe","description":"\n \n  swf_getframe\n  (PHP 4)swf_getframe &mdash; Get the frame number of the current frame\n\n \n\n \n  Description\n  \n   int swf_getframe\n    ( void\n   )\n\n  \n   The swf_getframe() function gets the number of\n   the current frame.\n  \n \n\n\n \n  Return Values\n  \n   Returns the current frame number, as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_setframe() - Switch to a specified frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-labelframe.php","title":"swf_labelframe","description":"\n \n  swf_labelframe\n  (PHP 4)swf_labelframe &mdash; Label the current frame\n\n \n \n \n  Description\n  \n   void swf_labelframe\n    ( string $name\n   )\n\n  \n   Labels the current frame with the given name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The frame label.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-mulcolor.php","title":"swf_mulcolor","description":"\n \n  swf_mulcolor\n  (PHP 4)swf_mulcolor &mdash; Sets the global multiply color to the rgba value specified\n\n \n \n \n  Description\n  \n   void swf_mulcolor\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )\n\n  \n   Sets the global multiply color to the given one. This color is then\n   implicitly used by the swf_placeobject(),\n   swf_modifyobject() and \n   swf_addbuttonrecord() functions.\n  \n  \n   The color of the object will be multiplied by the given color values when\n   the object is written to the screen.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     r\n     \n\n      \n       Red value\n      \n     \n\n    \n\n    \n\n     g\n     \n\n      \n       Green value\n      \n     \n\n    \n\n    \n\n     b\n     \n\n      \n       Blue value\n      \n     \n\n    \n\n    \n\n     a\n     \n\n      \n       Alpha value\n      \n     \n\n    \n\n   \n\n  \n  \n   These parameters can be either positive or negative.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-modifyobject.php","title":"swf_modifyobject","description":"\n \n  swf_modifyobject\n  (PHP 4)swf_modifyobject &mdash; Modify an object\n\n \n \n \n  Description\n  \n   void swf_modifyobject\n    ( int $depth\n   , int $how\n   )\n\n  \n   Updates the position and\/or color of the object at the specified\n   depth.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     depth\n     \n\n      \n       The depth, as an integer.\n      \n     \n\n    \n\n    \n\n     how\n     \n\n      \n       Determines what is updated. how can either be\n       the constant MOD_MATRIX or \n       MOD_COLOR or it can be a combination of both.\n      \n      \n       MOD_COLOR uses the current mulcolor (specified by\n       the function swf_mulcolor()) and addcolor\n       (specified by the function swf_addcolor()) to color\n       the object. MOD_MATRIX uses the current matrix to\n       position the object.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-lookat.php","title":"swf_lookat","description":"\n \n  swf_lookat\n  (PHP 4)swf_lookat &mdash; Define a viewing transformation\n\n \n\n \n  Description\n  \n   void swf_lookat\n    ( float $view_x\n   , float $view_y\n   , float $view_z\n   , float $reference_x\n   , float $reference_y\n   , float $reference_z\n   , float $twist\n   )\n\n  \n   Defines a viewing transformation by giving the viewing position and the\n   coordinates of a reference point in the scene.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     view_x\n     \n\n      \n       x-coordinate for the viewing position\n      \n     \n\n    \n\n    \n\n     view_y\n     \n\n      \n       y-coordinate for the viewing position\n      \n     \n\n    \n\n    \n\n     view_z\n     \n\n      \n       z-coordinate for the viewing position\n      \n     \n\n    \n\n    \n\n     reference_x\n     \n\n      \n       x-coordinate for the reference point\n      \n     \n\n    \n\n    \n\n     reference_y\n     \n\n      \n       y-coordinate for the reference point\n      \n     \n\n    \n\n    \n\n     reference_z\n     \n\n      \n       z-coordinate for the reference point\n      \n     \n\n    \n\n    \n\n     twist\n     \n\n      \n       Controls the rotation along with viewer&#039;s z axis.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple 3D-rotation around a text\n    \n\n&lt;?phpheader('Content-type:&nbsp;application\/x-shockwave-flash');swf_openfile(\"php:\/\/stdout\",&nbsp;320,&nbsp;200,&nbsp;25,&nbsp;1,&nbsp;1,&nbsp;1);swf_ortho(-100,&nbsp;100,&nbsp;-100,&nbsp;100,&nbsp;-100,&nbsp;100);&nbsp;\/\/&nbsp;create&nbsp;3D&nbsp;coordinatesswf_definefont(0,&nbsp;\"Pix3\");swf_addcolor(0,&nbsp;0,&nbsp;0,&nbsp;1);swf_fontsize(10);swf_fonttracking(0.2);for&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;628;&nbsp;$i&nbsp;+=&nbsp;8)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$j&nbsp;=&nbsp;$i&nbsp;\/&nbsp;100;&nbsp;&nbsp;&nbsp;&nbsp;swf_pushmatrix();&nbsp;&nbsp;&nbsp;&nbsp;swf_translate(0,&nbsp;0,&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;swf_perspective(100,&nbsp;1,&nbsp;0,&nbsp;10);&nbsp;&nbsp;&nbsp;&nbsp;swf_lookat(sin($j)&nbsp;*&nbsp;60,&nbsp;50,&nbsp;cos($j)&nbsp;*&nbsp;60,&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;swf_definetext&nbsp;(1,&nbsp;'HotKey@',&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;swf_translate(-50,0,0);&nbsp;&nbsp;&nbsp;&nbsp;swf_placeobject(1,10);&nbsp;&nbsp;&nbsp;&nbsp;swf_definetext(2,&nbsp;'example.com',&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;swf_translate(55,&nbsp;0,&nbsp;0);&nbsp;&nbsp;&nbsp;&nbsp;swf_placeobject(2,&nbsp;11);&nbsp;&nbsp;&nbsp;&nbsp;swf_showframe();&nbsp;&nbsp;&nbsp;&nbsp;swf_removeobject(10);&nbsp;&nbsp;&nbsp;&nbsp;swf_removeobject(11);&nbsp;&nbsp;&nbsp;&nbsp;swf_popmatrix();}swf_closefile();?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-nextid.php","title":"swf_nextid","description":"\n \n  swf_nextid\n  (PHP 4)swf_nextid &mdash; Returns the next free object id\n\n \n \n \n  Description\n  \n   int swf_nextid\n    ( void\n   )\n\n  \n   The swf_nextid() function returns the next\n   available object id.\n  \n \n\n\n \n  Return Values\n  \n   Returns the id, as an integer.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-ortho2.php","title":"swf_ortho2","description":"\n \n  swf_ortho2\n  (PHP 4)swf_ortho2 &mdash; Defines 2D orthographic mapping of user coordinates onto the current viewport\n\n \n\n \n  Description\n  \n   void swf_ortho2\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   )\n\n  \n   Defines a two dimensional orthographic mapping of user coordinates onto\n   the current viewport, this defaults to one to one mapping of the area of\n   the Flash movie.\n  \n  \n   If a perspective transformation is desired,\n   swf_perspective() can be used.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     xmin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     xmax\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymax\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_ortho() - Defines an orthographic mapping of user coordinates onto the current viewport\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-perspective.php","title":"swf_perspective","description":"\n \n  swf_perspective\n  (PHP 4)swf_perspective &mdash; Define a perspective projection transformation\n\n \n \n \n  Description\n  \n   void swf_perspective\n    ( float $fovy\n   , float $aspect\n   , float $near\n   , float $far\n   )\n\n  \n   Defines a perspective projection transformation. \n  \n  Note: \n   \n    Various distortion artifacts may appear when performing a\n    perspective projection, this is because Flash players only have\n    a two dimensional matrix.  Some are not to pretty.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fovy\n     \n\n      \n       A field-of-view angle in the y direction.\n      \n     \n\n    \n\n    \n\n     aspect\n     \n\n      \n       The aspect ratio of the viewport that is being drawn onto.\n      \n     \n\n    \n\n    \n\n     near\n     \n\n      \n       The near clipping plane.\n      \n     \n\n    \n\n    \n\n     far\n     \n\n      \n       The far clipping plane.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-ortho.php","title":"swf_ortho","description":"\n \n  swf_ortho\n  (PHP 4 &gt;= 4.0.1)swf_ortho &mdash; Defines an orthographic mapping of user coordinates onto the current viewport\n\n \n\n \n  Description\n  \n   void swf_ortho\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   , float $zmin\n   , float $zmax\n   )\n\n  \n   Defines an 3D orthographic mapping of user coordinates onto the current\n   viewport.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     xmin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     xmax\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymax\n     \n\n      \n      \n     \n\n    \n\n    \n\n     zmin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     zmax\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_ortho2() - Defines 2D orthographic mapping of user coordinates onto the current viewport\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-oncondition.php","title":"swf_oncondition","description":"\n \n  swf_oncondition\n  (PHP 4)swf_oncondition &mdash; Describe a transition used to trigger an action list\n\n \n \n \n  Description\n  \n   void swf_oncondition\n    ( int $transition\n   )\n\n  \n   The swf_oncondition() function describes a\n   transition that will trigger an action list.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     transition\n     \n\n      \n       There are several types of possible transitions, the following are for\n       buttons defined as TYPE_MENUBUTTON:\n       \n        \n         \n          IdletoOverUp\n         \n        \n        \n         \n          OverUptoIdle\n         \n        \n        \n         \n          OverUptoOverDown\n         \n        \n        \n         \n          OverDowntoOverUp\n         \n        \n        \n         \n          IdletoOverDown\n         \n        \n        \n         \n          OutDowntoIdle\n         \n        \n        \n         \n          MenuEnter (IdletoOverUp|IdletoOverDown)\n         \n        \n        \n         \n          MenuExit (OverUptoIdle|OverDowntoIdle)\n         \n        \n       \n       For TYPE_PUSHBUTTON there are the following options:\n       \n        \n         \n          IdletoOverUp\n         \n        \n        \n         \n          OverUptoIdle\n         \n        \n        \n         \n          OverUptoOverDown\n         \n        \n        \n         \n          OverDowntoOverUp\n         \n        \n        \n         \n          OverDowntoOutDown\n         \n        \n        \n         \n          OutDowntoOverDown\n         \n        \n        \n         \n          OutDowntoIdle\n         \n        \n        \n         \n          ButtonEnter (IdletoOverUp|OutDowntoOverDown)\n         \n        \n        \n         \n          ButtonExit  (OverUptoIdle|OverDowntoOutDown)\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-openfile.php","title":"swf_openfile","description":"\n \n  swf_openfile\n  (PHP 4)swf_openfile &mdash; Open a new Shockwave Flash file\n\n \n\n \n  Description\n  \n   void swf_openfile\n    ( string $filename\n   , float $width\n   , float $height\n   , float $framerate\n   , float $r\n   , float $g\n   , float $b\n   )\n\n  \n   Opens a new file. This must be the first function you call, otherwise your\n   script will not work.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the SWF file. If you want to send your output to the\n       screen, set this to php:\/\/stdout.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       The movie width\n      \n     \n\n    \n\n    \n\n     height\n     \n\n      \n       The movie height\n      \n     \n\n    \n\n    \n\n     framerate\n     \n\n      \n       The frame rate.\n      \n     \n\n    \n\n    \n\n     r\n     \n\n      \n       Red value for the background.\n      \n     \n\n    \n\n    \n\n     g\n     \n\n      \n       Green value for the background.\n      \n     \n\n    \n\n    \n\n     b\n     \n\n      \n       Blue value for the background.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.1\n       \n        Support for php:\/\/stdout was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    swf_closefile() - Close the current Shockwave Flash file\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-placeobject.php","title":"swf_placeobject","description":"\n \n  swf_placeobject\n  (PHP 4)swf_placeobject &mdash; Place an object onto the screen\n\n \n \n \n  Description\n  \n   void swf_placeobject\n    ( int $objid\n   , int $depth\n   )\n\n  \n   Places the object in the current frame at a specified\n   depth.\n  \n  \n   This uses the current mulcolor (specified by\n   swf_mulcolor()) and the current addcolor (specified by\n   swf_addcolor()) to color the object and it uses the\n   current matrix to position the object.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     depth\n     \n\n      \n       Must be between 1 and 65535.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-polarview.php","title":"swf_polarview","description":"\n \n  swf_polarview\n  (PHP 4)swf_polarview &mdash; Define the viewer&#039;s position with polar coordinates\n\n \n \n \n  Description\n  \n   void swf_polarview\n    ( float $dist\n   , float $azimuth\n   , float $incidence\n   , float $twist\n   )\n\n  \n   The swf_polarview() function defines the\n   viewer&#039;s position in polar coordinates.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dist\n     \n\n      \n       The distance between the viewpoint to the world space origin.  \n      \n     \n\n    \n\n    \n\n     azimuth\n     \n\n      \n       Defines the azimuthal angle in the x,y coordinate plane, measured in\n       distance from the y axis.  \n      \n     \n\n    \n\n    \n\n     incidence\n     \n\n      \n       Defines the angle of incidence in the y,z plane, measured in distance\n       from the z axis.  The incidence angle is defined as the angle of the\n       viewport relative to the z axis.\n      \n     \n\n    \n\n    \n\n     twist\n     \n\n      \n       Specifies the amount that the viewpoint is to be rotated about the\n       line of sight using the right hand rule.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-posround.php","title":"swf_posround","description":"\n \n  swf_posround\n  (PHP 4)swf_posround &mdash; Enables or Disables the rounding of the translation when objects are placed or moved\n\n \n \n \n  Description\n  \n   void swf_posround\n    ( int $round\n   )\n\n  \n   Enables or disables the rounding of the translation when objects are\n   placed or moved, there are times when text becomes more readable because\n   rounding has been enabled.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     round\n     \n\n      \n       Whether to enable rounding or not, if set to the value of 1, then\n       rounding is enabled, if set to 0 then rounding is disabled.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-popmatrix.php","title":"swf_popmatrix","description":"\n \n  swf_popmatrix\n  (PHP 4)swf_popmatrix &mdash; Restore a previous transformation matrix\n\n \n\n \n  Description\n  \n   void swf_popmatrix\n    ( void\n   )\n\n  \n   Restores a previous transformation matrix.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_pushmatrix() - Push the current transformation matrix back onto the stack\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-pushmatrix.php","title":"swf_pushmatrix","description":"\n \n  swf_pushmatrix\n  (PHP 4)swf_pushmatrix &mdash; Push the current transformation matrix back onto the stack\n\n \n\n \n  Description\n  \n   void swf_pushmatrix\n    ( void\n   )\n\n  \n   Pushes the current transformation matrix back onto the stack.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_popmatrix() - Restore a previous transformation matrix\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-removeobject.php","title":"swf_removeobject","description":"\n \n  swf_removeobject\n  (PHP 4)swf_removeobject &mdash; Remove an object\n\n \n\n \n  Description\n  \n   void swf_removeobject\n    ( int $depth\n   )\n\n  \n   Removes the last object drawn at the depth specified by\n   depth.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     depth\n     \n\n      \n       The depth, as an integer.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-setfont.php","title":"swf_setfont","description":"\n \n  swf_setfont\n  (PHP 4)swf_setfont &mdash; Change the current font\n\n \n \n \n  Description\n  \n   void swf_setfont\n    ( int $fontid\n   )\n\n  \n   The swf_setfont() sets the current font to the\n   value given by the fontid parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     fontid\n     \n\n      \n       The font identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-rotate.php","title":"swf_rotate","description":"\n \n  swf_rotate\n  (PHP 4)swf_rotate &mdash; Rotate the current transformation\n\n \n \n \n  Description\n  \n   void swf_rotate\n    ( float $angle\n   , string $axis\n   )\n\n  \n   Rotates the current transformation by a given angle\n   around the given axis.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     angle\n     \n\n      \n       The rotation angle.\n      \n     \n\n    \n\n    \n\n     axis\n     \n\n      \n       The axis. Valid values axis are x (the x axis), \n       y (the y axis) or z (the z\n       axis).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-scale.php","title":"swf_scale","description":"\n \n  swf_scale\n  (PHP 4)swf_scale &mdash; Scale the current transformation\n\n \n \n \n  Description\n  \n   void swf_scale\n    ( float $x\n   , float $y\n   , float $z\n   )\n\n  \n   The swf_scale() scales curve coordinates by the given\n   value.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       x scale factor.\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       y scale factor.\n      \n     \n\n    \n\n    \n\n     z\n     \n\n      \n       z scale factor.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-setframe.php","title":"swf_setframe","description":"\n \n  swf_setframe\n  (PHP 4)swf_setframe &mdash; Switch to a specified frame\n\n \n\n \n  Description\n  \n   void swf_setframe\n    ( int $framenumber\n   )\n\n  \n   Changes the active frame to the specified on.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     framenumber\n     \n\n      \n       The frame number to be set.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_getframe() - Get the frame number of the current frame\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapearc.php","title":"swf_shapearc","description":"\n \n  swf_shapearc\n  (PHP 4)swf_shapearc &mdash; Draw a circular arc\n\n \n \n \n  Description\n  \n   void swf_shapearc\n    ( float $x\n   , float $y\n   , float $r\n   , float $ang1\n   , float $ang2\n   )\n\n  \n   Draws a circular arc. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       x-coordinate of the center.\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       y-coordinate of the center.\n      \n     \n\n    \n\n    \n\n     r\n     \n\n      \n       The arc radius.\n      \n     \n\n    \n\n    \n\n     ang1\n     \n\n      \n       The start angle.\n      \n     \n\n    \n\n    \n\n     ang2\n     \n\n      \n       The end angle.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillbitmapclip.php","title":"swf_shapefillbitmapclip","description":"\n \n  swf_shapefillbitmapclip\n  (PHP 4)swf_shapefillbitmapclip &mdash; Set current fill mode to clipped bitmap\n\n \n\n \n  Description\n  \n   void swf_shapefillbitmapclip\n    ( int $bitmapid\n   )\n\n  \n   Sets the fill to bitmap clipped, empty spaces will be filled by the\n   bitmap.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     bitmapid\n     \n\n      \n       The bitmap id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_shapefillbitmaptile() - Set current fill mode to tiled bitmap\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapecurveto3.php","title":"swf_shapecurveto3","description":"\n \n  swf_shapecurveto3\n  (PHP 4)swf_shapecurveto3 &mdash; Draw a cubic bezier curve\n\n \n\n \n  Description\n  \n   void swf_shapecurveto3\n    ( float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   , float $x3\n   , float $y3\n   )\n\n  \n   Draw a cubic bezier curve using the given coordinates.\n  \n  \n   The current position is then set to the\n   x3,y3 coordinate.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x1\n     \n\n      \n       x-coordinate of the first off curve control point.\n      \n     \n\n    \n\n    \n\n     y1\n     \n\n      \n       y-coordinate of the first off curve control point.\n      \n     \n\n    \n\n    \n\n     x2\n     \n\n      \n       x-coordinate of the second off curve control point.\n      \n     \n\n    \n\n    \n\n     y2\n     \n\n      \n       y-coordinate of the second off curve control point.\n      \n     \n\n    \n\n    \n\n     x3\n     \n\n      \n       x-coordinate of the endpoint.\n      \n     \n\n    \n\n    \n\n     y3\n     \n\n      \n       y-coordinate of the endpoint.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_shapecurveto() - Draw a quadratic bezier curve between two points\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapecurveto.php","title":"swf_shapecurveto","description":"\n \n  swf_shapecurveto\n  (PHP 4)swf_shapecurveto &mdash; Draw a quadratic bezier curve between two points\n\n \n\n \n  Description\n  \n   void swf_shapecurveto\n    ( float $x1\n   , float $y1\n   , float $x2\n   , float $y2\n   )\n\n  \n   Draws a quadratic bezier curve from the current location, though the\n   two given points.\n  \n  \n   The current position is then set to the point defined by the\n   x2 and y2 parameters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x1\n     \n\n      \n       x-coordinate of the first point.\n      \n     \n\n    \n\n    \n\n     y1\n     \n\n      \n       y-coordinate of the first point.\n      \n     \n\n    \n\n    \n\n     x2\n     \n\n      \n       x-coordinate of the second point.\n      \n     \n\n    \n\n    \n\n     y2\n     \n\n      \n       y-coordinate of the second point.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_shapecurveto3() - Draw a cubic bezier curve\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillbitmaptile.php","title":"swf_shapefillbitmaptile","description":"\n \n  swf_shapefillbitmaptile\n  (PHP 4)swf_shapefillbitmaptile &mdash; Set current fill mode to tiled bitmap\n\n \n\n \n  Description\n  \n   void swf_shapefillbitmaptile\n    ( int $bitmapid\n   )\n\n  \n   Sets the fill to bitmap tile, empty spaces will be filled by the\n   bitmap.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     bitmapid\n     \n\n      \n       The bitmap id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_shapefillbitmapclip() - Set current fill mode to clipped bitmap\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefilloff.php","title":"swf_shapefilloff","description":"\n \n  swf_shapefilloff\n  (PHP 4)swf_shapefilloff &mdash; Turns off filling\n\n \n \n \n  Description\n  \n   void swf_shapefilloff\n    ( void\n   )\n\n  \n   Turns off filling for the current shape.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapelinesolid.php","title":"swf_shapelinesolid","description":"\n \n  swf_shapelinesolid\n  (PHP 4)swf_shapelinesolid &mdash; Set the current line style\n\n \n \n \n  Description\n  \n   void swf_shapelinesolid\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   , float $width\n   )\n\n  \n   Sets the current line style to the given color and width.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     r\n     \n\n      \n       Red value\n      \n     \n\n    \n\n    \n\n     g\n     \n\n      \n       Green value\n      \n     \n\n    \n\n    \n\n     b\n     \n\n      \n       Blue value\n      \n     \n\n    \n\n    \n\n     a\n     \n\n      \n       Alpha value\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       The line width. If 0.0 is given then no lines are drawn.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapelineto.php","title":"swf_shapelineto","description":"\n \n  swf_shapelineto\n  (PHP 4)swf_shapelineto &mdash; Draw a line\n\n \n \n \n  Description\n  \n   void swf_shapelineto\n    ( float $x\n   , float $y\n   )\n\n  \n   Draws a line to the x and y\n   coordinates. The current position is then set to that point.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       x-coordinate of the target.\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       y-coordinate of the target.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapefillsolid.php","title":"swf_shapefillsolid","description":"\n \n  swf_shapefillsolid\n  (PHP 4)swf_shapefillsolid &mdash; Set the current fill style to the specified color\n\n \n \n \n  Description\n  \n   void swf_shapefillsolid\n    ( float $r\n   , float $g\n   , float $b\n   , float $a\n   )\n\n  \n   Sets the current fill style to solid, and then sets the fill color to the\n   given color.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     r\n     \n\n      \n       Red value\n      \n     \n\n    \n\n    \n\n     g\n     \n\n      \n       Green value\n      \n     \n\n    \n\n    \n\n     b\n     \n\n      \n       Blue value\n      \n     \n\n    \n\n    \n\n     a\n     \n\n      \n       Alpha value\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-shapemoveto.php","title":"swf_shapemoveto","description":"\n \n  swf_shapemoveto\n  (PHP 4)swf_shapemoveto &mdash; Move the current position\n\n \n \n \n  Description\n  \n   void swf_shapemoveto\n    ( float $x\n   , float $y\n   )\n\n  \n   Moves the current position to the given point.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       x-coordinate of the target.\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       y-coordinate of the target.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-showframe.php","title":"swf_showframe","description":"\n \n  swf_showframe\n  (PHP 4)swf_showframe &mdash; Display the current frame\n\n \n \n \n  Description\n  \n   void swf_showframe\n    ( void\n   )\n\n  \n   Outputs the current frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startbutton.php","title":"swf_startbutton","description":"\n \n  swf_startbutton\n  (PHP 4)swf_startbutton &mdash; Start the definition of a button\n\n \n\n \n  Description\n  \n   void swf_startbutton\n    ( int $objid\n   , int $type\n   )\n\n  \n   Starts the definition of a button.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       Can either be TYPE_MENUBUTTON or\n       TYPE_PUSHBUTTON.  The\n       TYPE_MENUBUTTON constant allows the focus to\n       travel from the button when the mouse is down,\n       TYPE_PUSHBUTTON does not allow the focus to\n       travel when the mouse is down.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_endbutton() - End the definition of the current button\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startshape.php","title":"swf_startshape","description":"\n \n  swf_startshape\n  (PHP 4)swf_startshape &mdash; Start a complex shape\n\n \n\n \n  Description\n  \n   void swf_startshape\n    ( int $objid\n   )\n\n  \n   Starts a complex shape.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_endshape() - Completes the definition of the current shape\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startdoaction.php","title":"swf_startdoaction","description":"\n \n  swf_startdoaction\n  (PHP 4)swf_startdoaction &mdash; Start a description of an action list for the current frame\n\n \n\n \n  Description\n  \n   void swf_startdoaction\n    ( void\n   )\n\n  \n   Starts the description of an action list for the current frame.  This\n   must be called before actions are defined for the current frame.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_enddoaction() - End the current action\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-startsymbol.php","title":"swf_startsymbol","description":"\n \n  swf_startsymbol\n  (PHP 4)swf_startsymbol &mdash; Define a symbol\n\n \n\n \n  Description\n  \n   void swf_startsymbol\n    ( int $objid\n   )\n\n  \n   Defines an object id as a symbol.  Symbols are tiny flash movies that can\n   be played simultaneously.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     objid\n     \n\n      \n       The object id you want to define as a symbol.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  See Also\n  \n   \n    swf_endsymbol() - End the definition of a symbol\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-textwidth.php","title":"swf_textwidth","description":"\n \n  swf_textwidth\n  (PHP 4)swf_textwidth &mdash; Get the width of a string\n\n \n \n \n  Description\n  \n   float swf_textwidth\n    ( string $str\n   )\n\n  \n   Gives the width of the string in pixels, using the current font and font\n   size.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the line width, as a float.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-translate.php","title":"swf_translate","description":"\n \n  swf_translate\n  (PHP 4)swf_translate &mdash; Translate the current transformations\n\n \n \n \n  Description\n  \n   void swf_translate\n    ( float $x\n   , float $y\n   , float $z\n   )\n\n  \n   Translates the current transformation by the given values.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     x\n     \n\n      \n       x value.\n      \n     \n\n    \n\n    \n\n     y\n     \n\n      \n       y value.\n      \n     \n\n    \n\n    \n\n     z\n     \n\n      \n       z value.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.swf-viewport.php","title":"swf_viewport","description":"\n \n  swf_viewport\n  (PHP 4)swf_viewport &mdash; Select an area for future drawing\n\n \n \n \n  Description\n  \n   void swf_viewport\n    ( float $xmin\n   , float $xmax\n   , float $ymin\n   , float $ymax\n   )\n\n  \n   Selects an area for future drawing for xmin to\n   xmax and ymin to\n   ymax, if this function is not called the\n   area defaults to the size of the screen.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     xmin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     xmax\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymin\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ymax\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-close.php","title":"sybase_close","description":"\n \n  sybase_close\n  (PHP 4, PHP 5)sybase_close &mdash; Closes a Sybase connection\n\n \n \n \n  Description\n  \n   bool sybase_close\n    ([ resource $link_identifier\n  ] )\n\n  \n   sybase_close() closes the link to a Sybase\n   database that&#039;s associated with the specified link\n   link_identifier.\n  \n  \n   Note that this isn&#039;t usually necessary, as non-persistent\n   open links are automatically closed at the end of the script&#039;s\n   execution.\n  \n  \n   sybase_close() will not close persistent links\n   generated by sybase_pconnect().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       If the link identifier isn&#039;t specified, the last opened link is\n       assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_connect() - Opens a Sybase server connection\n    sybase_pconnect() - Open persistent Sybase connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-connect.php","title":"sybase_connect","description":"\n \n  sybase_connect\n  (PHP 4, PHP 5)sybase_connect &mdash; Opens a Sybase server connection\n\n \n \n \n  Description\n  \n   resource sybase_connect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, string $appname\n   [, bool $new = false\n  ]]]]]] )\n\n  \n   sybase_connect() establishes a connection to a\n   Sybase server. \n  \n  \n   In case a second call is made to\n   sybase_connect() with the same arguments, no\n   new link will be established, but instead, the link identifier of\n   the already opened link will be returned.\n  \n  \n   The link to the server will be closed as soon as the\n   execution of the script ends, unless it&#039;s closed earlier by\n   explicitly calling sybase_close().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     servername\n     \n\n      \n       The servername argument has to be a valid servername that is defined\n       in the &#039;interfaces&#039; file.\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       Sybase user name\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       Password associated with username.\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n       Specifies the charset for the connection\n      \n     \n\n    \n\n    \n\n     appname\n     \n\n      \n       Specifies an appname for the Sybase connection.\n       This allow you to make separate connections in the same script to the\n       same database. This may come handy when you have started a transaction\n       in your current connection, and you need to be able to do a separate\n       query which cannot be performed inside this transaction.\n      \n     \n\n    \n\n    \n\n     new\n     \n\n      \n       Whether to open a new connection or use the existing one.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive Sybase link identifier on success, or FALSE on\n   failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The new parameter was added.\n       \n      \n\n      \n       4.2.0\n       \n        The appname parameter was added.\n       \n      \n\n      \n       4.0.2\n       \n        The charset parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sybase_connect() example\n    \n\n&lt;?php$link&nbsp;=&nbsp;sybase_connect('SYBASE',&nbsp;'',&nbsp;'')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;die(\"Could&nbsp;not&nbsp;connect&nbsp;!\");echo&nbsp;\"Connected&nbsp;successfully\";sybase_close($link);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sybase_pconnect() - Open persistent Sybase connection\n    sybase_close() - Closes a Sybase connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-data-seek.php","title":"sybase_data_seek","description":"\n \n  sybase_data_seek\n  (PHP 4, PHP 5)sybase_data_seek &mdash; Moves internal row pointer\n\n \n \n \n  Description\n  \n   bool sybase_data_seek\n    ( resource $result_identifier\n   , int $row_number\n   )\n\n  \n   sybase_data_seek() moves the internal row\n   pointer of the Sybase result associated with the specified result\n   identifier to pointer to the specified row number.  The next call\n   to sybase_fetch_row() would return that row.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     row_number\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_row() - Get a result row as an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-deadlock-retry-count.php","title":"sybase_deadlock_retry_count","description":"\n \n  sybase_deadlock_retry_count\n  (PHP 4 &gt;= 4.3.0, PHP 5)sybase_deadlock_retry_count &mdash; Sets the deadlock retry count\n\n \n \n \n  Description\n  \n   void sybase_deadlock_retry_count\n    ( int $retry_count\n   )\n\n  \n   Using sybase_deadlock_retry_count(), the number of retries\n   can be defined in cases of deadlocks. By default, every deadlock is retried\n   an infinite number of times or until the process is killed by Sybase, the\n   executing script is killed (for instance, by set_time_limit())\n   or the query succeeds.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     retry_count\n     \n\n      \n       \n        Values for retry_count\n        \n         \n          \n           -1\n           Retry forever (default)\n          \n\n          \n           0\n           Do not retry\n          \n\n          \n           n\n           Retry n times\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-array.php","title":"sybase_fetch_array","description":"\n \n  sybase_fetch_array\n  (PHP 4, PHP 5)sybase_fetch_array &mdash; Fetch row as array\n\n \n \n \n  Description\n  \n   array sybase_fetch_array\n    ( resource $result\n   )\n\n  \n   sybase_fetch_array() is an extended version of\n   sybase_fetch_row().  In addition to storing the\n   data in the numeric indices of the result array, it also stores\n   the data in associative indices, using the field names as keys.\n  \n  \n   An important thing to note is that using\n   sybase_fetch_array() is NOT significantly\n   slower than using sybase_fetch_row(), while it\n   provides a significant added value.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.\n  \n  Note: \n   \n    When selecting fields with identical names (for instance, in a join), the\n    associative indices will have a sequential number prepended. See the\n    example for details.\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Identical fieldnames\n    \n\n&lt;?php$dbh&nbsp;=&nbsp;sybase_connect('SYBASE',&nbsp;'',&nbsp;'');$q&nbsp;=&nbsp;sybase_query('SELECT&nbsp;*&nbsp;FROM&nbsp;p,&nbsp;a&nbsp;WHERE&nbsp;p.person_id=&nbsp;a.person_id');var_dump(sybase_fetch_array($q));sybase_close($dbh);?&gt;\n\n\n    \n\n    \n     The above example would produce the following output (assuming the two tables only\n     have each one column called &quot;person_id&quot;):\n    \n    \n\narray(4) {\n  [0]=&gt;\n  int(1)\n  [&quot;person_id&quot;]=&gt;\n  int(1)\n  [1]=&gt;\n  int(1)\n  [&quot;person_id1&quot;]=&gt;\n  int(1)\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_row() - Get a result row as an enumerated array\n    sybase_fetch_assoc() - Fetch a result row as an associative array\n    sybase_fetch_object() - Fetch a row as an object\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-field.php","title":"sybase_fetch_field","description":"\n \n  sybase_fetch_field\n  (PHP 4, PHP 5)sybase_fetch_field &mdash; Get field information from a result\n\n \n \n \n  Description\n  \n   object sybase_fetch_field\n    ( resource $result\n   [, int $field_offset = -1\n  ] )\n\n  \n   sybase_fetch_field() can be used in order to\n   obtain information about fields in a certain query result. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n    \n\n     field_offset\n     \n\n      \n       If the field offset isn&#039;t specified, the next field that wasn&#039;t yet\n       retrieved by sybase_fetch_field() is retrieved.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object containing field information.\n  \n  \n   The properties of the object are:\n  \n  \n   \n    \n     name - column name.  if the column is a result of a function, this\n     property is set to computed#N, where #N is a serial number.\n    \n   \n   \n    \n     column_source - the table from which the column was taken\n    \n   \n   \n    \n     max_length - maximum length of the column\n    \n   \n   \n    \n     numeric - 1 if the column is numeric\n    \n   \n   \n    \n     type - datatype of the column\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    sybase_field_seek() - Sets field offset\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-object.php","title":"sybase_fetch_object","description":"\n \n  sybase_fetch_object\n  (PHP 4, PHP 5)sybase_fetch_object &mdash; Fetch a row as an object\n\n \n \n \n  Description\n  \n   object sybase_fetch_object\n    ( resource $result\n   [, mixed $object\n  ] )\n\n  \n   sybase_fetch_object() is similar to\n   sybase_fetch_assoc(), with one difference - an object\n   is returned, instead of an array.\n  \n  \n   Speed-wise, the function is identical to\n   sybase_fetch_array(), and almost as quick as\n   sybase_fetch_row() (the difference is insignificant).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n    \n\n     object\n     \n\n      \n       Use the second object to specify the type of object\n       you want to return. If this parameter is omitted, the object will be of\n       type stdClass.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object with properties that correspond to the fetched row, or\n   FALSE if there are no more rows.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        This function will no longer return numeric object members.\n        Old behaviour:\n        \nobject(stdclass)(3) {\n  [0]=&gt;\n  string(3) &quot;foo&quot;\n  [&quot;foo&quot;]=&gt;\n  string(3) &quot;foo&quot;\n  [1]=&gt;\n  string(3) &quot;bar&quot;\n  [&quot;bar&quot;]=&gt;\n  string(3) &quot;bar&quot;\n}\n\n        \n        New behaviour:\n        \nobject(stdclass)(3) {\n  [&quot;foo&quot;]=&gt;\n  string(3) &quot;foo&quot;\n  [&quot;bar&quot;]=&gt;\n  string(3) &quot;bar&quot;\n}\n\n        \n        \n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sybase_fetch_object() return as Foo\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;Foo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;$foo,&nbsp;$bar,&nbsp;$baz;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;{...]&nbsp;&nbsp;&nbsp;&nbsp;$qrh=&nbsp;sybase_query('SELECT&nbsp;foo,&nbsp;bar,&nbsp;baz&nbsp;FROM&nbsp;example');&nbsp;&nbsp;&nbsp;&nbsp;$foo=&nbsp;sybase_fetch_object($qrh,&nbsp;'Foo');&nbsp;&nbsp;&nbsp;&nbsp;$bar=&nbsp;sybase_fetch_object($qrh,&nbsp;new&nbsp;Foo());&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;{...]?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_array() - Fetch row as array\n    sybase_fetch_row() - Get a result row as an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-row.php","title":"sybase_fetch_row","description":"\n \n  sybase_fetch_row\n  (PHP 4, PHP 5)sybase_fetch_row &mdash; Get a result row as an enumerated array\n\n \n \n \n  Description\n  \n   array sybase_fetch_row\n    ( resource $result\n   )\n\n  \n   sybase_fetch_row() fetches one row of data\n   from the result associated with the specified result identifier.\n  \n  \n   Subsequent call to sybase_fetch_row() would\n   return the next row in the result set, or FALSE if there are no\n   more rows.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows. Each result column is stored in an array offset,\n   starting at offset 0.\n  \n  \n   Data types\n   \n    \n     \n      PHP\n      Sybase\n     \n\n    \n\n    \n     \n      string\n      VARCHAR, TEXT, CHAR, IMAGE, BINARY, VARBINARY, DATETIME\n     \n\n     \n      int\n      NUMERIC (w\/o precision), DECIMAL (w\/o precision), INT, BIT, TINYINT, SMALLINT\n     \n\n     \n      float\n      NUMERIC (w\/ precision), DECIMAL (w\/ precision), REAL, FLOAT, MONEY\n     \n\n     \n      NULL\n      NULL\n     \n\n    \n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_array() - Fetch row as array\n    sybase_fetch_assoc() - Fetch a result row as an associative array\n    sybase_fetch_object() - Fetch a row as an object\n    sybase_data_seek() - Moves internal row pointer\n    sybase_result() - Get result data\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-affected-rows.php","title":"sybase_affected_rows","description":"\n \n  sybase_affected_rows\n  (PHP 4, PHP 5)sybase_affected_rows &mdash; Gets number of affected rows in last query\n\n \n\n \n \n  Description\n  \n   int sybase_affected_rows\n    ([ resource $link_identifier\n  ] )\n\n  \n   sybase_affected_rows() returns the number of\n   rows affected by the last INSERT, UPDATE or DELETE query on the\n   server associated with the specified link identifier.  \n  \n  \n   This command is not effective for SELECT statements, only on\n   statements which modify records. To retrieve the number of rows\n   returned from a SELECT, use sybase_num_rows().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     link_identifier\n     \n\n      \n       If the link identifier isn&#039;t specified, the last opened link is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of affected rows, as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Delete-Query\n    \n\n&lt;?php\/*&nbsp;connect&nbsp;to&nbsp;database&nbsp;*\/sybase_connect('SYBASE',&nbsp;'',&nbsp;'')&nbsp;ordie(\"Could&nbsp;not&nbsp;connect\");sybase_select_db(\"db\");sybase_query(\"DELETE&nbsp;FROM&nbsp;sometable&nbsp;WHERE&nbsp;id&nbsp;&lt;&nbsp;10\");printf(\"Records&nbsp;deleted:&nbsp;%d\\n\",&nbsp;sybase_affected_rows());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nRecords deleted: 10\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    sybase_num_rows() - Get number of rows in a result set\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-fetch-assoc.php","title":"sybase_fetch_assoc","description":"\n \n  sybase_fetch_assoc\n  (PHP 4 &gt;= 4.3.0, PHP 5)sybase_fetch_assoc &mdash; Fetch a result row as an associative array\n\n \n \n \n  Description\n  \n   array sybase_fetch_assoc\n    ( resource $result\n   )\n\n  \n   sybase_fetch_assoc() is a version of\n   sybase_fetch_row() that uses column names\n   instead of integers for indices in the result array. Columns from\n   different tables with the same names are returned as\n   name, name1, name2, ..., nameN.\n  \n  \n   An important thing to note is that using\n   sybase_fetch_assoc() is NOT significantly\n   slower than using sybase_fetch_row(), while it\n   provides a significant added value.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row, or FALSE if there\n   are no more rows.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_row() - Get a result row as an enumerated array\n    sybase_fetch_array() - Fetch row as array\n    sybase_fetch_object() - Fetch a row as an object\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-field-seek.php","title":"sybase_field_seek","description":"\n \n  sybase_field_seek\n  (PHP 4, PHP 5)sybase_field_seek &mdash; Sets field offset\n\n \n \n \n  Description\n  \n   bool sybase_field_seek\n    ( resource $result\n   , int $field_offset\n   )\n\n  \n   Seeks to the specified field offset.  If the next call to\n   sybase_fetch_field() won&#039;t include a field\n   offset, this field would be returned.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n    \n\n     field_offset\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_fetch_field() - Get field information from a result\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-free-result.php","title":"sybase_free_result","description":"\n \n  sybase_free_result\n  (PHP 4, PHP 5)sybase_free_result &mdash; Frees result memory\n\n \n \n \n  Description\n  \n   bool sybase_free_result\n    ( resource $result\n   )\n\n  \n   sybase_free_result() only needs to be called\n   if you are worried about using too much memory while your script\n   is running. All result memory will automatically be freed when\n   the script ends. You may call sybase_free_result()\n   with the result identifier as an argument and the associated\n   result memory will be freed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-client-severity.php","title":"sybase_min_client_severity","description":"\n \n  sybase_min_client_severity\n  (PHP 4, PHP 5)sybase_min_client_severity &mdash; Sets minimum client severity\n\n \n \n \n  Description\n  \n   void sybase_min_client_severity\n    ( int $severity\n   )\n\n  \n   sybase_min_client_severity() sets the minimum\n   client severity level.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     severity\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n \n  See Also\n  \n   \n    sybase_min_server_severity() - Sets minimum server severity\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-error-severity.php","title":"sybase_min_error_severity","description":"\n \n  sybase_min_error_severity\n  (PHP 4, PHP 5)sybase_min_error_severity &mdash; Sets minimum error severity\n\n \n \n \n  Description\n  \n   void sybase_min_error_severity\n    ( int $severity\n   )\n\n  \n   sybase_min_error_severity() sets the minimum\n   error severity level.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     severity\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n \n  See Also\n  \n   \n    sybase_min_message_severity() - Sets minimum message severity\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-message-severity.php","title":"sybase_min_message_severity","description":"\n \n  sybase_min_message_severity\n  (PHP 4, PHP 5)sybase_min_message_severity &mdash; Sets minimum message severity\n\n \n \n \n  Description\n  \n   void sybase_min_message_severity\n    ( int $severity\n   )\n\n  \n   sybase_min_message_severity() sets the minimum\n   message severity level.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     severity\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the DB library interface to Sybase, and not with the CT library.\n \n\n\n \n  See Also\n  \n   \n    sybase_min_error_severity() - Sets minimum error severity\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-get-last-message.php","title":"sybase_get_last_message","description":"\n \n  sybase_get_last_message\n  (PHP 4, PHP 5)sybase_get_last_message &mdash; Returns the last message from the server\n\n \n \n \n  Description\n  \n   string sybase_get_last_message\n    ( void\n   )\n\n  \n   sybase_get_last_message() returns the last\n   message reported by the server.\n  \n \n\n\n \n  Return Values\n  \n   Returns the message as a string.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_min_message_severity() - Sets minimum message severity\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-min-server-severity.php","title":"sybase_min_server_severity","description":"\n \n  sybase_min_server_severity\n  (PHP 4, PHP 5)sybase_min_server_severity &mdash; Sets minimum server severity\n\n \n \n \n  Description\n  \n   void sybase_min_server_severity\n    ( int $severity\n   )\n\n  \n   sybase_min_server_severity() sets the minimum\n   server severity level.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     severity\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n \n  See Also\n  \n   \n    sybase_min_client_severity() - Sets minimum client severity\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-num-fields.php","title":"sybase_num_fields","description":"\n \n  sybase_num_fields\n  (PHP 4, PHP 5)sybase_num_fields &mdash; Gets the number of fields in a result set\n\n \n \n \n  Description\n  \n   int sybase_num_fields\n    ( resource $result\n   )\n\n  \n   sybase_num_fields() returns the number of fields in a\n   result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of fields as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_query() - Sends a Sybase query\n    sybase_fetch_field() - Get field information from a result\n    sybase_num_rows() - Get number of rows in a result set\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-pconnect.php","title":"sybase_pconnect","description":"\n \n  sybase_pconnect\n  (PHP 4, PHP 5)sybase_pconnect &mdash; Open persistent Sybase connection\n\n \n \n \n  Description\n  \n   resource sybase_pconnect\n    ([ string $servername\n   [, string $username\n   [, string $password\n   [, string $charset\n   [, string $appname\n  ]]]]] )\n\n  \n   sybase_pconnect() acts very much like\n   sybase_connect() with two major differences.\n  \n  \n   First, when connecting, the function would first try to find a\n   (persistent) link that&#039;s already open with the same host,\n   username and password.  If one is found, an identifier for it\n   will be returned instead of opening a new connection.\n  \n  \n   Second, the connection to the SQL server will not be closed when\n   the execution of the script ends.  Instead, the link will remain\n   open for future use (sybase_close() will not\n   close links established by sybase_pconnect()).\n  \n  \n   This type of links is therefore called &#039;persistent&#039;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     servername\n     \n\n      \n       The servername argument has to be a valid servername that is defined\n       in the &#039;interfaces&#039; file.\n      \n     \n\n    \n\n    \n\n     username\n     \n\n      \n       Sybase user name\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       Password associated with username.\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n       Specifies the charset for the connection\n      \n     \n\n    \n\n    \n\n     appname\n     \n\n      \n       Specifies an appname for the Sybase connection.\n       This allow you to make separate connections in the same script to the\n       same database. This may come handy when you have started a transaction\n       in your current connection, and you need to be able to do a separate\n       query which cannot be performed inside this transaction.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive Sybase persistent link identifier on success, or\n   FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The appname parameter was added.\n       \n      \n\n      \n       4.0.2\n       \n        The charset parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_connect() - Opens a Sybase server connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-num-rows.php","title":"sybase_num_rows","description":"\n \n  sybase_num_rows\n  (PHP 4, PHP 5)sybase_num_rows &mdash; Get number of rows in a result set\n\n \n \n \n  Description\n  \n   int sybase_num_rows\n    ( resource $result\n   )\n\n  \n   sybase_num_rows() returns the number of rows in a\n   result set.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of rows as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_num_fields() - Gets the number of fields in a result set\n    sybase_query() - Sends a Sybase query\n    sybase_fetch_row() - Get a result row as an enumerated array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-query.php","title":"sybase_query","description":"\n \n  sybase_query\n  (PHP 4, PHP 5)sybase_query &mdash; Sends a Sybase query\n\n \n \n \n  Description\n  \n   mixed sybase_query\n    ( string $query\n   [, resource $link_identifier\n  ] )\n\n  \n   sybase_query() sends a query to the currently\n   active database on the server that&#039;s associated with the specified\n   link identifier.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n      \n     \n\n    \n\n    \n\n     link_identifier\n     \n\n      \n       If the link identifier isn&#039;t specified, the last opened link is\n       assumed. If no link is open, the function tries to establish a link as\n       if sybase_connect() was called, and use it.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive Sybase result identifier on success, FALSE on error,\n   or TRUE if the query was successful but didn&#039;t return any columns.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_select_db() - Selects a Sybase database\n    sybase_connect() - Opens a Sybase server connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-result.php","title":"sybase_result","description":"\n \n  sybase_result\n  (PHP 4, PHP 5)sybase_result &mdash; Get result data\n\n \n \n \n  Description\n  \n   string sybase_result\n    ( resource $result\n   , int $row\n   , mixed $field\n   )\n\n  \n   Returns the contents of the cell at the row and offset in\n   the specified Sybase result set.\n  \n  \n   When working on large result sets, you should consider using one\n   of the functions that fetch an entire row (specified below).  As\n   these functions return the contents of multiple cells in one\n   function call, they&#039;re MUCH quicker than sybase_result().  Also,\n   note that specifying a numeric offset for the field argument is\n   much quicker than specifying a fieldname or tablename.fieldname\n   argument.\n  \n  \n   Recommended high-performance alternatives:\n   sybase_fetch_row(),\n   sybase_fetch_array() and\n   sybase_fetch_object().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n      \n     \n\n    \n\n    \n\n     row\n     \n\n      \n      \n     \n\n    \n\n    \n\n     field\n     \n\n      \n       The field argument can be the field&#039;s offset, or the field&#039;s name, or\n       the field&#039;s table dot field&#039;s name (tablename.fieldname).  If the\n       column name has been aliased (&#039;select foo as bar from...&#039;), use the\n       alias instead of the column name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   sybase_result() returns the contents of one cell from a\n   Sybase result set.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-select-db.php","title":"sybase_select_db","description":"\n \n  sybase_select_db\n  (PHP 4, PHP 5)sybase_select_db &mdash; Selects a Sybase database\n\n \n \n \n  Description\n  \n   bool sybase_select_db\n    ( string $database_name\n   [, resource $link_identifier\n  ] )\n\n  \n   sybase_select_db() sets the current active\n   database on the server that&#039;s associated with the specified link\n   identifier.  \n  \n  \n   Every subsequent call to sybase_query() will be\n   made on the active database.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     database_name\n     \n\n      \n      \n     \n\n    \n\n    \n\n     link_identifier\n     \n\n      \n       If no link identifier is specified, the last opened link is assumed.\n       If no link is open, the function will try to establish a link as if\n       sybase_connect() was called, and use it.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    sybase_connect() - Opens a Sybase server connection\n    sybase_pconnect() - Open persistent Sybase connection\n    sybase_query() - Sends a Sybase query\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-unbuffered-query.php","title":"sybase_unbuffered_query","description":"\n \n  sybase_unbuffered_query\n  (PHP 4 &gt;= 4.3.0, PHP 5)sybase_unbuffered_query &mdash; Send a Sybase query and do not block\n\n \n \n \n  Description\n  \n   resource sybase_unbuffered_query\n    ( string $query\n   , resource $link_identifier\n   [, bool $store_result\n  ] )\n\n  \n   sybase_unbuffered_query() sends a query to the\n   currently active database on the server that&#039;s associated with the specified\n   link identifier.  If the link identifier isn&#039;t specified, the last\n   opened link is assumed.  If no link is open, the function tries to\n   establish a link as if sybase_connect() was\n   called, and use it.\n  \n  \n   Unlike sybase_query(),\n   sybase_unbuffered_query() reads only the first\n   row of the result set. sybase_fetch_array() and similar\n   function read more rows as needed.  sybase_data_seek()\n   reads up to the target row.  The behavior may produce better performance\n   for large result sets.\n  \n  \n   sybase_num_rows() will only return the correct number\n   of rows if all result sets have been read. To Sybase, the number of rows\n   is not known and is therefore computed by the client implementation.\n  \n  Note: \n   \n    If you don&#039;t read all of the resultsets prior to executing the next query,\n    PHP will raise a warning and cancel all of the pending results. To get rid of\n    this, use sybase_free_result() which will cancel pending\n    results of an unbuffered query.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query\n     \n\n      \n      \n     \n\n    \n\n    \n\n     link_identifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     store_result\n     \n\n      \n       The optional store_result can be FALSE to\n       indicate the resultsets shouldn&#039;t be fetched into memory, thus\n       minimizing memory usage which is particularly interesting with very\n       large resultsets.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a positive Sybase result identifier on success, or FALSE on\n   error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sybase_unbuffered_query() example\n    \n\n&lt;?php$dbh&nbsp;=&nbsp;sybase_connect('SYBASE',&nbsp;'',&nbsp;'');$q&nbsp;=&nbsp;sybase_unbuffered_query('select&nbsp;firstname,&nbsp;lastname&nbsp;from&nbsp;huge_table',&nbsp;$dbh,&nbsp;false);sybase_data_seek($q,&nbsp;10000);$i&nbsp;=&nbsp;0;while&nbsp;($row&nbsp;=&nbsp;sybase_fetch_row($q))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$row[0],&nbsp;'&nbsp;',&nbsp;$row[1],&nbsp;'&lt;br&nbsp;\/&gt;';&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($i++&nbsp;&gt;&nbsp;40000)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}}sybase_free_result($q);sybase_close($dbh);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n \n  See Also\n  \n   \n    sybase_query() - Sends a Sybase query\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sybase-set-message-handler.php","title":"sybase_set_message_handler","description":"\n \n  sybase_set_message_handler\n  (PHP 4 &gt;= 4.3.0, PHP 5)sybase_set_message_handler &mdash; Sets the handler called when a server message is raised\n\n \n \n \n  Description\n  \n   bool sybase_set_message_handler\n    ( callback $handler\n   [, resource $link_identifier\n  ] )\n\n  \n   sybase_set_message_handler() sets a user function to\n   handle messages generated by the server. You may specify the name of a\n   global function, or use an array to specify an object reference and a\n   method name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handler\n     \n\n      \n       The handler expects five arguments in the following order: message\n       number, severity, state, line number and description.  The first four\n       are integers. The last is a string. If the function returns FALSE,\n       PHP generates an ordinary error message.\n      \n     \n\n    \n\n    \n\n     link_identifier\n     \n\n      \n       If the link identifier isn&#039;t specified, the last opened link is assumed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.5\n       \n        The link_identifier parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sybase_set_message_handler() callback function\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;msg_handler($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;sybase_set_message_handler('msg_handler');?&gt;\n\n\n    \n\n   \n   \n    Example #2 sybase_set_message_handler() callback to a class\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;Sybase&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handler($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$sybase=&nbsp;new&nbsp;Sybase();&nbsp;&nbsp;&nbsp;&nbsp;sybase_set_message_handler(array($sybase,&nbsp;'handler'));?&gt;\n\n\n    \n\n   \n   \n    Example #3 sybase_set_message_handler() unhandled messages\n    \n\n&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Return&nbsp;FALSE&nbsp;from&nbsp;this&nbsp;function&nbsp;to&nbsp;indicate&nbsp;you&nbsp;can't&nbsp;handle&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;this.&nbsp;The&nbsp;error&nbsp;is&nbsp;printed&nbsp;out&nbsp;as&nbsp;a&nbsp;warning,&nbsp;the&nbsp;way&nbsp;you're&nbsp;used&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;to&nbsp;it&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;handler&nbsp;installed.&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;msg_handler($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(257&nbsp;==&nbsp;$msgnumber)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($msgnumber,&nbsp;$severity,&nbsp;$state,&nbsp;$line,&nbsp;$text);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;sybase_set_message_handler('msg_handler');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is only available when\nusing the CT library interface to Sybase, and not with the DB library.\n\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-autocommit.php","title":"odbc_autocommit","description":"\n \n  odbc_autocommit\n  (PHP 4, PHP 5)odbc_autocommit &mdash; Toggle autocommit behaviour\n\n \n \n  Description\n  \n   mixed odbc_autocommit\n    ( resource $connection_id\n   [, bool $OnOff = false\n  ] )\n\n  \n   Toggles autocommit behaviour.\n  \n  \n   By default, auto-commit is on for a connection.  Disabling\n   auto-commit is equivalent with starting a transaction.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     OnOff\n     \n\n      \n       If OnOff is TRUE, auto-commit is enabled, if\n       it is FALSE auto-commit is disabled.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Without the OnOff parameter, this function returns\n   auto-commit status for connection_id. Non-zero is\n   returned if auto-commit is on, 0 if it is off, or FALSE if an error\n   occurs.\n  \n  \n   If OnOff is set, this function returns TRUE on\n   success and FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    odbc_commit() - Commit an ODBC transaction\n    odbc_rollback() - Rollback a transaction\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-binmode.php","title":"odbc_binmode","description":"\n \n  odbc_binmode\n  (PHP 4, PHP 5)odbc_binmode &mdash; Handling of binary column data\n\n \n \n  Description\n  \n   bool odbc_binmode\n    ( resource $result_id\n   , int $mode\n   )\n\n  \n   Enables handling of binary column data. ODBC SQL types affected are\n   BINARY, VARBINARY, and\n   LONGVARBINARY.\n  \n  \n   When binary SQL data is converted to character C data, each byte\n   (8 bits) of source data is represented as two ASCII characters.\n   These characters are the ASCII character representation of the\n   number in its hexadecimal form. For example, a binary\n   00000001 is converted to\n   &quot;01&quot; and a binary 11111111\n   is converted to &quot;FF&quot;.\n   \n    LONGVARBINARY handling\n    \n     \n      \n       binmode\n       longreadlen\n       result\n      \n\n     \n\n     \n      \n       ODBC_BINMODE_PASSTHRU\n       0\n       passthru\n      \n\n      \n       ODBC_BINMODE_RETURN\n       0\n       passthru\n      \n\n      \n       ODBC_BINMODE_CONVERT\n       0\n       passthru\n      \n\n      \n       ODBC_BINMODE_PASSTHRU\n       0\n       passthru\n      \n\n      \n       ODBC_BINMODE_PASSTHRU\n       &gt;0\n       passthru\n      \n\n      \n       ODBC_BINMODE_RETURN\n       &gt;0\n       return as is\n      \n\n      \n       ODBC_BINMODE_CONVERT\n       &gt;0\n       return as char\n      \n\n     \n    \n   \n\n  \n  \n   If odbc_fetch_into() is used, passthru means that an\n   empty string is returned for these columns.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n      \n       If result_id is 0, the\n       settings apply as default for new results.\n       Note: \n        \n         Default for longreadlen is 4096 and\n         mode defaults to\n         ODBC_BINMODE_RETURN. Handling of binary long\n         columns is also affected by odbc_longreadlen().\n        \n       \n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Possible values for mode are:\n       \n        \n         \n          ODBC_BINMODE_PASSTHRU: Passthru BINARY data\n         \n        \n        \n         \n          ODBC_BINMODE_RETURN: Return as is\n         \n        \n        \n         \n          ODBC_BINMODE_CONVERT: Convert to char and return\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-close-all.php","title":"odbc_close_all","description":"\n \n  odbc_close_all\n  (PHP 4, PHP 5)odbc_close_all &mdash; Close all ODBC connections\n\n \n \n  Description\n  \n   void odbc_close_all\n    ( void\n   )\n\n  \n   odbc_close_all() will close down all\n   connections to database server(s).\n  \n \n\n \n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Notes\n  Note: \n   \n    This function will fail if there are open transactions on a connection.\n    This connection will remain open in this case.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-close.php","title":"odbc_close","description":"\n \n  odbc_close\n  (PHP 4, PHP 5)odbc_close &mdash; Close an ODBC connection\n\n \n \n  Description\n  \n   void odbc_close\n    ( resource $connection_id\n   )\n\n  \n   Closes down the connection to the database server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Notes\n  Note: \n   \n    This function will fail if there are open transactions on this\n    connection. The connection will remain open in this case.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-columnprivileges.php","title":"odbc_columnprivileges","description":"\n \n  odbc_columnprivileges\n  (PHP 4, PHP 5)odbc_columnprivileges &mdash; Lists columns and associated privileges for the given table\n\n \n \n  Description\n  \n   resource odbc_columnprivileges\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table_name\n   , string $column_name\n   )\n\n  \n   Lists columns and associated privileges for the given table.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       The table name.\n      \n     \n\n    \n\n    \n\n     column_name\n     \n\n      \n       The column_name argument accepts search\n       patterns (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a\n       single character).\n      \n     \n\n    \n\n   \n\n  \n  \n   The owner, table_name, and\n   column_name accept search patterns (&#039;%&#039; to match\n   zero or more characters and &#039;_&#039; to match a single character).\n  \n \n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on failure.\n   This result identifier can be used to fetch a list of columns and\n   associated privileges.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    GRANTOR\n    GRANTEE\n    PRIVILEGE\n    IS_GRANTABLE\n   \n  \n  \n   The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and\n   TABLE_NAME.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-commit.php","title":"odbc_commit","description":"\n \n  odbc_commit\n  (PHP 4, PHP 5)odbc_commit &mdash; Commit an ODBC transaction\n\n \n \n  Description\n  \n   bool odbc_commit\n    ( resource $connection_id\n   )\n\n  \n   Commits all pending transactions on the connection.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-columns.php","title":"odbc_columns","description":"\n \n  odbc_columns\n  (PHP 4, PHP 5)odbc_columns &mdash; Lists the column names in specified tables\n\n \n \n  Description\n  \n   resource odbc_columns\n    ( resource $connection_id\n   [, string $qualifier\n   [, string $schema\n   [, string $table_name\n   [, string $column_name\n  ]]]] )\n\n  \n   Lists all columns in the requested range.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     schema\n     \n\n      \n       The owner.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       The table name.\n      \n     \n\n    \n\n    \n\n     column_name\n     \n\n      \n       The column name.\n      \n     \n\n    \n\n   \n\n  \n  \n   The schema, table_name, and\n   column_name accept search patterns (&#039;%&#039; to match\n   zero or more characters and &#039;_&#039; to match a single character).\n  \n \n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_SCHEM\n    TABLE_NAME\n    COLUMN_NAME\n    DATA_TYPE\n    TYPE_NAME\n    PRECISION\n    LENGTH\n    SCALE\n    RADIX\n    NULLABLE\n    REMARKS\n   \n  \n  \n   The result set is ordered by TABLE_QUALIFIER, TABLE_SCHEM and\n   TABLE_NAME.\n  \n \n\n \n  See Also\n  \n   \n    odbc_columnprivileges() - Lists columns and associated privileges for the given table to retrieve associated\n    privileges\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-data-source.php","title":"odbc_data_source","description":"\n \n  odbc_data_source\n  (PHP 4 &gt;= 4.3.0, PHP 5)odbc_data_source &mdash; Returns information about a current connection\n\n \n \n  Description\n  \n   array odbc_data_source\n    ( resource $connection_id\n   , int $fetch_type\n   )\n\n  \n   This function will return the list of available DSN (after calling it\n   several times).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     fetch_type\n     \n\n      \n       The fetch_type can be one of two constant types:\n       SQL_FETCH_FIRST, SQL_FETCH_NEXT.\n       Use SQL_FETCH_FIRST the first time this function is\n       called, thereafter use the SQL_FETCH_NEXT.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FALSE on error, and an array upon success.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-cursor.php","title":"odbc_cursor","description":"\n \n  odbc_cursor\n  (PHP 4, PHP 5)odbc_cursor &mdash; Get cursorname\n\n \n \n  Description\n  \n   string odbc_cursor\n    ( resource $result_id\n   )\n\n  \n   Gets the cursorname for the given result_id.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the cursor name, as a string.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-do.php","title":"odbc_do","description":"\n \n  odbc_do\n  (PHP 4, PHP 5)odbc_do &mdash; Alias of odbc_exec()\n\n \n \n  Description\n  \n   This function is an alias of: \n   odbc_exec().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-error.php","title":"odbc_error","description":"\n \n  odbc_error\n  (PHP 4 &gt;= 4.0.5, PHP 5)odbc_error &mdash; Get the last error code\n\n \n \n  Description\n  \n   string odbc_error\n    ([ resource $connection_id\n  ] )\n\n  \n   Returns a six-digit ODBC state, or an empty string if there has been no\n   errors.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If connection_id is specified, the last state\n   of that connection is returned, else the last state of any connection\n   is returned.\n  \n  \n   This function returns meaningful value only if last odbc query failed\n   (i.e. odbc_exec() returned FALSE).\n  \n \n\n \n  See Also\n  \n   \n    odbc_errormsg() - Get the last error message\n    odbc_exec() - Prepare and execute an SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-errormsg.php","title":"odbc_errormsg","description":"\n \n  odbc_errormsg\n  (PHP 4 &gt;= 4.0.5, PHP 5)odbc_errormsg &mdash; Get the last error message\n\n \n \n  Description\n  \n   string odbc_errormsg\n    ([ resource $connection_id\n  ] )\n\n  \n   Returns a string containing the last ODBC error message, or an empty\n   string if there has been no errors.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If connection_id is specified, the last state\n   of that connection is returned, else the last state of any connection\n   is returned.\n  \n  \n   This function returns meaningful value only if last odbc query failed\n   (i.e. odbc_exec() returned FALSE).\n  \n \n\n \n  See Also\n  \n   \n    odbc_error() - Get the last error code\n    odbc_exec() - Prepare and execute an SQL statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-connect.php","title":"odbc_connect","description":"\n \n  odbc_connect\n  (PHP 4, PHP 5)odbc_connect &mdash; Connect to a datasource\n\n \n \n \n  Description\n  \n   resource odbc_connect\n    ( string $dsn\n   , string $user\n   , string $password\n   [, int $cursor_type\n  ] )\n\n  \n   The connection id returned by this functions is needed by other\n   ODBC functions. You can have multiple connections open at once as long as\n   they either use different db or different credentials.\n  \n  \n   With some ODBC drivers, executing a complex stored procedure may\n   fail with an error similar to: &quot;Cannot open a cursor on a stored\n   procedure that has anything other than a single select statement\n   in it&quot;.  Using SQL_CUR_USE_ODBC may avoid that error. Also, some\n   drivers don&#039;t support the optional row_number parameter in\n   odbc_fetch_row(). SQL_CUR_USE_ODBC might help\n   in that case, too.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dsn\n     \n\n      \n       The database source name for the connection. Alternatively, a\n       DSN-less connection string can be used.\n      \n     \n\n    \n\n    \n\n     user\n     \n\n      \n       The username.\n      \n     \n\n    \n\n    \n\n     password\n     \n\n      \n       The password.\n      \n     \n\n    \n\n    \n\n     cursor_type\n     \n\n      \n       This sets the type of cursor to be used\n       for this connection. This parameter is not normally needed, but\n       can be useful for working around problems with some ODBC drivers.\n      \n      \n       The following constants are defined for cursortype:\n      \n      \n       \n        \n         \n          SQL_CUR_USE_IF_NEEDED\n         \n        \n        \n         \n          SQL_CUR_USE_ODBC\n         \n        \n        \n         \n          SQL_CUR_USE_DRIVER\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC connection id or 0 (FALSE) on\n   error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 DSN-less connections\n    \n\n&lt;?php\/\/&nbsp;Microsoft&nbsp;SQL&nbsp;Server&nbsp;using&nbsp;the&nbsp;SQL&nbsp;Native&nbsp;Client&nbsp;10.0&nbsp;ODBC&nbsp;Driver&nbsp;-&nbsp;allows&nbsp;connection&nbsp;to&nbsp;SQL&nbsp;7,&nbsp;2000,&nbsp;2005&nbsp;and&nbsp;2008$connection&nbsp;=&nbsp;odbc_connect(\"Driver={SQL&nbsp;Server&nbsp;Native&nbsp;Client&nbsp;10.0};Server=$server;Database=$database;\",&nbsp;$user,&nbsp;$password);\/\/&nbsp;Microsoft&nbsp;Access$connection&nbsp;=&nbsp;odbc_connect(\"Driver={Microsoft&nbsp;Access&nbsp;Driver&nbsp;(*.mdb)};Dbq=$mdbFilename\",&nbsp;$user,&nbsp;$password);\/\/&nbsp;Microsoft&nbsp;Excel$excelFile&nbsp;=&nbsp;realpath('C:\/ExcelData.xls');$excelDir&nbsp;=&nbsp;dirname($excelFile);$connection&nbsp;=&nbsp;odbc_connect(\"Driver={Microsoft&nbsp;Excel&nbsp;Driver&nbsp;(*.xls)};DriverId=790;Dbq=$excelFile;DefaultDir=$excelDir\"&nbsp;,&nbsp;'',&nbsp;'');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    For persistent connections: odbc_pconnect() - Open a persistent database connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-execute.php","title":"odbc_execute","description":"\n \n  odbc_execute\n  (PHP 4, PHP 5)odbc_execute &mdash; Execute a prepared statement\n\n \n \n \n  Description\n  \n   bool odbc_execute\n    ( resource $result_id\n   [, array $parameters_array\n  ] )\n\n  \n   Executes a statement prepared with odbc_prepare().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result id resource, from odbc_prepare().\n      \n     \n\n    \n\n    \n\n     parameters_array\n     \n\n      \n       Parameters in parameter_array will be\n       substituted for placeholders in the prepared statement in order.\n       Elements of this array will be converted to strings by calling this\n       function.\n      \n      \n       Any parameters in parameter_array which\n       start and end with single quotes will be taken as the name of a\n       file to read and send to the database server as the data for the\n       appropriate placeholder.\n      \n      \n       If you wish to store a string which actually begins and ends with\n       single quotes, you must add a space or other non-single-quote character\n       to the beginning or end of the parameter, which will prevent the\n       parameter from being taken as a file name. If this is not an option,\n       then you must use another mechanism to store the string, such as\n       executing the query directly with odbc_exec()).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 odbc_execute() and odbc_prepare() example\n    \n     In the following code, $success will only be\n     TRUE if all three parameters to myproc are IN parameters:\n    \n    \n\n&lt;?php$a&nbsp;=&nbsp;1;$b&nbsp;=&nbsp;2;$c&nbsp;=&nbsp;3;$stmt&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;'CALL&nbsp;myproc(?,?,?)');$success&nbsp;=&nbsp;odbc_execute($stmt,&nbsp;array($a,&nbsp;$b,&nbsp;$c));?&gt;\n\n\n    \n\n   \n  \n  \n   If you need to call a stored procedure using INOUT or OUT parameters,\n   the recommended workaround is to use a native extension for your database\n   (for example, mssql for MS SQL Server,\n   or oci8 for Oracle).\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        File reading is now subject to safe mode and\n        open-basedir restrictions\n        in parameters_array.\n       \n      \n\n      \n       4.1.1\n       \n        Remote files\n        are no longer supported in parameters_array.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    odbc_prepare() - Prepares a statement for execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-exec.php","title":"odbc_exec","description":"\n \n  odbc_exec\n  (PHP 4, PHP 5)odbc_exec &mdash; Prepare and execute an SQL statement\n\n \n \n  Description\n  \n   resource odbc_exec\n    ( resource $connection_id\n   , string $query_string\n   [, int $flags\n  ] )\n\n  \n   Sends an SQL statement to the database server.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     query_string\n     \n\n      \n       The SQL statement.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       This parameter is currently not used.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an ODBC result identifier if the SQL command was executed\n   successfully, or FALSE on error.\n  \n \n\n \n  See Also\n  \n   \n    odbc_prepare() - Prepares a statement for execution\n    odbc_execute() - Execute a prepared statement\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-array.php","title":"odbc_fetch_array","description":"\n \n  odbc_fetch_array\n  (PHP 4 &gt;= 4.0.2, PHP 5)odbc_fetch_array &mdash; Fetch a result row as an associative array\n\n \n\n \n  Description\n  \n   array odbc_fetch_array\n    ( resource $result\n   [, int $rownumber\n  ] )\n\n  \n   Fetch an associative array from an ODBC query. See the \n   changelog below for when this function is available.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result resource from odbc_exec().\n      \n     \n\n    \n\n    \n\n     rownumber\n     \n\n      \n       Optionally choose which row number to retrieve.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row, or FALSE if there \n   are no more rows.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        This function exists when compiled with IBM DB2 or UnixODBC support.\n       \n      \n\n      \n       4.3.2\n       \n        This function exists when compiled for Windows.\n       \n      \n\n      \n       4.0.2\n       \n        This function exists when compiled with DBMaker support.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    odbc_fetch_row() - Fetch a row\n    odbc_fetch_object() - Fetch a result row as an object\n    odbc_num_rows() - Number of rows in a result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-object.php","title":"odbc_fetch_object","description":"\n \n  odbc_fetch_object\n  (PHP 4 &gt;= 4.0.2, PHP 5)odbc_fetch_object &mdash; Fetch a result row as an object\n\n \n\n \n  Description\n  \n   object odbc_fetch_object\n    ( resource $result\n   [, int $rownumber\n  ] )\n\n  \n   Fetch an object from an ODBC query. See the changelog below\n   for when this function is available.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result\n     \n\n      \n       The result resource from odbc_exec().\n      \n     \n\n    \n\n    \n\n     rownumber\n     \n\n      \n       Optionally choose which row number to retrieve.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an object that corresponds to the fetched row, or FALSE if there \n   are no more rows.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        This function exists when compiled with IBM DB2 or UnixODBC support.\n       \n      \n\n      \n       4.3.2\n       \n        This function exists when compiled for Windows.\n       \n      \n\n      \n       4.0.2\n       \n        This function exists when compiled with DBMaker support.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    odbc_fetch_row() - Fetch a row\n    odbc_fetch_array() - Fetch a result row as an associative array\n    odbc_num_rows() - Number of rows in a result\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-into.php","title":"odbc_fetch_into","description":"\n \n  odbc_fetch_into\n  (PHP 4, PHP 5)odbc_fetch_into &mdash; Fetch one result row into array\n\n \n \n \n  Description\n  \n   int odbc_fetch_into\n    ( resource $result_id\n   , array &$result_array\n   [, int $rownumber\n  ] )\n\n  \n   Fetch one result row into array.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result resource.\n      \n     \n\n    \n\n    \n\n     result_array\n     \n\n      \n       The result array\n       that can be of any type since it will be converted to type\n       array. The array will contain the column values starting at array\n       index 0.\n      \n     \n\n    \n\n    \n\n     rownumber\n     \n\n      \n       The row number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of columns in the result;\n   FALSE on error.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The result_array and rownumber\n        parameters have been swapped. This allows the rownumber to be a constant again. \n       \n      \n\n      \n       4.0.6\n       \n        The rownumber can no longer be passed in as a\n        constant, but rather as a variable. This again changed in 4.2.0.\n       \n      \n\n      \n       4.0.5\n       \n        The result_array parameter no longer needs to\n        be passed in by reference.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 odbc_fetch_into() examples\n    \n\n&lt;?php$rc&nbsp;=&nbsp;odbc_fetch_into($res_id,&nbsp;$my_array);?&gt;\n\n\n    \n\n    \n     or\n    \n    \n\n&lt;?php$rc&nbsp;=&nbsp;odbc_fetch_into($res_id,&nbsp;$my_array,&nbsp;2);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-len.php","title":"odbc_field_len","description":"\n \n  odbc_field_len\n  (PHP 4, PHP 5)odbc_field_len &mdash; Get the length (precision) of a field\n\n \n \n  Description\n  \n   int odbc_field_len\n    ( resource $result_id\n   , int $field_number\n   )\n\n  \n   Gets the length of the field referenced by number in the given result\n   identifier.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     field_number\n     \n\n      \n       The field number. Field numbering starts at 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the field name as a string, or FALSE on error.\n  \n \n\n \n  See Also\n  \n   \n    odbc_field_scale() - Get the scale of a field to get the scale of a\n    floating point number\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-num.php","title":"odbc_field_num","description":"\n \n  odbc_field_num\n  (PHP 4, PHP 5)odbc_field_num &mdash; Return column number\n\n \n \n  Description\n  \n   int odbc_field_num\n    ( resource $result_id\n   , string $field_name\n   )\n\n  \n   Gets the number of the column slot that corresponds to the named field in\n   the given result identifier.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     field_name\n     \n\n      \n       The field name.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the field number as a integer, or FALSE on error.\n   Field numbering starts at 1.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-fetch-row.php","title":"odbc_fetch_row","description":"\n \n  odbc_fetch_row\n  (PHP 4, PHP 5)odbc_fetch_row &mdash; Fetch a row\n\n \n \n  Description\n  \n   bool odbc_fetch_row\n    ( resource $result_id\n   [, int $row_number\n  ] )\n\n  \n   Fetches a row of the data that was returned by odbc_do()\n   or odbc_exec(). After odbc_fetch_row()\n   is called, the fields of that row can be accessed with\n   odbc_result().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     row_number\n     \n\n      \n       If row_number is not specified,\n       odbc_fetch_row() will try to fetch the next row in\n       the result set. Calls to odbc_fetch_row() with and\n       without row_number can be mixed.\n      \n      \n       To step through the result more than once, you can call\n       odbc_fetch_row() with\n       row_number 1, and then continue doing\n       odbc_fetch_row() without\n       row_number to review the result.  If a driver\n       doesn&#039;t support fetching rows by number, the\n       row_number parameter is ignored.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if there was a row, FALSE otherwise.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-precision.php","title":"odbc_field_precision","description":"\n \n  odbc_field_precision\n  (PHP 4, PHP 5)odbc_field_precision &mdash; Alias of odbc_field_len()\n\n \n \n  Description\n  \n   This function is an alias of: \n   odbc_field_len().\n  \n \n\n \n  See Also\n  \n   \n    odbc_field_scale() - Get the scale of a field to get the scale of a\n    floating point number.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-name.php","title":"odbc_field_name","description":"\n \n  odbc_field_name\n  (PHP 4, PHP 5)odbc_field_name &mdash; Get the columnname\n\n \n \n  Description\n  \n   string odbc_field_name\n    ( resource $result_id\n   , int $field_number\n   )\n\n  \n   Gets the name of the field occupying the given column number in the given\n   result identifier.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     field_number\n     \n\n      \n       The field number. Field numbering starts at 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the field name as a string, or FALSE on error.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-scale.php","title":"odbc_field_scale","description":"\n \n  odbc_field_scale\n  (PHP 4, PHP 5)odbc_field_scale &mdash; Get the scale of a field\n\n \n \n  Description\n  \n   int odbc_field_scale\n    ( resource $result_id\n   , int $field_number\n   )\n\n  \n   Gets the scale of the field referenced by number in the given result\n   identifier.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     field_number\n     \n\n      \n       The field number. Field numbering starts at 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the field scale as a integer, or FALSE on error.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-field-type.php","title":"odbc_field_type","description":"\n \n  odbc_field_type\n  (PHP 4, PHP 5)odbc_field_type &mdash; Datatype of a field\n\n \n \n  Description\n  \n   string odbc_field_type\n    ( resource $result_id\n   , int $field_number\n   )\n\n  \n   Gets the SQL type of the field referenced by number in the given result\n   identifier.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     field_number\n     \n\n      \n       The field number. Field numbering starts at 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the field type as a string, or FALSE on error.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-foreignkeys.php","title":"odbc_foreignkeys","description":"\n \n  odbc_foreignkeys\n  (PHP 4, PHP 5)odbc_foreignkeys &mdash; Retrieves a list of foreign keys\n\n \n \n \n  Description\n  \n   resource odbc_foreignkeys\n    ( resource $connection_id\n   , string $pk_qualifier\n   , string $pk_owner\n   , string $pk_table\n   , string $fk_qualifier\n   , string $fk_owner\n   , string $fk_table\n   )\n\n  \n   Retrieves a list of foreign keys in the specified table or a list of\n   foreign keys in other tables that refer to the primary key in the\n   specified table\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     pk_qualifier\n     \n\n      \n       The primary key qualifier.\n      \n     \n\n    \n\n    \n\n     pk_owner\n     \n\n      \n       The primary key owner.\n      \n     \n\n    \n\n    \n\n     pk_table\n     \n\n      \n       The primary key table.\n      \n     \n\n    \n\n    \n\n     fk_qualifier\n     \n\n      \n       The foreign key qualifier.\n      \n     \n\n    \n\n    \n\n     fk_owner\n     \n\n      \n       The foreign key owner.\n      \n     \n\n    \n\n    \n\n     fk_table\n     \n\n      \n       The foreign key table.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    PKTABLE_QUALIFIER\n    PKTABLE_OWNER\n    PKTABLE_NAME\n    PKCOLUMN_NAME\n    FKTABLE_QUALIFIER\n    FKTABLE_OWNER\n    FKTABLE_NAME\n    FKCOLUMN_NAME\n    KEY_SEQ\n    UPDATE_RULE\n    DELETE_RULE\n    FK_NAME\n    PK_NAME\n   \n  \n  \n   If pk_table contains a table name,\n   odbc_foreignkeys() returns a result set\n   containing the primary key of the specified table and all of the\n   foreign keys that refer to it.\n  \n  \n   If fk_table contains a table name,\n   odbc_foreignkeys() returns a result set\n   containing all of the foreign keys in the specified table and the\n   primary keys (in other tables) to which they refer.\n  \n  \n   If both pk_table and\n   fk_table contain table names,\n   odbc_foreignkeys() returns the foreign keys in\n   the table specified in fk_table that refer\n   to the primary key of the table specified in\n   pk_table. This should be one key at most.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-free-result.php","title":"odbc_free_result","description":"\n \n  odbc_free_result\n  (PHP 4, PHP 5)odbc_free_result &mdash; Free resources associated with a result\n\n \n \n  Description\n  \n   bool odbc_free_result\n    ( resource $result_id\n   )\n\n  \n   Free resources associated with a result.\n  \n  \n   odbc_free_result() only needs to be called if you are\n   worried about using too much memory while your script is running.\n   All result memory will automatically be freed when the script is finished.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Always returns TRUE.\n  \n \n\n \n  Notes\n  Note: \n   \n    If auto-commit is disabled (see odbc_autocommit()) and\n    you call odbc_free_result() before committing, all\n    pending transactions are rolled back.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-gettypeinfo.php","title":"odbc_gettypeinfo","description":"\n \n  odbc_gettypeinfo\n  (PHP 4, PHP 5)odbc_gettypeinfo &mdash; Retrieves information about data types supported by the data source\n\n \n \n \n  Description\n  \n   resource odbc_gettypeinfo\n    ( resource $connection_id\n   [, int $data_type\n  ] )\n\n  \n   Retrieves information about data types supported by the data source.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     data_type\n     \n\n      \n       The data type, which can be used to restrict the information to a\n       single data type.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier or\n   FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TYPE_NAME\n    DATA_TYPE\n    PRECISION\n    LITERAL_PREFIX\n    LITERAL_SUFFIX\n    CREATE_PARAMS\n    NULLABLE\n    CASE_SENSITIVE\n    SEARCHABLE\n    UNSIGNED_ATTRIBUTE\n    MONEY\n    AUTO_INCREMENT\n    LOCAL_TYPE_NAME\n    MINIMUM_SCALE\n    MAXIMUM_SCALE\n   \n  \n  \n   The result set is ordered by DATA_TYPE and TYPE_NAME.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-next-result.php","title":"odbc_next_result","description":"\n \n  odbc_next_result\n  (PHP 4 &gt;= 4.0.5, PHP 5)odbc_next_result &mdash; Checks if multiple results are available\n\n \n \n  Description\n  \n   bool odbc_next_result\n    ( resource $result_id\n   )\n\n  \n   Checks if there are more result sets available as well as allowing access\n   to the next result set via odbc_fetch_array(),\n   odbc_fetch_row(), odbc_result(), etc.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if there are more result sets, FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 odbc_next_result()\n    \n\n&lt;?php$r_Connection&nbsp;=&nbsp;odbc_connect($dsn,&nbsp;$username,&nbsp;$password);$s_SQL&nbsp;=&nbsp;&lt;&lt;&lt;END_SQLSELECT&nbsp;'A'SELECT&nbsp;'B'SELECT&nbsp;'C'END_SQL;$r_Results&nbsp;=&nbsp;odbc_exec($r_Connection,&nbsp;$s_SQL);$a_Row1&nbsp;=&nbsp;odbc_fetch_array($r_Results);$a_Row2&nbsp;=&nbsp;odbc_fetch_array($r_Results);echo&nbsp;\"Dump&nbsp;first&nbsp;result&nbsp;set\";var_dump($a_Row1,&nbsp;$a_Row2);echo&nbsp;\"Get&nbsp;second&nbsp;results&nbsp;set&nbsp;\";var_dump(odbc_next_result($r_Results));$a_Row1&nbsp;=&nbsp;odbc_fetch_array($r_Results);$a_Row2&nbsp;=&nbsp;odbc_fetch_array($r_Results);echo&nbsp;\"Dump&nbsp;second&nbsp;result&nbsp;set&nbsp;\";var_dump($a_Row1,&nbsp;$a_Row2);echo&nbsp;\"Get&nbsp;third&nbsp;results&nbsp;set&nbsp;\";var_dump(odbc_next_result($r_Results));$a_Row1&nbsp;=&nbsp;odbc_fetch_array($r_Results);$a_Row2&nbsp;=&nbsp;odbc_fetch_array($r_Results);echo&nbsp;\"Dump&nbsp;third&nbsp;result&nbsp;set&nbsp;\";var_dump($a_Row1,&nbsp;$a_Row2);echo&nbsp;\"Try&nbsp;for&nbsp;a&nbsp;fourth&nbsp;result&nbsp;set&nbsp;\";var_dump(odbc_next_result($r_Results));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nDump first result set array(1) {\n  [&quot;A&quot;]=&gt;\n  string(1) &quot;A&quot;\n}\nbool(false)\nGet second results set bool(true)\nDump second result set array(1) {\n  [&quot;B&quot;]=&gt;\n  string(1) &quot;B&quot;\n}\nbool(false)\nGet third results set bool(true)\nDump third result set array(1) {\n  [&quot;C&quot;]=&gt;\n  string(1) &quot;C&quot;\n}\nbool(false)\nTry for a fourth result set bool(false)\n\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-num-fields.php","title":"odbc_num_fields","description":"\n \n  odbc_num_fields\n  (PHP 4, PHP 5)odbc_num_fields &mdash; Number of columns in a result\n\n \n \n  Description\n  \n   int odbc_num_fields\n    ( resource $result_id\n   )\n\n  \n   Gets the number of fields (columns) in an ODBC result.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier returned by odbc_exec().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of fields, or -1 on error.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-longreadlen.php","title":"odbc_longreadlen","description":"\n \n  odbc_longreadlen\n  (PHP 4, PHP 5)odbc_longreadlen &mdash; Handling of LONG columns\n\n \n \n  Description\n  \n   bool odbc_longreadlen\n    ( resource $result_id\n   , int $length\n   )\n\n  \n   Enables handling of LONG and LONGVARBINARY columns.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of bytes returned to PHP is controlled by the parameter\n       length. If it is set to 0, Long column data is passed through to the\n       client.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Notes\n  Note: \n   \n    Handling of LONGVARBINARY columns is also affected by\n    odbc_binmode().\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-pconnect.php","title":"odbc_pconnect","description":"\n \n  odbc_pconnect\n  (PHP 4, PHP 5)odbc_pconnect &mdash; Open a persistent database connection\n\n \n \n \n  Description\n  \n   resource odbc_pconnect\n    ( string $dsn\n   , string $user\n   , string $password\n   [, int $cursor_type\n  ] )\n\n  \n   Opens a persistent database connection.\n  \n  \n   This function is much like\n   odbc_connect(), except that the connection is\n   not really closed when the script has finished.  Future requests\n   for a connection with the same dsn,\n   user, password\n   combination (via odbc_connect() and\n   odbc_pconnect()) can reuse the persistent\n   connection.\n  \n \n\n\n \n  Parameters\n  \n   See odbc_connect() for details.\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC connection id or 0 (FALSE) on\n   error.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Persistent connections have no effect if PHP is used as a CGI\n    program.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    odbc_connect() - Connect to a datasource\n    Persistent Database Connections\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-num-rows.php","title":"odbc_num_rows","description":"\n \n  odbc_num_rows\n  (PHP 4, PHP 5)odbc_num_rows &mdash; Number of rows in a result\n\n \n \n  Description\n  \n   int odbc_num_rows\n    ( resource $result_id\n   )\n\n  \n   Gets the number of rows in a result. For INSERT, UPDATE and DELETE\n   statements odbc_num_rows() returns the number of rows\n   affected.  For a SELECT clause this can be the number\n   of rows available.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier returned by odbc_exec().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of rows in an ODBC result.\n   This function will return -1 on error.\n  \n \n\n \n  Notes\n  Note: \n   \n    Using odbc_num_rows() to determine the number of rows\n    available after a SELECT will return -1 with many drivers.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-primarykeys.php","title":"odbc_primarykeys","description":"\n \n  odbc_primarykeys\n  (PHP 4, PHP 5)odbc_primarykeys &mdash; Gets the primary keys for a table\n\n \n \n  Description\n  \n   resource odbc_primarykeys\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table\n   )\n\n  \n   Returns a result identifier that can be used to fetch the column names\n   that comprise the primary key for a table.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n      \n     \n\n    \n\n    \n\n     table\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    COLUMN_NAME\n    KEY_SEQ\n    PK_NAME\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-prepare.php","title":"odbc_prepare","description":"\n \n  odbc_prepare\n  (PHP 4, PHP 5)odbc_prepare &mdash; Prepares a statement for execution\n\n \n \n \n  Description\n  \n   resource odbc_prepare\n    ( resource $connection_id\n   , string $query_string\n   )\n\n  \n   Prepares a statement for execution. The result identifier can be used\n   later to execute the statement with odbc_execute().\n  \n  \n   Some databases (such as IBM DB2, MS SQL Server, and Oracle) support\n   stored procedures that accept parameters of type IN, INOUT, and OUT as\n   defined by the ODBC specification.  However, the Unified ODBC driver\n   currently only supports parameters of type IN to stored procedures.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     query_string\n     \n\n      \n       The query string statement being prepared.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier if the SQL command was prepared\n   successfully. Returns FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 odbc_execute() and odbc_prepare() example\n    \n     In the following code, $success will only be\n     TRUE if all three parameters to myproc are IN parameters:\n    \n    \n\n&lt;?php$a&nbsp;=&nbsp;1;$b&nbsp;=&nbsp;2;$c&nbsp;=&nbsp;3;$stmt&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;'CALL&nbsp;myproc(?,?,?)');$success&nbsp;=&nbsp;odbc_execute($stmt,&nbsp;array($a,&nbsp;$b,&nbsp;$c));?&gt;\n\n\n    \n\n   \n  \n  \n   If you need to call a stored procedure using INOUT or OUT parameters,\n   the recommended workaround is to use a native extension for your database\n   (for example, mssql for MS SQL Server,\n   or oci8 for Oracle).\n  \n \n\n\n \n  See Also\n  \n   \n    odbc_execute() - Execute a prepared statement\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-procedurecolumns.php","title":"odbc_procedurecolumns","description":"\n \n  odbc_procedurecolumns\n  (PHP 4, PHP 5)odbc_procedurecolumns &mdash; Retrieve information about parameters to procedures\n\n \n \n \n  Description\n  \n   resource odbc_procedurecolumns\n    ( resource $connection_id\n   )\n\n  \n   resource odbc_procedurecolumns\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $proc\n   , string $column\n   )\n\n  \n   Retrieve information about parameters to procedures.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character.\n      \n     \n\n    \n\n    \n\n     proc\n     \n\n      \n       The proc.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character.\n      \n     \n\n    \n\n    \n\n     column\n     \n\n      \n       The column.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the list of input and output parameters, as well as the\n   columns that make up the result set for the specified procedures. \n   Returns an ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    PROCEDURE_QUALIFIER\n    PROCEDURE_OWNER\n    PROCEDURE_NAME\n    COLUMN_NAME\n    COLUMN_TYPE\n    DATA_TYPE\n    TYPE_NAME\n    PRECISION\n    LENGTH\n    SCALE\n    RADIX\n    NULLABLE\n    REMARKS\n   \n  \n  \n   The result set is ordered by PROCEDURE_QUALIFIER, PROCEDURE_OWNER,\n   PROCEDURE_NAME and COLUMN_TYPE.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-procedures.php","title":"odbc_procedures","description":"\n \n  odbc_procedures\n  (PHP 4, PHP 5)odbc_procedures &mdash; Get the list of procedures stored in a specific data source\n\n \n \n \n  Description\n  \n   resource odbc_procedures\n    ( resource $connection_id\n   )\n\n  \n   resource odbc_procedures\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $name\n   )\n\n  \n   Lists all procedures in the requested range.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character.\n      \n     \n\n    \n\n    \n\n     name\n     \n\n      \n       The name.\n       This parameter accepts the following search patterns:\n&quot;%&quot; to match zero or more characters, and &quot;_&quot; to match a single character.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC\n   result identifier containing the information or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    PROCEDURE_QUALIFIER\n    PROCEDURE_OWNER\n    PROCEDURE_NAME\n    NUM_INPUT_PARAMS\n    NUM_OUTPUT_PARAMS\n    NUM_RESULT_SETS\n    REMARKS\n    PROCEDURE_TYPE\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-rollback.php","title":"odbc_rollback","description":"\n \n  odbc_rollback\n  (PHP 4, PHP 5)odbc_rollback &mdash; Rollback a transaction\n\n \n \n  Description\n  \n   bool odbc_rollback\n    ( resource $connection_id\n   )\n\n  \n   Rolls back all pending statements on the connection.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-setoption.php","title":"odbc_setoption","description":"\n \n  odbc_setoption\n  (PHP 4, PHP 5)odbc_setoption &mdash; Adjust ODBC settings\n\n \n \n \n  Description\n  \n   bool odbc_setoption\n    ( resource $id\n   , int $function\n   , int $option\n   , int $param\n   )\n\n  \n   This function allows fiddling with the ODBC options for a\n   particular connection or query result.  It was written to help\n   find work around to problems in quirky ODBC drivers.  You should\n   probably only use this function if you are an ODBC programmer and\n   understand the effects the various options will have.  You will\n   certainly need a good ODBC reference to explain all the different\n   options and values that can be used.  Different driver versions\n   support different options.\n  \n  \n   Because the effects may vary depending on the ODBC driver, use of\n   this function in scripts to be made publicly available is\n   strongly discouraged.  Also, some ODBC options are not available\n   to this function because they must be set before the connection\n   is established or the query is prepared.  However, if on a\n   particular job it can make PHP work so your boss doesn&#039;t tell you\n   to use a commercial product, that&#039;s all that really\n   matters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     id\n     \n\n      \n       Is a connection id or result id on which to change the settings.\n       For SQLSetConnectOption(), this is a connection id.\n       For SQLSetStmtOption(), this is a result id.\n      \n     \n\n    \n\n    \n\n     function\n     \n\n      \n       Is the ODBC function to use. The value should be\n       1 for SQLSetConnectOption() and\n       2 for SQLSetStmtOption().\n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       The option to set.\n      \n     \n\n    \n\n    \n\n     param\n     \n\n      \n       The value for the given option.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 odbc_setoption() examples\n    \n\n&lt;?php\/\/&nbsp;1.&nbsp;Option&nbsp;102&nbsp;of&nbsp;SQLSetConnectOption()&nbsp;is&nbsp;SQL_AUTOCOMMIT.\/\/&nbsp;&nbsp;&nbsp;&nbsp;Value&nbsp;1&nbsp;of&nbsp;SQL_AUTOCOMMIT&nbsp;is&nbsp;SQL_AUTOCOMMIT_ON.\/\/&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;example&nbsp;has&nbsp;the&nbsp;same&nbsp;effect&nbsp;as\/\/&nbsp;&nbsp;&nbsp;&nbsp;odbc_autocommit($conn,&nbsp;true);odbc_setoption($conn,&nbsp;1,&nbsp;102,&nbsp;1);\/\/&nbsp;2.&nbsp;Option&nbsp;0&nbsp;of&nbsp;SQLSetStmtOption()&nbsp;is&nbsp;SQL_QUERY_TIMEOUT.\/\/&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;example&nbsp;sets&nbsp;the&nbsp;query&nbsp;to&nbsp;timeout&nbsp;after&nbsp;30&nbsp;seconds.$result&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;$sql);odbc_setoption($result,&nbsp;2,&nbsp;0,&nbsp;30);odbc_execute($result);?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-result-all.php","title":"odbc_result_all","description":"\n \n  odbc_result_all\n  (PHP 4, PHP 5)odbc_result_all &mdash; Print result as HTML table\n\n \n \n  Description\n  \n   int odbc_result_all\n    ( resource $result_id\n   [, string $format\n  ] )\n\n  \n   Prints all rows from a result identifier produced by\n   odbc_exec(). The result is printed in HTML table format.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The result identifier.\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       Additional overall table formatting.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the number of rows in the result or FALSE on error.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-specialcolumns.php","title":"odbc_specialcolumns","description":"\n \n  odbc_specialcolumns\n  (PHP 4, PHP 5)odbc_specialcolumns &mdash; Retrieves special columns\n\n \n \n \n  Description\n  \n   resource odbc_specialcolumns\n    ( resource $connection_id\n   , int $type\n   , string $qualifier\n   , string $owner\n   , string $table\n   , int $scope\n   , int $nullable\n   )\n\n  \n   Retrieves either the optimal set of columns that uniquely identifies a\n   row in the table, or columns that are automatically updated when any\n   value in the row is updated by a transaction.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     type\n     \n\n      \n       When the type argument is SQL_BEST_ROWID,\n       odbc_specialcolumns() returns the\n       column or columns that uniquely identify each row in the table.\n      \n      \n       When the type argument is SQL_ROWVER,\n       odbc_specialcolumns() returns the column or columns in the\n       specified table, if any, that are automatically updated by the data source\n       when any value in the row is updated by any transaction.\n      \n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner.\n      \n     \n\n    \n\n    \n\n     table\n     \n\n      \n       The table.\n      \n     \n\n    \n\n    \n\n     scope\n     \n\n      \n       The scope, which orders the result set.\n      \n     \n\n    \n\n    \n\n     nullable\n     \n\n      \n       The nullable option.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on\n   failure.\n  \n  \n   The result set has the following columns:\n   \n    SCOPE\n    COLUMN_NAME\n    DATA_TYPE\n    TYPE_NAME\n    PRECISION\n    LENGTH\n    SCALE\n    PSEUDO_COLUMN\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-statistics.php","title":"odbc_statistics","description":"\n \n  odbc_statistics\n  (PHP 4, PHP 5)odbc_statistics &mdash; Retrieve statistics about a table\n\n \n \n \n  Description\n  \n   resource odbc_statistics\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $table_name\n   , int $unique\n   , int $accuracy\n   )\n\n  \n   Get statistics about a table and its indexes.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner.\n      \n     \n\n    \n\n    \n\n     table_name\n     \n\n      \n       The table name.\n      \n     \n\n    \n\n    \n\n     unique\n     \n\n      \n       The unique attribute.\n      \n     \n\n    \n\n    \n\n     accuracy\n     \n\n      \n       The accuracy.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    NON_UNIQUE\n    INDEX_QUALIFIER\n    INDEX_NAME\n    TYPE\n    SEQ_IN_INDEX\n    COLUMN_NAME\n    COLLATION\n    CARDINALITY\n    PAGES\n    FILTER_CONDITION\n   \n  \n  \n   The result set is ordered by NON_UNIQUE, TYPE, INDEX_QUALIFIER,\n   INDEX_NAME and SEQ_IN_INDEX.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-tableprivileges.php","title":"odbc_tableprivileges","description":"\n \n  odbc_tableprivileges\n  (PHP 4, PHP 5)odbc_tableprivileges &mdash; Lists tables and the privileges associated with each table\n\n \n \n \n  Description\n  \n   resource odbc_tableprivileges\n    ( resource $connection_id\n   , string $qualifier\n   , string $owner\n   , string $name\n   )\n\n  \n   Lists tables in the requested range and the privileges associated\n   with each table.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner. Accepts the following search patterns:\n       (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)\n      \n     \n\n    \n\n    \n\n     name\n     \n\n      \n       The name. Accepts the following search patterns:\n       (&#039;%&#039; to match zero or more characters and &#039;_&#039; to match a single character)\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   An ODBC result identifier or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    GRANTOR\n    GRANTEE\n    PRIVILEGE\n    IS_GRANTABLE\n   \n  \n  \n   The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and\n   TABLE_NAME.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-result.php","title":"odbc_result","description":"\n \n  odbc_result\n  (PHP 4, PHP 5)odbc_result &mdash; Get result data\n\n \n \n \n  Description\n  \n   mixed odbc_result\n    ( resource $result_id\n   , mixed $field\n   )\n\n  \n   Get result data\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     result_id\n     \n\n      \n       The ODBC resource.\n      \n     \n\n    \n\n    \n\n     field\n     \n\n      \n       The field name being retrieved. It can either be an integer containing\n       the column number of the field you want; or it can be a string\n       containing the name of the field.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the string contents of the field, FALSE on error, NULL for\n   NULL data, or TRUE for binary data.\n  \n \n\n\n \n  Examples\n  \n   The first call to odbc_result() returns the\n   value of the third field in the current record of the query\n   result. The second function call to\n   odbc_result() returns the value of the field\n   whose field name is &quot;val&quot; in the current record of the query\n   result. An error occurs if a column number parameter for a field\n   is less than one or exceeds the number of columns (or fields) in\n   the current record. Similarly, an error occurs if a field with a\n   name that is not one of the fieldnames of the table(s) that\n   is(are) being queried.\n  \n  \n   \n    Example #1 odbc_result() examples\n    \n\n&lt;?php$item_3&nbsp;&nbsp;&nbsp;=&nbsp;odbc_result($Query_ID,&nbsp;3);$item_val&nbsp;=&nbsp;odbc_result($Query_ID,&nbsp;\"val\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   Field indices start from 1. Regarding the way binary or\n   long column data is returned refer to\n   odbc_binmode() and\n   odbc_longreadlen().\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.odbc-tables.php","title":"odbc_tables","description":"\n \n  odbc_tables\n  (PHP 4, PHP 5)odbc_tables &mdash; Get the list of table names stored in a specific data source\n\n \n \n \n  Description\n  \n   resource odbc_tables\n    ( resource $connection_id\n   [, string $qualifier\n   [, string $owner\n   [, string $name\n   [, string $types\n  ]]]] )\n\n  \n   Lists all tables in the requested range.\n  \n  \n   To support enumeration of qualifiers, owners, and table types,\n   the following special semantics for the\n   qualifier, owner,\n   name, and\n   table_type are available:\n   \n    \n     \n      If qualifier is a single percent\n      character (%) and owner and\n      name are empty strings, then the result\n      set contains a list of valid qualifiers for the data\n      source. (All columns except the TABLE_QUALIFIER column contain\n      NULLs.)\n     \n    \n    \n     \n      If owner is a single percent character\n      (%) and qualifier and\n      name are empty strings, then the result\n      set contains a list of valid owners for the data source. (All\n      columns except the TABLE_OWNER column contain\n      NULLs.)\n     \n    \n    \n     \n      If table_type is a single percent\n      character (%) and qualifier,\n      owner and name\n      are empty strings, then the result set contains a list of\n      valid table types for the data source. (All columns except the\n      TABLE_TYPE column contain NULLs.)\n     \n    \n   \n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     connection_id\n     \n\n      The ODBC connection identifier,\nsee odbc_connect() for details.\n     \n\n    \n\n    \n\n     qualifier\n     \n\n      \n       The qualifier.\n      \n     \n\n    \n\n    \n\n     owner\n     \n\n      \n       The owner. Accepts search patterns (&#039;%&#039; to match zero or more\n       characters and &#039;_&#039; to match a single character).\n      \n     \n\n    \n\n    \n\n     name\n     \n\n      \n       The name. Accepts search patterns (&#039;%&#039; to match zero or more\n       characters and &#039;_&#039; to match a single character).\n      \n     \n\n    \n\n    \n\n     types\n     \n\n      \n       If table_type is not an empty string, it\n       must contain a list of comma-separated values for the types of\n       interest; each value may be enclosed in single quotes (&#039;) or\n       unquoted. For example, &quot;&#039;TABLE&#039;,&#039;VIEW&#039;&quot; or &quot;TABLE, VIEW&quot;.  If the\n       data source does not support a specified table type,\n       odbc_tables() does not return any results for\n       that type.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an ODBC result identifier containing the information \n   or FALSE on failure.\n  \n  \n   The result set has the following columns:\n   \n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    TABLE_TYPE\n    REMARKS\n   \n  \n  \n   The result set is ordered by TABLE_TYPE, TABLE_QUALIFIER,\n   TABLE_OWNER and TABLE_NAME.\n  \n \n\n\n \n  See Also\n  \n   \n    odbc_tableprivileges() - Lists tables and the privileges associated with each table\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.addcslashes.php","title":"addcslashes","description":"\n \n  addcslashes\n  (PHP 4, PHP 5)addcslashes &mdash; Quote string with slashes in a C style\n\n \n \n \n  Description\n  \n   string addcslashes\n    ( string $str\n   , string $charlist\n   )\n\n  \n   Returns a string with backslashes before characters that are\n   listed in charlist parameter. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be escaped.\n      \n     \n\n    \n\n    \n\n     charlist\n     \n\n      \n       A list of characters to be escaped. If\n       charlist contains characters\n       \\n, \\r etc., they are\n       converted in C-like style, while other non-alphanumeric characters\n       with ASCII codes lower than 32 and higher than 126 converted to\n       octal representation.\n      \n      \n       When you define a sequence of characters in the charlist argument\n       make sure that you know what characters come between the\n       characters that you set as the start and end of the range.\n       \n        \n\n&lt;?phpecho&nbsp;addcslashes('foo[&nbsp;]',&nbsp;'A..z');\/\/&nbsp;output:&nbsp;&nbsp;\\f\\o\\o\\[&nbsp;\\]\/\/&nbsp;All&nbsp;upper&nbsp;and&nbsp;lower-case&nbsp;letters&nbsp;will&nbsp;be&nbsp;escaped\/\/&nbsp;...&nbsp;but&nbsp;so&nbsp;will&nbsp;the&nbsp;[\\]^_`?&gt;\n\n\n        \n\n       \n       Also, if the first character in a range has a higher ASCII value\n       than the second character in the range, no range will be\n       constructed.  Only the start, end and period characters will be\n       escaped. Use the ord() function to find the\n       ASCII value for a character.\n       \n        \n\n&lt;?phpecho&nbsp;addcslashes(\"zoo['.']\",&nbsp;'z..A');\/\/&nbsp;output:&nbsp;&nbsp;\\zoo['\\.']?&gt;\n\n\n        \n\n       \n      \n      \n       Be careful if you choose to escape characters 0, a, b, f, n, r,\n       t and v. They will be converted to \\0, \\a, \\b, \\f, \\n, \\r, \\t\n       and \\v.\n       In PHP \\0 (NULL), \\r (carriage return), \\n (newline), \\f (form feed),\n       \\v (vertical tab) and \\t (tab) are predefined escape sequences, \n       while in C all of these are predefined escape sequences.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the escaped string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.5\n       \n        The escape sequences \\v and \\f were added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n    charlist like &quot;\\0..\\37&quot;, which would\n    escape all characters with ASCII code between 0 and 31.\n   \n    Example #1 addcslashes() example\n    \n\n&lt;?php$escaped&nbsp;=&nbsp;addcslashes($not_escaped,&nbsp;\"\\0..\\37!@\\177..\\377\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    stripcslashes() - Un-quote string quoted with addcslashes\n    stripslashes() - Un-quotes a quoted string\n    addslashes() - Quote string with slashes\n    htmlspecialchars() - Convert special characters to HTML entities\n    quotemeta() - Quote meta characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chop.php","title":"chop","description":"\n \n  chop\n  (PHP 4, PHP 5)chop &mdash; Alias of rtrim()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   rtrim().\n  \n \n\n\n \n  Notes\n  Note: \n   \n    chop() is different than the Perl\n    chop() function, which removes the last\n    character in the string.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.addslashes.php","title":"addslashes","description":"\n \n  addslashes\n  (PHP 4, PHP 5)addslashes &mdash; Quote string with slashes\n\n \n \n \n  Description\n  \n   string addslashes\n    ( string $str\n   )\n\n  \n   Returns a string with backslashes before characters that need\n   to be quoted in database queries etc.  These characters are\n   single quote (&#039;), double quote\n   (&quot;), backslash (\\)\n   and NUL (the NULL byte).\n  \n  \n   An example use of addslashes() is when you&#039;re\n   entering data into a database.  For example, to insert the name\n   O&#039;reilly into a database, you will need to escape\n   it. It&#039;s highly recommended to use DBMS specific escape function\n   (e.g. mysqli_real_escape_string() for MySQL or\n   pg_escape_string() for PostgreSQL), but\n   if the DBMS you&#039;re using doesn&#039;t have an escape function\n   and the DBMS uses \\ to escape special chars,\n   you can use this function. This would only be to get the data\n   into the database, the extra \\ will not be inserted.\n   Having the PHP directive \n   magic_quotes_sybase set to on will mean\n   &#039; is instead escaped with another\n   &#039;.\n  \n  \n   The PHP directive \n   magic_quotes_gpc is on by default, and it\n   essentially runs addslashes() on all GET, POST,\n   and COOKIE data.  Do not use addslashes() on\n   strings that have already been escaped with\n   magic_quotes_gpc as you&#039;ll\n   then do double escaping.  The function\n   get_magic_quotes_gpc() may come in handy for\n   checking this.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be escaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the escaped string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 An addslashes() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Is&nbsp;your&nbsp;name&nbsp;O'reilly?\";\/\/&nbsp;Outputs:&nbsp;Is&nbsp;your&nbsp;name&nbsp;O\\'reilly?echo&nbsp;addslashes($str);?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    stripcslashes() - Un-quote string quoted with addcslashes\n    stripslashes() - Un-quotes a quoted string\n    addcslashes() - Quote string with slashes in a C style\n    htmlspecialchars() - Convert special characters to HTML entities\n    quotemeta() - Quote meta characters\n    get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bin2hex.php","title":"bin2hex","description":"\n \n  bin2hex\n  (PHP 4, PHP 5)bin2hex &mdash; Convert binary data into hexadecimal representation\n\n \n \n \n  Description\n  \n   string bin2hex\n    ( string $str\n   )\n\n  \n   Returns an ASCII string containing the hexadecimal representation\n   of str. The conversion is done byte-wise\n   with the high-nibble first.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       A string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the hexadecimal representation of the given string.\n  \n \n\n \n \n  See Also\n  \n   \n    hex2bin() - Converts the hex representation of data to binary\n    pack() - Pack data into binary string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-uudecode.php","title":"convert_uudecode","description":"\n \n  convert_uudecode\n  (PHP 5)convert_uudecode &mdash; Decode a uuencoded string\n\n \n \n \n  Description\n  \n   string convert_uudecode\n    ( string $data\n   )\n\n  \n   convert_uudecode() decodes a uuencoded string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The uuencoded data.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the decoded data as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 convert_uudecode() example\n    \n\n&lt;?php\/*&nbsp;Can&nbsp;you&nbsp;imagine&nbsp;what&nbsp;this&nbsp;will&nbsp;print?&nbsp;:)&nbsp;*\/echo&nbsp;convert_uudecode(\"+22!L;W9E(%!(4\\\"$`\\n`\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    convert_uuencode() - Uuencode a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-uuencode.php","title":"convert_uuencode","description":"\n \n  convert_uuencode\n  (PHP 5)convert_uuencode &mdash; Uuencode a string\n\n \n \n \n  Description\n  \n   string convert_uuencode\n    ( string $data\n   )\n\n  \n   convert_uuencode() encodes a string using the uuencode\n   algorithm.\n  \n  \n   Uuencode translates all strings (including binary&#039;s ones) into printable\n   characters, making them safe for network transmissions. Uuencoded data is\n   about 35% larger than the original.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to be encoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the uuencoded data.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 convert_uuencode() example\n    \n\n&lt;?php$some_string&nbsp;=&nbsp;\"test\\ntext&nbsp;text\\r\\n\";echo&nbsp;convert_uuencode($some_string);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    convert_uudecode() - Decode a uuencoded string\n    base64_encode() - Encodes data with MIME base64\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chr.php","title":"chr","description":"\n \n  chr\n  (PHP 4, PHP 5)chr &mdash; Return a specific character\n\n \n \n \n  Description\n  \n   string chr\n    ( int $ascii\n   )\n\n  \n   Returns a one-character string containing the character specified\n   by ascii.\n  \n  \n   This function complements ord(). \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     ascii\n     \n\n      \n       The ascii code.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the specified character.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 chr() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"The&nbsp;string&nbsp;ends&nbsp;in&nbsp;escape:&nbsp;\";$str&nbsp;.=&nbsp;chr(27);&nbsp;\/*&nbsp;add&nbsp;an&nbsp;escape&nbsp;character&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;$str&nbsp;*\/\/*&nbsp;Often&nbsp;this&nbsp;is&nbsp;more&nbsp;useful&nbsp;*\/$str&nbsp;=&nbsp;sprintf(\"The&nbsp;string&nbsp;ends&nbsp;in&nbsp;escape:&nbsp;%c\",&nbsp;27);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sprintf() - Return a formatted string with a format string of %c\n    ord()\n    An &raquo;&nbsp;ASCII-table\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.chunk-split.php","title":"chunk_split","description":"\n \n  chunk_split\n  (PHP 4, PHP 5)chunk_split &mdash; Split a string into smaller chunks\n\n \n \n \n  Description\n  \n   string chunk_split\n    ( string $body\n   [, int $chunklen = 76\n   [, string $end = &quot;\\r\\n&quot;\n  ]] )\n\n  \n   Can be used to split a string into smaller chunks which is useful for\n   e.g. converting base64_encode() output to match RFC\n   2045 semantics. It inserts end every \n   chunklen characters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     body\n     \n\n      \n       The string to be chunked.\n      \n     \n\n    \n\n    \n\n     chunklen\n     \n\n      \n       The chunk length.\n      \n     \n\n    \n\n    \n\n     end\n     \n\n      \n       The line ending sequence.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the chunked string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 chunk_split() example\n    \n\n&lt;?php\/\/&nbsp;format&nbsp;$data&nbsp;using&nbsp;RFC&nbsp;2045&nbsp;semantics$new_string&nbsp;=&nbsp;chunk_split(base64_encode($data));?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  See Also\n  \n   \n    str_split() - Convert a string to an array\n    explode() - Split a string by string\n    split() - Split string into array by regular expression\n    wordwrap() - Wraps a string to a given number of characters\n    &raquo;&nbsp;RFC 2045\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.count-chars.php","title":"count_chars","description":"\n \n  count_chars\n  (PHP 4, PHP 5)count_chars &mdash; Return information about characters used in a string\n\n \n \n \n  Description\n  \n   mixed count_chars\n    ( string $string\n   [, int $mode = 0\n  ] )\n\n  \n   Counts the number of occurrences of every byte-value (0..255) in\n   string and returns it in various ways.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The examined string.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       See return values.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Depending on mode\n   count_chars() returns one of the following:\n   \n    \n     \n      0 - an array with the byte-value as key and the frequency of\n      every byte as value.\n     \n    \n    \n     \n      1 - same as 0 but only byte-values with a frequency greater\n      than zero are listed.\n     \n    \n    \n     \n      2 - same as 0 but only byte-values with a frequency equal to\n      zero are listed.\n     \n    \n    \n     \n      3 - a string containing all unique characters is returned.\n     \n    \n    \n     \n      4 - a string containing all not used characters is returned.\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 count_chars() example\n    \n\n&lt;?php$data&nbsp;=&nbsp;\"Two&nbsp;Ts&nbsp;and&nbsp;one&nbsp;F.\";foreach&nbsp;(count_chars($data,&nbsp;1)&nbsp;as&nbsp;$i&nbsp;=&gt;&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"There&nbsp;were&nbsp;$val&nbsp;instance(s)&nbsp;of&nbsp;\\\"\"&nbsp;,&nbsp;chr($i)&nbsp;,&nbsp;\"\\\"&nbsp;in&nbsp;the&nbsp;string.\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThere were 4 instance(s) of &quot; &quot; in the string.\nThere were 1 instance(s) of &quot;.&quot; in the string.\nThere were 1 instance(s) of &quot;F&quot; in the string.\nThere were 2 instance(s) of &quot;T&quot; in the string.\nThere were 1 instance(s) of &quot;a&quot; in the string.\nThere were 1 instance(s) of &quot;d&quot; in the string.\nThere were 1 instance(s) of &quot;e&quot; in the string.\nThere were 2 instance(s) of &quot;n&quot; in the string.\nThere were 2 instance(s) of &quot;o&quot; in the string.\nThere were 1 instance(s) of &quot;s&quot; in the string.\nThere were 1 instance(s) of &quot;w&quot; in the string.\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    strpos() - Find position of first occurrence of a string\n    substr_count() - Count the number of substring occurrences\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.convert-cyr-string.php","title":"convert_cyr_string","description":"\n \n  convert_cyr_string\n  (PHP 4, PHP 5)convert_cyr_string &mdash; Convert from one Cyrillic character set to another\n\n \n \n \n  Description\n  \n   string convert_cyr_string\n    ( string $str\n   , string $from\n   , string $to\n   )\n\n  \n   Converts from one Cyrillic character set to another.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be converted.\n      \n     \n\n    \n\n    \n\n     from\n     \n\n      \n       The source Cyrillic character set, as a single character.\n      \n     \n\n    \n\n    \n\n     to\n     \n\n      \n       The target Cyrillic character set, as a single character.\n      \n     \n\n    \n\n   \n\n  \n  \n   Supported characters are:\n   \n    \n     \n      k - koi8-r\n     \n    \n    \n     \n      w - windows-1251\n     \n    \n    \n     \n      i - iso8859-5\n     \n    \n    \n     \n      a - x-cp866\n     \n    \n    \n     \n      d - x-cp866\n     \n    \n    \n     \n      m - x-mac-cyrillic\n     \n    \n   \n  \n \n\n\n \n  Return Values\n  \n   Returns the converted string.\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.echo.php","title":"echo","description":"\n \n  echo\n  (PHP 4, PHP 5)echo &mdash; Output one or more strings\n\n \n \n \n  Description\n  \n   void echo\n    ( string $arg1\n   [, string $...\n  ] )\n\n  \n   Outputs all parameters.\n  \n  \n   echo() is not actually a function (it is a\n   language construct), so you are not required to use parentheses\n   with it. echo() (unlike some other language\n   constructs) does not behave like a function, so it cannot\n   always be used in the context of a function. Additionally, if you want to\n   pass more than one parameter to echo(), the parameters\n   must not be enclosed within parentheses.\n  \n  \n   echo() also has a shortcut syntax, where you can\n   immediately follow the opening tag with an equals sign. This short syntax\n   only works with the short_open_tag configuration setting\n   enabled.\n   \n    \n\nI&nbsp;have&nbsp;&lt;?=$foo?&gt;&nbsp;foo.\n\n    \n\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arg1\n     \n\n      \n       The parameter to output.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 echo() examples\n    \n\n&lt;?phpecho&nbsp;\"Hello&nbsp;World\";echo&nbsp;\"This&nbsp;spansmultiple&nbsp;lines.&nbsp;The&nbsp;newlines&nbsp;will&nbsp;beoutput&nbsp;as&nbsp;well\";echo&nbsp;\"This&nbsp;spans\\nmultiple&nbsp;lines.&nbsp;The&nbsp;newlines&nbsp;will&nbsp;be\\noutput&nbsp;as&nbsp;well.\";echo&nbsp;\"Escaping&nbsp;characters&nbsp;is&nbsp;done&nbsp;\\\"Like&nbsp;this\\\".\";\/\/&nbsp;You&nbsp;can&nbsp;use&nbsp;variables&nbsp;inside&nbsp;of&nbsp;an&nbsp;echo&nbsp;statement$foo&nbsp;=&nbsp;\"foobar\";$bar&nbsp;=&nbsp;\"barbaz\";echo&nbsp;\"foo&nbsp;is&nbsp;$foo\";&nbsp;\/\/&nbsp;foo&nbsp;is&nbsp;foobar\/\/&nbsp;You&nbsp;can&nbsp;also&nbsp;use&nbsp;arrays$baz&nbsp;=&nbsp;array(\"value\"&nbsp;=&gt;&nbsp;\"foo\");echo&nbsp;\"this&nbsp;is&nbsp;{$baz['value']}&nbsp;!\";&nbsp;\/\/&nbsp;this&nbsp;is&nbsp;foo&nbsp;!\/\/&nbsp;Using&nbsp;single&nbsp;quotes&nbsp;will&nbsp;print&nbsp;the&nbsp;variable&nbsp;name,&nbsp;not&nbsp;the&nbsp;valueecho&nbsp;'foo&nbsp;is&nbsp;$foo';&nbsp;\/\/&nbsp;foo&nbsp;is&nbsp;$foo\/\/&nbsp;If&nbsp;you&nbsp;are&nbsp;not&nbsp;using&nbsp;any&nbsp;other&nbsp;characters,&nbsp;you&nbsp;can&nbsp;just&nbsp;echo&nbsp;variablesecho&nbsp;$foo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;foobarecho&nbsp;$foo,$bar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;foobarbarbaz\/\/&nbsp;Some&nbsp;people&nbsp;prefer&nbsp;passing&nbsp;multiple&nbsp;parameters&nbsp;to&nbsp;echo&nbsp;over&nbsp;concatenation.echo&nbsp;'This&nbsp;',&nbsp;'string&nbsp;',&nbsp;'was&nbsp;',&nbsp;'made&nbsp;',&nbsp;'with&nbsp;multiple&nbsp;parameters.',&nbsp;chr(10);echo&nbsp;'This&nbsp;'&nbsp;.&nbsp;'string&nbsp;'&nbsp;.&nbsp;'was&nbsp;'&nbsp;.&nbsp;'made&nbsp;'&nbsp;.&nbsp;'with&nbsp;concatenation.'&nbsp;.&nbsp;\"\\n\";echo&nbsp;&lt;&lt;&lt;ENDThis&nbsp;uses&nbsp;the&nbsp;\"here&nbsp;document\"&nbsp;syntax&nbsp;to&nbsp;outputmultiple&nbsp;lines&nbsp;with&nbsp;$variable&nbsp;interpolation.&nbsp;Notethat&nbsp;the&nbsp;here&nbsp;document&nbsp;terminator&nbsp;must&nbsp;appear&nbsp;on&nbsp;aline&nbsp;with&nbsp;just&nbsp;a&nbsp;semicolon.&nbsp;no&nbsp;extra&nbsp;whitespace!END;\/\/&nbsp;Because&nbsp;echo&nbsp;does&nbsp;not&nbsp;behave&nbsp;like&nbsp;a&nbsp;function,&nbsp;the&nbsp;following&nbsp;code&nbsp;is&nbsp;invalid.($some_var)&nbsp;?&nbsp;echo&nbsp;'true'&nbsp;:&nbsp;echo&nbsp;'false';\/\/&nbsp;However,&nbsp;the&nbsp;following&nbsp;examples&nbsp;will&nbsp;work:($some_var)&nbsp;?&nbsp;print&nbsp;'true'&nbsp;:&nbsp;print&nbsp;'false';&nbsp;\/\/&nbsp;print&nbsp;is&nbsp;also&nbsp;a&nbsp;construct,&nbsp;but&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;it&nbsp;behaves&nbsp;like&nbsp;a&nbsp;function,&nbsp;so&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;it&nbsp;may&nbsp;be&nbsp;used&nbsp;in&nbsp;this&nbsp;context.echo&nbsp;$some_var&nbsp;?&nbsp;'true':&nbsp;'false';&nbsp;\/\/&nbsp;changing&nbsp;the&nbsp;statement&nbsp;around?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions\n\n \n\n\n \n  See Also\n  \n   \n    print() - Output a string\n    printf() - Output a formatted string\n    flush() - Flush the output buffer\n    Heredoc syntax\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.crypt.php","title":"crypt","description":"\n \n  crypt\n  (PHP 4, PHP 5)crypt &mdash; One-way string hashing\n\n \n \n \n  Description\n  \n   string crypt\n    ( string $str\n   [, string $salt\n  ] )\n\n  \n   crypt() will return a hashed string using the\n   standard Unix DES-based algorithm or\n   alternative algorithms that may be available on the system.\n  \n  \n   Some operating systems support more than one type of hash.  In\n   fact, sometimes the standard DES-based algorithm is replaced by an\n   MD5-based algorithm.  The hash type is triggered by the salt argument.\n   Prior to 5.3, PHP would determine the available algorithms at install-time\n   based on the system&#039;s crypt(). If no salt is provided, PHP will\n   auto-generate either a standard two character (DES) salt, or a twelve\n   character (MD5), depending on the availability of MD5 crypt().  PHP sets a\n   constant named CRYPT_SALT_LENGTH which indicates the\n   longest valid salt allowed by the available hashes.\n  \n  \n   The standard DES-based crypt() returns the\n   salt as the first two characters of the output. It also only uses the\n   first eight characters of str, so longer strings\n   that start with the same eight characters will generate the same result\n   (when the same salt is used).\n  \n  \n   On systems where the crypt() function supports multiple\n   hash types, the following constants are set to 0 or 1\n   depending on whether the given type is available:\n  \n  \n   \n    \n     CRYPT_STD_DES - Standard DES-based hash with a two character salt\n       from the alphabet &quot;.\/0-9A-Za-z&quot;. Using invalid characters in the salt will cause\n       crypt() to fail.\n    \n   \n   \n    \n     CRYPT_EXT_DES - Extended DES-based hash. The &quot;salt&quot; is a\n     9-character string consisting of an underscore followed by 4 bytes of iteration count and\n     4 bytes of salt. These are encoded as printable characters, 6 bits per character, least\n     significant character first. The values 0 to 63 are encoded as &quot;.\/0-9A-Za-z&quot;. Using invalid\n     characters in the salt will cause crypt() to fail.\n    \n   \n   \n    \n     CRYPT_MD5 - MD5 hashing with a twelve character salt starting with\n     $1$\n    \n   \n   \n    \n     CRYPT_BLOWFISH - Blowfish hashing with a salt as follows:\n     &quot;$2a$&quot;, a two digit cost parameter, &quot;$&quot;, and 22 digits from the alphabet\n     &quot;.\/0-9A-Za-z&quot;. Using characters outside of this range in the salt will cause crypt() to\n     return a zero-length string. The two digit cost parameter is the base-2 logarithm of the\n     iteration count for the underlying Blowfish-based hashing algorithmeter and must be in\n     range 04-31, values outside this range will cause crypt() to fail.\n    \n   \n   \n    \n     CRYPT_SHA256 - SHA-256 hash with a sixteen character salt\n     prefixed with $5$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N\n     is used to indicate how many times the hashing loop should be executed, much like the cost\n     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of\n     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to\n     the nearest limit.\n    \n   \n   \n    \n     CRYPT_SHA512 - SHA-512 hash with a sixteen character salt\n     prefixed with $6$. If the salt string starts with &#039;rounds=&lt;N&gt;$&#039;, the numeric value of N\n     is used to indicate how many times the hashing loop should be executed, much like the cost\n     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of\n     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to\n     the nearest limit.\n    \n   \n  \n  Note: \n   \n    As of PHP 5.3.0, PHP contains its own implementation and will use that\n    if the system lacks of support for one or more of the algorithms.\n   \n  \n \n\n \n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be hashed.\n      \n     \n\n    \n\n    \n\n     salt\n     \n\n      \n       An optional salt string to base the hashing on. If not provided, the\n       behaviour is defined by the algorithm implementation and can lead to\n       unexpected results.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the hashed string or a string that is shorter than 13 characters\n   and is guaranteed to differ from the salt on failure.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.2\n       \n        Added SHA-256 and SHA-512 crypt based on Ulrich Drepper&#039;s \n        &raquo;&nbsp;implementation.\n       \n      \n\n      \n       5.3.2\n       \n        Fixed Blowfish behaviour on invalid rounds to return &quot;failure&quot; \n        string (&quot;*0&quot; or &quot;*1&quot;), instead of falling back to DES.\n       \n      \n\n      \n       5.3.0\n       \n        PHP now contains its own implementation for the MD5 crypt, Standard DES,\n        Extended DES and the Blowfish algorithms and will use that if the system\n        lacks of support for one or more of the algorithms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 crypt() examples\n    \n\n&lt;?php$password&nbsp;=&nbsp;crypt('mypassword');&nbsp;\/\/&nbsp;let&nbsp;the&nbsp;salt&nbsp;be&nbsp;automatically&nbsp;generated\/*&nbsp;You&nbsp;should&nbsp;pass&nbsp;the&nbsp;entire&nbsp;results&nbsp;of&nbsp;crypt()&nbsp;as&nbsp;the&nbsp;salt&nbsp;for&nbsp;comparing&nbsp;a&nbsp;&nbsp;&nbsp;password,&nbsp;to&nbsp;avoid&nbsp;problems&nbsp;when&nbsp;different&nbsp;hashing&nbsp;algorithms&nbsp;are&nbsp;used.&nbsp;(As&nbsp;&nbsp;&nbsp;it&nbsp;says&nbsp;above,&nbsp;standard&nbsp;DES-based&nbsp;password&nbsp;hashing&nbsp;uses&nbsp;a&nbsp;2-character&nbsp;salt,&nbsp;&nbsp;&nbsp;but&nbsp;MD5-based&nbsp;hashing&nbsp;uses&nbsp;12.)&nbsp;*\/if&nbsp;(crypt($user_input,&nbsp;$password)&nbsp;==&nbsp;$password)&nbsp;{&nbsp;&nbsp;&nbsp;echo&nbsp;\"Password&nbsp;verified!\";}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Using crypt() with htpasswd\n    \n\n&lt;?php\/\/&nbsp;Set&nbsp;the&nbsp;password$password&nbsp;=&nbsp;'mypassword';\/\/&nbsp;Get&nbsp;the&nbsp;hash,&nbsp;letting&nbsp;the&nbsp;salt&nbsp;be&nbsp;automatically&nbsp;generated$hash&nbsp;=&nbsp;crypt($password);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Using crypt() with different hash types\n    \n\n&lt;?phpif&nbsp;(CRYPT_STD_DES&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Standard&nbsp;DES:&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'rl')&nbsp;.&nbsp;\"\\n\";}if&nbsp;(CRYPT_EXT_DES&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Extended&nbsp;DES:&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'_J9..rasm')&nbsp;.&nbsp;\"\\n\";}if&nbsp;(CRYPT_MD5&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'MD5:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'$1$rasmusle$')&nbsp;.&nbsp;\"\\n\";}if&nbsp;(CRYPT_BLOWFISH&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Blowfish:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'$2a$07$usesomesillystringforsalt$')&nbsp;.&nbsp;\"\\n\";}if&nbsp;(CRYPT_SHA256&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'SHA-256:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'$5$rounds=5000$usesomesillystringforsalt$')&nbsp;.&nbsp;\"\\n\";}if&nbsp;(CRYPT_SHA512&nbsp;==&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'SHA-512:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;.&nbsp;crypt('rasmuslerdorf',&nbsp;'$6$rounds=5000$usesomesillystringforsalt$')&nbsp;.&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nStandard DES: rl.3StKT.4T8M\nExtended DES: _J9..rasmBYk8r9AiWNc\nMD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0\nBlowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e.\/U9C8sBjqp8I90dH6hi\nSHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH\/Tp.6\nSHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP\/EN5mcO.ChWQW21\n\n    \n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    There is no decrypt function, since crypt() uses a\n    one-way algorithm.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    md5() - Calculate the md5 hash of a string\n    The Mcrypt extension\n    The Unix man page for your crypt function for more information\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fprintf.php","title":"fprintf","description":"\n \n  fprintf\n  (PHP 5)fprintf &mdash; Write a formatted string to a stream\n\n \n \n \n  Description\n  \n   int fprintf\n    ( resource $handle\n   , string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )\n\n  \n   Write a string produced according to format to the\n   stream resource specified by handle.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n\n    \n\n     format\n     \n\n      \n       See sprintf() for a description of \n       format.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the string written.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fprintf(): zero-padded integers\n    \n\n&lt;?phpif&nbsp;(!($fp&nbsp;=&nbsp;fopen('date.txt',&nbsp;'w')))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return;}fprintf($fp,&nbsp;\"%04d-%02d-%02d\",&nbsp;$year,&nbsp;$month,&nbsp;$day);\/\/&nbsp;will&nbsp;write&nbsp;the&nbsp;formatted&nbsp;ISO&nbsp;date&nbsp;to&nbsp;date.txt?&gt;\n\n\n    \n\n   \n   \n    Example #2 fprintf(): formatting currency\n    \n\n&lt;?phpif&nbsp;(!($fp&nbsp;=&nbsp;fopen('currency.txt',&nbsp;'w')))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return;}$money1&nbsp;=&nbsp;68.75;$money2&nbsp;=&nbsp;54.35;$money&nbsp;=&nbsp;$money1&nbsp;+&nbsp;$money2;\/\/&nbsp;echo&nbsp;$money&nbsp;will&nbsp;output&nbsp;\"123.1\";$len&nbsp;=&nbsp;fprintf($fp,&nbsp;'%01.2f',&nbsp;$money);\/\/&nbsp;will&nbsp;write&nbsp;\"123.10\"&nbsp;to&nbsp;currency.txtecho&nbsp;\"wrote&nbsp;$len&nbsp;bytes&nbsp;to&nbsp;currency.txt\";\/\/&nbsp;use&nbsp;the&nbsp;return&nbsp;value&nbsp;of&nbsp;fprintf&nbsp;to&nbsp;determine&nbsp;how&nbsp;many&nbsp;bytes&nbsp;we&nbsp;wrote?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n    sscanf() - Parses input from a string according to a format\n    fscanf() - Parses input from a file according to a format\n    vsprintf() - Return a formatted string\n    number_format() - Format a number with grouped thousands\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.crc32.php","title":"crc32","description":"\n \n  crc32\n  (PHP 4 &gt;= 4.0.1, PHP 5)crc32 &mdash; Calculates the crc32 polynomial of a string\n\n \n \n \n  Description\n  \n   int crc32\n    ( string $str\n   )\n\n  \n   Generates the cyclic redundancy checksum polynomial of 32-bit\n   lengths of the str. This is usually used\n   to validate the integrity of data being transmitted.\n  \n  \n   Because PHP&#039;s integer type is signed, and many crc32 checksums will\n   result in negative integers, you need to use the &quot;%u&quot; formatter of\n   sprintf() or printf() to get\n   the string representation of the unsigned crc32 checksum.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The data.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the crc32 checksum of str as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Displaying a crc32 checksum\n    \n     This example shows how to print a converted checksum with the\n     printf() function:\n    \n    \n\n&lt;?php$checksum&nbsp;=&nbsp;crc32(\"The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.\");printf(\"%u\\n\",&nbsp;$checksum);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    md5() - Calculate the md5 hash of a string\n    sha1() - Calculate the sha1 hash of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hebrev.php","title":"hebrev","description":"\n \n  hebrev\n  (PHP 4, PHP 5)hebrev &mdash; Convert logical Hebrew text to visual text\n\n \n \n \n  Description\n  \n   string hebrev\n    ( string $hebrew_text\n   [, int $max_chars_per_line = 0\n  ] )\n\n  \n   Converts logical Hebrew text to visual text.\n  \n  \n   The function tries to avoid breaking words.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hebrew_text\n     \n\n      \n       A Hebrew input string.\n      \n     \n\n    \n\n    \n\n     max_chars_per_line\n     \n\n      \n       This optional parameter indicates maximum number of characters per\n       line that will be returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the visual string.\n  \n \n\n\n \n  See Also\n  \n   \n    hebrevc() - Convert logical Hebrew text to visual text with newline conversion\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.explode.php","title":"explode","description":"\n \n  explode\n  (PHP 4, PHP 5)explode &mdash; Split a string by string\n\n \n \n \n  Description\n  \n   array explode\n    ( string $delimiter\n   , string $string\n   [, int $limit\n  ] )\n\n  \n   Returns an array of strings, each of which is a substring of\n   string formed by splitting it on\n   boundaries formed by the string delimiter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     delimiter\n     \n\n      \n       The boundary string.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       If limit is set and positive, the returned array will contain\n       a maximum of limit elements with the last\n       element containing the rest of string.\n      \n      \n       If the limit parameter is negative, all components\n       except the last -limit are returned.\n      \n      \n       If the limit parameter is zero, then this is treated as 1.\n      \n     \n\n    \n\n   \n\n  \n  \n   Although implode() can, for historical reasons,\n   accept its parameters in either order,\n   explode() cannot. You must ensure that the\n   delimiter argument comes before the\n   string argument.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of strings\n   created by splitting the string parameter on\n   boundaries formed by the delimiter.\n  \n  \n   If delimiter is an empty string (&quot;&quot;),\n   explode() will return FALSE.\n   If delimiter contains a value that is not\n   contained in string and a negative\n   limit is used, then an empty array will be\n   returned, otherwise an array containing\n   string will be returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Support for negative limits was added\n       \n      \n\n      \n       4.0.1\n       \n        The limit parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 explode() examples\n    \n\n&lt;?php\/\/&nbsp;Example&nbsp;1$pizza&nbsp;&nbsp;=&nbsp;\"piece1&nbsp;piece2&nbsp;piece3&nbsp;piece4&nbsp;piece5&nbsp;piece6\";$pieces&nbsp;=&nbsp;explode(\"&nbsp;\",&nbsp;$pizza);echo&nbsp;$pieces[0];&nbsp;\/\/&nbsp;piece1echo&nbsp;$pieces[1];&nbsp;\/\/&nbsp;piece2\/\/&nbsp;Example&nbsp;2$data&nbsp;=&nbsp;\"foo:*:1023:1000::\/home\/foo:\/bin\/sh\";list($user,&nbsp;$pass,&nbsp;$uid,&nbsp;$gid,&nbsp;$gecos,&nbsp;$home,&nbsp;$shell)&nbsp;=&nbsp;explode(\":\",&nbsp;$data);echo&nbsp;$user;&nbsp;\/\/&nbsp;fooecho&nbsp;$pass;&nbsp;\/\/&nbsp;*?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 limit parameter examples\n    \n\n&lt;?php$str&nbsp;=&nbsp;'one|two|three|four';\/\/&nbsp;positive&nbsp;limitprint_r(explode('|',&nbsp;$str,&nbsp;2));\/\/&nbsp;negative&nbsp;limit&nbsp;(since&nbsp;PHP&nbsp;5.1)print_r(explode('|',&nbsp;$str,&nbsp;-1));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; one\n    [1] =&gt; two|three|four\n)\nArray\n(\n    [0] =&gt; one\n    [1] =&gt; two\n    [2] =&gt; three\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    preg_split() - Split string by a regular expression\n    str_split() - Convert a string to an array\n    mb_split() - Split multibyte string using regular expression\n    str_word_count() - Return information about words used in a string\n    strtok() - Tokenize string\n    implode() - Join array elements with a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hex2bin.php","title":"hex2bin","description":"\n \n  hex2bin\n  (No version information available, might only be in SVN)hex2bin &mdash; Converts the hex representation of data to binary\n\n \n\n \n  Description\n  \n   string hex2bin\n    ( string $data\n   )\n\n  \n\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \n\n   \n\n    data\n    \n\n     \n      Hexadecimal representation of data.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   Returns the binary representation of the given data.\n  \n \n\n\n \n  See Also\n  \n   \n    bin2hex() - Convert binary data into hexadecimal representation\n    unpack() - Unpack data from binary string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-html-translation-table.php","title":"get_html_translation_table","description":"\n \n  get_html_translation_table\n  (PHP 4, PHP 5)get_html_translation_table &mdash; Returns the translation table used by htmlspecialchars() and htmlentities()\n\n \n \n \n  Description\n  \n   array get_html_translation_table\n    ([ int $table = HTML_SPECIALCHARS\n   [, int $quote_style = ENT_COMPAT\n   [, string $charset_hint\n  ]]] )\n\n  \n   get_html_translation_table() will return the\n   translation table that is used internally for\n   htmlspecialchars() and\n   htmlentities() with the default charset.\n  \n  Note: \n   \n    Special characters can be encoded in several ways. E.g.\n    &quot; can be encoded as &amp;quot;,\n    &amp;#34; or &amp;#x22.\n    get_html_translation_table() returns only the form used\n    by htmlspecialchars() and\n    htmlentities().\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     table\n     \n\n      \n       There are two new constants (HTML_ENTITIES,\n       HTML_SPECIALCHARS) that allow you to specify the\n       table you want.\n      \n     \n\n    \n\n    \n\n     quote_style\n     \n\n      \n       Like the htmlspecialchars() and\n       htmlentities() functions you can optionally specify\n       the quote_style you are working with.\n       See the description\n       of these modes in htmlspecialchars().\n      \n     \n\n    \n\n    \n\n     charset_hint\n     \n\n      \n       Like htmlentities(), it takes an optional\n       third argument charset which defines character\n       set used in conversion.\n       Presently, the ISO-8859-1 character set is used as the default.\n      \n      \n\n\n Following character sets are supported in PHP 4.3.0 and later.\n \n  Supported charsets\n  \n   \n    \n     Charset\n     Aliases\n     Description\n    \n\n   \n\n   \n    \n     ISO-8859-1\n     ISO8859-1\n     \n      Western European, Latin-1\n     \n    \n\n    \n     ISO-8859-15\n     ISO8859-15\n     \n      Western European, Latin-9. Adds the Euro sign, French and Finnish\n      letters missing in Latin-1 (ISO-8859-1).\n     \n    \n\n    \n     UTF-8\n     &nbsp;\n     \n      ASCII compatible multi-byte 8-bit Unicode.\n     \n    \n\n    \n     cp866\n     ibm866, 866\n     \n      DOS-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1251\n     Windows-1251, win-1251, 1251\n     \n      Windows-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1252\n     Windows-1252, 1252\n     \n      Windows specific charset for Western European.\n     \n    \n\n    \n     KOI8-R\n     koi8-ru, koi8r\n     \n      Russian. This charset is supported in 4.3.2.\n     \n    \n\n    \n     BIG5\n     950\n     \n      Traditional Chinese, mainly used in Taiwan.\n     \n    \n\n    \n     GB2312\n     936\n     \n      Simplified Chinese, national standard character set.\n     \n    \n\n    \n     BIG5-HKSCS\n     &nbsp;\n     \n      Big5 with Hong Kong extensions, Traditional Chinese.\n     \n    \n\n    \n     Shift_JIS\n     SJIS, 932\n     \n      Japanese\n     \n    \n\n    \n     EUC-JP\n     EUCJP\n     \n      Japanese\n     \n    \n\n    \n     &#039;&#039;\n     &nbsp;\n     \n      An empty string activates detection from script encoding (Zend multibyte),\n      default_charset and current\n      locale (see nl_langinfo() and\n      setlocale()), in this order. Not recommended.\n     \n    \n\n   \n  \n \n\n Note: \n  \n   Any other character sets are not recognized. The default encoding will be\n   used instead and a warning will be emitted.\n  \n \n\n\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the translation table as an array.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.4\n       \n        The charset_hint parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Translation Table Example\n    \n\n&lt;?php$trans&nbsp;=&nbsp;get_html_translation_table(HTML_ENTITIES);$str&nbsp;=&nbsp;\"Hallo&nbsp;&amp;&nbsp;&lt;Frau&gt;&nbsp;&amp;&nbsp;Kr\u00e4mer\";$encoded&nbsp;=&nbsp;strtr($str,&nbsp;$trans);echo&nbsp;$encoded;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nHallo &amp;amp; &amp;lt;Frau&amp;gt; &amp;amp; Kr&amp;auml;mer\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    htmlspecialchars() - Convert special characters to HTML entities\n    htmlentities() - Convert all applicable characters to HTML entities\n    html_entity_decode() - Convert all HTML entities to their applicable characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.hebrevc.php","title":"hebrevc","description":"\n \n  hebrevc\n  (PHP 4, PHP 5)hebrevc &mdash; Convert logical Hebrew text to visual text with newline conversion\n\n \n \n \n  Description\n  \n   string hebrevc\n    ( string $hebrew_text\n   [, int $max_chars_per_line = 0\n  ] )\n\n  \n   This function is similar to hebrev() with the\n   difference that it converts newlines (\\n) to &quot;&lt;br&gt;\\n&quot;.\n  \n  \n   The function tries to avoid breaking words.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hebrew_text\n     \n\n      \n       A Hebrew input string.\n      \n     \n\n    \n\n    \n\n     max_chars_per_line\n     \n\n      \n       This optional parameter indicates maximum number of characters per\n       line that will be returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the visual string.\n  \n \n\n\n \n  See Also\n  \n   \n    hebrev() - Convert logical Hebrew text to visual text\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlspecialchars-decode.php","title":"htmlspecialchars_decode","description":"\n \n  htmlspecialchars_decode\n  (PHP 5 &gt;= 5.1.0)htmlspecialchars_decode &mdash; \n   Convert special HTML entities back to characters\n  \n\n \n \n  Description\n  \n   string htmlspecialchars_decode\n    ( string $string\n   [, int $quote_style = ENT_COMPAT\n  ] )\n\n\n  \n   This function is the opposite of htmlspecialchars(). It\n   converts special HTML entities back to characters.\n  \n  \n   The converted entities are: &amp;amp;,\n   &amp;quot; (when ENT_NOQUOTES is not set),\n   &amp;#039; (when ENT_QUOTES is set),\n   &amp;lt; and &amp;gt;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The string to decode\n      \n     \n\n    \n\n    \n\n     quote_style\n     \n\n      \n       The quote style. One of the following constants:\n       \n        quote_style constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone\n            (default)\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the decoded string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A htmlspecialchars_decode() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'&lt;p&gt;this&nbsp;-&amp;gt;&nbsp;&amp;quot;&lt;\/p&gt;';echo&nbsp;htmlspecialchars_decode($str);\/\/&nbsp;note&nbsp;that&nbsp;here&nbsp;the&nbsp;quotes&nbsp;aren't&nbsp;convertedecho&nbsp;htmlspecialchars_decode($str,&nbsp;ENT_NOQUOTES);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;p&gt;this -&gt; &quot;&lt;\/p&gt;\n&lt;p&gt;this -&gt; &amp;quot;&lt;\/p&gt;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    htmlspecialchars() - Convert special characters to HTML entities\n    html_entity_decode() - Convert all HTML entities to their applicable characters\n    get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.html-entity-decode.php","title":"html_entity_decode","description":"\n \n  html_entity_decode\n  (PHP 4 &gt;= 4.3.0, PHP 5)html_entity_decode &mdash; Convert all HTML entities to their applicable characters\n\n \n \n \n  Description\n  \n   string html_entity_decode\n    ( string $string\n   [, int $quote_style = ENT_COMPAT\n   [, string $charset = &#039;UTF-8&#039;\n  ]] )\n\n  \n   html_entity_decode() is the opposite of\n   htmlentities() in that it converts all HTML entities\n   to their applicable characters from string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     quote_style\n     \n\n      \n       The optional second quote_style parameter lets\n       you define what will be done with &#039;single&#039; and &quot;double&quot; quotes.  It takes\n       on one of three constants:\n       \n        Available quote_style constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n       This defines the character set used in conversion. Using an empty string\n       will activate automatic detection based on mbstring&#039;s internal encoding\n       and current locale.\n      \n      \n\n\n Following character sets are supported in PHP 4.3.0 and later.\n \n  Supported charsets\n  \n   \n    \n     Charset\n     Aliases\n     Description\n    \n\n   \n\n   \n    \n     ISO-8859-1\n     ISO8859-1\n     \n      Western European, Latin-1\n     \n    \n\n    \n     ISO-8859-15\n     ISO8859-15\n     \n      Western European, Latin-9. Adds the Euro sign, French and Finnish\n      letters missing in Latin-1 (ISO-8859-1).\n     \n    \n\n    \n     UTF-8\n     &nbsp;\n     \n      ASCII compatible multi-byte 8-bit Unicode.\n     \n    \n\n    \n     cp866\n     ibm866, 866\n     \n      DOS-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1251\n     Windows-1251, win-1251, 1251\n     \n      Windows-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1252\n     Windows-1252, 1252\n     \n      Windows specific charset for Western European.\n     \n    \n\n    \n     KOI8-R\n     koi8-ru, koi8r\n     \n      Russian. This charset is supported in 4.3.2.\n     \n    \n\n    \n     BIG5\n     950\n     \n      Traditional Chinese, mainly used in Taiwan.\n     \n    \n\n    \n     GB2312\n     936\n     \n      Simplified Chinese, national standard character set.\n     \n    \n\n    \n     BIG5-HKSCS\n     &nbsp;\n     \n      Big5 with Hong Kong extensions, Traditional Chinese.\n     \n    \n\n    \n     Shift_JIS\n     SJIS, 932\n     \n      Japanese\n     \n    \n\n    \n     EUC-JP\n     EUCJP\n     \n      Japanese\n     \n    \n\n    \n     &#039;&#039;\n     &nbsp;\n     \n      An empty string activates detection from script encoding (Zend multibyte),\n      default_charset and current\n      locale (see nl_langinfo() and\n      setlocale()), in this order. Not recommended.\n     \n    \n\n   \n  \n \n\n Note: \n  \n   Any other character sets are not recognized. The default encoding will be\n   used instead and a warning will be emitted.\n  \n \n\n\n\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the decoded string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        Default charset changed from ISO-8859-1 to UTF-8.\n       \n      \n\n      \n       5.0.0\n       \n        Support for multi-byte character sets was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Decoding HTML entities\n    \n\n&lt;?php$orig&nbsp;=&nbsp;\"I'll&nbsp;\\\"walk\\\"&nbsp;the&nbsp;&lt;b&gt;dog&lt;\/b&gt;&nbsp;now\";$a&nbsp;=&nbsp;htmlentities($orig);$b&nbsp;=&nbsp;html_entity_decode($a);echo&nbsp;$a;&nbsp;\/\/&nbsp;I'll&nbsp;&amp;quot;walk&amp;quot;&nbsp;the&nbsp;&amp;lt;b&amp;gt;dog&amp;lt;\/b&amp;gt;&nbsp;nowecho&nbsp;$b;&nbsp;\/\/&nbsp;I'll&nbsp;\"walk\"&nbsp;the&nbsp;&lt;b&gt;dog&lt;\/b&gt;&nbsp;now\/\/&nbsp;For&nbsp;users&nbsp;prior&nbsp;to&nbsp;PHP&nbsp;4.3.0&nbsp;you&nbsp;may&nbsp;do&nbsp;this:function&nbsp;unhtmlentities($string){&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;replace&nbsp;numeric&nbsp;entities&nbsp;&nbsp;&nbsp;&nbsp;$string&nbsp;=&nbsp;preg_replace('~&amp;#x([0-9a-f]+);~ei',&nbsp;'chr(hexdec(\"\\\\1\"))',&nbsp;$string);&nbsp;&nbsp;&nbsp;&nbsp;$string&nbsp;=&nbsp;preg_replace('~&amp;#([0-9]+);~e',&nbsp;'chr(\"\\\\1\")',&nbsp;$string);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;replace&nbsp;literal&nbsp;entities&nbsp;&nbsp;&nbsp;&nbsp;$trans_tbl&nbsp;=&nbsp;get_html_translation_table(HTML_ENTITIES);&nbsp;&nbsp;&nbsp;&nbsp;$trans_tbl&nbsp;=&nbsp;array_flip($trans_tbl);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;strtr($string,&nbsp;$trans_tbl);}$c&nbsp;=&nbsp;unhtmlentities($a);echo&nbsp;$c;&nbsp;\/\/&nbsp;I'll&nbsp;\"walk\"&nbsp;the&nbsp;&lt;b&gt;dog&lt;\/b&gt;&nbsp;now?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Notes\n  Note: \n   \n    You might wonder why trim(html_entity_decode(&#039;&amp;nbsp;&#039;)); doesn&#039;t\n    reduce the string to an empty string, that&#039;s because the &#039;&amp;nbsp;&#039;\n    entity is not ASCII code 32 (which is stripped by\n    trim()) but ASCII code 160 (0xa0) in the default ISO\n    8859-1 characterset.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    htmlentities() - Convert all applicable characters to HTML entities\n    htmlspecialchars() - Convert special characters to HTML entities\n    get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities\n    urldecode() - Decodes URL-encoded string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.join.php","title":"join","description":"\n \n  join\n  (PHP 4, PHP 5)join &mdash; Alias of implode()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   implode().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.lcfirst.php","title":"lcfirst","description":"\n \n  lcfirst\n  (PHP 5 &gt;= 5.3.0)lcfirst &mdash; Make a string&#039;s first character lowercase\n\n \n \n \n  Description\n  \n   string lcfirst\n    ( string $str\n   )\n\n  \n   Returns a string with the first character of\n   str , lowercased if that character is\n   alphabetic.\n  \n  \n   Note that &#039;alphabetic&#039; is determined by the current locale. For\n   instance, in the default &quot;C&quot; locale characters such as umlaut-a\n   (\u00e4) will not be converted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the resulting string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 lcfirst() example\n    \n\n&lt;?php$foo&nbsp;=&nbsp;'HelloWorld';$foo&nbsp;=&nbsp;lcfirst($foo);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;helloWorld$bar&nbsp;=&nbsp;'HELLO&nbsp;WORLD!';$bar&nbsp;=&nbsp;lcfirst($bar);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;hELLO&nbsp;WORLD!$bar&nbsp;=&nbsp;lcfirst(strtoupper($bar));&nbsp;\/\/&nbsp;hELLO&nbsp;WORLD!?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    ucfirst() - Make a string's first character uppercase\n    strtolower() - Make a string lowercase\n    strtoupper() - Make a string uppercase\n    ucwords() - Uppercase the first character of each word in a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlspecialchars.php","title":"htmlspecialchars","description":"\n \n  htmlspecialchars\n  (PHP 4, PHP 5)htmlspecialchars &mdash; Convert special characters to HTML entities\n\n \n\n \n  Description\n  \n   string htmlspecialchars\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $charset\n   [, bool $double_encode = true\n  ]]] )\n\n  \n   Certain characters have special significance in HTML, and should\n   be represented by HTML entities if they are to preserve their\n   meanings. This function returns a string with some of these\n   conversions made; the translations made are those most\n   useful for everyday web programming. If you require all HTML\n   character entities to be translated, use\n   htmlentities() instead.\n  \n  \n   This function is useful in preventing user-supplied text from\n   containing HTML markup, such as in a message board or guest book\n   application.\n  \n  \n   The translations performed are:\n   \n    \n     \n      &#039;&amp;&#039; (ampersand) becomes &#039;&amp;amp;&#039;\n     \n    \n    \n     \n      &#039;&quot;&#039; (double quote) becomes &#039;&amp;quot;&#039; when ENT_NOQUOTES\n      is not set.\n     \n    \n    \n     \n      &quot;&#039;&quot; (single quote) becomes &#039;&amp;#039;&#039; only when\n      ENT_QUOTES is set.\n     \n    \n    \n     \n      &#039;&lt;&#039; (less than) becomes &#039;&amp;lt;&#039;\n     \n    \n    \n     \n      &#039;&gt;&#039; (greater than) becomes &#039;&amp;gt;&#039;\n     \n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The string being converted.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       A bitmask of one or more of the following flags, which specify how to handle quotes,\n       invalid code unit sequences and the used document type. The default is\n       ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_IGNORE\n           \n            Silently discard invalid code unit sequences instead of returning\n            an empty string. This is provided for backwards compatibility;\n            avoid using it as it may have security implications.\n           \n          \n\n          \n           ENT_SUBSTITUTE\n           \n            Replace invalid code unit sequences with a Unicode Replacement Character\n            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.\n           \n          \n\n          \n           ENT_DISALLOWED\n           \n            Replace code unit sequences, which are invalid in the specified document type,\n            with a Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD; (otherwise).\n           \n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n       Defines character set used in conversion.\n       The default character set is ISO-8859-1.\n      \n      \n       For the purposes of this function, the charsets\n       ISO-8859-1, ISO-8859-15,\n       UTF-8, cp866,\n       cp1251, cp1252, and\n       KOI8-R are effectively equivalent, provided the\n       string itself is valid for the character set, as\n       the characters affected by htmlspecialchars() occupy\n       the same positions in all of these charsets.\n      \n      \n\n\n Following character sets are supported in PHP 4.3.0 and later.\n \n  Supported charsets\n  \n   \n    \n     Charset\n     Aliases\n     Description\n    \n\n   \n\n   \n    \n     ISO-8859-1\n     ISO8859-1\n     \n      Western European, Latin-1\n     \n    \n\n    \n     ISO-8859-15\n     ISO8859-15\n     \n      Western European, Latin-9. Adds the Euro sign, French and Finnish\n      letters missing in Latin-1 (ISO-8859-1).\n     \n    \n\n    \n     UTF-8\n     &nbsp;\n     \n      ASCII compatible multi-byte 8-bit Unicode.\n     \n    \n\n    \n     cp866\n     ibm866, 866\n     \n      DOS-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1251\n     Windows-1251, win-1251, 1251\n     \n      Windows-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1252\n     Windows-1252, 1252\n     \n      Windows specific charset for Western European.\n     \n    \n\n    \n     KOI8-R\n     koi8-ru, koi8r\n     \n      Russian. This charset is supported in 4.3.2.\n     \n    \n\n    \n     BIG5\n     950\n     \n      Traditional Chinese, mainly used in Taiwan.\n     \n    \n\n    \n     GB2312\n     936\n     \n      Simplified Chinese, national standard character set.\n     \n    \n\n    \n     BIG5-HKSCS\n     &nbsp;\n     \n      Big5 with Hong Kong extensions, Traditional Chinese.\n     \n    \n\n    \n     Shift_JIS\n     SJIS, 932\n     \n      Japanese\n     \n    \n\n    \n     EUC-JP\n     EUCJP\n     \n      Japanese\n     \n    \n\n    \n     &#039;&#039;\n     &nbsp;\n     \n      An empty string activates detection from script encoding (Zend multibyte),\n      default_charset and current\n      locale (see nl_langinfo() and\n      setlocale()), in this order. Not recommended.\n     \n    \n\n   \n  \n \n\n Note: \n  \n   Any other character sets are not recognized. The default encoding will be\n   used instead and a warning will be emitted.\n  \n \n\n\n\n     \n\n    \n\n    \n\n     double_encode\n     \n\n      \n       When double_encode is turned off PHP will not\n       encode existing html entities, the default is to convert everything.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The converted string.\n  \n  \n   If the input string contains an invalid code unit\n   sequence within the given charset and the\n   ENT_IGNORE flag is not set, then\n   htmlspecialchars() will return an empty string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The constants ENT_SUBSTITUTE, ENT_DISALLOWED,\n        ENT_HTML401, ENT_XML1,\n        ENT_XHTML and ENT_HTML5 were added.\n       \n      \n\n      \n       5.3.0\n       \n        The constant ENT_IGNORE was added.\n       \n      \n\n      \n       5.2.3\n       \n        The double_encode parameter was added.\n       \n      \n\n      \n       4.1.0\n       \n        The charset parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 htmlspecialchars() example\n    \n\n&lt;?php$new&nbsp;=&nbsp;htmlspecialchars(\"&lt;a&nbsp;href='test'&gt;Test&lt;\/a&gt;\",&nbsp;ENT_QUOTES);echo&nbsp;$new;&nbsp;\/\/&nbsp;&amp;lt;a&nbsp;href=&amp;#039;test&amp;#039;&amp;gt;Test&amp;lt;\/a&amp;gt;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Note that this function does not translate anything beyond what\n    is listed above. For full entity translation, see\n    htmlentities().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities\n    htmlspecialchars_decode() - Convert special HTML entities back to characters\n    strip_tags() - Strip HTML and PHP tags from a string\n    htmlentities() - Convert all applicable characters to HTML entities\n    nl2br() - Inserts HTML line breaks before all newlines in a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.localeconv.php","title":"localeconv","description":"\n \n  localeconv\n  (PHP 4 &gt;= 4.0.5, PHP 5)localeconv &mdash; Get numeric formatting information\n\n \n \n \n  Description\n  \n   array localeconv\n    ( void\n   )\n\n  \n   Returns an associative array containing localized numeric and\n   monetary formatting information.\n  \n \n\n\n \n  Return Values\n  \n   localeconv() returns data based upon the current locale\n   as set by setlocale().  The associative array that is\n   returned contains the following fields:\n   \n    \n     \n      \n       Array element\n       Description\n      \n\n     \n\n     \n      \n       decimal_point\n       Decimal point character\n      \n\n      \n       thousands_sep\n       Thousands separator\n      \n\n      \n       grouping\n       Array containing numeric groupings\n      \n\n      \n       int_curr_symbol\n       International currency symbol (i.e. USD)\n      \n\n      \n       currency_symbol\n       Local currency symbol (i.e. $)\n      \n\n      \n       mon_decimal_point\n       Monetary decimal point character\n      \n\n      \n       mon_thousands_sep\n       Monetary thousands separator\n      \n\n      \n       mon_grouping\n       Array containing monetary groupings\n      \n\n      \n       positive_sign\n       Sign for positive values\n      \n\n      \n       negative_sign\n       Sign for negative values\n      \n\n      \n       int_frac_digits\n       International fractional digits\n      \n\n      \n       frac_digits\n       Local fractional digits\n      \n\n      \n       p_cs_precedes\n       \n        TRUE if currency_symbol precedes a positive value, FALSE\n        if it succeeds one\n       \n      \n\n      \n       p_sep_by_space\n       \n        TRUE if a space separates currency_symbol from a positive\n        value, FALSE otherwise\n       \n      \n\n      \n       n_cs_precedes\n       \n        TRUE if currency_symbol precedes a negative value, FALSE\n        if it succeeds one\n       \n      \n\n      \n       n_sep_by_space\n       \n        TRUE if a space separates currency_symbol from a negative\n        value, FALSE otherwise\n       \n      \n\n      \n       p_sign_posn\n       \n        \n         0 - Parentheses surround the quantity and currency_symbol\n         1 - The sign string precedes the quantity and currency_symbol\n         2 - The sign string succeeds the quantity and currency_symbol\n         3 - The sign string immediately precedes the currency_symbol\n         4 - The sign string immediately succeeds the currency_symbol\n        \n       \n      \n\n      \n       n_sign_posn\n       \n        \n         0 - Parentheses surround the quantity and currency_symbol\n         1 - The sign string precedes the quantity and currency_symbol\n         2 - The sign string succeeds the quantity and currency_symbol\n         3 - The sign string immediately precedes the currency_symbol\n         4 - The sign string immediately succeeds the currency_symbol\n        \n       \n      \n\n     \n    \n   \n\n  \n  \n   The p_sign_posn, and n_sign_posn contain a string\n   of formatting options. Each number representing one of the above listed conditions.\n  \n  \n   The grouping fields contain arrays that define the way numbers should be\n   grouped. For example, the monetary grouping field for the nl_NL locale (in\n   UTF-8 mode with the euro sign), would contain a 2 item array with the\n   values 3 and 3. The higher the index in the array, the farther left the\n   grouping is. If an array element is equal to CHAR_MAX,\n   no further grouping is done. If an array element is equal to 0, the previous\n   element should be used.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 localeconv() example\n    \n\n&lt;?phpif&nbsp;(false&nbsp;!==&nbsp;setlocale(LC_ALL,&nbsp;'nl_NL.UTF-8@euro'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$locale_info&nbsp;=&nbsp;localeconv();&nbsp;&nbsp;&nbsp;&nbsp;print_r($locale_info);}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [decimal_point] =&gt; .\n    [thousands_sep] =&gt;\n    [int_curr_symbol] =&gt; EUR\n    [currency_symbol] =&gt; \u20ac\n    [mon_decimal_point] =&gt; ,\n    [mon_thousands_sep] =&gt;\n    [positive_sign] =&gt;\n    [negative_sign] =&gt; -\n    [int_frac_digits] =&gt; 2\n    [frac_digits] =&gt; 2\n    [p_cs_precedes] =&gt; 1\n    [p_sep_by_space] =&gt; 1\n    [n_cs_precedes] =&gt; 1\n    [n_sep_by_space] =&gt; 1\n    [p_sign_posn] =&gt; 1\n    [n_sign_posn] =&gt; 2\n    [grouping] =&gt; Array\n        (\n        )\n\n    [mon_grouping] =&gt; Array\n        (\n            [0] =&gt; 3\n            [1] =&gt; 3\n        )\n\n)\n\n    \n      \n  \n \n\n\n \n  See Also\n  \n   \n    setlocale() - Set locale information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ltrim.php","title":"ltrim","description":"\n \n  ltrim\n  (PHP 4, PHP 5)ltrim &mdash; Strip whitespace (or other characters) from the beginning of a string\n\n \n \n \n  Description\n  \n   string ltrim\n    ( string $str\n   [, string $charlist\n  ] )\n\n  \n   Strip whitespace (or other characters) from the beginning of a string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     charlist\n     \n\n      \n       You can also specify the characters you want to strip, by means of the\n       charlist parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns a string with whitespace stripped from the\n   beginning of str.\n   Without the second parameter,\n   ltrim() will strip these characters:\n   \n   \n    \n     \n      &quot; &quot; (ASCII 32\n      (0x20)), an ordinary space.\n     \n    \n    \n     \n      &quot;\\t&quot; (ASCII 9\n      (0x09)), a tab.\n     \n    \n    \n     \n      &quot;\\n&quot; (ASCII 10\n      (0x0A)), a new line (line feed).\n     \n    \n    \n     \n      &quot;\\r&quot; (ASCII 13\n      (0x0D)), a carriage return.\n     \n    \n    \n     \n      &quot;\\0&quot; (ASCII 0\n      (0x00)), the NUL-byte.\n     \n    \n    \n      \n      &quot;\\x0B&quot; (ASCII 11\n      (0x0B)), a vertical tab.\n     \n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The charlist parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Usage example of ltrim()\n    \n\n&lt;?php$text&nbsp;=&nbsp;\"\\t\\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;\";$binary&nbsp;=&nbsp;\"\\x09Example&nbsp;string\\x0A\";$hello&nbsp;&nbsp;=&nbsp;\"Hello&nbsp;World\";var_dump($text,&nbsp;$binary,&nbsp;$hello);print&nbsp;\"\\n\";$trimmed&nbsp;=&nbsp;ltrim($text);var_dump($trimmed);$trimmed&nbsp;=&nbsp;ltrim($text,&nbsp;\"&nbsp;\\t.\");var_dump($trimmed);$trimmed&nbsp;=&nbsp;ltrim($hello,&nbsp;\"Hdle\");var_dump($trimmed);\/\/&nbsp;trim&nbsp;the&nbsp;ASCII&nbsp;control&nbsp;characters&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;$binary\/\/&nbsp;(from&nbsp;0&nbsp;to&nbsp;31&nbsp;inclusive)$clean&nbsp;=&nbsp;ltrim($binary,&nbsp;\"\\x00..\\x1F\");var_dump($clean);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(32) &quot;        These are a few words :) ...  &quot;\nstring(16) &quot;    Example string\n&quot;\nstring(11) &quot;Hello World&quot;\n\nstring(30) &quot;These are a few words :) ...  &quot;\nstring(30) &quot;These are a few words :) ...  &quot;\nstring(7) &quot;o World&quot;\nstring(15) &quot;Example string\n&quot;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    trim() - Strip whitespace (or other characters) from the beginning and end of a string\n    rtrim() - Strip whitespace (or other characters) from the end of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.htmlentities.php","title":"htmlentities","description":"\n \n  htmlentities\n  (PHP 4, PHP 5)htmlentities &mdash; Convert all applicable characters to HTML entities\n\n \n \n \n  Description\n  \n   string htmlentities\n    ( string $string\n   [, int $flags = ENT_COMPAT | ENT_HTML401\n   [, string $charset\n   [, bool $double_encode = true\n  ]]] )\n\n  \n   This function is identical to htmlspecialchars() in all\n   ways, except with htmlentities(), all characters which\n   have HTML character entity equivalents are translated into these entities.\n  \n  \n   If you&#039;re wanting to decode instead (the reverse) you can use\n   html_entity_decode().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       A bitmask of one or more of the following flags, which specify how to handle quotes,\n       invalid code unit sequences and the used document type. The default is\n       ENT_COMPAT | ENT_HTML401.\n       \n        Available flags constants\n        \n         \n          \n           Constant Name\n           Description\n          \n\n         \n\n         \n          \n           ENT_COMPAT\n           Will convert double-quotes and leave single-quotes alone.\n          \n\n          \n           ENT_QUOTES\n           Will convert both double and single quotes.\n          \n\n          \n           ENT_NOQUOTES\n           Will leave both double and single quotes unconverted.\n          \n\n          \n           ENT_IGNORE\n           \n            Silently discard invalid code unit sequences instead of returning\n            an empty string. This is provided for backwards compatibility;\n            avoid using it as it may have security implications.\n           \n          \n\n          \n           ENT_SUBSTITUTE\n           \n            Replace invalid code unit sequences with a Unicode Replacement Character\n            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.\n           \n          \n\n          \n           ENT_DISALLOWED\n           \n            Replace code unit sequences, which are invalid in the specified document type,\n            with a Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD; (otherwise).\n           \n          \n\n          \n           ENT_HTML401\n           \n            Handle code as HTML 4.01.\n           \n          \n\n          \n           ENT_XML1\n           \n            Handle code as XML 1.\n           \n          \n\n          \n           ENT_XHTML\n           \n            Handle code as XHTML.\n           \n          \n\n          \n           ENT_HTML5\n           \n            Handle code as HTML 5.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     charset\n     \n\n      \n       Like htmlspecialchars(), it takes an optional\n       third argument charset which defines character\n       set used in conversion.\n       Presently, the ISO-8859-1 character set is used as the default.\n       However, this default is very likely to change in future versions of\n       PHP; the programmer is highly encouraged to specify a value.\n      \n      \n\n\n Following character sets are supported in PHP 4.3.0 and later.\n \n  Supported charsets\n  \n   \n    \n     Charset\n     Aliases\n     Description\n    \n\n   \n\n   \n    \n     ISO-8859-1\n     ISO8859-1\n     \n      Western European, Latin-1\n     \n    \n\n    \n     ISO-8859-15\n     ISO8859-15\n     \n      Western European, Latin-9. Adds the Euro sign, French and Finnish\n      letters missing in Latin-1 (ISO-8859-1).\n     \n    \n\n    \n     UTF-8\n     &nbsp;\n     \n      ASCII compatible multi-byte 8-bit Unicode.\n     \n    \n\n    \n     cp866\n     ibm866, 866\n     \n      DOS-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1251\n     Windows-1251, win-1251, 1251\n     \n      Windows-specific Cyrillic charset.\n      This charset is supported in 4.3.2.\n     \n    \n\n    \n     cp1252\n     Windows-1252, 1252\n     \n      Windows specific charset for Western European.\n     \n    \n\n    \n     KOI8-R\n     koi8-ru, koi8r\n     \n      Russian. This charset is supported in 4.3.2.\n     \n    \n\n    \n     BIG5\n     950\n     \n      Traditional Chinese, mainly used in Taiwan.\n     \n    \n\n    \n     GB2312\n     936\n     \n      Simplified Chinese, national standard character set.\n     \n    \n\n    \n     BIG5-HKSCS\n     &nbsp;\n     \n      Big5 with Hong Kong extensions, Traditional Chinese.\n     \n    \n\n    \n     Shift_JIS\n     SJIS, 932\n     \n      Japanese\n     \n    \n\n    \n     EUC-JP\n     EUCJP\n     \n      Japanese\n     \n    \n\n    \n     &#039;&#039;\n     &nbsp;\n     \n      An empty string activates detection from script encoding (Zend multibyte),\n      default_charset and current\n      locale (see nl_langinfo() and\n      setlocale()), in this order. Not recommended.\n     \n    \n\n   \n  \n \n\n Note: \n  \n   Any other character sets are not recognized. The default encoding will be\n   used instead and a warning will be emitted.\n  \n \n\n\n\n     \n\n    \n\n    \n\n     double_encode\n     \n\n      \n       When double_encode is turned off PHP will not\n       encode existing html entities. The default is to convert everything.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the encoded string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The constants ENT_SUBSTITUTE, ENT_DISALLOWED,\n        ENT_HTML401, ENT_XML1,\n        ENT_XHTML and ENT_HTML5 were added.\n       \n      \n\n      \n       5.3.0\n       \n        The constant ENT_IGNORE was added.\n       \n      \n\n      \n       5.2.3\n       \n        The double_encode parameter was added.\n       \n      \n\n      \n       4.1.0\n       \n        The charset parameter was added.\n       \n      \n\n      \n       4.0.3\n       \n        The flags parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A htmlentities() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"A&nbsp;'quote'&nbsp;is&nbsp;&lt;b&gt;bold&lt;\/b&gt;\";\/\/&nbsp;Outputs:&nbsp;A&nbsp;'quote'&nbsp;is&nbsp;&amp;lt;b&amp;gt;bold&amp;lt;\/b&amp;gt;echo&nbsp;htmlentities($str);\/\/&nbsp;Outputs:&nbsp;A&nbsp;&amp;#039;quote&amp;#039;&nbsp;is&nbsp;&amp;lt;b&amp;gt;bold&amp;lt;\/b&amp;gt;echo&nbsp;htmlentities($str,&nbsp;ENT_QUOTES);?&gt;\n\n\n    \n\n   \n  \n  \n  \n   \n    Example #2 Usage of ENT_IGNORE\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"\\x8F!!!\";\/\/&nbsp;Outputs&nbsp;an&nbsp;empty&nbsp;stringecho&nbsp;htmlentities($str,&nbsp;ENT_QUOTES,&nbsp;\"UTF-8\");\/\/&nbsp;Outputs&nbsp;\"!!!\"echo&nbsp;htmlentities($str,&nbsp;ENT_QUOTES&nbsp;|&nbsp;ENT_IGNORE,&nbsp;\"UTF-8\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    html_entity_decode() - Convert all HTML entities to their applicable characters\n    get_html_translation_table() - Returns the translation table used by htmlspecialchars and htmlentities\n    htmlspecialchars() - Convert special characters to HTML entities\n    nl2br() - Inserts HTML line breaks before all newlines in a string\n    urlencode() - URL-encodes string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.levenshtein.php","title":"levenshtein","description":"\n \n  levenshtein\n  (PHP 4 &gt;= 4.0.1, PHP 5)levenshtein &mdash; Calculate Levenshtein distance between two strings\n\n \n \n \n  Description\n  \n   int levenshtein\n    ( string $str1\n   , string $str2\n   )\n\n  \n   int levenshtein\n    ( string $str1\n   , string $str2\n   , int $cost_ins\n   , int $cost_rep\n   , int $cost_del\n   )\n\n  \n   The Levenshtein distance is defined as the minimal number of\n   characters you have to replace, insert or delete to transform\n   str1 into str2.\n   The complexity of the algorithm is O(m*n),\n   where n and m are the\n   length of str1 and\n   str2 (rather good when compared to\n   similar_text(), which is O(max(n,m)**3),\n   but still expensive).\n  \n  \n   In its simplest form the function will take only the two\n   strings as parameter and will calculate just the number of\n   insert, replace and delete operations needed to transform\n   str1 into str2.\n  \n  \n   A second variant will take three additional parameters that\n   define the cost of insert, replace and delete operations.  This\n   is more general and adaptive than variant one, but not as\n   efficient.\n  \n \n\n\n\n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       One of the strings being evaluated for Levenshtein distance.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       One of the strings being evaluated for Levenshtein distance.\n      \n     \n\n    \n\n    \n\n     cost_ins\n     \n\n      \n       Defines the cost of insertion.\n      \n     \n\n    \n\n    \n\n     cost_rep\n     \n\n      \n       Defines the cost of replacement.\n      \n     \n\n    \n\n    \n\n     cost_del\n     \n\n      \n       Defines the cost of deletion.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   This function returns the Levenshtein-Distance between the\n   two argument strings or -1, if one of the argument strings\n   is longer than the limit of 255 characters.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 levenshtein() example\n    \n\n&lt;?php\/\/&nbsp;input&nbsp;misspelled&nbsp;word$input&nbsp;=&nbsp;'carrrot';\/\/&nbsp;array&nbsp;of&nbsp;words&nbsp;to&nbsp;check&nbsp;against$words&nbsp;&nbsp;=&nbsp;array('apple','pineapple','banana','orange',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'radish','carrot','pea','bean','potato');\/\/&nbsp;no&nbsp;shortest&nbsp;distance&nbsp;found,&nbsp;yet$shortest&nbsp;=&nbsp;-1;\/\/&nbsp;loop&nbsp;through&nbsp;words&nbsp;to&nbsp;find&nbsp;the&nbsp;closestforeach&nbsp;($words&nbsp;as&nbsp;$word)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;calculate&nbsp;the&nbsp;distance&nbsp;between&nbsp;the&nbsp;input&nbsp;word,&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;and&nbsp;the&nbsp;current&nbsp;word&nbsp;&nbsp;&nbsp;&nbsp;$lev&nbsp;=&nbsp;levenshtein($input,&nbsp;$word);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;check&nbsp;for&nbsp;an&nbsp;exact&nbsp;match&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($lev&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;closest&nbsp;word&nbsp;is&nbsp;this&nbsp;one&nbsp;(exact&nbsp;match)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$closest&nbsp;=&nbsp;$word;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$shortest&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;break&nbsp;out&nbsp;of&nbsp;the&nbsp;loop;&nbsp;we've&nbsp;found&nbsp;an&nbsp;exact&nbsp;match&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;if&nbsp;this&nbsp;distance&nbsp;is&nbsp;less&nbsp;than&nbsp;the&nbsp;next&nbsp;found&nbsp;shortest&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;distance,&nbsp;OR&nbsp;if&nbsp;a&nbsp;next&nbsp;shortest&nbsp;word&nbsp;has&nbsp;not&nbsp;yet&nbsp;been&nbsp;found&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($lev&nbsp;&lt;=&nbsp;$shortest&nbsp;||&nbsp;$shortest&nbsp;&lt;&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;set&nbsp;the&nbsp;closest&nbsp;match,&nbsp;and&nbsp;shortest&nbsp;distance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$closest&nbsp;&nbsp;=&nbsp;$word;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$shortest&nbsp;=&nbsp;$lev;&nbsp;&nbsp;&nbsp;&nbsp;}}echo&nbsp;\"Input&nbsp;word:&nbsp;$input\\n\";if&nbsp;($shortest&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Exact&nbsp;match&nbsp;found:&nbsp;$closest\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Did&nbsp;you&nbsp;mean:&nbsp;$closest?\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nInput word: carrrot\nDid you mean: carrot?\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    soundex() - Calculate the soundex key of a string\n    similar_text() - Calculate the similarity between two strings\n    metaphone() - Calculate the metaphone key of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.implode.php","title":"implode","description":"\n \n  implode\n  (PHP 4, PHP 5)implode &mdash; Join array elements with a string\n\n \n \n \n  Description\n  \n   string implode\n    ( string $glue\n   , array $pieces\n   )\n\n  \n   string implode\n    ( array $pieces\n   )\n\n  \n   Join array elements with a glue string.\n  \n  Note: \n   \n    implode() can, for historical reasons, accept\n    its parameters in either order. For consistency with\n    explode(), however, it may be less confusing\n    to use the documented order of arguments.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     glue\n     \n\n      \n       Defaults to an empty string. This is not the preferred usage of\n       implode() as glue would be\n       the second parameter and thus, the bad prototype would be used.\n      \n     \n\n    \n\n    \n\n     pieces\n     \n\n      \n       The array of strings to implode.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing a string representation of all the array\n   elements in the same order, with the glue string between each element.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The glue parameter became optional.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 implode() example\n    \n\n&lt;?php$array&nbsp;=&nbsp;array('lastname',&nbsp;'email',&nbsp;'phone');$comma_separated&nbsp;=&nbsp;implode(\",\",&nbsp;$array);echo&nbsp;$comma_separated;&nbsp;\/\/&nbsp;lastname,email,phone\/\/&nbsp;Empty&nbsp;string&nbsp;when&nbsp;using&nbsp;an&nbsp;empty&nbsp;array:var_dump(implode('hello',&nbsp;array()));&nbsp;\/\/&nbsp;string(0)&nbsp;\"\"?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    explode() - Split a string by string\n    preg_split() - Split string by a regular expression\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.md5.php","title":"md5","description":"\n \n  md5\n  (PHP 4, PHP 5)md5 &mdash; Calculate the md5 hash of a string\n\n \n \n \n  Description\n  \n   string md5\n    ( string $str\n   [, bool $raw_output = false\n  ] )\n\n  \n   Calculates the MD5 hash of str using the\n   &raquo;&nbsp;RSA Data Security, Inc.\n   MD5 Message-Digest Algorithm, and returns that hash.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       If the optional raw_output is set to TRUE,\n       then the md5 digest is instead returned in raw binary format with a\n       length of 16.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the hash as a 32-character hexadecimal number. \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The raw_output parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A md5() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'apple';if&nbsp;(md5($str)&nbsp;===&nbsp;'1f3870be274f6c49b3e31a0c6728957f')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Would&nbsp;you&nbsp;like&nbsp;a&nbsp;green&nbsp;or&nbsp;red&nbsp;apple?\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  \n  Notes\n  Note: \n Secure password hashing\n \n  It is not recommended to use this function to secure passwords, due to the fast nature of this hashing algorithm. See\n  here for details.\n \n\n\n \n\n\n \n  See Also\n  \n   \n    md5_file() - Calculates the md5 hash of a given file\n    sha1_file() - Calculate the sha1 hash of a file\n    crc32() - Calculates the crc32 polynomial of a string\n    sha1() - Calculate the sha1 hash of a string\n    hash() - Generate a hash value (message digest)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.md5-file.php","title":"md5_file","description":"\n \n  md5_file\n  (PHP 4 &gt;= 4.2.0, PHP 5)md5_file &mdash; Calculates the md5 hash of a given file\n\n \n \n  Description\n  \n   string md5_file\n    ( string $filename\n   [, bool $raw_output = false\n  ] )\n\n  \n   Calculates the MD5 hash of the file specified by the\n   filename parameter using the\n   &raquo;&nbsp;RSA Data Security, Inc. \n   MD5 Message-Digest Algorithm, and returns that hash.\n   The hash is a 32-character hexadecimal number.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When TRUE, returns the digest in raw binary format with a length of\n       16.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string on success, FALSE otherwise.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        Added the raw_output parameter\n       \n      \n\n      \n       5.1.0\n       \n        Changed the function to use the streams API. It means that you can use\n        it with wrappers, like md5_file(&#039;http:\/\/example.com\/..&#039;)\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Usage example of md5_file()\n    \n\n&lt;?php$file&nbsp;=&nbsp;'php-5.3.0alpha2-Win32-VC9-x64.zip';echo&nbsp;'MD5&nbsp;file&nbsp;hash&nbsp;of&nbsp;'&nbsp;.&nbsp;$file&nbsp;.&nbsp;':&nbsp;'&nbsp;.&nbsp;md5_file($file);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    md5() - Calculate the md5 hash of a string\n    sha1_file() - Calculate the sha1 hash of a file\n    crc32() - Calculates the crc32 polynomial of a string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.metaphone.php","title":"metaphone","description":"\n \n  metaphone\n  (PHP 4, PHP 5)metaphone &mdash; Calculate the metaphone key of a string\n\n \n \n \n  Description\n  \n   string metaphone\n    ( string $str\n   [, int $phonemes = 0\n  ] )\n\n  \n   Calculates the metaphone key of str.\n  \n  \n   Similar to soundex() metaphone creates the same key for\n   similar sounding words. It&#039;s more accurate than\n   soundex() as it knows the basic rules of English\n   pronunciation.  The metaphone generated keys are of variable length.\n  \n  \n   Metaphone was developed by Lawrence Philips\n   &lt;lphilips at verity dot com&gt;. It is described in [&quot;Practical\n   Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,\n   1995].\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     phonemes\n     \n\n      \n       This parameter restricts the returned metaphone key to \n       phonemes characters in length.\n       The default value of 0 means no restriction.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the metaphone key as a string,  or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 metaphone() basic example\n    \n\n&lt;?phpvar_dump(metaphone('programming'));var_dump(metaphone('programmer'));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(7) &quot;PRKRMNK&quot;\nstring(6) &quot;PRKRMR&quot;\n\n    \n   \n  \n  \n   \n    Example #2 Using the phonemes parameter\n    \n\n&lt;?phpvar_dump(metaphone('programming',&nbsp;5));var_dump(metaphone('programmer',&nbsp;5));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(5) &quot;PRKRM&quot;\nstring(5) &quot;PRKRM&quot;\n\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.nl-langinfo.php","title":"nl_langinfo","description":"\n \n  nl_langinfo\n  (PHP 4 &gt;= 4.1.0, PHP 5)nl_langinfo &mdash; Query language and locale information\n\n \n \n \n  Description\n  \n   string nl_langinfo\n    ( int $item\n   )\n\n  \n   nl_langinfo() is used to access individual elements of\n   the locale categories.  Unlike localeconv(), which\n   returns all of the elements, nl_langinfo() allows you\n   to select any specific element.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     item\n     \n\n      \n       item may be an integer value of the element or the\n       constant name of the element. The following is a list of constant names\n       for item that may be used and their description.\n       Some of these constants may not be defined or hold no value for certain\n       locales.\n       \n        nl_langinfo Constants\n        \n         \n         \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LC_TIME Category Constants\n          \n\n          \n           ABDAY_(1-7)\n           Abbreviated name of n-th day of the week.\n          \n\n          \n           DAY_(1-7)\n           Name of the n-th day of the week (DAY_1 = Sunday).\n          \n\n          \n           ABMON_(1-12)\n           Abbreviated name of the n-th month of the year.\n          \n\n          \n           MON_(1-12)\n           Name of the n-th month of the year.\n          \n\n          \n           AM_STR\n           String for Ante meridian.\n          \n\n          \n           PM_STR\n           String for Post meridian.\n          \n\n          \n           D_T_FMT\n           String that can be used as the format string for strftime() to represent time and date.\n          \n\n          \n           D_FMT\n           String that can be used as the format string for strftime() to represent date.\n          \n\n          \n           T_FMT\n           String that can be used as the format string for strftime() to represent time.\n          \n\n          \n           T_FMT_AMPM\n           String that can be used as the format string for strftime() to represent time in 12-hour format with ante\/post meridian.\n          \n\n          \n           ERA\n           Alternate era.\n          \n\n          \n           ERA_YEAR\n           Year in alternate era format.\n          \n\n          \n           ERA_D_T_FMT\n           Date and time in alternate era format (string can be used in strftime()).\n          \n\n          \n           ERA_D_FMT\n           Date in alternate era format (string can be used in strftime()).\n          \n\n          \n           ERA_T_FMT\n           Time in alternate era format (string can be used in strftime()).\n          \n\n          \n           LC_MONETARY Category Constants\n          \n\n          \n           INT_CURR_SYMBOL\n           International currency symbol.\n          \n\n          \n           CURRENCY_SYMBOL\n           Local currency symbol.\n          \n\n          \n           CRNCYSTR\n           Same value as CURRENCY_SYMBOL.\n          \n\n          \n           MON_DECIMAL_POINT\n           Decimal point character.\n          \n\n          \n           MON_THOUSANDS_SEP\n           Thousands separator (groups of three digits).\n          \n\n          \n           MON_GROUPING\n           Like &quot;grouping&quot; element.\n          \n\n          \n           POSITIVE_SIGN\n           Sign for positive values.\n          \n\n          \n           NEGATIVE_SIGN\n           Sign for negative values.\n          \n\n          \n           INT_FRAC_DIGITS\n           International fractional digits.\n          \n\n          \n           FRAC_DIGITS\n           Local fractional digits.\n          \n\n          \n           P_CS_PRECEDES\n           Returns 1 if CURRENCY_SYMBOL precedes a positive value.\n          \n\n          \n           P_SEP_BY_SPACE\n           Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.\n          \n\n          \n           N_CS_PRECEDES\n           Returns 1 if CURRENCY_SYMBOL precedes a negative value.\n          \n\n          \n           N_SEP_BY_SPACE\n           Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.\n          \n\n          \n           P_SIGN_POSN\n           \n            \n             \n              \n                Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL.\n              \n             \n             \n              \n               Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL.\n              \n             \n            \n           \n          \n\n          \n           N_SIGN_POSN\n          \n\n          \n           LC_NUMERIC Category Constants\n          \n\n          \n           DECIMAL_POINT\n           Decimal point character.\n          \n\n          \n           RADIXCHAR\n           Same value as DECIMAL_POINT.\n          \n\n          \n           THOUSANDS_SEP\n           Separator character for thousands (groups of three digits).\n          \n\n          \n           THOUSEP\n           Same value as THOUSANDS_SEP.\n          \n\n          \n           GROUPING\n           &nbsp;\n          \n\n          \n           LC_MESSAGES Category Constants\n          \n\n          \n           YESEXPR\n           Regex string for matching &quot;yes&quot; input.\n          \n\n          \n           NOEXPR\n           Regex string for matching &quot;no&quot; input.\n          \n\n          \n           YESSTR\n           Output string for &quot;yes&quot;.\n          \n\n          \n           NOSTR\n           Output string for &quot;no&quot;.\n          \n\n          \n           LC_CTYPE Category Constants\n          \n\n          \n           CODESET\n           Return a string with the name of the character encoding.\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the element as a string, or FALSE if item\n   is not valid.\n  \n \n\n\n \n  Notes\n  Note: This function is not\nimplemented on Windows platforms.\n \n\n\n \n  See Also\n  \n   \n    setlocale() - Set locale information\n    localeconv() - Get numeric formatting information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.money-format.php","title":"money_format","description":"\n \n  money_format\n  (PHP 4 &gt;= 4.3.0, PHP 5)money_format &mdash; Formats a number as a currency string\n\n \n \n \n  Description\n  \n   string money_format\n    ( string $format\n   , float $number\n   )\n\n  \n   money_format() returns a formatted version of\n   number.  This function wraps the C library\n   function strfmon(), with the difference that\n   this implementation converts only one number at a time.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       The format specification consists of the following sequence:\n       \n        a  character\n        optional flags\n        optional field width\n        optional left precision\n        optional right precision\n        a required conversion character\n       \n      \n      \n       Flags\n       \n       One or more of the optional flags below can be used:\n        \n\n         \n\n          =f\n          \n\n           \n            The character = followed by a (single byte)\n            character f to be used as the numeric fill\n            character. The default fill character is space.\n           \n          \n\n         \n\n         \n\n          ^\n          \n\n           \n            Disable the use of grouping characters (as defined\n            by the current locale).\n           \n          \n\n         \n\n         \n\n          + or (\n          \n\n           \n            Specify the formatting style for positive and negative numbers.\n            If + is used, the locale&#039;s equivalent for\n            + and - will be used. If\n            ( is used, negative amounts are enclosed in\n            parenthesis. If no specification is given, the default is\n            +.\n           \n          \n\n         \n\n         \n\n          !\n          \n\n           \n            Suppress the currency symbol from the output string.\n           \n          \n\n         \n\n         \n\n          -\n          \n\n           \n            If present, it will make all fields left-justified (padded to the\n            right), as opposed to the default which is for the fields to be\n            right-justified (padded to the left).\n           \n          \n\n         \n\n        \n\n       \n      \n      \n       Field width\n       \n        \n\n         \n\n          w\n          \n\n           \n            A decimal digit string specifying a minimum field width. Field will\n            be right-justified unless the flag - is used.\n            Default value is 0 (zero).\n           \n          \n\n         \n\n        \n\n       \n      \n      \n       Left precision\n       \n        \n\n         \n\n          #n\n          \n\n           \n            The maximum number of digits (n) expected\n            to the left of the decimal character (e.g. the decimal point). It is\n            used usually to keep formatted output aligned in the same columns,\n            using the fill character if the number of digits is less than\n            n. If the number of actual digits is\n            bigger than n, then this specification is\n            ignored.\n           \n           \n            If grouping has not been suppressed using the ^\n            flag, grouping separators will be inserted before the fill\n            characters (if any) are added. Grouping separators will not be\n            applied to fill characters, even if the fill character is a digit.\n           \n           \n            To ensure alignment, any characters appearing before or after the\n            number in the formatted output such as currency or sign symbols are\n            padded as necessary with space characters to make their positive and\n            negative formats an equal length.\n           \n          \n\n         \n\n        \n\n       \n      \n      \n       \n        Right precision\n       \n       \n        \n\n         \n\n          .p\n          \n\n           \n            A period followed by the number of digits\n            (p) after the decimal character. If the\n            value of p is 0 (zero), the decimal\n            character and the digits to its right will be omitted. If no right\n            precision is included, the default will dictated by the current\n            local in use. The amount being formatted is rounded to the specified\n            number of digits prior to formatting.\n           \n          \n\n         \n\n        \n\n       \n      \n      \n       \n        Conversion characters\n       \n       \n        \n\n         \n\n          i\n          \n\n           \n            The number is formatted according to the locale&#039;s international\n            currency format (e.g. for the USA locale: USD 1,234.56).\n           \n          \n\n         \n\n         \n\n          n\n          \n\n           \n            The number is formatted according to the locale&#039;s national\n            currency format (e.g. for the de_DE locale: EU1.234,56).\n           \n          \n\n         \n\n         \n\n          \n          \n\n           \n            Returns the  character.\n           \n          \n\n         \n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     number\n     \n\n      \n       The number to be formatted.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the formatted string. Characters before and after the formatting\n   string will be returned unchanged.\n   Non-numeric number causes returning NULL and\n   emitting E_WARNING.\n  \n \n\n\n \n  Notes\n  Note: \n   \n    The function money_format() is only defined if\n    the system has strfmon capabilities.  For example, Windows does\n    not, so money_format() is undefined in Windows.\n   \n  \n  Note: \n   \n    The LC_MONETARY category of the locale settings,\n    affects the behavior of this function. Use setlocale()\n    to set to the appropriate default locale before using this function.\n   \n     \n \n\n\n \n  Examples\n  \n   \n    Example #1 money_format() Example\n    \n     We will use different locales and format specifications to\n     illustrate the use of this function.\n    \n    \n\n&lt;?php$number&nbsp;=&nbsp;1234.56;\/\/&nbsp;let's&nbsp;print&nbsp;the&nbsp;international&nbsp;format&nbsp;for&nbsp;the&nbsp;en_US&nbsp;localesetlocale(LC_MONETARY,&nbsp;'en_US');echo&nbsp;money_format('%i',&nbsp;$number)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;USD&nbsp;1,234.56\/\/&nbsp;Italian&nbsp;national&nbsp;format&nbsp;with&nbsp;2&nbsp;decimals`setlocale(LC_MONETARY,&nbsp;'it_IT');echo&nbsp;money_format('%.2n',&nbsp;$number)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Eu&nbsp;1.234,56\/\/&nbsp;Using&nbsp;a&nbsp;negative&nbsp;number$number&nbsp;=&nbsp;-1234.5672;\/\/&nbsp;US&nbsp;national&nbsp;format,&nbsp;using&nbsp;()&nbsp;for&nbsp;negative&nbsp;numbers\/\/&nbsp;and&nbsp;10&nbsp;digits&nbsp;for&nbsp;left&nbsp;precisionsetlocale(LC_MONETARY,&nbsp;'en_US');echo&nbsp;money_format('%(#10n',&nbsp;$number)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;($&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,234.57)\/\/&nbsp;Similar&nbsp;format&nbsp;as&nbsp;above,&nbsp;adding&nbsp;the&nbsp;use&nbsp;of&nbsp;2&nbsp;digits&nbsp;of&nbsp;right\/\/&nbsp;precision&nbsp;and&nbsp;'*'&nbsp;as&nbsp;a&nbsp;fill&nbsp;characterecho&nbsp;money_format('%=*(#10.2n',&nbsp;$number)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;($********1,234.57)\/\/&nbsp;Let's&nbsp;justify&nbsp;to&nbsp;the&nbsp;left,&nbsp;with&nbsp;14&nbsp;positions&nbsp;of&nbsp;width,&nbsp;8&nbsp;digits&nbsp;of\/\/&nbsp;left&nbsp;precision,&nbsp;2&nbsp;of&nbsp;right&nbsp;precision,&nbsp;withouth&nbsp;grouping&nbsp;character\/\/&nbsp;and&nbsp;using&nbsp;the&nbsp;international&nbsp;format&nbsp;for&nbsp;the&nbsp;de_DE&nbsp;locale.setlocale(LC_MONETARY,&nbsp;'de_DE');echo&nbsp;money_format('%=*^-14#8.2i',&nbsp;1234.56)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;Eu&nbsp;1234,56****\/\/&nbsp;Let's&nbsp;add&nbsp;some&nbsp;blurb&nbsp;before&nbsp;and&nbsp;after&nbsp;the&nbsp;conversion&nbsp;specificationsetlocale(LC_MONETARY,&nbsp;'en_GB');$fmt&nbsp;=&nbsp;'The&nbsp;final&nbsp;value&nbsp;is&nbsp;%i&nbsp;(after&nbsp;a&nbsp;10%%&nbsp;discount)';echo&nbsp;money_format($fmt,&nbsp;1234.56)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;The&nbsp;final&nbsp;value&nbsp;is&nbsp;&nbsp;GBP&nbsp;1,234.56&nbsp;(after&nbsp;a&nbsp;10%&nbsp;discount)?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    setlocale() - Set locale information\n    sscanf() - Parses input from a string according to a format\n    sprintf() - Return a formatted string\n    printf() - Output a formatted string\n    number_format() - Format a number with grouped thousands\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ord.php","title":"ord","description":"\n \n  ord\n  (PHP 4, PHP 5)ord &mdash; Return ASCII value of character\n\n \n \n \n  Description\n  \n   int ord\n    ( string $string\n   )\n\n  \n   Returns the ASCII value of the first character of\n   string.\n  \n  \n   This function complements chr().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       A character.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the ASCII value as an integer.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ord() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"\\n\";if&nbsp;(ord($str)&nbsp;==&nbsp;10)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;first&nbsp;character&nbsp;of&nbsp;\\$str&nbsp;is&nbsp;a&nbsp;line&nbsp;feed.\\n\";}?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    chr() - Return a specific character\n    An &raquo;&nbsp;ASCII-table\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.nl2br.php","title":"nl2br","description":"\n \n  nl2br\n  (PHP 4, PHP 5)nl2br &mdash; Inserts HTML line breaks before all newlines in a string\n\n \n \n \n  Description\n  \n   string nl2br\n    ( string $string\n   [, bool $is_xhtml = true\n  ] )\n\n  \n   Returns string with &#039;&lt;br \/&gt;&#039; or \n   &#039;&lt;br&gt;&#039; inserted before all newlines (\\r\\n,\n   \\n\\r, \\n and \\r).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     is_xhtml\n     \n\n      \n       Whenever to use XHTML compatible line breaks or not.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the altered string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using nl2br()\n    \n\n&lt;?phpecho&nbsp;nl2br(\"foo&nbsp;isn't\\n&nbsp;bar\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfoo isn&#039;t&lt;br \/&gt;\n bar\n\n    \n   \n   \n    Example #2 Generating valid HTML markup using the is_xhtml parameter\n    \n\n&lt;?phpecho&nbsp;nl2br(\"Welcome\\r\\nThis&nbsp;is&nbsp;my&nbsp;HTML&nbsp;document\",&nbsp;false);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nWelcome&lt;br&gt;\nThis is my HTML document\n\n    \n   \n   \n    Example #3 Various newline separators\n    \n\n&lt;?php$string&nbsp;=&nbsp;\"This\\r\\nis\\n\\ra\\nstring\\r\";echo&nbsp;nl2br($string);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis&lt;br \/&gt;\nis&lt;br \/&gt;\na&lt;br \/&gt;\nstring&lt;br \/&gt;\n\n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         Added the optional is_xhtml parameter.\n       \n      \n\n      \n       4.0.5\n       \n        nl2br() is now XHTML compliant. All older versions\n        will return string with &#039;&lt;br&gt;&#039; inserted\n        before newlines instead of &#039;&lt;br \/&gt;&#039;.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    htmlspecialchars() - Convert special characters to HTML entities\n    htmlentities() - Convert all applicable characters to HTML entities\n    wordwrap() - Wraps a string to a given number of characters\n    str_replace() - Replace all occurrences of the search string with the replacement string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.print.php","title":"print","description":"\n \n  print\n  (PHP 4, PHP 5)print &mdash; Output a string\n\n \n \n \n  Description\n  \n   int print\n    ( string $arg\n   )\n\n  \n   Outputs arg.\n  \n  \n   print() is not actually a real function (it is a\n   language construct) so you are not required to use parentheses\n   with its argument list.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       The input data.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns 1, always.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 print() examples\n    \n\n&lt;?phpprint(\"Hello&nbsp;World\");print&nbsp;\"print()&nbsp;also&nbsp;works&nbsp;without&nbsp;parentheses.\";print&nbsp;\"This&nbsp;spansmultiple&nbsp;lines.&nbsp;The&nbsp;newlines&nbsp;will&nbsp;beoutput&nbsp;as&nbsp;well\";print&nbsp;\"This&nbsp;spans\\nmultiple&nbsp;lines.&nbsp;The&nbsp;newlines&nbsp;will&nbsp;be\\noutput&nbsp;as&nbsp;well.\";print&nbsp;\"escaping&nbsp;characters&nbsp;is&nbsp;done&nbsp;\\\"Like&nbsp;this\\\".\";\/\/&nbsp;You&nbsp;can&nbsp;use&nbsp;variables&nbsp;inside&nbsp;a&nbsp;print&nbsp;statement$foo&nbsp;=&nbsp;\"foobar\";$bar&nbsp;=&nbsp;\"barbaz\";print&nbsp;\"foo&nbsp;is&nbsp;$foo\";&nbsp;\/\/&nbsp;foo&nbsp;is&nbsp;foobar\/\/&nbsp;You&nbsp;can&nbsp;also&nbsp;use&nbsp;arrays$bar&nbsp;=&nbsp;array(\"value\"&nbsp;=&gt;&nbsp;\"foo\");print&nbsp;\"this&nbsp;is&nbsp;{$bar['value']}&nbsp;!\";&nbsp;\/\/&nbsp;this&nbsp;is&nbsp;foo&nbsp;!\/\/&nbsp;Using&nbsp;single&nbsp;quotes&nbsp;will&nbsp;print&nbsp;the&nbsp;variable&nbsp;name,&nbsp;not&nbsp;the&nbsp;valueprint&nbsp;'foo&nbsp;is&nbsp;$foo';&nbsp;\/\/&nbsp;foo&nbsp;is&nbsp;$foo\/\/&nbsp;If&nbsp;you&nbsp;are&nbsp;not&nbsp;using&nbsp;any&nbsp;other&nbsp;characters,&nbsp;you&nbsp;can&nbsp;just&nbsp;print&nbsp;variablesprint&nbsp;$foo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;foobarprint&nbsp;&lt;&lt;&lt;ENDThis&nbsp;uses&nbsp;the&nbsp;\"here&nbsp;document\"&nbsp;syntax&nbsp;to&nbsp;outputmultiple&nbsp;lines&nbsp;with&nbsp;$variable&nbsp;interpolation.&nbsp;Notethat&nbsp;the&nbsp;here&nbsp;document&nbsp;terminator&nbsp;must&nbsp;appear&nbsp;on&nbsp;aline&nbsp;with&nbsp;just&nbsp;a&nbsp;semicolon&nbsp;no&nbsp;extra&nbsp;whitespace!END;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions\n\n \n\n\n \n  See Also\n  \n   \n    echo() - Output one or more strings\n    printf() - Output a formatted string\n    flush() - Flush the output buffer\n    Heredoc syntax\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-str.php","title":"parse_str","description":"\n \n  parse_str\n  (PHP 4, PHP 5)parse_str &mdash; Parses the string into variables\n\n \n \n \n  Description\n  \n   void parse_str\n    ( string $str\n   [, array &$arr\n  ] )\n\n  \n   Parses str as if it were the query string\n   passed via a URL and sets variables in the current scope. \n  \n  Note: \n   \n    To get the current QUERY_STRING, you may use the variable\n    $_SERVER['QUERY_STRING'].\n    Also, you may want to read the section on\n    variables from external\n    sources.\n   \n  \n  Note: \n   \n    The magic_quotes_gpc setting\n    affects the output of this function, as parse_str() uses\n    the same mechanism that PHP uses to populate the $_GET,\n    $_POST, etc. variables.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     arr\n     \n\n      \n       If the second parameter arr is present,\n       variables are stored in this variable as array elements instead.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.3\n       \n        The arr parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using parse_str()\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"first=value&amp;arr[]=foo+bar&amp;arr[]=baz\";parse_str($str);echo&nbsp;$first;&nbsp;&nbsp;\/\/&nbsp;valueecho&nbsp;$arr[0];&nbsp;\/\/&nbsp;foo&nbsp;barecho&nbsp;$arr[1];&nbsp;\/\/&nbsp;bazparse_str($str,&nbsp;$output);echo&nbsp;$output['first'];&nbsp;&nbsp;\/\/&nbsp;valueecho&nbsp;$output['arr'][0];&nbsp;\/\/&nbsp;foo&nbsp;barecho&nbsp;$output['arr'][1];&nbsp;\/\/&nbsp;baz?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    parse_url() - Parse a URL and return its components\n    pathinfo() - Returns information about a file path\n    http_build_query() - Generate URL-encoded query string\n    get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc\n    urldecode() - Decodes URL-encoded string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.printf.php","title":"printf","description":"\n \n  printf\n  (PHP 4, PHP 5)printf &mdash; Output a formatted string\n\n \n \n \n  Description\n  \n   int printf\n    ( string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )\n\n  \n   Produces output according to format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       See sprintf() for a description of\n       format.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the outputted string.\n  \n \n\n\n \n  See Also\n  \n   \n    print() - Output a string\n    sprintf() - Return a formatted string\n    vprintf() - Output a formatted string\n    sscanf() - Parses input from a string according to a format\n    fscanf() - Parses input from a file according to a format\n    flush() - Flush the output buffer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.number-format.php","title":"number_format","description":"\n \n  number_format\n  (PHP 4, PHP 5)number_format &mdash; Format a number with grouped thousands\n\n \n \n \n  Description\n  \n   string number_format\n    ( float $number\n   [, int $decimals = 0\n  ] )\n\n  \n   string number_format\n    ( float $number\n   , int $decimals = 0\n   , string $dec_point = &#039;.&#039;\n   , string $thousands_sep = &#039;,&#039;\n   )\n\n  \n   This function accepts either one, two, or four parameters (not three):\n  \n  \n   If only one parameter is given,\n   number will be formatted without decimals,\n   but with a comma (&quot;,&quot;) between every group of thousands.\n  \n  \n   If two parameters are given, number will\n   be formatted with decimals decimals with a\n   dot (&quot;.&quot;) in front, and a comma (&quot;,&quot;) between every group of\n   thousands.\n  \n  \n   If all four parameters are given, number\n   will be formatted with decimals decimals,\n   dec_point instead of a dot (&quot;.&quot;) before\n   the decimals and thousands_sep instead of\n   a comma (&quot;,&quot;) between every group of thousands.\n  \n \n\n\n \n  Return Values\n  \n   A formatted version of number.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       The number being formatted.\n      \n     \n\n    \n\n    \n\n     decimals\n     \n\n      \n       Sets the number of decimal points.\n      \n     \n\n    \n\n    \n\n     dec_point\n     \n\n      \n       Sets the separator for the decimal point.\n      \n     \n\n    \n\n    \n\n     thousands_sep\n     \n\n      \n       Sets the thousands separator.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        This function now supports multiple bytes in\n        dec_point and\n        thousands_sep. Only the first byte of each\n        separator was used in older versions.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 number_format() Example\n    \n     For instance, French notation usually use two decimals,\n     comma (&#039;,&#039;) as decimal separator, and space (&#039; &#039;) as\n     thousand separator. This is achieved with this line :\n    \n    \n\n&lt;?php$number&nbsp;=&nbsp;1234.56;\/\/&nbsp;english&nbsp;notation&nbsp;(default)$english_format_number&nbsp;=&nbsp;number_format($number);\/\/&nbsp;1,235\/\/&nbsp;French&nbsp;notation$nombre_format_francais&nbsp;=&nbsp;number_format($number,&nbsp;2,&nbsp;',',&nbsp;'&nbsp;');\/\/&nbsp;1&nbsp;234,56$number&nbsp;=&nbsp;1234.5678;\/\/&nbsp;english&nbsp;notation&nbsp;without&nbsp;thousands&nbsp;separator$english_format_number&nbsp;=&nbsp;number_format($number,&nbsp;2,&nbsp;'.',&nbsp;'');\/\/&nbsp;1234.57?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    money_format() - Formats a number as a currency string\n    sprintf() - Return a formatted string\n    printf() - Output a formatted string\n    sscanf() - Parses input from a string according to a format\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quotemeta.php","title":"quotemeta","description":"\n \n  quotemeta\n  (PHP 4, PHP 5)quotemeta &mdash; Quote meta characters\n\n \n \n \n  Description\n  \n   string quotemeta\n    ( string $str\n   )\n\n  \n   Returns a version of str with a backslash character (\\)\n   before every character that is among these: \n   . \\ + * ? [ ^ ] ( $ )\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the string with meta characters quoted, or FALSE if an empty\n   string is given as str.\n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    addslashes() - Quote string with slashes\n    addcslashes() - Quote string with slashes in a C style\n    htmlentities() - Convert all applicable characters to HTML entities\n    htmlspecialchars() - Convert special characters to HTML entities\n    nl2br() - Inserts HTML line breaks before all newlines in a string\n    stripslashes() - Un-quotes a quoted string\n    stripcslashes() - Un-quote string quoted with addcslashes\n    preg_match() - Perform a regular expression match\n    preg_quote() - Quote regular expression characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quoted-printable-decode.php","title":"quoted_printable_decode","description":"\n \n  quoted_printable_decode\n  (PHP 4, PHP 5)quoted_printable_decode &mdash; Convert a quoted-printable string to an 8 bit string\n\n \n \n \n  Description\n  \n   string quoted_printable_decode\n    ( string $str\n   )\n\n  \n   This function returns an 8-bit binary string corresponding to the decoded\n   quoted printable string (according to &raquo;&nbsp;RFC2045, section 6.7, not &raquo;&nbsp;RFC2821, section 4.5.2, so additional periods\n   are not stripped from the beginning of line).\n  \n  \n   This function is similar to imap_qprint(), except this\n   one does not require the IMAP module to work.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the 8-bit binary string.\n  \n \n\n\n \n  See Also\n  \n   \n    quoted_printable_encode() - Convert a 8 bit string to a quoted-printable string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rtrim.php","title":"rtrim","description":"\n \n  rtrim\n  (PHP 4, PHP 5)rtrim &mdash; Strip whitespace (or other characters) from the end of a string\n\n \n \n \n  Description\n  \n   string rtrim\n    ( string $str\n   [, string $charlist\n  ] )\n\n  \n   This function returns a string with whitespace stripped from the\n   end of str.\n  \n  \n   Without the second parameter,\n   rtrim() will strip these characters:\n   \n   \n    \n     \n      &quot; &quot; (ASCII 32\n      (0x20)), an ordinary space.\n     \n    \n    \n     \n      &quot;\\t&quot; (ASCII 9\n      (0x09)), a tab.\n     \n    \n    \n     \n      &quot;\\n&quot; (ASCII 10\n      (0x0A)), a new line (line feed).\n     \n    \n    \n     \n      &quot;\\r&quot; (ASCII 13\n      (0x0D)), a carriage return.\n     \n    \n    \n     \n      &quot;\\0&quot; (ASCII 0\n      (0x00)), the NUL-byte.\n     \n    \n    \n      \n      &quot;\\x0B&quot; (ASCII 11\n      (0x0B)), a vertical tab.\n     \n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     charlist\n     \n\n      \n       You can also specify the characters you want to strip, by means\n       of the charlist parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the modified string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The charlist parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Usage example of rtrim()\n    \n\n&lt;?php$text&nbsp;=&nbsp;\"\\t\\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;\";$binary&nbsp;=&nbsp;\"\\x09Example&nbsp;string\\x0A\";$hello&nbsp;&nbsp;=&nbsp;\"Hello&nbsp;World\";var_dump($text,&nbsp;$binary,&nbsp;$hello);print&nbsp;\"\\n\";$trimmed&nbsp;=&nbsp;rtrim($text);var_dump($trimmed);$trimmed&nbsp;=&nbsp;rtrim($text,&nbsp;\"&nbsp;\\t.\");var_dump($trimmed);$trimmed&nbsp;=&nbsp;rtrim($hello,&nbsp;\"Hdle\");var_dump($trimmed);\/\/&nbsp;trim&nbsp;the&nbsp;ASCII&nbsp;control&nbsp;characters&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;$binary\/\/&nbsp;(from&nbsp;0&nbsp;to&nbsp;31&nbsp;inclusive)$clean&nbsp;=&nbsp;rtrim($binary,&nbsp;\"\\x00..\\x1F\");var_dump($clean);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(32) &quot;        These are a few words :) ...  &quot;\nstring(16) &quot;    Example string\n&quot;\nstring(11) &quot;Hello World&quot;\n\nstring(30) &quot;        These are a few words :) ...&quot;\nstring(26) &quot;        These are a few words :)&quot;\nstring(9) &quot;Hello Wor&quot;\nstring(15) &quot;    Example string&quot;\n\n    \n      \n  \n \n\n\n \n  See Also\n  \n   \n    trim() - Strip whitespace (or other characters) from the beginning and end of a string\n    ltrim() - Strip whitespace (or other characters) from the beginning of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.quoted-printable-encode.php","title":"quoted_printable_encode","description":"\n \n  quoted_printable_encode\n  (PHP 5 &gt;= 5.3.0)quoted_printable_encode &mdash; Convert a 8 bit string to a quoted-printable string\n\n \n \n \n  Description\n  \n   string quoted_printable_encode\n    ( string $str\n   )\n\n  \n   Returns a quoted printable string created according to &raquo;&nbsp;RFC2045, section 6.7.\n  \n  \n   This function is similar to imap_8bit(), except this\n   one does not require the IMAP module to work.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the encoded string.\n  \n \n\n\n \n  See Also\n  \n   \n    quoted_printable_decode() - Convert a quoted-printable string to an 8 bit string\n    iconv_mime_encode() - Composes a MIME header field\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sha1-file.php","title":"sha1_file","description":"\n \n  sha1_file\n  (PHP 4 &gt;= 4.3.0, PHP 5)sha1_file &mdash; Calculate the sha1 hash of a file\n\n \n \n  Description\n  \n   string sha1_file\n    ( string $filename\n   [, bool $raw_output = false\n  ] )\n\n  \n   Calculates the sha1 hash of the file specified by\n   filename using the\n   &raquo;&nbsp;US Secure Hash Algorithm 1,\n   and returns that hash. The hash is a 40-character hexadecimal number.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The filename of the file to hash.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       When TRUE, returns the digest in raw binary format with a length of\n       20.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string on success, FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sha1_file() example\n    \n\n&lt;?phpforeach(glob('\/home\/Kalle\/myproject\/*.php')&nbsp;as&nbsp;$ent){&nbsp;&nbsp;&nbsp;&nbsp;if(is_dir($ent))&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$ent&nbsp;.&nbsp;'&nbsp;(SHA1:&nbsp;'&nbsp;.&nbsp;sha1_file($ent)&nbsp;.&nbsp;')',&nbsp;PHP_EOL;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Changed the function to use the streams API. It means that you can use\n        it with wrappers, like sha1_file(&#039;http:\/\/example.com\/..&#039;)\n       \n      \n\n      \n       5.0.0\n       \n        Added the raw_output parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    sha1() - Calculate the sha1 hash of a string\n    md5_file() - Calculates the md5 hash of a given file\n    crc32() - Calculates the crc32 polynomial of a string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.setlocale.php","title":"setlocale","description":"\n \n  setlocale\n  (PHP 4, PHP 5)setlocale &mdash; Set locale information\n\n \n \n \n  Description\n  \n   string setlocale\n    ( int $category\n   , string $locale\n   [, string $...\n  ] )\n\n  \n   string setlocale\n    ( int $category\n   , array $locale\n   )\n\n  \n   Sets locale information.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     category\n     \n\n      \n       category is a named constant specifying the\n       category of the functions affected by the locale setting:\n       \n        \n         \n          LC_ALL for all of the below\n         \n        \n        \n         \n          LC_COLLATE for string comparison, see\n          strcoll()\n         \n        \n        \n         \n          LC_CTYPE for character classification and conversion, for\n          example strtoupper()\n         \n        \n        \n         \n          LC_MONETARY for localeconv()\n         \n        \n        \n         \n          LC_NUMERIC for decimal separator (See also\n          localeconv())\n         \n        \n        \n         \n          LC_TIME for date and time formatting with\n          strftime()\n         \n        \n        \n         \n          LC_MESSAGES for system responses (available if PHP was compiled with\n          libintl)\n         \n        \n       \n      \n     \n\n    \n\n    \n\n     locale\n     \n\n      \n       If locale is NULL or the empty string\n       &quot;&quot;, the locale names will be set from the\n       values of environment variables with the same names as the above\n       categories, or from &quot;LANG&quot;.\n      \n      \n       If locale is &quot;0&quot;,\n       the locale setting is not affected, only the current setting is returned.\n      \n      \n       If locale is an array or followed by additional\n       parameters then each array element or parameter is tried to be set as\n       new locale until success. This is useful if a locale is known under\n       different names on different systems or for providing a fallback\n       for a possibly not available locale.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       (Optional string or array parameters to try as locale settings until\n       success.)\n      \n     \n\n    \n\n   \n\n   Note: \n    \n     On Windows, setlocale(LC_ALL, &#039;&#039;) sets the locale names from the\n     system&#039;s regional\/language settings (accessible via Control Panel).\n    \n   \n  \n \n\n\n \n  Return Values\n  \n   Returns the new current locale, or FALSE if the locale functionality is\n   not implemented on your platform, the specified locale does not exist or\n   the category name is invalid.\n  \n  \n   An invalid category name also causes a warning message. Category\/locale\n   names can be found in &raquo;&nbsp;RFC 1766\n   and &raquo;&nbsp;ISO 639.\n   Different systems have different naming schemes for locales.\n  \n  Note: \n   \n    The return value of setlocale() depends\n    on the system that PHP is running.  It returns exactly\n    what the system setlocale function returns.\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        This function now throws an E_DEPRECATED notice if a string is passed \n        to the category parameter instead of one of the \n        LC_* constants.\n       \n      \n\n      \n       4.3.0\n       \n        Passing multiple locales became possible.\n       \n      \n\n      \n       4.2.0\n       \n        Passing category as a string is now deprecated,\n        use the above constants instead.  Passing them as a string (within\n        quotes) will result in a warning message.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 setlocale() Examples\n    \n\n&lt;?php\/*&nbsp;Set&nbsp;locale&nbsp;to&nbsp;Dutch&nbsp;*\/setlocale(LC_ALL,&nbsp;'nl_NL');\/*&nbsp;Output:&nbsp;vrijdag&nbsp;22&nbsp;december&nbsp;1978&nbsp;*\/echo&nbsp;strftime(\"%A&nbsp;%e&nbsp;%B&nbsp;%Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;12,&nbsp;22,&nbsp;1978));\/*&nbsp;try&nbsp;different&nbsp;possible&nbsp;locale&nbsp;names&nbsp;for&nbsp;german&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0&nbsp;*\/$loc_de&nbsp;=&nbsp;setlocale(LC_ALL,&nbsp;'de_DE@euro',&nbsp;'de_DE',&nbsp;'de',&nbsp;'ge');echo&nbsp;\"Preferred&nbsp;locale&nbsp;for&nbsp;german&nbsp;on&nbsp;this&nbsp;system&nbsp;is&nbsp;'$loc_de'\";?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 setlocale() Examples for Windows\n    \n\n&lt;?php\/*&nbsp;Set&nbsp;locale&nbsp;to&nbsp;Dutch&nbsp;*\/setlocale(LC_ALL,&nbsp;'nld_nld');\/*&nbsp;Output:&nbsp;vrijdag&nbsp;22&nbsp;december&nbsp;1978&nbsp;*\/echo&nbsp;strftime(\"%A&nbsp;%d&nbsp;%B&nbsp;%Y\",&nbsp;mktime(0,&nbsp;0,&nbsp;0,&nbsp;12,&nbsp;22,&nbsp;1978));\/*&nbsp;try&nbsp;different&nbsp;possible&nbsp;locale&nbsp;names&nbsp;for&nbsp;german&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0&nbsp;*\/$loc_de&nbsp;=&nbsp;setlocale(LC_ALL,&nbsp;'de_DE@euro',&nbsp;'de_DE',&nbsp;'deu_deu');echo&nbsp;\"Preferred&nbsp;locale&nbsp;for&nbsp;german&nbsp;on&nbsp;this&nbsp;system&nbsp;is&nbsp;'$loc_de'\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    The locale information is maintained per process, not per thread. If you\n    are running PHP on a multithreaded server API like IIS or Apache on\n    Windows, you may experience sudden changes in locale settings while a\n    script is running, though the script itself never called \n    setlocale(). This happens due to other scripts\n    running in different threads of the same process at the same time,\n    changing the process-wide locale using setlocale().\n   \n  \n  Tip\n   \n    Windows users will find useful information about\n    locale strings at Microsoft&#039;s\n    MSDN website. Supported language strings can be found\n    at &raquo;&nbsp;http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/vclib\/html\/_crt_language_strings.asp and supported\n    country\/region strings at\n    &raquo;&nbsp;http:\/\/msdn.microsoft.com\/library\/default.asp?url=\/library\/en-us\/vclib\/html\/_crt_country_strings.asp.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.similar-text.php","title":"similar_text","description":"\n \n  similar_text\n  (PHP 4, PHP 5)similar_text &mdash; Calculate the similarity between two strings\n\n \n \n \n  Description\n  \n   int similar_text\n    ( string $first\n   , string $second\n   [, float &$percent\n  ] )\n\n  \n   This calculates the similarity between two strings as described in Oliver\n   [1993]. Note that this implementation does not use a stack as in Oliver&#039;s\n   pseudo code, but recursive calls which may or may not speed up the whole\n   process. Note also that the complexity of this algorithm is O(N**3) where\n   N is the length of the longest string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     first\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     second\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n    \n\n     percent\n     \n\n      \n       By passing a reference as third argument,\n       similar_text() will calculate the similarity in\n       percent for you. \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of matching chars in both strings.\n  \n \n\n\n \n  See Also\n  \n   \n    levenshtein() - Calculate Levenshtein distance between two strings\n    soundex() - Calculate the soundex key of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.soundex.php","title":"soundex","description":"\n \n  soundex\n  (PHP 4, PHP 5)soundex &mdash; Calculate the soundex key of a string\n\n \n \n \n  Description\n  \n   string soundex\n    ( string $str\n   )\n\n  \n   Calculates the soundex key of str.\n  \n  \n   Soundex keys have the property that words pronounced similarly\n   produce the same soundex key, and can thus be used to simplify\n   searches in databases where you know the pronunciation but not\n   the spelling. This soundex function returns a string 4 characters\n   long, starting with a letter.\n  \n  \n   This particular soundex function is one described by Donald Knuth\n   in &quot;The Art Of Computer Programming, vol. 3: Sorting And\n   Searching&quot;, Addison-Wesley (1973), pp. 391-392.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the soundex key as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Soundex Examples\n    \n\n&lt;?phpsoundex(\"Euler\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;soundex(\"Ellery\");&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;E460soundex(\"Gauss\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;soundex(\"Ghosh\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;G200soundex(\"Hilbert\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;soundex(\"Heilbronn\");&nbsp;\/\/&nbsp;H416soundex(\"Knuth\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;soundex(\"Kant\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;K530soundex(\"Lloyd\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;soundex(\"Ladd\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;L300soundex(\"Lukasiewicz\")&nbsp;==&nbsp;soundex(\"Lissajous\");&nbsp;\/\/&nbsp;L222?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    levenshtein() - Calculate Levenshtein distance between two strings\n    metaphone() - Calculate the metaphone key of a string\n    similar_text() - Calculate the similarity between two strings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sscanf.php","title":"sscanf","description":"\n \n  sscanf\n  (PHP 4 &gt;= 4.0.1, PHP 5)sscanf &mdash; Parses input from a string according to a format\n\n \n \n \n  Description\n  \n   mixed sscanf\n    ( string $str\n   , string $format\n   [, mixed &$...\n  ] )\n\n  \n   The function sscanf() is the input analog of\n   printf(). sscanf() reads\n   from the string str and interprets it\n   according to the specified format, which is\n   described in the documentation for sprintf(). \n  \n  \n   Any whitespace in the format string matches any whitespace in the input\n   string. This means that even a tab \\t in the format string can match a\n   single space character in the input string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string being parsed.\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       The interpreted format for str, which is\n       described in the documentation for sprintf() with\n       following differences:\n       \n        \n         Function is not locale-aware.\n        \n        \n         F, g, G and\n         b are not supported.\n        \n        \n         D stands for decimal number.\n        \n        \n         i stands for integer with base detection.\n        \n        \n         n stands for number of characters processed so far.\n        \n       \n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Optionally pass in variables by reference that will contain the parsed values.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   If only\n   two parameters were passed to this function, the values parsed\n   will be returned as an array. Otherwise, if optional parameters are passed,\n   the function will return the number of assigned values. The optional\n   parameters must be passed by reference.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sscanf() Example\n    \n\n&lt;?php\/\/&nbsp;getting&nbsp;the&nbsp;serial&nbsp;numberlist($serial)&nbsp;=&nbsp;sscanf(\"SN\/2350001\",&nbsp;\"SN\/%d\");\/\/&nbsp;and&nbsp;the&nbsp;date&nbsp;of&nbsp;manufacturing$mandate&nbsp;=&nbsp;\"January&nbsp;01&nbsp;2000\";list($month,&nbsp;$day,&nbsp;$year)&nbsp;=&nbsp;sscanf($mandate,&nbsp;\"%s&nbsp;%d&nbsp;%d\");echo&nbsp;\"Item&nbsp;$serial&nbsp;was&nbsp;manufactured&nbsp;on:&nbsp;$year-\"&nbsp;.&nbsp;substr($month,&nbsp;0,&nbsp;3)&nbsp;.&nbsp;\"-$day\\n\";?&gt;\n\n\n    \n\n   \n  \n  \n   If optional parameters are passed, the function will return the\n   number of assigned values.\n  \n  \n   \n    Example #2 sscanf() - using optional parameters\n    \n\n&lt;?php\/\/&nbsp;get&nbsp;author&nbsp;info&nbsp;and&nbsp;generate&nbsp;DocBook&nbsp;entry$auth&nbsp;=&nbsp;\"24\\tLewis&nbsp;Carroll\";$n&nbsp;=&nbsp;sscanf($auth,&nbsp;\"%d\\t%s&nbsp;%s\",&nbsp;$id,&nbsp;$first,&nbsp;$last);echo&nbsp;\"&lt;author&nbsp;id='$id'&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;firstname&gt;$first&lt;\/firstname&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;surname&gt;$last&lt;\/surname&gt;&lt;\/author&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    fscanf() - Parses input from a file according to a format\n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sha1.php","title":"sha1","description":"\n \n  sha1\n  (PHP 4 &gt;= 4.3.0, PHP 5)sha1 &mdash; Calculate the sha1 hash of a string\n\n \n \n \n  Description\n  \n   string sha1\n    ( string $str\n   [, bool $raw_output = false\n  ] )\n\n  \n   Calculates the sha1 hash of str using the\n   &raquo;&nbsp;US Secure Hash Algorithm 1.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     raw_output\n     \n\n      \n       If the optional raw_output is set to TRUE,\n       then the sha1 digest is instead returned in raw binary format with a\n       length of 20, otherwise the returned value is a 40-character\n       hexadecimal number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the sha1 hash as a string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The raw_output parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A sha1() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'apple';if&nbsp;(sha1($str)&nbsp;===&nbsp;'d0be2dc421be4fcd0172e5afceea3970e2f3d940')&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Would&nbsp;you&nbsp;like&nbsp;a&nbsp;green&nbsp;or&nbsp;red&nbsp;apple?\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n Secure password hashing\n \n  It is not recommended to use this function to secure passwords, due to the fast nature of this hashing algorithm. See\n  here for details.\n \n\n\n \n\n\n \n  See Also\n  \n   \n    sha1_file() - Calculate the sha1 hash of a file\n    crc32() - Calculates the crc32 polynomial of a string\n    md5() - Calculate the md5 hash of a string\n    hash() - Generate a hash value (message digest)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-getcsv.php","title":"str_getcsv","description":"\n \n  str_getcsv\n  (PHP 5 &gt;= 5.3.0)str_getcsv &mdash; \n   Parse a CSV string into an array\n  \n\n \n\n \n  Description\n  \n   array str_getcsv\n    ( string $input\n   [, string $delimiter = &#039;,&#039;\n   [, string $enclosure = &#039;&quot;&#039;\n   [, string $escape = &#039;\\\\&#039;\n  ]]] )\n\n  \n   Parses a string input for fields in CSV format\n   and returns an array containing the fields read.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The string to parse.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       Set the field delimiter (one character only).\n      \n     \n\n    \n\n    \n\n     enclosure\n     \n\n      \n       Set the field enclosure character (one character only).\n      \n     \n\n    \n\n    \n\n     escape\n     \n\n      \n       Set the escape character (one character only). Defaults as a backslash\n       (\\)\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed array containing the fields read.\n  \n \n\n\n \n  See Also\n  \n   \n    fgetcsv() - Gets line from file pointer and parse for CSV fields\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-repeat.php","title":"str_repeat","description":"\n \n  str_repeat\n  (PHP 4, PHP 5)str_repeat &mdash; Repeat a string\n\n \n \n \n  Description\n  \n   string str_repeat\n    ( string $input\n   , int $multiplier\n   )\n\n  \n   Returns input repeated\n   multiplier times.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The string to be repeated.\n      \n     \n\n    \n\n    \n\n     multiplier\n     \n\n      \n       Number of time the input string should be\n       repeated.\n      \n      \n       multiplier has to be greater than or equal to 0.\n       If the multiplier is set to 0, the function\n       will return an empty string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the repeated string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 str_repeat() example\n    \n\n&lt;?phpecho&nbsp;str_repeat(\"-=\",&nbsp;10);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n-=-=-=-=-=-=-=-=-=-=\n\n    \n      \n  \n \n\n\n \n  See Also\n  \n   \n    for\n    str_pad() - Pad a string to a certain length with another string\n    substr_count() - Count the number of substring occurrences\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sprintf.php","title":"sprintf","description":"\n \n  sprintf\n  (PHP 4, PHP 5)sprintf &mdash; Return a formatted string\n\n \n \n \n  Description\n  \n   string sprintf\n    ( string $format\n   [, mixed $args\n   [, mixed $...\n  ]] )\n\n  \n   Returns a string produced according to the formatting string\n   format.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       The format string is composed of zero or more directives:\n       ordinary characters (excluding ) that are\n       copied directly to the result, and conversion\n       specifications, each of which results in fetching its\n       own parameter.  This applies to both sprintf()\n       and printf().\n      \n      \n       Each conversion specification consists of a percent sign\n       (), followed by one or more of these\n       elements, in order:\n       \n        \n         \n          An optional sign specifier that forces a sign\n          (- or +) to be used on a number. By default, only the - sign is used\n          on a number if it&#039;s negative. This specifier forces positive numbers\n          to have the + sign attached as well, and was added in PHP 4.3.0.\n         \n        \n        \n         \n          An optional padding specifier that says\n          what character will be used for padding the results to the\n          right string size.  This may be a space character or a\n          0 (zero character).  The default is to pad\n          with spaces.  An alternate padding character can be specified\n          by prefixing it with a single quote (&#039;).\n          See the examples below.\n         \n        \n        \n         \n          An optional alignment specifier that says\n          if the result should be left-justified or right-justified.\n          The default is right-justified; a -\n          character here will make it left-justified.\n         \n        \n        \n         \n          An optional number, a width specifier\n          that says how many characters (minimum) this conversion should\n          result in.\n         \n        \n        \n         \n          An optional precision specifier in the form\n          of a period (`.&#039;) followed by an optional decimal digit string\n          that says how many decimal digits should be displayed for\n          floating-point numbers. When using this specifier on a string,\n          it acts as a cutoff point, setting a maximum character limit to\n          the string.\n         \n        \n        \n         \n          A type specifier that says what type the\n          argument data should be treated as.  Possible types:\n          \n           \n             - a literal percent character. No\n            argument is required.\n           \n           \n            b - the argument is treated as an\n            integer, and presented as a binary number.\n           \n           \n            c - the argument is treated as an\n            integer, and presented as the character with that ASCII\n            value.\n           \n           \n            d - the argument is treated as an\n            integer, and presented as a (signed) decimal number.\n           \n           \n            e - the argument is treated as scientific\n            notation (e.g. 1.2e+2).\n            The precision specifier stands for the number of digits after the\n            decimal point since PHP 5.2.1. In earlier versions, it was taken as\n            number of significant digits (one less).\n           \n           \n            E - like %e but uses\n            uppercase letter (e.g. 1.2E+2).\n           \n           \n            u - the argument is treated as an\n            integer, and presented as an unsigned decimal number.\n           \n           \n            f - the argument is treated as a\n            float, and presented as a floating-point number (locale aware).\n           \n           \n            F - the argument is treated as a\n            float, and presented as a floating-point number (non-locale aware).\n            Available since PHP 4.3.10 and PHP 5.0.3.\n           \n           \n            g - shorter of %e and\n            %f.\n           \n           \n            G - shorter of %E and\n            %f.\n           \n           \n            o - the argument is treated as an\n            integer, and presented as an octal number.\n           \n           \n            s - the argument is treated as and\n            presented as a string.\n           \n           \n            x - the argument is treated as an integer\n            and presented as a hexadecimal number (with lowercase\n            letters).\n           \n           \n            X - the argument is treated as an integer\n            and presented as a hexadecimal number (with uppercase\n            letters).\n           \n          \n         \n        \n       \n      \n      \n       The format string supports argument numbering\/swapping.  Here is an\n       example:\n       \n        Example #1 Argument swapping\n        \n\n&lt;?php$num&nbsp;=&nbsp;5;$location&nbsp;=&nbsp;'tree';$format&nbsp;=&nbsp;'There&nbsp;are&nbsp;%d&nbsp;monkeys&nbsp;in&nbsp;the&nbsp;%s';printf($format,&nbsp;$num,&nbsp;$location);?&gt;\n\n\n        \n\n       \n       This will output &quot;There are 5 monkeys in the tree&quot;.  But\n       imagine we are creating a format string in a separate file,\n       commonly because we would like to internationalize it and we\n       rewrite it as:\n       \n        Example #2 Argument swapping\n        \n\n&lt;?php$format&nbsp;=&nbsp;'The&nbsp;%s&nbsp;contains&nbsp;%d&nbsp;monkeys';printf($format,&nbsp;$num,&nbsp;$location);?&gt;\n\n\n        \n\n       \n       We now have a problem.  The order of the placeholders in the\n       format string does not match the order of the arguments in the\n       code.  We would like to leave the code as is and simply indicate\n       in the format string which arguments the placeholders refer to.\n       We would write the format string like this instead:\n       \n        Example #3 Argument swapping\n        \n\n&lt;?php$format&nbsp;=&nbsp;'The&nbsp;%2$s&nbsp;contains&nbsp;%1$d&nbsp;monkeys';printf($format,&nbsp;$num,&nbsp;$location);?&gt;\n\n\n        \n\n       \n       An added benefit here is that you can repeat the placeholders without\n       adding more arguments in the code.  For example:\n       \n        Example #4 Argument swapping\n        \n\n&lt;?php$format&nbsp;=&nbsp;'The&nbsp;%2$s&nbsp;contains&nbsp;%1$d&nbsp;monkeys.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;That\\'s&nbsp;a&nbsp;nice&nbsp;%2$s&nbsp;full&nbsp;of&nbsp;%1$d&nbsp;monkeys.';printf($format,&nbsp;$num,&nbsp;$location);?&gt;\n\n\n        \n\n       \n       When using argument swapping, the n$\n       position specifier must come immediately\n       after the percent sign (), before any other\n       specifiers, as shown in the example below.\n       \n        Example #5 Position specifier with other specifiers\n        \n\n&lt;?php$format=&nbsp;'The&nbsp;%2$s&nbsp;contains&nbsp;%1$04d&nbsp;monkeys';printf($format,&nbsp;$num,&nbsp;$location);?&gt;\n\n\n        \n\n        The above example will output:\n        \n\nThe tree contains 0005 monkeys\n\n        \n       \n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string produced according to the formatting string\n   format.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.6\n       \n        Support for argument numbering\/swapping was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #6 printf(): various examples\n   \n\n&lt;?php$n&nbsp;=&nbsp;&nbsp;43951789;$u&nbsp;=&nbsp;-43951789;$c&nbsp;=&nbsp;65;&nbsp;\/\/&nbsp;ASCII&nbsp;65&nbsp;is&nbsp;'A'\/\/&nbsp;notice&nbsp;the&nbsp;double&nbsp;%%,&nbsp;this&nbsp;prints&nbsp;a&nbsp;literal&nbsp;'%'&nbsp;characterprintf(\"%%b&nbsp;=&nbsp;'%b'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;binary&nbsp;representationprintf(\"%%c&nbsp;=&nbsp;'%c'\\n\",&nbsp;$c);&nbsp;\/\/&nbsp;print&nbsp;the&nbsp;ascii&nbsp;character,&nbsp;same&nbsp;as&nbsp;chr()&nbsp;functionprintf(\"%%d&nbsp;=&nbsp;'%d'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;standard&nbsp;integer&nbsp;representationprintf(\"%%e&nbsp;=&nbsp;'%e'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;scientific&nbsp;notationprintf(\"%%u&nbsp;=&nbsp;'%u'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;unsigned&nbsp;integer&nbsp;representation&nbsp;of&nbsp;a&nbsp;positive&nbsp;integerprintf(\"%%u&nbsp;=&nbsp;'%u'\\n\",&nbsp;$u);&nbsp;\/\/&nbsp;unsigned&nbsp;integer&nbsp;representation&nbsp;of&nbsp;a&nbsp;negative&nbsp;integerprintf(\"%%f&nbsp;=&nbsp;'%f'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;floating&nbsp;point&nbsp;representationprintf(\"%%o&nbsp;=&nbsp;'%o'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;octal&nbsp;representationprintf(\"%%s&nbsp;=&nbsp;'%s'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;string&nbsp;representationprintf(\"%%x&nbsp;=&nbsp;'%x'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;hexadecimal&nbsp;representation&nbsp;(lower-case)printf(\"%%X&nbsp;=&nbsp;'%X'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;hexadecimal&nbsp;representation&nbsp;(upper-case)printf(\"%%+d&nbsp;=&nbsp;'%+d'\\n\",&nbsp;$n);&nbsp;\/\/&nbsp;sign&nbsp;specifier&nbsp;on&nbsp;a&nbsp;positive&nbsp;integerprintf(\"%%+d&nbsp;=&nbsp;'%+d'\\n\",&nbsp;$u);&nbsp;\/\/&nbsp;sign&nbsp;specifier&nbsp;on&nbsp;a&nbsp;negative&nbsp;integer?&gt;\n\n\n   \n\n   The above example will output:\n   \n\n%b = &#039;10100111101010011010101101&#039;\n%c = &#039;A&#039;\n%d = &#039;43951789&#039;\n%e = &#039;4.39518e+7&#039;\n%u = &#039;43951789&#039;\n%u = &#039;4251015507&#039;\n%f = &#039;43951789.000000&#039;\n%o = &#039;247523255&#039;\n%s = &#039;43951789&#039;\n%x = &#039;29ea6ad&#039;\n%X = &#039;29EA6AD&#039;\n%+d = &#039;+43951789&#039;\n%+d = &#039;-43951789&#039;\n\n   \n  \n  \n   Example #7 printf(): string specifiers\n   \n\n&lt;?php$s&nbsp;=&nbsp;'monkey';$t&nbsp;=&nbsp;'many&nbsp;monkeys';printf(\"[%s]\\n\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$s);&nbsp;\/\/&nbsp;standard&nbsp;string&nbsp;outputprintf(\"[%10s]\\n\",&nbsp;&nbsp;&nbsp;&nbsp;$s);&nbsp;\/\/&nbsp;right-justification&nbsp;with&nbsp;spacesprintf(\"[%-10s]\\n\",&nbsp;&nbsp;&nbsp;$s);&nbsp;\/\/&nbsp;left-justification&nbsp;with&nbsp;spacesprintf(\"[%010s]\\n\",&nbsp;&nbsp;&nbsp;$s);&nbsp;\/\/&nbsp;zero-padding&nbsp;works&nbsp;on&nbsp;strings&nbsp;tooprintf(\"[%'#10s]\\n\",&nbsp;&nbsp;$s);&nbsp;\/\/&nbsp;use&nbsp;the&nbsp;custom&nbsp;padding&nbsp;character&nbsp;'#'printf(\"[%10.10s]\\n\",&nbsp;$t);&nbsp;\/\/&nbsp;left-justification&nbsp;but&nbsp;with&nbsp;a&nbsp;cutoff&nbsp;of&nbsp;10&nbsp;characters?&gt;\n\n\n   \n\n   The above example will output:\n   \n\n[monkey]\n[    monkey]\n[monkey    ]\n[0000monkey]\n[####monkey]\n[many monke]\n\n   \n  \n  \n   Example #8 sprintf(): zero-padded integers\n   \n\n&lt;?php$isodate&nbsp;=&nbsp;sprintf(\"%04d-%02d-%02d\",&nbsp;$year,&nbsp;$month,&nbsp;$day);?&gt;\n\n\n   \n\n  \n  \n   Example #9 sprintf(): formatting currency\n   \n\n&lt;?php$money1&nbsp;=&nbsp;68.75;$money2&nbsp;=&nbsp;54.35;$money&nbsp;=&nbsp;$money1&nbsp;+&nbsp;$money2;\/\/&nbsp;echo&nbsp;$money&nbsp;will&nbsp;output&nbsp;\"123.1\";$formatted&nbsp;=&nbsp;sprintf(\"%01.2f\",&nbsp;$money);\/\/&nbsp;echo&nbsp;$formatted&nbsp;will&nbsp;output&nbsp;\"123.10\"?&gt;\n\n\n   \n\n  \n  \n   Example #10 sprintf(): scientific notation\n   \n\n&lt;?php$number&nbsp;=&nbsp;362525200;echo&nbsp;sprintf(\"%.3e\",&nbsp;$number);&nbsp;\/\/&nbsp;outputs&nbsp;3.625e+8?&gt;\n\n\n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    printf() - Output a formatted string\n    sscanf() - Parses input from a string according to a format\n    fscanf() - Parses input from a file according to a format\n    vsprintf() - Return a formatted string\n    number_format() - Format a number with grouped thousands\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-ireplace.php","title":"str_ireplace","description":"\n \n  str_ireplace\n  (PHP 5)str_ireplace &mdash; Case-insensitive version of str_replace().\n\n \n \n \n  Description\n  \n   mixed str_ireplace\n    ( mixed $search\n   , mixed $replace\n   , mixed $subject\n   [, int &$count\n  ] )\n\n  \n   This function returns a string or an array with all occurrences of\n   search in subject\n   (ignoring case) replaced with the given replace\n   value.  If you don&#039;t need fancy replacing rules, you should generally\n   use this function instead of\n   preg_replace() with the i modifier.\n  \n \n\n\n \n  Parameters\n  \n   If search and replace are\n   arrays, then str_ireplace() takes a value from each\n   array and uses them to search and replace on\n   subject. If replace has fewer\n   values than search, then an empty string is used for\n   the rest of replacement values. If search is an\n   array and replace is a string, then this replacement\n   string is used for every value of search. The\n   converse would not make sense, though.\n  \n  \n   If search or replace\n   are arrays, their elements are processed first to last.\n  \n  \n   \n\n    \n\n     search\n     \n\n      \n       The value being searched for, otherwise known as the\n       needle.  An array may be used to designate\n       multiple needles.\n      \n     \n\n    \n\n    \n\n     replace\n     \n\n      \n       The replacement value that replaces found search\n       values. An array may be used to designate multiple replacements.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The string or array being searched and replaced on,\n       otherwise known as the haystack.\n      \n      \n       If subject is an array, then the search and\n       replace is performed with every entry of \n       subject, and the return value is an array as\n       well.\n      \n     \n\n    \n\n    \n\n     count\n     \n\n      \n       If passed, this will be set to the number of replacements performed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string or an array of replacements.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The count parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 str_ireplace() example\n    \n\n&lt;?php$bodytag&nbsp;=&nbsp;str_ireplace(\"%body%\",&nbsp;\"black\",&nbsp;\"&lt;body&nbsp;text=%BODY%&gt;\");?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n  Caution\n   Replacement order gotcha\n   \n    Because str_ireplace() replaces left to right, it might\n    replace a previously inserted value when doing multiple replacements.\n    Example #2 in the str_replace() documentation\n    demonstrates how this may affect you in practice.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    str_replace() - Replace all occurrences of the search string with the replacement string\n    preg_replace() - Perform a regular expression search and replace\n    strtr() - Translate characters or replace substrings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-pad.php","title":"str_pad","description":"\n \n  str_pad\n  (PHP 4 &gt;= 4.0.1, PHP 5)str_pad &mdash; Pad a string to a certain length with another string\n\n \n \n \n  Description\n  \n   string str_pad\n    ( string $input\n   , int $pad_length\n   [, string $pad_string = &quot; &quot;\n   [, int $pad_type = STR_PAD_RIGHT\n  ]] )\n\n  \n   This functions returns the input string\n   padded on the left, the right, or both sides to the specified\n   padding length. If the optional argument\n   pad_string is not supplied, the\n   input is padded with spaces, otherwise it\n   is padded with characters from pad_string\n   up to the limit.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     pad_length\n     \n\n      \n       If the value of pad_length is negative,\n       less than, or equal to the length of the input string, no padding\n       takes place.\n      \n     \n\n    \n\n    \n\n     pad_string\n     \n\n      Note: \n       \n        The pad_string may be truncated if the\n        required number of padding characters can&#039;t be evenly divided by the\n        pad_string&#039;s length.\n       \n      \n     \n\n    \n\n    \n\n     pad_type\n     \n\n      \n       Optional argument pad_type can be\n       STR_PAD_RIGHT, STR_PAD_LEFT,\n       or STR_PAD_BOTH. If\n       pad_type is not specified it is assumed to be\n       STR_PAD_RIGHT.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the padded string.\n  \n \n\n\n\n \n  Examples\n  \n   \n    Example #1 str_pad() example\n    \n\n&lt;?php$input&nbsp;=&nbsp;\"Alien\";echo&nbsp;str_pad($input,&nbsp;10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;produces&nbsp;\"Alien&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"echo&nbsp;str_pad($input,&nbsp;10,&nbsp;\"-=\",&nbsp;STR_PAD_LEFT);&nbsp;&nbsp;\/\/&nbsp;produces&nbsp;\"-=-=-Alien\"echo&nbsp;str_pad($input,&nbsp;10,&nbsp;\"_\",&nbsp;STR_PAD_BOTH);&nbsp;&nbsp;&nbsp;\/\/&nbsp;produces&nbsp;\"__Alien___\"echo&nbsp;str_pad($input,&nbsp;6&nbsp;,&nbsp;\"___\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;produces&nbsp;\"Alien_\"?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-rot13.php","title":"str_rot13","description":"\n \n  str_rot13\n  (PHP 4 &gt;= 4.2.0, PHP 5)str_rot13 &mdash; Perform the rot13 transform on a string\n\n \n \n \n  Description\n  \n   string str_rot13\n    ( string $str\n   )\n\n  \n   Performs the ROT13 encoding on the str argument and\n   returns the resulting string.\n  \n  \n   The ROT13 encoding simply shifts every letter by 13 places in the alphabet\n   while leaving non-alpha characters untouched. Encoding and decoding are\n   done by the same function, passing an encoded string as argument will\n   return the original version.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the ROT13 version of the given string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 str_rot13() example\n    \n\n&lt;?phpecho&nbsp;str_rot13('PHP&nbsp;4.3.0');&nbsp;\/\/&nbsp;CUC&nbsp;4.3.0?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The behaviour of this function was fixed. Before this fix, the\n        str was also modified, as if it was passed\n        by reference.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-shuffle.php","title":"str_shuffle","description":"\n \n  str_shuffle\n  (PHP 4 &gt;= 4.3.0, PHP 5)str_shuffle &mdash; Randomly shuffles a string\n\n \n \n \n  Description\n  \n   string str_shuffle\n    ( string $str\n   )\n\n  \n   str_shuffle() shuffles a string.  One permutation\n   of all possible is created.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the shuffled string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 str_shuffle() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'abcdef';$shuffled&nbsp;=&nbsp;str_shuffle($str);\/\/&nbsp;This&nbsp;will&nbsp;echo&nbsp;something&nbsp;like:&nbsp;bfdaececho&nbsp;$shuffled;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    shuffle() - Shuffle an array\n    rand() - Generate a random integer\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcasecmp.php","title":"strcasecmp","description":"\n \n  strcasecmp\n  (PHP 4, PHP 5)strcasecmp &mdash; Binary safe case-insensitive string comparison\n\n \n \n \n  Description\n  \n   int strcasecmp\n    ( string $str1\n   , string $str2\n   )\n\n  \n   Binary safe case-insensitive string comparison.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strcasecmp() example\n    \n\n&lt;?php$var1&nbsp;=&nbsp;\"Hello\";$var2&nbsp;=&nbsp;\"hello\";if&nbsp;(strcasecmp($var1,&nbsp;$var2)&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'$var1&nbsp;is&nbsp;equal&nbsp;to&nbsp;$var2&nbsp;in&nbsp;a&nbsp;case-insensitive&nbsp;string&nbsp;comparison';}?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    strcmp() - Binary safe string comparison\n    preg_match() - Perform a regular expression match\n    substr_compare() - Binary safe comparison of two strings from an offset, up to length characters\n    strncasecmp() - Binary safe case-insensitive string comparison of the first n characters\n    stristr() - Case-insensitive strstr\n    substr() - Return part of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strchr.php","title":"strchr","description":"\n \n  strchr \n  (PHP 4, PHP 5)strchr &mdash; Alias of strstr()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   strstr().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-replace.php","title":"str_replace","description":"\n \n  str_replace\n  (PHP 4, PHP 5)str_replace &mdash; Replace all occurrences of the search string with the replacement string\n\n \n \n \n  Description\n  \n   mixed str_replace\n    ( mixed $search\n   , mixed $replace\n   , mixed $subject\n   [, int &$count\n  ] )\n\n  \n   This function returns a string or an array with all occurrences of\n   search in subject\n   replaced with the given replace value.\n  \n  \n   If you don&#039;t need fancy replacing rules (like regular expressions), you\n   should always use this function instead of preg_replace().\n  \n \n\n\n \n  Parameters\n  \n   If search and replace are\n   arrays, then str_replace() takes a value from each array\n   and uses them to search and replace on subject. If\n   replace has fewer values than\n   search, then an empty string is used for the rest of\n   replacement values. If search is an array and\n   replace is a string, then this replacement string is\n   used for every value of search. The converse would\n   not make sense, though.\n  \n  \n   If search or replace\n   are arrays, their elements are processed first to last.\n  \n  \n   \n\n    \n\n     search\n     \n\n      \n       The value being searched for, otherwise known as the needle.\n       An array may be used to designate multiple needles.\n      \n     \n\n    \n\n    \n\n     replace\n     \n\n      \n       The replacement value that replaces found search\n       values. An array may be used to designate multiple replacements.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The string or array being searched and replaced on,\n       otherwise known as the haystack.\n      \n      \n       If subject is an array, then the search and\n       replace is performed with every entry of\n       subject, and the return value is an array as\n       well.\n      \n     \n\n    \n\n    \n\n     count\n     \n\n      \n       If passed, this will be set to the number of replacements performed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns a string or an array with the replaced values.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The count parameter was added.\n       \n      \n\n      \n       4.3.3\n       \n        The behaviour of this function changed. In older versions a bug\n        existed when using arrays as both search and\n        replace parameters which caused empty\n        search indexes to be skipped without advancing\n        the internal pointer on the replace array.\n        This has been corrected in PHP 4.3.3, any scripts which relied on\n        this bug should remove empty search values prior to calling this\n        function in order to mimic the original behavior.\n       \n      \n\n      \n       4.0.5\n       \n        Most parameters can now be an array.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Basic str_replace() examples\n    \n\n&lt;?php\/\/&nbsp;Provides:&nbsp;&lt;body&nbsp;text='black'&gt;$bodytag&nbsp;=&nbsp;str_replace(\"%body%\",&nbsp;\"black\",&nbsp;\"&lt;body&nbsp;text='%body%'&gt;\");\/\/&nbsp;Provides:&nbsp;Hll&nbsp;Wrld&nbsp;f&nbsp;PHP$vowels&nbsp;=&nbsp;array(\"a\",&nbsp;\"e\",&nbsp;\"i\",&nbsp;\"o\",&nbsp;\"u\",&nbsp;\"A\",&nbsp;\"E\",&nbsp;\"I\",&nbsp;\"O\",&nbsp;\"U\");$onlyconsonants&nbsp;=&nbsp;str_replace($vowels,&nbsp;\"\",&nbsp;\"Hello&nbsp;World&nbsp;of&nbsp;PHP\");\/\/&nbsp;Provides:&nbsp;You&nbsp;should&nbsp;eat&nbsp;pizza,&nbsp;beer,&nbsp;and&nbsp;ice&nbsp;cream&nbsp;every&nbsp;day$phrase&nbsp;&nbsp;=&nbsp;\"You&nbsp;should&nbsp;eat&nbsp;fruits,&nbsp;vegetables,&nbsp;and&nbsp;fiber&nbsp;every&nbsp;day.\";$healthy&nbsp;=&nbsp;array(\"fruits\",&nbsp;\"vegetables\",&nbsp;\"fiber\");$yummy&nbsp;&nbsp;&nbsp;=&nbsp;array(\"pizza\",&nbsp;\"beer\",&nbsp;\"ice&nbsp;cream\");$newphrase&nbsp;=&nbsp;str_replace($healthy,&nbsp;$yummy,&nbsp;$phrase);\/\/&nbsp;Provides:&nbsp;2$str&nbsp;=&nbsp;str_replace(\"ll\",&nbsp;\"\",&nbsp;\"good&nbsp;golly&nbsp;miss&nbsp;molly!\",&nbsp;$count);echo&nbsp;$count;?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Examples of potential str_replace() gotchas\n    \n\n&lt;?php\/\/&nbsp;Order&nbsp;of&nbsp;replacement$str&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;\"Line&nbsp;1\\nLine&nbsp;2\\rLine&nbsp;3\\r\\nLine&nbsp;4\\n\";$order&nbsp;&nbsp;&nbsp;=&nbsp;array(\"\\r\\n\",&nbsp;\"\\n\",&nbsp;\"\\r\");$replace&nbsp;=&nbsp;'&lt;br&nbsp;\/&gt;';\/\/&nbsp;Processes&nbsp;\\r\\n's&nbsp;first&nbsp;so&nbsp;they&nbsp;aren't&nbsp;converted&nbsp;twice.$newstr&nbsp;=&nbsp;str_replace($order,&nbsp;$replace,&nbsp;$str);\/\/&nbsp;Outputs&nbsp;F&nbsp;because&nbsp;A&nbsp;is&nbsp;replaced&nbsp;with&nbsp;B,&nbsp;then&nbsp;B&nbsp;is&nbsp;replaced&nbsp;with&nbsp;C,&nbsp;and&nbsp;so&nbsp;on...\/\/&nbsp;Finally&nbsp;E&nbsp;is&nbsp;replaced&nbsp;with&nbsp;F,&nbsp;because&nbsp;of&nbsp;left&nbsp;to&nbsp;right&nbsp;replacements.$search&nbsp;&nbsp;=&nbsp;array('A',&nbsp;'B',&nbsp;'C',&nbsp;'D',&nbsp;'E');$replace&nbsp;=&nbsp;array('B',&nbsp;'C',&nbsp;'D',&nbsp;'E',&nbsp;'F');$subject&nbsp;=&nbsp;'A';echo&nbsp;str_replace($search,&nbsp;$replace,&nbsp;$subject);\/\/&nbsp;Outputs:&nbsp;apearpearle&nbsp;pear\/\/&nbsp;For&nbsp;the&nbsp;same&nbsp;reason&nbsp;mentioned&nbsp;above$letters&nbsp;=&nbsp;array('a',&nbsp;'p');$fruit&nbsp;&nbsp;&nbsp;=&nbsp;array('apple',&nbsp;'pear');$text&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'a&nbsp;p';$output&nbsp;&nbsp;=&nbsp;str_replace($letters,&nbsp;$fruit,&nbsp;$text);echo&nbsp;$output;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n  Caution\n   Replacement order gotcha\n   \n    Because str_replace() replaces left to right, it might\n    replace a previously inserted value when doing multiple replacements.\n    See also the examples in this document.\n   \n  \n  Note: \n   \n    This function is case-sensitive. Use str_ireplace()\n    for case-insensitive replace.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    str_ireplace() - Case-insensitive version of str_replace.\n    substr_replace() - Replace text within a portion of a string\n    preg_replace() - Perform a regular expression search and replace\n    strtr() - Translate characters or replace substrings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-word-count.php","title":"str_word_count","description":"\n \n  str_word_count\n  (PHP 4 &gt;= 4.3.0, PHP 5)str_word_count &mdash; \n   Return information about words used in a string\n  \n\n \n \n  Description\n  \n   mixed str_word_count\n    ( string $string\n   [, int $format = 0\n   [, string $charlist\n  ]] )\n\n  \n   Counts the number of words inside string. \n   If the optional format is not specified, then \n   the return value will be an integer representing the number of words \n   found. In the event the format is specified, the return\n   value will be an array, content of which is dependent on the \n   format. The possible value for the \n   format and the resultant outputs are listed below.\n  \n  \n   For the purpose of this function, &#039;word&#039; is defined as a locale dependent\n   string containing alphabetic characters, which also may contain, but not start\n   with &quot;&#039;&quot; and &quot;-&quot; characters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The string\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       Specify the return value of this function. The current supported values\n       are:\n       \n        \n         \n          0 - returns the number of words found\n         \n        \n        \n         \n          1 - returns an array containing all the words found inside the\n          string\n         \n        \n        \n         \n          2 - returns an associative array, where the key is the numeric\n          position of the word inside the string and\n          the value is the actual word itself\n         \n         \n       \n      \n     \n\n    \n\n    \n\n     charlist\n     \n\n      \n       A list of additional characters which will be considered as &#039;word&#039;\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array or an integer, depending on the\n   format chosen.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the charlist parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A str_word_count() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Hello&nbsp;fri3nd,&nbsp;you're&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;looking&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;good&nbsp;today!\";print_r(str_word_count($str,&nbsp;1));print_r(str_word_count($str,&nbsp;2));print_r(str_word_count($str,&nbsp;1,&nbsp;'\u00e0\u00e1\u00e3\u00e73'));echo&nbsp;str_word_count($str);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Hello\n    [1] =&gt; fri\n    [2] =&gt; nd\n    [3] =&gt; you&#039;re\n    [4] =&gt; looking\n    [5] =&gt; good\n    [6] =&gt; today\n)\n\nArray\n(\n    [0] =&gt; Hello\n    [6] =&gt; fri\n    [10] =&gt; nd\n    [14] =&gt; you&#039;re\n    [29] =&gt; looking\n    [46] =&gt; good\n    [51] =&gt; today\n)\n\nArray\n(\n    [0] =&gt; Hello\n    [1] =&gt; fri3nd\n    [2] =&gt; you&#039;re\n    [3] =&gt; looking\n    [4] =&gt; good\n    [5] =&gt; today\n)\n\n7\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    explode() - Split a string by string\n    preg_split() - Split string by a regular expression\n    split() - Split string into array by regular expression\n    count_chars() - Return information about characters used in a string\n    substr_count() - Count the number of substring occurrences\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcoll.php","title":"strcoll","description":"\n \n  strcoll\n  (PHP 4 &gt;= 4.0.5, PHP 5)strcoll &mdash; Locale based string comparison\n\n \n \n \n  Description\n  \n   int strcoll\n    ( string $str1\n   , string $str2\n   )\n\n  \n   Note that this comparison is case sensitive, and unlike\n   strcmp() this function is not binary safe.\n  \n  \n   strcoll() uses the current locale for doing the\n   comparisons.  If the current locale is C or POSIX, this function is\n   equivalent to strcmp().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if\n   str1 is greater than\n   str2, and 0 if they are equal.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.3\n       \n        This function now works on win32.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    preg_match() - Perform a regular expression match\n    strcmp() - Binary safe string comparison\n    strcasecmp() - Binary safe case-insensitive string comparison\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strncasecmp() - Binary safe case-insensitive string comparison of the first n characters\n    strncmp() - Binary safe string comparison of the first n characters\n    strstr() - Find first occurrence of a string\n    setlocale() - Set locale information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcspn.php","title":"strcspn","description":"\n \n  strcspn\n  (PHP 4, PHP 5)strcspn &mdash; Find length of initial segment not matching mask\n\n \n \n \n  Description\n  \n   int strcspn\n    ( string $str1\n   , string $str2\n   [, int $start\n   [, int $length\n  ]] )\n\n  \n   Returns the length of the initial segment of\n   str1 which does not\n   contain any of the characters in str2.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n    \n\n     start\n     \n\n      \n       The start position of the string to examine.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length of the string to examine.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the segment as an integer.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The start and length\n        were added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 strcspn() example\n   \n\n&lt;?php$a&nbsp;=&nbsp;strcspn('abcd',&nbsp;&nbsp;'apple');$b&nbsp;=&nbsp;strcspn('abcd',&nbsp;&nbsp;'banana');$c&nbsp;=&nbsp;strcspn('hello',&nbsp;'l');$d&nbsp;=&nbsp;strcspn('hello',&nbsp;'world');var_dump($a);var_dump($b);var_dump($c);var_dump($d);?&gt;\n\n\n   \n\n   The above example will output:\n   \n\nint(0)\nint(0)\nint(2)\nint(2)\n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strspn() - Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.str-split.php","title":"str_split","description":"\n \n  str_split\n  (PHP 5)str_split &mdash; Convert a string to an array\n\n \n \n \n  Description\n  \n   array str_split\n    ( string $string\n   [, int $split_length = 1\n  ] )\n\n  \n   Converts a string to an array. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     split_length\n     \n\n      \n       Maximum length of the chunk.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If the optional split_length parameter is\n   specified, the returned array will be broken down into chunks with each\n   being split_length in length, otherwise each chunk\n   will be one character in length.\n  \n  \n   FALSE is returned if split_length is less than 1.\n   If the split_length length exceeds the length of\n   string, the entire string is returned as the first\n   (and only) array element.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Example uses of str_split()\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Hello&nbsp;Friend\";$arr1&nbsp;=&nbsp;str_split($str);$arr2&nbsp;=&nbsp;str_split($str,&nbsp;3);print_r($arr1);print_r($arr2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; H\n    [1] =&gt; e\n    [2] =&gt; l\n    [3] =&gt; l\n    [4] =&gt; o\n    [5] =&gt;\n    [6] =&gt; F\n    [7] =&gt; r\n    [8] =&gt; i\n    [9] =&gt; e\n    [10] =&gt; n\n    [11] =&gt; d\n)\n\nArray\n(\n    [0] =&gt; Hel\n    [1] =&gt; lo\n    [2] =&gt; Fri\n    [3] =&gt; end\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    chunk_split() - Split a string into smaller chunks\n    preg_split() - Split string by a regular expression\n    explode() - Split a string by string\n    count_chars() - Return information about characters used in a string\n    str_word_count() - Return information about words used in a string\n    for\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strcmp.php","title":"strcmp","description":"\n \n  strcmp\n  (PHP 4, PHP 5)strcmp &mdash; Binary safe string comparison\n\n \n \n \n  Description\n  \n   int strcmp\n    ( string $str1\n   , string $str2\n   )\n\n  \n   Note that this comparison is case sensitive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.\n  \n \n\n\n \n  See Also\n  \n   \n    strcasecmp() - Binary safe case-insensitive string comparison\n    preg_match() - Perform a regular expression match\n    substr_compare() - Binary safe comparison of two strings from an offset, up to length characters\n    strncmp() - Binary safe string comparison of the first n characters\n    strstr() - Find first occurrence of a string\n    substr() - Return part of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripcslashes.php","title":"stripcslashes","description":"\n \n  stripcslashes\n  (PHP 4, PHP 5)stripcslashes &mdash; Un-quote string quoted with addcslashes()\n\n \n \n \n  Description\n  \n   string stripcslashes\n    ( string $str\n   )\n\n  \n   Returns a string with backslashes stripped off. Recognizes\n   C-like \\n, \\r ..., octal\n   and hexadecimal representation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be unescaped.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the unescaped string.\n  \n \n\n\n \n  See Also\n  \n   \n    addcslashes() - Quote string with slashes in a C style\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripos.php","title":"stripos","description":"\n \n  stripos\n  (PHP 5)stripos &mdash; Find position of first occurrence of a case-insensitive string\n\n \n \n \n  Description\n  \n   int stripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )\n\n  \n   Returns the numeric position of the first occurrence of\n   needle in the haystack\n   string.\n  \n  \n   Unlike strpos(), stripos() is\n   case-insensitive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       Note that the needle may be a string of one or\n       more characters.\n      \n      \n       If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The optional offset parameter allows you\n       to specify which character in haystack to\n       start searching. The position returned is still relative to the\n       beginning of haystack.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the position as an integer. If needle is not found,\n   stripos() will return boolean FALSE.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n   Example #1 stripos() examples\n    \n\n&lt;?php$findme&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'a';$mystring1&nbsp;=&nbsp;'xyz';$mystring2&nbsp;=&nbsp;'ABC';$pos1&nbsp;=&nbsp;stripos($mystring1,&nbsp;$findme);$pos2&nbsp;=&nbsp;stripos($mystring2,&nbsp;$findme);\/\/&nbsp;Nope,&nbsp;'a'&nbsp;is&nbsp;certainly&nbsp;not&nbsp;in&nbsp;'xyz'if&nbsp;($pos1&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;'$findme'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'$mystring1'\";}\/\/&nbsp;Note&nbsp;our&nbsp;use&nbsp;of&nbsp;===.&nbsp;&nbsp;Simply&nbsp;==&nbsp;would&nbsp;not&nbsp;work&nbsp;as&nbsp;expected\/\/&nbsp;because&nbsp;the&nbsp;position&nbsp;of&nbsp;'a'&nbsp;is&nbsp;the&nbsp;0th&nbsp;(first)&nbsp;character.if&nbsp;($pos2&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"We&nbsp;found&nbsp;'$findme'&nbsp;in&nbsp;'$mystring2'&nbsp;at&nbsp;position&nbsp;$pos2\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strpos() - Find position of first occurrence of a string\n    strrpos() - Find the position of the last occurrence of a substring in a string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strstr() - Find first occurrence of a string\n    strripos() - Find position of last occurrence of a case-insensitive string in a string\n    str_ireplace() - Case-insensitive version of str_replace.\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stripslashes.php","title":"stripslashes","description":"\n \n  stripslashes\n  (PHP 4, PHP 5)stripslashes &mdash; Un-quotes a quoted string\n\n \n \n \n  Description\n  \n   string stripslashes\n    ( string $str\n   )\n\n  \n   Un-quotes a quoted string.\n  \n  Note: \n   \n    If magic_quotes_sybase is\n    on, no backslashes are stripped off but two apostrophes are replaced by\n    one instead.\n   \n  \n  \n   An example use of stripslashes() is when the PHP\n   directive magic_quotes_gpc\n   is on (it&#039;s on by default), and you aren&#039;t inserting\n   this data into a place (such as a database) that requires escaping.\n   For example, if you&#039;re simply outputting data straight from an HTML form.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string with backslashes stripped off.\n   (\\&#039; becomes &#039; and so on.)\n   Double backslashes (\\\\) are made into a single\n   backslash (\\).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A stripslashes() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Is&nbsp;your&nbsp;name&nbsp;O\\'reilly?\";\/\/&nbsp;Outputs:&nbsp;Is&nbsp;your&nbsp;name&nbsp;O'reilly?echo&nbsp;stripslashes($str);?&gt;\n\n\n    \n\n   \n  \n  Note: \n   \n    stripslashes() is not recursive. If you want to apply\n    this function to a multi-dimensional array, you need to use a recursive\n    function.\n   \n  \n  \n   \n    Example #2 Using stripslashes() on an array\n    \n\n&lt;?phpfunction&nbsp;stripslashes_deep($value){&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;=&nbsp;is_array($value)&nbsp;?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array_map('stripslashes_deep',&nbsp;$value)&nbsp;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stripslashes($value);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$value;}\/\/&nbsp;Example$array&nbsp;=&nbsp;array(\"f\\\\'oo\",&nbsp;\"b\\\\'ar\",&nbsp;array(\"fo\\\\'o\",&nbsp;\"b\\\\'ar\"));$array&nbsp;=&nbsp;stripslashes_deep($array);\/\/&nbsp;Outputprint_r($array);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; f&#039;oo\n    [1] =&gt; b&#039;ar\n    [2] =&gt; Array\n        (\n            [0] =&gt; fo&#039;o\n            [1] =&gt; b&#039;ar\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    addslashes() - Quote string with slashes\n    get_magic_quotes_gpc() - Gets the current configuration setting of magic_quotes_gpc\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.stristr.php","title":"stristr","description":"\n \n  stristr\n  (PHP 4, PHP 5)stristr &mdash; Case-insensitive strstr()\n\n \n \n \n  Description\n  \n   string stristr\n    ( string $haystack\n   , mixed $needle\n   [, bool $before_needle = false\n  ] )\n\n  \n   Returns all of haystack from the first\n   occurrence of needle to the end.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     before_needle\n     \n\n      \n       If TRUE, stristr()\n       returns the part of the haystack before the\n       first occurrence of the needle.\n      \n     \n\n    \n\n   \n\n  \n  \n   needle and haystack\n   are examined in a case-insensitive manner.\n  \n \n\n\n \n  Return Values\n  \n   Returns the matched substring. If needle is not\n   found, returns FALSE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Added the optional parameter before_needle.\n       \n      \n\n      \n       4.3.0\n       \n        stristr() was made binary safe.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 stristr() example\n    \n\n&lt;?php&nbsp;&nbsp;$email&nbsp;=&nbsp;'USER@EXAMPLE.com';&nbsp;&nbsp;echo&nbsp;stristr($email,&nbsp;'e');&nbsp;\/\/&nbsp;outputs&nbsp;ER@EXAMPLE.com&nbsp;&nbsp;echo&nbsp;stristr($email,&nbsp;'e',&nbsp;true);&nbsp;\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0,&nbsp;outputs&nbsp;US?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Testing if a string is found or not\n    \n\n&lt;?php&nbsp;&nbsp;$string&nbsp;=&nbsp;'Hello&nbsp;World!';&nbsp;&nbsp;if(stristr($string,&nbsp;'earth')&nbsp;===&nbsp;FALSE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'\"earth\"&nbsp;not&nbsp;found&nbsp;in&nbsp;string';&nbsp;&nbsp;}\/\/&nbsp;outputs:&nbsp;\"earth\"&nbsp;not&nbsp;found&nbsp;in&nbsp;string?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Using a non &quot;string&quot; needle\n    \n\n&lt;?php&nbsp;&nbsp;$string&nbsp;=&nbsp;'APPLE';&nbsp;&nbsp;echo&nbsp;stristr($string,&nbsp;97);&nbsp;\/\/&nbsp;97&nbsp;=&nbsp;lowercase&nbsp;a\/\/&nbsp;outputs:&nbsp;APPLE?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strstr() - Find first occurrence of a string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n    preg_match() - Perform a regular expression match\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strip-tags.php","title":"strip_tags","description":"\n \n  strip_tags\n  (PHP 4, PHP 5)strip_tags &mdash; Strip HTML and PHP tags from a string\n\n \n \n \n  Description\n  \n   string strip_tags\n    ( string $str\n   [, string $allowable_tags\n  ] )\n\n  \n   This function tries to return a string with all NUL bytes, HTML and PHP tags stripped\n   from a given str.  It uses the same tag stripping\n   state machine as the fgetss() function.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     allowable_tags\n     \n\n      \n       You can use the optional second parameter to specify tags which should\n       not be stripped.\n      \n      Note: \n       \n        HTML comments and PHP tags are also stripped. This is hardcoded and\n        can not be changed with allowable_tags.\n       \n      \n      Note: \n       \n        This parameter should not contain whitespace.\n        strip_tags() sees a tag as a case-insensitive\n        string between &lt; and the first whitespace or\n        &gt;. It means that\n        strip_tags(&quot;&lt;br\/&gt;&quot;, &quot;&lt;br&gt;&quot;) returns an\n        empty string.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the stripped string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        strip_tags() is now binary safe\n       \n      \n\n      \n       4.3.0\n       \n        HTML comments are now always stripped\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strip_tags() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;'&lt;p&gt;Test&nbsp;paragraph.&lt;\/p&gt;&lt;!--&nbsp;Comment&nbsp;--&gt;&nbsp;&lt;a&nbsp;href=\"#fragment\"&gt;Other&nbsp;text&lt;\/a&gt;';echo&nbsp;strip_tags($text);echo&nbsp;\"\\n\";\/\/&nbsp;Allow&nbsp;&lt;p&gt;&nbsp;and&nbsp;&lt;a&gt;echo&nbsp;strip_tags($text,&nbsp;'&lt;p&gt;&lt;a&gt;');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nTest paragraph. Other text\n&lt;p&gt;Test paragraph.&lt;\/p&gt; &lt;a href=&quot;#fragment&quot;&gt;Other text&lt;\/a&gt;\n\n    \n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    Because strip_tags() does not actually validate the\n    HTML, partial or broken tags can result in the removal of more\n    text\/data than expected.\n   \n  \n  Warning\n   \n    This function does not modify any attributes on the tags that you allow\n    using allowable_tags, including the\n    style and onmouseover attributes\n    that a mischievous user may abuse when posting text that will be shown\n    to other users.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    htmlspecialchars() - Convert special characters to HTML entities\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strncasecmp.php","title":"strncasecmp","description":"\n \n  strncasecmp\n  (PHP 4 &gt;= 4.0.2, PHP 5)strncasecmp &mdash; Binary safe case-insensitive string comparison of the first n characters\n\n \n \n \n  Description\n  \n   int strncasecmp\n    ( string $str1\n   , string $str2\n   , int $len\n   )\n\n  \n   This function is similar to strcasecmp(), with the\n   difference that you can specify the (upper limit of the) number of\n   characters from each string to be used in the comparison.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       The length of strings to be used in the comparison.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1 is\n   greater than str2, and 0 if they are equal.\n  \n \n\n\n \n  See Also\n  \n   \n    strncmp() - Binary safe string comparison of the first n characters\n    preg_match() - Perform a regular expression match\n    substr_compare() - Binary safe comparison of two strings from an offset, up to length characters\n    strcasecmp() - Binary safe case-insensitive string comparison\n    stristr() - Case-insensitive strstr\n    substr() - Return part of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strnatcasecmp.php","title":"strnatcasecmp","description":"\n \n  strnatcasecmp\n  (PHP 4, PHP 5)strnatcasecmp &mdash; Case insensitive string comparisons using a &quot;natural order&quot; algorithm\n\n \n \n \n  Description\n  \n   int strnatcasecmp\n    ( string $str1\n   , string $str2\n   )\n\n  \n   This function implements a comparison algorithm that orders alphanumeric\n   strings in the way a human being would.  The behaviour of this function is\n   similar to strnatcmp(), except that the comparison is\n   not case sensitive.  For more information see: Martin Pool&#039;s &raquo;&nbsp;Natural Order String Comparison page.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Similar to other string comparison functions, this one returns &lt; 0 if\n   str1 is less than str2 &gt;\n   0 if str1 is greater than\n   str2, and 0 if they are equal.\n  \n \n\n\n \n  See Also\n  \n   \n    preg_match() - Perform a regular expression match\n    strcmp() - Binary safe string comparison\n    strcasecmp() - Binary safe case-insensitive string comparison\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strncasecmp() - Binary safe case-insensitive string comparison of the first n characters\n    strncmp() - Binary safe string comparison of the first n characters\n    strstr() - Find first occurrence of a string\n    setlocale() - Set locale information\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strnatcmp.php","title":"strnatcmp","description":"\n \n  strnatcmp\n  (PHP 4, PHP 5)strnatcmp &mdash; String comparisons using a &quot;natural order&quot; algorithm\n\n \n \n \n  Description\n  \n   int strnatcmp\n    ( string $str1\n   , string $str2\n   )\n\n  \n   This function implements a comparison algorithm that orders\n   alphanumeric strings in the way a human being would, this is\n   described as a &quot;natural ordering&quot;.  \n   Note that this comparison is case sensitive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Similar to other string comparison functions, this one returns &lt; 0 if\n   str1 is less than str2; &gt;\n   0 if str1 is greater than\n   str2, and 0 if they are equal.\n  \n \n\n\n \n  Examples\n  \n   An example of the difference between this algorithm and the regular\n   computer string sorting algorithms (used in strcmp())\n   can be seen below:\n   \n    \n\n&lt;?php$arr1&nbsp;=&nbsp;$arr2&nbsp;=&nbsp;array(\"img12.png\",&nbsp;\"img10.png\",&nbsp;\"img2.png\",&nbsp;\"img1.png\");echo&nbsp;\"Standard&nbsp;string&nbsp;comparison\\n\";usort($arr1,&nbsp;\"strcmp\");print_r($arr1);echo&nbsp;\"\\nNatural&nbsp;order&nbsp;string&nbsp;comparison\\n\";usort($arr2,&nbsp;\"strnatcmp\");print_r($arr2);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nStandard string comparison\nArray\n(\n    [0] =&gt; img1.png\n    [1] =&gt; img10.png\n    [2] =&gt; img12.png\n    [3] =&gt; img2.png\n)\n\nNatural order string comparison\nArray\n(\n    [0] =&gt; img1.png\n    [1] =&gt; img2.png\n    [2] =&gt; img10.png\n    [3] =&gt; img12.png\n)\n\n    \n   \n   For more information see: Martin Pool&#039;s &raquo;&nbsp;Natural Order String Comparison\n   page.\n  \n \n\n\n \n  See Also\n  \n   \n    preg_match() - Perform a regular expression match\n    strcasecmp() - Binary safe case-insensitive string comparison\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strcmp() - Binary safe string comparison\n    strncmp() - Binary safe string comparison of the first n characters\n    strncasecmp() - Binary safe case-insensitive string comparison of the first n characters\n    strnatcasecmp() - Case insensitive string comparisons using a &quot;natural order&quot; algorithm\n    strstr() - Find first occurrence of a string\n    natsort() - Sort an array using a &quot;natural order&quot; algorithm\n    natcasesort() - Sort an array using a case insensitive &quot;natural order&quot; algorithm\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strlen.php","title":"strlen","description":"\n \n  strlen\n  (PHP 4, PHP 5)strlen &mdash; Get string length\n\n \n\n \n  Description\n  \n   int strlen\n    ( string $string\n   )\n\n  \n   Returns the length of the given string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The string being measured for length.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The length of the string on success, \n   and 0 if the string is empty.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      Version\n      Description\n     \n\n    \n\n    \n     \n      5.3.0\n      \n       Prior versions treated arrays as the string Array, thus returning\n       a string length of 5 and emitting an E_NOTICE level error.\n      \n     \n\n    \n   \n  \n\n \n\n\n \n  Examples\n  \n   \n    Example #1 A strlen() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'abcdef';echo&nbsp;strlen($str);&nbsp;\/\/&nbsp;6$str&nbsp;=&nbsp;'&nbsp;ab&nbsp;cd&nbsp;';echo&nbsp;strlen($str);&nbsp;\/\/&nbsp;7?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    strlen() returns NULL when executed on arrays, and\n    an E_WARNING level error is emitted.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    count() - Count all elements in an array, or something in an object\n    mb_strlen() - Get string length\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strpbrk.php","title":"strpbrk","description":"\n \n  strpbrk\n  (PHP 5)strpbrk &mdash; Search a string for any of a set of characters\n\n \n \n \n  Description\n  \n   string strpbrk\n    ( string $haystack\n   , string $char_list\n   )\n\n  \n   strpbrk() searches the haystack\n   string for a char_list.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string where char_list is looked for.\n      \n     \n\n    \n\n    \n\n     char_list\n     \n\n      \n       This parameter is case sensitive.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string starting from the character found, or FALSE if it is\n   not found.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strpbrk() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;'This&nbsp;is&nbsp;a&nbsp;Simple&nbsp;text.';\/\/&nbsp;this&nbsp;echoes&nbsp;\"is&nbsp;is&nbsp;a&nbsp;Simple&nbsp;text.\"&nbsp;because&nbsp;'i'&nbsp;is&nbsp;matched&nbsp;firstecho&nbsp;strpbrk($text,&nbsp;'mi');\/\/&nbsp;this&nbsp;echoes&nbsp;\"Simple&nbsp;text.\"&nbsp;because&nbsp;chars&nbsp;are&nbsp;case&nbsp;sensitiveecho&nbsp;strpbrk($text,&nbsp;'S');?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrev.php","title":"strrev","description":"\n \n  strrev\n  (PHP 4, PHP 5)strrev &mdash; Reverse a string\n\n \n \n \n  Description\n  \n   string strrev\n    ( string $string\n   )\n\n  \n   Returns string, reversed.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The string to be reversed.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the reversed string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Reversing a string with strrev()\n    \n\n&lt;?phpecho&nbsp;strrev(\"Hello&nbsp;world!\");&nbsp;\/\/&nbsp;outputs&nbsp;\"!dlrow&nbsp;olleH\"?&gt;\n\n\n    \n\n   \n     \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrchr.php","title":"strrchr","description":"\n \n  strrchr\n  (PHP 4, PHP 5)strrchr &mdash; Find the last occurrence of a character in a string\n\n \n \n \n  Description\n  \n   string strrchr\n    ( string $haystack\n   , mixed $needle\n   )\n\n  \n   This function returns the portion of haystack which\n   starts at the last occurrence of needle and goes\n   until the end of haystack.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle contains more than one character,\n       only the first is used. This behavior is different from that of\n       strstr().\n      \n      \n       If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns the portion of string, or FALSE if\n   needle is not found.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        This function is now binary safe.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strrchr() example\n    \n\n&lt;?php\/\/&nbsp;get&nbsp;last&nbsp;directory&nbsp;in&nbsp;$PATH$dir&nbsp;=&nbsp;substr(strrchr($PATH,&nbsp;\":\"),&nbsp;1);\/\/&nbsp;get&nbsp;everything&nbsp;after&nbsp;last&nbsp;newline$text&nbsp;=&nbsp;\"Line&nbsp;1\\nLine&nbsp;2\\nLine&nbsp;3\";$last&nbsp;=&nbsp;substr(strrchr($text,&nbsp;10),&nbsp;1&nbsp;);?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strstr() - Find first occurrence of a string\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strncmp.php","title":"strncmp","description":"\n \n  strncmp\n  (PHP 4, PHP 5)strncmp &mdash; Binary safe string comparison of the first n characters\n\n \n \n \n  Description\n  \n   int strncmp\n    ( string $str1\n   , string $str2\n   , int $len\n   )\n\n  \n   This function is similar to strcmp(), with the\n   difference that you can specify the (upper limit of the) number of\n   characters from each string to be used in the comparison.\n  \n  \n   Note that this comparison is case sensitive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str1\n     \n\n      \n       The first string.\n      \n     \n\n    \n\n    \n\n     str2\n     \n\n      \n       The second string.\n      \n     \n\n    \n\n    \n\n     len\n     \n\n      \n       Number of characters to use in the comparison.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if str1 is less than\n   str2; &gt; 0 if str1\n   is greater than str2, and 0 if they are\n   equal.\n  \n \n\n\n \n  See Also\n  \n   \n    strncasecmp() - Binary safe case-insensitive string comparison of the first n characters\n    preg_match() - Perform a regular expression match\n    substr_compare() - Binary safe comparison of two strings from an offset, up to length characters\n    strcmp() - Binary safe string comparison\n    strstr() - Find first occurrence of a string\n    substr() - Return part of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strripos.php","title":"strripos","description":"\n \n  strripos\n  (PHP 5)strripos &mdash; Find position of last occurrence of a case-insensitive string in a string\n\n \n \n \n  Description\n  \n   int strripos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )\n\n  \n   Find position of last occurrence of a string in a string. Unlike\n   strrpos(), strripos() is\n   case-insensitive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in.\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       If specified, search will stop this number of characters counted from the\n       beginning of the string. If the value is negative, search will instead start\n       from that many characters from the end of the string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the numerical position of the last occurrence of\n   needle. Also note that string positions start at 0,\n   and not 1.\n  \n  \n   If needle is not found, FALSE is returned.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple strripos() example\n    \n\n&lt;?php$haystack&nbsp;=&nbsp;'ababcd';$needle&nbsp;&nbsp;&nbsp;=&nbsp;'aB';$pos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;strripos($haystack,&nbsp;$needle);if&nbsp;($pos&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Sorry,&nbsp;we&nbsp;did&nbsp;not&nbsp;find&nbsp;($needle)&nbsp;in&nbsp;($haystack)\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Congratulations!\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"We&nbsp;found&nbsp;the&nbsp;last&nbsp;($needle)&nbsp;in&nbsp;($haystack)&nbsp;at&nbsp;position&nbsp;($pos)\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n   Congratulations!\n   We found the last (aB) in (ababcd) at position (2)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    strpos() - Find position of first occurrence of a string\n    stripos() - Find position of first occurrence of a case-insensitive string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strstr() - Find first occurrence of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strspn.php","title":"strspn","description":"\n \n  strspn\n  (PHP 4, PHP 5)strspn &mdash; \n   Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask.\n  \n\n \n \n \n  Description\n  \n   int strspn\n    ( string $subject\n   , string $mask\n   [, int $start\n   [, int $length\n  ]] )\n\n  \n   Finds the length of the initial segment of subject\n   that contains only characters from mask.\n  \n  \n   If start and length\n   are omitted, then all of subject will be\n   examined. If they are included, then the effect will be the same as\n   calling strspn(substr($subject, $start, $length),\n   $mask) (see substr\n   for more information).\n  \n  \n   The line of code:\n   \n    \n\n&lt;?php$var&nbsp;=&nbsp;strspn(\"42&nbsp;is&nbsp;the&nbsp;answer&nbsp;to&nbsp;the&nbsp;128th&nbsp;question.\",&nbsp;\"1234567890\");?&gt;\n\n\n    \n\n   \n   will assign 2 to $var,\n   because the string &quot;42&quot; is the initial segment\n   of subject that consists only of characters\n   contained within &quot;1234567890&quot;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     subject\n     \n\n      \n       The string to examine.\n      \n     \n\n    \n\n    \n\n     mask\n     \n\n      \n       The list of allowable characters.\n      \n     \n\n    \n\n    \n\n     start\n     \n\n      \n       The position in subject to\n       start searching.\n      \n      \n       If start is given and is non-negative,\n       then strspn() will begin\n       examining subject at\n       the start&#039;th position. For instance, in\n       the string &#039;abcdef&#039;, the character at\n       position 0 is &#039;a&#039;, the\n       character at position 2 is\n       &#039;c&#039;, and so forth.\n      \n      \n       If start is given and is negative,\n       then strspn() will begin\n       examining subject at\n       the start&#039;th position from the end\n       of subject.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length of the segment from subject\n       to examine. \n      \n      \n       If length is given and is non-negative,\n       then subject will be examined\n       for length characters after the starting\n       position.\n      \n      \n        If lengthis given and is negative,\n        then subject will be examined from the\n        starting position up to length\n        characters from the end of subject.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the initial segment of subject\n   which consists entirely of characters in mask.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The start and length\n        parameters were added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strspn() example\n    \n\n&lt;?php\/\/&nbsp;subject&nbsp;does&nbsp;not&nbsp;start&nbsp;with&nbsp;any&nbsp;characters&nbsp;from&nbsp;maskvar_dump(strspn(\"foo\",&nbsp;\"o\"));\/\/&nbsp;examine&nbsp;two&nbsp;characters&nbsp;from&nbsp;subject&nbsp;starting&nbsp;at&nbsp;offset&nbsp;1var_dump(strspn(\"foo\",&nbsp;\"o\",&nbsp;1,&nbsp;2));\/\/&nbsp;examine&nbsp;one&nbsp;character&nbsp;from&nbsp;subject&nbsp;starting&nbsp;at&nbsp;offset&nbsp;1var_dump(strspn(\"foo\",&nbsp;\"o\",&nbsp;1,&nbsp;1));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nint(0)\nint(2)\nint(1)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strcspn() - Find length of initial segment not matching mask\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strstr.php","title":"strstr","description":"\n \n  strstr\n  (PHP 4, PHP 5)strstr &mdash; Find first occurrence of a string\n\n \n \n \n  Description\n  \n   string strstr\n    ( string $haystack\n   , mixed $needle\n   [, bool $before_needle = false\n  ] )\n\n  \n   Returns part of haystack string from the first\n   occurrence of needle to the end of\n   haystack.\n  \n  Note: \n   \n    This function is case-sensitive. For case-insensitive searches, use\n    stristr().\n   \n  \n  Note: \n   \n    If you only want to determine if a particular needle\n    occurs within haystack, use the faster and less memory\n    intensive function strpos() instead.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle is not a string, it is converted to\n       an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     before_needle\n     \n\n      \n       If TRUE, strstr() returns\n       the part of the haystack before the first\n       occurrence of the needle.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the portion of string, or FALSE if needle\n   is not found.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        Added the optional parameter before_needle.\n       \n      \n\n      \n       4.3.0\n       \n        strstr() was made binary safe.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strstr() example\n    \n\n&lt;?php$email&nbsp;&nbsp;=&nbsp;'name@example.com';$domain&nbsp;=&nbsp;strstr($email,&nbsp;'@');echo&nbsp;$domain;&nbsp;\/\/&nbsp;prints&nbsp;@example.com$user&nbsp;=&nbsp;strstr($email,&nbsp;'@',&nbsp;true);&nbsp;\/\/&nbsp;As&nbsp;of&nbsp;PHP&nbsp;5.3.0echo&nbsp;$user;&nbsp;\/\/&nbsp;prints&nbsp;name?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    preg_match() - Perform a regular expression match\n    stristr() - Case-insensitive strstr\n    strpos() - Find position of first occurrence of a string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strrpos.php","title":"strrpos","description":"\n \n  strrpos\n  (PHP 4, PHP 5)strrpos &mdash; Find the position of the last occurrence of a substring in a string\n\n \n \n \n  Description\n  \n   int strrpos\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n  ] )\n\n  \n   Returns the numeric position of the last occurrence of\n   needle in the haystack\n   string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in.\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       If specified, search will stop this number of characters counted from the\n       beginning of the string. If the value is negative, search will instead start\n       from that many characters from the end of the string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the position where the needle exists. Returns FALSE if the needle\n   was not found.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The needle may now be a string of more than one\n        character.\n       \n      \n\n      \n       5.0.0\n       \n        The offset parameter was introduced.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 Checking if a needle is in the haystack\n    \n     It is easy to mistake the return values for &quot;character found at\n     position 0&quot; and &quot;character not found&quot;.  Here&#039;s how to detect\n     the difference:\n    \n    \n\n&lt;?php$pos&nbsp;=&nbsp;strrpos($mystring,&nbsp;\"b\");if&nbsp;($pos&nbsp;===&nbsp;false)&nbsp;{&nbsp;\/\/&nbsp;note:&nbsp;three&nbsp;equal&nbsp;signs&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;not&nbsp;found...}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Searching with offsets\n    \n\n&lt;?php$foo&nbsp;=&nbsp;\"0123456789a123456789b123456789c\";var_dump(strrpos($foo,&nbsp;'7',&nbsp;-5));&nbsp;&nbsp;\/\/&nbsp;Starts&nbsp;looking&nbsp;backwards&nbsp;five&nbsp;positions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;from&nbsp;the&nbsp;end.&nbsp;Result:&nbsp;int(17)var_dump(strrpos($foo,&nbsp;'7',&nbsp;20));&nbsp;&nbsp;\/\/&nbsp;Starts&nbsp;searching&nbsp;20&nbsp;positions&nbsp;into&nbsp;the&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;string.&nbsp;Result:&nbsp;int(27)var_dump(strrpos($foo,&nbsp;'7',&nbsp;28));&nbsp;&nbsp;\/\/&nbsp;Result:&nbsp;bool(false)?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    strpos() - Find position of first occurrence of a string\n    strripos() - Find position of last occurrence of a case-insensitive string in a string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strstr() - Find first occurrence of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strpos.php","title":"strpos","description":"\n \n  strpos\n  (PHP 4, PHP 5)strpos &mdash; Find position of first occurrence of a string\n\n \n \n \n  Description\n  \n   int strpos\n    ( string $haystack\n   , mixed $needle\n   [, int $offset = 0\n  ] )\n\n  \n   Returns the numeric position of the first occurrence of\n   needle in the haystack\n   string.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in.\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       If needle is not a string, it is converted\n       to an integer and applied as the ordinal value of a character.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The optional offset parameter allows you\n       to specify which character in haystack to\n       start searching. The position returned is still relative to the\n       beginning of haystack.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the position as an integer. If needle is\n   not found, strpos() will return boolean\n   FALSE.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  Examples\n  \n   \n    Example #1 Using ===\n    \n\n&lt;?php$mystring&nbsp;=&nbsp;'abc';$findme&nbsp;&nbsp;&nbsp;=&nbsp;'a';$pos&nbsp;=&nbsp;strpos($mystring,&nbsp;$findme);\/\/&nbsp;Note&nbsp;our&nbsp;use&nbsp;of&nbsp;===.&nbsp;&nbsp;Simply&nbsp;==&nbsp;would&nbsp;not&nbsp;work&nbsp;as&nbsp;expected\/\/&nbsp;because&nbsp;the&nbsp;position&nbsp;of&nbsp;'a'&nbsp;was&nbsp;the&nbsp;0th&nbsp;(first)&nbsp;character.if&nbsp;($pos&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;'$findme'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'$mystring'\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;'$findme'&nbsp;was&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'$mystring'\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;and&nbsp;exists&nbsp;at&nbsp;position&nbsp;$pos\";}?&gt;\n\n\n    \n\n   \n\n   \n    Example #2 Using !==\n    \n\n&lt;?php$mystring&nbsp;=&nbsp;'abc';$findme&nbsp;&nbsp;&nbsp;=&nbsp;'a';$pos&nbsp;=&nbsp;strpos($mystring,&nbsp;$findme);\/\/&nbsp;The&nbsp;!==&nbsp;operator&nbsp;can&nbsp;also&nbsp;be&nbsp;used.&nbsp;&nbsp;Using&nbsp;!=&nbsp;would&nbsp;not&nbsp;work&nbsp;as&nbsp;expected\/\/&nbsp;because&nbsp;the&nbsp;position&nbsp;of&nbsp;'a'&nbsp;is&nbsp;0.&nbsp;The&nbsp;statement&nbsp;(0&nbsp;!=&nbsp;false)&nbsp;evaluates&nbsp;\/\/&nbsp;to&nbsp;false.if&nbsp;($pos&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;'$findme'&nbsp;was&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'$mystring'\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"&nbsp;and&nbsp;exists&nbsp;at&nbsp;position&nbsp;$pos\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"The&nbsp;string&nbsp;'$findme'&nbsp;was&nbsp;not&nbsp;found&nbsp;in&nbsp;the&nbsp;string&nbsp;'$mystring'\";}?&gt;\n\n\n    \n\n   \n\n   \n    Example #3 Using an offset\n    \n\n&lt;?php\/\/&nbsp;We&nbsp;can&nbsp;search&nbsp;for&nbsp;the&nbsp;character,&nbsp;ignoring&nbsp;anything&nbsp;before&nbsp;the&nbsp;offset$newstring&nbsp;=&nbsp;'abcdef&nbsp;abcdef';$pos&nbsp;=&nbsp;strpos($newstring,&nbsp;'a',&nbsp;1);&nbsp;\/\/&nbsp;$pos&nbsp;=&nbsp;7,&nbsp;not&nbsp;0?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strrpos() - Find the position of the last occurrence of a substring in a string\n    stripos() - Find position of first occurrence of a case-insensitive string\n    strripos() - Find position of last occurrence of a case-insensitive string in a string\n    strrchr() - Find the last occurrence of a character in a string\n    substr() - Return part of a string\n    stristr() - Case-insensitive strstr\n    strstr() - Find first occurrence of a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtok.php","title":"strtok","description":"\n \n  strtok\n  (PHP 4, PHP 5)strtok &mdash; Tokenize string\n\n \n \n \n  Description\n  \n   string strtok\n    ( string $str\n   , string $token\n   )\n\n  \n   string strtok\n    ( string $token\n   )\n\n  \n   strtok() splits a string (str)\n   into smaller strings (tokens), with each token being delimited by any\n   character from token.\n   That is, if you have a string like &quot;This is an example string&quot; you\n   could tokenize this string into its individual words by using the\n   space character as the token.\n  \n  \n   Note that only the first call to strtok uses the string argument.\n   Every subsequent call to strtok only needs the token to use, as\n   it keeps track of where it is in the current string.  To start\n   over, or to tokenize a new string you simply call strtok with the\n   string argument again to initialize it.  Note that you may put\n   multiple tokens in the token parameter.  The string will be\n   tokenized when any one of the characters in the argument are\n   found.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string being split up into smaller strings (tokens).\n      \n     \n\n    \n\n    \n\n     token\n     \n\n      \n       The delimiter used when splitting up str.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   A string token.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strtok() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;\"This&nbsp;is\\tan&nbsp;example\\nstring\";\/*&nbsp;Use&nbsp;tab&nbsp;and&nbsp;newline&nbsp;as&nbsp;tokenizing&nbsp;characters&nbsp;as&nbsp;well&nbsp;&nbsp;*\/$tok&nbsp;=&nbsp;strtok($string,&nbsp;\"&nbsp;\\n\\t\");while&nbsp;($tok&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Word=$tok&lt;br&nbsp;\/&gt;\";&nbsp;&nbsp;&nbsp;&nbsp;$tok&nbsp;=&nbsp;strtok(\"&nbsp;\\n\\t\");}?&gt;\n\n\n    \n\n   \n   \n  \n   The behavior when an empty part was found changed with PHP 4.1.0. The old\n   behavior returned an empty string, while the new, correct, behavior\n   simply skips the part of the string:\n  \n  \n   \n    Example #2 Old strtok() behavior\n    \n\n&lt;?php$first_token&nbsp;&nbsp;=&nbsp;strtok('\/something',&nbsp;'\/');$second_token&nbsp;=&nbsp;strtok('\/');var_dump($first_token,&nbsp;$second_token);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n    string(0) &quot;&quot;\n    string(9) &quot;something&quot;\n\n    \n   \n   \n    Example #3 New strtok() behavior\n    \n\n&lt;?php$first_token&nbsp;&nbsp;=&nbsp;strtok('\/something',&nbsp;'\/');$second_token&nbsp;=&nbsp;strtok('\/');var_dump($first_token,&nbsp;$second_token);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n    string(9) &quot;something&quot;\n    bool(false)\n\n    \n   \n  \n \n\n\n \n  Notes\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n \n \n  See Also\n  \n   \n    split() - Split string into array by regular expression\n    explode() - Split a string by string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtolower.php","title":"strtolower","description":"\n \n  strtolower\n  (PHP 4, PHP 5)strtolower &mdash; Make a string lowercase\n\n \n \n \n  Description\n  \n   string strtolower\n    ( string $str\n   )\n\n  \n   Returns string with all alphabetic characters\n   converted to lowercase.\n  \n  \n   Note that &#039;alphabetic&#039; is determined by the current locale. This means\n   that in i.e. the default &quot;C&quot; locale, characters such as umlaut-A\n   (\u00c4) will not be converted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the lowercased string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strtolower() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Mary&nbsp;Had&nbsp;A&nbsp;Little&nbsp;Lamb&nbsp;and&nbsp;She&nbsp;LOVED&nbsp;It&nbsp;So\";$str&nbsp;=&nbsp;strtolower($str);echo&nbsp;$str;&nbsp;\/\/&nbsp;Prints&nbsp;mary&nbsp;had&nbsp;a&nbsp;little&nbsp;lamb&nbsp;and&nbsp;she&nbsp;loved&nbsp;it&nbsp;so?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strtoupper() - Make a string uppercase\n    ucfirst() - Make a string's first character uppercase\n    ucwords() - Uppercase the first character of each word in a string\n    mb_strtolower() - Make a string lowercase\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-compare.php","title":"substr_compare","description":"\n \n  substr_compare\n  (PHP 5)substr_compare &mdash; Binary safe comparison of two strings from an offset, up to length characters\n\n \n \n \n  Description\n  \n   int substr_compare\n    ( string $main_str\n   , string $str\n   , int $offset\n   [, int $length\n   [, bool $case_insensitivity = false\n  ]] )\n\n  \n   substr_compare() compares main_str\n   from position offset with str\n   up to length characters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     main_str\n     \n\n      \n       The main string being compared.\n      \n     \n\n    \n\n    \n\n     str\n     \n\n      \n       The secondary string being compared.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The start position for the comparison. If negative, it starts counting\n       from the end of the string.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length of the comparison. The default value is the largest of the\n       length of the str compared to the length of\n       main_str less the\n       offset.\n      \n     \n\n    \n\n    \n\n     case_insensitivity\n     \n\n      \n       If case_insensitivity is TRUE, comparison is\n       case insensitive.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns &lt; 0 if main_str from position\n   offset is less than str, &gt;\n   0 if it is greater than str, and 0 if they are equal.\n   If offset is equal to or greater than the length of\n   main_str or length is set and\n   is less than 1, substr_compare() prints a warning and returns\n   FALSE.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the possibility to use a negative offset.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A substr_compare() example\n    \n\n&lt;?phpecho&nbsp;substr_compare(\"abcde\",&nbsp;\"bc\",&nbsp;1,&nbsp;2);&nbsp;\/\/&nbsp;0echo&nbsp;substr_compare(\"abcde\",&nbsp;\"de\",&nbsp;-2,&nbsp;2);&nbsp;\/\/&nbsp;0echo&nbsp;substr_compare(\"abcde\",&nbsp;\"bcg\",&nbsp;1,&nbsp;2);&nbsp;\/\/&nbsp;0echo&nbsp;substr_compare(\"abcde\",&nbsp;\"BC\",&nbsp;1,&nbsp;2,&nbsp;true);&nbsp;\/\/&nbsp;0echo&nbsp;substr_compare(\"abcde\",&nbsp;\"bc\",&nbsp;1,&nbsp;3);&nbsp;\/\/&nbsp;1echo&nbsp;substr_compare(\"abcde\",&nbsp;\"cd\",&nbsp;1,&nbsp;2);&nbsp;\/\/&nbsp;-1echo&nbsp;substr_compare(\"abcde\",&nbsp;\"abc\",&nbsp;5,&nbsp;1);&nbsp;\/\/&nbsp;warning?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtoupper.php","title":"strtoupper","description":"\n \n  strtoupper\n  (PHP 4, PHP 5)strtoupper &mdash; Make a string uppercase\n\n \n \n \n  Description\n  \n   string strtoupper\n    ( string $string\n   )\n\n  \n   Returns string with all alphabetic characters\n   converted to uppercase.\n  \n  \n   Note that &#039;alphabetic&#039; is determined by the current locale. For instance,\n   in the default &quot;C&quot; locale characters such as umlaut-a (\u00e4) will not be\n   converted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the uppercased string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strtoupper() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;\"Mary&nbsp;Had&nbsp;A&nbsp;Little&nbsp;Lamb&nbsp;and&nbsp;She&nbsp;LOVED&nbsp;It&nbsp;So\";$str&nbsp;=&nbsp;strtoupper($str);echo&nbsp;$str;&nbsp;\/\/&nbsp;Prints&nbsp;MARY&nbsp;HAD&nbsp;A&nbsp;LITTLE&nbsp;LAMB&nbsp;AND&nbsp;SHE&nbsp;LOVED&nbsp;IT&nbsp;SO?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strtolower() - Make a string lowercase\n    ucfirst() - Make a string's first character uppercase\n    ucwords() - Uppercase the first character of each word in a string\n    mb_strtoupper() - Make a string uppercase\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-count.php","title":"substr_count","description":"\n \n  substr_count\n  (PHP 4, PHP 5)substr_count &mdash; Count the number of substring occurrences\n\n \n \n  Description\n  \n   int substr_count\n    ( string $haystack\n   , string $needle\n   [, int $offset = 0\n   [, int $length\n  ]] )\n\n  \n   substr_count() returns the number of times the\n   needle substring occurs in the\n   haystack string. Please note that\n   needle is case sensitive.\n  \n  Note: \n   \n    This function doesn&#039;t count overlapped substrings. See the example below!\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     haystack\n     \n\n      \n       The string to search in\n      \n     \n\n    \n\n    \n\n     needle\n     \n\n      \n       The substring to search for\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The offset where to start counting\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The maximum length after the specified offset to search for the\n       substring. It outputs a warning if the offset plus the length is\n       greater than the haystack length.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns an integer.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the offset and\n        the length parameters\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A substr_count() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;'This&nbsp;is&nbsp;a&nbsp;test';echo&nbsp;strlen($text);&nbsp;\/\/&nbsp;14echo&nbsp;substr_count($text,&nbsp;'is');&nbsp;\/\/&nbsp;2\/\/&nbsp;the&nbsp;string&nbsp;is&nbsp;reduced&nbsp;to&nbsp;'s&nbsp;is&nbsp;a&nbsp;test',&nbsp;so&nbsp;it&nbsp;prints&nbsp;1echo&nbsp;substr_count($text,&nbsp;'is',&nbsp;3);\/\/&nbsp;the&nbsp;text&nbsp;is&nbsp;reduced&nbsp;to&nbsp;'s&nbsp;i',&nbsp;so&nbsp;it&nbsp;prints&nbsp;0echo&nbsp;substr_count($text,&nbsp;'is',&nbsp;3,&nbsp;3);\/\/&nbsp;generates&nbsp;a&nbsp;warning&nbsp;because&nbsp;5+10&nbsp;&gt;&nbsp;14echo&nbsp;substr_count($text,&nbsp;'is',&nbsp;5,&nbsp;10);\/\/&nbsp;prints&nbsp;only&nbsp;1,&nbsp;because&nbsp;it&nbsp;doesn't&nbsp;count&nbsp;overlapped&nbsp;substrings$text2&nbsp;=&nbsp;'gcdgcdgcd';echo&nbsp;substr_count($text2,&nbsp;'gcdgcd');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    count_chars() - Return information about characters used in a string\n    strpos() - Find position of first occurrence of a string\n    substr() - Return part of a string\n    strstr() - Find first occurrence of a string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strtr.php","title":"strtr","description":"\n \n  strtr\n  (PHP 4, PHP 5)strtr &mdash; Translate characters or replace substrings\n\n \n \n \n  Description\n  \n   string strtr\n    ( string $str\n   , string $from\n   , string $to\n   )\n\n  \n   string strtr\n    ( string $str\n   , array $replace_pairs\n   )\n\n  \n   If given three arguments, this function returns a copy of\n   str where all occurrences of each (single-byte)\n   character in from have been translated to the\n   corresponding character in to, i.e., every\n   occurrence of $from[$n] has been replaced with\n   $to[$n], where $n is a valid\n   offset in both arguments.\n  \n  \n   If from and to have\n   different lengths, the extra characters in the longer of the two\n   are ignored. The length of str will be the same as\n   the return value&#039;s.\n  \n  \n   If given two arguments, the second should be an array in the\n   form array(&#039;from&#039; =&gt; &#039;to&#039;, ...). The return value is\n   a string where all the occurrences of the array keys have been\n   replaced by the corresponding values. The longest keys will be tried first.\n   Once a substring has been replaced, its new value will not be searched\n   again.\n  \n  \n   In this case, the keys and the values may have any length, provided that\n   there is no empty key; additionaly, the length of the return value may\n   differ from that of str.\n   However, this function will be the most efficient when all the keys have the\n   same size.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string being translated.\n      \n     \n\n    \n\n    \n\n     from\n     \n\n      \n       The string being translated to to.\n      \n     \n\n    \n\n    \n\n     to\n     \n\n      \n       The string replacing from.\n      \n     \n\n    \n\n    \n\n     replace_pairs\n     \n\n      \n       The replace_pairs parameter may be used instead of \n       to and from, in which case it&#039;s an\n       array in the form array(&#039;from&#039; =&gt; &#039;to&#039;, ...). \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the translated string.\n  \n  \n   If replace_pairs contains a key which\n   is an empty string (&quot;&quot;),\n   FALSE will be returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 strtr() example\n    \n\n&lt;?php\/\/In&nbsp;this&nbsp;form,&nbsp;strtr()&nbsp;does&nbsp;byte-by-byte&nbsp;translation\/\/Therefore,&nbsp;we&nbsp;are&nbsp;assuming&nbsp;a&nbsp;single-byte&nbsp;encoding&nbsp;here:$addr&nbsp;=&nbsp;strtr($addr,&nbsp;\"\u00e4\u00e5\u00f6\",&nbsp;\"aao\");?&gt;\n\n\n    \n\n   \n  \n  \n   The next example shows the behavior of strtr() when\n   called with only two arguments. Note the preference of the replacements\n   (&quot;h&quot; is not picked because there are longer matches)\n   and how replaced text was not searched again.\n  \n  \n   Example #2 strtr() example with two arguments\n    \n\n&lt;?php$trans&nbsp;=&nbsp;array(\"h\"&nbsp;=&gt;&nbsp;\"-\",&nbsp;\"hello\"&nbsp;=&gt;&nbsp;\"hi\",&nbsp;\"hi\"&nbsp;=&gt;&nbsp;\"hello\");echo&nbsp;strtr(\"hi&nbsp;all,&nbsp;I&nbsp;said&nbsp;hello\",&nbsp;$trans);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nhello all, I said hi\n\n    \n  \n  \n   The two modes of behavior are substantially different. With three arguments,\n   strtr() will replace bytes; with two, it may replace\n   longer substrings.\n  \n  \n   Example #3 strtr() behavior comparison\n    \n\n&lt;?phpecho&nbsp;strtr(\"baab\",&nbsp;\"ab\",&nbsp;\"01\"),\"\\n\";$trans&nbsp;=&nbsp;array(\"ab\"&nbsp;=&gt;&nbsp;\"01\");echo&nbsp;strtr(\"baab\",&nbsp;$trans);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1001\nba01\n\n    \n  \n \n\n\n \n  See Also\n  \n   \n    str_replace() - Replace all occurrences of the search string with the replacement string\n    preg_replace() - Perform a regular expression search and replace\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr-replace.php","title":"substr_replace","description":"\n \n  substr_replace\n  (PHP 4, PHP 5)substr_replace &mdash; Replace text within a portion of a string\n\n \n \n \n  Description\n  \n   mixed substr_replace\n    ( mixed $string\n   , mixed $replacement\n   , mixed $start\n   [, mixed $length\n  ] )\n\n  \n   substr_replace() replaces a copy of\n   string delimited by the\n   start and (optionally)\n   length parameters with the string given in\n   replacement. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n      \n       An array of strings can be provided, in which\n       case the replacements will occur on each string in turn. In this case,\n       the replacement, start\n       and length parameters may be provided either as\n       scalar values to be applied to each input string in turn, or as\n       arrays, in which case the corresponding array element will\n       be used for each input string.\n      \n     \n\n    \n\n    \n\n     replacement\n     \n\n      \n       The replacement string.\n      \n     \n\n    \n\n    \n\n     start\n     \n\n      \n       If start is positive, the replacing will\n       begin at the start&#039;th offset into\n       string.\n      \n      \n       If start is negative, the replacing will\n       begin at the start&#039;th character from the\n       end of string.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If given and is positive, it represents the length of the portion of\n       string which is to be replaced. If it is\n       negative, it represents the number of characters from the end of\n       string at which to stop replacing. If it\n       is not given, then it will default to strlen(\n       string ); i.e. end the replacing at the\n       end of string. Of course, if\n       length is zero then this function will have the\n       effect of inserting replacement into\n       string at the given\n       start offset.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The result string is returned. If string is an\n   array then array is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.3\n       \n        All parameters now accept arrays.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Simple substr_replace() examples\n    \n\n&lt;?php$var&nbsp;=&nbsp;'ABCDEFGH:\/MNRPQR\/';echo&nbsp;\"Original:&nbsp;$var&lt;hr&nbsp;\/&gt;\\n\";\/*&nbsp;These&nbsp;two&nbsp;examples&nbsp;replace&nbsp;all&nbsp;of&nbsp;$var&nbsp;with&nbsp;'bob'.&nbsp;*\/echo&nbsp;substr_replace($var,&nbsp;'bob',&nbsp;0)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";echo&nbsp;substr_replace($var,&nbsp;'bob',&nbsp;0,&nbsp;strlen($var))&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";\/*&nbsp;Insert&nbsp;'bob'&nbsp;right&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;$var.&nbsp;*\/echo&nbsp;substr_replace($var,&nbsp;'bob',&nbsp;0,&nbsp;0)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";\/*&nbsp;These&nbsp;next&nbsp;two&nbsp;replace&nbsp;'MNRPQR'&nbsp;in&nbsp;$var&nbsp;with&nbsp;'bob'.&nbsp;*\/echo&nbsp;substr_replace($var,&nbsp;'bob',&nbsp;10,&nbsp;-1)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";echo&nbsp;substr_replace($var,&nbsp;'bob',&nbsp;-7,&nbsp;-1)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";\/*&nbsp;Delete&nbsp;'MNRPQR'&nbsp;from&nbsp;$var.&nbsp;*\/echo&nbsp;substr_replace($var,&nbsp;'',&nbsp;10,&nbsp;-1)&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 \n     Using substr_replace() to replace multiple strings at\n     once\n    \n    \n\n&lt;?php$input&nbsp;=&nbsp;array('A:&nbsp;XXX',&nbsp;'B:&nbsp;XXX',&nbsp;'C:&nbsp;XXX');\/\/&nbsp;A&nbsp;simple&nbsp;case:&nbsp;replace&nbsp;XXX&nbsp;in&nbsp;each&nbsp;string&nbsp;with&nbsp;YYY.echo&nbsp;implode(';&nbsp;',&nbsp;substr_replace($input,&nbsp;'YYY',&nbsp;3,&nbsp;3)).\"\\n\";\/\/&nbsp;A&nbsp;more&nbsp;complicated&nbsp;case&nbsp;where&nbsp;each&nbsp;replacement&nbsp;is&nbsp;different.$replace&nbsp;=&nbsp;array('AAA',&nbsp;'BBB',&nbsp;'CCC');echo&nbsp;implode(';&nbsp;',&nbsp;substr_replace($input,&nbsp;$replace,&nbsp;3,&nbsp;3)).\"\\n\";\/\/&nbsp;Replace&nbsp;a&nbsp;different&nbsp;number&nbsp;of&nbsp;characters&nbsp;each&nbsp;time.$length&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;3);echo&nbsp;implode(';&nbsp;',&nbsp;substr_replace($input,&nbsp;$replace,&nbsp;3,&nbsp;$length)).\"\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nA: YYY; B: YYY; C: YYY\nA: AAA; B: BBB; C: CCC\nA: AAAXX; B: BBBX; C: CCC\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    str_replace() - Replace all occurrences of the search string with the replacement string\n    substr() - Return part of a string\n    String access and modification by character\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.trim.php","title":"trim","description":"\n \n  trim \n  (PHP 4, PHP 5)trim &mdash; Strip whitespace (or other characters) from the beginning and end of a string\n\n \n\n \n  Description\n  \n   string trim\n    ( string $str\n   [, string $charlist\n  ] )\n\n  \n   This function returns a string with whitespace stripped from the\n   beginning and end of str.\n   Without the second parameter,\n   trim() will strip these characters:\n   \n   \n    \n     \n      &quot; &quot; (ASCII 32 \n      (0x20)), an ordinary space.\n     \n    \n    \n     \n      &quot;\\t&quot; (ASCII 9 \n      (0x09)), a tab.\n     \n    \n    \n     \n      &quot;\\n&quot; (ASCII 10 \n      (0x0A)), a new line (line feed).\n     \n    \n    \n     \n      &quot;\\r&quot; (ASCII 13 \n      (0x0D)), a carriage return.\n     \n    \n    \n     \n      &quot;\\0&quot; (ASCII 0 \n      (0x00)), the NUL-byte.\n     \n    \n    \n      \n      &quot;\\x0B&quot; (ASCII 11 \n      (0x0B)), a vertical tab.\n     \n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string that will be trimmed.\n      \n     \n\n    \n\n    \n\n     charlist\n     \n\n      \n       Optionally, the stripped characters can also be specified using\n       the charlist parameter.\n       Simply list all characters that you want to be stripped. With\n       .. you can specify a range of characters.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The trimmed string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        The optional charlist parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Usage example of trim()\n    \n\n&lt;?php$text&nbsp;&nbsp;&nbsp;=&nbsp;\"\\t\\tThese&nbsp;are&nbsp;a&nbsp;few&nbsp;words&nbsp;:)&nbsp;...&nbsp;&nbsp;\";$binary&nbsp;=&nbsp;\"\\x09Example&nbsp;string\\x0A\";$hello&nbsp;&nbsp;=&nbsp;\"Hello&nbsp;World\";var_dump($text,&nbsp;$binary,&nbsp;$hello);print&nbsp;\"\\n\";$trimmed&nbsp;=&nbsp;trim($text);var_dump($trimmed);$trimmed&nbsp;=&nbsp;trim($text,&nbsp;\"&nbsp;\\t.\");var_dump($trimmed);$trimmed&nbsp;=&nbsp;trim($hello,&nbsp;\"Hdle\");var_dump($trimmed);$trimmed&nbsp;=&nbsp;trim($hello,&nbsp;'HdWr');var_dump($trimmed);\/\/&nbsp;trim&nbsp;the&nbsp;ASCII&nbsp;control&nbsp;characters&nbsp;at&nbsp;the&nbsp;beginning&nbsp;and&nbsp;end&nbsp;of&nbsp;$binary\/\/&nbsp;(from&nbsp;0&nbsp;to&nbsp;31&nbsp;inclusive)$clean&nbsp;=&nbsp;trim($binary,&nbsp;\"\\x00..\\x1F\");var_dump($clean);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(32) &quot;        These are a few words :) ...  &quot;\nstring(16) &quot;    Example string\n&quot;\nstring(11) &quot;Hello World&quot;\n\nstring(28) &quot;These are a few words :) ...&quot;\nstring(24) &quot;These are a few words :)&quot;\nstring(5) &quot;o Wor&quot;\nstring(9) &quot;ello Worl&quot;\nstring(14) &quot;Example string&quot;\n\n    \n   \n  \n  \n   \n    Example #2 Trimming array values with trim()\n    \n\n&lt;?phpfunction&nbsp;trim_value(&amp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;=&nbsp;trim($value);&nbsp;}$fruit&nbsp;=&nbsp;array('apple','banana&nbsp;',&nbsp;'&nbsp;cranberry&nbsp;');var_dump($fruit);array_walk($fruit,&nbsp;'trim_value');var_dump($fruit);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(3) {\n  [0]=&gt;\n  string(5) &quot;apple&quot;\n  [1]=&gt;\n  string(7) &quot;banana &quot;\n  [2]=&gt;\n  string(11) &quot; cranberry &quot;\n}\narray(3) {\n  [0]=&gt;\n  string(5) &quot;apple&quot;\n  [1]=&gt;\n  string(6) &quot;banana&quot;\n  [2]=&gt;\n  string(9) &quot;cranberry&quot;\n}\n\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   Possible gotcha: removing middle characters\n   \n    Because trim() trims characters from the beginning and end of\n    a string, it may be confusing when characters are (or are not) removed from\n    the middle. trim(&#039;abc&#039;, &#039;bad&#039;) removes both &#039;a&#039; and &#039;b&#039; because it\n    trims &#039;a&#039; thus moving &#039;b&#039; to the beginning to also be trimmed. So, this is why it &quot;works&quot;\n    whereas trim(&#039;abc&#039;, &#039;b&#039;) seemingly does not.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ltrim() - Strip whitespace (or other characters) from the beginning of a string\n    rtrim() - Strip whitespace (or other characters) from the end of a string\n    str_replace() - Replace all occurrences of the search string with the replacement string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vfprintf.php","title":"vfprintf","description":"\n \n  vfprintf\n  (PHP 5)vfprintf &mdash; Write a formatted string to a stream\n\n \n \n \n  Description\n  \n   int vfprintf\n    ( resource $handle\n   , string $format\n   , array $args\n   )\n\n  \n   Write a string produced according to format to the\n   stream resource specified by handle.\n  \n  \n   Operates as fprintf() but accepts an array of\n   arguments, rather than a variable number of arguments.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       See sprintf() for a description of\n       format.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the outputted string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 vfprintf(): zero-padded integers\n    \n\n&lt;?phpif&nbsp;(!($fp&nbsp;=&nbsp;fopen('date.txt',&nbsp;'w')))&nbsp;&nbsp;&nbsp;&nbsp;return;vfprintf($fp,&nbsp;\"%04d-%02d-%02d\",&nbsp;array($year,&nbsp;$month,&nbsp;$day));\/\/&nbsp;will&nbsp;write&nbsp;the&nbsp;formatted&nbsp;ISO&nbsp;date&nbsp;to&nbsp;date.txt?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n    sscanf() - Parses input from a string according to a format\n    fscanf() - Parses input from a file according to a format\n    vsprintf() - Return a formatted string\n    number_format() - Format a number with grouped thousands\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vprintf.php","title":"vprintf","description":"\n \n  vprintf\n  (PHP 4 &gt;= 4.1.0, PHP 5)vprintf &mdash; Output a formatted string\n\n \n \n \n  Description\n  \n   int vprintf\n    ( string $format\n   , array $args\n   )\n\n  \n   Display array values as a formatted string according to\n   format (which is described in the documentation\n   for sprintf()).\n  \n  \n   Operates as printf() but accepts an array of\n   arguments, rather than a variable number of arguments.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       See sprintf() for a description of\n       format.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the outputted string.\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 vprintf(): zero-padded integers\n    \n\n&lt;?phpvprintf(\"%04d-%02d-%02d\",&nbsp;explode('-',&nbsp;'1988-8-1'));&nbsp;\/\/&nbsp;1988-08-01?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n    vsprintf() - Return a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ucfirst.php","title":"ucfirst","description":"\n \n  ucfirst\n  (PHP 4, PHP 5)ucfirst &mdash; Make a string&#039;s first character uppercase\n\n \n \n \n  Description\n  \n   string ucfirst\n    ( string $str\n   )\n\n  \n   Returns a string with the first character of\n   str capitalized, if that character is\n   alphabetic.\n  \n  \n   Note that &#039;alphabetic&#039; is determined by the current locale. For\n   instance, in the default &quot;C&quot; locale characters such as umlaut-a\n   (\u00e4) will not be converted.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the resulting string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ucfirst() example\n    \n\n&lt;?php$foo&nbsp;=&nbsp;'hello&nbsp;world!';$foo&nbsp;=&nbsp;ucfirst($foo);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Hello&nbsp;world!$bar&nbsp;=&nbsp;'HELLO&nbsp;WORLD!';$bar&nbsp;=&nbsp;ucfirst($bar);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;HELLO&nbsp;WORLD!$bar&nbsp;=&nbsp;ucfirst(strtolower($bar));&nbsp;\/\/&nbsp;Hello&nbsp;world!?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    lcfirst() - Make a string's first character lowercase\n    strtolower() - Make a string lowercase\n    strtoupper() - Make a string uppercase\n    ucwords() - Uppercase the first character of each word in a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ucwords.php","title":"ucwords","description":"\n \n  ucwords\n  (PHP 4, PHP 5)ucwords &mdash; Uppercase the first character of each word in a string\n\n \n \n \n  Description\n  \n   string ucwords\n    ( string $str\n   )\n\n  \n   Returns a string with the first character of each word in\n   str capitalized, if that character is alphabetic.\n  \n  \n   The definition of a word is any string of characters that is immediately\n   after a whitespace (These are: space, form-feed, newline, carriage return,\n   horizontal tab, and vertical tab).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the modified string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ucwords() example\n    \n\n&lt;?php$foo&nbsp;=&nbsp;'hello&nbsp;world!';$foo&nbsp;=&nbsp;ucwords($foo);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;Hello&nbsp;World!$bar&nbsp;=&nbsp;'HELLO&nbsp;WORLD!';$bar&nbsp;=&nbsp;ucwords($bar);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;HELLO&nbsp;WORLD!$bar&nbsp;=&nbsp;ucwords(strtolower($bar));&nbsp;\/\/&nbsp;Hello&nbsp;World!?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n \n  See Also\n  \n   \n    strtoupper() - Make a string uppercase\n    strtolower() - Make a string lowercase\n    ucfirst() - Make a string's first character uppercase\n    mb_convert_case() - Perform case folding on a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.substr.php","title":"substr","description":"\n \n  substr\n  (PHP 4, PHP 5)substr &mdash; Return part of a string\n\n \n \n \n  Description\n  \n   string substr\n    ( string $string\n   , int $start\n   [, int $length\n  ] )\n\n  \n   Returns the portion of string specified by the\n   start and length parameters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string. Must be one character or longer.\n      \n     \n\n    \n\n    \n\n     start\n     \n\n      \n       If start is non-negative, the returned string\n       will start at the start&#039;th position in\n       string, counting from zero. For instance,\n       in the string &#039;abcdef&#039;, the character at\n       position 0 is &#039;a&#039;, the\n       character at position 2 is\n       &#039;c&#039;, and so forth.\n      \n      \n       If start is negative, the returned string\n       will start at the start&#039;th character\n       from the end of string.\n      \n      \n       If string is less than or equal to\n       start characters long, FALSE will be returned.\n      \n      \n       \n        Example #1 Using a negative start\n        \n\n&lt;?php$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;-1);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"f\"$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;-2);&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"ef\"$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;-3,&nbsp;1);&nbsp;\/\/&nbsp;returns&nbsp;\"d\"?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       If length is given and is positive, the string\n       returned will contain at most length characters\n       beginning from start (depending on the length of\n       string).\n      \n      \n       If length is given and is negative, then that many\n       characters will be omitted from the end of string\n       (after the start position has been calculated when a\n       start is negative).  If\n       start denotes the position of this truncation or\n       beyond, false will be returned.\n      \n      \n       If length is given and is 0,\n       FALSE or NULL an empty string will be returned.\n      \n      \n       If length is omitted, the substring starting from\n       start until the end of the string will be\n       returned.\n      \n      \n       Example #2 Using a negative length\n       \n\n&lt;?php$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;0,&nbsp;-1);&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"abcde\"$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;2,&nbsp;-1);&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;\"cde\"$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;4,&nbsp;-4);&nbsp;&nbsp;\/\/&nbsp;returns&nbsp;false$rest&nbsp;=&nbsp;substr(\"abcdef\",&nbsp;-3,&nbsp;-1);&nbsp;\/\/&nbsp;returns&nbsp;\"de\"?&gt;\n\n\n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the extracted part of string,  or FALSE on failure or an empty string.\n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.2 - 5.2.6\n       \n        If the start parameter indicates the position of\n        a negative truncation or beyond, false is returned. Other versions get\n        the string from start.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 Basic substr() usage\n    \n\n&lt;?phpecho&nbsp;substr('abcdef',&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;bcdefecho&nbsp;substr('abcdef',&nbsp;1,&nbsp;3);&nbsp;&nbsp;\/\/&nbsp;bcdecho&nbsp;substr('abcdef',&nbsp;0,&nbsp;4);&nbsp;&nbsp;\/\/&nbsp;abcdecho&nbsp;substr('abcdef',&nbsp;0,&nbsp;8);&nbsp;&nbsp;\/\/&nbsp;abcdefecho&nbsp;substr('abcdef',&nbsp;-1,&nbsp;1);&nbsp;\/\/&nbsp;f\/\/&nbsp;Accessing&nbsp;single&nbsp;characters&nbsp;in&nbsp;a&nbsp;string\/\/&nbsp;can&nbsp;also&nbsp;be&nbsp;achieved&nbsp;using&nbsp;\"square&nbsp;brackets\"$string&nbsp;=&nbsp;'abcdef';echo&nbsp;$string[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;aecho&nbsp;$string[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;decho&nbsp;$string[strlen($string)-1];&nbsp;\/\/&nbsp;f?&gt;\n\n\n    \n\n    \n   \n    Example #4 substr() casting behaviour\n    \n\n&lt;?phpclass&nbsp;apple&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__toString()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"green\";&nbsp;&nbsp;&nbsp;&nbsp;}}echo&nbsp;\"1)&nbsp;\".var_export(substr(\"pear\",&nbsp;0,&nbsp;2),&nbsp;true).PHP_EOL;echo&nbsp;\"2)&nbsp;\".var_export(substr(54321,&nbsp;0,&nbsp;2),&nbsp;true).PHP_EOL;echo&nbsp;\"3)&nbsp;\".var_export(substr(new&nbsp;apple(),&nbsp;0,&nbsp;2),&nbsp;true).PHP_EOL;echo&nbsp;\"4)&nbsp;\".var_export(substr(true,&nbsp;0,&nbsp;1),&nbsp;true).PHP_EOL;echo&nbsp;\"5)&nbsp;\".var_export(substr(false,&nbsp;0,&nbsp;1),&nbsp;true).PHP_EOL;echo&nbsp;\"6)&nbsp;\".var_export(substr(\"\",&nbsp;0,&nbsp;1),&nbsp;true).PHP_EOL;echo&nbsp;\"7)&nbsp;\".var_export(substr(1.2e3,&nbsp;0,&nbsp;4),&nbsp;true).PHP_EOL;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n1) &#039;pe&#039;\n2) &#039;54&#039;\n3) &#039;gr&#039;\n4) &#039;1&#039;\n5) false\n6) false\n7) &#039;1200&#039;\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Returns FALSE on error.\n   \n    \n\n&lt;?phpvar_dump(substr('a',&nbsp;1));&nbsp;\/\/&nbsp;bool(false)?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  See Also\n  \n   \n    strrchr() - Find the last occurrence of a character in a string\n    substr_replace() - Replace text within a portion of a string\n    preg_match() - Perform a regular expression match\n    trim() - Strip whitespace (or other characters) from the beginning and end of a string\n    mb_substr() - Get part of string\n    wordwrap() - Wraps a string to a given number of characters\n    String access and modification by character\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.vsprintf.php","title":"vsprintf","description":"\n \n  vsprintf\n  (PHP 4 &gt;= 4.1.0, PHP 5)vsprintf &mdash; Return a formatted string\n\n \n \n \n  Description\n  \n   string vsprintf\n    ( string $format\n   , array $args\n   )\n\n  \n   Operates as sprintf() but accepts an array of\n   arguments, rather than a variable number of arguments.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     format\n     \n\n      \n       See sprintf() for a description of\n       format.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Return array values as a formatted string according to\n   format (which is described in the documentation\n   for sprintf()).\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 vsprintf(): zero-padded integers\n    \n\n&lt;?phpprint&nbsp;vsprintf(\"%04d-%02d-%02d\",&nbsp;explode('-',&nbsp;'1988-8-1'));&nbsp;\/\/&nbsp;1988-08-01?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    sprintf() - Return a formatted string\n    vprintf() - Output a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base64-decode.php","title":"base64_decode","description":"\n \n  base64_decode\n  (PHP 4, PHP 5)base64_decode &mdash; Decodes data encoded with MIME base64\n\n \n \n \n  Description\n  \n   string base64_decode\n    ( string $data\n   [, bool $strict = false\n  ] )\n\n  \n   Decodes a base64 encoded data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The encoded data.\n      \n     \n\n    \n\n    \n\n     strict\n     \n\n      \n       Returns FALSE if input contains character from outside the base64\n       alphabet.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the original data or FALSE on failure. The returned data may be\n   binary.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       strict added\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 base64_decode() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';echo&nbsp;base64_decode($str);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThis is an encoded string\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    base64_encode() - Encodes data with MIME base64\n    &raquo;&nbsp;RFC 2045 section 6.8\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.base64-encode.php","title":"base64_encode","description":"\n \n  base64_encode\n  (PHP 4, PHP 5)base64_encode &mdash; Encodes data with MIME base64\n\n \n \n \n  Description\n  \n   string base64_encode\n    ( string $data\n   )\n\n  \n   Encodes the given data with base64.\n  \n  \n   This encoding is designed to make binary data survive transport through\n   transport layers that are not 8-bit clean, such as mail bodies.\n  \n  \n   Base64-encoded data takes about 33% more space than the original\n   data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to encode.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The encoded data, as a string or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 base64_encode() example\n    \n\n&lt;?php$str&nbsp;=&nbsp;'This&nbsp;is&nbsp;an&nbsp;encoded&nbsp;string';echo&nbsp;base64_encode($str);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nVGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    base64_decode() - Decodes data encoded with MIME base64\n    chunk_split() - Split a string into smaller chunks\n    convert_uuencode() - Uuencode a string\n    &raquo;&nbsp;RFC 2045 section 6.8\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-meta-tags.php","title":"get_meta_tags","description":"\n \n  get_meta_tags\n  (PHP 4, PHP 5)get_meta_tags &mdash; Extracts all meta tag content attributes from a file and returns an array\n\n \n\n \n  Description\n  \n   array get_meta_tags\n    ( string $filename\n   [, bool $use_include_path = false\n  ] )\n\n  \n   Opens filename and parses it line by line for\n   &lt;meta&gt; tags in the file. The parsing stops at\n   &lt;\/head&gt;.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the HTML file, as a string. This can be a local file or an\n       URL.\n      \n      \n       \n        Example #1 What get_meta_tags() parses\n        \n&lt;meta name=&quot;author&quot; content=&quot;name&quot;&gt;\n&lt;meta name=&quot;keywords&quot; content=&quot;php documentation&quot;&gt;\n&lt;meta name=&quot;DESCRIPTION&quot; content=&quot;a php manual&quot;&gt;\n&lt;meta name=&quot;geo.position&quot; content=&quot;49.33;-86.59&quot;&gt;\n&lt;\/head&gt; &lt;!-- parsing stops here --&gt;\n\n        \n\n       \n       (pay attention to line endings - PHP uses a native function to\n       parse the input, so a Mac file won&#039;t work on Unix).\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       Setting use_include_path to TRUE will result\n       in PHP trying to open the file along the standard include path as per\n       the include_path directive.\n       This is used for local files, not URLs.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array with all the parsed meta tags.\n  \n  \n   The value of the name property becomes the key, the value of the content\n   property becomes the value of the returned array, so you can easily use\n   standard array functions to traverse it or access single values. \n   Special characters in the value of the name property are substituted with\n   &#039;_&#039;, the rest is converted to lower case.  If two meta tags have the same\n   name, only the last one is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.5\n       \n        Support for unquoted HTML attributes was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #2 What get_meta_tags() returns\n    \n\n&lt;?php\/\/&nbsp;Assuming&nbsp;the&nbsp;above&nbsp;tags&nbsp;are&nbsp;at&nbsp;www.example.com$tags&nbsp;=&nbsp;get_meta_tags('http:\/\/www.example.com\/');\/\/&nbsp;Notice&nbsp;how&nbsp;the&nbsp;keys&nbsp;are&nbsp;all&nbsp;lowercase&nbsp;now,&nbsp;and\/\/&nbsp;how&nbsp;.&nbsp;was&nbsp;replaced&nbsp;by&nbsp;_&nbsp;in&nbsp;the&nbsp;key.echo&nbsp;$tags['author'];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;nameecho&nbsp;$tags['keywords'];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;php&nbsp;documentationecho&nbsp;$tags['description'];&nbsp;&nbsp;\/\/&nbsp;a&nbsp;php&nbsp;manualecho&nbsp;$tags['geo_position'];&nbsp;\/\/&nbsp;49.33;-86.59?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Only meta tags with name attributes will be parsed.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    htmlentities() - Convert all applicable characters to HTML entities\n    urlencode() - URL-encodes string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wordwrap.php","title":"wordwrap","description":"\n \n  wordwrap\n  (PHP 4 &gt;= 4.0.2, PHP 5)wordwrap &mdash; Wraps a string to a given number of characters\n\n \n \n \n  Description\n  \n   string wordwrap\n    ( string $str\n   [, int $width = 75\n   [, string $break = &quot;\\n&quot;\n   [, bool $cut = false\n  ]]] )\n\n  \n   Wraps a string to a given number of characters using a string break\n   character.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     width\n     \n\n      \n       The column width.\n      \n     \n\n    \n\n    \n\n     break\n     \n\n      \n       The line is broken using the optional\n       break parameter.\n      \n     \n\n    \n\n    \n\n     cut\n     \n\n      \n       If the cut is set to TRUE, the string is\n       always wrapped at or before the specified width.  So if you have\n       a word that is larger than the given width, it is broken apart.\n       (See second example).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the given string wrapped at the specified column.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.3\n       \n        The optional cut parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 wordwrap() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;\"The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.\";$newtext&nbsp;=&nbsp;wordwrap($text,&nbsp;20,&nbsp;\"&lt;br&nbsp;\/&gt;\\n\");echo&nbsp;$newtext;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThe quick brown fox&lt;br \/&gt;\njumped over the lazy&lt;br \/&gt;\ndog.\n\n    \n   \n   \n    Example #2 wordwrap() example\n    \n\n&lt;?php$text&nbsp;=&nbsp;\"A&nbsp;very&nbsp;long&nbsp;woooooooooooord.\";$newtext&nbsp;=&nbsp;wordwrap($text,&nbsp;8,&nbsp;\"\\n\",&nbsp;true);echo&nbsp;\"$newtext\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nA very\nlong\nwooooooo\nooooord.\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    nl2br() - Inserts HTML line breaks before all newlines in a string\n    chunk_split() - Split a string into smaller chunks\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-headers.php","title":"get_headers","description":"\n \n  get_headers\n  (PHP 5)get_headers &mdash; Fetches all the headers sent by the server in response to a HTTP request\n\n \n\n \n  Description\n  \n   array get_headers\n    ( string $url\n   [, int $format = 0\n  ] )\n\n  \n   get_headers() returns an array with the headers sent\n   by the server in response to a HTTP request.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       The target URL.\n      \n     \n\n    \n\n    \n\n     format\n     \n\n      \n       If the optional format parameter is set to non-zero,\n       get_headers() parses the response and sets the \n       array&#039;s keys.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an indexed or associative array with the headers, or FALSE on\n   failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.3\n       \n        This function now uses the default stream context, which can be\n        set\/changed with the stream_context_set_default()\n        function.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n Examples\n  \n   \n    Example #1 get_headers() example\n    \n\n&lt;?php$url&nbsp;=&nbsp;'http:\/\/www.example.com';print_r(get_headers($url));print_r(get_headers($url,&nbsp;1));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; HTTP\/1.1 200 OK\n    [1] =&gt; Date: Sat, 29 May 2004 12:28:13 GMT\n    [2] =&gt; Server: Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)\n    [3] =&gt; Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT\n    [4] =&gt; ETag: &quot;3f80f-1b6-3e1cb03b&quot;\n    [5] =&gt; Accept-Ranges: bytes\n    [6] =&gt; Content-Length: 438\n    [7] =&gt; Connection: close\n    [8] =&gt; Content-Type: text\/html\n)\n\nArray\n(\n    [0] =&gt; HTTP\/1.1 200 OK\n    [Date] =&gt; Sat, 29 May 2004 12:28:14 GMT\n    [Server] =&gt; Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)\n    [Last-Modified] =&gt; Wed, 08 Jan 2003 23:11:55 GMT\n    [ETag] =&gt; &quot;3f80f-1b6-3e1cb03b&quot;\n    [Accept-Ranges] =&gt; bytes\n    [Content-Length] =&gt; 438\n    [Connection] =&gt; close\n    [Content-Type] =&gt; text\/html\n)\n\n    \n   \n   \n    Example #2 get_headers() using HEAD example\n    \n\n&lt;?php\/\/&nbsp;By&nbsp;default&nbsp;get_headers&nbsp;uses&nbsp;a&nbsp;GET&nbsp;request&nbsp;to&nbsp;fetch&nbsp;the&nbsp;headers.&nbsp;If&nbsp;you\/\/&nbsp;want&nbsp;to&nbsp;send&nbsp;a&nbsp;HEAD&nbsp;request&nbsp;instead,&nbsp;you&nbsp;can&nbsp;do&nbsp;so&nbsp;using&nbsp;a&nbsp;stream&nbsp;context:stream_context_set_default(&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'http'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'method'&nbsp;=&gt;&nbsp;'HEAD'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;));$headers&nbsp;=&nbsp;get_headers('http:\/\/example.com');?&gt;\n\n\n    \n\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-build-query.php","title":"http_build_query","description":"\n \n  http_build_query\n  (PHP 5)http_build_query &mdash; Generate URL-encoded query string\n\n \n\n \n  Description\n  \n   string http_build_query\n    ( mixed $query_data\n   [, string $numeric_prefix\n   [, string $arg_separator\n   [, int $enc_type = PHP_QUERY_RFC1738\n  ]]] )\n\n  \n   Generates a URL-encoded query string from the associative (or indexed)\n   array provided.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     query_data\n     \n\n      \n       May be an array or object containing properties.\n      \n      \n       If query_data is an array, it may be a simple\n       one-dimensional structure, or an array of arrays (which in\n       turn may contain other arrays).\n      \n      \n       If query_data is an object, then only public\n       properties will be incorporated into the result.\n      \n     \n\n    \n\n    \n\n     numeric_prefix\n     \n\n      \n       If numeric indices are used in the base array and this parameter is\n       provided, it will be prepended to the numeric index for elements in\n       the base array only.\n      \n      \n       This is meant to allow for legal variable names when the data is\n       decoded by PHP or another CGI application later on.\n      \n     \n\n    \n\n    \n\n     arg_separator\n     \n\n      \n       arg_separator.output\n       is used to separate arguments, unless this parameter is specified,\n       and is then used.\n      \n     \n\n    \n\n    \n\n     enc_type\n     \n\n      \n       By default, PHP_QUERY_RFC1738.\n      \n      \n       If enc_type is\n       PHP_QUERY_RFC1738, then encoding is performed per\n       &raquo;&nbsp;RFC 1738 and the\n       application\/x-www-form-urlencoded media type, which\n       implies that spaces are encoded as plus (+) signs.\n      \n      \n       If enc_type is\n       PHP_QUERY_RFC3986, then encoding is performed\n       according to &raquo;&nbsp;RFC 3986, and\n       spaces will be percent encoded (%20).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a URL-encoded string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The enc_type parameter was added.\n       \n      \n\n      \n       5.1.3\n       \n        Square brackets are escaped.\n       \n      \n\n      \n       5.1.2\n       \n        The arg_separator parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   Example #1 Simple usage of http_build_query()\n   \n\n&lt;?php$data&nbsp;=&nbsp;array('foo'=&gt;'bar',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'baz'=&gt;'boom',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'cow'=&gt;'milk',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'php'=&gt;'hypertext&nbsp;processor');echo&nbsp;http_build_query($data)&nbsp;.&nbsp;\"\\n\";echo&nbsp;http_build_query($data,&nbsp;'',&nbsp;'&amp;amp;');?&gt;\n\n\n   \n\n   The above example will output:\n   \n\nfoo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor\nfoo=bar&amp;amp;baz=boom&amp;amp;cow=milk&amp;amp;php=hypertext+processor\n\n   \n  \n\n  \n   Example #2 http_build_query() with numerically index elements.\n   \n\n&lt;?php$data&nbsp;=&nbsp;array('foo',&nbsp;'bar',&nbsp;'baz',&nbsp;'boom',&nbsp;'cow'&nbsp;=&gt;&nbsp;'milk',&nbsp;'php'&nbsp;=&gt;'hypertext&nbsp;processor');echo&nbsp;http_build_query($data)&nbsp;.&nbsp;\"\\n\";echo&nbsp;http_build_query($data,&nbsp;'myvar_');?&gt;\n\n\n   \n\n   The above example will output:\n   \n\n0=foo&amp;1=bar&amp;2=baz&amp;3=boom&amp;cow=milk&amp;php=hypertext+processor\nmyvar_0=foo&amp;myvar_1=bar&amp;myvar_2=baz&amp;myvar_3=boom&amp;cow=milk&amp;php=hypertext+processor\n\n   \n  \n  \n   Example #3 http_build_query() with complex arrays\n   \n\n&lt;?php$data&nbsp;=&nbsp;array('user'=&gt;array('name'=&gt;'Bob&nbsp;Smith',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'age'=&gt;47,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sex'=&gt;'M',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'dob'=&gt;'5\/12\/1956'),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'pastimes'=&gt;array('golf',&nbsp;'opera',&nbsp;'poker',&nbsp;'rap'),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'children'=&gt;array('bobby'=&gt;array('age'=&gt;12,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sex'=&gt;'M'),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sally'=&gt;array('age'=&gt;8,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'sex'=&gt;'F')),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'CEO');echo&nbsp;http_build_query($data,&nbsp;'flags_');?&gt;\n\n\n   \n\n   \n    this will output : (word wrapped for readability)\n   \n   \n\nuser%5Bname%5D=Bob+Smith&amp;user%5Bage%5D=47&amp;user%5Bsex%5D=M&amp;\nuser%5Bdob%5D=5%2F12%2F1956&amp;pastimes%5B0%5D=golf&amp;pastimes%5B1%5D=opera&amp;\npastimes%5B2%5D=poker&amp;pastimes%5B3%5D=rap&amp;children%5Bbobby%5D%5Bage%5D=12&amp;\nchildren%5Bbobby%5D%5Bsex%5D=M&amp;children%5Bsally%5D%5Bage%5D=8&amp;\nchildren%5Bsally%5D%5Bsex%5D=F&amp;flags_0=CEO\n\n   \n   \n    Note: \n     \n      Only the numerically indexed element in the base array &quot;CEO&quot; received a\n      prefix.  The other numeric indices, found under pastimes, do not\n      require a string prefix to be legal variable names.\n     \n    \n   \n  \n\n  \n   Example #4 Using http_build_query() with an object\n   \n\n&lt;?phpclass&nbsp;parentClass&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;$pub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'publicParent';&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$prot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'protectedParent';&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;$priv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;'privateParent';&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;$pub_bar&nbsp;&nbsp;=&nbsp;Null;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$prot_bar&nbsp;=&nbsp;Null;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;$priv_bar&nbsp;=&nbsp;Null;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__construct(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;pub_bar&nbsp;&nbsp;=&nbsp;new&nbsp;childClass();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;prot_bar&nbsp;=&nbsp;new&nbsp;childClass();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;priv_bar&nbsp;=&nbsp;new&nbsp;childClass();&nbsp;&nbsp;&nbsp;&nbsp;}}class&nbsp;childClass&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;&nbsp;&nbsp;&nbsp;$pub&nbsp;&nbsp;=&nbsp;'publicChild';&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$prot&nbsp;=&nbsp;'protectedChild';&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;&nbsp;$priv&nbsp;=&nbsp;'privateChild';}$parent&nbsp;=&nbsp;new&nbsp;parentClass();echo&nbsp;http_build_query($parent);?&gt;\n\n\n   \n\n   The above example will output:\n   \n\npub=publicParent&amp;pub_bar%5Bpub%5D=publicChild\n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    parse_str() - Parses the string into variables\n    parse_url() - Parse a URL and return its components\n    urlencode() - URL-encodes string\n    array_walk() - Apply a user function to every member of an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rawurldecode.php","title":"rawurldecode","description":"\n \n  rawurldecode\n  (PHP 4, PHP 5)rawurldecode &mdash; Decode URL-encoded strings\n\n \n\n \n  Description\n  \n   string rawurldecode\n    ( string $str\n   )\n\n  \n   Returns a string in which the sequences with percent\n   () signs followed by two hex digits have been replaced\n   with literal characters.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The URL to be decoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the decoded URL, as a string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 rawurldecode() example\n    \n\n&lt;?phpecho&nbsp;rawurldecode('foo%20bar%40baz');&nbsp;\/\/&nbsp;foo&nbsp;bar@baz?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    rawurldecode() does not decode plus symbols (&#039;+&#039;)\n    into spaces. urldecode() does.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    rawurlencode() - URL-encode according to RFC 3986\n    urldecode() - Decodes URL-encoded string\n    urlencode() - URL-encodes string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.urldecode.php","title":"urldecode","description":"\n \n  urldecode\n  (PHP 4, PHP 5)urldecode &mdash; Decodes URL-encoded string\n\n \n\n \n  Description\n  \n   string urldecode\n    ( string $str\n   )\n\n  \n   Decodes any ##\n   encoding in the given string. Plus symbols (&#039;+&#039;) are\n   decoded to a space character.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be decoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the decoded string.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 urldecode() example\n    \n\n&lt;?php$a&nbsp;=&nbsp;explode('&amp;',&nbsp;$QUERY_STRING);$i&nbsp;=&nbsp;0;while&nbsp;($i&nbsp;&lt;&nbsp;count($a))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$b&nbsp;=&nbsp;split('=',&nbsp;$a[$i]);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Value&nbsp;for&nbsp;parameter&nbsp;',&nbsp;htmlspecialchars(urldecode($b[0])),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'&nbsp;is&nbsp;',&nbsp;htmlspecialchars(urldecode($b[1])),&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$i++;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    The superglobals $_GET and $_REQUEST\n    are already decoded.  Using urldecode() on an element\n    in $_GET or $_REQUEST could have\n    unexpected and dangerous results.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    urlencode() - URL-encodes string\n    rawurlencode() - URL-encode according to RFC 3986\n    rawurldecode() - Decode URL-encoded strings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.rawurlencode.php","title":"rawurlencode","description":"\n \n  rawurlencode\n  (PHP 4, PHP 5)rawurlencode &mdash; URL-encode according to RFC 3986\n\n \n\n \n  Description\n  \n   string rawurlencode\n    ( string $str\n   )\n\n  \n   Encodes the given string according to &raquo;&nbsp;RFC 3986.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The URL to be encoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string in which all non-alphanumeric characters except\n   -_.~ have been replaced with a percent\n   () sign followed by two hex digits.  This is the\n   encoding described in &raquo;&nbsp;RFC 3986 for\n   protecting literal characters from being interpreted as special URL\n   delimiters, and for protecting URLs from being mangled by transmission\n   media with character conversions (like some email systems).\n   Note: \n    \n     Prior to PHP 5.3.0, rawurlencode encoded tildes (~) as per\n     &raquo;&nbsp;RFC 1738.\n    \n   \n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.4\n       \n        Tilde characters are no longer encoded when\n        rawurlencode() is used with EBCDIC strings.\n       \n      \n\n      \n       5.3.0\n       \n        Now conforms to &raquo;&nbsp;RFC 3986.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 including a password in an FTP URL\n    \n\n&lt;?phpecho&nbsp;'&lt;a&nbsp;href=\"ftp:\/\/user:',&nbsp;rawurlencode('foo&nbsp;@+%\/'),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'@ftp.example.com\/x.txt\"&gt;';?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;a href=&quot;ftp:\/\/user:foo%20%40%2B%25%2F@ftp.example.com\/x.txt&quot;&gt;\n\n    \n   \n  \n  \n   Or, if you pass information in a PATH_INFO component of the URL:\n  \n  \n   \n    Example #2 rawurlencode() example 2\n    \n\n&lt;?phpecho&nbsp;'&lt;a&nbsp;href=\"http:\/\/example.com\/department_list_script\/',&nbsp;&nbsp;&nbsp;&nbsp;rawurlencode('sales&nbsp;and&nbsp;marketing\/Miami'),&nbsp;'\"&gt;';?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&lt;a href=&quot;http:\/\/example.com\/department_list_script\/sales%20and%20marketing%2FMiami&quot;&gt;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    rawurldecode() - Decode URL-encoded strings\n    urldecode() - Decodes URL-encoded string\n    urlencode() - URL-encodes string\n    &raquo;&nbsp;RFC 3986\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-fcache-fileinfo.php","title":"wincache_fcache_fileinfo","description":"\n \n  wincache_fcache_fileinfo\n  (PECL wincache &gt;= 1.0.0)wincache_fcache_fileinfo &mdash; \n   Retrieves information about files cached in the file cache\n  \n\n \n \n  Description\n  \n   array wincache_fcache_fileinfo\n    ([ bool $summaryonly = false\n  ] )\n\n  \n   Retrieves information about file cache content and its usage.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     summaryonly\n     \n\n      \n       Controls whether the returned array will contain information about individual cache entries \n       along with the file cache summary.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Array of meta data about file cache  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      total_cache_uptime - total time in seconds that the file cache has been active\n     \n    \n    \n     \n      total_file_count - total number of files that are currently in the file cache\n     \n    \n    \n     \n      total_hit_count - number of times the files have been served from the file cache\n     \n    \n    \n     \n      total_miss_count - number of times the files have not been found in the file cache\n     \n    \n    \n     \n      file_entries - an array that contains the information about all the cached files:\n      \n       \n        \n         file_name - absolute file name of the cached file\n        \n       \n       \n        \n         add_time - time in seconds since the file has been added to the file cache\n        \n       \n       \n        \n         use_time - time in seconds since the file has been accessed in the file cache\n        \n       \n       \n        \n         last_check - time in seconds since the file has been checked for modifications\n        \n       \n       \n        \n         hit_count - number of times the file has been served from the cache\n        \n       \n       \n        \n         file_size - size of the cached file in bytes\n        \n       \n      \n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 A wincache_fcache_fileinfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_fcache_fileinfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(   [total_cache_uptime] =&gt; 3234\n    [total_file_count] =&gt; 5\n    [total_hit_count] =&gt; 0\n    [total_miss_count] =&gt; 1\n    [file_entries] =&gt; Array\n        (\n            [1] =&gt; Array\n                (\n                    [file_name] =&gt; c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] =&gt; 1\n                    [use_time] =&gt; 0\n                    [last_check] =&gt; 1\n                    [hit_count] =&gt; 1\n                    [file_size] =&gt; 2435\n                )\n            [2] =&gt; Array (...iterates for each cached file)\n        )\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-fcache-meminfo.php","title":"wincache_fcache_meminfo","description":"\n \n  wincache_fcache_meminfo\n  (PECL wincache &gt;= 1.0.0)wincache_fcache_meminfo &mdash; \n   Retrieves information about file cache memory usage\n  \n\n \n \n  Description\n  \n   array wincache_fcache_meminfo\n    ( void\n   )\n\n  \n   Retrieves information about memory usage by file cache.\n  \n \n\n \n  Return Values\n  \n   Array of meta data about file cache memory usage  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      memory_total - amount of memory in bytes allocated for the file cache\n     \n    \n    \n     \n      memory_free - amount of free memory in bytes available for the file cache\n     \n    \n    \n     \n      num_used_blks - number of memory blocks used by the file cache\n     \n    \n    \n     \n      num_free_blks - number of free memory blocks available for the file cache\n     \n    \n    \n     \n      memory_overhead - amount of memory in bytes used for the file cache internal structures\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A wincache_fcache_meminfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_fcache_meminfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [memory_total] =&gt; 134217728\n    [memory_free] =&gt; 131339120\n    [num_used_blks] =&gt; 361\n    [num_free_blks] =&gt; 3\n    [memory_overhead] =&gt; 5856\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.urlencode.php","title":"urlencode","description":"\n \n  urlencode\n  (PHP 4, PHP 5)urlencode &mdash; URL-encodes string\n\n \n\n \n  Description\n  \n   string urlencode\n    ( string $str\n   )\n\n  \n   This function is convenient when encoding a string to be used in a query\n   part of a URL, as a convenient way to pass variables to the next page.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The string to be encoded.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string in which all non-alphanumeric characters except\n   -_. have been replaced with a percent\n   () sign followed by two hex digits and spaces encoded\n   as plus (+) signs.  It is encoded the same way that the\n   posted data from a WWW form is encoded, that is the same way as in\n   application\/x-www-form-urlencoded media type. This\n   differs from the &raquo;&nbsp;RFC 3986 encoding (see\n   rawurlencode()) in that for historical reasons, spaces\n   are encoded as plus (+) signs.\n  \n \n\n\n \n  Examples \n    \n   \n    Example #1 urlencode() example\n    \n\n&lt;?phpecho&nbsp;'&lt;a&nbsp;href=\"mycgi?foo=',&nbsp;urlencode($userinput),&nbsp;'\"&gt;';?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 urlencode() and htmlentities() example\n    \n\n&lt;?php$query_string&nbsp;=&nbsp;'foo='&nbsp;.&nbsp;urlencode($foo)&nbsp;.&nbsp;'&amp;bar='&nbsp;.&nbsp;urlencode($bar);echo&nbsp;'&lt;a&nbsp;href=\"mycgi?'&nbsp;.&nbsp;htmlentities($query_string)&nbsp;.&nbsp;'\"&gt;';?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Be careful about variables that may match HTML entities. Things like\n    &amp;amp, &amp;copy and &amp;pound are parsed by the browser and the\n    actual entity is used instead of the desired variable name.  This is an\n    obvious hassle that the W3C has been telling people about for years.\n    The reference is here: &raquo;&nbsp;http:\/\/www.w3.org\/TR\/html4\/appendix\/notes.html#h-B.2.2.\n   \n   \n    PHP supports changing the argument separator to the W3C-suggested\n    semi-colon through the arg_separator .ini directive.  Unfortunately most\n    user agents do not send form data in this semi-colon separated format.\n    A more portable way around this is to use &amp;amp; instead of &amp; as\n    the separator.  You don&#039;t need to change PHP&#039;s arg_separator for this.\n    Leave it as &amp;, but simply encode your URLs using\n    htmlentities() or \n    htmlspecialchars().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    urldecode() - Decodes URL-encoded string\n    htmlentities() - Convert all applicable characters to HTML entities\n    rawurlencode() - URL-encode according to RFC 3986\n    rawurldecode() - Decode URL-encoded strings\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-lock.php","title":"wincache_lock","description":"\n \n  wincache_lock\n  (PECL wincache &gt;= 1.1.0)wincache_lock &mdash; \n   Acquires an exclusive lock on a given key\n  \n\n \n \n  Description\n  \n   bool wincache_lock\n    ( string $key\n   [, bool $isglobal = false\n  ] )\n\n  \n   Obtains an exclusive lock on a given key. The execution of the current script will be blocked until the \n   lock can be obtained. Once the lock is obtained, the other scripts that try to request the lock by using the same \n   key will be blocked, until the current script releases the lock by using wincache_unlock().\n  \n  Warning\n   \n    Using of the wincache_lock() and wincache_unlock() can cause deadlocks when \n    executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are \n    absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to\n    use these functions.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Name of the key in the cache to get the lock on.\n      \n     \n\n    \n\n    \n\n     isglobal\n     \n\n      \n       Controls whether the scope of the lock is system-wide or local. Local locks are scoped to the application pool \n       in IIS FastCGI case or to all php processes that have the same parent process identifier.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_lock()\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen(\"\/tmp\/lock.txt\",&nbsp;\"r+\");if&nbsp;(wincache_lock(\u201clock_txt_lock\u201d))&nbsp;{&nbsp;\/\/&nbsp;do&nbsp;an&nbsp;exclusive&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;ftruncate($fp,&nbsp;0);&nbsp;\/\/&nbsp;truncate&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"Write&nbsp;something&nbsp;here\\n\");&nbsp;&nbsp;&nbsp;&nbsp;wincache_unlock(\u201clock_txt_lock\u201d);&nbsp;\/\/&nbsp;release&nbsp;the&nbsp;lock}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;get&nbsp;the&nbsp;lock!\";}fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_unlock() - Releases an exclusive lock on a given key\n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ocache-fileinfo.php","title":"wincache_ocache_fileinfo","description":"\n \n  wincache_ocache_fileinfo\n  (PECL wincache &gt;= 1.0.0)wincache_ocache_fileinfo &mdash; \n   Retrieves information about files cached in the opcode cache\n  \n\n \n \n  Description\n  \n   array wincache_ocache_fileinfo\n    ([ bool $summaryonly = false\n  ] )\n\n  \n   Retrieves information about opcode cache content and its usage.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     summaryonly\n     \n\n      \n       Controls whether the returned array will contain information about individual cache entries \n       along with the opcode cache summary.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Array of meta data about opcode cache  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      total_cache_uptime - total time in seconds that the opcode cache has been active\n     \n    \n    \n     \n      total_file_count - total number of files that are currently in the opcode cache\n     \n    \n    \n     \n      total_hit_count - number of times the compiled opcode have been served from the cache\n     \n    \n    \n     \n      total_miss_count - number of times the compiled opcode have not been found in the cache\n     \n    \n    \n     \n      is_local_cache - true is the cache metadata is for a local cache instance, \n       false if the metadata is for the global cache\n     \n    \n    \n     \n      file_entries - an array that contains the information about all the cached files:\n      \n       \n        \n         file_name - absolute file name of the cached file\n        \n       \n       \n        \n         add_time - time in seconds since the file has been added to the opcode cache\n        \n       \n       \n        \n         use_time - time in seconds since the file has been accessed in the opcode cache\n        \n       \n       \n        \n         last_check - time in seconds since the file has been checked for modifications\n        \n       \n       \n        \n         hit_count - number of times the file has been served from the cache\n        \n       \n       \n        \n         function_count - number of functions in the cached file\n        \n       \n       \n        \n         class_count - number of classes in the cached file\n        \n       \n      \n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 A wincache_ocache_fileinfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_ocache_fileinfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [total_cache_uptime] =&gt; 17357\n    [total_file_count] =&gt; 121\n    [total_hit_count] =&gt; 36562\n    [total_miss_count] =&gt; 201\n    [file_entries] =&gt; Array\n        (\n            [1] =&gt; Array\n                (\n                    [file_name] =&gt; c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] =&gt; 17356\n                    [use_time] =&gt; 7\n                    [last_check] =&gt; 10\n                    [hit_count] =&gt; 454\n                    [function_count] =&gt; 0\n                    [class_count] =&gt; 1\n                )\n            [2] =&gt; Array (...iterates for each cached file)\n        )\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.parse-url.php","title":"parse_url","description":"\n \n  parse_url\n  (PHP 4, PHP 5)parse_url &mdash; Parse a URL and return its components\n\n \n\n \n  Description\n  \n   mixed parse_url\n    ( string $url\n   [, int $component = -1\n  ] )\n\n  \n   This function parses a URL and returns an associative array containing any\n   of the various components of the URL that are present.\n  \n  \n   This function is not meant to validate\n   the given URL, it only breaks it up into the above listed parts. Partial\n   URLs are also accepted, parse_url() tries its best to\n   parse them correctly.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       The URL to parse. Invalid characters are replaced by\n       _.\n      \n     \n\n    \n\n   \n\n   \n\n    \n\n     component\n     \n\n      \n       Specify one of PHP_URL_SCHEME,\n       PHP_URL_HOST, PHP_URL_PORT,\n       PHP_URL_USER, PHP_URL_PASS,\n       PHP_URL_PATH, PHP_URL_QUERY\n       or PHP_URL_FRAGMENT to retrieve just a specific\n       URL component as a string (except when\n       PHP_URL_PORT is given, in which case the return\n       value will be an integer).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On seriously malformed URLs, parse_url() may return\n   FALSE.\n  \n  \n   If the component parameter is omitted, an\n   associative array is returned. At least one element will be\n   present within the array. Potential keys within this array are:\n   \n    \n     \n      scheme - e.g. http\n     \n    \n    \n     \n      host \n     \n    \n    \n     \n      port\n     \n    \n    \n     \n      user\n     \n    \n    \n     \n      pass\n     \n    \n    \n     \n      path\n     \n    \n    \n     \n      query - after the question mark ?\n     \n    \n    \n     \n      fragment - after the hashmark #\n     \n    \n   \n  \n  \n   If the component parameter is specified,\n   parse_url() returns a string (or an\n   integer, in the case of PHP_URL_PORT)\n   instead of an array. If the requested component doesn&#039;t exist\n   within the given URL, NULL will be returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.3\n       \n        Removed the E_WARNING that was emitted when URL\n        parsing failed.\n       \n      \n\n      \n       5.1.2\n       Added the component parameter.\n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A parse_url() example\n    \n\n&lt;?php$url&nbsp;=&nbsp;'http:\/\/username:password@hostname\/path?arg=value#anchor';print_r(parse_url($url));echo&nbsp;parse_url($url,&nbsp;PHP_URL_PATH);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [scheme] =&gt; http\n    [host] =&gt; hostname\n    [user] =&gt; username\n    [pass] =&gt; password\n    [path] =&gt; \/path\n    [query] =&gt; arg=value\n    [fragment] =&gt; anchor\n)\n\/path\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function doesn&#039;t work with relative URLs.\n   \n  \n  Note: \n   \n    This function is intended specifically for the purpose of parsing URLs\n    and not URIs. However, to comply with PHP&#039;s backwards compatibility\n    requirements it makes an exception for the file:\/\/ scheme where triple\n    slashes (file:\/\/\/...) are allowed. For any other scheme this is invalid.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pathinfo() - Returns information about a file path\n    parse_str() - Parses the string into variables\n    http_build_query() - Generate URL-encoded query string\n    http_build_url() - Build a URL\n    dirname() - Returns parent directory's path\n    basename() - Returns trailing name component of path\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ocache-meminfo.php","title":"wincache_ocache_meminfo","description":"\n \n  wincache_ocache_meminfo\n  (PECL wincache &gt;= 1.0.0)wincache_ocache_meminfo &mdash; \n   Retrieves information about opcode cache memory usage\n  \n\n \n \n  Description\n  \n   array wincache_ocache_meminfo\n    ( void\n   )\n\n  \n   Retrieves information about memory usage by opcode cache.\n  \n \n\n \n  Return Values\n  \n   Array of meta data about opcode cache memory usage  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      memory_total - amount of memory in bytes allocated for the opcode cache\n     \n    \n    \n     \n      memory_free - amount of free memory in bytes available for the opcode cache\n     \n    \n    \n     \n      num_used_blks - number of memory blocks used by the opcode cache\n     \n    \n    \n     \n      num_free_blks - number of free memory blocks available for the opcode cache\n     \n    \n    \n     \n      memory_overhead - amount of memory in bytes used for the opcode cache internal structures\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A wincache_ocache_meminfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_ocache_meminfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [memory_total] =&gt; 134217728\n    [memory_free] =&gt; 112106972\n    [num_used_blks] =&gt; 15469\n    [num_free_blks] =&gt; 4\n    [memory_overhead] =&gt; 247600\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-rplist-fileinfo.php","title":"wincache_rplist_fileinfo","description":"\n \n  wincache_rplist_fileinfo\n  (PECL wincache &gt;= 1.0.0)wincache_rplist_fileinfo &mdash; \n   Retrieves information about resolve file path cache\n  \n\n \n \n  Description\n  \n   array wincache_rplist_fileinfo\n    ([ bool $summaryonly = false\n  ] )\n\n  \n   Retrieves information about cached mappings between relative file paths \n   and corresponding absolute file paths.\n  \n \n\n \n  Return Values\n  \n   Array of meta data about the resolve file path cache  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      total_file_count - total number of file path \n       mappings stored in the cache\n     \n    \n    \n     \n      rplist_entries - an array that contains the information about all \n       the cached file paths:\n      \n       \n        \n         resolve_path - path to a file\n        \n       \n       \n        \n         subkey_data - corresponding absolute path to a file\n        \n       \n      \n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 A wincache_rplist_fileinfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_rplist_fileinfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [total_file_count] =&gt; 5\n    [rplist_entries] =&gt; Array\n        (\n            [1] =&gt; Array\n                (\n                    [resolve_path] =&gt; checkcache.php\n                    [subkey_data] =&gt; c:\\inetpub\\wwwroot|c:\\inetpub\\wwwroot\\checkcache.php\n                )\n\n            [2] =&gt; Array (...iterates for each cached file)\n        )\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-refresh-if-changed.php","title":"wincache_refresh_if_changed","description":"\n \n  wincache_refresh_if_changed\n  (PECL wincache &gt;= 1.0.0)wincache_refresh_if_changed &mdash; \n   Refreshes the cache entries for the cached files\n  \n\n \n \n  Description\n  \n   bool wincache_refresh_if_changed\n    ([ array $files\n  ] )\n\n  \n   Refreshes the cache entries for the files, whose names were passed in the input argument. \n   If no argument is specified then refreshes all the entries in the cache.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     files\n     \n\n      \n       An array of file names for files that need to be refreshed. \n       An absolute or relative file paths can be used.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   WinCache performs regular checks on the cached files to \n   ensure that if any file has changed then the corresponding entry in the cache is \n   updated. By default this check is performed every 30 seconds. If, for example, \n   a PHP script updates another PHP script where the application&#039;s \n   configuration settings are stored, then it may happen that after the \n   configuration settings have been saved to a file, the application is still using \n   old settings for some time until the cache is refreshed. In those cases it may be \n   preferrable to refresh the cache right after the file has been changed. The \n   following example shows how this can be done.\n   \n    Example #1 A wincache_refresh_if_changed() example\n    \n\n&lt;?php&nbsp;$filename&nbsp;=&nbsp;'C:\\inetpub\\wwwroot\\config.php';$handle&nbsp;=&nbsp;fopen($filename,&nbsp;'w+');if&nbsp;($handle&nbsp;===&nbsp;FALSE)&nbsp;die('Failed&nbsp;to&nbsp;open&nbsp;file&nbsp;'.$filename.'&nbsp;for&nbsp;writing');fwrite($handle,&nbsp;'&lt;?php&nbsp;$setting=something;&nbsp;?&gt;');fclose($handle);wincache_refresh_if_changed(array($filename));?&gt;\n\n\n    \n\n   \n  \n \n\n\n  \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n   \n  \n \n\n \n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-rplist-meminfo.php","title":"wincache_rplist_meminfo","description":"\n \n  wincache_rplist_meminfo\n  (PECL wincache &gt;= 1.0.0)wincache_rplist_meminfo &mdash; \n   Retrieves information about memory usage by the resolve file path cache\n  \n\n \n \n  Description\n  \n   array wincache_rplist_meminfo\n    ( void\n   )\n\n  \n   Retrieves information about memory usage by resolve file path cache.\n  \n \n\n \n  Return Values\n  \n   Array of meta data that describes memory usage by resolve file path cache.  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      memory_total - amount of memory in bytes allocated for the resolve file path cache\n     \n    \n    \n     \n      memory_free - amount of free memory in bytes available for the resolve file path cache\n     \n    \n    \n     \n      num_used_blks - number of memory blocks used by the resolve file path cache\n     \n    \n    \n     \n      num_free_blks - number of free memory blocks available for the resolve file path cache\n     \n    \n    \n     \n      memory_overhead - amount of memory in bytes used for the internal structures of resolve file path cache\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A wincache_rplist_meminfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_rplist_meminfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [memory_total] =&gt; 9437184\n    [memory_free] =&gt; 9416744\n    [num_used_blks] =&gt; 23\n    [num_free_blks] =&gt; 1\n    [memory_overhead] =&gt; 416\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-scache-meminfo.php","title":"wincache_scache_meminfo","description":"\n \n  wincache_scache_meminfo\n  (PECL wincache &gt;= 1.1.0)wincache_scache_meminfo &mdash; \n   Retrieves information about session cache memory usage\n  \n\n \n \n  Description\n  \n   array wincache_scache_meminfo\n    ( void\n   )\n\n  \n   Retrieves information about memory usage by session cache.\n  \n \n\n \n  Return Values\n  \n   Array of meta data about session cache memory usage  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      memory_total - amount of memory in bytes allocated for the session cache\n     \n    \n    \n     \n      memory_free - amount of free memory in bytes available for the session cache\n     \n    \n    \n     \n      num_used_blks - number of memory blocks used by the session cache\n     \n    \n    \n     \n      num_free_blks - number of free memory blocks available for the session cache\n     \n    \n    \n     \n      memory_overhead - amount of memory in bytes used for the session cache internal structures\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A wincache_scache_meminfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_scache_meminfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray \n( \n    [memory_total] =&gt; 5242880 \n    [memory_free] =&gt; 5215056 \n    [num_used_blks] =&gt; 6 \n    [num_free_blks] =&gt; 3 \n    [memory_overhead] =&gt; 176\n) \n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-scache-info.php","title":"wincache_scache_info","description":"\n \n  wincache_scache_info\n  (PECL wincache &gt;= 1.1.0)wincache_scache_info &mdash; \n   Retrieves information about files cached in the session cache\n  \n\n \n \n  Description\n  \n   array wincache_scache_info\n    ([ bool $summaryonly = false\n  ] )\n\n  \n   Retrieves information about session cache content and its usage.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     summaryonly\n     \n\n      \n       Controls whether the returned array will contain information about individual cache entries \n       along with the session cache summary.\n      \n     \n\n    \n\n   \n\n  \n \n\n  \n  Return Values\n  \n   Array of meta data about session cache  or FALSE on failure\n  \n    \n   The array returned by this function contains the following elements:\n   \n    \n     \n      total_cache_uptime - total time in seconds that the session cache has been active\n     \n    \n    \n     \n      total_item_count - total number of elements that are currently in the session cache\n     \n    \n    \n     \n      is_local_cache - true is the cache metadata is for a local cache instance, \n       false if the metadata is for the global cache\n     \n    \n    \n     \n      total_hit_count - number of times the data has been served from the cache\n     \n    \n    \n     \n      total_miss_count - number of times the data has not been found in the cache\n     \n    \n    \n     \n      scache_entries - an array that contains the information about all the cached items:\n      \n       \n        \n         key_name - name of the key which is used to store the data\n        \n       \n       \n        \n         value_type - type of value stored by the key\n        \n       \n       \n        \n         use_time - time in seconds since the file has been accessed in the opcode cache\n        \n       \n       \n        \n         last_check - time in seconds since the file has been checked for modifications\n        \n       \n       \n        \n         ttl_seconds - time remaining for the data to live in the cache, 0 meaning infinite\n        \n       \n       \n        \n         age_seconds - time elapsed from the time data has been added in the cache\n        \n       \n       \n        \n         hitcount - number of times data has been served from the cache\n        \n       \n      \n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 A wincache_scache_info() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_scache_info());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [total_cache_uptime] =&gt; 17357\n    [total_file_count] =&gt; 121\n    [total_hit_count] =&gt; 36562\n    [total_miss_count] =&gt; 201\n    [scache_entries] =&gt; Array\n        (\n            [1] =&gt; Array\n                (\n                    [file_name] =&gt; c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] =&gt; 17356\n                    [use_time] =&gt; 7\n                    [last_check] =&gt; 10\n                    [hit_count] =&gt; 454\n                    [function_count] =&gt; 0\n                    [class_count] =&gt; 1\n                )\n            [2] =&gt; Array (...iterates for each cached file)\n        )\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-cas.php","title":"wincache_ucache_cas","description":"\n \n  wincache_ucache_cas\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_cas &mdash; \n   Compares the variable with old value and assigns new value to it\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_cas\n    ( string $key\n   , int $old_value\n   , int $new_value\n   )\n\n  \n   Compares the variable associated with the key with old_value \n   and if it matches then assigns the new_value to it.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that is used to store the variable in the cache. \n       key is case sensitive.\n      \n     \n\n    \n\n    \n\n     old_value\n     \n\n      \n       Old value of the variable pointed by key in the user cache. \n       The value should be of type long, otherwise the function returns \n       FALSE.\n      \n     \n\n    \n\n    \n\n     new_value\n     \n\n      \n       New value which will get assigned to variable pointer by key if a \n       match is found. The value should be of type long, otherwise \n       the function returns FALSE.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_cas()\n    \n\n&lt;?phpwincache_ucache_set('counter',&nbsp;2922);var_dump(wincache_ucache_cas('counter',&nbsp;2922,&nbsp;1));var_dump(wincache_ucache_get('counter'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true) \nint(1)\n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_inc() - Increments the value associated with the key\n    wincache_ucache_dec() - Decrements the value associated with the key\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-add.php","title":"wincache_ucache_add","description":"\n \n  wincache_ucache_add\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_add &mdash; \n   Adds a variable in user cache only if variable does not already exist in the cache\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_add\n    ( string $key\n   , mixed $value\n   [, int $ttl = 0\n  ] )\n\n  \n   bool wincache_ucache_add\n    ( array $values\n   [, mixed $unused\n   [, int $ttl = 0\n  ]] )\n\n  \n   Adds a variable in user cache, only if this variable doesn&#039;t already exist in the cache. \n   The added variable remains in the user cache unless its time to live expires or it is \n   deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Store the variable using this key name. If a variable with same key is already present the function\n       will fail and return FALSE. key is case sensitive. To override the value even if \n       key is present use wincache_ucache_set() function instad. \n       key can also take array of name =&gt; value pairs where names will be used as keys. \n       This can be used to add multiple values in the cache in one operation, thus avoiding race condition.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       Value of a variable to store. Value supports all data types except resources, such as file handles.\n       This paramter is ignored if first argument is an array. A general guidance is to pass NULL \n       as value while using array as key. If value is an\n       object, or an array containing objects, then the objects will be serialized. See\n       __sleep() for details on serializing objects.\n      \n     \n\n    \n\n    \n\n     values\n     \n\n      \n       Associative array of keys and values.\n      \n     \n\n    \n\n    \n\n     ttl\n     \n\n      \n       Time for the variable to live in the cache in seconds. After the value specified in ttl has passed \n       the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means \n       the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete() \n       or wincache_ucache_clear() functions.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If key is string, the function returns TRUE on success and FALSE on failure.\n  \n  \n   If key is an array, the function returns:\n   \n    \n     \n      If all the name =&gt; value pairs in the array can be set, function returns an empty array;\n     \n    \n    \n     \n     If all the name =&gt; value pairs in the array cannot be set, function returns FALSE;\n     \n    \n    \n     \n      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.\n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 wincache_ucache_add() with key as a string\n    \n\n&lt;?php$bar&nbsp;=&nbsp;'BAR';var_dump(wincache_ucache_add('foo',&nbsp;$bar));var_dump(wincache_ucache_add('foo',&nbsp;$bar));var_dump(wincache_ucache_get('foo'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\nbool(false)\nstring(3) &quot;BAR&quot; \n\n        \n   \n  \n  \n   \n    Example #2 wincache_ucache_add() with key as an array\n    \n\n&lt;?php$colors_array&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;'5',&nbsp;'Blue'&nbsp;=&gt;&nbsp;'6',&nbsp;'yellow'&nbsp;=&gt;&nbsp;'7',&nbsp;'cyan'&nbsp;=&gt;&nbsp;'8');var_dump(wincache_ucache_add($colors_array));var_dump(wincache_ucache_add($colors_array));var_dump(wincache_ucache_get('Blue'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(0) { } \narray(4) { \n  [&quot;green&quot;]=&gt; int(-1) \n  [&quot;Blue&quot;]=&gt; int(-1) \n  [&quot;yellow&quot;]=&gt; int(-1) \n  [&quot;cyan&quot;]=&gt; int(-1) \n} \nstring(1) &quot;6&quot;\n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    __sleep()\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-clear.php","title":"wincache_ucache_clear","description":"\n \n  wincache_ucache_clear\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_clear &mdash; \n   Deletes entire content of the user cache\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_clear\n    ( void\n   )\n\n  \n   Clears\/deletes all the values stored in the user cache.\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 using wincache_ucache_clear()\n    \n\n&lt;?phpwincache_ucache_set('green',&nbsp;1);wincache_ucache_set('red',&nbsp;2);wincache_ucache_set('orange',&nbsp;4);wincache_ucache_set('blue',&nbsp;8);wincache_ucache_set('cyan',&nbsp;16);$array1&nbsp;=&nbsp;array('green',&nbsp;'red',&nbsp;'orange',&nbsp;'blue',&nbsp;'cyan');var_dump(wincache_ucache_get($array1));var_dump(wincache_ucache_clear());var_dump(wincache_ucache_get($array1));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(5) { [&quot;green&quot;]=&gt; int(1) \n           [&quot;red&quot;]=&gt; int(2) \n           [&quot;orange&quot;]=&gt; int(4) \n           [&quot;blue&quot;]=&gt; int(8) \n           [&quot;cyan&quot;]=&gt; int(16) } \nbool(true) \nbool(false) \n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-dec.php","title":"wincache_ucache_dec","description":"\n \n  wincache_ucache_dec\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_dec &mdash; \n   Decrements the value associated with the key\n  \n\n \n \n  Description\n  \n   mixed wincache_ucache_dec\n    ( string $key\n   [, int $dec_by = 1\n   [, bool &$success\n  ]] )\n\n  \n   Decrements the value associated with the key by 1 or as specified \n   by dec_by.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that was used to store the variable in the cache. \n       key is case sensitive.\n      \n     \n\n    \n\n    \n\n     dec_by\n     \n\n      \n       The value by which the variable associated with the key will get decremented. \n       If the argument is a floating point number it will be truncated to nearest integer. The variable \n       associated with the key should be of type long, otherwise \n       the function fails and returns FALSE.\n      \n     \n\n    \n\n    \n\n     success\n     \n\n      \n       Will be set to TRUE on success and FALSE on failure.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the decremented value on success and FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_dec()\n    \n\n&lt;?phpwincache_ucache_set('counter',&nbsp;1);var_dump(wincache_ucache_dec('counter',&nbsp;2923,&nbsp;$success));var_dump($success);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nint(2922) \nbool(true)\n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_inc() - Increments the value associated with the key\n    wincache_ucache_cas() - Compares the variable with old value and assigns new value to it\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-exists.php","title":"wincache_ucache_exists","description":"\n \n  wincache_ucache_exists\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_exists &mdash; \n   Checks if a variable exists in the user cache\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_exists\n    ( string $key\n   )\n\n  \n   Checks if a variable with the key exists in the user cache or not.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that was used to store the variable in the cache. \n       key is case sensitive.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if variable with the key exitsts, \n   otherwise returns FALSE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_exists()\n    \n\n&lt;?phpif&nbsp;(!wincache_ucache_exists('green'))&nbsp;&nbsp;&nbsp;&nbsp;wincache_ucache_set('green',&nbsp;1);var_dump(wincache_ucache_exists('green'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\n\n        \n   \n  \n \n\n \n  See Also\n  \n   \n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-delete.php","title":"wincache_ucache_delete","description":"\n \n  wincache_ucache_delete\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_delete &mdash; \n   Deletes variables from the user cache\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_delete\n    ( mixed $key\n   )\n\n  \n   Deletes the elements in the user cache pointed by key.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that was used to store the variable in the cache. \n       key is case sensitive. key can be an \n       array of keys.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n  \n   If key is an array then the function returns FALSE \n   if every element of the array fails to get deleted from the user cache, otherwise returns an \n   array which consists of all the keys that are deleted.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_delete() with key as a string\n    \n\n&lt;?phpwincache_ucache_set('foo',&nbsp;'bar');var_dump(wincache_ucache_delete('foo'));var_dump(wincache_ucache_exists('foo'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\nbool(false)\n\n        \n   \n  \n  \n   \n    Example #2 Usingwincache_ucache_delete() with key as an array\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;'5',&nbsp;'blue'&nbsp;=&gt;&nbsp;'6',&nbsp;'yellow'&nbsp;=&gt;&nbsp;'7',&nbsp;'cyan'&nbsp;=&gt;&nbsp;'8');wincache_ucache_set($array1);$array2&nbsp;=&nbsp;array('green',&nbsp;'blue',&nbsp;'yellow',&nbsp;'cyan');var_dump(wincache_ucache_delete($array2));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(4) { [0]=&gt; string(5) &quot;green&quot; \n           [1]=&gt; string(4) &quot;Blue&quot; \n           [2]=&gt; string(6) &quot;yellow&quot; \n           [3]=&gt; string(4) &quot;cyan&quot; } \n\n        \n   \n  \n  \n   \n    Example #3 Using wincache_ucache_delete() with key as an array where some elements cannot be deleted\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;'5',&nbsp;'blue'&nbsp;=&gt;&nbsp;'6',&nbsp;'yellow'&nbsp;=&gt;&nbsp;'7',&nbsp;'cyan'&nbsp;=&gt;&nbsp;'8');wincache_ucache_set($array1);$array2&nbsp;=&nbsp;array('orange',&nbsp;'red',&nbsp;'yellow',&nbsp;'cyan');var_dump(wincache_ucache_delete($array2));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(2) { [0]=&gt; string(6) &quot;yellow&quot; \n           [1]=&gt; string(4) &quot;cyan&quot; }\n\n        \n   \n    \n \n\n \n  See Also\n  \n   \n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-get.php","title":"wincache_ucache_get","description":"\n \n  wincache_ucache_get\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_get &mdash; \n   Gets a variable stored in the user cache\n  \n\n \n \n  Description\n  \n   mixed wincache_ucache_get\n    ( mixed $key\n   [, bool &$success\n  ] )\n\n  \n   Gets a variable stored in the user cache.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that was used to store the variable in the cache. \n       key is case sensitive. key can be an \n       array of keys. In this case the return value will be an array of values of each element \n       in the key array. If an object, or an array containing objects,\n       is returned, then the objects will be unserialized. See\n       __wakeup() for details on unserializing objects.\n      \n     \n\n    \n\n    \n\n     success\n     \n\n      \n       Will be set to TRUE on success and FALSE on failure.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If key is a string, the function returns the value of the variable stored with that key. \n   The success is set to TRUE on success and \n   to FALSE on failure.\n  \n  \n   The key is an array, the parameter success \n   is always set to TRUE. The returned array (name =&gt; value pairs) will \n   contain only those name =&gt; value pairs for which the get operation in user cache was \n   successful. If none of the keys in the key array finds a match in the user cache \n   an empty array will be returned.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 wincache_ucache_get() with key as a string\n    \n\n&lt;?phpwincache_ucache_add('color',&nbsp;'blue');var_dump(wincache_ucache_get('color',&nbsp;$success));var_dump($success);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nstring(4) &quot;blue&quot;\nbool(true)\n\n        \n   \n  \n  \n   \n    Example #2 wincache_ucache_get() with key as an array\n    \n\n&lt;?php$array1&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;'5',&nbsp;'Blue'&nbsp;=&gt;&nbsp;'6',&nbsp;'yellow'&nbsp;=&gt;&nbsp;'7',&nbsp;'cyan'&nbsp;=&gt;&nbsp;'8');wincache_ucache_set($array1);$array2&nbsp;=&nbsp;array('green',&nbsp;'Blue',&nbsp;'yellow',&nbsp;'cyan');var_dump(wincache_ucache_get($array2,&nbsp;$success));var_dump($success);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(4) { [&quot;green&quot;]=&gt; string(1) &quot;5&quot; \n           [&quot;Blue&quot;]=&gt; string(1) &quot;6&quot; \n           [&quot;yellow&quot;]=&gt; string(1) &quot;7&quot; \n           [&quot;cyan&quot;]=&gt; string(1) &quot;8&quot; } \nbool(true) \n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache\n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    __wakeup()\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-inc.php","title":"wincache_ucache_inc","description":"\n \n  wincache_ucache_inc\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_inc &mdash; \n   Increments the value associated with the key\n  \n\n \n \n  Description\n  \n   mixed wincache_ucache_inc\n    ( string $key\n   [, int $inc_by = 1\n   [, bool &$success\n  ]] )\n\n  \n   Increments the value associated with the key by 1 or as specified \n   by inc_by.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       The key that was used to store the variable in the cache. \n       key is case sensitive.\n      \n     \n\n    \n\n    \n\n     inc_by\n     \n\n      \n       The value by which the variable associated with the key will get incremented. \n       If the argument is a floating point number it will be truncated to nearest integer. The variable \n       associated with the key should be of type long, otherwise \n       the function fails and returns FALSE.\n      \n     \n\n    \n\n    \n\n     success\n     \n\n      \n       Will be set to TRUE on success and FALSE on failure.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the incremented value on success and FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_inc()\n    \n\n&lt;?phpwincache_ucache_set('counter',&nbsp;1);var_dump(wincache_ucache_inc('counter',&nbsp;2921,&nbsp;$success));var_dump($success);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nint(2922) \nbool(true)\n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_dec() - Decrements the value associated with the key\n    wincache_ucache_cas() - Compares the variable with old value and assigns new value to it\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-info.php","title":"wincache_ucache_info","description":"\n \n  wincache_ucache_info\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_info &mdash; \n   Retrieves information about data stored in the user cache\n  \n\n \n \n  Description\n  \n   array wincache_ucache_info\n    ([ bool $summaryonly = false\n   [, string $key\n  ]] )\n\n  \n   Retrieves information about data stored in the user cache.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     summaryonly\n     \n\n      \n       Controls whether the returned array will contain information about individual cache entries \n       along with the user cache summary.\n      \n     \n\n    \n\n    \n\n     key\n     \n\n      \n       The key of an entry in the user cache. If specified then the returned array will contain information \n       only about that cache entry. If not specified and summaryonly is set to \n       false then the returned array will contain information about all entries in the cache.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Array of meta data about user cache  or FALSE on failure\n  \n    \n   The array returned by this function contains the following elements:\n   \n    \n     \n      total_cache_uptime - total time in seconds that the user cache has been active\n     \n    \n    \n     \n      total_item_count - total number of elements that are currently in the user cache\n     \n    \n    \n     \n      is_local_cache - true is the cache metadata is for a local cache instance, \n       false if the metadata is for the global cache\n     \n    \n    \n     \n      total_hit_count - number of times the data has been served from the cache\n     \n    \n    \n     \n      total_miss_count - number of times the data has not been found in the cache\n     \n    \n    \n     \n      ucache_entries - an array that contains the information about all the cached items:\n      \n       \n        \n         key_name - name of the key which is used to store the data\n        \n       \n       \n        \n         value_type - type of value stored by the key\n        \n       \n       \n        \n         use_time - time in seconds since the file has been accessed in the opcode cache\n        \n       \n       \n        \n         last_check - time in seconds since the file has been checked for modifications\n        \n       \n       \n        \n         is_session - indicates if the data is a session variable\n        \n       \n       \n        \n         ttl_seconds - time remaining for the data to live in the cache, 0 meaning infinite\n        \n       \n       \n        \n         age_seconds - time elapsed from the time data has been added in the cache\n        \n       \n       \n        \n         hitcount - number of times data has been served from the cache\n        \n       \n      \n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_ucache_info()\n    \n\n&lt;?phpwincache_ucache_get('green');wincache_ucache_set('green',&nbsp;2922);wincache_ucache_get('green');wincache_ucache_get('green');wincache_ucache_get('green');print_r(wincache_ucache_info());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray \n( [&quot;total_cache_uptime&quot;] =&gt; int(0)\n  [&quot;is_local_cache&quot;] =&gt; bool(false)\n  [&quot;total_item_count&quot;] =&gt; int(1) \n  [&quot;total_hit_count&quot;] =&gt; int(3) \n  [&quot;total_miss_count&quot;] =&gt; int(1) \n  [&quot;ucache_entries&quot;] =&gt; Array(1) \n    ( [1] =&gt; Array(6)\n      ( \n        [&quot;key_name&quot;] =&gt; string(5) &quot;green&quot;\n        [&quot;value_type&quot;] =&gt; string(4) &quot;long&quot; \n        [&quot;is_session&quot;] =&gt; int(0) \n        [&quot;ttl_seconds&quot;] =&gt; int(0)\n        [&quot;age_seconds&quot;] =&gt; int(0)\n        [&quot;hitcount&quot;] =&gt; int(3) \n       ) \n    ) \n)\n\n        \n   \n  \n \n\n \n \n  See Also\n  \n   \n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_ocache_meminfo() - Retrieves information about opcode cache memory usage\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-meminfo.php","title":"wincache_ucache_meminfo","description":"\n \n  wincache_ucache_meminfo\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_meminfo &mdash; \n   Retrieves information about user cache memory usage\n  \n\n \n \n  Description\n  \n   array wincache_ucache_meminfo\n    ( void\n   )\n\n  \n   Retrieves information about memory usage by user cache.\n  \n \n\n \n  Return Values\n  \n   Array of meta data about user cache memory usage  or FALSE on failure\n  \n  \n   The array returned by this function contains the following elements:\n   \n    \n     \n      memory_total - amount of memory in bytes allocated for the user cache\n     \n    \n    \n     \n      memory_free - amount of free memory in bytes available for the user cache\n     \n    \n    \n     \n      num_used_blks - number of memory blocks used by the user cache\n     \n    \n    \n     \n      num_free_blks - number of free memory blocks available for the user cache\n     \n    \n    \n     \n      memory_overhead - amount of memory in bytes used for the user cache internal structures\n     \n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A wincache_ucache_meminfo() example\n    \n\n&lt;pre&gt;&lt;?phpprint_r(wincache_ucache_meminfo());?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\nArray \n( \n    [memory_total] =&gt; 5242880 \n    [memory_free] =&gt; 5215056 \n    [num_used_blks] =&gt; 6 \n    [num_free_blks] =&gt; 3 \n    [memory_overhead] =&gt; 176\n) \n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_fcache_fileinfo() - Retrieves information about files cached in the file cache\n    wincache_fcache_meminfo() - Retrieves information about file cache memory usage\n    wincache_ocache_fileinfo() - Retrieves information about files cached in the opcode cache\n    wincache_rplist_fileinfo() - Retrieves information about resolve file path cache\n    wincache_rplist_meminfo() - Retrieves information about memory usage by the resolve file path cache\n    wincache_refresh_if_changed() - Refreshes the cache entries for the cached files\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n    wincache_scache_meminfo() - Retrieves information about session cache memory usage\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-ucache-set.php","title":"wincache_ucache_set","description":"\n \n  wincache_ucache_set\n  (PECL wincache &gt;= 1.1.0)wincache_ucache_set &mdash; \n   Adds a variable in user cache and overwrites a variable if it already exists in the cache\n  \n\n \n \n  Description\n  \n   bool wincache_ucache_set\n    ( mixed $key\n   , mixed $value\n   [, int $ttl = 0\n  ] )\n\n  \n   bool wincache_ucache_set\n    ( array $values\n   [, mixed $unused\n   [, int $ttl = 0\n  ]] )\n\n  \n   Adds a variable in user cache. Overwrites a variable if it already exists in the cache. \n   The added or updated variable remains in the user cache unless its time to live expires or it is \n   deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Store the variable using this key name. If a variable with same \n       key is already present the function will overwrite the previous \n       value with the new one. key is case sensitive. \n       key can also take array of name =&gt; value pairs where names will be used as \n       keys. This can be used to add multiple values in the cache in one operation, thus avoiding \n       race condition.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       Value of a variable to store. Value supports all data types except resources, such as file handles.\n       This paramter is ignored if first argument is an array. A general guidance is to pass NULL \n       as value while using array as key. If value is an\n       object, or an array containing objects, then the objects will be serialized. See\n       __sleep() for details on serializing objects.\n      \n     \n\n    \n\n    \n\n     values\n     \n\n      \n       Associative array of keys and values.\n      \n     \n\n    \n\n    \n\n     ttl\n     \n\n      \n       Time for the variable to live in the cache in seconds. After the value specified in ttl has passed \n       the stored variable will be deleted from the cache. This parameter takes a default value of 0 which means \n       the variable will stay in the cache unless explicitly deleted by using wincache_ucache_delete() \n       or wincache_ucache_clear() functions.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   If key is string, the function returns TRUE on success and FALSE on failure.\n  \n  \n   If key is an array, the function returns:\n   \n    \n     \n      If all the name =&gt; value pairs in the array can be set, function returns an empty array;\n     \n    \n    \n     \n     If all the name =&gt; value pairs in the array cannot be set, function returns FALSE;\n     \n    \n    \n     \n      If some can be set while others cannot, function returns an array with name=&gt;value pair for which the addition failed in the user cache.\n     \n    \n   \n  \n \n\n \n  Examples\n  \n   \n    Example #1 wincache_ucache_set() with key as a string\n    \n\n&lt;?php$bar&nbsp;=&nbsp;'BAR';var_dump(wincache_ucache_set('foo',&nbsp;$bar));var_dump(wincache_ucache_get('foo'));$bar1&nbsp;=&nbsp;'BAR1';var_dump(wincache_ucache_set('foo',&nbsp;$bar1));var_dump(wincache_ucache_get('foo'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nbool(true)\nstring(3) &quot;BAR&quot;\nbool(true)\nstring(3) &quot;BAR1&quot;\n\n        \n   \n  \n  \n   \n    Example #2 wincache_ucache_set() with key as an array\n    \n\n&lt;?php$colors_array&nbsp;=&nbsp;array('green'&nbsp;=&gt;&nbsp;'5',&nbsp;'Blue'&nbsp;=&gt;&nbsp;'6',&nbsp;'yellow'&nbsp;=&gt;&nbsp;'7',&nbsp;'cyan'&nbsp;=&gt;&nbsp;'8');var_dump(wincache_ucache_set($colors_array));var_dump(wincache_ucache_set($colors_array));var_dump(wincache_ucache_get('Blue'));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(0) {}\narray(0) {}\nstring(1) &quot;6&quot;\n\n        \n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_ucache_add() - Adds a variable in user cache only if variable does not already exist in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    __sleep()\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.wincache-unlock.php","title":"wincache_unlock","description":"\n \n  wincache_unlock\n  (PECL wincache &gt;= 1.1.0)wincache_unlock &mdash; \n   Releases an exclusive lock on a given key\n  \n\n \n \n  Description\n  \n   bool wincache_unlock\n    ( string $key\n   )\n\n  \n   Releases an exclusive lock that was obtained on a given key by using wincache_lock(). \n   If any other process was blocked waiting for the lock on this key, that process will be able to obtain \n   the lock.\n  \n  Warning\n   \n    Using of the wincache_lock() and wincache_unlock() can cause deadlocks when \n    executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are \n    absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to\n    use these functions.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     key\n     \n\n      \n       Name of the key in the cache to release the lock on.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Using wincache_unlock()\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fopen(\"\/tmp\/lock.txt\",&nbsp;\"r+\");if&nbsp;(wincache_lock(\u201clock_txt_lock\u201d))&nbsp;{&nbsp;\/\/&nbsp;do&nbsp;an&nbsp;exclusive&nbsp;lock&nbsp;&nbsp;&nbsp;&nbsp;ftruncate($fp,&nbsp;0);&nbsp;\/\/&nbsp;truncate&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"Write&nbsp;something&nbsp;here\\n\");&nbsp;&nbsp;&nbsp;&nbsp;wincache_unlock(\u201clock_txt_lock\u201d);&nbsp;\/\/&nbsp;release&nbsp;the&nbsp;lock}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Couldn't&nbsp;get&nbsp;the&nbsp;lock!\";}fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    wincache_lock() - Acquires an exclusive lock on a given key\n    wincache_ucache_set() - Adds a variable in user cache and overwrites a variable if it already exists in the cache\n    wincache_ucache_get() - Gets a variable stored in the user cache\n    wincache_ucache_delete() - Deletes variables from the user cache\n    wincache_ucache_clear() - Deletes entire content of the user cache\n    wincache_ucache_exists() - Checks if a variable exists in the user cache\n    wincache_ucache_meminfo() - Retrieves information about user cache memory usage\n    wincache_ucache_info() - Retrieves information about data stored in the user cache\n    wincache_scache_info() - Retrieves information about files cached in the session cache\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.doubleval.php","title":"doubleval","description":"\n \n  doubleval\n  (PHP 4, PHP 5)doubleval &mdash; Alias of floatval()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   floatval().\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        doubleval() became an alias of \n        floatval(). Before this time, only\n        doubleval() existed.\n       \n      \n\n     \n    \n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-resource-type.php","title":"get_resource_type","description":"\n \n  get_resource_type\n  (PHP 4 &gt;= 4.0.2, PHP 5)get_resource_type &mdash; \n   Returns the resource type\n  \n\n \n\n \n  Description\n  \n   string get_resource_type\n    ( resource $handle\n   )\n\n  \n   This function gets the type of the given resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     handle\n     \n\n      \n       The evaluated resource handle.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If the given handle is a resource, this function\n   will return a string representing its type. If the type is not identified\n   by this function, the return value will be the string \n   Unknown.\n  \n  \n   This function will return FALSE and generate an error if \n   handle is not a resource.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 get_resource_type() example\n    \n\n&lt;?php\/\/&nbsp;prints:&nbsp;mysql&nbsp;link$c&nbsp;=&nbsp;mysql_connect();echo&nbsp;get_resource_type($c)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;prints:&nbsp;file$fp&nbsp;=&nbsp;fopen(\"foo\",&nbsp;\"w\");echo&nbsp;get_resource_type($fp)&nbsp;.&nbsp;\"\\n\";\/\/&nbsp;prints:&nbsp;domxml&nbsp;document$doc&nbsp;=&nbsp;new_xmldoc(\"1.0\");echo&nbsp;get_resource_type($doc-&gt;doc)&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.debug-zval-dump.php","title":"debug_zval_dump","description":"\n \n  debug_zval_dump\n  (PHP 4 &gt;= 4.2.0, PHP 5)debug_zval_dump &mdash; Dumps a string representation of an internal zend value to output\n\n \n \n  Description\n  \n   void debug_zval_dump\n    ( mixed $variable\n   )\n\n  \n   Dumps a string representation of an internal zend value to output.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     variable\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 debug_zval_dump() example\n    \n\n&lt;?php$var1&nbsp;=&nbsp;'Hello&nbsp;World';$var2&nbsp;=&nbsp;'';$var2&nbsp;=&amp;&nbsp;$var1;debug_zval_dump(&amp;$var1);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&amp;string(11) &quot;Hello World&quot; refcount(3)\n\n    \n   \n  \n  Note: \n   Beware the refcount\n   \n    The refcount value returned by this function is\n    non-obvious in certain circumstances. For example, a developer might\n    expect the above example to indicate a refcount of\n    2. The third reference is created when actually\n    calling debug_zval_dump().\n   \n   \n    This behavior is further compounded when a variable is not passed to\n    debug_zval_dump() by reference. To illustrate, consider\n    a slightly modified version of the above example:\n   \n   \n    \n     \n     \n\n&lt;?php$var1&nbsp;=&nbsp;'Hello&nbsp;World';$var2&nbsp;=&nbsp;'';$var2&nbsp;=&amp;&nbsp;$var1;debug_zval_dump($var1);&nbsp;\/\/&nbsp;not&nbsp;passed&nbsp;by&nbsp;reference,&nbsp;this&nbsp;time?&gt;\n\n\n     \n\n     The above example will output:\n     \n\nstring(11) &quot;Hello World&quot; refcount(1)\n\n     \n    \n   \n   \n    Why refcount(1)? Because a copy of $var1 is\n    being made, when the function is called.\n   \n   \n    This function becomes even more confusing when a\n    variable with a refcount of 1 is\n    passed (by copy\/value):\n   \n   \n    \n     \n     \n\n&lt;?php$var1&nbsp;=&nbsp;'Hello&nbsp;World';debug_zval_dump($var1);?&gt;\n\n\n     \n\n     The above example will output:\n     \n\nstring(11) &quot;Hello World&quot; refcount(2)\n\n     \n    \n   \n   \n    A refcount of 2, here, is extremely\n    non-obvious. Especially considering the above examples. So what&#039;s\n    happening?\n   \n   \n    When a variable has a single reference (as did $var1\n    before it was used as an argument to debug_zval_dump()),\n    PHP&#039;s engine optimizes the manner in which it is passed to a function.\n    Internally, PHP treats $var1 like a reference (in that\n    the refcount is increased for the scope of this\n    function), with the caveat that if the passed reference\n    happens to be written to, a copy is made, but only at the moment of\n    writing. This is known as &quot;copy on write.&quot;\n   \n   \n    So, if debug_zval_dump() happened to write to its sole\n    parameter (and it doesn&#039;t), then a copy would be made. Until then, the\n    parameter remains a reference, causing the refcount to\n    be incremented to 2 for the scope of the function call.\n   \n  \n \n\n \n  See Also\n  \n   \n    var_dump() - Dumps information about a variable\n    debug_backtrace() - Generates a backtrace\n    References Explained\n    &raquo;&nbsp;References Explained (by Derick Rethans)\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.get-defined-vars.php","title":"get_defined_vars","description":"\n \n  get_defined_vars\n  (PHP 4 &gt;= 4.0.4, PHP 5)get_defined_vars &mdash; \n   Returns an array of all defined variables\n  \n\n \n \n  Description\n  \n   array get_defined_vars\n    ( void\n   )\n\n  \n   This function returns a multidimensional array containing a list of\n   all defined variables, be them environment, server or user-defined\n   variables, within the scope that get_defined_vars() is\n   called. \n  \n \n\n \n  Return Values\n  \n   A multidimensional array with all the variables.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 get_defined_vars() Example\n    \n\n&lt;?php$b&nbsp;=&nbsp;array(1,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5,&nbsp;8);$arr&nbsp;=&nbsp;get_defined_vars();\/\/&nbsp;print&nbsp;$bprint_r($arr[\"b\"]);\/*&nbsp;print&nbsp;path&nbsp;to&nbsp;the&nbsp;PHP&nbsp;interpreter&nbsp;(if&nbsp;used&nbsp;as&nbsp;a&nbsp;CGI)&nbsp;*&nbsp;e.g.&nbsp;\/usr\/local\/bin\/php&nbsp;*\/echo&nbsp;$arr[\"_\"];\/\/&nbsp;print&nbsp;the&nbsp;command-line&nbsp;parameters&nbsp;if&nbsp;anyprint_r($arr[\"argv\"]);\/\/&nbsp;print&nbsp;all&nbsp;the&nbsp;server&nbsp;varsprint_r($arr[\"_SERVER\"]);\/\/&nbsp;print&nbsp;all&nbsp;the&nbsp;available&nbsp;keys&nbsp;for&nbsp;the&nbsp;arrays&nbsp;of&nbsp;variablesprint_r(array_keys(get_defined_vars()));?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        The $GLOBALS variable is included in the results of\n        the array returned.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  See Also\n  \n   \n    isset() - Determine if a variable is set and is not NULL\n    get_defined_functions() - Returns an array of all defined functions\n    get_defined_constants() - Returns an associative array with the names of all the constants and their values\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.floatval.php","title":"floatval","description":"\n \n  floatval\n  (PHP 4 &gt;= 4.2.0, PHP 5)floatval &mdash; Get float value of a variable\n\n \n \n  Description\n  \n   float floatval\n    ( mixed $var\n   )\n\n  \n   Gets the float value of var.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       May be any scalar type. floatval() should not be used\n       on objects, as doing so will emit an E_NOTICE level\n       error and return 1.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The float value of the given variable. Empty arrays return 0, non-empty\n   arrays return 1.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 floatval() Example\n    \n\n&lt;?php$var&nbsp;=&nbsp;'122.34343The';$float_value_of_var&nbsp;=&nbsp;floatval($var);echo&nbsp;$float_value_of_var;&nbsp;\/\/&nbsp;122.34343?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    intval() - Get the integer value of a variable\n    strval() - Get string value of a variable\n    settype() - Set the type of a variable\n    Type juggling\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.empty.php","title":"empty","description":"\n \n  empty\n  (PHP 4, PHP 5)empty &mdash; Determine whether a variable is empty\n\n \n \n  Description\n  \n   bool empty\n    ( mixed $var\n   )\n\n  \n   Determine whether a variable is considered to be empty.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       Variable to be checked\n      \n      Note: \n       \n        empty() only checks variables as anything else will\n        result in a parse error. In other words, the following will not work:\n        empty(trim($name)).\n       \n      \n      \n       empty() is the opposite of\n       (boolean) var,\n       except that no warning is generated when the variable is not set.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns FALSE if var has a non-empty\n   and non-zero value.\n  \n  \n   The following things are considered to be empty:\n   \n    &quot;&quot; (an empty string)\n    0 (0 as an integer)\n    0.0 (0 as a float)\n    &quot;0&quot; (0 as a string)\n    NULL\n    FALSE\n    array() (an empty array)\n    var $var; (a variable declared, but without a value in a class)\n   \n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.0.0\n       \n        \n         Objects with no properties are no longer considered empty.\n        \n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 \n     A simple empty() \/ isset()\n     comparison.\n      \n    \n\n&lt;?php$var&nbsp;=&nbsp;0;\/\/&nbsp;Evaluates&nbsp;to&nbsp;true&nbsp;because&nbsp;$var&nbsp;is&nbsp;emptyif&nbsp;(empty($var))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'$var&nbsp;is&nbsp;either&nbsp;0,&nbsp;empty,&nbsp;or&nbsp;not&nbsp;set&nbsp;at&nbsp;all';}\/\/&nbsp;Evaluates&nbsp;as&nbsp;true&nbsp;because&nbsp;$var&nbsp;is&nbsp;setif&nbsp;(isset($var))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'$var&nbsp;is&nbsp;set&nbsp;even&nbsp;though&nbsp;it&nbsp;is&nbsp;empty';}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions\n\n  Note: \n   \n    When using empty() on inaccessible object properties,\n    the __isset\n    overloading method will be called, if declared.\n   \n  \n \n\n \n  See Also\n  \n   \n    isset() - Determine if a variable is set and is not NULL\n    __isset\n    unset() - Unset a given variable\n    array_key_exists() - Checks if the given key or index exists in the array\n    count() - Count all elements in an array, or something in an object \n    strlen() - Get string length\n    The type comparison tables\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.import-request-variables.php","title":"import_request_variables","description":"\n \n  import_request_variables\n  (PHP 4 &gt;= 4.1.0, PHP 5)import_request_variables &mdash; Import GET\/POST\/Cookie variables into the global scope\n\n \n\n \n  Description\n  \n   bool import_request_variables\n    ( string $types\n   [, string $prefix\n  ] )\n\n  \n   Imports GET\/POST\/Cookie variables into the global scope. It is useful if\n   you disabled register_globals,\n   but would like to see some variables in the global scope.\n  \n  \n   If you&#039;re interested in importing other variables into the global scope,\n   such as $_SERVER, consider using extract().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     types\n     \n\n      \n       Using the types parameter, you can specify\n       which request variables to import. You can use &#039;G&#039;, &#039;P&#039; and &#039;C&#039; \n       characters respectively for GET, POST and Cookie. These characters are\n       not case sensitive, so you can also use any combination of &#039;g&#039;, &#039;p&#039;\n       and &#039;c&#039;. POST includes the POST uploaded file information.\n      \n      Note: \n       \n        Note that the order of the letters matters, as when using\n        &quot;GP&quot;, the\n        POST variables will overwrite GET variables with the same name. Any\n        other letters than GPC are discarded.\n       \n      \n     \n\n    \n\n    \n\n     prefix\n     \n\n      \n       Variable name prefix, prepended before all variable&#039;s name imported\n       into the global scope. So if you have a GET value named\n       &quot;userid&quot;, and provide a prefix\n       &quot;pref_&quot;, then you&#039;ll get a global variable named\n       $pref_userid.\n      \n      Note: \n       \n        Although the prefix parameter is optional, you\n        will get an E_NOTICE level\n        error if you specify no prefix, or specify an empty string as a\n        prefix. This is a possible security hazard. Notice level errors are\n        not displayed using the default error reporting level.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 import_request_variables() example\n    \n\n&lt;?php\/\/&nbsp;This&nbsp;will&nbsp;import&nbsp;GET&nbsp;and&nbsp;POST&nbsp;vars\/\/&nbsp;with&nbsp;an&nbsp;\"rvar_\"&nbsp;prefiximport_request_variables(\"gp\",&nbsp;\"rvar_\");echo&nbsp;$rvar_foo;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    $_REQUEST\n    register_globals\n    Predefined Variables\n    extract() - Import variables into the current symbol table from an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gettype.php","title":"gettype","description":"\n \n  gettype\n  (PHP 4, PHP 5)gettype &mdash; Get the type of a variable\n\n \n\n \n  Description\n  \n   string gettype\n    ( mixed $var\n   )\n\n  \n   Returns the type of the PHP variable\n   var.\n  \n  Warning\n   \n    Never use gettype() to test for a certain type,\n    since the returned string may be subject to change in a future version.\n    In addition, it is slow too, as it involves string comparison.\n   \n   \n    Instead, use the is_* functions.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being type checked.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Possibles values for the returned string are:\n   \n    \n     \n      &quot;boolean&quot;\n     \n    \n    \n     \n      &quot;integer&quot;\n     \n    \n    \n     \n      &quot;double&quot; (for historical reasons &quot;double&quot; is\n      returned in case of a float, and not simply\n      &quot;float&quot;)\n     \n    \n    \n     \n      &quot;string&quot;\n     \n    \n    \n     \n      &quot;array&quot;\n     \n    \n    \n     \n      &quot;object&quot;\n     \n    \n    \n     \n      &quot;resource&quot;\n     \n    \n    \n     \n      &quot;NULL&quot;\n     \n    \n    \n     \n      &quot;unknown type&quot;\n     \n    \n   \n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 gettype() example\n    \n\n&lt;?php$data&nbsp;=&nbsp;array(1,&nbsp;1.,&nbsp;NULL,&nbsp;new&nbsp;stdClass,&nbsp;'foo');foreach&nbsp;($data&nbsp;as&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;gettype($value),&nbsp;\"\\n\";}?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\ninteger\ndouble\nNULL\nobject\nstring\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    settype() - Set the type of a variable\n    get_class() - Returns the name of the class of an object\n    is_array() - Finds whether a variable is an array\n    is_bool() - Finds out whether a variable is a boolean\n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_null() - Finds whether a variable is NULL\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    is_object() - Finds whether a variable is an object\n    is_resource() - Finds whether a variable is a resource\n    is_scalar() - Finds whether a variable is a scalar\n    is_string() - Find whether the type of a variable is string\n    function_exists() - Return TRUE if the given function has been defined\n    method_exists() - Checks if the class method exists\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-double.php","title":"is_double","description":"\n \n  is_double\n  (PHP 4, PHP 5)is_double &mdash; Alias of is_float()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   is_float().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.intval.php","title":"intval","description":"\n \n  intval\n  (PHP 4, PHP 5)intval &mdash; Get the integer value of a variable\n\n \n\n \n  Description\n  \n   int intval\n    ( mixed $var\n   [, int $base = 10\n  ] )\n\n  \n   Returns the integer value of var,\n   using the specified base for the conversion \n   (the default is base 10). intval() should not be used\n   on objects, as doing so will emit an E_NOTICE level\n   error and return 1.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The scalar value being converted to an integer\n      \n     \n\n    \n\n    \n\n     base\n     \n\n      \n       The base for the conversion\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The integer value of var on success, or 0 on\n   failure. Empty arrays return 0, non-empty arrays return 1.\n  \n  \n   The maximum value depends on the system. 32 bit systems have a \n   maximum signed integer range of -2147483648 to 2147483647. So for example \n   on such a system, intval(&#039;1000000000000&#039;) will return \n   2147483647. The maximum signed integer value for 64 bit systems is \n   9223372036854775807.\n  \n  \n   Strings will most likely return 0 although this depends on the \n   leftmost characters of the string. The common rules of \n   integer casting \n   apply.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 intval() examples\n    \n     The following examples are based on a 32 bit system.\n    \n    \n\n&lt;?phpecho&nbsp;intval(42);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42echo&nbsp;intval(4.2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;4echo&nbsp;intval('42');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42echo&nbsp;intval('+42');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42echo&nbsp;intval('-42');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;-42echo&nbsp;intval(042);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;34echo&nbsp;intval('042');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42echo&nbsp;intval(1e10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;1410065408echo&nbsp;intval('1e10');&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;1echo&nbsp;intval(0x1A);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;26echo&nbsp;intval(42000000);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42000000echo&nbsp;intval(420000000000000000000);&nbsp;&nbsp;&nbsp;\/\/&nbsp;0echo&nbsp;intval('420000000000000000000');&nbsp;\/\/&nbsp;2147483647echo&nbsp;intval(42,&nbsp;8);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;42echo&nbsp;intval('42',&nbsp;8);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;34echo&nbsp;intval(array());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;0echo&nbsp;intval(array('foo',&nbsp;'bar'));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;1?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    The base parameter has no effect unless the\n    var parameter is a string.\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Throws E_NOTICE and\n        returns 1, when an object is passed to \n        var.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    floatval() - Get float value of a variable\n    strval() - Get string value of a variable\n    settype() - Set the type of a variable\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    Type juggling\n    BCMath Arbitrary Precision Mathematics Functions\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-array.php","title":"is_array","description":"\n \n  is_array\n  (PHP 4, PHP 5)is_array &mdash; Finds whether a variable is an array\n\n \n \n  Description\n   \n    bool is_array\n     ( mixed $var\n    )\n\n  \n   Finds whether the given variable is an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is an array,\n   FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 Check that variable is an array\n    \n\n&lt;?php$yes&nbsp;=&nbsp;array('this',&nbsp;'is',&nbsp;'an&nbsp;array');echo&nbsp;is_array($yes)&nbsp;?&nbsp;'Array'&nbsp;:&nbsp;'not&nbsp;an&nbsp;Array';echo&nbsp;\"\\n\";$no&nbsp;=&nbsp;'this&nbsp;is&nbsp;a&nbsp;string';echo&nbsp;is_array($no)&nbsp;?&nbsp;'Array'&nbsp;:&nbsp;'not&nbsp;an&nbsp;Array';?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\nnot an Array\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_string() - Find whether the type of a variable is string\n    is_object() - Finds whether a variable is an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-bool.php","title":"is_bool","description":"\n \n  is_bool\n  (PHP 4, PHP 5)is_bool &mdash; \n   Finds out whether a variable is a boolean\n  \n\n \n \n  Description\n  \n   bool is_bool\n    ( mixed $var\n   )\n\n  \n   Finds whether the given variable is a boolean.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is a boolean,\n   FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 is_bool() examples\n    \n\n&lt;?php$a&nbsp;=&nbsp;false;$b&nbsp;=&nbsp;0;\/\/&nbsp;Since&nbsp;$a&nbsp;is&nbsp;a&nbsp;boolean,&nbsp;it&nbsp;will&nbsp;return&nbsp;trueif&nbsp;(is_bool($a)&nbsp;===&nbsp;true)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Yes,&nbsp;this&nbsp;is&nbsp;a&nbsp;boolean\";}\/\/&nbsp;Since&nbsp;$b&nbsp;is&nbsp;not&nbsp;a&nbsp;boolean,&nbsp;it&nbsp;will&nbsp;return&nbsp;falseif&nbsp;(is_bool($b)&nbsp;===&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"No,&nbsp;this&nbsp;is&nbsp;not&nbsp;a&nbsp;boolean\";}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_string() - Find whether the type of a variable is string\n    is_object() - Finds whether a variable is an object\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-callable.php","title":"is_callable","description":"\n \n  is_callable\n  (PHP 4 &gt;= 4.0.6, PHP 5)is_callable &mdash; \n   Verify that the contents of a variable can be called as a function\n  \n\n \n\n \n  Description\n  \n   bool is_callable\n    ( callback $name\n   [, bool $syntax_only = false\n   [, string &$callable_name\n  ]] )\n\n  \n   Verify that the contents of a variable can be called as a function.\n   This can check that a simple variable contains the name of a valid\n   function, or that an array contains a properly encoded object and\n   function name.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The callback function to check\n      \n     \n\n    \n\n    \n\n     syntax_only\n     \n\n      \n       If set to TRUE the function only verifies that\n       name might be a function or method. It will only\n       reject simple variables that are not strings, or an array that does\n       not have a valid structure to be used as a callback. The valid ones\n       are supposed to have only 2 entries, the first of which is an object\n       or a string, and the second a string.\n      \n     \n\n    \n\n    \n\n     callable_name\n     \n\n      \n       Receives the &quot;callable name&quot;.  In the example below it is\n       &quot;someClass::someMethod&quot;.  Note, however, that despite the implication\n       that someClass::SomeMethod() is a callable static method, this is not\n       the case.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if name is callable, FALSE \n   otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_callable() example\n    \n\n&lt;?php\/\/&nbsp;&nbsp;How&nbsp;to&nbsp;check&nbsp;a&nbsp;variable&nbsp;to&nbsp;see&nbsp;if&nbsp;it&nbsp;can&nbsp;be&nbsp;called\/\/&nbsp;&nbsp;as&nbsp;a&nbsp;function.\/\/\/\/&nbsp;&nbsp;Simple&nbsp;variable&nbsp;containing&nbsp;a&nbsp;function\/\/function&nbsp;someFunction()&nbsp;{}$functionVariable&nbsp;=&nbsp;'someFunction';var_dump(is_callable($functionVariable,&nbsp;false,&nbsp;$callable_name));&nbsp;&nbsp;\/\/&nbsp;bool(true)echo&nbsp;$callable_name,&nbsp;\"\\n\";&nbsp;&nbsp;\/\/&nbsp;someFunction\/\/\/\/&nbsp;&nbsp;Array&nbsp;containing&nbsp;a&nbsp;method\/\/class&nbsp;someClass&nbsp;{&nbsp;&nbsp;function&nbsp;someMethod()&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;}}$anObject&nbsp;=&nbsp;new&nbsp;someClass();$methodVariable&nbsp;=&nbsp;array($anObject,&nbsp;'someMethod');var_dump(is_callable($methodVariable,&nbsp;true,&nbsp;$callable_name));&nbsp;&nbsp;\/\/&nbsp;&nbsp;bool(true)echo&nbsp;$callable_name,&nbsp;\"\\n\";&nbsp;&nbsp;\/\/&nbsp;&nbsp;someClass::someMethod?&gt;\n\n\n    \n\n      \n     \n \n\n\n \n  See Also\n  \n   \n    function_exists() - Return TRUE if the given function has been defined\n    method_exists() - Checks if the class method exists\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-integer.php","title":"is_integer","description":"\n \n  is_integer\n  (PHP 4, PHP 5)is_integer &mdash; Alias of is_int()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   is_int().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-float.php","title":"is_float","description":"\n \n  is_float\n  (PHP 4, PHP 5)is_float &mdash; Finds whether the type of a variable is float\n\n \n \n  Description\n   \n    bool is_float\n     ( mixed $var\n    )\n\n  \n   Finds whether the type of the given variable is float.\n  \n  Note: \n   \n    To test if a variable is a number or a numeric string (such as form\n    input, which is always a string), you must use\n    is_numeric().\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is a float,\n   FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 is_float() example\n    \n\n&lt;?phpif&nbsp;(is_float(27.25))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;float\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;not&nbsp;float\\n\";}var_dump(is_float('abc'));var_dump(is_float(23));var_dump(is_float(23.5));var_dump(is_float(1e7));&nbsp;&nbsp;\/\/Scientific&nbsp;Notationvar_dump(is_float(true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nis float\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_bool() - Finds out whether a variable is a boolean\n    is_int() - Find whether the type of a variable is integer\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    is_string() - Find whether the type of a variable is string\n    is_array() - Finds whether a variable is an array\n    is_object() - Finds whether a variable is an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-long.php","title":"is_long","description":"\n \n  is_long\n  (PHP 4, PHP 5)is_long &mdash; Alias of is_int()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   is_int().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-int.php","title":"is_int","description":"\n \n  is_int\n  (PHP 4, PHP 5)is_int &mdash; Find whether the type of a variable is integer\n\n \n \n  Description\n   \n    bool is_int\n     ( mixed $var\n    )\n\n  \n   Finds whether the type of the given variable is integer.\n  \n  Note: \n   \n    To test if a variable is a number or a numeric string (such as form\n    input, which is always a string), you must use\n    is_numeric().\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is an integer,\n   FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_int() example\n    \n\n&lt;?phpif&nbsp;(is_int(23))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;integer\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;not&nbsp;an&nbsp;integer\\n\";}var_dump(is_int(23));var_dump(is_int(\"23\"));var_dump(is_int(23.5));var_dump(is_int(true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nis integer\nbool(true)\nbool(false)\nbool(false)\nbool(false)\n\n    \n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    is_bool() - Finds out whether a variable is a boolean\n    is_float() - Finds whether the type of a variable is float\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    is_string() - Find whether the type of a variable is string\n    is_array() - Finds whether a variable is an array\n    is_object() - Finds whether a variable is an object\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-null.php","title":"is_null","description":"\n \n  is_null\n  (PHP 4 &gt;= 4.0.4, PHP 5)is_null &mdash; \n   Finds whether a variable is NULL\n  \n\n \n \n  Description\n  \n   bool is_null\n    ( mixed $var\n   )\n\n  \n   Finds whether the given variable is NULL.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is null, FALSE\n   otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 is_null() example\n    \n\n&lt;?phperror_reporting(E_ALL);$foo&nbsp;=&nbsp;NULL;var_dump(is_null($inexistent),&nbsp;is_null($foo));?&gt;\n\n\n    \n\n    \n\nNotice: Undefined variable: inexistent in ...\nbool(true)\nbool(true)\n\n    \n   \n  \n \n\n \n  See Also\n  \n   \n    The NULL type\n    isset() - Determine if a variable is set and is not NULL\n    is_bool() - Finds out whether a variable is a boolean\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_string() - Find whether the type of a variable is string\n    is_object() - Finds whether a variable is an object\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-real.php","title":"is_real","description":"\n \n  is_real\n  (PHP 4, PHP 5)is_real &mdash; Alias of is_float()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   is_float().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-object.php","title":"is_object","description":"\n \n  is_object\n  (PHP 4, PHP 5)is_object &mdash; Finds whether a variable is an object\n\n \n\n \n  Description\n   \n    bool is_object\n     ( mixed $var\n    )\n\n  \n   Finds whether the given variable is an object.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if var is an object,\n   FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_object() example\n    \n\n&lt;?php\/\/&nbsp;Declare&nbsp;a&nbsp;simple&nbsp;function&nbsp;to&nbsp;return&nbsp;an&nbsp;\/\/&nbsp;array&nbsp;from&nbsp;our&nbsp;objectfunction&nbsp;get_students($obj){&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is_object($obj))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$obj-&gt;students;}\/\/&nbsp;Declare&nbsp;a&nbsp;new&nbsp;class&nbsp;instance&nbsp;and&nbsp;fill&nbsp;up&nbsp;\/\/&nbsp;some&nbsp;values$obj&nbsp;=&nbsp;new&nbsp;stdClass();$obj-&gt;students&nbsp;=&nbsp;array('Kalle',&nbsp;'Ross',&nbsp;'Felipe');var_dump(get_students(null));var_dump(get_students($obj));?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function will return FALSE if used on an unserialized object\n    where the class definition is not present (even though\n    gettype() returns object).\n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_bool() - Finds out whether a variable is a boolean\n    is_int() - Find whether the type of a variable is integer\n    is_float() - Finds whether the type of a variable is float\n    is_string() - Find whether the type of a variable is string\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-resource.php","title":"is_resource","description":"\n \n  is_resource\n  (PHP 4, PHP 5)is_resource &mdash; \n   Finds whether a variable is a resource\n  \n\n \n\n \n  Description\n  \n   bool is_resource\n    ( mixed $var\n   )\n\n  \n   Finds whether the given variable is a resource.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if var is a resource,\n   FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_resource() example\n    \n\n&lt;?php$db_link&nbsp;=&nbsp;@mysql_connect('localhost',&nbsp;'mysql_user',&nbsp;'mysql_pass');if&nbsp;(!is_resource($db_link))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;die('Can\\'t&nbsp;connect&nbsp;:&nbsp;'&nbsp;.&nbsp;mysql_error());}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    The resource-type documentation\n    get_resource_type() - Returns the resource type\n   \n    \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-string.php","title":"is_string","description":"\n \n  is_string\n  (PHP 4, PHP 5)is_string &mdash; Find whether the type of a variable is string\n\n \n \n  Description\n  \n   bool is_string\n    ( mixed $var\n   )\n\n  \n   Finds whether the type given variable is string.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE if var is of type string,\n   FALSE otherwise.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 is_string() example\n    \n\n&lt;?phpif&nbsp;(is_string(\"23\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;string\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"is&nbsp;not&nbsp;a&nbsp;string\\n\";}var_dump(is_string('abc'));var_dump(is_string(\"23\"));var_dump(is_string(23.5));var_dump(is_string(true));?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nis string\nbool(true)\nbool(true)\nbool(false)\nbool(false)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_bool() - Finds out whether a variable is a boolean\n    is_object() - Finds whether a variable is an object\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-numeric.php","title":"is_numeric","description":"\n \n  is_numeric\n  (PHP 4, PHP 5)is_numeric &mdash; \n   Finds whether a variable is a number or a numeric string\n  \n\n \n\n \n  Description\n  \n   bool is_numeric\n    ( mixed $var\n   )\n\n  \n   Finds whether the given variable is numeric. Numeric strings consist of\n   optional sign, any number of digits, optional decimal part and optional\n   exponential part. Thus +0123.45e6 is a valid numeric\n   value. Hexadecimal notation (0xFF) is allowed too but\n   only without sign, decimal and exponential part.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if var is a number or a numeric\n   string, FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_numeric() examples\n    \n\n&lt;?php$tests&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;\"42\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1337,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"1e4\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"not&nbsp;numeric\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.1);foreach&nbsp;($tests&nbsp;as&nbsp;$element)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_numeric($element))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'{$element}'&nbsp;is&nbsp;numeric\",&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'{$element}'&nbsp;is&nbsp;NOT&nbsp;numeric\",&nbsp;PHP_EOL;&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n&#039;42&#039; is numeric\n&#039;1337&#039; is numeric\n&#039;1e4&#039; is numeric\n&#039;not numeric&#039; is NOT numeric\n&#039;Array&#039; is NOT numeric\n&#039;9.1&#039; is numeric\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    ctype_digit() - Check for numeric character(s)\n    is_bool() - Finds out whether a variable is a boolean\n    is_null() - Finds whether a variable is NULL\n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_string() - Find whether the type of a variable is string\n    is_object() - Finds whether a variable is an object\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.is-scalar.php","title":"is_scalar","description":"\n \n  is_scalar\n  (PHP 4 &gt;= 4.0.5, PHP 5)is_scalar &mdash; \n   Finds whether a variable is a scalar\n  \n\n \n\n \n  Description\n  \n   bool is_scalar\n    ( mixed $var\n   )\n\n  \n   Finds whether the given variable is a scalar.\n  \n  \n   Scalar variables are those containing an integer, \n   float, string or boolean.  \n   Types array, object and resource \n   are not scalar.\n  \n  Note: \n   \n    is_scalar() does not consider resource\n    type values to be scalar as resources are abstract datatypes \n    which are currently based on integers. This implementation detail should \n    not be relied upon, as it may change.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being evaluated.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if var is a scalar FALSE\n   otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 is_scalar() example\n    \n\n\n&lt;?phpfunction&nbsp;show_var($var)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_scalar($var))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$var;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var_dump($var);&nbsp;&nbsp;&nbsp;&nbsp;}}$pi&nbsp;=&nbsp;3.1416;$proteins&nbsp;=&nbsp;array(\"hemoglobin\",&nbsp;\"cytochrome&nbsp;c&nbsp;oxidase\",&nbsp;\"ferredoxin\");show_var($pi);show_var($proteins)?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n3.1416\narray(3) {\n  [0]=&gt;\n  string(10) &quot;hemoglobin&quot;\n  [1]=&gt;\n  string(20) &quot;cytochrome c oxidase&quot;\n  [2]=&gt;\n  string(10) &quot;ferredoxin&quot;\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    is_float() - Finds whether the type of a variable is float\n    is_int() - Find whether the type of a variable is integer\n    is_numeric() - Finds whether a variable is a number or a numeric string\n    is_real() - Alias of is_float\n    is_string() - Find whether the type of a variable is string\n    is_bool() - Finds out whether a variable is a boolean\n    is_object() - Finds whether a variable is an object\n    is_array() - Finds whether a variable is an array\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.settype.php","title":"settype","description":"\n \n  settype\n  (PHP 4, PHP 5)settype &mdash; Set the type of a variable\n\n \n\n \n  Description\n  \n   bool settype\n    ( mixed &$var\n   , string $type\n   )\n\n  \n   Set the type of variable var to\n   type.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable being converted.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       Possibles values of type are:\n       \n        \n         \n          &quot;boolean&quot; (or, since PHP 4.2.0, &quot;bool&quot;)\n         \n        \n        \n         \n          &quot;integer&quot; (or, since PHP 4.2.0, &quot;int&quot;)\n         \n        \n        \n         \n          &quot;float&quot; (only possible since PHP 4.2.0, for older versions use the\n          deprecated variant &quot;double&quot;)\n         \n        \n        \n         \n          &quot;string&quot;\n         \n        \n        \n         \n          &quot;array&quot;\n         \n        \n        \n         \n          &quot;object&quot;\n         \n        \n        \n         \n          &quot;null&quot; (since PHP 4.2.0)\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 settype() example\n    \n\n&lt;?php$foo&nbsp;=&nbsp;\"5bar\";&nbsp;\/\/&nbsp;string$bar&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;\/\/&nbsp;booleansettype($foo,&nbsp;\"integer\");&nbsp;\/\/&nbsp;$foo&nbsp;is&nbsp;now&nbsp;5&nbsp;&nbsp;&nbsp;(integer)settype($bar,&nbsp;\"string\");&nbsp;&nbsp;\/\/&nbsp;$bar&nbsp;is&nbsp;now&nbsp;\"1\"&nbsp;(string)?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Maximum value for &quot;int&quot; is PHP_INT_MAX.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gettype() - Get the type of a variable\n    type-casting\n    type-juggling\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.isset.php","title":"isset","description":"\n \n  isset\n  (PHP 4, PHP 5)isset &mdash; Determine if a variable is set and is not NULL\n\n \n \n \n Description\n  \n   bool isset\n    ( mixed $var\n   [, mixed $...\n  ] )\n\n  \n   Determine if a variable is set and is not NULL.\n  \n  \n   If a variable has been unset with unset(), it will no\n   longer be set. isset() will return FALSE if testing a\n   variable that has been set to NULL. Also note that a NULL byte\n   (&quot;\\0&quot;) is not equivalent to the PHP NULL constant.\n  \n  \n   If multiple parameters are supplied then isset() will\n   return TRUE only if all of the parameters are set. Evaluation goes from\n   left to right and stops as soon as an unset variable is encountered.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable to be checked.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Another variable ...\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if var exists and has value other\n   than NULL, FALSE otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 isset() Examples\n    \n\n&lt;?php$var&nbsp;=&nbsp;'';\/\/&nbsp;This&nbsp;will&nbsp;evaluate&nbsp;to&nbsp;TRUE&nbsp;so&nbsp;the&nbsp;text&nbsp;will&nbsp;be&nbsp;printed.if&nbsp;(isset($var))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"This&nbsp;var&nbsp;is&nbsp;set&nbsp;so&nbsp;I&nbsp;will&nbsp;print.\";}\/\/&nbsp;In&nbsp;the&nbsp;next&nbsp;examples&nbsp;we'll&nbsp;use&nbsp;var_dump&nbsp;to&nbsp;output\/\/&nbsp;the&nbsp;return&nbsp;value&nbsp;of&nbsp;isset().$a&nbsp;=&nbsp;\"test\";$b&nbsp;=&nbsp;\"anothertest\";var_dump(isset($a));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;TRUEvar_dump(isset($a,&nbsp;$b));&nbsp;\/\/&nbsp;TRUEunset&nbsp;($a);var_dump(isset($a));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;FALSEvar_dump(isset($a,&nbsp;$b));&nbsp;\/\/&nbsp;FALSE$foo&nbsp;=&nbsp;NULL;var_dump(isset($foo));&nbsp;&nbsp;&nbsp;\/\/&nbsp;FALSE?&gt;\n\n\n    \n\n   \n  \n  \n   This also work for elements in arrays:\n   \n    \n\n&lt;?php$a&nbsp;=&nbsp;array&nbsp;('test'&nbsp;=&gt;&nbsp;1,&nbsp;'hello'&nbsp;=&gt;&nbsp;NULL,&nbsp;'pie'&nbsp;=&gt;&nbsp;array('a'&nbsp;=&gt;&nbsp;'apple'));var_dump(isset($a['test']));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;TRUEvar_dump(isset($a['foo']));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;FALSEvar_dump(isset($a['hello']));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;FALSE\/\/&nbsp;The&nbsp;key&nbsp;'hello'&nbsp;equals&nbsp;NULL&nbsp;so&nbsp;is&nbsp;considered&nbsp;unset\/\/&nbsp;If&nbsp;you&nbsp;want&nbsp;to&nbsp;check&nbsp;for&nbsp;NULL&nbsp;key&nbsp;values&nbsp;then&nbsp;try:&nbsp;var_dump(array_key_exists('hello',&nbsp;$a));&nbsp;\/\/&nbsp;TRUE\/\/&nbsp;Checking&nbsp;deeper&nbsp;array&nbsp;valuesvar_dump(isset($a['pie']['a']));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;TRUEvar_dump(isset($a['pie']['b']));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;FALSEvar_dump(isset($a['cake']['a']['b']));&nbsp;&nbsp;\/\/&nbsp;FALSE?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    isset() only works with variables as passing anything\n    else will result in a parse error.  For checking if \n    constants are set use the \n    defined() function.\n   \n  \n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions\n\n  Note: \n   \n    When using isset() on inaccessible object properties,\n    the __isset\n    overloading method will be called, if declared.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    empty() - Determine whether a variable is empty\n    __isset\n    unset() - Unset a given variable\n    defined() - Checks whether a given named constant exists\n    the type comparison tables\n    array_key_exists() - Checks if the given key or index exists in the array\n    is_null() - Finds whether a variable is NULL\n    the error control @ operator\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.strval.php","title":"strval","description":"\n \n  strval\n  (PHP 4, PHP 5)strval &mdash; Get string value of a variable\n\n \n \n \n  Description\n  \n   string strval\n    ( mixed $var\n   )\n\n  \n   Get the string value of a variable.\n   See the documentation on string for more information\n   on converting to string.\n  \n  \n   This function performs no formatting on the returned value. If you\n   are looking for a way to format a numeric value as a string, please\n   see sprintf() or number_format().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable that is being converted to a string.\n      \n      \n       var may be any scalar type or an object that\n       implements the __toString\n       method. You cannot use strval() on arrays or on\n       objects that do not implement the\n       __toString method.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The string value of var.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     strval() example using PHP 5&#039;s magic\n     __toString method.\n    \n    \n\n&lt;?phpclass&nbsp;StrValTest{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__toString()&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;__CLASS__;&nbsp;&nbsp;&nbsp;&nbsp;}}\/\/&nbsp;Prints&nbsp;'StrValTest'echo&nbsp;strval(new&nbsp;StrValTest);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    floatval() - Get float value of a variable\n    intval() - Get the integer value of a variable\n    settype() - Set the type of a variable\n    sprintf() - Return a formatted string\n    number_format() - Format a number with grouped thousands\n    Type juggling\n    __toString\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.print-r.php","title":"print_r","description":"\n \n  print_r\n  (PHP 4, PHP 5)print_r &mdash; \n   Prints human-readable information about a variable\n  \n\n \n \n \n  Description\n  \n   mixed print_r\n    ( mixed $expression\n   [, bool $return = false\n  ] )\n\n  \n   print_r() displays information about a variable\n   in a way that&#039;s readable by humans.  \n  \n  \n   print_r(), var_dump() and\n   var_export() will\n   also show protected and private properties of objects with PHP 5.\n   Static class members will not be shown.\n  \n  \n   Remember that print_r() will move the array\n   pointer to the end. Use reset() to bring\n   it back to beginning.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     expression\n     \n\n      \n       The expression to be printed.\n      \n     \n\n    \n\n    \n\n     return\n     \n\n      \n       If you would like to capture the output of print_r(), \n       use the return parameter.  When this parameter is set\n       to TRUE, print_r() will return the information rather than print it.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If given a string, integer or float,\n   the value itself will be printed.  If given an array, values\n   will be presented in a format that shows keys and elements.  Similar\n   notation is used for objects.\n  \n  \n   When the return parameter is TRUE, this function\n   will return a string. Otherwise, the return value is TRUE.\n  \n \n\n\n \n  Notes\n  Note: When the return parameter\nis used, this function uses internal output buffering so it can not be used inside an\nob_start() callback function.\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The return parameter was added. If you need to\n        capture the output of print_r() with an older \n        version of PHP prior, use the \n        output-control functions.\n       \n      \n\n      \n       4.0.4\n       \n        Prior to PHP 4.0.4, print_r() will continue forever\n        if given an array or object that\n        contains a direct or indirect reference to itself.  An example\n        is print_r($GLOBALS) because\n        $GLOBALS is itself a global variable that\n        contains a reference to itself.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 print_r() example\n    \n\n&lt;pre&gt;&lt;?php$a&nbsp;=&nbsp;array&nbsp;('a'&nbsp;=&gt;&nbsp;'apple',&nbsp;'b'&nbsp;=&gt;&nbsp;'banana',&nbsp;'c'&nbsp;=&gt;&nbsp;array&nbsp;('x',&nbsp;'y',&nbsp;'z'));print_r&nbsp;($a);?&gt;&lt;\/pre&gt;\n\n    \n\n    The above example will output:\n    \n\n&lt;pre&gt;\nArray\n(\n    [a] =&gt; apple\n    [b] =&gt; banana\n    [c] =&gt; Array\n        (\n            [0] =&gt; x\n            [1] =&gt; y\n            [2] =&gt; z\n        )\n)\n&lt;\/pre&gt;\n\n    \n   \n  \n  \n   \n    Example #2 return parameter example\n    \n\n&lt;?php$b&nbsp;=&nbsp;array&nbsp;('m'&nbsp;=&gt;&nbsp;'monkey',&nbsp;'foo'&nbsp;=&gt;&nbsp;'bar',&nbsp;'x'&nbsp;=&gt;&nbsp;array&nbsp;('x',&nbsp;'y',&nbsp;'z'));$results&nbsp;=&nbsp;print_r($b,&nbsp;true);&nbsp;\/\/&nbsp;$results&nbsp;now&nbsp;contains&nbsp;output&nbsp;from&nbsp;print_r?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    var_dump() - Dumps information about a variable\n    var_export() - Outputs or returns a parsable string representation of a variable\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.serialize.php","title":"serialize","description":"\n \n  serialize\n  (PHP 4, PHP 5)serialize &mdash; Generates a storable representation of a value\n\n \n \n \n  Description\n   \n    string serialize\n     ( mixed $value\n    )\n\n  \n   Generates a storable representation of a value\n  \n  \n   This is useful for storing or passing PHP values around without\n   losing their type and structure.\n  \n  \n   To make the serialized string into a PHP value again, use\n   unserialize().  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       The value to be serialized. serialize()\n       handles all types, except the resource-type.\n       You can even serialize() arrays that contain\n       references to itself. Circular references inside the array\/object you \n       are serializing will also be stored. Any other \n       reference will be lost.\n      \n      \n       When serializing objects, PHP will attempt to call the member function\n       __sleep prior to serialization. \n       This is to allow the object to do any last minute clean-up, etc. prior \n       to being serialized. Likewise, when the object is restored using \n       unserialize() the __wakeup member function is called.\n      \n      Note: \n       \n       Object&#039;s private members have the class name prepended to the member\n       name; protected members have a &#039;*&#039; prepended to the member name.\n       These prepended values have null bytes on either side.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string containing a byte-stream representation of \n   value that can be stored anywhere.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 serialize() example\n    \n\n&lt;?php\/\/&nbsp;$session_data&nbsp;contains&nbsp;a&nbsp;multi-dimensional&nbsp;array&nbsp;with&nbsp;session\/\/&nbsp;information&nbsp;for&nbsp;the&nbsp;current&nbsp;user.&nbsp;&nbsp;We&nbsp;use&nbsp;serialize()&nbsp;to&nbsp;store\/\/&nbsp;it&nbsp;in&nbsp;a&nbsp;database&nbsp;at&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;request.$conn&nbsp;=&nbsp;odbc_connect(\"webdb\",&nbsp;\"php\",&nbsp;\"chicken\");$stmt&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"UPDATE&nbsp;sessions&nbsp;SET&nbsp;data&nbsp;=&nbsp;?&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;?\");$sqldata&nbsp;=&nbsp;array&nbsp;(serialize($session_data),&nbsp;$_SERVER['PHP_AUTH_USER']);if&nbsp;(!odbc_execute($stmt,&nbsp;$sqldata))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$stmt&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"INSERT&nbsp;INTO&nbsp;sessions&nbsp;(id,&nbsp;data)&nbsp;VALUES(?,&nbsp;?)\");&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!odbc_execute($stmt,&nbsp;$sqldata))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Something&nbsp;went&nbsp;wrong..&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.7\n       \n        The object serialization process was fixed.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    Note that many built-in PHP objects cannot be serialized. However, those with \n    this ability either implement the Serializable interface or the \n    magic __sleep and\n    __wakeup methods. If an \n    internal class does not fulfill any of those requirements, it cannot reliably be \n    serialized.\n   \n   \n    There are some historical exceptions to the above rule, where some internal objects \n    could be serialized without implementing the interface or exposing the methods. Notably, \n    the ArrayObject prior to PHP 5.2.0.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    unserialize() - Creates a PHP value from a stored representation\n    Serializing Objects\n    __sleep\n    __wakeup\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unserialize.php","title":"unserialize","description":"\n \n  unserialize\n  (PHP 4, PHP 5)unserialize &mdash; \n   Creates a PHP value from a stored representation\n  \n\n \n \n \n  Description\n  \n   mixed unserialize\n    ( string $str\n   )\n\n  \n   unserialize() takes a single serialized variable and\n   converts it back into a PHP value.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The serialized string.\n      \n      \n       If the variable being unserialized is an object, after successfully \n       reconstructing the object PHP will automatically attempt to call the\n       __wakeup member\n       function (if it exists).\n      \n      \n       Note: \n        unserialize_callback_func directive\n        \n         It&#039;s possible to set a callback-function which will be called,\n         if an undefined class should be instantiated during unserializing.\n         (to prevent getting an incomplete object &quot;__PHP_Incomplete_Class&quot;.)\n         Use your php.ini, ini_set() or .htaccess \n         to define &#039;unserialize_callback_func&#039;.  Everytime an undefined class\n         should be instantiated, it&#039;ll be called.  To disable this feature just\n         empty this setting.\n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The converted value is returned, and can be a boolean,\n   integer, float, string,\n   array or object.\n  \n  \n   In case the passed string is not unserializeable, FALSE is returned and\n   E_NOTICE is issued.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The directive unserialize_callback_func became available.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 unserialize() example\n    \n\n&lt;?php\/\/&nbsp;Here,&nbsp;we&nbsp;use&nbsp;unserialize()&nbsp;to&nbsp;load&nbsp;session&nbsp;data&nbsp;to&nbsp;the\/\/&nbsp;$session_data&nbsp;array&nbsp;from&nbsp;the&nbsp;string&nbsp;selected&nbsp;from&nbsp;a&nbsp;database.\/\/&nbsp;This&nbsp;example&nbsp;complements&nbsp;the&nbsp;one&nbsp;described&nbsp;with&nbsp;serialize().$conn&nbsp;=&nbsp;odbc_connect(\"webdb\",&nbsp;\"php\",&nbsp;\"chicken\");$stmt&nbsp;=&nbsp;odbc_prepare($conn,&nbsp;\"SELECT&nbsp;data&nbsp;FROM&nbsp;sessions&nbsp;WHERE&nbsp;id&nbsp;=&nbsp;?\");$sqldata&nbsp;=&nbsp;array($_SERVER['PHP_AUTH_USER']);if&nbsp;(!odbc_execute($stmt,&nbsp;$sqldata)&nbsp;||&nbsp;!odbc_fetch_into($stmt,&nbsp;$tmp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;if&nbsp;the&nbsp;execute&nbsp;or&nbsp;fetch&nbsp;fails,&nbsp;initialize&nbsp;to&nbsp;empty&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;$session_data&nbsp;=&nbsp;array();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;we&nbsp;should&nbsp;now&nbsp;have&nbsp;the&nbsp;serialized&nbsp;data&nbsp;in&nbsp;$tmp[0].&nbsp;&nbsp;&nbsp;&nbsp;$session_data&nbsp;=&nbsp;unserialize($tmp[0]);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is_array($session_data))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;something&nbsp;went&nbsp;wrong,&nbsp;initialize&nbsp;to&nbsp;empty&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$session_data&nbsp;=&nbsp;array();&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 unserialize_callback_func example\n    \n\n&lt;?php$serialized_object='O:1:\"a\":1:{s:5:\"value\";s:3:\"100\";}';\/\/&nbsp;unserialize_callback_func&nbsp;directive&nbsp;available&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.2.0ini_set('unserialize_callback_func',&nbsp;'mycallback');&nbsp;\/\/&nbsp;set&nbsp;your&nbsp;callback_functionfunction&nbsp;mycallback($classname)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;just&nbsp;include&nbsp;a&nbsp;file&nbsp;containing&nbsp;your&nbsp;classdefinition&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;you&nbsp;get&nbsp;$classname&nbsp;to&nbsp;figure&nbsp;out&nbsp;which&nbsp;classdefinition&nbsp;is&nbsp;required}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Warning\n   \n    FALSE is returned both in the case of an error and if unserializing\n    the serialized FALSE value. It is possible to catch this special case by\n    comparing str with\n    serialize(false) or by catching the issued\n    E_NOTICE.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    serialize() - Generates a storable representation of a value\n    Autoloading Objects\n    unserialize_callback_func\n    __wakeup\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.var-dump.php","title":"var_dump","description":"\n \n  var_dump\n  (PHP 4, PHP 5)var_dump &mdash; Dumps information about a variable\n\n \n\n \n  Description\n  \n   void var_dump\n    ( mixed $expression\n   [, mixed $...\n  ] )\n\n  \n   This function displays structured information about one or more\n   expressions that includes its type and value. Arrays and objects are\n   explored recursively with values indented to show structure.\n  \n  \n   In PHP 5 all public, private and protected properties of objects will be\n   returned in the output.\n  \n  TipAs with anything that outputs\nits result directly to the browser, the output-control functions can be used to capture\nthe output of this function, and save it in a\nstring (for example).\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     expression\n     \n\n      \n       The variable you want to dump.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 var_dump() example\n    \n\n&lt;?php$a&nbsp;=&nbsp;array(1,&nbsp;2,&nbsp;array(\"a\",&nbsp;\"b\",&nbsp;\"c\"));var_dump($a);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(3) {\n  [0]=&gt;\n  int(1)\n  [1]=&gt;\n  int(2)\n  [2]=&gt;\n  array(3) {\n    [0]=&gt;\n    string(1) &quot;a&quot;\n    [1]=&gt;\n    string(1) &quot;b&quot;\n    [2]=&gt;\n    string(1) &quot;c&quot;\n  }\n}\n\n    \n    \n\n&lt;?php$b&nbsp;=&nbsp;3.1;$c&nbsp;=&nbsp;true;var_dump($b,&nbsp;$c);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nfloat(3.1)\nbool(true)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    var_export() - Outputs or returns a parsable string representation of a variable\n    print_r() - Prints human-readable information about a variable\n   \n    \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.unset.php","title":"unset","description":"\n \n  unset\n  (PHP 4, PHP 5)unset &mdash; Unset a given variable\n\n \n \n \n  Description\n  \n   void unset\n    ( mixed $var\n   [, mixed $...\n  ] )\n\n  \n   unset() destroys the specified variables. \n  \n  \n   The behavior of unset() inside of a function\n   can vary depending on what type of variable you are attempting to\n   destroy.\n  \n  \n   If a globalized variable is unset() inside of\n   a function, only the local variable is destroyed.  The variable\n   in the calling environment will retain the same value as before\n   unset() was called.\n   \n    \n\n&lt;?phpfunction&nbsp;destroy_foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;$foo;&nbsp;&nbsp;&nbsp;&nbsp;unset($foo);}$foo&nbsp;=&nbsp;'bar';destroy_foo();echo&nbsp;$foo;?&gt;\n\n\n    \n\n   \n  \n  The above example will output:\n  \n   \n    \n\nbar\n\n    \n   \n  \n  \n   To unset() a global variable\n   inside of a function, then use\n   the $GLOBALS array to do so:\n   \n    \n\n&lt;?phpfunction&nbsp;foo()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;unset($GLOBALS['bar']);}$bar&nbsp;=&nbsp;\"something\";foo();?&gt;\n\n\n    \n\n   \n  \n  \n   If a variable that is PASSED BY REFERENCE is\n   unset() inside of a function, only the local\n   variable is destroyed.  The variable in the calling environment\n   will retain the same value as before unset()\n   was called.\n   \n    \n\n&lt;?phpfunction&nbsp;foo(&amp;$bar)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;unset($bar);&nbsp;&nbsp;&nbsp;&nbsp;$bar&nbsp;=&nbsp;\"blah\";}$bar&nbsp;=&nbsp;'something';echo&nbsp;\"$bar\\n\";foo($bar);echo&nbsp;\"$bar\\n\";?&gt;\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nsomething\nsomething\n\n    \n   \n  \n  \n   If a static variable is unset() inside of a\n   function, unset() destroys the variable only in the\n   context of the rest of a function. Following calls will restore the\n   previous value of a variable.\n   \n    \n\n&lt;?phpfunction&nbsp;foo(){&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;$bar;&nbsp;&nbsp;&nbsp;&nbsp;$bar++;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Before&nbsp;unset:&nbsp;$bar,&nbsp;\";&nbsp;&nbsp;&nbsp;&nbsp;unset($bar);&nbsp;&nbsp;&nbsp;&nbsp;$bar&nbsp;=&nbsp;23;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"after&nbsp;unset:&nbsp;$bar\\n\";}foo();foo();foo();?&gt;\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nBefore unset: 1, after unset: 23\nBefore unset: 2, after unset: 23\nBefore unset: 3, after unset: 23\n\n    \n   \n  \n \n\n  \n \n  Parameters\n  \n   \n\n    \n\n     var\n     \n\n      \n       The variable to be unset.\n      \n     \n\n    \n\n    \n\n     ...\n     \n\n      \n       Another variable ...\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.0.1\n       \n        Added support for multiple arguments.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 unset() example\n    \n\n&lt;?php\/\/&nbsp;destroy&nbsp;a&nbsp;single&nbsp;variableunset($foo);\/\/&nbsp;destroy&nbsp;a&nbsp;single&nbsp;element&nbsp;of&nbsp;an&nbsp;arrayunset($bar['quux']);\/\/&nbsp;destroy&nbsp;more&nbsp;than&nbsp;one&nbsp;variableunset($foo1,&nbsp;$foo2,&nbsp;$foo3);?&gt;\n\n\n    \n\n   \n   \n    Example #2 Using (unset) casting\n    \n\n&lt;?php$name&nbsp;=&nbsp;'Felipe';var_dump((unset)&nbsp;$name);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions\n\n  Note: \n   \n    It is possible to unset even object properties visible in current context.\n   \n  \n  Note: \n   \n    It is not possible to unset $this inside an object\n    method since PHP 5.\n   \n  \n  Note: \n   \n    When using unset() on inaccessible object properties,\n    the __unset\n    overloading method will be called, if declared.\n   \n  \n \n\n \n \n  See Also\n  \n   \n    isset() - Determine if a variable is set and is not NULL\n    empty() - Determine whether a variable is empty\n    __unset\n    array_splice() - Remove a portion of the array and replace it with something else\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-decode-request.php","title":"xmlrpc_decode_request","description":"\n \n  xmlrpc_decode_request\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_decode_request &mdash; Decodes XML into native PHP types\n\n \n \n  Description\n  \n   mixed xmlrpc_decode_request\n    ( string $xml\n   , string &$method\n   [, string $encoding\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-encode.php","title":"xmlrpc_encode","description":"\n \n  xmlrpc_encode\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_encode &mdash; Generates XML for a PHP value\n\n \n \n  Description\n  \n   string xmlrpc_encode\n    ( mixed $value\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-get-type.php","title":"xmlrpc_get_type","description":"\n \n  xmlrpc_get_type\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_get_type &mdash; Gets xmlrpc type for a PHP value\n\n \n \n  Description\n  \n   string xmlrpc_get_type\n    ( mixed $value\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  \n   This function is especially useful for base64 and datetime strings.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       PHP value\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the XML-RPC type.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 XML-RPC type example\n    \n\n&lt;?phpecho&nbsp;xmlrpc_get_type(null)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;base64echo&nbsp;xmlrpc_get_type(false)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;booleanecho&nbsp;xmlrpc_get_type(1)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;intecho&nbsp;xmlrpc_get_type(1.0)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;doubleecho&nbsp;xmlrpc_get_type(\"\")&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;stringecho&nbsp;xmlrpc_get_type(array())&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;arrayecho&nbsp;xmlrpc_get_type(new&nbsp;stdClass)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;arrayecho&nbsp;xmlrpc_get_type(STDIN)&nbsp;.&nbsp;\"\\n\";&nbsp;\/\/&nbsp;int?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    xmlrpc_set_type() - Sets xmlrpc type, base64 or datetime, for a PHP string value\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-encode-request.php","title":"xmlrpc_encode_request","description":"\n \n  xmlrpc_encode_request\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_encode_request &mdash; Generates XML for a method request\n\n \n \n  Description\n  \n   string xmlrpc_encode_request\n    ( string $method\n   , mixed $params\n   [, array $output_options\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     method\n     \n\n      \n       Name of the method to call.\n      \n     \n\n    \n\n    \n\n     params\n     \n\n      \n       Method parameters compatible with method signature.\n      \n     \n\n    \n\n    \n\n     output_options\n     \n\n      \n       Array specifying output options may contain (default values are\n       emphasised):\n       \n        output_type: php, xml\n        verbosity: no_white_space, newlines_only, pretty\n        escaping: cdata, non-ascii, non-print, markup\n          (may be a string with one value or an array with multiple values)\n        version: simple, xmlrpc, soap 1.1, auto\n        encoding: iso-8859-1, other character set supported by iconv\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns a string containing the XML representation of the request.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 XMLRPC client functions example\n    \n\n&lt;?php$request&nbsp;=&nbsp;xmlrpc_encode_request(\"method\",&nbsp;array(1,&nbsp;2,&nbsp;3));$context&nbsp;=&nbsp;stream_context_create(array('http'&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;'method'&nbsp;=&gt;&nbsp;\"POST\",&nbsp;&nbsp;&nbsp;&nbsp;'header'&nbsp;=&gt;&nbsp;\"Content-Type:&nbsp;text\/xml\",&nbsp;&nbsp;&nbsp;&nbsp;'content'&nbsp;=&gt;&nbsp;$request)));$file&nbsp;=&nbsp;file_get_contents(\"http:\/\/www.example.com\/xmlrpc\",&nbsp;false,&nbsp;$context);$response&nbsp;=&nbsp;xmlrpc_decode($file);if&nbsp;($response&nbsp;&amp;&amp;&nbsp;xmlrpc_is_fault($response))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\"xmlrpc:&nbsp;$response[faultString]&nbsp;($response[faultCode])\");}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print_r($response);}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    stream_context_create() - Create a streams context\n    file_get_contents() - Reads entire file into a string\n    xmlrpc_decode() - Decodes XML into native PHP types\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-decode.php","title":"xmlrpc_decode","description":"\n \n  xmlrpc_decode\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_decode &mdash; Decodes XML into native PHP types\n\n \n \n  Description\n  \n   mixed xmlrpc_decode\n    ( string $xml\n   [, string $encoding = &quot;iso-8859-1&quot;\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     xml\n     \n\n      \n       XML response returned by XMLRPC method.\n      \n     \n\n    \n\n    \n\n     encoding\n     \n\n      \n       Input encoding supported by iconv.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns either an array, or an integer, or a string, or a boolean according\n   to the response returned by the XMLRPC method.\n  \n \n\n\n \n  Examples\n  \n   See example by xmlrpc_encode_request().\n  \n \n\n\n \n  See Also\n  \n   \n    xmlrpc_encode_request() - Generates XML for a method request\n    xmlrpc_is_fault() - Determines if an array value represents an XMLRPC fault\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-is-fault.php","title":"xmlrpc_is_fault","description":"\n \n  xmlrpc_is_fault\n  (PHP 4 &gt;= 4.3.0, PHP 5)xmlrpc_is_fault &mdash; Determines if an array value represents an XMLRPC fault\n\n \n \n  Description\n  \n   bool xmlrpc_is_fault\n    ( array $arg\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     arg\n     \n\n      \n       Array returned by xmlrpc_decode().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns TRUE if the argument means fault, FALSE otherwise. Fault\n   description is available in $arg[&quot;faultString&quot;], fault\n   code is in $arg[&quot;faultCode&quot;].\n  \n \n\n\n \n  Examples\n  \n   See example by xmlrpc_encode_request().\n  \n \n\n\n \n  See Also\n  \n   \n    xmlrpc_decode() - Decodes XML into native PHP types\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.var-export.php","title":"var_export","description":"\n \n  var_export\n  (PHP 4 &gt;= 4.2.0, PHP 5)var_export &mdash; Outputs or returns a parsable string representation of a variable\n\n \n\n \n  Description\n  \n   mixed var_export\n    ( mixed $expression\n   [, bool $return = false\n  ] )\n\n  \n   var_export() gets structured information about the \n   given variable. It is similar to var_dump()\n   with one exception: the returned representation is valid PHP code.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     expression\n     \n\n      \n       The variable you want to export.\n      \n     \n\n    \n\n    \n\n     return\n     \n\n      \n       If used and set to TRUE, var_export() will return\n       the variable representation instead of outputing it.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the variable representation when the return \n   parameter is used and evaluates to TRUE. Otherwise, this function will\n   return NULL.\n  \n \n\n\n \n  Notes\n  Note: When the return parameter\nis used, this function uses internal output buffering so it can not be used inside an\nob_start() callback function.\n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Possibility to export classes and arrays containing classes using the\n        __set_state magic\n        method.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 var_export() Examples\n    \n\n&lt;?php$a&nbsp;=&nbsp;array&nbsp;(1,&nbsp;2,&nbsp;array&nbsp;(\"a\",&nbsp;\"b\",&nbsp;\"c\"));var_export($a);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray (\n  0 =&gt; 1,\n  1 =&gt; 2,\n  2 =&gt; \n  array (\n    0 =&gt; &#039;a&#039;,\n    1 =&gt; &#039;b&#039;,\n    2 =&gt; &#039;c&#039;,\n  ),\n)\n\n    \n    \n\n&lt;?php$b&nbsp;=&nbsp;3.1;$v&nbsp;=&nbsp;var_export($b,&nbsp;true);echo&nbsp;$v;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n3.1\n\n    \n   \n  \n  \n   \n    Example #2 Exporting classes since PHP 5.1.0\n    \n\n&lt;?phpclass&nbsp;A&nbsp;{&nbsp;public&nbsp;$var;&nbsp;}$a&nbsp;=&nbsp;new&nbsp;A;$a-&gt;var&nbsp;=&nbsp;5;var_export($a);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nA::__set_state(array(\n   &#039;var&#039; =&gt; 5,\n))\n\n    \n   \n  \n  \n   \n    Example #3 Using __set_state (since PHP 5.1.0)\n    \n\n&lt;?phpclass&nbsp;A{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$var1;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$var2;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;__set_state($an_array)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj&nbsp;=&nbsp;new&nbsp;A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj-&gt;var1&nbsp;=&nbsp;$an_array['var1'];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$obj-&gt;var2&nbsp;=&nbsp;$an_array['var2'];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$obj;&nbsp;&nbsp;&nbsp;&nbsp;}}$a&nbsp;=&nbsp;new&nbsp;A;$a-&gt;var1&nbsp;=&nbsp;5;$a-&gt;var2&nbsp;=&nbsp;'foo';eval('$b&nbsp;=&nbsp;'&nbsp;.&nbsp;var_export($a,&nbsp;true)&nbsp;.&nbsp;';');&nbsp;\/\/&nbsp;$b&nbsp;=&nbsp;A::__set_state(array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;&nbsp;&nbsp;&nbsp;'var1'&nbsp;=&gt;&nbsp;5,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;&nbsp;&nbsp;&nbsp;'var2'&nbsp;=&gt;&nbsp;'foo',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;));var_dump($b);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nobject(A)#2 (2) {\n  [&quot;var1&quot;]=&gt;\n  int(5)\n  [&quot;var2&quot;]=&gt;\n  string(3) &quot;foo&quot;\n}\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Variables of type resource couldn&#039;t be exported by this\n    function.\n   \n  \n  Note: \n   \n    var_export() does not handle circular references as\n    it would be close to impossible to generate parsable PHP code for that.\n    If you want to do something with the full representation of an array\n    or object, use serialize().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    print_r() - Prints human-readable information about a variable\n    serialize() - Generates a storable representation of a value\n    var_dump() - Dumps information about a variable\n   \n    \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-parse-method-descriptions.php","title":"xmlrpc_parse_method_descriptions","description":"\n \n  xmlrpc_parse_method_descriptions\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_parse_method_descriptions &mdash; Decodes XML into a list of method descriptions\n\n \n \n  Description\n  \n   array xmlrpc_parse_method_descriptions\n    ( string $xml\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-add-introspection-data.php","title":"xmlrpc_server_add_introspection_data","description":"\n \n  xmlrpc_server_add_introspection_data\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_add_introspection_data &mdash; Adds introspection documentation\n\n \n \n  Description\n  \n   int xmlrpc_server_add_introspection_data\n    ( resource $server\n   , array $desc\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-call-method.php","title":"xmlrpc_server_call_method","description":"\n \n  xmlrpc_server_call_method\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_call_method &mdash; Parses XML requests and call methods\n\n \n \n  Description\n  \n   string xmlrpc_server_call_method\n    ( resource $server\n   , string $xml\n   , mixed $user_data\n   [, array $output_options\n  ] )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-create.php","title":"xmlrpc_server_create","description":"\n \n  xmlrpc_server_create\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_create &mdash; Creates an xmlrpc server\n\n \n \n  Description\n  \n   resource xmlrpc_server_create\n    ( void\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-destroy.php","title":"xmlrpc_server_destroy","description":"\n \n  xmlrpc_server_destroy\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_destroy &mdash; Destroys server resources\n\n \n \n  Description\n  \n   int xmlrpc_server_destroy\n    ( resource $server\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-register-introspection-callback.php","title":"xmlrpc_server_register_introspection_callback","description":"\n \n  xmlrpc_server_register_introspection_callback\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_register_introspection_callback &mdash; Register a PHP function to generate documentation\n\n \n \n  Description\n  \n   bool xmlrpc_server_register_introspection_callback\n    ( resource $server\n   , string $function\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-server-register-method.php","title":"xmlrpc_server_register_method","description":"\n \n  xmlrpc_server_register_method\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_server_register_method &mdash; Register a PHP function to resource method matching method_name\n\n \n \n  Description\n  \n   bool xmlrpc_server_register_method\n    ( resource $server\n   , string $method_name\n   , string $function\n   )\n\n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.xmlrpc-set-type.php","title":"xmlrpc_set_type","description":"\n \n  xmlrpc_set_type\n  (PHP 4 &gt;= 4.1.0, PHP 5)xmlrpc_set_type &mdash; Sets xmlrpc type, base64 or datetime, for a PHP string value\n\n \n \n  Description\n  \n   bool xmlrpc_set_type\n    ( string &$value\n   , string $type\n   )\n\n  \n   Sets xmlrpc type, base64 or datetime, for a PHP string value.\n  \n  WarningThis function is\nEXPERIMENTAL. The behaviour of this function, its name, and\nsurrounding documentation may change without notice in a future release of PHP.\nThis function should be used at your own risk.\n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     value\n     \n\n      \n       Value to set the type\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       &#039;base64&#039; or &#039;datetime&#039;\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n   If successful, value is converted to an object.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A xmlrpc_set_type() example\n    \n    \n    \n\n&lt;?php$params&nbsp;=&nbsp;date(\"Ymd\\TH:i:s\",&nbsp;time());xmlrpc_set_type($params,&nbsp;'datetime');echo&nbsp;xmlrpc_encode($params);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;params&gt;\n&lt;param&gt;\n &lt;value&gt;\n  &lt;dateTime.iso8601&gt;20090322T23:43:03&lt;\/dateTime.iso8601&gt;\n &lt;\/value&gt;\n&lt;\/param&gt;\n&lt;\/params&gt;\n\n    \n   \n  \n \n\n\n \n  Errors\/Exceptions\n  \n   Issues E_WARNING with type unsupported by XMLRPC.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-emit-file.php","title":"yaml_emit_file","description":"\n \n  yaml_emit_file\n  (PECL yaml &gt;= 0.5.0)yaml_emit_file &mdash; Send the YAML representation of a value to a file\n\n \n\n \n  Description\n  \n   bool yaml_emit_file\n    ( string $filename\n   , mixed $data\n   [, int $encoding = YAML_ANY_ENCODING\n   [, int $linebreak = YAML_ANY_BREAK\n  ]] )\n\n  \n   Generate a YAML representation of the provided data\n   in the filename.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     data\n     \n\n      \n       The data being encoded. Can be any type except\n       a resource.\n      \n     \n\n    \n\n    \n\n     encoding\n     \n\n      \n       Output character encoding chosen from\n       YAML_ANY_ENCODING,\n       YAML_UTF8_ENCODING,\n       YAML_UTF16LE_ENCODING,\n       YAML_UTF16BE_ENCODING. Defaults to\n       YAML_ANY_ENCODING.\n      \n     \n\n    \n\n    \n\n     linebreak\n     \n\n      \n       Output linebreak style chosen from\n       YAML_ANY_BREAK,\n       YAML_CR_BREAK,\n       YAML_LN_BREAK,\n       YAML_CRLN_BREAK. Defaults to\n       YAML_ANY_BREAK.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n  Returns TRUE on success.\n  \n \n\n\n\n \n  See Also\n  \n   \n    yaml_emit() - Returns the YAML representation of a value\n    yaml_parse() - Parse a YAML stream\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-emit.php","title":"yaml_emit","description":"\n \n  yaml_emit\n  (PECL yaml &gt;= 0.5.0)yaml_emit &mdash; Returns the YAML representation of a value\n\n \n\n \n  Description\n  \n   string yaml_emit\n    ( mixed $data\n   [, int $encoding = YAML_ANY_ENCODING\n   [, int $linebreak = YAML_ANY_BREAK\n  ]] )\n\n  \n   Generate a YAML representation of the provided data.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data being encoded. Can be any type except\n       a resource.\n      \n     \n\n    \n\n    \n\n     encoding\n     \n\n      \n       Output character encoding chosen from\n       YAML_ANY_ENCODING,\n       YAML_UTF8_ENCODING,\n       YAML_UTF16LE_ENCODING,\n       YAML_UTF16BE_ENCODING. Defaults to\n       YAML_ANY_ENCODING.\n      \n     \n\n    \n\n    \n\n     linebreak\n     \n\n      \n       Output linebreak style chosen from\n       YAML_ANY_BREAK,\n       YAML_CR_BREAK,\n       YAML_LN_BREAK,\n       YAML_CRLN_BREAK. Defaults to\n       YAML_ANY_BREAK.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a YAML encoded string on success.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 yaml_emit() example\n    \n\n&lt;?php$addr&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;\"given\"&nbsp;=&gt;&nbsp;\"Chris\",&nbsp;&nbsp;&nbsp;&nbsp;\"family\"=&gt;&nbsp;\"Dumars\",&nbsp;&nbsp;&nbsp;&nbsp;\"address\"=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"lines\"=&gt;&nbsp;\"458&nbsp;Walkman&nbsp;Dr.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suite&nbsp;#292\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"city\"=&gt;&nbsp;\"Royal&nbsp;Oak\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"state\"=&gt;&nbsp;\"MI\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"postal\"=&gt;&nbsp;48046,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;);$invoice&nbsp;=&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;\"invoice\"=&gt;&nbsp;34843,&nbsp;&nbsp;&nbsp;&nbsp;\"date\"=&gt;&nbsp;980208000,&nbsp;&nbsp;&nbsp;&nbsp;\"bill-to\"=&gt;&nbsp;$addr,&nbsp;&nbsp;&nbsp;&nbsp;\"ship-to\"=&gt;&nbsp;$addr,&nbsp;&nbsp;&nbsp;&nbsp;\"product\"=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"sku\"=&gt;&nbsp;\"BL394D\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"quantity\"=&gt;&nbsp;4,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"description\"=&gt;&nbsp;\"Basketball\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"price\"=&gt;&nbsp;450,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"sku\"=&gt;&nbsp;\"BL4438H\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"quantity\"=&gt;&nbsp;1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"description\"=&gt;&nbsp;\"Super&nbsp;Hoop\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"price\"=&gt;&nbsp;2392,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;\"tax\"=&gt;&nbsp;251.42,&nbsp;&nbsp;&nbsp;&nbsp;\"total\"=&gt;&nbsp;4443.52,&nbsp;&nbsp;&nbsp;&nbsp;\"comments\"=&gt;&nbsp;\"Late&nbsp;afternoon&nbsp;is&nbsp;best.&nbsp;Backup&nbsp;contact&nbsp;is&nbsp;Nancy&nbsp;Billsmer&nbsp;@&nbsp;338-4338.\",&nbsp;&nbsp;);var_dump(yaml_emit($invoice));?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nstring(628) &quot;---\ninvoice: 34843\ndate: 980208000\nbill-to:\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nship-to:\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nproduct:\n- sku: BL394D\n  quantity: 4\n  description: Basketball\n  price: 450\n- sku: BL4438H\n  quantity: 1\n  description: Super Hoop\n  price: 2392\ntax: 251.420000\ntotal: 4443.520000\ncomments: Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\n...\n&quot;\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    yaml_emit_file() - Send the YAML representation of a value to a file\n    yaml_parse() - Parse a YAML stream\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse-file.php","title":"yaml_parse_file","description":"\n \n  yaml_parse_file\n  (PECL yaml &gt;= 0.4.0)yaml_parse_file &mdash; Parse a YAML stream from a file\n\n \n\n \n  Description\n  \n   mixed yaml_parse_file\n    ( string $filename\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )\n\n  \n   Convert all or part of a YAML document stream read from a file to a PHP variable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       Path to the file.\n      \n     \n\n    \n\n    \n\n     pos\n     \n\n      \n       Document to extract from stream (-1 for all\n       documents, 0 for first document, ...).\n      \n     \n\n    \n\n    \n\n     ndocs\n     \n\n      \n       If ndocs is provided, then it is filled with the\n       number of documents found in stream.\n      \n     \n\n    \n\n    \n\n     callbacks\n     \n\n      \n       Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callback mappings.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.\n  \n \n\n\n \n  See Also\n  \n   \n    yaml_parse() - Parse a YAML stream\n    yaml_parse_url() - Parse a Yaml stream from a URL\n    yaml_emit() - Returns the YAML representation of a value\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse-url.php","title":"yaml_parse_url","description":"\n \n  yaml_parse_url\n  (PECL yaml &gt;= 0.4.0)yaml_parse_url &mdash; Parse a Yaml stream from a URL\n\n \n\n \n  Description\n  \n   mixed yaml_parse_url\n    ( string $url\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )\n\n  \n   Convert all or part of a YAML document stream read from a URL to a PHP variable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     url\n     \n\n      \n       url should be of the form &quot;scheme:\/\/...&quot;. PHP\n       will search for a protocol handler (also known as a wrapper) for that\n       scheme. If no wrappers for that protocol are registered, PHP will emit\n       a notice to help you track potential problems in your script and then\n       continue as though filename specifies a regular file.\n      \n     \n\n    \n\n    \n\n     pos\n     \n\n      \n       Document to extract from stream (-1 for all\n       documents, 0 for first document, ...).\n      \n     \n\n    \n\n    \n\n     ndocs\n     \n\n      \n       If ndocs is provided, then it is filled with the\n       number of documents found in stream.\n      \n     \n\n    \n\n    \n\n     callbacks\n     \n\n      \n       Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callback mappings.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.\n  \n \n\n\n \n  See Also\n  \n   \n    yaml_parse() - Parse a YAML stream\n    yaml_parse_file() - Parse a YAML stream from a file\n    yaml_emit() - Returns the YAML representation of a value\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.yaml-parse.php","title":"yaml_parse","description":"\n \n  yaml_parse\n  (PECL yaml &gt;= 0.4.0)yaml_parse &mdash; Parse a YAML stream\n\n \n\n \n  Description\n  \n   mixed yaml_parse\n    ( string $input\n   [, int $pos = 0\n   [, int &$ndocs\n   [, array $callbacks\n  ]]] )\n\n  \n   Convert all or part of a YAML document stream to a PHP variable.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     input\n     \n\n      \n       The string to parse as a YAML document stream.\n      \n     \n\n    \n\n    \n\n     pos\n     \n\n      \n       Document to extract from stream (-1 for all\n       documents, 0 for first document, ...).\n      \n     \n\n    \n\n    \n\n     ndocs\n     \n\n      \n       If ndocs is provided, then it is filled with the\n       number of documents found in stream.\n      \n     \n\n    \n\n    \n\n     callbacks\n     \n\n      \n       Content handlers for YAML nodes. Associative array of YAML\n       tag =&gt; callback mappings.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the value encoded in input in appropriate\n   PHP type or FALSE on failure. If pos is -1 an\n   array will be returned with one entry for each document found\n   in the stream.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 yaml_parse() example\n    \n\n&lt;?php$yaml&nbsp;=&nbsp;&lt;&lt;&lt;EOD---invoice:&nbsp;34843date:&nbsp;\"2001-01-23\"bill-to:&nbsp;&amp;id001&nbsp;&nbsp;given:&nbsp;Chris&nbsp;&nbsp;family:&nbsp;Dumars&nbsp;&nbsp;address:&nbsp;&nbsp;&nbsp;&nbsp;lines:&nbsp;|-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;458&nbsp;Walkman&nbsp;Dr.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suite&nbsp;#292&nbsp;&nbsp;&nbsp;&nbsp;city:&nbsp;Royal&nbsp;Oak&nbsp;&nbsp;&nbsp;&nbsp;state:&nbsp;MI&nbsp;&nbsp;&nbsp;&nbsp;postal:&nbsp;48046ship-to:&nbsp;*id001product:-&nbsp;sku:&nbsp;BL394D&nbsp;&nbsp;quantity:&nbsp;4&nbsp;&nbsp;description:&nbsp;Basketball&nbsp;&nbsp;price:&nbsp;450-&nbsp;sku:&nbsp;BL4438H&nbsp;&nbsp;quantity:&nbsp;1&nbsp;&nbsp;description:&nbsp;Super&nbsp;Hoop&nbsp;&nbsp;price:&nbsp;2392tax:&nbsp;251.420000total:&nbsp;4443.520000comments:&nbsp;Late&nbsp;afternoon&nbsp;is&nbsp;best.&nbsp;Backup&nbsp;contact&nbsp;is&nbsp;Nancy&nbsp;Billsmer&nbsp;@&nbsp;338-4338....EOD;$parsed&nbsp;=&nbsp;yaml_parse($yaml);var_dump($parsed);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\narray(8) {\n  [&quot;invoice&quot;]=&gt;\n  int(34843)\n  [&quot;date&quot;]=&gt;\n  string(10) &quot;2001-01-23&quot;\n  [&quot;bill-to&quot;]=&gt;\n  &amp;array(3) {\n    [&quot;given&quot;]=&gt;\n    string(5) &quot;Chris&quot;\n    [&quot;family&quot;]=&gt;\n    string(6) &quot;Dumars&quot;\n    [&quot;address&quot;]=&gt;\n    array(4) {\n      [&quot;lines&quot;]=&gt;\n      string(34) &quot;458 Walkman Dr.\n        Suite #292&quot;\n      [&quot;city&quot;]=&gt;\n      string(9) &quot;Royal Oak&quot;\n      [&quot;state&quot;]=&gt;\n      string(2) &quot;MI&quot;\n      [&quot;postal&quot;]=&gt;\n      int(48046)\n    }\n  }\n  [&quot;ship-to&quot;]=&gt;\n  &amp;array(3) {\n    [&quot;given&quot;]=&gt;\n    string(5) &quot;Chris&quot;\n    [&quot;family&quot;]=&gt;\n    string(6) &quot;Dumars&quot;\n    [&quot;address&quot;]=&gt;\n    array(4) {\n      [&quot;lines&quot;]=&gt;\n      string(34) &quot;458 Walkman Dr.\n        Suite #292&quot;\n      [&quot;city&quot;]=&gt;\n      string(9) &quot;Royal Oak&quot;\n      [&quot;state&quot;]=&gt;\n      string(2) &quot;MI&quot;\n      [&quot;postal&quot;]=&gt;\n      int(48046)\n    }\n  }\n  [&quot;product&quot;]=&gt;\n  array(2) {\n    [0]=&gt;\n    array(4) {\n      [&quot;sku&quot;]=&gt;\n      string(6) &quot;BL394D&quot;\n      [&quot;quantity&quot;]=&gt;\n      int(4)\n      [&quot;description&quot;]=&gt;\n      string(10) &quot;Basketball&quot;\n      [&quot;price&quot;]=&gt;\n      int(450)\n    }\n    [1]=&gt;\n    array(4) {\n      [&quot;sku&quot;]=&gt;\n      string(7) &quot;BL4438H&quot;\n      [&quot;quantity&quot;]=&gt;\n      int(1)\n      [&quot;description&quot;]=&gt;\n      string(10) &quot;Super Hoop&quot;\n      [&quot;price&quot;]=&gt;\n      int(2392)\n    }\n  }\n  [&quot;tax&quot;]=&gt;\n  float(251.42)\n  [&quot;total&quot;]=&gt;\n  float(4443.52)\n  [&quot;comments&quot;]=&gt;\n  string(68) &quot;Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.&quot;\n}\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    yaml_parse_file() - Parse a YAML stream from a file\n    yaml_parse_url() - Parse a Yaml stream from a URL\n    yaml_emit() - Returns the YAML representation of a value\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzclose.php","title":"gzclose","description":"\n \n  gzclose\n  (PHP 4, PHP 5)gzclose &mdash; Close an open gz-file pointer\n\n \n \n  Description\n  \n   bool gzclose\n    ( resource $zp\n   )\n\n  \n   Closes the given gz-file pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzclose() example\n    \n\n&lt;?php$gz&nbsp;=&nbsp;gzopen('somefile.gz','w9');gzputs&nbsp;($gz,&nbsp;'I&nbsp;was&nbsp;added&nbsp;to&nbsp;somefile.gz');gzclose($gz);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzopen() - Open gz-file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzdeflate.php","title":"gzdeflate","description":"\n \n  gzdeflate\n  (PHP 4 &gt;= 4.0.4, PHP 5)gzdeflate &mdash; Deflate a string\n\n \n \n  Description\n  \n   string gzdeflate\n    ( string $data\n   [, int $level = -1\n  ] )\n\n  \n   This function compress the given string using the DEFLATE\n   data format.\n  \n  \n   For details on the DEFLATE compression algorithm see the document\n   &quot;&raquo;&nbsp;DEFLATE Compressed Data Format\n   Specification version 1.3&quot; (RFC 1951).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to deflate.\n      \n     \n\n    \n\n    \n\n     level\n     \n\n      \n       The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression. If not given, the default compression level will\n       be the default compression level of the zlib library.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The deflated string or FALSE if an error occurred.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzdeflate() example\n    \n\n&lt;?php$compressed&nbsp;=&nbsp;gzdeflate('Compress&nbsp;me',&nbsp;9);echo&nbsp;$compressed;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzinflate() - Inflate a deflated string\n    gzcompress() - Compress a string\n    gzuncompress() - Uncompress a compressed string\n    gzencode() - Create a gzip compressed string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzcompress.php","title":"gzcompress","description":"\n \n  gzcompress\n  (PHP 4 &gt;= 4.0.1, PHP 5)gzcompress &mdash; Compress a string\n\n \n \n  Description\n  \n   string gzcompress\n    ( string $data\n   [, int $level = -1\n  ] )\n\n  \n   This function compress the given string using the ZLIB\n   data format.\n  \n  \n   For details on the ZLIB compression algorithm see the document\n   &quot;&raquo;&nbsp;ZLIB Compressed Data Format\n   Specification version 3.3&quot; (RFC 1950).\n  \n  Note: \n   \n    This is not the same as gzip compression,\n    which includes some header data. See gzencode()\n    for gzip compression.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to compress.\n      \n     \n\n    \n\n    \n\n     level\n     \n\n      \n       The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The compressed string or FALSE if an error occurred.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzcompress() example\n    \n\n&lt;?php$compressed&nbsp;=&nbsp;gzcompress('Compress&nbsp;me',&nbsp;9);echo&nbsp;$compressed;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzdeflate() - Deflate a string\n    gzinflate() - Inflate a deflated string\n    gzuncompress() - Uncompress a compressed string\n    gzencode() - Create a gzip compressed string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzeof.php","title":"gzeof","description":"\n \n  gzeof\n  (PHP 4, PHP 5)gzeof &mdash; Test for EOF on a gz-file pointer\n\n \n \n  Description\n  \n   int gzeof\n    ( resource $zp\n   )\n\n  \n   Tests the given GZ file pointer for EOF.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n   \n   Returns TRUE if the gz-file pointer is at EOF or an error occurs;\n   otherwise returns FALSE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzeof() example\n    \n\n&lt;?php$gz&nbsp;=&nbsp;gzopen('somefile.gz',&nbsp;'r');while&nbsp;(!gzeof($gz))&nbsp;{&nbsp;&nbsp;echo&nbsp;gzgetc($gz);}gzclose($gz);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzdecode.php","title":"gzdecode","description":"\n \n  gzdecode\n  (No version information available, might only be in SVN)gzdecode &mdash; Decodes a gzip compressed string\n\n \n \n  Description\n  \n   string gzdecode\n    ( string $data\n   [, int $length\n  ] )\n\n     \n   This function returns a decoded version of the input\n   data.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to decode, encoded by gzencode().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The maximum length of data to decode.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The decoded string, or FALSE if an error occurred.\n  \n \n\n\n \n  See Also\n  \n   \n    gzencode() - Create a gzip compressed string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzencode.php","title":"gzencode","description":"\n \n  gzencode\n  (PHP 4 &gt;= 4.0.4, PHP 5)gzencode &mdash; Create a gzip compressed string\n\n \n\n \n  Description\n  \n   string gzencode\n    ( string $data\n   [, int $level = -1\n   [, int $encoding_mode = FORCE_GZIP\n  ]] )\n\n     \n   This function returns a compressed version of the input\n   data compatible with the output of the\n   gzip program.\n  \n  \n   For more information on the GZIP file format, see the document:\n   &raquo;&nbsp;GZIP file format specification\n   version 4.3 (RFC 1952).\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data to encode.\n      \n     \n\n    \n\n    \n\n     level\n     \n\n      \n       The level of compression. Can be given as 0 for no compression up to 9\n       for maximum compression. If not given, the default compression level will\n       be the default compression level of the zlib library.\n      \n     \n\n    \n\n    \n\n     encoding_mode\n     \n\n      \n       The encoding mode. Can be FORCE_GZIP (the default)\n       or FORCE_DEFLATE. \n      \n      \n       If you use FORCE_DEFLATE, you get a standard zlib\n       deflated string (inclusive zlib headers) after the gzip file header but\n       without the trailing crc32 checksum.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The encoded string, or FALSE if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The encoding_mode parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   The resulting data contains the appropriate headers and data\n   structure to make a standard .gz file, e.g.:\n   \n    Example #1 Creating a gzip file\n    \n\n&lt;?php$data&nbsp;=&nbsp;implode(\"\",&nbsp;file(\"bigfile.txt\"));$gzdata&nbsp;=&nbsp;gzencode($data,&nbsp;9);$fp&nbsp;=&nbsp;fopen(\"bigfile.txt.gz\",&nbsp;\"w\");fwrite($fp,&nbsp;$gzdata);fclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gzdecode() - Decodes a gzip compressed string\n    gzdeflate() - Deflate a string\n    gzinflate() - Inflate a deflated string\n    gzuncompress() - Uncompress a compressed string\n    gzcompress() - Compress a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzfile.php","title":"gzfile","description":"\n \n  gzfile \n  (PHP 4, PHP 5)gzfile &mdash; Read entire gz-file into an array\n\n \n \n  Description\n  \n   array gzfile\n    ( string $filename\n   [, int $use_include_path = 0\n  ] )\n\n   \n   This function is identical to readgzfile(), except that\n   it returns the file in an array.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file name.\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   An array containing the file, one line per cell.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzfile() example\n    \n\n&lt;?php$lines&nbsp;=&nbsp;gzfile('somefile.gz');foreach&nbsp;($lines&nbsp;as&nbsp;$line)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$line;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    readgzfile() - Output a gz-file\n    gzopen() - Open gz-file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgetc.php","title":"gzgetc","description":"\n \n  gzgetc\n  (PHP 4, PHP 5)gzgetc &mdash; Get character from gz-file pointer\n\n \n \n  Description\n  \n   string gzgetc\n    ( resource $zp\n   )\n\n  \n   Returns a string containing a single (uncompressed) character\n   read from the given gz-file pointer.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The uncompressed character or FALSE on EOF (unlike gzeof()).\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzgetc() example\n    \n\n&lt;?php$gz&nbsp;=&nbsp;gzopen('somefile.gz',&nbsp;'r');while&nbsp;(!gzeof($gz))&nbsp;{&nbsp;&nbsp;echo&nbsp;gzgetc($gz);}gzclose($gz);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzopen() - Open gz-file\n    gzgets() - Get line from file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgetss.php","title":"gzgetss","description":"\n \n  gzgetss\n  (PHP 4, PHP 5)gzgetss &mdash; \n   Get line from gz-file pointer and strip HTML tags\n  \n\n \n \n  Description\n  \n   string gzgetss\n    ( resource $zp\n   , int $length\n   [, string $allowable_tags\n  ] )\n\n  \n   Identical to gzgets(), except that\n   gzgetss() attempts to strip any HTML and PHP\n   tags from the text it reads.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length of data to get.\n      \n     \n\n    \n\n    \n\n     allowable_tags\n     \n\n      \n       You can use this optional parameter to specify tags which should not \n       be stripped.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The uncompressed and striped string, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzgetss() example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;gzopen('somefile.gz',&nbsp;'r');while&nbsp;(!gzeof($handle))&nbsp;{&nbsp;&nbsp;&nbsp;$buffer&nbsp;=&nbsp;gzgetss($handle,&nbsp;4096);&nbsp;&nbsp;&nbsp;echo&nbsp;$buffer;}gzclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzopen() - Open gz-file\n    gzgets() - Get line from file pointer\n    strip_tags() - Strip HTML and PHP tags from a string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzgets.php","title":"gzgets","description":"\n \n  gzgets\n  (PHP 4, PHP 5)gzgets &mdash; Get line from file pointer\n\n \n \n  Description\n  \n   string gzgets\n    ( resource $zp\n   , int $length\n   )\n\n  \n   Gets a (uncompressed) string of up to length - 1 bytes read from the given\n   file pointer. Reading ends when length - 1 bytes have been read, on a \n   newline, or on EOF (whichever comes first).\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length of data to get.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The uncompressed string, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzgets() example\n    \n\n&lt;?php$handle&nbsp;=&nbsp;gzopen('somefile.gz',&nbsp;'r');while&nbsp;(!gzeof($handle))&nbsp;{&nbsp;&nbsp;&nbsp;$buffer&nbsp;=&nbsp;gzgets($handle,&nbsp;4096);&nbsp;&nbsp;&nbsp;echo&nbsp;$buffer;}gzclose($handle);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzopen() - Open gz-file\n    gzgetc() - Get character from gz-file pointer\n    gzwrite() - Binary-safe gz-file write\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzopen.php","title":"gzopen","description":"\n \n  gzopen\n  (PHP 4, PHP 5)gzopen &mdash; Open gz-file\n\n \n \n  Description\n  \n   resource gzopen\n    ( string $filename\n   , string $mode\n   [, int $use_include_path = 0\n  ] )\n\n  \n   Opens a gzip (.gz) file for reading or writing. \n  \n  \n   gzopen() can be used to read a file which is\n   not in gzip format; in this case gzread() will\n   directly read from the file without decompression.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file name.\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       As in fopen() (rb or \n       wb) but can also include a compression level \n       (wb9) or a strategy: f for\n       filtered data as in wb6f, h for\n       Huffman only compression as in wb1h.\n       (See the description of deflateInit2\n       in zlib.h for \n       more information about the strategy parameter.)\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a file pointer to the file opened, after that, everything you read\n   from this file descriptor will be transparently decompressed and what you \n   write gets compressed.\n  \n  \n   If the open fails, the function returns FALSE.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzopen() Example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;gzopen(\"\/tmp\/file.gz\",&nbsp;\"r\");?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzclose() - Close an open gz-file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzinflate.php","title":"gzinflate","description":"\n \n  gzinflate\n  (PHP 4 &gt;= 4.0.4, PHP 5)gzinflate &mdash; Inflate a deflated string\n\n \n \n  Description\n  \n   string gzinflate\n    ( string $data\n   [, int $length = 0\n  ] )\n\n     \n   This function inflate a deflated string.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data compressed by gzdeflate().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The maximum length of data to decode.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The original uncompressed data or FALSE on error.\n  \n  \n   The function will return an error if the uncompressed data is more than\n   32768 times the length of the compressed input data \n   or more than the optional parameter length.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzinflate() example\n    \n\n&lt;?php$compressed&nbsp;&nbsp;&nbsp;=&nbsp;gzdeflate('Compress&nbsp;me',&nbsp;9);$uncompressed&nbsp;=&nbsp;gzinflate($compressed);echo&nbsp;$uncompressed;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzdeflate() - Deflate a string\n    gzcompress() - Compress a string\n    gzuncompress() - Uncompress a compressed string\n    gzencode() - Create a gzip compressed string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzpassthru.php","title":"gzpassthru","description":"\n \n  gzpassthru\n  (PHP 4, PHP 5)gzpassthru &mdash; \n   Output all remaining data on a gz-file pointer\n  \n\n \n \n  Description\n  \n   int gzpassthru\n    ( resource $zp\n   )\n\n  \n   Reads to EOF on the given gz-file pointer from the current position and\n   writes the (uncompressed) results to standard output.\n  \n  Note: \n   \n    You may need to call gzrewind() to reset the file\n    pointer to the beginning of the file if you have already written data \n    to it. \n   \n  \n  Tip\n   \n    If you just want to dump the contents of a file to the output buffer, \n    without first modifying it or seeking to a particular offset, you may \n    want to use the readgzfile() function, which saves \n    you the gzopen() call.\n   \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The number of uncompressed characters read from gz\n   and passed through to the input, or FALSE on error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzpassthru() example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;gzopen('file.gz',&nbsp;'r');gzpassthru($fp);gzclose($fp);?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzputs.php","title":"gzputs","description":"\n \n  gzputs\n  (PHP 4, PHP 5)gzputs &mdash; Alias of gzwrite()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   gzwrite().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzrewind.php","title":"gzrewind","description":"\n \n  gzrewind\n  (PHP 4, PHP 5)gzrewind &mdash; Rewind the position of a gz-file pointer\n\n \n \n  Description\n  \n   bool gzrewind\n    ( resource $zp\n   )\n\n      \n   Sets the file position indicator of the given gz-file pointer to the \n   beginning of the file stream.\n   \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    gzseek() - Seek on a gz-file pointer\n    gztell() - Tell gz-file pointer read\/write position\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzseek.php","title":"gzseek","description":"\n \n  gzseek\n  (PHP 4, PHP 5)gzseek &mdash; Seek on a gz-file pointer\n\n \n \n  Description\n  \n   int gzseek\n    ( resource $zp\n   , int $offset\n   [, int $whence = SEEK_SET\n  ] )\n\n  \n   Sets the file position indicator for the given file pointer to the\n   given offset byte into the file stream. Equivalent to calling (in C)\n   gzseek(zp, offset, SEEK_SET).\n  \n  \n   If the file is opened for reading, this function is emulated but\n   can be extremely slow. If the file is opened for writing, only\n   forward seeks are supported; gzseek() then compresses\n   a sequence of zeroes up to the new starting position.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       The seeked offset.\n      \n     \n\n    \n\n    \n\n     whence\n     \n\n      \n       whence values are:\n       \n        SEEK_SET - Set position equal to offset bytes.\n        SEEK_CUR - Set position to current location plus offset.\n       \n      \n      \n       If whence is not specified, it is assumed to be\n       SEEK_SET.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Upon success, returns 0; otherwise, returns -1. Note that seeking\n   past EOF is not considered an error.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzseek() example\n    \n\n&lt;?php$gz&nbsp;=&nbsp;gzopen('somefile.gz',&nbsp;'r');gzseek($gz,2);echo&nbsp;gzgetc($gz);gzclose($gz);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gztell() - Tell gz-file pointer read\/write position\n    gzrewind() - Rewind the position of a gz-file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gztell.php","title":"gztell","description":"\n \n  gztell\n  (PHP 4, PHP 5)gztell &mdash; Tell gz-file pointer read\/write position\n\n \n \n  Description\n  \n   int gztell\n    ( resource $zp\n   )\n\n  \n   Gets the position of the given file pointer; i.e., its offset into the\n   uncompressed file stream.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The position of the file pointer or FALSE if an error occurs.\n  \n \n\n \n  See Also\n  \n   \n    gzopen() - Open gz-file\n    gzseek() - Seek on a gz-file pointer\n    gzrewind() - Rewind the position of a gz-file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzread.php","title":"gzread","description":"\n \n  gzread\n  (PHP 4, PHP 5)gzread &mdash; Binary-safe gz-file read\n\n \n \n  Description\n  \n   string gzread\n    ( resource $zp\n   , int $length\n   )\n\n  \n   gzread() reads up to length bytes\n   from the given gz-file pointer. Reading stops when\n   length (uncompressed) bytes have been read\n   or EOF is reached, whichever comes first.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of bytes to read.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The data that have been read.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzread() example\n    \n\n&lt;?php\/\/&nbsp;get&nbsp;contents&nbsp;of&nbsp;a&nbsp;gz-file&nbsp;into&nbsp;a&nbsp;string$filename&nbsp;=&nbsp;\"\/usr\/local\/something.txt.gz\";$zd&nbsp;=&nbsp;gzopen($filename,&nbsp;\"r\");$contents&nbsp;=&nbsp;gzread($zd,&nbsp;10000);gzclose($zd);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzwrite() - Binary-safe gz-file write\n    gzopen() - Open gz-file\n    gzgets() - Get line from file pointer\n    gzgetss() - Get line from gz-file pointer and strip HTML tags\n    gzfile() - Read entire gz-file into an array\n    gzpassthru() - Output all remaining data on a gz-file pointer\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzuncompress.php","title":"gzuncompress","description":"\n \n  gzuncompress\n  (PHP 4 &gt;= 4.0.1, PHP 5)gzuncompress &mdash; Uncompress a compressed string\n\n \n \n  Description\n  \n   string gzuncompress\n    ( string $data\n   [, int $length = 0\n  ] )\n\n     \n   This function uncompress a compressed string.  \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     data\n     \n\n      \n       The data compressed by gzcompress().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The maximum length of data to decode.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The original uncompressed data or FALSE on error.\n  \n  \n   The function will return an error if the uncompressed data is more than\n   32768 times the length of the compressed input data \n   or more than the optional parameter length.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzuncompress() example\n    \n\n&lt;?php$compressed&nbsp;&nbsp;&nbsp;=&nbsp;gzcompress('Compress&nbsp;me',&nbsp;9);$uncompressed&nbsp;=&nbsp;gzuncompress($compressed);echo&nbsp;$uncompressed;?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzcompress() - Compress a string\n    gzinflate() - Inflate a deflated string\n    gzdeflate() - Deflate a string\n    gzencode() - Create a gzip compressed string\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zlib-get-coding-type.php","title":"zlib_get_coding_type","description":"\n \n  zlib_get_coding_type\n  (PHP 4 &gt;= 4.3.2, PHP 5)zlib_get_coding_type &mdash; Returns the coding type used for output compression\n\n \n \n  Description\n  \n   string zlib_get_coding_type\n    ( void\n   )\n\n  \n   Returns the coding type used for output compression.  \n  \n \n\n \n  Return Values\n  \n   Possible return values are gzip, deflate,\n   or FALSE.\n  \n \n\n \n  See Also\n  \n   \n    \n     The zlib.output_compression \n     directive\n    \n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.readgzfile.php","title":"readgzfile","description":"\n \n  readgzfile\n  (PHP 4, PHP 5)readgzfile &mdash; Output a gz-file\n\n \n \n  Description\n  \n   int readgzfile\n    ( string $filename\n   [, int $use_include_path = 0\n  ] )\n\n   \n   Reads a file, decompresses it and writes it to standard output.\n  \n  \n   readgzfile() can be used to read a file which is not in\n   gzip format; in this case readgzfile() will directly \n   read from the file without decompression.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file name. This file will be opened from the filesystem and its\n       contents written to standard output.\n      \n     \n\n    \n\n    \n\n     use_include_path\n     \n\n      \n       You can set this optional parameter to 1, if you\n       want to search for the file in the include_path too.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n   \n   Returns the number of (uncompressed) bytes read from the file. If\n   an error occurs, FALSE is returned and unless the function was\n   called as @readgzfile, an error message is\n   printed.\n  \n \n\n \n  See Also\n  \n   \n    gzpassthru() - Output all remaining data on a gz-file pointer\n    gzfile() - Read entire gz-file into an array\n    gzopen() - Open gz-file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gzwrite.php","title":"gzwrite","description":"\n \n  gzwrite\n  (PHP 4, PHP 5)gzwrite &mdash; Binary-safe gz-file write\n\n \n \n  Description\n  \n   int gzwrite\n    ( resource $zp\n   , string $string\n   [, int $length\n  ] )\n\n  \n   gzwrite() writes the contents of\n   string to the given gz-file.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zp\n     \n\n      \n       The gz-file pointer. It must be valid, and must point to a file\n       successfully opened by gzopen().\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The string to write.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of uncompressed bytes to write. If supplied, writing will \n       stop after length (uncompressed) bytes have been\n       written or the end of string is reached,\n       whichever comes first.\n      \n      Note: \n       \n        Note that if the length argument is given,\n        then the magic_quotes_runtime\n        configuration option will be ignored and no slashes will be\n        stripped from string.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n   \n   Returns the number of (uncompressed) bytes written to the given gz-file \n   stream.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 gzwrite() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;'Some&nbsp;information&nbsp;to&nbsp;compress';$gz&nbsp;=&nbsp;gzopen('somefile.gz','w9');gzwrite($gz,&nbsp;$string);gzclose($gz);?&gt;\n\n\n    \n\n   \n  \n \n\n \n  See Also\n  \n   \n    gzread() - Binary-safe gz-file read\n    gzopen() - Open gz-file\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addfromstring.php","title":"ZipArchive::addFromString","description":"\n \n  ZipArchive::addFromString\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::addFromString &mdash; Add a file to a ZIP archive using its contents\n\n \n \n  Description\n  \n   bool ZipArchive::addFromString\n    ( string $localname\n   , string $contents\n   )\n\n  \n   Add a file to a ZIP archive using its contents.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     localname\n     \n\n      \n       The name of the entry to create.\n      \n     \n\n    \n\n    \n\n     contents\n     \n\n      \n       The contents to use to create the entry. It is used in a binary\n       safe mode.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Add an entry to a new archive\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip',&nbsp;ZipArchive::CREATE);if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFromString('test.txt',&nbsp;'file&nbsp;content&nbsp;goes&nbsp;here');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n    \n     Example #2 Add file to a directory inside an archive\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFromString('dir\/test.txt',&nbsp;'file&nbsp;content&nbsp;goes&nbsp;here');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addemptydir.php","title":"ZipArchive::addEmptyDir","description":"\n \n  ZipArchive::addEmptyDir\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.8.0)ZipArchive::addEmptyDir &mdash; Add a new directory\n\n \n \n  Description\n  \n   bool ZipArchive::addEmptyDir\n    ( string $dirname\n   )\n\n  \n   Adds an empty directory in the archive.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     dirname\n     \n\n      \n       The directory to add.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   Example #1 Create a new directory in an archive\n   \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if($zip-&gt;addEmptyDir('newDirectory'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Created&nbsp;a&nbsp;new&nbsp;root&nbsp;directory';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Could&nbsp;not&nbsp;create&nbsp;the&nbsp;directory';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-deleteindex.php","title":"ZipArchive::deleteIndex","description":"\n \n  ZipArchive::deleteIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::deleteIndex &mdash; delete an entry in the archive using its index\n\n \n \n  Description\n  \n   bool ZipArchive::deleteIndex\n    ( int $index\n   )\n\n  \n   Delete an entry in the archive using its index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry to delete.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Delete file from archive using its index\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;deleteIndex(2);&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-addfile.php","title":"ZipArchive::addFile","description":"\n \n  ZipArchive::addFile\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::addFile &mdash; Adds a file to a ZIP archive from the given path\n\n \n \n  Description\n  \n   bool ZipArchive::addFile\n    ( string $filename\n   [, string $localname = NULL\n   [, int $start = 0\n   [, int $length = 0\n  ]]] )\n\n  \n   Adds a file to a ZIP archive from a given path.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The path to the file to add.\n      \n     \n\n    \n\n    \n\n     localname\n     \n\n      \n       If supplied, this is the local name inside the ZIP archive that will override the filename.\n      \n     \n\n    \n\n    \n\n     start\n     \n\n      \n       This parameter is not used but is required to extend ZipArchive.\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       This parameter is not used but is required to extend ZipArchive.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     This example opens a ZIP file archive\n     test.zip and add\n     the file \/path\/to\/index.txt.\n     as newname.txt.\n    \n    \n     Example #1 Open and extract\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFile('\/path\/to\/index.txt',&nbsp;'newname.txt');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n \n  Notes\n  Note: \n   \n    When a file is set to be added to the archive, PHP will attempt to lock \n    the file and it is only released once the ZIP operation is done. In short, \n    it means you can first delete an added file after the archive is closed.\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-deletename.php","title":"ZipArchive::deleteName","description":"\n \n  ZipArchive::deleteName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::deleteName &mdash; delete an entry in the archive using its name\n\n \n \n  Description\n  \n   bool ZipArchive::deleteName\n    ( string $name\n   )\n\n  \n   Delete an entry in the archive using its name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry to delete.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Deleting a file and directory from an archive, using names\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test1.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;deleteName('testfromfile.php');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;deleteName('testDir\/');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getarchivecomment.php","title":"ZipArchive::getArchiveComment","description":"\n \n  ZipArchive::getArchiveComment\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::getArchiveComment &mdash; Returns the Zip archive comment\n\n \n \n  Description\n  \n   string ZipArchive::getArchiveComment\n    ([ int $flags\n  ] )\n\n  \n   Returns the Zip archive comment.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     flags\n     \n\n      \n       If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged\n       comment is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the Zip archive comment or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   Example #1 Dump an archive comment\n   \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test_with_comment.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($zip-&gt;getArchiveComment());&nbsp;&nbsp;&nbsp;&nbsp;\/*&nbsp;Or&nbsp;using&nbsp;the&nbsp;archive&nbsp;property&nbsp;*\/&nbsp;&nbsp;&nbsp;&nbsp;var_dump($zip-&gt;comment);}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n   \n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getcommentindex.php","title":"ZipArchive::getCommentIndex","description":"\n \n  ZipArchive::getCommentIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.4.0)ZipArchive::getCommentIndex &mdash; Returns the comment of an entry using the entry index\n\n \n \n  Description\n  \n   string ZipArchive::getCommentIndex\n    ( int $index\n   [, int $flags\n  ] )\n\n  \n   Returns the comment of an entry using the entry index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged\n       comment is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the comment on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Dump an entry comment\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test1.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($zip-&gt;getCommentIndex(1));}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getcommentname.php","title":"ZipArchive::getCommentName","description":"\n \n  ZipArchive::getCommentName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.4.0)ZipArchive::getCommentName &mdash; Returns the comment of an entry using the entry name\n\n \n \n  Description\n  \n   string ZipArchive::getCommentName\n    ( string $name\n   [, int $flags\n  ] )\n\n  \n   Returns the comment of an entry using the entry name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged\n       comment is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the comment on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Dump an entry comment\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test1.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var_dump($zip-&gt;getCommentName('test\/entry1.txt'));}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getfromname.php","title":"ZipArchive::getFromName","description":"\n \n  ZipArchive::getFromName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::getFromName &mdash; Returns the entry contents using its name\n\n \n \n  Description\n  \n   mixed ZipArchive::getFromName\n    ( string $name\n   [, int $length = 0\n   [, int $flags\n  ]] )\n\n  \n   Returns the entry contents using its name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length to be read from the entry. If 0, then the\n       entire entry is read.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The flags to use to open the archive. the following values may\n       be ORed to it.\n       \n        \n         \n          ZIPARCHIVE::FL_UNCHANGED\n         \n        \n        \n         \n          ZIPARCHIVE::FL_COMPRESSED\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the contents of the entry on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Get the file contents\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test1.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$zip-&gt;getFromName('testfromfile.php');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n    \n     Example #2 Convert an image from a zip entry\n     \n\n&lt;?php$z&nbsp;=&nbsp;new&nbsp;ZipArchive();if&nbsp;($z-&gt;open(dirname(__FILE__)&nbsp;.&nbsp;'\/test_im.zip'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$im_string&nbsp;=&nbsp;$z-&gt;getFromName(\"pear_item.gif\");&nbsp;&nbsp;&nbsp;&nbsp;$im&nbsp;=&nbsp;imagecreatefromstring($im_string);&nbsp;&nbsp;&nbsp;&nbsp;imagepng($im,&nbsp;'b.png');}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getfromindex.php","title":"ZipArchive::getFromIndex","description":"\n \n  ZipArchive::getFromIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.3.0)ZipArchive::getFromIndex &mdash; Returns the entry contents using its index\n\n \n \n  Description\n  \n   mixed ZipArchive::getFromIndex\n    ( int $index\n   [, int $length = 0\n   [, int $flags\n  ]] )\n\n  \n   Returns the entry contents using its index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The length to be read from the entry. If 0, then the\n       entire entry is read.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The flags to use to open the archive. the following values may\n       be ORed to it.\n       \n        \n         \n          ZIPARCHIVE::FL_UNCHANGED\n         \n        \n        \n         \n          ZIPARCHIVE::FL_COMPRESSED\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the contents of the entry on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Get the file contents\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$zip-&gt;getFromIndex(2);&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getnameindex.php","title":"ZipArchive::getNameIndex","description":"\n \n  ZipArchive::getNameIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::getNameIndex &mdash; Returns the name of an entry using its index\n\n \n \n  Description\n  \n   string ZipArchive::getNameIndex\n    ( int $index\n   [, int $flags\n  ] )\n\n  \n   Returns the name of an entry using its index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       If flags is set to ZIPARCHIVE::FL_UNCHANGED, the original unchanged\n       name is returned.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the name on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   \n    Example #1 getnameindex() example\n    \n\n&lt;?phpif&nbsp;($zip-&gt;open('test.zip')&nbsp;==&nbsp;TRUE)&nbsp;{&nbsp;for&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;$zip-&gt;numFiles;&nbsp;$i++;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$filename&nbsp;=&nbsp;$zip-&gt;getNameIndex($i);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;...&nbsp;}}?&gt;\n\n\n    \n\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getstatusstring.php","title":"ZipArchive::getStatusString","description":"\n \n  ZipArchive::getStatusString\n  (PHP 5 &gt;= 5.2.7)ZipArchive::getStatusString &mdash; Returns the status error message, system and\/or zip messages\n\n \n \n  Description\n  \n   string ZipArchive::getStatusString\n    ( void\n   )\n\n  \n   Returns the status error message, system and\/or zip messages.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns a string with the status message on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-getstream.php","title":"ZipArchive::getStream","description":"\n \n  ZipArchive::getStream\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::getStream &mdash; Get a file handler to the entry defined by its name (read only).\n\n \n \n  Description\n  \n   resource ZipArchive::getStream\n    ( string $name\n   )\n\n  \n   Get a file handler to the entry defined by its name. For now it only\n   supports read operations.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The name of the entry to use.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a file pointer (resource) on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Get the entry contents with fread() and store it\n     \n\n&lt;?php$content&nbsp;=&nbsp;'';$z&nbsp;=&nbsp;new&nbsp;ZipArchive();if&nbsp;($z-&gt;open('test.zip'))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$fp&nbsp;=&nbsp;$z-&gt;getStream('test');&nbsp;&nbsp;&nbsp;&nbsp;if(!$fp)&nbsp;exit(\"failed\\n\");&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$contents&nbsp;.=&nbsp;fread($fp,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);&nbsp;&nbsp;&nbsp;&nbsp;file_put_contents('t',$contents);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"done.\\n\";}?&gt;\n\n\n     \n\n    \n    \n     Example #2 Same as the previous example but with fopen() and the zip\n     stream wrapper\n     \n\n&lt;?php$fp&nbsp;=&nbsp;fopen('zip:\/\/'&nbsp;.&nbsp;dirname(__FILE__)&nbsp;.&nbsp;'\/test.zip#test',&nbsp;'r');if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit(\"cannot&nbsp;open\\n\");}while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$contents&nbsp;.=&nbsp;fread($fp,&nbsp;2);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$contents\\n\";}fclose($fp);echo&nbsp;\"done.\\n\";?&gt;\n\n\n     \n\n    \n    \n     Example #3 Stream wrapper and image, can be used with the xml function\n     as well\n     \n\n&lt;?php$im&nbsp;=&nbsp;imagecreatefromgif('zip:\/\/'&nbsp;.&nbsp;dirname(__FILE__)&nbsp;.&nbsp;'\/test_im.zip#pear_item.gif');imagepng($im,&nbsp;'a.png');?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-extractto.php","title":"ZipArchive::extractTo","description":"\n \n  ZipArchive::extractTo\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::extractTo &mdash; Extract the archive contents\n\n \n \n  Description\n  \n   bool ZipArchive::extractTo\n    ( string $destination\n   [, mixed $entries\n  ] )\n\n  \n   Extract the complete archive or the given files to the specified\n   destination.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     destination\n     \n\n      \n       Location where to extract the files.\n      \n     \n\n    \n\n    \n\n     entries\n     \n\n      \n       The entries to extract. It accepts either a single entry name or\n       an array of names.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Extract all entries\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open('test.zip')&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;extractTo('\/my\/destination\/dir\/');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n    \n     Example #2 Extract two entries\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test_im.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;extractTo('\/my\/destination\/dir\/',&nbsp;array('pear_item.gif',&nbsp;'testfromfile.php'));&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-locatename.php","title":"ZipArchive::locateName","description":"\n \n  ZipArchive::locateName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::locateName &mdash; Returns the index of the entry in the archive\n\n \n \n  Description\n  \n   mixed ZipArchive::locateName\n    ( string $name\n   [, int $flags\n  ] )\n\n  \n   Locates an entry using its name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The name of the entry to look up\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The flags are specified by ORing the following values,\n       or 0 for none of them.\n       \n        \n         \n          ZIPARCHIVE::FL_NOCASE\n         \n        \n        \n         \n          ZIPARCHIVE::FL_NODIR\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the index of the entry on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Create an archive and then use it with ZipArchive::locateName()\n     \n\n&lt;?php$file&nbsp;=&nbsp;'testlocate.zip';$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;if&nbsp;($zip-&gt;open($file,&nbsp;ZIPARCHIVE::CREATE)&nbsp;!==&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit('failed');}$zip-&gt;addFromString('entry1.txt',&nbsp;'entry&nbsp;#1');$zip-&gt;addFromString('entry2.txt',&nbsp;'entry&nbsp;#2');$zip-&gt;addFromString('dir\/entry2d.txt',&nbsp;'entry&nbsp;#2');if&nbsp;(!$zip-&gt;status&nbsp;==&nbsp;ZIPARCHIVE::ER_OK)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"failed&nbsp;to&nbsp;write&nbsp;zip\\n\";}$zip-&gt;close();if&nbsp;($zip-&gt;open($file)&nbsp;!==&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;exit('failed');}echo&nbsp;$zip-&gt;locateName('entry1.txt')&nbsp;.&nbsp;\"\\n\";echo&nbsp;$zip-&gt;locateName('eNtry2.txt')&nbsp;.&nbsp;\"\\n\";echo&nbsp;$zip-&gt;locateName('eNtry2.txt',&nbsp;ZIPARCHIVE::FL_NOCASE)&nbsp;.&nbsp;\"\\n\";echo&nbsp;$zip-&gt;locateName('enTRy2d.txt',&nbsp;ZIPARCHIVE::FL_NOCASE|ZIPARCHIVE::FL_NODIR)&nbsp;.&nbsp;\"\\n\";$zip-&gt;close();?&gt;\n\n\n     \n\n    \n    The above example will output:\n    \n\n0\n\n1\n2\n\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-renameindex.php","title":"ZipArchive::renameIndex","description":"\n \n  ZipArchive::renameIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::renameIndex &mdash; Renames an entry defined by its index\n\n \n \n  Description\n  \n   bool ZipArchive::renameIndex\n    ( int $index\n   , string $newname\n   )\n\n  \n   Renames an entry defined by its index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry to rename.\n      \n     \n\n    \n\n    \n\n     newname\n     \n\n      \n       New name.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Rename one entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;renameIndex(2,'newname.txt');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-close.php","title":"ZipArchive::close","description":"\n \n  ZipArchive::close\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::close &mdash; Close the active archive (opened or newly created)\n\n \n \n  Description\n  \n   bool ZipArchive::close\n    ( void\n   )\n\n  \n   Close opened or created archive and save changes. This method is\n   automatically called at the end of the script.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-open.php","title":"ZipArchive::open","description":"\n \n  ZipArchive::open\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::open &mdash; Open a ZIP file archive\n\n \n \n  Description\n  \n   mixed ZipArchive::open\n    ( string $filename\n   [, int $flags\n  ] )\n\n  \n   Opens a new zip archive for reading, writing or modifying.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file name of the ZIP archive to open.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The mode to use to open the archive.\n       \n        \n         \n          ZIPARCHIVE::OVERWRITE\n         \n        \n        \n         \n          ZIPARCHIVE::CREATE\n         \n        \n        \n         \n          ZIPARCHIVE::EXCL\n         \n        \n        \n         \n          ZIPARCHIVE::CHECKCONS\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   \n\n    \n\n     Error codes\n      \n\n      \n       Returns TRUE on success or the error code.\n       \n        \n         \n          ZIPARCHIVE::ER_EXISTS\n         \n         \n          File already exists.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_INCONS\n         \n         \n          Zip archive inconsistent.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_INVAL\n         \n         \n          Invalid argument.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_MEMORY\n         \n         \n          Malloc failure.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_NOENT\n         \n         \n          No such file.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_NOZIP\n         \n         \n          Not a zip archive.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_OPEN\n         \n         \n          Can&#039;t open file.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_READ\n         \n         \n          Read error.\n         \n        \n        \n         \n          ZIPARCHIVE::ER_SEEK\n         \n         \n          Seek error.\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Examples\n    \n     Example #1 Open and extract\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;extractTo('test');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n    \n    \n     Example #2 Create an archive\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip',&nbsp;ZipArchive::CREATE);if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFromString('test.txt',&nbsp;'file&nbsp;content&nbsp;goes&nbsp;here');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFile('data.txt',&nbsp;'entryname.txt');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-renamename.php","title":"ZipArchive::renameName","description":"\n \n  ZipArchive::renameName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::renameName &mdash; Renames an entry defined by its name\n\n \n \n  Description\n  \n   bool ZipArchive::renameName\n    ( string $name\n   , string $newname\n   )\n\n  \n   Renames an entry defined by its name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry to rename.\n      \n     \n\n    \n\n    \n\n     newname\n     \n\n      \n       New name.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Rename one entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;renameName('currentname.txt','newname.txt');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setarchivecomment.php","title":"ZipArchive::setArchiveComment","description":"\n \n  ZipArchive::setArchiveComment\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.4.0)ZipArchive::setArchiveComment &mdash; Set the comment of a ZIP archive\n\n \n \n  Description\n  \n   mixed ZipArchive::setArchiveComment\n    ( string $comment\n   )\n\n  \n   Set the comment of a ZIP archive.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     comment\n     \n\n      \n       The contents of the comment.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Create an archive and set a comment\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip',&nbsp;ZipArchive::CREATE);if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;addFromString('test.txt',&nbsp;'file&nbsp;content&nbsp;goes&nbsp;here');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;setArchiveComment('new&nbsp;archive&nbsp;comment');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setcommentindex.php","title":"ZipArchive::setCommentIndex","description":"\n \n  ZipArchive::setCommentIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.4.0)ZipArchive::setCommentIndex &mdash; Set the comment of an entry defined by its index\n\n \n \n  Description\n  \n   mixed ZipArchive::setCommentIndex\n    ( int $index\n   , string $comment\n   )\n\n  \n   Set the comment of an entry defined by its index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry.\n      \n     \n\n    \n\n    \n\n     comment\n     \n\n      \n       The contents of the comment.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Open an archive and set a comment for an entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;setCommentIndex(2,&nbsp;'new&nbsp;entry&nbsp;comment');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-setCommentName.php","title":"ZipArchive::setCommentName","description":"\n \n  ZipArchive::setCommentName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.4.0)ZipArchive::setCommentName &mdash; Set the comment of an entry defined by its name\n\n \n \n  Description\n  \n   mixed ZipArchive::setCommentName\n    ( string $name\n   , string $comment\n   )\n\n  \n   Set the comment of an entry defined by its name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry.\n      \n     \n\n    \n\n    \n\n     comment\n     \n\n      \n       The contents of the comment.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Open an archive and set a comment for an entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;setCommentName('entry1.txt',&nbsp;'new&nbsp;entry&nbsp;comment');&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'ok';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed';}?&gt;\n\n\n     \n\n    \n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-statname.php","title":"ZipArchive::statName","description":"\n \n  ZipArchive::statName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::statName &mdash; Get the details of an entry defined by its name.\n\n \n \n  Description\n  \n   mixed ZipArchive::statName\n    ( name $name\n   [, int $flags\n  ] )\n\n  \n    The function obtains information about the entry defined by its\n    name.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       The flags argument specifies how the name lookup should be done.\n       Also, ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request\n       information  about  the  original  file  in  the archive,\n       ignoring any changes made.\n       \n        \n         \n          ZIPARCHIVE::FL_NOCASE\n         \n        \n        \n         \n          ZIPARCHIVE::FL_NODIR\n         \n        \n        \n         \n          ZIPARCHIVE::FL_UNCHANGED\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing the entry details  or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Dump the stat info of an entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print_r($zip-&gt;statName('foobar\/baz'));&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n      The above example will output\nsomething similar to:\n     \n\nArray\n(\n    [name] =&gt; foobar\/baz\n    [index] =&gt; 3\n    [crc] =&gt; 499465816\n    [size] =&gt; 27\n    [mtime] =&gt; 1123164748\n    [comp_size] =&gt; 24\n    [comp_method] =&gt; 8\n)\n\n     \n\n    \n\n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-statindex.php","title":"ZipArchive::statIndex","description":"\n \n  ZipArchive::statIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::statIndex &mdash; Get the details of an entry defined by its index.\n\n \n \n  Description\n  \n   mixed ZipArchive::statIndex\n    ( int $index\n   [, int $flags\n  ] )\n\n  \n    The  function  obtains  information  about the entry defined by its\n    index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       ZIPARCHIVE::FL_UNCHANGED may be ORed to it to request\n       information  about  the  original  file  in  the archive,\n       ignoring any changes made.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns an array containing the entry details or FALSE on failure.\n  \n \n\n \n  Examples\n    \n     Example #1 Dump the stat info of an entry\n     \n\n&lt;?php$zip&nbsp;=&nbsp;new&nbsp;ZipArchive;$res&nbsp;=&nbsp;$zip-&gt;open('test.zip');if&nbsp;($res&nbsp;===&nbsp;TRUE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print_r($zip-&gt;statIndex(3));&nbsp;&nbsp;&nbsp;&nbsp;$zip-&gt;close();}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'failed,&nbsp;code:'&nbsp;.&nbsp;$res;}?&gt;\n\n\n     \n\n      The above example will output\nsomething similar to:\n     \n\nArray\n(\n    [name] =&gt; foobar\/baz\n    [index] =&gt; 3\n    [crc] =&gt; 499465816\n    [size] =&gt; 27\n    [mtime] =&gt; 1123164748\n    [comp_size] =&gt; 24\n    [comp_method] =&gt; 8\n)\n\n     \n\n    \n\n   \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangeall.php","title":"ZipArchive::unchangeAll","description":"\n \n  ZipArchive::unchangeAll\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::unchangeAll &mdash; Undo all changes done in the archive\n\n \n \n  Description\n  \n   mixed ZipArchive::unchangeAll\n    ( void\n   )\n\n  \n   Undo all changes done in the archive.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangearchive.php","title":"ZipArchive::unchangeArchive","description":"\n \n  ZipArchive::unchangeArchive\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::unchangeArchive &mdash; Revert all global changes done in the archive.\n\n \n \n  Description\n  \n   mixed ZipArchive::unchangeArchive\n    ( void\n   )\n\n  \n   Revert all global changes to the archive.  For now, this\n   only reverts archive comment changes.\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangeindex.php","title":"ZipArchive::unchangeIndex","description":"\n \n  ZipArchive::unchangeIndex\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.1.0)ZipArchive::unchangeIndex &mdash; Revert all changes done to an entry at the given index\n\n \n \n  Description\n  \n   mixed ZipArchive::unchangeIndex\n    ( int $index\n   )\n\n  \n   Revert all changes done to an entry at the given index.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     index\n     \n\n      \n       Index of the entry.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ziparchive-unchangename.php","title":"ZipArchive::unchangeName","description":"\n \n  ZipArchive::unchangeName\n  (PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.5.0)ZipArchive::unchangeName &mdash; Revert all changes done to an entry with the given name.\n\n \n \n  Description\n  \n   mixed ZipArchive::unchangeName\n    ( string $name\n   )\n\n  \n   Revert all changes done to an entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       Name of the entry.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-close.php","title":"zip_close","description":"\n \n  zip_close\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_close &mdash; Close a ZIP file archive\n\n \n \n  Description\n  \n   void zip_close\n    ( resource $zip\n   )\n\n  \n   Closes the given ZIP file archive.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip\n     \n\n      \n       A ZIP file previously opened with zip_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_read() - Read next entry in a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-close.php","title":"zip_entry_close","description":"\n \n  zip_entry_close\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_close &mdash; Close a directory entry\n\n \n \n  Description\n  \n   bool zip_entry_close\n    ( resource $zip_entry\n   )\n\n  \n   Closes the specified directory entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry previously opened zip_entry_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  See Also\n  \n   \n    zip_entry_open() - Open a directory entry for reading\n    zip_entry_read() - Read from an open directory entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-compressedsize.php","title":"zip_entry_compressedsize","description":"\n \n  zip_entry_compressedsize\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_compressedsize &mdash; Retrieve the compressed size of a directory entry\n\n \n \n  Description\n  \n   int zip_entry_compressedsize\n    ( resource $zip_entry\n   )\n\n  \n   Returns the compressed size of the specified directory entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The compressed size.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_read() - Read next entry in a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-filesize.php","title":"zip_entry_filesize","description":"\n \n  zip_entry_filesize\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_filesize &mdash; Retrieve the actual file size of a directory entry\n\n \n \n  Description\n  \n   int zip_entry_filesize\n    ( resource $zip_entry\n   )\n\n  \n   Returns the actual size of the specified directory entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The size of the directory entry.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_read() - Read next entry in a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-compressionmethod.php","title":"zip_entry_compressionmethod","description":"\n \n  zip_entry_compressionmethod\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_compressionmethod &mdash; Retrieve the compression method of a directory entry\n\n \n \n  Description\n  \n   string zip_entry_compressionmethod\n    ( resource $zip_entry\n   )\n\n  \n   Returns the compression method of the directory entry specified\n   by zip_entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The compression method.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_read() - Read next entry in a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-name.php","title":"zip_entry_name","description":"\n \n  zip_entry_name                 \n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_name &mdash; Retrieve the name of a directory entry\n\n \n \n  Description\n  \n   string zip_entry_name\n    ( resource $zip_entry\n   )\n\n  \n   Returns the name of the specified directory entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   The name of the directory entry.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_read() - Read next entry in a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-open.php","title":"zip_entry_open","description":"\n \n  zip_entry_open\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_open &mdash; Open a directory entry for reading\n\n \n \n  Description\n  \n   bool zip_entry_open      \n    ( resource $zip\n   , resource $zip_entry\n   [, string $mode\n  ] )\n\n  \n   Opens a directory entry in a zip file for reading.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip\n     \n\n      \n       A valid resource handle returned by zip_open().\n      \n     \n\n    \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n    \n\n     mode\n     \n\n      \n       Any of the modes specified in the documentation of\n       fopen().\n      \n      Note: \n       \n        Currently, mode is ignored and is always\n        &quot;rb&quot;. This is due to the fact that zip support\n        in PHP is read only access.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n  Note: \n   \n    Unlike fopen() and other similar functions,\n    the return value of zip_entry_open() only\n    indicates the result of the operation and is not needed for\n    reading or closing the directory entry.\n   \n  \n \n\n \n  See Also\n  \n   \n    zip_entry_close() - Close a directory entry\n    zip_entry_read() - Read from an open directory entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-entry-read.php","title":"zip_entry_read","description":"\n \n  zip_entry_read\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_entry_read &mdash; Read from an open directory entry\n\n \n \n  Description\n  \n   string zip_entry_read\n    ( resource $zip_entry\n   [, int $length\n  ] )\n\n  \n   Reads from an open directory entry.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip_entry\n     \n\n      \n       A directory entry returned by zip_read().\n      \n     \n\n    \n\n    \n\n     length\n     \n\n      \n       The number of bytes to return. If not specified, this function will \n       attempt to read 1024 bytes.\n      \n      Note: \n       \n        This should be the uncompressed length you wish to read.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns the data read, or FALSE if the end of the file is\n   reached.\n  \n \n\n \n  See Also\n  \n   \n    zip_entry_open() - Open a directory entry for reading\n    zip_entry_close() - Close a directory entry\n    zip_entry_filesize() - Retrieve the actual file size of a directory entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-read.php","title":"zip_read","description":"\n \n  zip_read\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_read &mdash; Read next entry in a ZIP file archive\n\n \n \n  Description\n  \n   mixed zip_read\n    ( resource $zip\n   )\n\n  \n   Reads the next entry in a zip file archive.\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     zip\n     \n\n      \n       A ZIP file previously opened with zip_open().\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a directory entry resource for later use with the\n   zip_entry_... functions, or FALSE if\n   there are no more entries to read, or an error code if an error\n   occurred.\n  \n \n\n \n  See Also\n  \n   \n    zip_open() - Open a ZIP file archive\n    zip_close() - Close a ZIP file archive\n    zip_entry_open() - Open a directory entry for reading\n    zip_entry_read() - Read from an open directory entry\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.zip-open.php","title":"zip_open","description":"\n \n  zip_open\n  (PHP 4 &gt;= 4.1.0, PHP 5 &gt;= 5.2.0, PECL zip &gt;= 1.0.0)zip_open &mdash; Open a ZIP file archive\n\n \n \n  Description\n  \n   mixed zip_open\n    ( string $filename\n   )\n\n  \n   Opens a new zip archive for reading. \n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     filename\n     \n\n      \n       The file name of the ZIP archive to open.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   Returns a resource handle for later use with\n   zip_read() and zip_close()\n   or returns the number of error if filename does not\n   exist or in case of other error.\n  \n \n\n \n  See Also\n  \n   \n    zip_read() - Read next entry in a ZIP file archive\n    zip_close() - Close a ZIP file archive\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.syslog.php","title":"syslog","description":"\n \n  syslog\n  (PHP 4, PHP 5)syslog &mdash; Generate a system log message\n\n \n \n \n  Description\n  \n   bool syslog\n    ( int $priority\n   , string $message\n   )\n\n  \n   syslog() generates a log message that will be\n   distributed by the system logger.\n  \n  \n   For information on setting up a user defined log handler, see the\n   syslog.conf\n   (5) Unix manual page.  More\n   information on the syslog facilities and option can be found in the man\n   pages for syslog\n   (3) on Unix machines.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     priority\n     \n\n      \n       priority is a combination of the facility and\n       the level. Possible values are:\n       \n        syslog() Priorities (in descending order)\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_EMERG\n           system is unusable\n          \n\n          \n           LOG_ALERT\n           action must be taken immediately\n          \n\n          \n           LOG_CRIT\n           critical conditions\n          \n\n          \n           LOG_ERR\n           error conditions\n          \n\n          \n           LOG_WARNING\n           warning conditions\n          \n\n          \n           LOG_NOTICE\n           normal, but significant, condition\n          \n\n          \n           LOG_INFO\n           informational message\n          \n\n          \n           LOG_DEBUG\n           debug-level message\n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n    \n\n     message\n     \n\n      \n       The message to send, except that the two characters\n       %m will be replaced by the error message string\n       (strerror) corresponding to the present value of\n       errno.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using syslog()\n    \n\n&lt;?php\/\/&nbsp;open&nbsp;syslog,&nbsp;include&nbsp;the&nbsp;process&nbsp;ID&nbsp;and&nbsp;also&nbsp;send\/\/&nbsp;the&nbsp;log&nbsp;to&nbsp;standard&nbsp;error,&nbsp;and&nbsp;use&nbsp;a&nbsp;user&nbsp;defined\/\/&nbsp;logging&nbsp;mechanismopenlog(\"myScriptLog\",&nbsp;LOG_PID&nbsp;|&nbsp;LOG_PERROR,&nbsp;LOG_LOCAL0);\/\/&nbsp;some&nbsp;codeif&nbsp;(authorized_client())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;do&nbsp;something}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;unauthorized&nbsp;client!&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;log&nbsp;the&nbsp;attempt&nbsp;&nbsp;&nbsp;&nbsp;$access&nbsp;=&nbsp;date(\"Y\/m\/d&nbsp;H:i:s\");&nbsp;&nbsp;&nbsp;&nbsp;syslog(LOG_WARNING,&nbsp;\"Unauthorized&nbsp;client:&nbsp;$access&nbsp;{$_SERVER['REMOTE_ADDR']}&nbsp;({$_SERVER['HTTP_USER_AGENT']})\");}closelog();?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  \n   On Windows NT, the syslog service is emulated using the Event\n   Log.\n  \n  Note: \n   \n    Use of LOG_LOCAL0 through\n    LOG_LOCAL7 for the facility\n    parameter of openlog() is not available\n    in Windows.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    openlog() - Open connection to system logger\n    closelog() - Close connection to system logger\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-split.php","title":"preg_split","description":"\n \n  preg_split\n  (PHP 4, PHP 5)preg_split &mdash; Split string by a regular expression\n\n \n\n \n  Description\n  \n   array preg_split\n    ( string $pattern\n   , string $subject\n   [, int $limit = -1\n   [, int $flags = 0\n  ]] )\n\n  \n   Split the given string by a regular expression.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for, as a string.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       If specified, then only substrings up to limit\n       are returned with the rest of the string being placed in the last\n       substring.  A limit of -1, 0 or NULL means &quot;no limit&quot;\n       and, as is standard across PHP, you can use NULL to skip to the \n       flags parameter.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be any combination of the following\n       flags (combined with the | bitwise operator):\n       \n\n        \n\n         PREG_SPLIT_NO_EMPTY\n         \n\n          \n          If this flag is set, only non-empty pieces will be returned by\n          preg_split().\n          \n         \n\n        \n\n        \n\n         PREG_SPLIT_DELIM_CAPTURE\n         \n\n          \n          If this flag is set, parenthesized expression in the delimiter pattern\n          will be captured and returned as well.\n          \n         \n\n        \n\n        \n\n         PREG_SPLIT_OFFSET_CAPTURE\n         \n\n          \n           If this flag is set, for every occurring match the appendant string\n           offset will also be returned. Note that this changes the return\n           value in an array where every element is an array consisting of the\n           matched string at offset 0 and its string offset\n           into subject at offset 1.\n          \n         \n\n        \n\n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array containing substrings of subject\n   split along boundaries matched by pattern.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The PREG_SPLIT_OFFSET_CAPTURE was added\n       \n      \n\n      \n       4.0.5\n       \n        The PREG_SPLIT_DELIM_CAPTURE was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 preg_split() example : Get the parts of a search string\n    \n\n&lt;?php\/\/&nbsp;split&nbsp;the&nbsp;phrase&nbsp;by&nbsp;any&nbsp;number&nbsp;of&nbsp;commas&nbsp;or&nbsp;space&nbsp;characters,\/\/&nbsp;which&nbsp;include&nbsp;\"&nbsp;\",&nbsp;\\r,&nbsp;\\t,&nbsp;\\n&nbsp;and&nbsp;\\f$keywords&nbsp;=&nbsp;preg_split(\"\/[\\s,]+\/\",&nbsp;\"hypertext&nbsp;language,&nbsp;programming\");?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Splitting a string into component characters\n    \n\n&lt;?php$str&nbsp;=&nbsp;'string';$chars&nbsp;=&nbsp;preg_split('\/\/',&nbsp;$str,&nbsp;-1,&nbsp;PREG_SPLIT_NO_EMPTY);print_r($chars);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Splitting a string into matches and their offsets\n    \n\n&lt;?php$str&nbsp;=&nbsp;'hypertext&nbsp;language&nbsp;programming';$chars&nbsp;=&nbsp;preg_split('\/&nbsp;\/',&nbsp;$str,&nbsp;-1,&nbsp;PREG_SPLIT_OFFSET_CAPTURE);print_r($chars);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; hypertext\n            [1] =&gt; 0\n        )\n\n    [1] =&gt; Array\n        (\n            [0] =&gt; language\n            [1] =&gt; 10\n        )\n\n    [2] =&gt; Array\n        (\n            [0] =&gt; programming\n            [1] =&gt; 19\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Tip\n   \n    If you don&#039;t need the power of regular expressions, you can choose\n    faster (albeit simpler) alternatives like explode()\n    or str_split().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    implode() - Join array elements with a string\n    preg_match() - Perform a regular expression match\n    preg_match_all() - Perform a global regular expression match\n    preg_replace() - Perform a regular expression search and replace\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.split.php","title":"split","description":"\n \n  split\n  (PHP 4, PHP 5)split &mdash; Split string into array by regular expression\n\n \n \n \n  Description\n  \n   array split\n    ( string $pattern\n   , string $string\n   [, int $limit = -1\n  ] )\n\n  \n   Splits a string into array by regular expression.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       Case sensitive regular expression.\n      \n      \n       If you want to split on any of the characters which are considered\n       special by regular expressions, you&#039;ll need to escape them first. If\n       you think split() (or any other regex function, for\n       that matter) is doing something weird, please read the file\n       regex.7, included in the \n       regex\/ subdirectory of the PHP distribution. It&#039;s\n       in manpage format, so you&#039;ll want to do something along the lines of\n       man \/usr\/local\/src\/regex\/regex.7 in order to read it.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       If limit is set, the returned array will\n       contain a maximum of limit elements with the\n       last element containing the whole rest of\n       string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of strings, each of which is a substring of\n   string formed by splitting it on boundaries formed\n   by the case-sensitive regular expression pattern.\n  \n  \n   If there are n occurrences of\n   pattern, the returned array will contain\n   n+1 items. For example, if\n   there is no occurrence of pattern, an array with\n   only one element will be returned. Of course, this is also true if\n   string is empty. If an error occurs,\n   split() returns FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 split() example\n    \n     To split off the first four fields from a line from\n     \/etc\/passwd:\n    \n    \n\n&lt;?phplist($user,&nbsp;$pass,&nbsp;$uid,&nbsp;$gid,&nbsp;$extra)&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;split(\":\",&nbsp;$passwd_line,&nbsp;5);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 split() example\n    \n     To parse a date which may be delimited with slashes, dots, or hyphens:\n    \n    \n\n&lt;?php\/\/&nbsp;Delimiters&nbsp;may&nbsp;be&nbsp;slash,&nbsp;dot,&nbsp;or&nbsp;hyphen$date&nbsp;=&nbsp;\"04\/30\/1973\";list($month,&nbsp;$day,&nbsp;$year)&nbsp;=&nbsp;split('[\/.-]',&nbsp;$date);echo&nbsp;\"Month:&nbsp;$month;&nbsp;Day:&nbsp;$day;&nbsp;Year:&nbsp;$year&lt;br&nbsp;\/&gt;\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n  Tip\n   \n    preg_split(), which uses a Perl-compatible regular\n    expression syntax, is often a faster alternative to\n    split().  If you don&#039;t require the power of regular\n    expressions, it is faster to use explode(), which\n    doesn&#039;t incur the overhead of the regular expression engine.\n   \n  \n  Tip\n   \n    For users looking for a way to emulate Perl&#039;s @chars =\n    split(&#039;&#039;, $str) behaviour, please see the examples for\n    preg_split() or str_split().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    preg_split() - Split string by a regular expression\n    spliti() - Split string into array by regular expression case insensitive\n    str_split() - Convert a string to an array\n    explode() - Split a string by string\n    implode() - Join array elements with a string\n    chunk_split() - Split a string into smaller chunks\n    wordwrap() - Wraps a string to a given number of characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.headers-list.php","title":"headers_list","description":"\n \n  headers_list\n  (PHP 5)headers_list &mdash; Returns a list of response headers sent (or ready to send)\n\n \n \n \n  Description\n  \n   array headers_list\n    ( void\n   )\n\n  \n   headers_list() will return a list of headers to be sent\n   to the browser \/ client.  To determine whether or not these headers have\n   been sent yet, use headers_sent().\n  \n \n\n\n \n  Return Values\n  \n   Returns a numerically indexed array of headers.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Examples using headers_list()\n    \n\n&lt;?php\/*&nbsp;setcookie()&nbsp;will&nbsp;add&nbsp;a&nbsp;response&nbsp;header&nbsp;on&nbsp;its&nbsp;own&nbsp;*\/setcookie('foo',&nbsp;'bar');\/*&nbsp;Define&nbsp;a&nbsp;custom&nbsp;response&nbsp;header&nbsp;&nbsp;&nbsp;This&nbsp;will&nbsp;be&nbsp;ignored&nbsp;by&nbsp;most&nbsp;clients&nbsp;*\/header(\"X-Sample-Test:&nbsp;foo\");\/*&nbsp;Specify&nbsp;plain&nbsp;text&nbsp;content&nbsp;in&nbsp;our&nbsp;response&nbsp;*\/header('Content-type:&nbsp;text\/plain');\/*&nbsp;What&nbsp;headers&nbsp;are&nbsp;going&nbsp;to&nbsp;be&nbsp;sent?&nbsp;*\/var_dump(headers_list());?&gt;\n\n\n    \n\n    The above example will output:\n    \n\narray(4) {\n  [0]=&gt;\n  string(23) &quot;X-Powered-By: PHP\/5.1.3&quot;\n  [1]=&gt;\n  string(19) &quot;Set-Cookie: foo=bar&quot;\n  [2]=&gt;\n  string(18) &quot;X-Sample-Test: foo&quot;\n  [3]=&gt;\n  string(24) &quot;Content-type: text\/plain&quot;\n}\n\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Headers will only be accessible and output when a SAPI that supports them\n    is in use.\n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    headers_sent() - Checks if or where headers have been sent\n    header() - Send a raw HTTP header\n    setcookie() - Send a cookie\n    apache_response_headers() - Fetch all HTTP response headers\n    http_response_code() - Get or Set the HTTP response code\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.headers-sent.php","title":"headers_sent","description":"\n \n  headers_sent\n  (PHP 4, PHP 5)headers_sent &mdash; Checks if or where headers have been sent\n\n \n \n \n  Description\n  \n   bool headers_sent\n    ([ string &$file\n   [, int &$line\n  ]] )\n\n  \n   Checks if or where headers have been sent.\n  \n  \n   You can&#039;t add any more header lines using the header()\n   function once the header block has already been sent. Using this function\n   you can at least prevent getting HTTP header related error messages.\n   Another option is to use Output Buffering.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     file\n     \n\n      \n       If the optional file and\n       line parameters are set, \n       headers_sent() will put the PHP source file name\n       and line number where output started in the file\n       and line variables.\n      \n     \n\n    \n\n    \n\n     line\n     \n\n      \n       The line number where the output started.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   headers_sent() will return FALSE if no HTTP headers\n   have already been sent or TRUE otherwise.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The optional file and line\n        parameters were added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Examples using headers_sent()\n    \n\n&lt;?php\/\/&nbsp;If&nbsp;no&nbsp;headers&nbsp;are&nbsp;sent,&nbsp;send&nbsp;oneif&nbsp;(!headers_sent())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;header('Location:&nbsp;http:\/\/www.example.com\/');&nbsp;&nbsp;&nbsp;&nbsp;exit;}\/\/&nbsp;An&nbsp;example&nbsp;using&nbsp;the&nbsp;optional&nbsp;file&nbsp;and&nbsp;line&nbsp;parameters,&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0\/\/&nbsp;Note&nbsp;that&nbsp;$filename&nbsp;and&nbsp;$linenum&nbsp;are&nbsp;passed&nbsp;in&nbsp;for&nbsp;later&nbsp;use.\/\/&nbsp;Do&nbsp;not&nbsp;assign&nbsp;them&nbsp;values&nbsp;beforehand.if&nbsp;(!headers_sent($filename,&nbsp;$linenum))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;header('Location:&nbsp;http:\/\/www.example.com\/');&nbsp;&nbsp;&nbsp;&nbsp;exit;\/\/&nbsp;You&nbsp;would&nbsp;most&nbsp;likely&nbsp;trigger&nbsp;an&nbsp;error&nbsp;here.}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Headers&nbsp;already&nbsp;sent&nbsp;in&nbsp;$filename&nbsp;on&nbsp;line&nbsp;$linenum\\n\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cannot&nbsp;redirect,&nbsp;for&nbsp;now&nbsp;please&nbsp;click&nbsp;this&nbsp;&lt;a&nbsp;\"&nbsp;.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"href=\\\"http:\/\/www.example.com\\\"&gt;link&lt;\/a&gt;&nbsp;instead\\n\";&nbsp;&nbsp;&nbsp;&nbsp;exit;}?&gt;\n\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    Headers will only be accessible and output when a SAPI that supports them\n    is in use.\n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    ob_start() - Turn on output buffering\n    trigger_error() - Generates a user-level error\/warning\/notice message\n    headers_list() - Returns a list of response headers sent (or ready to send)\n    \n     header() - Send a raw HTTP header for a more detailed discussion of the\n     matters involved.\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bson-decode.php","title":"bson_decode","description":"\n \n  bson_decode\n  (PECL mongo &gt;=1.0.1)bson_decode &mdash; Deserializes a BSON object into a PHP array\n\n \n\n \n  Description\n  \n   array bson_decode\n    ( string $bson\n   )\n\n  \n   This function is very beta and entirely useless for 99% of users.  It is only\n   useful if you&#039;re doing something weird, such as writing your own driver on \n   top of the PHP driver.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     bson\n     \n\n      \n       The BSON to be deserialized.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the deserialized BSON object.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.setrawcookie.php","title":"setrawcookie","description":"\n \n  setrawcookie\n  (PHP 5)setrawcookie &mdash; Send a cookie without urlencoding the cookie value\n\n \n \n \n  Description\n  \n   bool setrawcookie\n    ( string $name\n   [, string $value\n   [, int $expire = 0\n   [, string $path\n   [, string $domain\n   [, bool $secure = false\n   [, bool $httponly = false\n  ]]]]]] )\n\n  \n   setrawcookie() is exactly the same as\n   setcookie() except that the cookie value will not be\n   automatically urlencoded when sent to the browser.\n  \n \n\n\n \n  Parameters\n  \n   For parameter information, see the setcookie()\n   documentation.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        The httponly parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    setcookie() - Send a cookie\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.bson-encode.php","title":"bson_encode","description":"\n \n  bson_encode\n  (PECL mongo &gt;=1.0.1)bson_encode &mdash; Serializes a PHP variable into a BSON string\n\n \n\n \n  Description\n  \n   string bson_encode\n    ( mixed $anything\n   )\n\n  \n   This function is very beta and entirely useless for 99% of users.  It is only\n   useful if you&#039;re doing something weird, such as writing your own driver on \n   top of the PHP driver.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     anything\n     \n\n      \n       The variable to be serialized.\n      \n     \n\n    \n\n   \n\n  \n \n\n \n \n  Return Values\n  \n   Returns the serialized string.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.setcookie.php","title":"setcookie","description":"\n \n  setcookie\n  (PHP 4, PHP 5)setcookie &mdash; Send a cookie\n\n \n \n \n  Description\n  \n   bool setcookie\n    ( string $name\n   [, string $value\n   [, int $expire = 0\n   [, string $path\n   [, string $domain\n   [, bool $secure = false\n   [, bool $httponly = false\n  ]]]]]] )\n\n  \n   setcookie() defines a cookie to be sent along with the\n   rest of the HTTP headers. Like other headers, cookies must be sent\n   before any output from your script (this is a\n   protocol restriction). This requires that you place calls to this function\n   prior to any output, including &lt;html&gt; and\n   &lt;head&gt; tags as well as any whitespace.\n  \n  \n   Once the cookies have been set, they can be accessed on the next page load\n   with the $_COOKIE or\n   $HTTP_COOKIE_VARS arrays.  Note,\n   superglobals\n   such as $_COOKIE became available in PHP 4.1.0.\n   Cookie\n   values also exist in $_REQUEST.\n  \n \n\n\n \n  Parameters\n  \n   All the arguments except the name argument are\n   optional. You may also replace an argument with an empty string\n   (&quot;&quot;) in order to skip that argument.\n   Because the expire argument is integer, it cannot\n   be skipped with an empty string, use a zero (0)\n   instead.\n  \n  \n   &raquo;&nbsp;RFC 6265 provides the normative\n   reference on how each setcookie() parameter is\n   interpreted.\n   \n\n    \n\n     name\n     \n\n      \n       The name of the cookie.\n      \n     \n\n    \n\n    \n\n     value\n     \n\n      \n       The value of the cookie.  This value is stored on the clients computer;\n       do not store sensitive information.  Assuming the\n       name is &#039;cookiename&#039;, this\n       value is retrieved through $_COOKIE['cookiename']\n      \n     \n\n    \n\n    \n\n     expire\n     \n\n      \n       The time the cookie expires.  This is a Unix timestamp so is\n       in number of seconds since the epoch.  In other words, you&#039;ll\n       most likely set this with the time() function\n       plus the number of seconds before you want it to expire.  Or\n       you might use mktime().\n       time()+60*60*24*30 will set the cookie to\n       expire in 30 days. If set to 0, or omitted, the cookie will expire at\n       the end of the session (when the browser closes).\n      \n      \n       Note: \n        \n         You may notice the expire parameter takes on a\n         Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY\n         HH:MM:SS GMT, this is because PHP does this conversion\n         internally.\n        \n       \n      \n     \n\n    \n\n    \n\n     path\n     \n\n      \n       The path on the server in which the cookie will be available on.\n       If set to &#039;\/&#039;, the cookie will be available\n       within the entire domain.  If set to\n       &#039;\/foo\/&#039;, the cookie will only be available\n       within the \/foo\/ directory and all\n       sub-directories such as \/foo\/bar\/ of\n       domain.  The default value is the\n       current directory that the cookie is being set in.\n      \n     \n\n    \n\n    \n\n     domain\n     \n\n      \n       The domain that the cookie is available to. Setting the domain to\n       &#039;www.example.com&#039; will make the cookie\n       available in the www subdomain and higher subdomains.\n       Cookies available to a lower domain, such as\n       &#039;example.com&#039; will be available to higher subdomains,\n       such as &#039;www.example.com&#039;.\n       \n       Older browsers still implementing the deprecated\n       &raquo;&nbsp;RFC 2109 may require a leading\n       . to match all subdomains.\n      \n     \n\n    \n\n    \n\n     secure\n     \n\n      \n       Indicates that the cookie should only be transmitted over a\n       secure HTTPS connection from the client. When set to TRUE, the\n       cookie will only be set if a secure connection exists.\n       On the server-side, it&#039;s on the programmer to send this\n       kind of cookie only on secure connection (e.g. with respect to\n       $_SERVER[\"HTTPS\"]).\n      \n     \n\n    \n\n    \n\n     httponly\n     \n\n      \n       When TRUE the cookie will be made accessible only through the HTTP\n       protocol. This means that the cookie won&#039;t be accessible by\n       scripting languages, such as JavaScript. It has been suggested that\n       this setting can effectively help to reduce identity theft through\n       XSS attacks (although it is not supported by all browsers), but that\n       claim is often disputed. Added in PHP 5.2.0.\n       TRUE or FALSE\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   If output exists prior to calling this function,\n   setcookie() will fail and return FALSE. If\n   setcookie() successfully runs, it will return TRUE.\n   This does not indicate whether the user accepted the cookie.\n  \n \n\n\n \n  Examples\n  \n   Some examples follow how to send cookies:\n   \n    Example #1 setcookie() send example\n    \n\n&lt;?php$value&nbsp;=&nbsp;'something&nbsp;from&nbsp;somewhere';setcookie(\"TestCookie\",&nbsp;$value);setcookie(\"TestCookie\",&nbsp;$value,&nbsp;time()+3600);&nbsp;&nbsp;\/*&nbsp;expire&nbsp;in&nbsp;1&nbsp;hour&nbsp;*\/setcookie(\"TestCookie\",&nbsp;$value,&nbsp;time()+3600,&nbsp;\"\/~rasmus\/\",&nbsp;\"example.com\",&nbsp;1);?&gt;\n\n\n    \n\n   \n  \n  \n   Note that the value portion of the cookie will automatically be\n   urlencoded when you send the cookie, and when it is received, it\n   is automatically decoded and assigned to a variable by the same\n   name as the cookie name. If you don&#039;t want this, you can use\n   setrawcookie() instead if you are using PHP 5. To see\n   the contents of our test cookie in a script, simply use one of the\n   following examples:\n  \n  \n   \n    \n\n&lt;?php\/\/&nbsp;Print&nbsp;an&nbsp;individual&nbsp;cookieecho&nbsp;$_COOKIE[\"TestCookie\"];echo&nbsp;$HTTP_COOKIE_VARS[\"TestCookie\"];\/\/&nbsp;Another&nbsp;way&nbsp;to&nbsp;debug\/test&nbsp;is&nbsp;to&nbsp;view&nbsp;all&nbsp;cookiesprint_r($_COOKIE);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 setcookie() delete example\n    \n     When deleting a cookie you should assure that the expiration date\n     is in the past, to trigger the removal mechanism in your browser.\n     Examples follow how to delete cookies sent in previous example:\n    \n    \n\n&lt;?php\/\/&nbsp;set&nbsp;the&nbsp;expiration&nbsp;date&nbsp;to&nbsp;one&nbsp;hour&nbsp;agosetcookie&nbsp;(\"TestCookie\",&nbsp;\"\",&nbsp;time()&nbsp;-&nbsp;3600);setcookie&nbsp;(\"TestCookie\",&nbsp;\"\",&nbsp;time()&nbsp;-&nbsp;3600,&nbsp;\"\/~rasmus\/\",&nbsp;\"example.com\",&nbsp;1);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 setcookie() and arrays\n    \n     You may also set array cookies by using array notation in the\n     cookie name. This has the effect of setting as many cookies as\n     you have array elements, but when the cookie is received by your\n     script, the values are all placed in an array with the cookie&#039;s\n     name:\n    \n    \n\n&lt;?php\/\/&nbsp;set&nbsp;the&nbsp;cookiessetcookie(\"cookie[three]\",&nbsp;\"cookiethree\");setcookie(\"cookie[two]\",&nbsp;\"cookietwo\");setcookie(\"cookie[one]\",&nbsp;\"cookieone\");\/\/&nbsp;after&nbsp;the&nbsp;page&nbsp;reloads,&nbsp;print&nbsp;them&nbsp;outif&nbsp;(isset($_COOKIE['cookie']))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($_COOKIE['cookie']&nbsp;as&nbsp;$name&nbsp;=&gt;&nbsp;$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name&nbsp;=&nbsp;htmlspecialchars($name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;=&nbsp;htmlspecialchars($value);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$name&nbsp;:&nbsp;$value&nbsp;&lt;br&nbsp;\/&gt;\\n\";&nbsp;&nbsp;&nbsp;&nbsp;}}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nthree : cookiethree\ntwo : cookietwo\none : cookieone\n\n    \n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.0\n       \n        The httponly parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    You can use output buffering to send output prior to the\n    call of this function, with the overhead of all of your output to the\n    browser being buffered in the server until you send it. You can do this\n    by calling ob_start() and\n    ob_end_flush() in your script, or setting the\n    output_buffering configuration directive on in your\n    php.ini or server configuration files.\n   \n  \n  Note: \n   \n    If the PHP directive register_globals\n    is set to on then cookie values will also be made into\n    variables.  In our examples below, $TestCookie will\n    exist.  It&#039;s recommended to use $_COOKIE.\n   \n  \n  \n   Common Pitfalls:\n   \n    \n     \n      Cookies will not become visible until the next loading of a page that\n      the cookie should be visible for.  To test if a cookie was successfully\n      set, check for the cookie on a next loading page before the cookie\n      expires.  Expire time is set via the expire\n      parameter.  A nice way to debug the existence of cookies is by\n      simply calling print_r($_COOKIE);.\n     \n    \n    \n     \n      Cookies must be deleted with the same parameters as they were set with.\n      If the value argument is an empty string, or FALSE, and all other arguments\n      match a previous call to setcookie, then the cookie with the specified\n      name will be deleted from the remote client.\n      This is internally achieved by setting value to &#039;deleted&#039; and expiration\n      time to one year in past.\n     \n    \n    \n     \n      Because setting a cookie with a value of FALSE will try to delete the cookie,\n      you should not use boolean values. Instead, use 0 for FALSE\n      and 1 for TRUE.\n     \n    \n    \n     \n      Cookies names can be set as array names and will be available to your\n      PHP scripts as arrays but separate cookies are stored on the user&#039;s\n      system. Consider explode() to set one cookie with\n      multiple names and values. It is not recommended to use\n      serialize() for this purpose, because it can result\n      in security holes.\n     \n    \n   \n  \n  \n   Multiple calls to setcookie() are performed in the order called.\n  \n \n\n\n \n  See Also\n  \n   \n    header() - Send a raw HTTP header\n    setrawcookie() - Send a cookie without urlencoding the cookie value\n    cookies section\n    &raquo;&nbsp;RFC 6265\n    &raquo;&nbsp;RFC 2109\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header.php","title":"header","description":"\n \n  header\n  (PHP 4, PHP 5)header &mdash; Send a raw HTTP header\n\n \n \n \n  Description\n  \n   void header\n    ( string $string\n   [, bool $replace = true\n   [, int $http_response_code\n  ]] )\n\n  \n   header() is used to send a raw HTTP\n   header. See the &raquo;&nbsp;HTTP\/1.1 specification\n   for more information on HTTP headers.\n  \n  \n   Remember that header() must be called before any\n   actual output is sent, either by normal HTML tags, blank lines in a\n   file, or from PHP. It is a very common error to read code with\n   include(), or require(), \n   functions, or another file access function, and have spaces or empty\n   lines that are output before header() is called.\n   The same problem exists when using a single PHP\/HTML file.\n   \n    \n\n&lt;html&gt;&lt;?php\/*&nbsp;This&nbsp;will&nbsp;give&nbsp;an&nbsp;error.&nbsp;Note&nbsp;the&nbsp;output&nbsp;*&nbsp;above,&nbsp;which&nbsp;is&nbsp;before&nbsp;the&nbsp;header()&nbsp;call&nbsp;*\/header('Location:&nbsp;http:\/\/www.example.com\/');?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The header string.\n      \n      \n       There are two special-case header calls.  The first is a header\n       that starts with the string &quot;HTTP\/&quot; (case is not\n       significant), which will be used to figure out the HTTP status\n       code to send. For example, if you have configured Apache to\n       use a PHP script to handle requests for missing files (using\n       the ErrorDocument directive), you may want to\n       make sure that your script generates the proper status code.\n      \n      \n       \n        \n\n&lt;?phpheader(\"HTTP\/1.0&nbsp;404&nbsp;Not&nbsp;Found\");?&gt;\n\n\n        \n\n       \n      \n      \n       For FastCGI you must use the following for a 404 response:\n       \n        \n\n&lt;?phpheader(\"Status:&nbsp;404&nbsp;Not&nbsp;Found\");?&gt;\n\n\n        \n\n                \n      \n      \n       The second special case is the &quot;Location:&quot; header.  Not only does\n       it send this header back to the browser, but it also returns a\n       REDIRECT (302) status code to the browser\n       unless the 201 or\n       a 3xx status code has already been set.\n      \n      \n       \n        \n\n&lt;?phpheader(\"Location:&nbsp;http:\/\/www.example.com\/\");&nbsp;\/*&nbsp;Redirect&nbsp;browser&nbsp;*\/\/*&nbsp;Make&nbsp;sure&nbsp;that&nbsp;code&nbsp;below&nbsp;does&nbsp;not&nbsp;get&nbsp;executed&nbsp;when&nbsp;we&nbsp;redirect.&nbsp;*\/exit;?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     replace\n     \n\n      \n       The optional replace parameter indicates\n       whether the header should replace a previous similar header, or\n       add a second header of the same type.  By default it will replace,\n       but if you pass in FALSE as the second argument you can force\n       multiple headers of the same type.  For example:\n      \n      \n       \n        \n\n&lt;?phpheader('WWW-Authenticate:&nbsp;Negotiate');header('WWW-Authenticate:&nbsp;NTLM',&nbsp;false);?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     http_response_code\n     \n\n      \n       Forces the HTTP response code to the specified value. Note that this \n       parameter only has an effect if the string is \n       not empty.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.4.2 and 5.1.2\n       \n        This function now prevents more than one header to be sent at once as\n        a protection against header injection attacks.\n       \n      \n\n      \n       4.3.0\n       \n        The http_response_code parameter was added.\n       \n      \n\n      \n       4.0.4\n       \n        The replace parameter was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Download dialog\n    \n     If you want the user to be prompted to save the data you are\n     sending, such as a generated PDF file, you can use the &raquo;&nbsp;Content-Disposition header to\n     supply a recommended filename and force the browser to display the\n     save dialog.\n    \n    \n\n&lt;?php\/\/&nbsp;We'll&nbsp;be&nbsp;outputting&nbsp;a&nbsp;PDFheader('Content-type:&nbsp;application\/pdf');\/\/&nbsp;It&nbsp;will&nbsp;be&nbsp;called&nbsp;downloaded.pdfheader('Content-Disposition:&nbsp;attachment;&nbsp;filename=\"downloaded.pdf\"');\/\/&nbsp;The&nbsp;PDF&nbsp;source&nbsp;is&nbsp;in&nbsp;original.pdfreadfile('original.pdf');?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Caching directives\n    \n     PHP scripts often generate dynamic content that must not be cached\n     by the client browser or any proxy caches between the server and the\n     client browser. Many proxies and clients can be forced to disable\n     caching with:\n    \n    \n\n&lt;?phpheader(\"Cache-Control:&nbsp;no-cache,&nbsp;must-revalidate\");&nbsp;\/\/&nbsp;HTTP\/1.1header(\"Expires:&nbsp;Sat,&nbsp;26&nbsp;Jul&nbsp;1997&nbsp;05:00:00&nbsp;GMT\");&nbsp;\/\/&nbsp;Date&nbsp;in&nbsp;the&nbsp;past?&gt;\n\n\n    \n\n    \n     Note: \n      \n       You may find that your pages aren&#039;t cached even if you don&#039;t\n       output all of the headers above. There are a number of options\n       that users may be able to set for their browser that change its\n       default caching behavior. By sending the headers above, you should\n       override any settings that may otherwise cause the output of your\n       script to be cached.\n      \n      \n       Additionally, session_cache_limiter() and\n       the session.cache_limiter configuration\n       setting can be used to automatically generate the correct\n       caching-related headers when sessions are being used.\n      \n     \n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Headers will only be accessible and output when a SAPI that supports them\n    is in use.\n   \n  \n\n  Note: \n   \n    You can use output buffering to get around this problem,\n    with the overhead of all of your output to the browser being buffered\n    in the server until you send it. You can do this by calling\n    ob_start() and ob_end_flush()\n    in your script, or setting the output_buffering\n    configuration directive on in your php.ini or\n    server configuration files.\n   \n  \n  Note: \n   \n    The HTTP status header line will always be the first sent\n    to the client, regardless of the actual header()\n    call being the first or not. The status may be overridden\n    by calling header() with a new status line\n    at any time unless the HTTP headers have already been sent.\n   \n  \n  Note: \n   \n    There is a bug in Microsoft Internet Explorer 4.01 that prevents\n    this from working. There is no workaround. There is also a bug\n    in Microsoft Internet Explorer 5.5 that interferes with this,\n    which can be resolved by upgrading to Service Pack 2 or later.\n   \n  \n  Note: \n   \n    If safe mode is enabled the\n    uid of the script is added to the realm part\n    of the WWW-Authenticate header if you set\n    this header (used for HTTP Authentication).\n   \n  \n  Note: \n   \n    HTTP\/1.1 requires an absolute URI as argument to\n    &raquo;&nbsp;Location:\n    including the scheme, hostname and absolute path, but\n    some clients accept relative URIs. You can usually use\n    $_SERVER['HTTP_HOST'],\n    $_SERVER['PHP_SELF']\n    and dirname() to make an absolute URI from a\n    relative one yourself:\n    \n     \n\n&lt;?php\/*&nbsp;Redirect&nbsp;to&nbsp;a&nbsp;different&nbsp;page&nbsp;in&nbsp;the&nbsp;current&nbsp;directory&nbsp;that&nbsp;was&nbsp;requested&nbsp;*\/$host&nbsp;&nbsp;=&nbsp;$_SERVER['HTTP_HOST'];$uri&nbsp;&nbsp;&nbsp;=&nbsp;rtrim(dirname($_SERVER['PHP_SELF']),&nbsp;'\/\\\\');$extra&nbsp;=&nbsp;'mypage.php';header(\"Location:&nbsp;http:\/\/$host$uri\/$extra\");exit;?&gt;\n\n\n     \n\n    \n   \n  \n  Note: \n   \n    Session ID is not passed with Location header even if session.use_trans_sid is\n    enabled. It must by passed manually using SID\n    constant.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    headers_sent() - Checks if or where headers have been sent\n    setcookie() - Send a cookie\n    \n     The section on HTTP\n     authentication\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.closelog.php","title":"closelog","description":"\n \n  closelog\n  (PHP 4, PHP 5)closelog &mdash; Close connection to system logger\n\n \n \n \n  Description\n  \n   bool closelog\n    ( void\n   )\n\n  \n   closelog() closes the descriptor being used to write to\n   the system logger.  The use of closelog() is optional.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    syslog() - Generate a system log message\n    openlog() - Open connection to system logger\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.checkdnsrr.php","title":"checkdnsrr","description":"\n \n  checkdnsrr\n  (PHP 4, PHP 5)checkdnsrr &mdash; Check DNS records corresponding to a given Internet host name or IP address\n\n \n \n \n  Description\n  \n   bool checkdnsrr\n    ( string $host\n   [, string $type = &quot;MX&quot;\n  ] )\n\n  \n   Searches DNS for records of type type\n   corresponding to host. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     host\n     \n\n      \n       host may either be the IP address in\n       dotted-quad notation or the host name.\n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       type may be any one of: A, MX, NS, SOA,\n       PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if any records are found; returns FALSE if no records\n   were found or if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on Windows platforms.\n       \n      \n\n      \n       5.2.4\n       \n        TXT type was added.\n       \n      \n\n      \n       5.0.0\n       \n        AAAA type was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    For compatibility with Windows before this was implemented, then try the\n    &raquo;&nbsp;PEAR class\n    &raquo;&nbsp;Net_DNS.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    dns_get_record() - Fetch DNS Resource Records associated with a hostname\n    getmxrr() - Get MX records corresponding to a given Internet host name\n    gethostbyaddr() - Get the Internet host name corresponding to a given IP address\n    gethostbyname() - Get the IPv4 address corresponding to a given Internet host name\n    gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n    the named(8) manual page\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-check-record.php","title":"dns_check_record","description":"\n \n  dns_check_record\n  (PHP 5)dns_check_record &mdash; Alias of checkdnsrr()\n\n \n \n \n  Description\n  \n   This function is an alias of: \n   checkdnsrr().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-get-mx.php","title":"dns_get_mx","description":"\n \n  dns_get_mx\n  (PHP 5)dns_get_mx &mdash; Alias of getmxrr()\n\n \n \n \n  Description\n  \n   This function is an alias of: \n   getmxrr().\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.define-syslog-variables.php","title":"define_syslog_variables","description":"\n \n  define_syslog_variables\n  (PHP 4, PHP 5)define_syslog_variables &mdash; Initializes all syslog related variables\n\n \n \n \n  Description\n  \n   void define_syslog_variables\n    ( void\n   )\n\n  \n   Initializes all variables used in the syslog functions.\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n  \n   Syslog variables\n   \n    \n     \n      Variable\n      Constant equal\n      Meaning\n      Notes\n     \n\n    \n\n    \n     \n      $LOG_EMERG\n      LOG_EMERG\n      System is unusable\n      &nbsp;\n     \n\n     \n      $LOG_ALERT\n      LOG_ALERT\n      Immediate action required\n      &nbsp;\n     \n\n     \n      $LOG_CRIT\n      LOG_CRIT\n      Critical conditions\n      &nbsp;\n     \n\n     \n      $LOG_ERR\n      LOG_ERR\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_WARNING\n      LOG_WARNING\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_NOTICE\n      LOG_NOTICE\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_INFO\n      LOG_INFO\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_DEBUG\n      LOG_DEBUG\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_KERN\n      LOG_KERN\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_USER\n      LOG_USER\n      Genetic user level\n      &nbsp;\n     \n\n     \n      $LOG_MAIL\n      LOG_MAIL\n      Log to email\n      &nbsp;\n     \n\n     \n      $LOG_DAEMON\n      LOG_DAEMON\n      Other system daemons\n      &nbsp;\n     \n\n     \n      $LOG_AUTH\n      LOG_AUTH\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_SYSLOG\n      LOG_SYSLOG\n      &nbsp;\n      Not available on Netware\n     \n\n     \n      $LOG_LPR\n      LOG_LPR\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_NEWS\n      LOG_NEWS\n      Usenet new\n      Not available on HP-UX\n     \n\n     \n      $LOG_CRON\n      LOG_CRON\n      &nbsp;\n      Not available on all platforms\n     \n\n     \n      $LOG_AUTHPRIV\n      LOG_AUTHPRIV\n      &nbsp;\n      Not available on AIX\n     \n\n     \n      $LOG_LOCAL0\n      LOG_LOCAL0\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL1\n      LOG_LOCAL1\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL2\n      LOG_LOCAL2\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL3\n      LOG_LOCAL3\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL4\n      LOG_LOCAL4\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL5\n      LOG_LOCAL5\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL6\n      LOG_LOCAL6\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_LOCAL7\n      LOG_LOCAL7\n      &nbsp;\n      Not available on Windows and Netware\n     \n\n     \n      $LOG_PID\n      LOG_PID\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_CONS\n      LOG_CONS\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_ODELAY\n      LOG_ODELAY\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_NDELAY\n      LOG_NDELAY\n      &nbsp;\n      &nbsp;\n     \n\n     \n      $LOG_NOWAIT\n      LOG_NOWAIT\n      &nbsp;\n      Not available on BeOS\n     \n\n     \n      $LOG_PERROR\n      LOG_PERROR\n      &nbsp;\n      Not available on AIX\n     \n\n    \n   \n  \n\n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Examples\n  \n   \n    Example #1 define_syslog_variables() example\n    \n\n&lt;?php\/\/&nbsp;Check&nbsp;if&nbsp;syslog&nbsp;variables&nbsp;already&nbsp;is&nbsp;definedif(!get_cfg_var('define_syslog_variables')){&nbsp;&nbsp;&nbsp;&nbsp;define_syslog_variables();}\/\/&nbsp;Open&nbsp;the&nbsp;logopenlog('',&nbsp;$LOG_ODELAY,&nbsp;$LOG_MAIL&nbsp;|&nbsp;$LOG_USER);\/\/&nbsp;Continue&nbsp;script&nbsp;...?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n      \n       5.3.0\n       \n        This function now throws an E_DEPRECATED notice.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    openlog() - Open connection to system logger\n    syslog() - Generate a system log message\n    closelog() - Close connection to system logger\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.dns-get-record.php","title":"dns_get_record","description":"\n \n  dns_get_record\n  (PHP 5)dns_get_record &mdash; Fetch DNS Resource Records associated with a hostname\n\n \n \n \n  Description\n  \n   array dns_get_record\n    ( string $hostname\n   [, int $type = DNS_ANY\n   [, array &$authns\n   [, array &$addtl\n  ]]] )\n\n  \n   Fetch DNS Resource Records associated with the given\n   hostname.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       hostname should be a valid DNS hostname such\n       as &quot;www.example.com&quot;. Reverse lookups can be generated\n       using in-addr.arpa notation, but\n       gethostbyaddr() is more suitable for\n       the majority of reverse lookups.\n      \n      Note: \n       \n        Per DNS standards, email addresses are given in user.host format (for\n        example: hostmaster.example.com as opposed to hostmaster@example.com),\n        be sure to check this value and modify if necessary before using it\n        with a functions such as mail().\n       \n      \n     \n\n    \n\n    \n\n     type\n     \n\n      \n       By default, dns_get_record() will search for any\n       resource records associated with hostname. \n       To limit the query, specify the optional type\n       parameter. May be any one of the following:\n       DNS_A, DNS_CNAME,\n       DNS_HINFO, DNS_MX,\n       DNS_NS, DNS_PTR,\n       DNS_SOA, DNS_TXT,\n       DNS_AAAA, DNS_SRV,\n       DNS_NAPTR, DNS_A6,\n       DNS_ALL or DNS_ANY.\n      \n      Note: \n       \n        Because of eccentricities in the performance of libresolv\n        between platforms, DNS_ANY will not\n        always return every record, the slower DNS_ALL\n        will collect all records more reliably.\n       \n      \n     \n\n    \n\n    \n\n     authns\n     \n\n      \n       Passed by reference and, if given, will be populated with Resource\n       Records for the Authoritative Name Servers.\n      \n     \n\n    \n\n    \n\n     addtl\n     \n\n      \n       Passed by reference and, if given, will be populated with any\n       Additional Records.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   This function returns an array of associative arrays,\n    or FALSE on failure. Each associative array contains\n   at minimum the following keys:\n   \n    Basic DNS attributes\n    \n     \n      \n       Attribute\n       Meaning\n      \n\n     \n\n     \n      \n       host\n       \n        The record in the DNS namespace to which the rest of the associated data refers.\n       \n      \n\n      \n       class\n       \n        dns_get_record() only returns Internet class records and as\n        such this parameter will always return IN.\n       \n      \n\n      \n       type\n       \n        String containing the record type.  Additional attributes will also be contained\n        in the resulting array dependant on the value of type. See table below.\n       \n      \n\n      \n       ttl\n       \n        &quot;Time To Live&quot; remaining for this record. This will not equal\n        the record&#039;s original ttl, but will rather equal the original ttl minus whatever\n        length of time has passed since the authoritative name server was queried.\n       \n      \n\n     \n    \n   \n\n  \n  \n   \n    Other keys in associative arrays dependant on &#039;type&#039;\n    \n     \n      \n       Type\n       Extra Columns\n      \n\n     \n\n     \n      \n       A\n       \n        ip: An IPv4 addresses in dotted decimal notation.\n       \n      \n\n      \n       MX\n       \n        pri: Priority of mail exchanger.\n        Lower numbers indicate greater priority.\n        target: FQDN of the mail exchanger.\n        See also dns_get_mx().\n       \n      \n\n      \n       CNAME\n       \n        target: FQDN of location in DNS namespace to which\n        the record is aliased.\n       \n      \n\n      \n       NS\n       \n        target: FQDN of the name server which is authoritative\n        for this hostname.\n       \n      \n\n      \n       PTR\n       \n        target: Location within the DNS namespace to which\n        this record points.\n       \n      \n\n       \n       TXT\n       \n        txt: Arbitrary string data associated with this record.\n       \n      \n\n      \n       HINFO\n       \n        cpu: IANA number designating the CPU of the machine\n        referenced by this record.\n        os: IANA number designating the Operating System on\n        the machine referenced by this record.\n        See IANA&#039;s &raquo;&nbsp;Operating System\n        Names for the meaning of these values.\n       \n      \n\n      \n       SOA\n       \n        mname: FQDN of the machine from which the resource\n        records originated.\n        rname: Email address of the administrative contain\n        for this domain.\n        serial: Serial # of this revision of the requested\n        domain.\n        refresh: Refresh interval (seconds) secondary name\n        servers should use when updating remote copies of this domain.\n        retry: Length of time (seconds) to wait after a\n        failed refresh before making a second attempt.\n        expire: Maximum length of time (seconds) a secondary\n        DNS server should retain remote copies of the zone data without a\n        successful refresh before discarding.\n        minimum-ttl: Minimum length of time (seconds) a\n        client can continue to use a DNS resolution before it should request\n        a new resolution from the server.  Can be overridden by individual\n        resource records.\n       \n      \n\n      \n       AAAA\n       \n        ipv6: IPv6 address\n       \n      \n\n      \n       A6(PHP &gt;= 5.1.0)\n       \n        masklen: Length (in bits) to inherit from the target\n        specified by chain.\n        ipv6: Address for this specific record to merge with\n        chain.\n        chain: Parent record to merge with\n        ipv6 data.\n       \n      \n\n      \n       SRV\n       \n        pri: (Priority) lowest priorities should be used first.\n        weight: Ranking to weight which of commonly prioritized\n        targets should be chosen at random.\n        target and port: hostname and port\n        where the requested service can be found.\n        For additional information see: &raquo;&nbsp;RFC 2782\n       \n      \n\n      \n       NAPTR\n       \n        order and pref: Equivalent to\n        pri and weight above.\n        flags, services, regex,\n        and replacement: Parameters as defined by\n        &raquo;&nbsp;RFC 2915.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on Windows platforms.\n       \n      \n\n      \n       5.3.0\n       \n        Prior to this release, if the authns parameter\n        was given, the addtl parameter was also\n        required.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using dns_get_record()\n    \n\n&lt;?php$result&nbsp;=&nbsp;dns_get_record(\"php.net\");print_r($result);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; MX\n            [pri] =&gt; 5\n            [target] =&gt; pair2.php.net\n            [class] =&gt; IN\n            [ttl] =&gt; 6765\n        )\n\n    [1] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; A\n            [ip] =&gt; 64.246.30.37\n            [class] =&gt; IN\n            [ttl] =&gt; 8125\n        )\n\n)\n\n    \n   \n   \n    Example #2 Using dns_get_record() and DNS_ANY\n    \n     Since it&#039;s very common to want the IP address of a mail server\n     once the MX record has been resolved, dns_get_record()\n     also returns an array in addtl which\n     contains associate records.  authns\n     is returned as well containing a list of authoritative name\n     servers.\n    \n    \n\n&lt;?php\/*&nbsp;Request&nbsp;\"ANY\"&nbsp;record&nbsp;for&nbsp;php.net,&nbsp;&nbsp;&nbsp;and&nbsp;create&nbsp;$authns&nbsp;and&nbsp;$addtl&nbsp;arrays&nbsp;&nbsp;&nbsp;containing&nbsp;list&nbsp;of&nbsp;name&nbsp;servers&nbsp;and&nbsp;&nbsp;&nbsp;any&nbsp;additional&nbsp;records&nbsp;which&nbsp;go&nbsp;with&nbsp;&nbsp;&nbsp;them&nbsp;*\/$result&nbsp;=&nbsp;dns_get_record(\"php.net\",&nbsp;DNS_ANY,&nbsp;$authns,&nbsp;$addtl);echo&nbsp;\"Result&nbsp;=&nbsp;\";print_r($result);echo&nbsp;\"Auth&nbsp;NS&nbsp;=&nbsp;\";print_r($authns);echo&nbsp;\"Additional&nbsp;=&nbsp;\";print_r($addtl);?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nResult = Array\n(\n    [0] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; MX\n            [pri] =&gt; 5\n            [target] =&gt; pair2.php.net\n            [class] =&gt; IN\n            [ttl] =&gt; 6765\n        )\n\n    [1] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; A\n            [ip] =&gt; 64.246.30.37\n            [class] =&gt; IN\n            [ttl] =&gt; 8125\n        )\n\n)\nAuth NS = Array\n(\n    [0] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; NS\n            [target] =&gt; remote1.easydns.com\n            [class] =&gt; IN\n            [ttl] =&gt; 10722\n        )\n\n    [1] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; NS\n            [target] =&gt; remote2.easydns.com\n            [class] =&gt; IN\n            [ttl] =&gt; 10722\n        )\n\n    [2] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; NS\n            [target] =&gt; ns1.easydns.com\n            [class] =&gt; IN\n            [ttl] =&gt; 10722\n        )\n\n    [3] =&gt; Array\n        (\n            [host] =&gt; php.net\n            [type] =&gt; NS\n            [target] =&gt; ns2.easydns.com\n            [class] =&gt; IN\n            [ttl] =&gt; 10722\n        )\n\n)\nAdditional = Array\n(\n    [0] =&gt; Array\n        (\n            [host] =&gt; pair2.php.net\n            [type] =&gt; A\n            [ip] =&gt; 216.92.131.5\n            [class] =&gt; IN\n            [ttl] =&gt; 6766\n        )\n\n    [1] =&gt; Array\n        (\n            [host] =&gt; remote1.easydns.com\n            [type] =&gt; A\n            [ip] =&gt; 64.39.29.212\n            [class] =&gt; IN\n            [ttl] =&gt; 100384\n        )\n\n    [2] =&gt; Array\n        (\n            [host] =&gt; remote2.easydns.com\n            [type] =&gt; A\n            [ip] =&gt; 212.100.224.80\n            [class] =&gt; IN\n            [ttl] =&gt; 81241\n        )\n\n    [3] =&gt; Array\n        (\n            [host] =&gt; ns1.easydns.com\n            [type] =&gt; A\n            [ip] =&gt; 216.220.40.243\n            [class] =&gt; IN\n            [ttl] =&gt; 81241\n        )\n\n    [4] =&gt; Array\n        (\n            [host] =&gt; ns2.easydns.com\n            [type] =&gt; A\n            [ip] =&gt; 216.220.40.244\n            [class] =&gt; IN\n            [ttl] =&gt; 81241\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    For compatibility with versions before PHP 5.3.0 on some operating systems,\n    try the &raquo;&nbsp;PEAR class\n    &raquo;&nbsp;Net_DNS.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    dns_get_mx() - Alias of getmxrr\n    dns_check_record() - Alias of checkdnsrr\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbynamel.php","title":"gethostbynamel","description":"\n \n  gethostbynamel\n  (PHP 4, PHP 5)gethostbynamel &mdash; \n   Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n  \n\n \n \n  Description\n  \n   array gethostbynamel\n    ( string $hostname\n   )\n\n  \n   Returns a list of IPv4 addresses to which the Internet host\n   specified by hostname resolves. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The host name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of IPv4 addresses or FALSE if\n   hostname could not be resolved.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 gethostbynamel() example\n    \n\n&lt;?php$hosts&nbsp;=&nbsp;gethostbynamel('www.example.com');print_r($hosts);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; 192.0.34.166\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    gethostbyname() - Get the IPv4 address corresponding to a given Internet host name\n    gethostbyaddr() - Get the Internet host name corresponding to a given IP address\n    checkdnsrr() - Check DNS records corresponding to a given Internet host name or IP address\n    getmxrr() - Get MX records corresponding to a given Internet host name\n    the named(8) manual page\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostname.php","title":"gethostname","description":"\n \n  gethostname\n  (PHP &gt;= 5.3.0)gethostname &mdash; Gets the host name\n\n \n \n \n  Description\n  \n   string gethostname\n    ( void\n   )\n\n  \n   gethostname() gets the standard host name for \n   the local machine.\n  \n \n\n\n \n  Return Values\n  \n   Returns a string with the hostname on success, otherwise FALSE is \n   returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple gethostname() example\n    \n\n&lt;?phpecho&nbsp;gethostname();&nbsp;\/\/&nbsp;may&nbsp;output&nbsp;e.g,:&nbsp;sandie\/\/&nbsp;Or,&nbsp;an&nbsp;option&nbsp;that&nbsp;also&nbsp;works&nbsp;before&nbsp;PHP&nbsp;5.3echo&nbsp;php_uname('n');&nbsp;\/\/&nbsp;may&nbsp;output&nbsp;e.g,:&nbsp;sandie?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gethostbyname() - Get the IPv4 address corresponding to a given Internet host name\n    gethostbyaddr() - Get the Internet host name corresponding to a given IP address\n    php_uname() - Returns information about the operating system PHP is running on\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbyaddr.php","title":"gethostbyaddr","description":"\n \n  gethostbyaddr\n  (PHP 4, PHP 5)gethostbyaddr &mdash; \n   Get the Internet host name corresponding to a given IP address\n  \n\n \n \n  Description\n  \n   string gethostbyaddr\n    ( string $ip_address\n   )\n\n  \n   Returns the host name of the Internet host specified by\n   ip_address.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     ip_address\n     \n\n      \n       The host IP address.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the host name or the unmodified ip_address\n   on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple gethostbyaddr() example\n    \n\n&lt;?php$hostname&nbsp;=&nbsp;gethostbyaddr($_SERVER['REMOTE_ADDR']);echo&nbsp;$hostname;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gethostbyname() - Get the IPv4 address corresponding to a given Internet host name\n    gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.gethostbyname.php","title":"gethostbyname","description":"\n \n  gethostbyname\n  (PHP 4, PHP 5)gethostbyname &mdash; \n   Get the IPv4 address corresponding to a given Internet host name\n  \n\n \n\n \n  Description\n  \n   string gethostbyname\n    ( string $hostname\n   )\n\n  \n   Returns the IPv4 address of the Internet host specified by\n   hostname.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The host name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the IPv4 address or a string containing the unmodified\n   hostname on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 A simple gethostbyname() example\n    \n\n&lt;?php$ip&nbsp;=&nbsp;gethostbyname('www.example.com');echo&nbsp;$ip;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    gethostbyaddr() - Get the Internet host name corresponding to a given IP address\n    gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n    inet_pton() - Converts a human readable IP address to its packed in_addr representation\n    inet_ntop() - Converts a packed internet address to a human readable representation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getprotobyname.php","title":"getprotobyname","description":"\n \n  getprotobyname\n  (PHP 4, PHP 5)getprotobyname &mdash; Get protocol number associated with protocol name\n\n \n \n \n  Description\n  \n   int getprotobyname\n    ( string $name\n   )\n\n  \n   getprotobyname() returns the protocol number\n   associated with the protocol name as per\n   \/etc\/protocols.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The protocol name.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the protocol number or -1 if the protocol is not found.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 getprotobyname() example\n    \n\n&lt;?php$protocol&nbsp;=&nbsp;'tcp';$get_prot&nbsp;=&nbsp;getprotobyname($protocol);if&nbsp;($get_prot&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Invalid&nbsp;Protocol';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Protocol&nbsp;#'&nbsp;.&nbsp;$get_prot;}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    getprotobynumber() - Get protocol name associated with protocol number\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getprotobynumber.php","title":"getprotobynumber","description":"\n \n  getprotobynumber\n  (PHP 4, PHP 5)getprotobynumber &mdash; Get protocol name associated with protocol number\n\n \n \n \n  Description\n  \n   string getprotobynumber\n    ( int $number\n   )\n\n  \n   getprotobynumber() returns the protocol name\n   associated with protocol number as per\n   \/etc\/protocols.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     number\n     \n\n      \n       The protocol number.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the protocol name as a string,  or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    getprotobyname() - Get protocol number associated with protocol name\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getservbyname.php","title":"getservbyname","description":"\n \n  getservbyname\n  (PHP 4, PHP 5)getservbyname &mdash; Get port number associated with an Internet service and protocol\n\n \n \n \n  Description\n  \n   int getservbyname\n    ( string $service\n   , string $protocol\n   )\n\n  \n   getservbyname() returns the Internet port\n   which corresponds to service for the\n   specified protocol as per\n   \/etc\/services.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     service\n     \n\n      \n       The Internet service name, as a string.\n      \n     \n\n    \n\n    \n\n     protocol\n     \n\n      \n       protocol is either &quot;tcp&quot;\n       or &quot;udp&quot; (in lowercase).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the port number, or FALSE if service or\n   protocol is not found.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 getservbyname() example\n    \n\n&lt;?php$services&nbsp;=&nbsp;array('http',&nbsp;'ftp',&nbsp;'ssh',&nbsp;'telnet',&nbsp;'imap','smtp',&nbsp;'nicname',&nbsp;'gopher',&nbsp;'finger',&nbsp;'pop3',&nbsp;'www');foreach&nbsp;($services&nbsp;as&nbsp;$service)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$port&nbsp;=&nbsp;getservbyname($service,&nbsp;'tcp');&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$service&nbsp;.&nbsp;\":&nbsp;\"&nbsp;.&nbsp;$port&nbsp;.&nbsp;\"&lt;br&nbsp;\/&gt;\\n\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    getservbyport() - Get Internet service which corresponds to port and protocol\n    \n     &raquo;&nbsp;http:\/\/www.iana.org\/assignments\/port-numbers\n     for a complete list of port numbers.\n    \n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getservbyport.php","title":"getservbyport","description":"\n \n  getservbyport\n  (PHP 4, PHP 5)getservbyport &mdash; Get Internet service which corresponds to port and protocol\n\n \n \n \n  Description\n  \n   string getservbyport\n    ( int $port\n   , string $protocol\n   )\n\n  \n   getservbyport() returns the Internet service\n   associated with port for the specified\n   protocol as per \/etc\/services.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     port\n     \n\n      \n       The port number.\n      \n     \n\n    \n\n    \n\n     protocol\n     \n\n      \n       protocol is either &quot;tcp&quot;\n       or &quot;udp&quot; (in lowercase).\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the Internet service name as a string.\n  \n \n\n\n \n  See Also\n  \n   \n    getservbyname() - Get port number associated with an Internet service and protocol\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.getmxrr.php","title":"getmxrr","description":"\n \n  getmxrr\n  (PHP 4, PHP 5)getmxrr &mdash; Get MX records corresponding to a given Internet host name\n\n \n \n \n  Description\n  \n   bool getmxrr\n    ( string $hostname\n   , array &$mxhosts\n   [, array &$weight\n  ] )\n\n  \n   Searches DNS for MX records corresponding to \n   hostname. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       The Internet host name.\n      \n     \n\n    \n\n    \n\n     mxhosts\n     \n\n      \n       A list of the MX records found is placed into the array\n       mxhosts. \n      \n     \n\n    \n\n    \n\n     weight\n     \n\n      \n       If the weight array is given, it will be filled\n       with the weight information gathered.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if any records are found; returns FALSE if no records\n   were found or if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on Windows platforms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function should not be used for the purposes of address\n    verification.  Only the mailexchangers found in DNS are returned,\n    however, according to &raquo;&nbsp;RFC 2821\n    when no mail exchangers are listed, hostname\n    itself should be used as the only mail exchanger with a priority of\n    0.\n   \n  \n  Note: \n   \n    For compatibility with Windows before this was implemented, then try the\n    &raquo;&nbsp;PEAR class\n    &raquo;&nbsp;Net_DNS.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    checkdnsrr() - Check DNS records corresponding to a given Internet host name or IP address\n    dns_get_record() - Fetch DNS Resource Records associated with a hostname\n    gethostbyname() - Get the IPv4 address corresponding to a given Internet host name\n    gethostbynamel() - Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n    gethostbyaddr() - Get the Internet host name corresponding to a given IP address\n    the named(8) manual page\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header-remove.php","title":"header_remove","description":"\n \n  header_remove\n  (PHP 5 &gt;= 5.3.0)header_remove &mdash; Remove previously set headers\n\n \n\n \n  Description\n  \n   void header_remove\n    ([ string $name\n  ] )\n\n  \n   Removes an HTTP header previously set using header().\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     name\n     \n\n      \n       The header name to be removed.\n      \n      Note: \n       \n        This parameter is case-insensitive.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Unsetting specific header.\n    \n\n&lt;?phpheader(\"X-Foo:&nbsp;Bar\");header(\"X-Bar:&nbsp;Baz\");header_remove(\"X-Foo\");&nbsp;?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nX-Bar: Baz\n\n    \n   \n   \n    Example #2 Unsetting all previously set headers.\n    \n\n&lt;?phpheader(\"X-Foo:&nbsp;Bar\");header(\"X-Bar:&nbsp;Baz\");header_remove();&nbsp;?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n\n    \n   \n  \n \n\n\n \n  Notes\n  Caution\n   \n    This function will remove all headers set by PHP,\n    including cookies, session and the X-Powered-By headers.\n   \n  \n  Note: \n   \n    Headers will only be accessible and output when a SAPI that supports them\n    is in use.\n   \n  \n\n \n\n\n \n  See Also\n  \n   \n    header() - Send a raw HTTP header\n    headers_sent() - Checks if or where headers have been sent\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.header-register-callback.php","title":"header_register_callback","description":"\n \n  header_register_callback\n  (No version information available, might only be in SVN)header_register_callback &mdash; Call a header function\n\n \n\n \n  Description\n  \n   bool header_register_callback\n    ( callback $callback\n   )\n\n  \n   Registers a function that will be called when PHP starts sending output.\n  \n  \n   The callback is executed just after PHP prepares all\n   headers to be sent, and before any other output is sent, creating a window\n   to manipulate the outgoing headers before being sent.\n  \n \n\n\n \n  Parameters\n  \n\n   \n\n    callback\n    \n\n     \n      Function called just before the headers are sent. It gets no parameters\n      and the return value is ignored.\n     \n    \n\n   \n\n  \n\n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n \n  Examples\n  \n   Example #1 header_register_callback() example\n   \n\n&lt;?phpheader('Content-Type:&nbsp;text\/plain');header('X-Test:&nbsp;foo');function&nbsp;foo()&nbsp;{&nbsp;foreach&nbsp;(headers_list()&nbsp;as&nbsp;$header)&nbsp;{&nbsp;&nbsp;&nbsp;if&nbsp;(strpos($header,&nbsp;'X-Powered-By:')&nbsp;!==&nbsp;false)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header_remove('X-Powered-By');&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;header_remove('X-Test');&nbsp;}}$result&nbsp;=&nbsp;header_register_callback('foo');echo&nbsp;\"a\";?&gt;\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\nContent-Type: text\/plain\n\na\n\n   \n  \n \n\n\n \n  Notes\n  \n   header_register_callback() is executed just as the\n   headers are about to be sent out, so any output from this function can\n   break output.\n  \n  Note: \n   \n    Headers will only be accessible and output when a SAPI that supports them\n    is in use.\n   \n  \n\n \n\n\n \n  See Also\n  \n   headers_list() - Returns a list of response headers sent (or ready to send)\n   header_remove() - Remove previously set headers\n   header() - Send a raw HTTP header\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.http-response-code.php","title":"http_response_code","description":"\n \n  http_response_code\n  (No version information available, might only be in SVN)http_response_code &mdash; Get or Set the HTTP response code\n\n \n\n \n  Description\n  \n   int http_response_code\n    ([ int $response_code\n  ] )\n\n  \n  If you pass no parameters then http_response_code will get the current status code.\n  If you pass a parameter it will set the response code.\n  \n\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     response_code\n     \n\n      \n       The optional response_code will set the response code.\n      \n      \n       \n        \n\n&lt;?phphttp_response_code(404);?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n   \n   \n\n  \n \n\n\n \n  Return Values\n  \n   The current response code. By default the return value is int(200).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Examples using headers_list()\n    \n\n&lt;?php\/\/&nbsp;Get&nbsp;the&nbsp;current&nbsp;default&nbsp;response&nbsp;codevar_dump(http_response_code());&nbsp;\/\/&nbsp;int(200)\/\/&nbsp;Set&nbsp;our&nbsp;response&nbsp;codehttp_response_code(404);\/\/&nbsp;Get&nbsp;our&nbsp;new&nbsp;response&nbsp;codevar_dump(http_response_code());&nbsp;\/\/&nbsp;int(404)?&gt;\n\n\n    \n\n    The above example will output:\n   \n  \n \n\n \n \n  See Also\n  \n   \n    header() - Send a raw HTTP header\n    headers_list() - Returns a list of response headers sent (or ready to send)\n   \n  \n \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.inet-pton.php","title":"inet_pton","description":"\n \n  inet_pton\n  (PHP 5 &gt;= 5.1.0)inet_pton &mdash; Converts a human readable IP address to its packed in_addr representation\n\n \n \n \n  Description\n  \n   string inet_pton\n    ( string $address\n   )\n\n  \n   This function converts a human readable IPv4 or IPv6 address (if PHP\n   was built with IPv6 support enabled) into an address family appropriate\n   32bit or 128bit binary structure.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     address\n     \n\n      \n       A human readable IPv4 or IPv6 address.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the in_addr representation of the given\n   address, or FALSE if a syntactically invalid\n   address is given (for example, an IPv4 address\n   without dots or an IPv6 address without colons).\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 inet_pton() Example\n    \n \n&lt;?php$in_addr&nbsp;=&nbsp;inet_pton('127.0.0.1');&nbsp;$in6_addr&nbsp;=&nbsp;inet_pton('::1');?&gt;\n\n\n    \n\n      \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on Windows platforms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address\n    long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format\n    inet_ntop() - Converts a packed internet address to a human readable representation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.inet-ntop.php","title":"inet_ntop","description":"\n \n  inet_ntop\n  (PHP 5 &gt;= 5.1.0)inet_ntop &mdash; Converts a packed internet address to a human readable representation\n\n \n \n \n  Description\n  \n   string inet_ntop\n    ( string $in_addr\n   )\n\n  \n   This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP\n   was built with IPv6 support enabled) into an address family appropriate\n   string representation.  \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     in_addr\n     \n\n      \n       A 32bit IPv4, or 128bit IPv6 address.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a string representation of the address or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 inet_ntop() Example\n    \n\n&lt;?php$packed&nbsp;=&nbsp;chr(127)&nbsp;.&nbsp;chr(0)&nbsp;.&nbsp;chr(0)&nbsp;.&nbsp;chr(1);$expanded&nbsp;=&nbsp;inet_ntop($packed);\/*&nbsp;Outputs:&nbsp;127.0.0.1&nbsp;*\/echo&nbsp;$expanded;$packed&nbsp;=&nbsp;str_repeat(chr(0),&nbsp;15)&nbsp;.&nbsp;chr(1);$expanded&nbsp;=&nbsp;inet_ntop($packed);\/*&nbsp;Outputs:&nbsp;::1&nbsp;*\/echo&nbsp;$expanded;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n         This function is now available on Windows platforms.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  See Also\n  \n   \n    long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format\n    ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address\n    inet_pton() - Converts a human readable IP address to its packed in_addr representation\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.long2ip.php","title":"long2ip","description":"\n \n  long2ip\n  (PHP 4, PHP 5)long2ip &mdash; Converts an (IPv4) Internet network address into a string in Internet standard dotted format\n\n \n \n \n  Description\n  \n   string long2ip\n    ( string $proper_address\n   )\n\n  \n   The function long2ip() generates an Internet address\n   in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address\n   representation.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     proper_address\n     \n\n      \n       A proper address representation.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the Internet IP address as a string.\n  \n \n\n\n \n  See Also\n  \n   \n    ip2long() - Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.fsockopen.php","title":"fsockopen","description":"\n \n  fsockopen\n  (PHP 4, PHP 5)fsockopen &mdash; Open Internet or Unix domain socket connection\n\n \n \n \n  Description\n  \n   resource fsockopen\n    ( string $hostname\n   [, int $port = -1\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n  ]]]] )\n\n  \n   Initiates a socket connection to the resource specified by\n   hostname.\n  \n  \n   PHP supports targets in the Internet and Unix domains as described in\n   List of Supported Socket Transports.  A list of supported transports can also be\n   retrieved using stream_get_transports().\n  \n  \n   The socket will by default be opened in blocking mode.  You can\n   switch it to non-blocking mode by using\n   stream_set_blocking().\n  \n \n\n \n  Parameters\n  \n   \n\n    \n\n     hostname\n     \n\n      \n       If OpenSSL support is\n       installed, you may prefix the hostname\n       with either ssl:\/\/ or tls:\/\/ to\n       use an SSL or TLS client connection over TCP\/IP to connect to the\n       remote host.\n      \n     \n\n    \n\n    \n\n     port\n     \n\n      \n       The port number.\n      \n     \n\n    \n\n    \n\n     errno\n     \n\n      \n       If provided, holds the system level error number that occurred in the\n       system-level connect() call.\n      \n      \n       If the value returned in errno is\n       0 and the function returned FALSE, it is an\n       indication that the error occurred before the \n       connect() call. This is most likely due to a\n       problem initializing the socket.\n      \n     \n\n    \n\n    \n\n     errstr\n     \n\n      \n       The error message as a string.\n      \n     \n\n    \n\n    \n\n     timeout\n     \n\n      \n       The connection timeout, in seconds.\n      \n      Note: \n       \n        If you need to set a timeout for reading\/writing data over the\n        socket, use stream_set_timeout(), as the \n        timeout parameter to\n        fsockopen() only applies while connecting the\n        socket.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n \n  Return Values\n  \n   fsockopen() returns a file pointer which may be used\n   together with the other file functions (such as\n   fgets(), fgetss(),\n   fwrite(), fclose(), and\n   feof()). If the call fails, it will return FALSE\n  \n \n\n \n  Errors\/Exceptions\n  \n   Throws E_WARNING if hostname is\n   not a valid domain.\n  \n \n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        Added support for the timeout parameter on\n        win32.\n       \n      \n\n      \n       4.3.0\n       \n        SSL and TLS over TCP\/IP support was added.\n       \n      \n\n     \n    \n   \n\n  \n \n\n \n  Examples\n  \n   \n    Example #1 fsockopen() Example\n    \n\n&lt;?php$fp&nbsp;=&nbsp;fsockopen(\"www.example.com\",&nbsp;80,&nbsp;$errno,&nbsp;$errstr,&nbsp;30);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$errstr&nbsp;($errno)&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$out&nbsp;=&nbsp;\"GET&nbsp;\/&nbsp;HTTP\/1.1\\r\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$out&nbsp;.=&nbsp;\"Host:&nbsp;www.example.com\\r\\n\";&nbsp;&nbsp;&nbsp;&nbsp;$out&nbsp;.=&nbsp;\"Connection:&nbsp;Close\\r\\n\\r\\n\";&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;$out);&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fgets($fp,&nbsp;128);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Using UDP connection\n    \n     The example below shows how to retrieve the day and time from the UDP\n     service &quot;daytime&quot; (port 13) in your own machine.\n    \n    \n\n&lt;?php$fp&nbsp;=&nbsp;fsockopen(\"udp:\/\/127.0.0.1\",&nbsp;13,&nbsp;$errno,&nbsp;$errstr);if&nbsp;(!$fp)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"ERROR:&nbsp;$errno&nbsp;-&nbsp;$errstr&lt;br&nbsp;\/&gt;\\n\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;\"\\n\");&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;fread($fp,&nbsp;26);&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);}?&gt;\n\n\n    \n\n   \n  \n \n\n \n  Notes\n  Note: \n   \n    Depending on the environment, the Unix domain or the optional\n    connect timeout may not be available.\n   \n  \n  Warning\n   \n    UDP sockets will sometimes appear to have opened without an error,\n    even if the remote host is unreachable.  The error will only\n    become apparent when you read or write data to\/from the socket.\n    The reason for this is because UDP is a &quot;connectionless&quot; protocol,\n    which means that the operating system does not try to establish\n    a link for the socket until it actually needs to send or receive data.\n   \n  \n  Note: When specifying a numerical IPv6 address\n(e.g. fe80::1), you must enclose the IP in square\nbrackets\u2014for example, tcp:\/\/[fe80::1]:80.\n \n\n \n  See Also\n  \n   \n    pfsockopen() - Open persistent Internet or Unix domain socket connection\n    stream_set_blocking() - Set blocking\/non-blocking mode on a stream\n    stream_set_timeout() - Set timeout period on a stream\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    fwrite() - Binary-safe file write\n    fclose() - Closes an open file pointer\n    feof() - Tests for end-of-file on a file pointer\n    The Curl extension\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.openlog.php","title":"openlog","description":"\n \n  openlog\n  (PHP 4, PHP 5)openlog &mdash; Open connection to system logger\n\n \n \n \n  Description\n  \n   bool openlog\n    ( string $ident\n   , int $option\n   , int $facility\n   )\n\n  \n   openlog() opens a connection to the system\n   logger for a program.  \n  \n   \n   The use of openlog() is optional. It\n   will automatically be called by syslog() if\n   necessary, in which case ident will default\n   to FALSE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     ident\n     \n\n      \n       The string ident is added to each message. \n      \n     \n\n    \n\n    \n\n     option\n     \n\n      \n       The option argument is used to indicate\n       what logging options will be used when generating a log message.\n       \n        openlog() Options\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_CONS\n           \n            if there is an error while sending data to the system logger,\n            write directly to the system console\n           \n          \n\n          \n           LOG_NDELAY\n           \n            open the connection to the logger immediately\n           \n          \n\n          \n           LOG_ODELAY\n           \n            (default) delay opening the connection until the first\n            message is logged\n           \n          \n\n          \n           LOG_PERROR\n           print log message also to standard error\n          \n\n          \n           LOG_PID\n           include PID with each message\n          \n\n         \n        \n       \n\n       You can use one or more of this options. When using multiple options\n       you need to OR them, i.e. to open the connection\n       immediately, write to the console and include the PID in each message,\n       you will use: LOG_CONS | LOG_NDELAY | LOG_PID\n      \n     \n\n    \n\n    \n\n     facility\n     \n\n      \n       The facility argument is used to specify what\n       type of program is logging the message. This allows you to specify\n       (in your machine&#039;s syslog configuration) how messages coming from\n       different facilities will be handled.\n       \n        openlog() Facilities\n        \n         \n          \n           Constant\n           Description\n          \n\n         \n\n         \n          \n           LOG_AUTH\n           \n            security\/authorization messages (use \n            LOG_AUTHPRIV instead\n            in systems where that constant is defined)\n           \n          \n\n          \n           LOG_AUTHPRIV\n           security\/authorization messages (private)\n          \n\n          \n           LOG_CRON\n           clock daemon (cron and at)\n          \n\n          \n           LOG_DAEMON\n           other system daemons\n          \n\n          \n           LOG_KERN\n           kernel messages\n          \n\n          \n           LOG_LOCAL0 ... LOG_LOCAL7\n           reserved for local use, these are not available in Windows\n          \n\n          \n           LOG_LPR\n           line printer subsystem\n          \n\n          \n           LOG_MAIL\n           mail subsystem\n          \n\n          \n           LOG_NEWS\n           USENET news subsystem\n          \n\n          \n           LOG_SYSLOG\n           messages generated internally by syslogd\n          \n\n          \n           LOG_USER\n           generic user-level messages\n          \n\n          \n           LOG_UUCP\n           UUCP subsystem\n          \n\n         \n        \n       \n\n      \n      Note: \n       \n        LOG_USER is the only valid log type under Windows\n        operating systems\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    syslog() - Generate a system log message\n    closelog() - Close connection to system logger\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pfsockopen.php","title":"pfsockopen","description":"\n \n  pfsockopen\n  (PHP 4, PHP 5)pfsockopen &mdash; Open persistent Internet or Unix domain socket connection\n\n \n \n \n  Description\n  \n   resource pfsockopen\n    ( string $hostname\n   [, int $port = -1\n   [, int &$errno\n   [, string &$errstr\n   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)\n  ]]]] )\n\n  \n   This function behaves exactly as fsockopen() with the\n   difference that the connection is not closed after the script finishes.\n   It is the persistent version of fsockopen().\n  \n \n\n\n \n  Parameters\n  \n   For parameter information, see the fsockopen()\n   documentation.\n  \n \n\n\n \n  See Also\n  \n   \n    fsockopen() - Open Internet or Unix domain socket connection\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-get-status.php","title":"socket_get_status","description":"\n \n  socket_get_status\n  (PHP 4, PHP 5)socket_get_status &mdash; Alias of stream_get_meta_data()\n\n \n\n \n  Description\n  \n   This function is an alias of: \n   stream_get_meta_data().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-set-timeout.php","title":"socket_set_timeout","description":"\n \n  socket_set_timeout\n  (PHP 4, PHP 5)socket_set_timeout &mdash; Alias of stream_set_timeout()\n \n \n\n \n  Description\n  \n   This function is an alias of: \n   stream_set_timeout().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.socket-set-blocking.php","title":"socket_set_blocking","description":"\n \n  socket_set_blocking\n  (PHP 4, PHP 5)socket_set_blocking &mdash; Alias of stream_set_blocking()\n \n \n\n \n  Description\n  \n   This function is an alias of:  \n   stream_set_blocking().\n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-alarm.php","title":"pcntl_alarm","description":"\n \n  pcntl_alarm\n  (PHP 4 &gt;= 4.3.0, PHP 5)pcntl_alarm &mdash; Set an alarm clock for delivery of a signal\n\n \n \n \n  Description\n  \n   int pcntl_alarm\n    ( int $seconds\n   )\n\n  \n   Creates a timer that will send a SIGALRM signal to\n   the process after the given number of seconds.\n   Any call to pcntl_alarm() will cancel any previously\n   set alarm.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     seconds\n     \n\n      \n       The number of seconds to wait. If seconds is\n       zero, no new alarm is created.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the time in seconds that any previously scheduled alarm had\n   remaining before it was to be delivered, or 0 if there\n   was no previously scheduled alarm.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-exec.php","title":"pcntl_exec","description":"\n \n  pcntl_exec\n  (PHP 4 &gt;= 4.2.0, PHP 5)pcntl_exec &mdash; Executes specified program in current process space\n\n \n \n \n  Description\n  \n   void pcntl_exec\n    ( string $path\n   [, array $args\n   [, array $envs\n  ]] )\n\n  \n   Executes the program with the given arguments.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     path\n     \n\n      \n       path must be the path to a binary executable or a\n       script with a valid path pointing to an executable in the shebang (\n       #!\/usr\/local\/bin\/perl for example) as the first line.  See your system&#039;s\n       man execve(2) page for additional information.\n      \n     \n\n    \n\n    \n\n     args\n     \n\n      \n       args is an array of argument strings passed to the\n       program.\n      \n     \n\n    \n\n    \n\n     envs\n     \n\n      \n       envs is an array of strings which are passed as\n       environment to the program.  The array is in the format of name =&gt; value,\n       the key being the name of the environmental variable and the value being\n       the value of that variable.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns FALSE on error and does not return on success.\n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-getpriority.php","title":"pcntl_getpriority","description":"\n \n  pcntl_getpriority\n  (PHP 5)pcntl_getpriority &mdash; Get the priority of any process\n\n \n \n \n  Description\n  \n   int pcntl_getpriority\n    ([ int $pid = getmypid()\n   [, int $process_identifier = PRIO_PROCESS\n  ]] )\n\n  \n   pcntl_getpriority() gets the priority of\n   pid. Because priority levels can differ between\n   system types and kernel versions, please see your system&#039;s getpriority(2)\n   man page for specific details.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       If not specified, the pid of the current process is used.\n      \n     \n\n    \n\n    \n\n     process_identifier\n     \n\n      \n       One of PRIO_PGRP, PRIO_USER\n       or PRIO_PROCESS.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   pcntl_getpriority() returns the priority of the process\n   or FALSE on error.  A lower numerical value causes more favorable\n   scheduling.\n  \n  WarningThis function may\nreturn Boolean FALSE, but may also return a non-Boolean value which\nevaluates to FALSE, such as 0 or\n&quot;&quot;. Please read the section on Booleans for more\ninformation. Use the ===\noperator for testing the return value of this\nfunction.\n \n\n\n \n  See Also\n  \n   \n    pcntl_setpriority() - Change the priority of any process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-setpriority.php","title":"pcntl_setpriority","description":"\n \n  pcntl_setpriority\n  (PHP 5)pcntl_setpriority &mdash; Change the priority of any process\n\n \n \n \n  Description\n  \n   bool pcntl_setpriority\n    ( int $priority\n   [, int $pid = getmypid()\n   [, int $process_identifier = PRIO_PROCESS\n  ]] )\n\n  \n   pcntl_setpriority() sets the priority of\n   pid. \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     priority\n     \n\n      \n       priority is generally a value in the range\n       -20 to 20. The default priority\n       is 0 while a lower numerical value causes more\n       favorable scheduling.  Because priority levels can differ between\n       system types and kernel versions, please see your system&#039;s setpriority(2)\n       man page for specific details.\n      \n     \n\n    \n\n    \n\n     pid\n     \n\n      \n       If not specified, the pid of the current process is used.\n      \n     \n\n    \n\n    \n\n     process_identifier\n     \n\n      \n       One of PRIO_PGRP, PRIO_USER\n       or PRIO_PROCESS.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_getpriority() - Get the priority of any process\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-fork.php","title":"pcntl_fork","description":"\n \n  pcntl_fork\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_fork &mdash; Forks the currently running process\n\n \n \n \n  Description\n  \n   int pcntl_fork\n    ( void\n   )\n\n  \n   The pcntl_fork() function creates a child\n   process that differs from the parent process only in its PID and\n   PPID. Please see your system&#039;s fork(2) man page for specific details as to\n   how fork works on your system.\n  \n \n\n\n \n  Return Values\n  \n   On success, the PID of the child process is returned in the\n   parent&#039;s thread of execution, and a 0 is returned in the child&#039;s\n   thread of execution.  On failure, a -1 will be returned in the\n   parent&#039;s context, no child process will be created, and a PHP\n   error is raised.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pcntl_fork() example\n    \n\n&lt;?php$pid&nbsp;=&nbsp;pcntl_fork();if&nbsp;($pid&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die('could&nbsp;not&nbsp;fork');}&nbsp;else&nbsp;if&nbsp;($pid)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;we&nbsp;are&nbsp;the&nbsp;parent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pcntl_wait($status);&nbsp;\/\/Protect&nbsp;against&nbsp;Zombie&nbsp;children}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;we&nbsp;are&nbsp;the&nbsp;child}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_signal() - Installs a signal handler\n    setproctitle() - Set the process title\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-signal-dispatch.php","title":"pcntl_signal_dispatch","description":"\n \n  pcntl_signal_dispatch\n  (PHP 5 &gt;= 5.3.0)pcntl_signal_dispatch &mdash; Calls signal handlers for pending signals\n\n \n \n \n  Description\n  \n   bool pcntl_signal_dispatch\n    ( void\n   )\n\n  \n   The pcntl_signal_dispatch() function calls the signal \n   handlers installed by pcntl_signal() for each pending\n   signal.\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pcntl_signal_dispatch() example\n    \n\n&lt;?phpecho&nbsp;\"Installing&nbsp;signal&nbsp;handler...\\n\";pcntl_signal(SIGHUP,&nbsp;&nbsp;function($signo)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"signal&nbsp;handler&nbsp;called\\n\";});echo&nbsp;\"Generating&nbsp;signal&nbsp;SIGHUP&nbsp;to&nbsp;self...\\n\";posix_kill(posix_getpid(),&nbsp;SIGHUP);echo&nbsp;\"Dispatching...\\n\";pcntl_signal_dispatch();echo&nbsp;\"Done\\n\";?&gt;\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nInstalling signal handler...\nGenerating signal SIGHUP to self...\nDispatching...\nsignal handler called\nDone\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_signal() - Installs a signal handler\n    pcntl_sigprocmask() - Sets and retrieves blocked signals\n    pcntl_sigwaitinfo() - Waits for signals\n    pcntl_sigtimedwait() - Waits for signals, with a timeout\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ip2long.php","title":"ip2long","description":"\n \n  ip2long\n  (PHP 4, PHP 5)ip2long &mdash; Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address\n\n \n \n \n  Description\n  \n   int ip2long\n    ( string $ip_address\n   )\n\n  \n   The function ip2long() generates an IPv4 Internet\n   network address from its Internet standard format (dotted string)\n   representation. \n  \n  \n   ip2long() will also work with non-complete IP\n   addresses. Read &raquo;&nbsp;http:\/\/publibn.boulder.ibm.com\/doc_link\/en_US\/a_doc_lib\/libs\/commtrf2\/inet_addr.htm\n   for more info.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     ip_address\n     \n\n      \n       A standard format address.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the IPv4 address or FALSE if ip_address\n   is invalid.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.2.10\n       \n        Prior to this version, ip2long() would sometimes return\n        a valid number even if passed an value which was not an (IPv4) Internet Protocol\n        dotted address.\n       \n      \n\n      \n       5.0.0\n       \n        Prior to this version, ip2long() returned -1 on\n        failure.\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ip2long() Example\n    \n\n&lt;?php$ip&nbsp;=&nbsp;gethostbyname('www.example.com');$out&nbsp;=&nbsp;\"The&nbsp;following&nbsp;URLs&nbsp;are&nbsp;equivalent:&lt;br&nbsp;\/&gt;\\n\";$out&nbsp;.=&nbsp;'http:\/\/www.example.com\/,&nbsp;http:\/\/'&nbsp;.&nbsp;$ip&nbsp;.&nbsp;'\/,&nbsp;and&nbsp;http:\/\/'&nbsp;.&nbsp;sprintf(\"%u\",&nbsp;ip2long($ip))&nbsp;.&nbsp;\"\/&lt;br&nbsp;\/&gt;\\n\";echo&nbsp;$out;?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Displaying an IP address\n    \n     This second example shows how to print a converted address with the\n     printf() function in both PHP 4 and PHP 5:\n    \n    \n\n&lt;?php$ip&nbsp;&nbsp;&nbsp;=&nbsp;gethostbyname('www.example.com');$long&nbsp;=&nbsp;ip2long($ip);if&nbsp;($long&nbsp;==&nbsp;-1&nbsp;||&nbsp;$long&nbsp;===&nbsp;FALSE)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'Invalid&nbsp;IP,&nbsp;please&nbsp;try&nbsp;again';}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$ip&nbsp;&nbsp;&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;192.0.34.166&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$long&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;-1073732954&nbsp;&nbsp;&nbsp;&nbsp;printf(\"%u\\n\",&nbsp;ip2long($ip));&nbsp;\/\/&nbsp;3221234342}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 IP validation\n    \n     ip2long() should not be used as the sole form\n     of IP validation. Combine it with long2ip():\n    \n    \n\n&lt;?php\/\/&nbsp;make&nbsp;sure&nbsp;IPs&nbsp;are&nbsp;valid.&nbsp;also&nbsp;converts&nbsp;a&nbsp;non-complete&nbsp;IP&nbsp;into\/\/&nbsp;a&nbsp;proper&nbsp;dotted&nbsp;quad&nbsp;as&nbsp;explained&nbsp;below.$ip&nbsp;=&nbsp;long2ip(ip2long(\"127.0.0.1\"));&nbsp;\/\/&nbsp;\"127.0.0.1\"$ip&nbsp;=&nbsp;long2ip(ip2long(\"10.0.0\"));&nbsp;\/\/&nbsp;\"10.0.0.0\"$ip&nbsp;=&nbsp;long2ip(ip2long(\"10.0.256\"));&nbsp;\/\/&nbsp;\"10.0.1.0\"?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Because PHP&#039;s integer type is signed, and many IP addresses\n    will result in negative integers on 32-bit architectures, you need to use\n    the &quot;%u&quot; formatter of sprintf() or\n    printf() to get the string representation of the\n    unsigned IP address.\n   \n  \n  Note: \n   \n    ip2long() will return FALSE for the IP\n    255.255.255.255 in PHP 5 &lt;= 5.0.2. It was fixed in\n    PHP 5.0.3 where it returns -1 (same as PHP 4).\n   \n  \n \n\n\n \n  See Also\n  \n   \n    long2ip() - Converts an (IPv4) Internet network address into a string in Internet standard dotted format\n    sprintf() - Return a formatted string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigprocmask.php","title":"pcntl_sigprocmask","description":"\n \n  pcntl_sigprocmask\n  (PHP 5 &gt;= 5.3.0)pcntl_sigprocmask &mdash; Sets and retrieves blocked signals\n\n \n \n \n  Description\n  \n   bool pcntl_sigprocmask\n    ( int $how\n   , array $set\n   [, array &$oldset\n  ] )\n\n  \n   The pcntl_sigprocmask() function adds, removes or sets blocked\n   signals, depending on the how parameter.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     how\n     \n\n      \n       Sets the behavior of pcntl_sigprocmask(). Possible\n       values: \n       \n        SIG_BLOCK: Add the signals to the\n         currently blocked signals.\n        SIG_UNBLOCK: Remove the signals from the\n         currently blocked signals.\n        SIG_SETMASK: Replace the currently\n         blocked signals by the given list of signals.\n       \n      \n     \n\n    \n\n    \n\n     set\n     \n\n      \n       List of signals.\n      \n     \n\n    \n\n    \n\n     oldset\n     \n\n      \n       The oldset parameter is set to an array\n       containing the list of the previously blocked signals.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pcntl_sigprocmask() example\n    \n\n&lt;?phppcntl_sigprocmask(SIG_BLOCK,&nbsp;array(SIGHUP));$oldset&nbsp;=&nbsp;array();pcntl_sigprocmask(SIG_UNBLOCK,&nbsp;array(SIGHUP),&nbsp;$oldset);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_sigwaitinfo() - Waits for signals\n    pcntl_sigtimedwait() - Waits for signals, with a timeout\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigtimedwait.php","title":"pcntl_sigtimedwait","description":"\n \n  pcntl_sigtimedwait\n  (PHP 5 &gt;= 5.3.0)pcntl_sigtimedwait &mdash; Waits for signals, with a timeout\n\n \n \n \n  Description\n  \n   int pcntl_sigtimedwait\n    ( array $set\n   [, array &$siginfo\n   [, int $seconds = 0\n   [, int $nanoseconds = 0\n  ]]] )\n\n  \n   The pcntl_sigtimedwait() function operates in exactly\n   the same way as pcntl_sigwaitinfo() except that it takes\n   two additional parameters, seconds and\n   nanoseconds, which enable an upper bound to be placed\n   on the time for which the script is suspended.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     set\n     \n\n      \n       Array of signals to wait for.\n      \n     \n\n    \n\n    \n\n     siginfo\n     \n\n      \n       The siginfo is set to an array containing\n       informations about the signal. See\n       pcntl_sigwaitinfo().\n      \n     \n\n    \n\n    \n\n     seconds\n     \n\n      \n       Timeout in seconds.\n      \n     \n\n    \n\n    \n\n     nanoseconds\n     \n\n      \n       Timeout in nanoseconds.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success, pcntl_sigtimedwait() returns a signal number.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_sigprocmask() - Sets and retrieves blocked signals\n    pcntl_sigwaitinfo() - Waits for signals\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-sigwaitinfo.php","title":"pcntl_sigwaitinfo","description":"\n \n  pcntl_sigwaitinfo\n  (PHP 5 &gt;= 5.3.0)pcntl_sigwaitinfo &mdash; Waits for signals\n\n \n \n \n  Description\n  \n   int pcntl_sigwaitinfo\n    ( array $set\n   [, array &$siginfo\n  ] )\n\n  \n   The pcntl_sigwaitinfo() function suspends execution of the\n   calling script until one of the signals given in set\n   are delivered. If one of the signal is already pending (e.g. blocked by\n   pcntl_sigprocmask()),\n   pcntl_sigwaitinfo() will return immediately.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     set\n     \n\n      \n       Array of signals to wait for.\n      \n     \n\n    \n\n    \n\n     siginfo\n     \n\n      \n       The siginfo parameter is set to an array containing\n       informations about the signal.\n      \n      \n       The following elements are set for all signals:\n       \n        signo: Signal number\n        errno: An error number\n        code: Signal code\n       \n      \n      \n       The following elements may be set for the SIGCHLD signal:\n       \n        status: Exit value or signal\n        utime: User time consumed\n        stime: System time consumed\n        pid: Sending process ID\n        uid: Real user ID of sending process\n       \n      \n      \n       The following elements may be set for the SIGILL,\n       SIGFPE, SIGSEGV and\n       SIGBUS signals:\n       \n        addr: Memory location which caused fault\n       \n      \n      \n       The following element may be set for the SIGPOLL\n       signal:\n       \n        band: Band event\n        fd: File descriptor number\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   On success, pcntl_sigwaitinfo() returns a signal number.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pcntl_sigwaitinfo() example\n    \n\n&lt;?phpecho&nbsp;\"Blocking&nbsp;SIGHUP&nbsp;signal\\n\";pcntl_sigprocmask(SIG_BLOCK,&nbsp;array(SIGHUP));echo&nbsp;\"Sending&nbsp;SIGHUP&nbsp;to&nbsp;self\\n\";posix_kill(posix_getpid(),&nbsp;SIGHUP);echo&nbsp;\"Waiting&nbsp;for&nbsp;signals\\n\";$info&nbsp;=&nbsp;array();pcntl_sigwaitinfo(array(SIGHUP),&nbsp;$info);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_sigprocmask() - Sets and retrieves blocked signals\n    pcntl_sigtimedwait() - Waits for signals, with a timeout\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-signal.php","title":"pcntl_signal","description":"\n \n  pcntl_signal\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_signal &mdash; Installs a signal handler\n\n \n \n \n  Description\n  \n   bool pcntl_signal\n    ( int $signo\n   , callback $handler\n   [, bool $restart_syscalls = true\n  ] )\n\n  \n   The pcntl_signal() function installs a new\n   signal handler for the signal indicated by signo.   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     signo\n     \n\n      \n       The signal number.\n      \n     \n\n    \n\n    \n\n     handler\n     \n\n      \n       The signal handler which may be the name of a user created function,\n       or method, or either of the two global constants \n       SIG_IGN or SIG_DFL. \n      \n      Note: \n       \n        Note that when you set a handler to an object method, that object&#039;s\n        reference count is increased which makes it persist until you either\n        change the handler to something else, or your script ends.\n       \n      \n     \n\n    \n\n    \n\n     restart_syscalls\n     \n\n      \n       Specifies whether system call restarting should be used when this\n       signal arrives.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.3.0\n       \n        The restart_syscalls parameter was added.\n       \n      \n\n      \n       4.3.0\n       \n        The ability to use an object method as a callback became available.\n       \n      \n\n      \n       4.3.0\n       \n        As of PHP 4.3.0 PCNTL uses ticks as the signal handle callback\n        mechanism, which is much faster than the previous mechanism. This\n        change follows the same semantics as using\n        &quot;user ticks&quot;.\n        You must use the declare() statement to\n        specify the locations in your program where callbacks are allowed to\n        occur for the signal handler to function properly (as used in the\n        above example).\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 pcntl_signal() example\n    \n\n&lt;?php\/\/&nbsp;tick&nbsp;use&nbsp;required&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0declare(ticks&nbsp;=&nbsp;1);\/\/&nbsp;signal&nbsp;handler&nbsp;functionfunction&nbsp;sig_handler($signo){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;($signo)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;SIGTERM:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;handle&nbsp;shutdown&nbsp;tasks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;SIGHUP:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;handle&nbsp;restart&nbsp;tasks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;SIGUSR1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Caught&nbsp;SIGUSR1...\\n\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;handle&nbsp;all&nbsp;other&nbsp;signals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}}echo&nbsp;\"Installing&nbsp;signal&nbsp;handler...\\n\";\/\/&nbsp;setup&nbsp;signal&nbsp;handlerspcntl_signal(SIGTERM,&nbsp;\"sig_handler\");pcntl_signal(SIGHUP,&nbsp;&nbsp;\"sig_handler\");pcntl_signal(SIGUSR1,&nbsp;\"sig_handler\");\/\/&nbsp;or&nbsp;use&nbsp;an&nbsp;object,&nbsp;available&nbsp;as&nbsp;of&nbsp;PHP&nbsp;4.3.0\/\/&nbsp;pcntl_signal(SIGUSR1,&nbsp;array($obj,&nbsp;\"do_something\");echo\"Generating&nbsp;signal&nbsp;SIGTERM&nbsp;to&nbsp;self...\\n\";\/\/&nbsp;send&nbsp;SIGUSR1&nbsp;to&nbsp;current&nbsp;process&nbsp;idposix_kill(posix_getpid(),&nbsp;SIGUSR1);echo&nbsp;\"Done\\n\";?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_fork() - Forks the currently running process\n    pcntl_waitpid() - Waits on or returns the status of a forked child\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-waitpid.php","title":"pcntl_waitpid","description":"\n \n  pcntl_waitpid\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_waitpid &mdash; Waits on or returns the status of a forked child\n\n \n \n \n  Description\n  \n   int pcntl_waitpid\n    ( int $pid\n   , int &$status\n   [, int $options = 0\n  ] )\n\n  \n   Suspends execution of the current process until a child as specified by\n   the pid argument has exited, or until a signal is\n   delivered whose action is to terminate the current process or to call a\n   signal handling function.\n  \n  \n   If a child as requested by pid has already exited\n   by the time of the call (a so-called &quot;zombie&quot; process), the function\n   returns immediately.  Any system resources used by the child are freed.\n   Please see your system&#039;s waitpid(2) man page for specific details as to\n   how waitpid works on your system.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pid\n     \n\n      \n       The value of pid can be one of the following:\n       \n        possible values for pid\n        \n         \n          \n           &lt; -1\n           \n            wait for any child process whose process group ID is equal to\n            the absolute value of pid.\n           \n          \n\n          \n           -1\n           \n            wait for any child process; this is the same behaviour that\n            the wait function exhibits.\n           \n          \n\n          \n           0\n           \n            wait for any child process whose process group ID is equal to\n            that of the calling process.\n           \n          \n\n          \n           &gt; 0\n           \n            wait for the child whose process ID is equal to the value of\n            pid.\n           \n          \n\n         \n        \n       \n\n      \n      Note: \n       \n        Specifying -1 as the pid is\n        equivalent to the functionality pcntl_wait() provides\n        (minus options).\n       \n      \n     \n\n    \n\n    \n\n     status\n     \n\n      \n       pcntl_waitpid() will store status information\n       in the status parameter which can be\n       evaluated using the following functions:\n       pcntl_wifexited(),\n       pcntl_wifstopped(),\n       pcntl_wifsignaled(),\n       pcntl_wexitstatus(),\n       pcntl_wtermsig() and\n       pcntl_wstopsig().\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       The value of options is the value of zero\n       or more of the following two global constants\n       OR&#039;ed together:\n       \n        possible values for options\n        \n         \n          \n           WNOHANG\n           \n            return immediately if no child has exited.\n           \n          \n\n          \n           WUNTRACED\n           \n            return for children which are stopped, and whose status has\n            not been reported.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   pcntl_waitpid() returns the process ID of the\n   child which exited, -1 on error or zero if WNOHANG was used and no\n   child was available\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_fork() - Forks the currently running process\n    pcntl_signal() - Installs a signal handler\n    pcntl_wifexited() - Checks if status code represents a normal exit\n    pcntl_wifstopped() - Checks whether the child process is currently stopped\n    pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal\n    pcntl_wexitstatus() - Returns the return code of a terminated child\n    pcntl_wtermsig() - Returns the signal which caused the child to terminate\n    pcntl_wstopsig() - Returns the signal which caused the child to stop\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wexitstatus.php","title":"pcntl_wexitstatus","description":"\n \n  pcntl_wexitstatus\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wexitstatus &mdash; Returns the return code of a terminated child\n\n \n \n \n  Description\n  \n   int pcntl_wexitstatus\n    ( int $status\n   )\n\n  \n   Returns the return code of a terminated child.  This function is\n   only useful if pcntl_wifexited() returned\n   TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the return code, as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_wifexited() - Checks if status code represents a normal exit\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifexited.php","title":"pcntl_wifexited","description":"\n \n  pcntl_wifexited\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wifexited &mdash; Checks if status code represents a normal exit\n\n \n \n \n  Description\n  \n   bool pcntl_wifexited\n    ( int $status\n   )\n\n  \n   Checks whether the child status code represents a normal exit.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the child status code represents a normal exit, FALSE\n   otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_wexitstatus() - Returns the return code of a terminated child\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifsignaled.php","title":"pcntl_wifsignaled","description":"\n \n  pcntl_wifsignaled\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wifsignaled &mdash; Checks whether the status code represents a termination due to a signal\n\n \n \n \n  Description\n  \n   bool pcntl_wifsignaled\n    ( int $status\n   )\n\n  \n   Checks whether the child process exited because of a signal which was not\n   caught.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the child process exited because of a signal which was\n   not caught, FALSE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_signal() - Installs a signal handler\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wifstopped.php","title":"pcntl_wifstopped","description":"\n \n  pcntl_wifstopped\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wifstopped &mdash; Checks whether the child process is currently stopped\n\n \n \n \n  Description\n  \n   bool pcntl_wifstopped\n    ( int $status\n   )\n\n  \n   Checks whether the child process which caused the return is currently\n   stopped; this is only possible if the call to\n   pcntl_waitpid() was done using the option\n   WUNTRACED.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns TRUE if the child process which caused the return is\n   currently stopped, FALSE otherwise.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wstopsig.php","title":"pcntl_wstopsig","description":"\n \n  pcntl_wstopsig\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wstopsig &mdash; Returns the signal which caused the child to stop\n\n \n \n \n  Description\n  \n   int pcntl_wstopsig\n    ( int $status\n   )\n\n  \n   Returns the number of the signal which caused the child to stop.\n   This function is only useful if\n   pcntl_wifstopped() returned TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the signal number.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_wifstopped() - Checks whether the child process is currently stopped\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wtermsig.php","title":"pcntl_wtermsig","description":"\n \n  pcntl_wtermsig\n  (PHP 4 &gt;= 4.1.0, PHP 5)pcntl_wtermsig &mdash; Returns the signal which caused the child to terminate\n\n \n \n \n  Description\n  \n   int pcntl_wtermsig\n    ( int $status\n   )\n\n  \n   Returns the number of the signal that caused the child process to\n   terminate. This function is only useful if\n   pcntl_wifsignaled() returned TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      The status\nparameter is the status parameter supplied to a successful\ncall to pcntl_waitpid().\n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the signal number, as an integer.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_waitpid() - Waits on or returns the status of a forked child\n    pcntl_signal() - Installs a signal handler\n    pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.pcntl-wait.php","title":"pcntl_wait","description":"\n \n  pcntl_wait\n  (PHP 5)pcntl_wait &mdash; Waits on or returns the status of a forked child\n\n \n \n \n  Description\n  \n   int pcntl_wait\n    ( int &$status\n   [, int $options = 0\n  ] )\n\n  \n   The wait function suspends execution of the current process until a\n   child has exited, or until a signal is delivered whose action is to\n   terminate the current process or to call a signal handling function.  If a\n   child has already exited by the time of the call (a so-called &quot;zombie&quot;\n   process), the function returns immediately.  Any system resources used by\n   the child are freed.  Please see your system&#039;s wait(2) man page for\n   specific details as to how wait works on your system.\n  \n  Note: \n   \n    This function is equivalent to calling pcntl_waitpid()\n    with a -1 pid and no\n    options.\n   \n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     status\n     \n\n      \n       pcntl_wait() will store status information\n       in the status parameter which can be\n       evaluated using the following functions:\n       pcntl_wifexited(),\n       pcntl_wifstopped(),\n       pcntl_wifsignaled(),\n       pcntl_wexitstatus(),\n       pcntl_wtermsig() and\n       pcntl_wstopsig().\n      \n     \n\n    \n\n    \n\n     options\n     \n\n      \n       If wait3 is available on your system (mostly BSD-style systems), you can\n       provide the optional options parameter.  If this\n       parameter is not provided, wait will be used for the system call.  If\n       wait3 is not available, providing a value for options\n        will have no effect. The value of options\n        is the value of zero or more of the following two constants\n       OR&#039;ed together:\n       \n        Possible values for options\n        \n         \n          \n           WNOHANG\n           \n            Return immediately if no child has exited.\n           \n          \n\n          \n           WUNTRACED\n           \n            Return for children which are stopped, and whose status has\n            not been reported.\n           \n          \n\n         \n        \n       \n\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   pcntl_wait() returns the process ID of the\n   child which exited, -1 on error or zero if WNOHANG was provided as an\n   option (on wait3-available systems) and no child was available.\n  \n \n\n\n \n  See Also\n  \n   \n    pcntl_fork() - Forks the currently running process\n    pcntl_signal() - Installs a signal handler\n    pcntl_wifexited() - Checks if status code represents a normal exit\n    pcntl_wifstopped() - Checks whether the child process is currently stopped\n    pcntl_wifsignaled() - Checks whether the status code represents a termination due to a signal\n    pcntl_wexitstatus() - Returns the return code of a terminated child\n    pcntl_wtermsig() - Returns the signal which caused the child to terminate\n    pcntl_wstopsig() - Returns the signal which caused the child to stop\n    pcntl_waitpid() - Waits on or returns the status of a forked child\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eregi-replace.php","title":"eregi_replace","description":"\n \n  eregi_replace\n  (PHP 4, PHP 5)eregi_replace &mdash; Replace regular expression case insensitive\n\n \n \n \n  Description\n  \n   string eregi_replace\n    ( string $pattern\n   , string $replacement\n   , string $string\n   )\n\n  \n   This function is identical to ereg_replace()\n   except that this ignores case distinction when matching\n   alphabetic characters.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       A POSIX extended regular expression.\n      \n     \n\n    \n\n    \n\n     replacement\n     \n\n      \n       If pattern contains parenthesized substrings,\n       replacement may contain substrings of the form\n       \\\\digit, which will be\n       replaced by the text matching the digit&#039;th parenthesized substring; \n       \\\\0 will produce the entire contents of string.\n       Up to nine substrings may be used. Parentheses may be nested, in which\n       case they are counted by the opening parenthesis.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The modified string is returned. If no matches are found in \n   string, then it will be returned unchanged.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Highlight search results\n    \n\n&lt;?php$pattern&nbsp;=&nbsp;'(&gt;[^&lt;]*)('.&nbsp;quotemeta($_GET['search'])&nbsp;.')';$replacement&nbsp;=&nbsp;'\\\\1&lt;span&nbsp;class=\"search\"&gt;\\\\2&lt;\/span&gt;';$body&nbsp;=&nbsp;eregi_replace($pattern,&nbsp;$replacement,&nbsp;$body);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n \n\n\n \n  See Also\n  \n   \n    ereg() - Regular expression match\n    eregi() - Case insensitive regular expression match\n    ereg_replace() - Replace regular expression\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ereg-replace.php","title":"ereg_replace","description":"\n \n  ereg_replace\n  (PHP 4, PHP 5)ereg_replace &mdash; Replace regular expression\n\n \n \n \n  Description\n  \n   string ereg_replace\n    ( string $pattern\n   , string $replacement\n   , string $string\n   )\n\n  \n   This function scans string for matches to\n   pattern, then replaces the matched text\n   with replacement.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       A POSIX extended regular expression.\n      \n     \n\n    \n\n    \n\n     replacement\n     \n\n      \n       If pattern contains parenthesized substrings,\n       replacement may contain substrings of the form\n       \\\\digit, which will be\n       replaced by the text matching the digit&#039;th parenthesized substring; \n       \\\\0 will produce the entire contents of string.\n       Up to nine substrings may be used. Parentheses may be nested, in which\n       case they are counted by the opening parenthesis.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   The modified string is returned. If no matches are found in \n   string, then it will be returned unchanged.\n  \n \n\n\n \n  Examples\n  \n   For example, the following code snippet prints &quot;This was a test&quot;\n   three times:\n  \n  \n   \n    Example #1 ereg_replace() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;\"This&nbsp;is&nbsp;a&nbsp;test\";echo&nbsp;str_replace(\"&nbsp;is\",&nbsp;\"&nbsp;was\",&nbsp;$string);echo&nbsp;ereg_replace(\"(&nbsp;)is\",&nbsp;\"\\\\1was\",&nbsp;$string);echo&nbsp;ereg_replace(\"((&nbsp;)is)\",&nbsp;\"\\\\2was\",&nbsp;$string);?&gt;\n\n\n    \n\n   \n  \n  \n   One thing to take note of is that if you use an integer value as\n   the replacement parameter, you may not get\n   the results you expect. This is because\n   ereg_replace() will interpret the number as\n   the ordinal value of a character, and apply that. For instance:\n  \n  \n   \n    Example #2 ereg_replace() example\n    \n\n&lt;?php\/*&nbsp;This&nbsp;will&nbsp;not&nbsp;work&nbsp;as&nbsp;expected.&nbsp;*\/$num&nbsp;=&nbsp;4;$string&nbsp;=&nbsp;\"This&nbsp;string&nbsp;has&nbsp;four&nbsp;words.\";$string&nbsp;=&nbsp;ereg_replace('four',&nbsp;$num,&nbsp;$string);echo&nbsp;$string;&nbsp;&nbsp;&nbsp;\/*&nbsp;Output:&nbsp;'This&nbsp;string&nbsp;has&nbsp;&nbsp;&nbsp;words.'&nbsp;*\/\/*&nbsp;This&nbsp;will&nbsp;work.&nbsp;*\/$num&nbsp;=&nbsp;'4';$string&nbsp;=&nbsp;\"This&nbsp;string&nbsp;has&nbsp;four&nbsp;words.\";$string&nbsp;=&nbsp;ereg_replace('four',&nbsp;$num,&nbsp;$string);echo&nbsp;$string;&nbsp;&nbsp;&nbsp;\/*&nbsp;Output:&nbsp;'This&nbsp;string&nbsp;has&nbsp;4&nbsp;words.'&nbsp;*\/?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Replace URLs with links\n    \n\n&lt;?php$text&nbsp;=&nbsp;ereg_replace(\"[[:alpha:]]+:\/\/[^&lt;&gt;[:space:]]+[[:alnum:]\/]\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&lt;a&nbsp;href=\\\"\\\\0\\\"&gt;\\\\0&lt;\/a&gt;\",&nbsp;$text);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n  Tip\n   \n    preg_replace(), which uses a Perl-compatible\n    regular expression syntax, is often a faster alternative to\n    ereg_replace().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    ereg() - Regular expression match\n    eregi() - Case insensitive regular expression match\n    eregi_replace() - Replace regular expression case insensitive\n    str_replace() - Replace all occurrences of the search string with the replacement string\n    preg_match() - Perform a regular expression match\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.ereg.php","title":"ereg","description":"\n \n  ereg\n  (PHP 4, PHP 5)ereg &mdash; Regular expression match\n\n \n \n \n  Description\n  \n   int ereg\n    ( string $pattern\n   , string $string\n   [, array &$regs\n  ] )\n\n  \n   Searches a string for matches to the regular\n   expression given in pattern in a case-sensitive\n   way.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       Case sensitive regular expression.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     regs\n     \n\n      \n       If matches are found for parenthesized substrings of\n       pattern and the function is called with the\n       third argument regs, the matches will be stored\n       in the elements of the array regs. \n      \n      \n       $regs[1] will contain the substring which starts at\n       the first left parenthesis; $regs[2] will contain\n       the substring starting at the second, and so on.\n       $regs[0] will contain a copy of the complete string\n       matched.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the matched string if a match for\n   pattern was found in string,\n   or FALSE if no matches were found or an error occurred.\n  \n  \n   If the optional parameter regs was not passed or\n   the length of the matched string is 0, this function returns 1.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.1.0\n       \n        Up to (and including) PHP 4.1.0 $regs will be\n        filled with exactly ten elements, even though more or fewer than\n        ten parenthesized substrings may actually have matched. This has\n        no effect on ereg()&#039;s ability to match more\n        substrings. If no matches are found, $regs\n        will not be altered by ereg().\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 ereg() example\n    \n     The following code snippet takes a date in ISO format (YYYY-MM-DD) and\n     prints it in DD.MM.YYYY format:\n    \n    \n\n&lt;?phpif&nbsp;(ereg&nbsp;(\"([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})\",&nbsp;$date,&nbsp;$regs))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"$regs[3].$regs[2].$regs[1]\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"Invalid&nbsp;date&nbsp;format:&nbsp;$date\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n  Note: \n   \n    preg_match(), which uses a Perl-compatible\n    regular expression syntax, is often a faster alternative to\n    ereg().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    eregi() - Case insensitive regular expression match\n    ereg_replace() - Replace regular expression\n    eregi_replace() - Replace regular expression case insensitive\n    preg_match() - Perform a regular expression match\n    strpos() - Find position of first occurrence of a string\n    strstr() - Find first occurrence of a string\n    quotemeta() - Quote meta characters\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.spliti.php","title":"spliti","description":"\n \n  spliti\n  (PHP 4 &gt;= 4.0.1, PHP 5)spliti &mdash; Split string into array by regular expression case insensitive\n\n \n \n \n  Description\n  \n   array spliti\n    ( string $pattern\n   , string $string\n   [, int $limit = -1\n  ] )\n\n  \n   Splits a string into array by regular expression.\n  \n  \n   This function is identical to split() except that this\n   ignores case distinction when matching alphabetic characters.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       Case insensitive regular expression.\n      \n      \n       If you want to split on any of the characters which are considered\n       special by regular expressions, you&#039;ll need to escape them first. If\n       you think spliti() (or any other regex function, for\n       that matter) is doing something weird, please read the file\n       regex.7, included in the \n       regex\/ subdirectory of the PHP distribution. It&#039;s\n       in manpage format, so you&#039;ll want to do something along the lines of\n       man \/usr\/local\/src\/regex\/regex.7 in order to read it.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       If limit is set, the returned array will\n       contain a maximum of limit elements with the\n       last element containing the whole rest of\n       string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array of strings, each of which is a substring of\n   string formed by splitting it on boundaries formed\n   by the case insensitive regular expression pattern.\n  \n  \n   If there are n occurrences of\n   pattern, the returned array will contain\n   n+1 items. For example, if\n   there is no occurrence of pattern, an array with\n   only one element will be returned. Of course, this is also true if\n   string is empty. If an error occurs,\n   spliti() returns FALSE.\n  \n \n\n\n \n  Examples\n  \n   This example splits a string using &#039;a&#039; as the separator :\n   \n    Example #1 spliti() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;\"aBBBaCCCADDDaEEEaGGGA\";$chunks&nbsp;=&nbsp;spliti&nbsp;(\"a\",&nbsp;$string,&nbsp;5);print_r($chunks);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n  [0] =&gt;\n  [1] =&gt; BBB\n  [2] =&gt; CCC\n  [3] =&gt; DDD\n  [4] =&gt; EEEaGGGA\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n \n\n\n \n  See Also\n  \n   \n    preg_split() - Split string by a regular expression\n    split() - Split string into array by regular expression\n    explode() - Split a string by string\n    implode() - Join array elements with a string\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.eregi.php","title":"eregi","description":"\n \n  eregi\n  (PHP 4, PHP 5)eregi &mdash; Case insensitive regular expression match\n\n \n \n \n  Description\n  \n   int eregi\n    ( string $pattern\n   , string $string\n   [, array &$regs\n  ] )\n\n  \n   This function is identical to ereg() except that it\n   ignores case distinction when matching alphabetic characters.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       Case insensitive regular expression.\n      \n     \n\n    \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     regs\n     \n\n      \n       If matches are found for parenthesized substrings of\n       pattern and the function is called with the\n       third argument regs, the matches will be stored\n       in the elements of the array regs. \n      \n      \n       $regs[1] will contain the substring which starts at the first left\n       parenthesis; $regs[2] will contain the substring starting at the\n       second, and so on. $regs[0] will contain a copy of the complete string\n       matched.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the length of the matched string if a match for\n   pattern was found in string,\n   or FALSE if no matches were found or an error occurred.\n  \n  \n   If the optional parameter regs was not passed or\n   the length of the matched string is 0, this function returns 1.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 eregi() example\n    \n\n&lt;?php$string&nbsp;=&nbsp;'XYZ';if&nbsp;(eregi('z',&nbsp;$string))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"'$string'&nbsp;contains&nbsp;a&nbsp;'z'&nbsp;or&nbsp;'Z'!\";}?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n \n\n\n \n  See Also\n  \n   \n    ereg() - Regular expression match\n    ereg_replace() - Replace regular expression\n    eregi_replace() - Replace regular expression case insensitive\n    stripos() - Find position of first occurrence of a case-insensitive string\n    stristr() - Case-insensitive strstr\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.sql-regcase.php","title":"sql_regcase","description":"\n \n  sql_regcase\n  (PHP 4, PHP 5)sql_regcase &mdash; Make regular expression for case insensitive match\n\n \n \n \n  Description\n  \n   string sql_regcase\n    ( string $string\n   )\n\n  \n   Creates a regular expression for a case insensitive match.\n  \n  WarningThis function has been\nDEPRECATED as of PHP 5.3.0. Relying on this feature is\nhighly discouraged.\n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     string\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns a valid regular expression which will match\n   string, ignoring case. This expression is\n   string with each alphabetic character converted to\n   a bracket expression; this bracket expression contains that character&#039;s\n   uppercase and lowercase form.  Other characters remain unchanged.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 sql_regcase() example\n    \n\n&lt;?phpecho&nbsp;sql_regcase(\"Foo&nbsp;-&nbsp;bar.\");?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n[Ff][Oo][Oo] - [Bb][Aa][Rr].\n\n    \n   \n  \n  \n   This can be used to achieve case insensitive pattern matching in\n   products which support only case sensitive regular expressions.\n  \n \n\n\n \n  Notes\n  Note: As of PHP 5.3.0, the\nregex extension is deprecated in favor of the \nPCRE extension. Calling this function \nwill issue an E_DEPRECATED notice. See the list of\ndifferences for help on converting to PCRE.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-filter.php","title":"preg_filter","description":"\n \n  preg_filter\n  (PHP 5 &gt;= 5.3.0)preg_filter &mdash; Perform a regular expression search and replace\n\n \n\n \n  Description\n  \n   mixed preg_filter\n    ( mixed $pattern\n   , mixed $replacement\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )\n\n  \n   preg_filter() is identical to preg_replace()\n   except it only returns the (possibly transformed) subjects where there was\n   a match. For details about how this function works, read the\n   preg_replace() documentation.\n  \n \n\n\n \n  Return Values\n  \n   Returns an array if the subject\n   parameter is an array, or a string otherwise.\n  \n  \n   If no matches are found or an error occurred, an empty array \n   is returned when subject is an array\n   or NULL otherwise.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Example comparing preg_filter() \n     with preg_replace()\n    \n    \n\n&lt;?php$subject&nbsp;=&nbsp;array('1',&nbsp;'a',&nbsp;'2',&nbsp;'b',&nbsp;'3',&nbsp;'A',&nbsp;'B',&nbsp;'4');&nbsp;$pattern&nbsp;=&nbsp;array('\/\\d\/',&nbsp;'\/[a-z]\/',&nbsp;'\/[1a]\/');&nbsp;$replace&nbsp;=&nbsp;array('A:$0',&nbsp;'B:$0',&nbsp;'C:$0');&nbsp;echo&nbsp;\"preg_filter&nbsp;returns\\n\";print_r(preg_filter($pattern,&nbsp;$replace,&nbsp;$subject));&nbsp;echo&nbsp;\"preg_replace&nbsp;returns\\n\";print_r(preg_replace($pattern,&nbsp;$replace,&nbsp;$subject));&nbsp;?&gt;\n\n\n    \n\n    The above example will output:\n    \n\npreg_filter returns\nArray\n(\n    [0] =&gt; A:C:1\n    [1] =&gt; B:C:a\n    [2] =&gt; A:2\n    [3] =&gt; B:b\n    [4] =&gt; A:3\n    [7] =&gt; A:4\n)\npreg_replace returns\nArray\n(\n    [0] =&gt; A:C:1\n    [1] =&gt; B:C:a\n    [2] =&gt; A:2\n    [3] =&gt; B:b\n    [4] =&gt; A:3\n    [5] =&gt; A\n    [6] =&gt; B\n    [7] =&gt; A:4\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_replace() - Perform a regular expression search and replace\n    preg_replace_callback() - Perform a regular expression search and replace using a callback\n    preg_grep() - Return array entries that match the pattern\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-last-error.php","title":"preg_last_error","description":"\n \n  preg_last_error\n  (PHP 5 &gt;= 5.2.0)preg_last_error &mdash; Returns the error code of the last PCRE regex execution\n\n \n\n \n  Description\n  \n   int preg_last_error\n    ( void\n   )\n\n  \n   Returns the error code of the last PCRE regex execution.\n  \n  \n   \n    Example #1 preg_last_error() example\n    \n\n&lt;?phppreg_match('\/(?:\\D+|&lt;\\d+&gt;)*[!?]\/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;(preg_last_error()&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nBacktrack limit was exhausted!\n\n    \n   \n  \n \n\n  \n \n  Return Values\n  \n   Returns one of the following constants (explained on their own page):\n   \n    PREG_NO_ERROR\n    PREG_INTERNAL_ERROR\n    PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)\n    PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)\n    PREG_BAD_UTF8_ERROR\n    PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-quote.php","title":"preg_quote","description":"\n \n  preg_quote\n  (PHP 4, PHP 5)preg_quote &mdash; Quote regular expression characters\n\n \n\n \n  Description\n  \n   string preg_quote\n    ( string $str\n  [, string $delimiter = NULL\n  ] )\n\n  \n   preg_quote() takes str\n   and puts a backslash in front of every character that is part of\n   the regular expression syntax.  This is useful if you have a\n   run-time string that you need to match in some text and the\n   string may contain special regex characters.\n  \n  \n   The special regular expression characters are:\n   . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     str\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     delimiter\n     \n\n      \n       If the optional delimiter is specified, it\n       will also be escaped.  This is useful for escaping the delimiter\n       that is required by the PCRE functions. The \/ is the most commonly\n       used delimiter.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the quoted string.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.0\n       \n        The - character is now quoted\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 preg_quote() example\n    \n\n&lt;?php$keywords&nbsp;=&nbsp;'$40&nbsp;for&nbsp;a&nbsp;g3\/400';$keywords&nbsp;=&nbsp;preg_quote($keywords,&nbsp;'\/');echo&nbsp;$keywords;&nbsp;\/\/&nbsp;returns&nbsp;\\$40&nbsp;for&nbsp;a&nbsp;g3\\\/400?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Italicizing a word within some text\n    \n\n&lt;?php\/\/&nbsp;In&nbsp;this&nbsp;example,&nbsp;preg_quote($word)&nbsp;is&nbsp;used&nbsp;to&nbsp;keep&nbsp;the\/\/&nbsp;asterisks&nbsp;from&nbsp;having&nbsp;special&nbsp;meaning&nbsp;to&nbsp;the&nbsp;regular\/\/&nbsp;expression.$textbody&nbsp;=&nbsp;\"This&nbsp;book&nbsp;is&nbsp;*very*&nbsp;difficult&nbsp;to&nbsp;find.\";$word&nbsp;=&nbsp;\"*very*\";$textbody&nbsp;=&nbsp;preg_replace&nbsp;(\"\/\"&nbsp;.&nbsp;preg_quote($word)&nbsp;.&nbsp;\"\/\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&lt;i&gt;\"&nbsp;.&nbsp;$word&nbsp;.&nbsp;\"&lt;\/i&gt;\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$textbody);?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: This function is\nbinary-safe.\n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-replace-callback.php","title":"preg_replace_callback","description":"\n \n  preg_replace_callback\n  (PHP 4 &gt;= 4.0.5, PHP 5)preg_replace_callback &mdash; Perform a regular expression search and replace using a callback\n\n \n\n \n  Description\n  \n   mixed preg_replace_callback\n    ( mixed $pattern\n   , callback $callback\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )\n\n  \n   The behavior of this function is almost identical to\n   preg_replace(), except for the fact that instead of\n   replacement parameter, one should specify a\n   callback.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for. It can be either a string or an array with\n       strings.\n      \n     \n\n    \n\n    \n\n     callback\n     \n\n      \n       A callback that will be called and passed an array of matched elements\n       in the subject string. The callback should\n       return the replacement string.\n      \n      \n       You&#039;ll often need the callback function\n       for a preg_replace_callback() in just one place.\n       In this case you can use an\n       anonymous function (since\n       PHP 5.3.0) or create_function() to\n       declare an anonymous function as callback within the call to\n       preg_replace_callback(). By doing it this way\n       you have all information for the call in one place and do not\n       clutter the function namespace with a callback function&#039;s name\n       not used anywhere else.\n      \n      \n       \n        Example #1 preg_replace_callback() and \n        create_function()\n        \n\n&lt;?php\/*&nbsp;a&nbsp;unix-style&nbsp;command&nbsp;line&nbsp;filter&nbsp;to&nbsp;convert&nbsp;uppercase&nbsp;*&nbsp;letters&nbsp;at&nbsp;the&nbsp;beginning&nbsp;of&nbsp;paragraphs&nbsp;to&nbsp;lowercase&nbsp;*\/$fp&nbsp;=&nbsp;fopen(\"php:\/\/stdin\",&nbsp;\"r\")&nbsp;or&nbsp;die(\"can't&nbsp;read&nbsp;stdin\");while&nbsp;(!feof($fp))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;$line&nbsp;=&nbsp;fgets($fp);&nbsp;&nbsp;&nbsp;&nbsp;$line&nbsp;=&nbsp;preg_replace_callback(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'|&lt;p&gt;\\s*\\w|',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create_function(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;single&nbsp;quotes&nbsp;are&nbsp;essential&nbsp;here,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/&nbsp;or&nbsp;alternative&nbsp;escape&nbsp;all&nbsp;$&nbsp;as&nbsp;\\$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$matches',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'return&nbsp;strtolower($matches[0]);'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$line&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$line;}fclose($fp);?&gt;\n\n\n        \n\n       \n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The string or an array with strings to search and replace.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       The maximum possible replacements for each pattern in each\n       subject string. Defaults to\n       -1 (no limit).\n      \n     \n\n    \n\n    \n\n     count\n     \n\n      \n       If specified, this variable will be filled with the number of\n       replacements done.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   preg_replace_callback() returns an array if the\n   subject parameter is an array, or a string\n   otherwise. On errors the return value is NULL\n  \n  \n   If matches are found, the new subject will be returned, otherwise\n   subject will be returned unchanged. \n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        The count parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #2 preg_replace_callback() example\n    \n\n&lt;?php\/\/&nbsp;this&nbsp;text&nbsp;was&nbsp;used&nbsp;in&nbsp;2002\/\/&nbsp;we&nbsp;want&nbsp;to&nbsp;get&nbsp;this&nbsp;up&nbsp;to&nbsp;date&nbsp;for&nbsp;2003$text&nbsp;=&nbsp;\"April&nbsp;fools&nbsp;day&nbsp;is&nbsp;04\/01\/2002\\n\";$text.=&nbsp;\"Last&nbsp;christmas&nbsp;was&nbsp;12\/24\/2001\\n\";\/\/&nbsp;the&nbsp;callback&nbsp;functionfunction&nbsp;next_year($matches){&nbsp;&nbsp;\/\/&nbsp;as&nbsp;usual:&nbsp;$matches[0]&nbsp;is&nbsp;the&nbsp;complete&nbsp;match&nbsp;&nbsp;\/\/&nbsp;$matches[1]&nbsp;the&nbsp;match&nbsp;for&nbsp;the&nbsp;first&nbsp;subpattern&nbsp;&nbsp;\/\/&nbsp;enclosed&nbsp;in&nbsp;'(...)'&nbsp;and&nbsp;so&nbsp;on&nbsp;&nbsp;return&nbsp;$matches[1].($matches[2]+1);}echo&nbsp;preg_replace_callback(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"|(\\d{2}\/\\d{2}\/)(\\d{4})|\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"next_year\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$text);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nApril fools day is 04\/01\/2003\nLast christmas was 12\/24\/2002\n\n    \n   \n  \n  \n   \n    Example #3 preg_replace_callback() using recursive structure\n     to handle encapsulated BB code\n    \n\n&lt;?php$input&nbsp;=&nbsp;\"plain&nbsp;[indent]&nbsp;deep&nbsp;[indent]&nbsp;deeper&nbsp;[\/indent]&nbsp;deep&nbsp;[\/indent]&nbsp;plain\";function&nbsp;parseTagsRecursive($input){&nbsp;&nbsp;&nbsp;&nbsp;$regex&nbsp;=&nbsp;'#\\[indent]((?:[^[]|\\[(?!\/?indent])|(?R))+)\\[\/indent]#';&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_array($input))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$input&nbsp;=&nbsp;'&lt;div&nbsp;style=\"margin-left:&nbsp;10px\"&gt;'.$input[1].'&lt;\/div&gt;';&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;preg_replace_callback($regex,&nbsp;'parseTagsRecursive',&nbsp;$input);}$output&nbsp;=&nbsp;parseTagsRecursive($input);echo&nbsp;$output;?&gt;\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_replace() - Perform a regular expression search and replace\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n    create_function() - Create an anonymous (lambda-style) function\n    Anonymous functions\n    information about the callback type\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-match-all.php","title":"preg_match_all","description":"\n \n  preg_match_all\n  (PHP 4, PHP 5)preg_match_all &mdash; Perform a global regular expression match\n\n \n\n \n  Description\n  \n   int preg_match_all\n    ( string $pattern\n   , string $subject\n   [, array &$matches\n   [, int $flags = PREG_PATTERN_ORDER\n   [, int $offset = 0\n  ]]] )\n\n  \n   Searches subject for all matches to the regular\n   expression given in pattern and puts them in\n   matches in the order specified by\n   flags.\n  \n  \n   After the first match is found, the subsequent searches  are continued\n   on from end of the last match.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for, as a string.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     matches\n     \n\n      \n       Array of all matches in multi-dimensional array ordered according to\n       flags.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       Can be a combination of the following flags (note that it doesn&#039;t make\n       sense to use PREG_PATTERN_ORDER together with\n       PREG_SET_ORDER):\n       \n\n        \n\n         PREG_PATTERN_ORDER\n         \n\n          \n           Orders results so that $matches[0] is an array of full\n           pattern matches, $matches[1] is an array of strings matched by\n           the first parenthesized subpattern, and so on.\n          \n          \n           \n            \n\n&lt;?phppreg_match_all(\"|&lt;[^&gt;]+&gt;(.*)&lt;\/[^&gt;]+&gt;|U\",&nbsp;&nbsp;&nbsp;&nbsp;\"&lt;b&gt;example:&nbsp;&lt;\/b&gt;&lt;div&nbsp;align=left&gt;this&nbsp;is&nbsp;a&nbsp;test&lt;\/div&gt;\",&nbsp;&nbsp;&nbsp;&nbsp;$out,&nbsp;PREG_PATTERN_ORDER);echo&nbsp;$out[0][0]&nbsp;.&nbsp;\",&nbsp;\"&nbsp;.&nbsp;$out[0][1]&nbsp;.&nbsp;\"\\n\";echo&nbsp;$out[1][0]&nbsp;.&nbsp;\",&nbsp;\"&nbsp;.&nbsp;$out[1][1]&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n            \n\n            The above example will output:\n            \n\n&lt;b&gt;example: &lt;\/b&gt;, &lt;div align=left&gt;this is a test&lt;\/div&gt;\nexample: , this is a test\n\n            \n            \n             So, $out[0] contains array of strings that matched full pattern,\n             and $out[1] contains array of strings enclosed by tags.\n            \n           \n          \n         \n\n        \n\n        \n\n         PREG_SET_ORDER\n         \n\n          \n           Orders results so that $matches[0] is an array of first set\n           of matches, $matches[1] is an array of second set of matches,\n           and so on.\n           \n            \n\n&lt;?phppreg_match_all(\"|&lt;[^&gt;]+&gt;(.*)&lt;\/[^&gt;]+&gt;|U\",&nbsp;&nbsp;&nbsp;&nbsp;\"&lt;b&gt;example:&nbsp;&lt;\/b&gt;&lt;div&nbsp;align=\\\"left\\\"&gt;this&nbsp;is&nbsp;a&nbsp;test&lt;\/div&gt;\",&nbsp;&nbsp;&nbsp;&nbsp;$out,&nbsp;PREG_SET_ORDER);echo&nbsp;$out[0][0]&nbsp;.&nbsp;\",&nbsp;\"&nbsp;.&nbsp;$out[0][1]&nbsp;.&nbsp;\"\\n\";echo&nbsp;$out[1][0]&nbsp;.&nbsp;\",&nbsp;\"&nbsp;.&nbsp;$out[1][1]&nbsp;.&nbsp;\"\\n\";?&gt;\n\n\n            \n\n            The above example will output:\n            \n\n&lt;b&gt;example: &lt;\/b&gt;, example:\n&lt;div align=&quot;left&quot;&gt;this is a test&lt;\/div&gt;, this is a test\n\n            \n           \n          \n         \n\n        \n\n        \n\n         PREG_OFFSET_CAPTURE\n         \n\n          \n           If this flag is passed, for every occurring match the appendant string\n           offset will also be returned. Note that this changes the value of\n           matches into an array where every element is an\n           array consisting of the matched string at offset 0\n           and its string offset into subject at offset\n           1.\n          \n         \n\n        \n\n       \n\n      \n      \n       If no order flag is given, PREG_PATTERN_ORDER is\n       assumed.\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       Normally, the search starts from the beginning of the subject string.\n       The optional parameter offset can be used to\n       specify the alternate place from which to start the search (in bytes).\n      \n      Note: \n       \n        Using offset is not equivalent to passing\n        substr($subject, $offset) to\n        preg_match_all() in place of the subject string,\n        because pattern can contain assertions such as\n        ^, $ or\n        (?&lt;=x). See preg_match()\n        for examples.\n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns the number of full pattern matches (which might be zero),\n   or FALSE if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.4.0\n       \n        The matches parameter became optional.\n       \n      \n\n      \n       5.3.6\n       \n        Returns FALSE if offset\n        is higher than\n        subject length.\n       \n      \n\n      \n       5.2.2\n       \n        Named subpatterns now accept the\n        syntax (?&lt;name&gt;)\n        and (?&#039;name&#039;) as well\n        as (?P&lt;name&gt;). Previous versions\n        accepted only (?P&lt;name&gt;).\n       \n      \n\n      \n       4.3.3\n       \n        The offset parameter was added\n       \n      \n\n      \n       4.3.0\n       \n        The PREG_OFFSET_CAPTURE flag was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Getting all phone numbers out of some text.\n    \n\n&lt;?phppreg_match_all(\"\/\\(?&nbsp;&nbsp;(\\d{3})?&nbsp;&nbsp;\\)?&nbsp;&nbsp;(?(1)&nbsp;&nbsp;[\\-\\s]&nbsp;)&nbsp;\\d{3}-\\d{4}\/x\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Call&nbsp;555-1212&nbsp;or&nbsp;1-800-555-1212\",&nbsp;$phones);?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Find matching HTML tags (greedy)\n    \n\n&lt;?php\/\/&nbsp;The&nbsp;\\\\2&nbsp;is&nbsp;an&nbsp;example&nbsp;of&nbsp;backreferencing.&nbsp;This&nbsp;tells&nbsp;pcre&nbsp;that\/\/&nbsp;it&nbsp;must&nbsp;match&nbsp;the&nbsp;second&nbsp;set&nbsp;of&nbsp;parentheses&nbsp;in&nbsp;the&nbsp;regular&nbsp;expression\/\/&nbsp;itself,&nbsp;which&nbsp;would&nbsp;be&nbsp;the&nbsp;([\\w]+)&nbsp;in&nbsp;this&nbsp;case.&nbsp;The&nbsp;extra&nbsp;backslash&nbsp;is\/\/&nbsp;required&nbsp;because&nbsp;the&nbsp;string&nbsp;is&nbsp;in&nbsp;double&nbsp;quotes.$html&nbsp;=&nbsp;\"&lt;b&gt;bold&nbsp;text&lt;\/b&gt;&lt;a&nbsp;href=howdy.html&gt;click&nbsp;me&lt;\/a&gt;\";preg_match_all(\"\/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\\/\\\\2&gt;)\/\",&nbsp;$html,&nbsp;$matches,&nbsp;PREG_SET_ORDER);foreach&nbsp;($matches&nbsp;as&nbsp;$val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"matched:&nbsp;\"&nbsp;.&nbsp;$val[0]&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"part&nbsp;1:&nbsp;\"&nbsp;.&nbsp;$val[1]&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"part&nbsp;2:&nbsp;\"&nbsp;.&nbsp;$val[2]&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"part&nbsp;3:&nbsp;\"&nbsp;.&nbsp;$val[3]&nbsp;.&nbsp;\"\\n\";&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"part&nbsp;4:&nbsp;\"&nbsp;.&nbsp;$val[4]&nbsp;.&nbsp;\"\\n\\n\";}?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nmatched: &lt;b&gt;bold text&lt;\/b&gt;\npart 1: &lt;b&gt;\npart 2: b\npart 3: bold text\npart 4: &lt;\/b&gt;\n\nmatched: &lt;a href=howdy.html&gt;click me&lt;\/a&gt;\npart 1: &lt;a href=howdy.html&gt;\npart 2: a\npart 3: click me\npart 4: &lt;\/a&gt;\n\n    \n   \n  \n  \n   \n    Example #3 Using named subpattern\n    \n\n&lt;?php$str&nbsp;=&nbsp;&lt;&lt;&lt;FOOa:&nbsp;1b:&nbsp;2c:&nbsp;3FOO;preg_match_all('\/(?P&lt;name&gt;\\w+):&nbsp;(?P&lt;digit&gt;\\d+)\/',&nbsp;$str,&nbsp;$matches);\/*&nbsp;This&nbsp;also&nbsp;works&nbsp;in&nbsp;PHP&nbsp;5.2.2&nbsp;(PCRE&nbsp;7.0)&nbsp;and&nbsp;later,&nbsp;however&nbsp;&nbsp;*&nbsp;the&nbsp;above&nbsp;form&nbsp;is&nbsp;recommended&nbsp;for&nbsp;backwards&nbsp;compatibility&nbsp;*\/\/\/&nbsp;preg_match_all('\/(?&lt;name&gt;\\w+):&nbsp;(?&lt;digit&gt;\\d+)\/',&nbsp;$str,&nbsp;$matches);print_r($matches);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; a: 1\n            [1] =&gt; b: 2\n            [2] =&gt; c: 3\n        )\n\n    [name] =&gt; Array\n        (\n            [0] =&gt; a\n            [1] =&gt; b\n            [2] =&gt; c\n        )\n\n    [1] =&gt; Array\n        (\n            [0] =&gt; a\n            [1] =&gt; b\n            [2] =&gt; c\n        )\n\n    [digit] =&gt; Array\n        (\n            [0] =&gt; 1\n            [1] =&gt; 2\n            [2] =&gt; 3\n        )\n\n    [2] =&gt; Array\n        (\n            [0] =&gt; 1\n            [1] =&gt; 2\n            [2] =&gt; 3\n        )\n\n)\n\n    \n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_match() - Perform a regular expression match\n    preg_replace() - Perform a regular expression search and replace\n    preg_split() - Split string by a regular expression\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-grep.php","title":"preg_grep","description":"\n \n  preg_grep\n  (PHP 4, PHP 5)preg_grep &mdash; Return array entries that match the pattern\n\n \n \n \n  Description\n  \n   array preg_grep\n    ( string $pattern\n   , array $input\n   [, int $flags = 0\n  ] )\n\n  \n   Returns the array consisting of the elements of the \n   input array that match the given\n   pattern.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for, as a string.\n      \n     \n\n    \n\n    \n\n     input\n     \n\n      \n       The input array.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       If set to PREG_GREP_INVERT, this function returns\n       the elements of the input array that do not match\n       the given pattern.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   Returns an array indexed using the keys from the\n   input array. \n  \n \n\n \n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       4.2.0\n       \n        The flags parameter was added.\n       \n      \n\n      \n       4.0.4\n       \n        \n         Prior to this version, the returned array was indexed regardless of\n         the keys of the input array.\n        \n        \n         If you want to reproduce this old behavior, use \n         array_values() on the returned array to reindex\n          the values.\n        \n       \n      \n\n     \n    \n   \n\n  \n \n\n \n \n  Examples\n  \n   \n    Example #1 preg_grep() example\n    \n\n&lt;?php\/\/&nbsp;return&nbsp;all&nbsp;array&nbsp;elements\/\/&nbsp;containing&nbsp;floating&nbsp;point&nbsp;numbers$fl_array&nbsp;=&nbsp;preg_grep(\"\/^(\\d+)?\\.\\d+$\/\",&nbsp;$array);?&gt;\n\n\n    \n\n   \n  \n \n\n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_match_all() - Perform a global regular expression match\n    preg_filter() - Perform a regular expression search and replace\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-match.php","title":"preg_match","description":"\n \n  preg_match\n  (PHP 4, PHP 5)preg_match &mdash; Perform a regular expression match\n\n \n\n \n  Description\n  \n   int preg_match\n    ( string $pattern\n   , string $subject\n   [, array &$matches\n   [, int $flags = 0\n   [, int $offset = 0\n  ]]] )\n\n  \n   Searches subject for a match to the regular\n   expression given in pattern.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for, as a string.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The input string.\n      \n     \n\n    \n\n    \n\n     matches\n     \n\n      \n       If matches is provided, then it is filled with\n       the results of search. $matches[0] will contain the\n       text that matched the full pattern, $matches[1]\n       will have the text that matched the first captured parenthesized\n       subpattern, and so on.\n      \n     \n\n    \n\n    \n\n     flags\n     \n\n      \n       flags can be the following flag:\n       \n\n        \n\n         PREG_OFFSET_CAPTURE\n         \n\n          \n           If this flag is passed, for every occurring match the appendant string\n           offset will also be returned. Note that this changes the value of\n           matches into an array where every element is an\n           array consisting of the matched string at offset 0\n           and its string offset into subject at offset\n           1.\n          \n         \n\n        \n\n       \n\n      \n     \n\n    \n\n    \n\n     offset\n     \n\n      \n       Normally, the search starts from the beginning of the subject string.\n       The optional parameter offset can be used to\n       specify the alternate place from which to start the search (in bytes).\n      \n      Note: \n       \n        Using offset is not equivalent to passing\n        substr($subject, $offset) to\n        preg_match() in place of the subject string,\n        because pattern can contain assertions such as\n        ^, $ or\n        (?&lt;=x). Compare:\n        \n         \n\n&lt;?php$subject&nbsp;=&nbsp;\"abcdef\";$pattern&nbsp;=&nbsp;'\/^def\/';preg_match($pattern,&nbsp;$subject,&nbsp;$matches,&nbsp;PREG_OFFSET_CAPTURE,&nbsp;3);print_r($matches);?&gt;\n\n\n         \n\n         The above example will output:\n         \n\nArray\n(\n)\n\n         \n         \n          while this example\n         \n         \n\n&lt;?php$subject&nbsp;=&nbsp;\"abcdef\";$pattern&nbsp;=&nbsp;'\/^def\/';preg_match($pattern,&nbsp;substr($subject,3),&nbsp;$matches,&nbsp;PREG_OFFSET_CAPTURE);print_r($matches);?&gt;\n\n\n         \n\n         \n          will produce\n         \n         \n\nArray\n(\n    [0] =&gt; Array\n        (\n            [0] =&gt; def\n            [1] =&gt; 0\n        )\n\n)\n\n         \n        \n       \n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   preg_match() returns the number of times\n   pattern matches. That will be either 0 times\n   (no match) or 1 time because preg_match() will stop\n   searching after the first match. preg_match_all()\n   on the contrary will continue until it reaches the end of\n   subject.\n   preg_match() returns FALSE if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.3.6\n       \n        Returns FALSE if offset is higher than\n        subject length.\n       \n      \n\n      \n       5.2.2\n       \n        Named subpatterns now accept the\n        syntax (?&lt;name&gt;)\n        and (?&#039;name&#039;) as well\n        as (?P&lt;name&gt;). Previous versions\n        accepted only (?P&lt;name&gt;).\n       \n      \n\n      \n       4.3.3\n       \n        The offset parameter was added\n       \n      \n\n      \n       4.3.0\n       \n        The PREG_OFFSET_CAPTURE flag was added\n       \n      \n\n      \n       4.3.0\n       \n        The flags parameter was added\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Find the string of text &quot;php&quot;\n    \n\n&lt;?php\/\/&nbsp;The&nbsp;\"i\"&nbsp;after&nbsp;the&nbsp;pattern&nbsp;delimiter&nbsp;indicates&nbsp;a&nbsp;case-insensitive&nbsp;searchif&nbsp;(preg_match(\"\/php\/i\",&nbsp;\"PHP&nbsp;is&nbsp;the&nbsp;web&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice.\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;found.\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found.\";}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Find the word &quot;web&quot;\n    \n\n&lt;?php\/*&nbsp;The&nbsp;\\b&nbsp;in&nbsp;the&nbsp;pattern&nbsp;indicates&nbsp;a&nbsp;word&nbsp;boundary,&nbsp;so&nbsp;only&nbsp;the&nbsp;distinct&nbsp;*&nbsp;word&nbsp;\"web\"&nbsp;is&nbsp;matched,&nbsp;and&nbsp;not&nbsp;a&nbsp;word&nbsp;partial&nbsp;like&nbsp;\"webbing\"&nbsp;or&nbsp;\"cobweb\"&nbsp;*\/if&nbsp;(preg_match(\"\/\\bweb\\b\/i\",&nbsp;\"PHP&nbsp;is&nbsp;the&nbsp;web&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice.\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;found.\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found.\";}if&nbsp;(preg_match(\"\/\\bweb\\b\/i\",&nbsp;\"PHP&nbsp;is&nbsp;the&nbsp;website&nbsp;scripting&nbsp;language&nbsp;of&nbsp;choice.\"))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;found.\";}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"A&nbsp;match&nbsp;was&nbsp;not&nbsp;found.\";}?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #3 Getting the domain name out of a URL\n    \n\n&lt;?php\/\/&nbsp;get&nbsp;host&nbsp;name&nbsp;from&nbsp;URLpreg_match('@^(?:http:\/\/)?([^\/]+)@i',&nbsp;&nbsp;&nbsp;&nbsp;\"http:\/\/www.php.net\/index.html\",&nbsp;$matches);$host&nbsp;=&nbsp;$matches[1];\/\/&nbsp;get&nbsp;last&nbsp;two&nbsp;segments&nbsp;of&nbsp;host&nbsp;namepreg_match('\/[^.]+\\.[^.]+$\/',&nbsp;$host,&nbsp;$matches);echo&nbsp;\"domain&nbsp;name&nbsp;is:&nbsp;{$matches[0]}\\n\";?&gt;\n\n\n    \n\n    The above example will output:\n    \n\ndomain name is: php.net\n\n    \n   \n  \n  \n   \n    Example #4 Using named subpattern\n    \n\n&lt;?php$str&nbsp;=&nbsp;'foobar:&nbsp;2008';preg_match('\/(?P&lt;name&gt;\\w+):&nbsp;(?P&lt;digit&gt;\\d+)\/',&nbsp;$str,&nbsp;$matches);\/*&nbsp;This&nbsp;also&nbsp;works&nbsp;in&nbsp;PHP&nbsp;5.2.2&nbsp;(PCRE&nbsp;7.0)&nbsp;and&nbsp;later,&nbsp;however&nbsp;&nbsp;*&nbsp;the&nbsp;above&nbsp;form&nbsp;is&nbsp;recommended&nbsp;for&nbsp;backwards&nbsp;compatibility&nbsp;*\/\/\/&nbsp;preg_match('\/(?&lt;name&gt;\\w+):&nbsp;(?&lt;digit&gt;\\d+)\/',&nbsp;$str,&nbsp;$matches);print_r($matches);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nArray\n(\n    [0] =&gt; foobar: 2008\n    [name] =&gt; foobar\n    [1] =&gt; foobar\n    [digit] =&gt; 2008\n    [2] =&gt; 2008\n)\n\n    \n   \n  \n \n\n\n \n  Notes\n  Tip\n   \n    Do not use preg_match() if you only want to check if\n    one string is contained in another string. Use\n    strpos() or strstr() instead as\n    they will be faster.\n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_match_all() - Perform a global regular expression match\n    preg_replace() - Perform a regular expression search and replace\n    preg_split() - Split string by a regular expression\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n\n"},{"url":"http:\/\/www.php.net\/manual\/en\/function.preg-replace.php","title":"preg_replace","description":"\n \n  preg_replace\n  (PHP 4, PHP 5)preg_replace &mdash; Perform a regular expression search and replace\n\n \n\n \n  Description\n  \n   mixed preg_replace\n    ( mixed $pattern\n   , mixed $replacement\n   , mixed $subject\n   [, int $limit = -1\n   [, int &$count\n  ]] )\n\n  \n   Searches subject for matches to\n   pattern and replaces them with\n   replacement.\n  \n \n\n\n \n  Parameters\n  \n   \n\n    \n\n     pattern\n     \n\n      \n       The pattern to search for. It can be either a string or an array with\n       strings.\n      \n      \n       Several PCRE modifiers\n       are also available, including &#039;e&#039; (PREG_REPLACE_EVAL), which\n       is specific to this function.\n      \n     \n\n    \n\n    \n\n     replacement\n     \n\n      \n       The string or an array with strings to replace. If this parameter is a\n       string and the pattern parameter is an array,\n       all patterns will be replaced by that string. If both\n       pattern and replacement\n       parameters are arrays, each pattern will be\n       replaced by the replacement counterpart. If\n       there are fewer elements in the replacement\n       array than in the pattern array, any extra\n       patterns will be replaced by an empty string.\n      \n      \n       replacement may contain references of the form\n       \\\\n or (since PHP 4.0.4)\n       $n, with the latter form\n       being the preferred one. Every such reference will be replaced by the text\n       captured by the n&#039;th parenthesized pattern.\n       n can be from 0 to 99, and\n       \\\\0 or $0 refers to the text matched\n       by the whole pattern. Opening parentheses are counted from left to right\n       (starting from 1) to obtain the number of the capturing subpattern.\n       To use backslash in replacement, it must be doubled\n       (&quot;\\\\\\\\&quot; PHP string).\n      \n      \n       When working with a replacement pattern where a backreference is \n       immediately followed by another number (i.e.: placing a literal number\n       immediately after a matched pattern), you cannot use the familiar \n       \\\\1 notation for your backreference.  \n       \\\\11, for example, would confuse\n       preg_replace() since it does not know whether you\n       want the \\\\1 backreference followed by a literal \n       1, or the \\\\11 backreference\n       followed by nothing.  In this case the solution is to use \n       \\${1}1.  This creates an isolated \n       $1 backreference, leaving the 1\n       as a literal.\n      \n      \n       When using the e modifier, this function escapes\n       some characters (namely &#039;, &quot;,\n       \\ and NULL) in the strings that replace the\n       backreferences. This is done to ensure that no syntax errors arise\n       from backreference usage with either single or double quotes (e.g.\n       &#039;strlen(\\&#039;$1\\&#039;)+strlen(&quot;$2&quot;)&#039;). Make sure you are\n       aware of PHP&#039;s string\n       syntax to know exactly how the interpreted string will look.\n      \n     \n\n    \n\n    \n\n     subject\n     \n\n      \n       The string or an array with strings to search and replace.\n      \n      \n       If subject is an array, then the search and\n       replace is performed on every entry of subject,\n       and the return value is an array as well.\n      \n     \n\n    \n\n    \n\n     limit\n     \n\n      \n       The maximum possible replacements for each pattern in each\n       subject string. Defaults to\n       -1 (no limit).\n      \n     \n\n    \n\n    \n\n     count\n     \n\n      \n       If specified, this variable will be filled with the number of\n       replacements done.\n      \n     \n\n    \n\n   \n\n  \n \n\n\n \n  Return Values\n  \n   preg_replace() returns an array if the\n   subject parameter is an array, or a string\n   otherwise.\n  \n  \n   If matches are found, the new subject will\n   be returned, otherwise subject will be\n   returned unchanged or NULL if an error occurred.\n  \n \n\n\n \n  Changelog\n  \n   \n    \n     \n      \n       Version\n       Description\n      \n\n     \n\n     \n      \n       5.1.0\n       \n        Added the count parameter\n       \n      \n\n      \n       4.0.4\n       \n        Added the &#039;$n&#039; form for the replacement parameter\n       \n      \n\n      \n       4.0.2\n       \n        Added the limit parameter\n       \n      \n\n     \n    \n   \n\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Using backreferences followed by numeric literals\n    \n\n&lt;?php$string&nbsp;=&nbsp;'April&nbsp;15,&nbsp;2003';$pattern&nbsp;=&nbsp;'\/(\\w+)&nbsp;(\\d+),&nbsp;(\\d+)\/i';$replacement&nbsp;=&nbsp;'${1}1,$3';echo&nbsp;preg_replace($pattern,&nbsp;$replacement,&nbsp;$string);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nApril1,2003\n\n    \n   \n  \n  \n   \n    Example #2 Using indexed arrays with preg_replace()\n    \n\n&lt;?php$string&nbsp;=&nbsp;'The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.';$patterns&nbsp;=&nbsp;array();$patterns[0]&nbsp;=&nbsp;'\/quick\/';$patterns[1]&nbsp;=&nbsp;'\/brown\/';$patterns[2]&nbsp;=&nbsp;'\/fox\/';$replacements&nbsp;=&nbsp;array();$replacements[2]&nbsp;=&nbsp;'bear';$replacements[1]&nbsp;=&nbsp;'black';$replacements[0]&nbsp;=&nbsp;'slow';echo&nbsp;preg_replace($patterns,&nbsp;$replacements,&nbsp;$string);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThe bear black slow jumped over the lazy dog.\n\n    \n    \n     By ksorting patterns and replacements, we should get what we wanted.\n    \n    \n\n&lt;?phpksort($patterns);ksort($replacements);echo&nbsp;preg_replace($patterns,&nbsp;$replacements,&nbsp;$string);?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nThe slow black bear jumped over the lazy dog.\n\n    \n   \n  \n  \n   \n    Example #3 Replacing several values\n    \n\n&lt;?php$patterns&nbsp;=&nbsp;array&nbsp;('\/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})\/',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'\/^\\s*{(\\w+)}\\s*=\/');$replace&nbsp;=&nbsp;array&nbsp;('\\3\/\\4\/\\1\\2',&nbsp;'$\\1&nbsp;=');echo&nbsp;preg_replace($patterns,&nbsp;$replace,&nbsp;'{startDate}&nbsp;=&nbsp;1999-5-27');?&gt;\n\n\n    \n\n    The above example will output:\n    \n\n$startDate = 5\/27\/1999\n\n    \n   \n  \n  \n   \n    Example #4 Strip whitespace\n    \n     This example strips excess whitespace from a string.\n    \n    \n\n&lt;?php$str&nbsp;=&nbsp;'foo&nbsp;&nbsp;&nbsp;o';$str&nbsp;=&nbsp;preg_replace('\/\\s\\s+\/',&nbsp;'&nbsp;',&nbsp;$str);\/\/&nbsp;This&nbsp;will&nbsp;be&nbsp;'foo&nbsp;o'&nbsp;nowecho&nbsp;$str;?&gt;\n\n\n    \n\n   \n  \n  \n   \n    Example #5 Using the count parameter\n    \n\n&lt;?php$count&nbsp;=&nbsp;0;echo&nbsp;preg_replace(array('\/\\d\/',&nbsp;'\/\\s\/'),&nbsp;'*',&nbsp;'xp&nbsp;4&nbsp;to',&nbsp;-1&nbsp;,&nbsp;$count);echo&nbsp;$count;&nbsp;\/\/3?&gt;\n\n\n    \n\n    The above example will output:\n    \n\nxp***to\n3\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    When using arrays with pattern and\n    replacement, the keys are processed in the order\n    they appear in the array. This is not necessarily the\n    same as the numerical index order. If you use indexes to identify which\n    pattern should be replaced by which\n    replacement, you should perform a\n    ksort() on each array prior to calling\n    preg_replace().\n   \n  \n \n\n\n \n  See Also\n  \n   \n    PCRE Patterns\n    preg_filter() - Perform a regular expression search and replace\n    preg_match() - Perform a regular expression match\n    preg_replace_callback() - Perform a regular expression search and replace using a callback\n    preg_split() - Split string by a regular expression\n    preg_last_error() - Returns the error code of the last PCRE regex execution\n   \n  \n \n\n"}]